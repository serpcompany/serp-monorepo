[
  {
    "owner": "redis",
    "repo": "redis-doc",
    "content": "TITLE: Adding Commands Incrementally to a Redis User's ACL\nDESCRIPTION: This example illustrates how subsequent ACL SETUSER commands add permissions incrementally. The first grants +set permission, and the second adds +get. The resulting ACL allows both GET and SET commands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER myuser +set\nOK\n> ACL SETUSER myuser +get\nOK\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Username and Password (Redis 6.0+ with ACL)\nDESCRIPTION: This code snippet demonstrates how to authenticate a Redis client connection using a username and password when the Redis server is using the ACL system (available from Redis 6.0 onwards). The username and password must match an existing user defined in the ACL configuration. The connection will be authenticated based on the specified username.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/auth.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\nAUTH <username> <password>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Shard Information with CLUSTER SHARDS\nDESCRIPTION: This example demonstrates how to use the `CLUSTER SHARDS` command to retrieve information about the shards in a Redis cluster. The command returns an array of shards, where each shard contains information about the slots it serves and the nodes within the shard.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-shards.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> CLUSTER SHARDS\n1) 1) \"slots\"\n   2) 1) (integer) 0\n      2) (integer) 5460\n   3) \"nodes\"\n   4) 1)  1) \"id\"\n          2) \"e10b7051d6bf2d5febd39a2be297bbaea6084111\"\n          3) \"port\"\n          4) (integer) 30001\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"master\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n      2)  1) \"id\"\n          2) \"1901f5962d865341e81c85f9f596b1e7160c35ce\"\n          3) \"port\"\n          4) (integer) 30006\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"replica\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n2) 1) \"slots\"\n   2) 1) (integer) 10923\n      2) (integer) 16383\n   3) \"nodes\"\n   4) 1)  1) \"id\"\n          2) \"fd20502fe1b32fc32c15b69b0a9537551f162f1f\"\n          3) \"port\"\n          4) (integer) 30003\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"master\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n      2)  1) \"id\"\n          2) \"6daa25c08025a0c7e4cc0d1ab255949ce6cee902\"\n          3) \"port\"\n          4) (integer) 30005\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"replica\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n3) 1) \"slots\"\n   2) 1) (integer) 5461\n      2) (integer) 10922\n   3) \"nodes\"\n   4) 1)  1) \"id\"\n          2) \"a4a3f445ead085eb3eb9ee7d8c644ec4481ec9be\"\n          3) \"port\"\n          4) (integer) 30002\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"master\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n      2)  1) \"id\"\n          2) \"da6d5847aa019e9b9d2a8aa24a75f856fd3456cc\"\n          3) \"port\"\n          4) (integer) 30004\n          5) \"ip\"\n          6) \"127.0.0.1\"\n          7) \"endpoint\"\n          8) \"127.0.0.1\"\n          9) \"role\"\n         10) \"replica\"\n         11) \"replication-offset\"\n         12) (integer) 72156\n         13) \"health\"\n         14) \"online\"\n```\n\n----------------------------------------\n\nTITLE: Redis HMGET Usage Example\nDESCRIPTION: This example demonstrates how to use the HMGET command to retrieve the values of 'field1', 'field2', and 'nofield' from the hash stored at key 'myhash'. The command returns an array of values, with 'nil' for fields that do not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hmget.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHMGET myhash field1 field2 nofield\n```\n\n----------------------------------------\n\nTITLE: Incrementing Hash Field Value - Redis\nDESCRIPTION: This example demonstrates how to increment the value of a specific field in a Redis hash using HINCRBY.  It shows how to increment and decrement a numeric field by a specified integer value.  The command returns the new value of the field after the increment.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/hashes.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> HINCRBY bike:1 price 100\n(integer) 5072\n> HINCRBY bike:1 price -100\n(integer) 4972\n```\n\n----------------------------------------\n\nTITLE: Redis Optimistic Locking with WATCH\nDESCRIPTION: This code snippet demonstrates how to use WATCH for optimistic locking in Redis transactions. It watches a key, retrieves its value, increments it, and then uses MULTI/EXEC to set the new value. If another client modifies the key between WATCH and EXEC, the transaction fails, and the operation must be retried.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWATCH mykey\nval = GET mykey\nval = val + 1\nMULTI\nSET mykey $val\nEXEC\n```\n\n----------------------------------------\n\nTITLE: Increment Key Value with INCRBY - Redis CLI\nDESCRIPTION: This example demonstrates how to use the INCRBY command to increment the value associated with 'mykey' by 5. It first sets 'mykey' to \"10\" and then increments it using INCRBY. The expected result is that 'mykey' will hold the value 15 after the INCRBY operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incrby.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSET mykey \"10\"\nINCRBY mykey 5\n```\n\n----------------------------------------\n\nTITLE: Starting Cluster Using create-cluster Script\nDESCRIPTION: These commands use the `create-cluster` script to start and create a Redis Cluster. It first starts the Redis instances, then creates the cluster using the started instances. Finally it describes the command to stop the cluster.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncreate-cluster start\ncreate-cluster create\ncreate-cluster stop\n```\n\n----------------------------------------\n\nTITLE: Disable Transparent Huge Pages (THP) on Linux\nDESCRIPTION: This command disables transparent huge pages (THP) on Linux. THP can negatively impact Redis performance. It's crucial to disable it and restart the Redis process after applying the change. This writes 'never' to the enabled THP setting, and should be done as root.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Adding and Querying Geospatial Data in Redis CLI\nDESCRIPTION: This example demonstrates adding members with longitude and latitude to a Redis geospatial index named 'Sicily' using the GEOADD command. It then retrieves the positions of 'Palermo', 'Catania', and a non-existent member 'NonExisting' using the GEOPOS command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geopos.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOPOS Sicily Palermo Catania NonExisting\n```\n\n----------------------------------------\n\nTITLE: Redis LPOP Examples\nDESCRIPTION: Illustrates the usage of the LPOP command in Redis.  The examples show how to push elements onto a list, pop single or multiple elements, and retrieve the remaining list using LRANGE. It demonstrates fundamental list operations in Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpop.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nLPOP mylist\nLPOP mylist 2\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Replication: `REPLICAOF host port`\nDESCRIPTION: This command configures the Redis server to act as a replica of the specified master. The server will start synchronizing its data with the master located at the given hostname and port. Any existing data on the replica will be discarded during the initial synchronization process.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/replicaof.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nREPLICAOF 127.0.0.1 6799\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Keys with MSET in Redis CLI\nDESCRIPTION: This example demonstrates how to use the MSET command in Redis to set multiple keys to their respective values in a single atomic operation.  The subsequent GET commands verify that the keys have been set correctly. MSET overwrites existing values if the keys already exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/mset.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nMSET key1 \"Hello\" key2 \"World\"\nGET key1\nGET key2\n```\n\n----------------------------------------\n\nTITLE: Redis interactive mode example\nDESCRIPTION: This example shows how to start the Redis CLI in interactive mode and execute the PING command.  The prompt shows the connected server's hostname and port. Entering redis-cli without arguments starts the interactive mode. This allows for direct command execution against the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ redis-cli\n127.0.0.1:6379> PING\nPONG\n```\n\n----------------------------------------\n\nTITLE: Storing and retrieving strings with redis-py\nDESCRIPTION: This snippet demonstrates storing and retrieving a simple string value in Redis using the `set` and `get` methods. It assumes that a Redis client object `r` has already been initialized and is connected to a Redis instance.  The `decode_responses=True` parameter is assumed to be used when initializing the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nr.set('foo', 'bar')\n# True\nr.get('foo')\n# bar\n```\n\n----------------------------------------\n\nTITLE: STRLEN Command Examples in Redis CLI\nDESCRIPTION: These examples demonstrate how to use the STRLEN command in the Redis command-line interface (CLI). The first example sets a key \"mykey\" to the string \"Hello world\" and then uses STRLEN to retrieve its length. The second example attempts to get the length of a non-existent key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/strlen.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello world\"\nSTRLEN mykey\nSTRLEN nonexisting\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Redis Lists with LPUSH and RPUSH\nDESCRIPTION: This example shows how to add elements to the left (head) of a Redis list using LPUSH and to the right (tail) of a Redis list using RPUSH. It also demonstrates how to retrieve a range of elements from the list using LRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> RPUSH bikes:repairs bike:1\n(integer) 1\n> RPUSH bikes:repairs bike:2\n(integer) 2\n> LPUSH bikes:repairs bike:important_bike\n(integer) 3\n> LRANGE bikes:repairs 0 -1\n1) \"bike:important_bike\"\n2) \"bike:1\"\n3) \"bike:2\"\n```\n\n----------------------------------------\n\nTITLE: Decrementing a Redis Key's Value using DECRBY in redis-cli\nDESCRIPTION: This example demonstrates how to decrement the integer value stored at the key `mykey` by 3 using the `DECRBY` command in redis-cli.  First, the key `mykey` is set to the string \"10\".  Then, `DECRBY` is used to decrease the value by 3.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/decrby.md#_snippet_0\n\nLANGUAGE: redis-cli\nCODE:\n```\nSET mykey \"10\"\nDECRBY mykey 3\n```\n\n----------------------------------------\n\nTITLE: Replica ACL Rule Configuration\nDESCRIPTION: This ACL rule grants a Redis replica user the minimum necessary permissions to replicate data from a Redis master. It allows the replica to execute the `PSYNC`, `REPLCONF`, and `PING` commands. The user is authenticated with a password specified by '>somepassword'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nACL setuser replica-user on >somepassword +psync +replconf +ping\n```\n\n----------------------------------------\n\nTITLE: SCAN with MATCH and COUNT\nDESCRIPTION: This example demonstrates the usage of the `SCAN` command with the `MATCH` option and `COUNT` option to iterate over the keys that match a given pattern ('*11*').  It highlights that the `MATCH` filter is applied after elements are retrieved and using COUNT can force the command to do more scanning for that iteration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scan.md#_snippet_2\n\nLANGUAGE: Redis\nCODE:\n```\nredis 127.0.0.1:6379> scan 0 MATCH *11*\n1) \"288\"\n2) 1) \"key:911\"\nredis 127.0.0.1:6379> scan 288 MATCH *11*\n1) \"224\"\n2) (empty list or set)\nredis 127.0.0.1:6379> scan 224 MATCH *11*\n1) \"80\"\n2) (empty list or set)\nredis 127.0.0.1:6379> scan 80 MATCH *11*\n1) \"176\"\n2) (empty list or set)\nredis 127.0.0.1:6379> scan 176 MATCH *11* COUNT 1000\n1) \"0\"\n2)  1) \"key:611\"\n    2) \"key:711\"\n    3) \"key:118\"\n    4) \"key:117\"\n    5) \"key:311\"\n    6) \"key:112\"\n    7) \"key:111\"\n    8) \"key:110\"\n    9) \"key:113\"\n   10) \"key:211\"\n   11) \"key:411\"\n   12) \"key:115\"\n   13) \"key:116\"\n   14) \"key:114\"\n   15) \"key:119\"\n   16) \"key:811\"\n   17) \"key:511\"\n   18) \"key:11\"\nredis 127.0.0.1:6379>\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving String\nDESCRIPTION: This example shows how to store and retrieve a simple string value in Redis using the `Set` and `Get` methods.  A context is used for managing the operation's lifecycle. Requires `go-redis/v9`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\n\nerr := client.Set(ctx, \"foo\", \"bar\", 0).Err()\nif err != nil {\n    panic(err)\n}\n\nval, err := client.Get(ctx, \"foo\").Result()\nif err != nil {\n    panic(err)\n}\nfmt.Println(\"foo\", val)\n```\n\n----------------------------------------\n\nTITLE: Using Redis Lists as a Stack (LIFO)\nDESCRIPTION: This example illustrates how to use Redis lists to implement a stack (Last-In, First-Out). Elements are added to the head of the list using LPUSH and removed from the head using LPOP, simulating stack behavior.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> LPUSH bikes:repairs bike:1\n(integer) 1\n> LPUSH bikes:repairs bike:2\n(integer) 2\n> LPOP bikes:repairs\n\"bike:2\"\n> LPOP bikes:repairs\n\"bike:1\"\n```\n\n----------------------------------------\n\nTITLE: Using Redis HSET Command\nDESCRIPTION: Illustrates how to use the HSET command in Redis to set fields and their values in a hash. It showcases creating a new hash if it doesn't exist and overwriting existing fields.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hset.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET myhash field1 \"Hello\"\nHGET myhash field1\nHSET myhash field2 \"Hi\" field3 \"World\"\nHGET myhash field2\nHGET myhash field3\nHGETALL myhash\n```\n\n----------------------------------------\n\nTITLE: Handle Redis Client Errors (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to handle errors that may occur within the Redis client using the node-redis library. It's crucial to implement an error listener to prevent unhandled exceptions from causing the Node.js process to terminate unexpectedly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  // ... client options\n});\n// Always ensure there's a listener for errors in the client to prevent process crashes due to unhandled errors\nclient.on('error', error => {\n    console.error(`Redis client error:`, error);\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing score in Redis Sorted Set using ZINCRBY (CLI)\nDESCRIPTION: This example demonstrates how to use the ZINCRBY command to increment the score of a member in a Redis sorted set. It first adds two members to the set, then increments the score of one member, and finally retrieves the sorted set with scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zincrby.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZINCRBY myzset 2 \"one\"\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Using Redis Lists as a Queue (FIFO)\nDESCRIPTION: This example demonstrates how to use Redis lists to implement a queue (First-In, First-Out). Elements are added to the head of the list using LPUSH and removed from the tail using RPOP, simulating queue behavior.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> LPUSH bikes:repairs bike:1\n(integer) 1\n> LPUSH bikes:repairs bike:2\n(integer) 2\n> RPOP bikes:repairs\n\"bike:1\"\n> RPOP bikes:repairs\n\"bike:2\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis Configuration Parameters with CONFIG GET\nDESCRIPTION: This snippet demonstrates how to use the `CONFIG GET` command in Redis to retrieve configuration parameters matching specified patterns. The command takes multiple arguments, which are interpreted as glob-style patterns. It returns a list of key-value pairs representing the matched configuration parameters and their values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/config-get.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> config get *max-*-entries* maxmemory\n 1) \"maxmemory\"\n 2) \"0\"\n 3) \"hash-max-listpack-entries\"\n 4) \"512\"\n 5) \"hash-max-ziplist-entries\"\n 6) \"512\"\n 7) \"set-max-intset-entries\"\n 8) \"512\"\n 9) \"zset-max-listpack-entries\"\n10) \"128\"\n11) \"zset-max-ziplist-entries\"\n12) \"128\"\n```\n\n----------------------------------------\n\nTITLE: Managing Connections with Pooling - Lettuce\nDESCRIPTION: This Java snippet shows how to manage Redis connections using Lettuce's asynchronous connection pool. It creates a `RedisClient`, configures an asynchronous pool, acquires connections from the pool, executes commands in a pipeline, and releases connections back to the pool. It includes transaction management. Ensure proper initialization and termination of the pool and client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.TransactionResult;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.support.*;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\n\npublic class Pool {\n  public static void main(String[] args) {\n    RedisClient client = RedisClient.create();\n\n    String host = \"localhost\";\n    int port = 6379;\n\n    CompletionStage<BoundedAsyncPool<StatefulRedisConnection<String, String>>> poolFuture\n        = AsyncConnectionPoolSupport.createBoundedObjectPoolAsync(\n            () -> client.connectAsync(StringCodec.UTF8, RedisURI.create(host, port)),\n            BoundedPoolConfig.create());\n\n    // await poolFuture initialization to avoid NoSuchElementException: Pool exhausted when starting your application\n    AsyncPool<StatefulRedisConnection<String, String>> pool = poolFuture.toCompletableFuture()\n        .join();\n\n    // execute work\n    CompletableFuture<TransactionResult> transactionResult = pool.acquire()\n        .thenCompose(connection -> {\n\n          RedisAsyncCommands<String, String> async = connection.async();\n\n          async.multi();\n          async.set(\"key\", \"value\");\n          async.set(\"key2\", \"value2\");\n          System.out.println(\"Executed commands in pipeline\");\n          return async.exec().whenComplete((s, throwable) -> pool.release(connection));\n        });\n    transactionResult.join();\n\n    // terminating\n    pool.closeAsync();\n\n    // after pool completion\n    client.shutdownAsync();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Atomic Counter Reset with GETSET and INCR - Redis CLI\nDESCRIPTION: This snippet demonstrates how to use `GETSET` in conjunction with `INCR` for implementing an atomic counter with reset functionality. The `INCR` command increments the counter, and `GETSET` retrieves the current value and resets it to zero atomically.  The `GET` command then retrieves the new value (0).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/getset.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nINCR mycounter\nGETSET mycounter \"0\"\nGET mycounter\n```\n\n----------------------------------------\n\nTITLE: Incrementing Hash Field with HINCRBY in Redis\nDESCRIPTION: This example demonstrates how to use the HINCRBY command to increment and decrement a field in a Redis hash. It first sets an initial value for the field using HSET, and then uses HINCRBY to increment and decrement the field by different amounts. The `increment` argument can be positive or negative, allowing for both increment and decrement operations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hincrby.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET myhash field 5\nHINCRBY myhash field 1\nHINCRBY myhash field -1\nHINCRBY myhash field -10\n```\n\n----------------------------------------\n\nTITLE: Loading ACL from File in Redis\nDESCRIPTION: The `ACL LOAD` command reloads Access Control Lists (ACLs) from the configured `aclfile`.  If the file contains any errors, the command will fail and the current ACLs will remain active. A successful reload replaces all existing ACL rules with those from the file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-load.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> ACL LOAD\n+OK\n```\n\nLANGUAGE: Redis\nCODE:\n```\n> ACL LOAD\n-ERR /tmp/foo:1: Unknown command or category name in ACL...\n```\n\n----------------------------------------\n\nTITLE: Rate Limiter Implementation 2 - Initial Version (Race Condition)\nDESCRIPTION: This code attempts to implement a rate limiter using a single counter with potential race condition issue. If the client executes `INCR` successfully but fails to execute `EXPIRE`, the key is leaked.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incr.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFUNCTION LIMIT_API_CALL(ip):\ncurrent = GET(ip)\nIF current != NULL AND current > 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    value = INCR(ip)\n    IF value == 1 THEN\n        EXPIRE(ip,1)\n    END\n    PERFORM_API_CALL()\nEND\n```\n\n----------------------------------------\n\nTITLE: Check Key Existence and Delete Key - Redis\nDESCRIPTION: This example demonstrates how to check the existence of a key using the `EXISTS` command and delete a key using the `DEL` command in Redis. `EXISTS` returns 1 if the key exists and 0 if it doesn't. `DEL` returns the number of keys that were removed (1 if the key existed, 0 if not).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> set mykey hello\nOK\n> exists mykey\n(integer) 1\n> del mykey\n(integer) 1\n> exists mykey\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Configuring RDB Save Points in Redis\nDESCRIPTION: This configuration sets up Redis to automatically save a snapshot of the dataset to disk every 60 seconds if at least 1000 keys have changed. This is a basic example of how snapshotting can be configured in `redis.conf`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsave 60 1000\n```\n\n----------------------------------------\n\nTITLE: Setting String with NX and XX Options in Redis\nDESCRIPTION: This example shows how to use the NX and XX options with the SET command in Redis. NX sets the value only if the key does not already exist. XX sets the value only if the key already exists.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/strings.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> set bike:1 bike nx\n(nil)\n> set bike:1 bike xx\nOK\n```\n\n----------------------------------------\n\nTITLE: Redis GETDEL Usage Example\nDESCRIPTION: Demonstrates the usage of the GETDEL command to retrieve the value associated with a key and then delete the key from the Redis database. It assumes a key named 'mykey' is set with the value \"Hello\".  After GETDEL, subsequent GET will return nil.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/getdel.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nGETDEL mykey\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Navigation Session Pattern with Redis\nDESCRIPTION: This code snippet illustrates how to implement a navigation session pattern using Redis. It uses RPUSH to add page views to a list and EXPIRE to set a timeout for the session key. This ensures that only recent page views (within a specified time window) are tracked. It leverages MULTI and EXEC to ensure atomicity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/expire.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nMULTI\nRPUSH pagewviews.user:<userid> http://.....\nEXPIRE pagewviews.user:<userid> 60\nEXEC\n```\n\n----------------------------------------\n\nTITLE: Scanning for Big Keys with Redis CLI\nDESCRIPTION: This command utilizes the `--bigkeys` option of `redis-cli` to scan the Redis keyspace for large keys and provide information about the data types present.  It provides a summary of the largest keys found for each data type and overall dataset statistics. The -i option can be used to throttle the scanning process.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --bigkeys\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in Redis CLI\nDESCRIPTION: This code snippet demonstrates how to use the `EXISTS` command in the Redis CLI to check if one or more keys exist. If a key exists, EXISTS returns 1, otherwise 0. It shows examples with existing and non-existing keys, including checking multiple keys at once.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/exists.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSET key1 \"Hello\"\nEXISTS key1\nEXISTS nosuchkey\nSET key2 \"World\"\nEXISTS key1 key2 nosuchkey\n```\n\n----------------------------------------\n\nTITLE: Configuring Master Authentication Permanently\nDESCRIPTION: This configuration sets the master authentication password in the redis.conf file. It ensures that the replica uses the specified password for all sync operations with the master. The password must replace `<password>`\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/replication.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmasterauth <password>\n```\n\n----------------------------------------\n\nTITLE: Running Redis Sentinel\nDESCRIPTION: This snippet demonstrates how to start Redis Sentinel using either the `redis-sentinel` executable or the `redis-server` executable with the `--sentinel` option. It emphasizes the mandatory requirement of providing a configuration file, as Sentinel uses this file to persist and reload its state upon restarts.  The file path must be writable for Sentinel to start successfully. Sentinel listens on port 26379 by default, so firewall configurations must permit connections on this port for proper Sentinel communication.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nredis-sentinel /path/to/sentinel.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\nredis-server /path/to/sentinel.conf --sentinel\n```\n\n----------------------------------------\n\nTITLE: Blocking stream read\nDESCRIPTION: Reads up to 100 new stream entries from the `race:france` stream. It starts reading from the end of the stream (`$`) and blocks for up to 300 milliseconds (`BLOCK 300`) if no new entries are written.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\nXREAD COUNT 100 BLOCK 300 STREAMS race:france $\n```\n\n----------------------------------------\n\nTITLE: Paginating Stream Query with XRANGE and COUNT - Step 1\nDESCRIPTION: This example demonstrates the first step of paginating through a Redis stream using XRANGE and the COUNT option. It retrieves the first 2 entries from the 'race:france' stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_12\n\nLANGUAGE: redis\nCODE:\n```\n> XRANGE race:france - + COUNT 2\n```\n\n----------------------------------------\n\nTITLE: Setting Key with Timeout using EXPIRE\nDESCRIPTION: This example demonstrates setting a key with a value and then setting a timeout on the key using the EXPIRE command. It also shows how to check the remaining time-to-live (TTL) of the key and how setting the key again affects the timeout.  The example then sets expiry conditions using XX (only if expiry exists) and NX (only if no expiry exists).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/expire.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nEXPIRE mykey 10\nTTL mykey\nSET mykey \"Hello World\"\nTTL mykey\nEXPIRE mykey 10 XX\nTTL mykey\nEXPIRE mykey 10 NX\nTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Lock with SETNX (Redis CLI)\nDESCRIPTION: This snippet shows how SETNX can be used to attempt to acquire a lock by setting a key with a timeout value.  A successful SETNX (returns 1) indicates that the lock has been acquired. This is a basic locking pattern that does not address race conditions or deadlocks.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/setnx.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nSETNX lock.foo <current Unix time + lock timeout + 1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel auth-pass\nDESCRIPTION: This code shows how to configure Sentinel to connect to Redis server instances when they are configured with `requirepass`. The `sentinel auth-pass` directive specifies the password to use for authentication with the master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nsentinel auth-pass <master-name> <password>\n```\n\n----------------------------------------\n\nTITLE: Redis Transaction Example\nDESCRIPTION: This example demonstrates a basic Redis transaction that increments the values of keys 'foo' and 'bar' atomically using the MULTI, INCR, and EXEC commands. The expected output shows the server responding with 'QUEUED' for each command within the transaction and an array of results upon executing EXEC.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> MULTI\nOK\n> INCR foo\nQUEUED\n> INCR bar\nQUEUED\n> EXEC\n1) (integer) 1\n2) (integer) 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving External Keys in Redis\nDESCRIPTION: This snippet demonstrates how to retrieve external keys using the `GET` option, based on the elements in the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_7\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist BY weight_* GET object_*\n```\n\n----------------------------------------\n\nTITLE: Redis Set Key, Expire, and Check TTL - CLI Example\nDESCRIPTION: This example demonstrates setting a key with a value, setting an expiration time for the key, and then checking the remaining time to live using the TTL command. The example is shown in the Redis CLI syntax.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/ttl.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nEXPIRE mykey 10\nTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Getting hash length with HLEN in Redis CLI\nDESCRIPTION: This example demonstrates how to use the HLEN command in the Redis CLI to get the number of fields in a hash. It first creates a hash named 'myhash' with two fields, 'field1' and 'field2', and then uses HLEN to determine the number of fields in the hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hlen.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHLEN myhash\n```\n\n----------------------------------------\n\nTITLE: Deleting keys using DEL command in Redis CLI\nDESCRIPTION: This snippet demonstrates how to use the DEL command in the Redis command-line interface (CLI) to delete keys. The DEL command accepts one or more key names as arguments. If a key does not exist, it is ignored and no error is returned. The return value is the number of keys that were actually removed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/del.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"Hello\"\nSET key2 \"World\"\nDEL key1 key2 key3\n```\n\n----------------------------------------\n\nTITLE: Inspecting Pending Messages in Redis Stream Consumer Group (XPENDING)\nDESCRIPTION: This command retrieves the total number of pending messages in the consumer group, the lower and higher message ID among the pending messages, and a list of consumers along with their respective number of pending messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_26\n\nLANGUAGE: redis\nCODE:\n```\n> XPENDING race:italy italy_riders\n```\n\n----------------------------------------\n\nTITLE: Setting key with expiration - Redis CLI\nDESCRIPTION: This example demonstrates setting the key 'mykey' to the value 'Hello' with an expiration of 10 seconds using the SETEX command.  It then retrieves the remaining time-to-live (TTL) of the key and gets the value of the key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/setex.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSETEX mykey 10 \"Hello\"\nTTL mykey\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Performing Range Query with BYLEX in Redis\nDESCRIPTION: This snippet illustrates how to perform a range query using the ZRANGE command with the BYLEX option in Redis. It retrieves all entries in the sorted set that fall within the specified lexicographical range, effectively enabling prefix-based search completion.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_7\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex \"[bit\" \"[bit\\xff\" BYLEX\n```\n\n----------------------------------------\n\nTITLE: Redis GETEX Command Examples\nDESCRIPTION: These examples demonstrate the use of the GETEX command with different expiration options and TTL checks. The examples show setting a key, retrieving its value with GETEX, checking the TTL, setting an expiration with GETEX, and then checking the TTL again.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/getex.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nGETEX mykey\nTTL mykey\nGETEX mykey EX 60\nTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Kill Client with Filters - Redis\nDESCRIPTION: This snippet shows the new format of the CLIENT KILL command, which allows killing clients based on various attributes such as address, ID, type, username, and age. Multiple filters can be combined using a logical AND to target specific client connections.  The command returns the number of killed clients.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-kill.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCLIENT KILL <filter> <value> ... ... <filter> <value>\n```\n\n----------------------------------------\n\nTITLE: Get Score of Member in Sorted Set using ZSCORE (Redis CLI)\nDESCRIPTION: Retrieves the score associated with the member \"one\" from the sorted set \"myzset\" using the ZSCORE command. First, the member \"one\" is added to the sorted set \"myzset\" with a score of 1 using the ZADD command. If the key or member does not exist, nil is returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zscore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZSCORE myzset \"one\"\n```\n\n----------------------------------------\n\nTITLE: Rate Limiter Implementation 2 - Lua Script (Fixes Race Condition)\nDESCRIPTION: This Lua script addresses the race condition in the previous implementation by combining the INCR and EXPIRE operations into a single atomic operation using a Lua script executed by Redis.  Requires Redis version 2.6 or later.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incr.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal current\ncurrent = redis.call(\"incr\",KEYS[1])\nif current == 1 then\n    redis.call(\"expire\",KEYS[1],1)\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis\nDESCRIPTION: This code snippet demonstrates how to connect to a Redis server using `go-redis`.  It initializes a new Redis client with the address, password (if any), and database number.  Dependencies include the `go-redis/v9` package.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/redis/go-redis/v9\"\n)\n\nfunc main() {\n    client := redis.NewClient(&redis.Options{\n        Addr:\t  \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:\t\t  0,  // use default DB\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sentinel ACL Rule Configuration\nDESCRIPTION: This ACL rule allows a Sentinel user to execute the necessary commands for monitoring and managing a Redis cluster. It grants access to Pub/Sub channels and specific commands like `MULTI`, `SLAVEOF`, `PING`, `EXEC`, `SUBSCRIBE`, `CONFIG`, `ROLE`, `PUBLISH`, `INFO`, and `CLIENT`.  The user is authenticated with a password specified by '>somepassword'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nACL SETUSER sentinel-user on >somepassword allchannels +multi +slaveof +ping +exec +subscribe +config|rewrite +role +publish +info +client|setname +client|kill +script|kill\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Password (Redis pre-6.0)\nDESCRIPTION: This code snippet shows how to authenticate a Redis client connection using a password when the Redis server is configured with `requirepass`. This method is applicable to Redis versions prior to 6.0. The client needs to authenticate before sending any other commands, otherwise they will be denied.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/auth.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nAUTH <password>\n```\n\n----------------------------------------\n\nTITLE: Adding members to a Redis set using SADD\nDESCRIPTION: The `SADD` command adds the specified members to the set stored at the given key. If the key does not exist, a new set is created. Existing members are ignored. The example demonstrates adding \"Hello\" and \"World\" to the set \"myset\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sadd.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSADD myset \"Hello\"\nSADD myset \"World\"\nSADD myset \"World\"\n```\n\n----------------------------------------\n\nTITLE: Redis RPUSHX Example\nDESCRIPTION: Demonstrates the use of the RPUSHX command to append values to an existing Redis list. It shows that RPUSHX only adds elements if the list already exists, unlike RPUSH. LRANGE is used to view the list contents.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/rpushx.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"Hello\"\nRPUSHX mylist \"World\"\nRPUSHX myotherlist \"World\"\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Setting a Key-Value Pair in Redis\nDESCRIPTION: This snippet demonstrates the basic operation of setting a value associated with a key in Redis using the `SET` command. It shows how to store data and retrieve it later by referencing the key.  This is the fundamental building block of a key-value store.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSET foo bar\n```\n\n----------------------------------------\n\nTITLE: Install node-redis Package\nDESCRIPTION: This command installs the node-redis package using npm, which is necessary to interact with a Redis database from a Node.js application. The package provides the necessary functions and classes to establish a connection, send commands, and receive responses from the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install redis\n```\n\n----------------------------------------\n\nTITLE: Create ACL user with rules (Redis)\nDESCRIPTION: This example demonstrates how to create a Redis ACL user named 'virginia' who is active, can access any key, and can call the 'set' command. It showcases the use of 'on', 'allkeys', and '+set' rules to define user permissions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nACL SETUSER virginia on allkeys +set\n```\n\n----------------------------------------\n\nTITLE: Unblocking Redis Client with CLIENT UNBLOCK\nDESCRIPTION: This example demonstrates how to unblock a Redis client blocked in a BRPOP operation using CLIENT UNBLOCK from a separate control connection. The blocking connection first retrieves its client ID, then the control connection uses that ID to unblock it. The blocked connection receives a timeout response and can then be re-issued with a new key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-unblock.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nConnection A (blocking connection):\n> CLIENT ID\n2934\n> BRPOP key1 key2 key3 0\n(client is blocked)\n\n... Now we want to add a new key ...\n\nConnection B (control connection):\n> CLIENT UNBLOCK 2934\n1\n\nConnection A (blocking connection):\n... BRPOP reply with timeout ...\nNULL\n> BRPOP key1 key2 key3 key4 0\n(client is blocked again)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Key Example - Redis CLI\nDESCRIPTION: Demonstrates how to increment a key using the INCR command in the Redis CLI. It first sets a key to a value, then increments it, and finally retrieves the incremented value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incr.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSET mykey \"10\"\nINCR mykey\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Removing Timeout Using PERSIST Command in Redis CLI\nDESCRIPTION: This snippet demonstrates how to remove the expiration time from a Redis key using the `PERSIST` command. First, a key named 'mykey' is set with the value 'Hello'. Then, an expiration time of 10 seconds is set. After that, `PERSIST` is used to remove the expiration. The `TTL` command is used to check the remaining time before and after the `PERSIST` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/persist.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nEXPIRE mykey 10\nTTL mykey\nPERSIST mykey\nTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Redis SINTERSTORE Example\nDESCRIPTION: This example demonstrates the usage of the SINTERSTORE command in Redis. It first creates two sets, `key1` and `key2`, with some elements. Then, it uses SINTERSTORE to find the intersection of `key1` and `key2` and store the result in `key`. Finally, it uses SMEMBERS to display the content of the resulting set `key`. The sets are created using the SADD command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sinterstore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSINTERSTORE key key1 key2\nSMEMBERS key\n```\n\n----------------------------------------\n\nTITLE: GEOADD Examples\nDESCRIPTION: These examples demonstrate how to use the GEOADD, GEODIST, and GEORADIUS commands to add geospatial data, calculate distances, and perform radius queries in Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geoadd.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEODIST Sicily Palermo Catania\nGEORADIUS Sicily 15 37 100 km\nGEORADIUS Sicily 15 37 200 km\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis with TLS\nDESCRIPTION: This JavaScript snippet demonstrates how to connect to a production Redis instance with TLS (Transport Layer Security) using the node-redis client. It includes username, password, host, port, and TLS configuration options. The code also performs basic set and get operations and disconnects the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = createClient({\n    username: 'default', // use your Redis user. More info https://redis.io/docs/management/security/acl/\n    password: 'secret', // use your password here\n    socket: {\n        host: 'my-redis.cloud.redislabs.com',\n        port: 6379,\n        tls: true,\n        key: readFileSync('./redis_user_private.key'),\n        cert: readFileSync('./redis_user.crt'),\n        ca: [readFileSync('./redis_ca.pem')]\n    }\n});\n\nclient.on('error', (err) => console.log('Redis Client Error', err));\n\nawait client.connect();\n\nawait client.set('foo', 'bar');\nconst value = await client.get('foo');\nconsole.log(value) // returns 'bar'\n\nawait client.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Unlinking keys in Redis CLI\nDESCRIPTION: This example demonstrates the usage of the UNLINK command in the Redis CLI to asynchronously remove the keys 'key1', 'key2', and 'key3'. 'key3' will be ignored if it doesn't exist. The SET commands initialize the keys with sample values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/unlink.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"Hello\"\nSET key2 \"World\"\nUNLINK key1 key2 key3\n```\n\n----------------------------------------\n\nTITLE: Redis ZPOP Implementation with WATCH\nDESCRIPTION: This example illustrates how to implement a ZPOP operation (removing the element with the lowest score from a sorted set) using WATCH, MULTI, and EXEC.  If the transaction fails due to a concurrent modification, the operation is repeated.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nWATCH zset\nelement = ZRANGE zset 0 0\nMULTI\nZREM zset element\nEXEC\n```\n\n----------------------------------------\n\nTITLE: Adding elements to HyperLogLog using PFADD in Redis CLI\nDESCRIPTION: This example demonstrates how to add elements to a HyperLogLog data structure in Redis using the PFADD command. It then retrieves the approximated cardinality using PFCOUNT.  The command creates the HyperLogLog if it does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pfadd.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nPFADD hll a b c d e f g\nPFCOUNT hll\n```\n\n----------------------------------------\n\nTITLE: Executing the ROLE command in Redis CLI\nDESCRIPTION: Shows an example of how to execute the ROLE command using redis-cli. This command returns the role of the instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/role.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nROLE\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sorted Set Members with ZRANGE and ZREVRANGE - Redis\nDESCRIPTION: This snippet shows how to retrieve members from a Redis sorted set using the `ZRANGE` and `ZREVRANGE` commands.  `ZRANGE` returns members in ascending order of score (and lexicographically for members with the same score), while `ZREVRANGE` returns them in descending order. 0 and -1 specify the range from the first to the last element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> ZRANGE racer_scores 0 -1\n1) \"Ford\"\n2) \"Sam-Bodden\"\n3) \"Norem\"\n4) \"Royce\"\n5) \"Castilla\"\n6) \"Prickett\"\n> ZREVRANGE racer_scores 0 -1\n1) \"Prickett\"\n2) \"Castilla\"\n3) \"Royce\"\n4) \"Norem\"\n5) \"Sam-Bodden\"\n6) \"Ford\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Username and Password using AUTH Command in Redis\nDESCRIPTION: This snippet demonstrates the extended `AUTH` command in Redis 6, which allows authentication with both a username and password.  The command is used to associate a connection with a specific user and their associated limits.  It's crucial for enforcing ACLs and requires a configured username and password.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAUTH <username> <password>\n```\n\n----------------------------------------\n\nTITLE: Adding Locations to Geospatial Index - Redis\nDESCRIPTION: This example demonstrates how to add locations to a Redis geospatial index using the GEOADD command. The command takes the index name, longitude, latitude, and location name as arguments. Note that longitude comes before latitude.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/geospatial.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> GEOADD bikes:rentable -122.27652 37.805186 station:1\n(integer) 1\n> GEOADD bikes:rentable -122.2674626 37.8062344 station:2\n(integer) 1\n> GEOADD bikes:rentable -122.2469854 37.8104049 station:3\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Basic SCAN Usage Example\nDESCRIPTION: This example demonstrates the basic usage of the `SCAN` command to iterate over the keys in the currently selected Redis database. It shows how to start an iteration with a cursor of 0, use the returned cursor in subsequent calls, and recognize when the iteration is complete (cursor is 0).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scan.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nredis 127.0.0.1:6379> scan 0\n1) \"17\"\n2)  1) \"key:12\"\n    2) \"key:8\"\n    3) \"key:4\"\n    4) \"key:14\"\n    5) \"key:16\"\n    6) \"key:17\"\n    7) \"key:15\"\n    8) \"key:10\"\n    9) \"key:3\"\n   10) \"key:7\"\n   11) \"key:1\"\nredis 127.0.0.1:6379> scan 17\n1) \"0\"\n2) 1) \"key:5\"\n   2) \"key:18\"\n   3) \"key:0\"\n   4) \"key:2\"\n   5) \"key:19\"\n   6) \"key:13\"\n   7) \"key:6\"\n   8) \"key:9\"\n   9) \"key:11\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis index for JSON documents\nDESCRIPTION: This snippet creates a Redis index named `idx:users` for JSON documents. It defines the index using the previously defined `schema` and specifies that all JSON documents with the key prefix `user:` will be indexed. It uses the `IndexType.JSON` index type. It assumes that a Redis client `r` is already initialized and connected.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nrs = r.ft(\"idx:users\")\nrs.create_index(\n    schema,\n    definition=IndexDefinition(\n        prefix=[\"user:\"], index_type=IndexType.JSON\n    )\n)\n# b'OK'\n```\n\n----------------------------------------\n\nTITLE: Using PSETEX Command in Redis CLI\nDESCRIPTION: This code snippet demonstrates how to use the PSETEX command in the Redis CLI to set a key with a value and an expiration time in milliseconds. It then uses PTTL to check the remaining time and GET to retrieve the value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/psetex.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nPSETEX mykey 1000 \"Hello\"\nPTTL mykey\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Create Redis Search Index for JSON documents\nDESCRIPTION: Creates a Redis Search index named \"idx:users\" that indexes JSON documents with the prefix \"user:\". It defines the schema with fields for name (as TEXT), city (as TAG), and age (as NUMERIC).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar schema = new Schema()\n    .AddTextField(new FieldName(\"$.name\", \"name\"))\n    .AddTagField(new FieldName(\"$.city\", \"city\"))\n    .AddNumericField(new FieldName(\"$.age\", \"age\"));\n\nft.Create(\n    \"idx:users\",\n    new FTCreateParams().On(IndexDataType.JSON).Prefix(\"user:\"),\n    schema);\n```\n\n----------------------------------------\n\nTITLE: Rate Limiter Implementation 2 - Using Redis Lists\nDESCRIPTION: This code implements a rate limiter using Redis lists instead of counters. This solution uses the LLEN, EXISTS, RPUSH, EXPIRE, and RPUSHX commands to track and limit API calls, and it can be useful for remembering client IP addresses.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incr.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nFUNCTION LIMIT_API_CALL(ip)\ncurrent = LLEN(ip)\nIF current > 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    IF EXISTS(ip) == FALSE\n        MULTI\n            RPUSH(ip,ip)\n            EXPIRE(ip,1)\n        EXEC\n    ELSE\n        RPUSHX(ip,ip)\n    END\n    PERFORM_API_CALL()\nEND\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer Group with MKSTREAM - Redis\nDESCRIPTION: Creates a new consumer group named 'mygroup' for the stream 'mystream', starting from the end of the stream (ID '$'). If the stream does not exist, it will be created automatically with a length of 0. Requires a Redis instance. If the stream exists, it will not be truncated.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xgroup-create.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nXGROUP CREATE mystream mygroup $ MKSTREAM\n```\n\n----------------------------------------\n\nTITLE: Incrementing a String Counter in Redis\nDESCRIPTION: This example shows how to use the INCR and INCRBY commands to atomically increment a string value in Redis. INCR increments the value by one. INCRBY increments the value by a specified amount. The string value is treated as an integer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/strings.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> set total_crashes 0\nOK\n> incr total_crashes\n(integer) 1\n> incrby total_crashes 10\n(integer) 11\n```\n\n----------------------------------------\n\nTITLE: Blocking XREAD Example in Redis\nDESCRIPTION: This example demonstrates the blocking form of the XREAD command in Redis.  It waits indefinitely for new entries to be added to the stream, starting from the last ID in the stream (denoted by '$').\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n> XREAD BLOCK 0 STREAMS race:france $\n```\n\n----------------------------------------\n\nTITLE: Checking the Length of a Redis List\nDESCRIPTION: This example shows how to retrieve the length of a Redis list using the LLEN command. The command returns an integer representing the number of elements in the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> LLEN bikes:repairs\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Enable AOF Persistence using redis-cli\nDESCRIPTION: This code shows how to enable AOF persistence using the `redis-cli` command-line tool.  It uses the `config set appendonly yes` command to enable AOF. It is recommended to disable RDB persistence via `redis-cli config set save \"\"` to avoid inconsistencies.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli config set appendonly yes\n```\n\n----------------------------------------\n\nTITLE: ZRANGESTORE Example in Redis CLI\nDESCRIPTION: This example demonstrates how to use the ZRANGESTORE command. First, a sorted set named 'srczset' is created using ZADD. Then, ZRANGESTORE is used to store a range of elements (from index 2 to the last element) from 'srczset' into a new sorted set named 'dstzset'. Finally, ZRANGE is used to retrieve and display all elements from 'dstzset'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangestore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD srczset 1 \"one\" 2 \"two\" 3 \"three\" 4 \"four\"\nZRANGESTORE dstzset srczset 2 -1\nZRANGE dstzset 0 -1\n```\n\n----------------------------------------\n\nTITLE: Increment Float Value in Redis CLI\nDESCRIPTION: These examples demonstrate how to use the INCRBYFLOAT command in the Redis CLI to increment or decrement a floating-point number stored at a given key. It also illustrates how exponential notation is handled in input values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incrbyfloat.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey 10.50\nINCRBYFLOAT mykey 0.1\nINCRBYFLOAT mykey -5\nSET mykey 5.0e3\nINCRBYFLOAT mykey 2.0e2\n```\n\n----------------------------------------\n\nTITLE: Finding Intersection of Sets using SINTER - Redis\nDESCRIPTION: This snippet demonstrates how to find the intersection of two or more Redis sets using the `SINTER` command.  The command returns the members that are common to all specified sets.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> SINTER bikes:racing:france bikes:racing:usa\n1) \"bike:1\"\n```\n\n----------------------------------------\n\nTITLE: Redis ZRANK Examples\nDESCRIPTION: Demonstrates the use of the ZRANK command to retrieve the rank of a member in a Redis sorted set. It shows how to add members to the set using ZADD and then retrieve their rank using ZRANK, with and without the WITHSCORE option.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrank.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZRANK myzset \"three\"\nZRANK myzset \"four\"\nZRANK myzset \"three\" WITHSCORE\nZRANK myzset \"four\" WITHSCORE\n```\n\n----------------------------------------\n\nTITLE: Installing redis-py with pip\nDESCRIPTION: This snippet demonstrates how to install the `redis-py` library using pip, the Python package installer. It installs the base package. No dependencies beyond pip are required.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install redis\n```\n\n----------------------------------------\n\nTITLE: Scanning the Redis Keyspace with SCAN\nDESCRIPTION: This snippet demonstrates how to scan the Redis keyspace for keys that match a specific pattern using the `SCAN` command. It starts the scan at cursor position 0 and searches for keys with the prefix `bike:*`, retrieving up to 100 keys in the current iteration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/get-started/data-store.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nSCAN 0 MATCH \"bike:*\" COUNT 100\n```\n\n----------------------------------------\n\nTITLE: Redis MSETNX Example\nDESCRIPTION: This example demonstrates the usage of the MSETNX command to set multiple keys to their respective values if none of the keys already exist.  It then uses MGET to retrieve the values of the keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/msetnx.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nMSETNX key1 \"Hello\" key2 \"there\"\nMSETNX key2 \"new\" key3 \"world\"\nMGET key1 key2 key3\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS on a Specific Port and Disabling Non-TLS Port\nDESCRIPTION: These configuration directives configure Redis to listen for TLS connections on port 6379 and disable non-TLS connections. Setting `port 0` disables the default Redis port, ensuring that only TLS connections are accepted. `tls-port` specifies the port to listen on for TLS connections.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/encryption.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nport 0\ntls-port 6379\n```\n\n----------------------------------------\n\nTITLE: LPUSHX usage example\nDESCRIPTION: Demonstrates the usage of LPUSHX to prepend values to an existing list and the behavior when the list does not exist. Includes examples using LPUSH, LPUSHX, and LRANGE commands to illustrate the functionality and result.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpushx.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nLPUSH mylist \"World\"\nLPUSHX mylist \"Hello\"\nLPUSHX myotherlist \"Hello\"\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis ACL User Example\nDESCRIPTION: This example demonstrates how to configure a Redis ACL user with specific permissions. It uses the ACL SETUSER command to set flags, allowed commands, and key patterns for the user named 'sample'. The user is configured with 'on' and 'nopass' flags, permission to execute GET commands on all keys, and permission to execute SET commands on keys matching the pattern 'key2'. It utilizes allkeys, channel patterns and selectors.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-getuser.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER sample on nopass +GET allkeys &* (+SET ~key2)\n\"OK\"\n> ACL GETUSER sample\n1) \"flags\"\n2) 1) \"on\"\n   2) \"allkeys\"\n   3) \"nopass\"\n3) \"passwords\"\n4) (empty array)\n5) \"commands\"\n6) \"+@all\"\n7) \"keys\"\n8) \"~*\"\n9) \"channels\"\n10) \"&*\"\n11) \"selectors\"\n12) 1) 1) \"commands\"\n       6) \"+SET\"\n       7) \"keys\"\n       8) \"~key2\"\n       9) \"channels\"\n       10) \"&*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Replica to Master Replication\nDESCRIPTION: This configuration sets up a Redis instance as a replica of a master server. It specifies the master's IP address and port. Replace `192.168.1.1` and `6379` with the appropriate values for the master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/replication.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nreplicaof 192.168.1.1 6379\n```\n\n----------------------------------------\n\nTITLE: Acknowledging a Message in Redis Stream using XACK\nDESCRIPTION: This example demonstrates how to use the `XACK` command to acknowledge the successful processing of a message in a Redis Stream consumer group. The command takes the stream name, group name, and message ID as arguments. Upon successful acknowledgment, the message is removed from the Pending Entries List (PEL).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xack.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> XACK mystream mygroup 1526569495631-0\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting a String in Redis\nDESCRIPTION: This example demonstrates how to set and retrieve a string value in Redis using the SET and GET commands. SET assigns a value to a key, replacing any existing value. GET retrieves the value associated with a key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/strings.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> SET bike:1 Deimos\nOK\n> GET bike:1\n\"Deimos\"\n```\n\n----------------------------------------\n\nTITLE: Enabling AOF Persistence in Redis\nDESCRIPTION: This configuration enables the Append-Only File (AOF) persistence strategy in Redis. When enabled, every command that modifies the dataset will be appended to the AOF file, ensuring data durability. It should be put in redis.conf.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nappendonly yes\n```\n\n----------------------------------------\n\nTITLE: Set Operations: Intersection, Union, Difference (SINTER, SUNION, SDIFF) - Redis\nDESCRIPTION: This snippet demonstrates the usage of `SINTER`, `SUNION`, and `SDIFF` commands to perform set operations like intersection, union, and difference on multiple sets. The order of sets passed to SDIFF matters.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_7\n\nLANGUAGE: redis\nCODE:\n```\n> SADD bikes:racing:france bike:1 bike:2 bike:3\n(integer) 3\n> SADD bikes:racing:usa bike:1 bike:4\n(integer) 2\n> SADD bikes:racing:italy bike:1 bike:2 bike:3 bike:4\n(integer) 4\n> SINTER bikes:racing:france bikes:racing:usa bikes:racing:italy\n1) \"bike:1\"\n> SUNION bikes:racing:france bikes:racing:usa bikes:racing:italy\n1) \"bike:2\"\n2) \"bike:1\"\n3) \"bike:4\"\n4) \"bike:3\"\n> SDIFF bikes:racing:france bikes:racing:usa bikes:racing:italy\n(empty array)\n> SDIFF bikes:racing:france bikes:racing:usa\n1) \"bike:3\"\n2) \"bike:2\"\n> SDIFF bikes:racing:usa bikes:racing:france\n1) \"bike:4\"\n```\n\n----------------------------------------\n\nTITLE: Descending Numeric Sort in Redis\nDESCRIPTION: This code snippet shows how to use the `DESC` modifier to sort a list of numbers in descending order.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist DESC\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Set Membership with SISMEMBER\nDESCRIPTION: This example demonstrates how to use the SISMEMBER command in Redis to check if an element is a member of a set. First, an element \"one\" is added to the set \"myset\" using the SADD command.  Then, SISMEMBER is used to check for the presence of \"one\" and \"two\" in the \"myset\" set. SISMEMBER returns 1 if the element exists and 0 if it doesn't.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sismember.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD myset \"one\"\nSISMEMBER myset \"one\"\nSISMEMBER myset \"two\"\n```\n\n----------------------------------------\n\nTITLE: Example CLUSTER SLOTS Output in Redis\nDESCRIPTION: This code snippet showcases the output of the `CLUSTER SLOTS` command in Redis. The command returns an array of slot ranges and the associated master and replica nodes serving the ranges. The first two sub-elements are the start and end slots, while the remaining elements represent address-port pairs of master and replica nodes.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:7000> cluster slots\n1) 1) (integer) 5461\n   2) (integer) 10922\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7001\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7004\n2) 1) (integer) 0\n   2) (integer) 5460\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7000\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7003\n3) 1) (integer) 10923\n   2) (integer) 16383\n   3) 1) \"127.0.0.1\"\n      2) (integer) 7002\n   4) 1) \"127.0.0.1\"\n      2) (integer) 7005\n```\n\n----------------------------------------\n\nTITLE: Store and Retrieve String in Redis\nDESCRIPTION: This JavaScript snippet demonstrates how to store a string value associated with a key in Redis and then retrieve it using the node-redis client. It showcases the basic set and get operations, enabling simple key-value storage within a Redis database.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.set('key', 'value');\nconst value = await client.get('key');\n```\n\n----------------------------------------\n\nTITLE: Appending to a Redis Stream with XADD\nDESCRIPTION: This example demonstrates how to append entries to a Redis stream using the XADD command. It covers automatic ID generation using the * character, adding multiple field-value pairs, and checking the stream length and content.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xadd.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nXADD mystream * name Sara surname OConnor\nXADD mystream * field1 value1 field2 value2 field3 value3\nXLEN mystream\nXRANGE mystream - +\n```\n\n----------------------------------------\n\nTITLE: Get Redis List Length (LLEN) - CLI\nDESCRIPTION: Example of using the LLEN command in Redis to determine the length of a list. The example first populates a list named 'mylist' with two elements, 'World' and 'Hello', and then retrieves its length using LLEN.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/llen.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nLPUSH mylist \"World\"\nLPUSH mylist \"Hello\"\nLLEN mylist\n```\n\n----------------------------------------\n\nTITLE: Trimming Redis Stream with MAXLEN\nDESCRIPTION: This command trims the 'mystream' stream to the latest 1000 items, evicting older entries. It uses the MAXLEN strategy, removing entries until the stream's length is 1000.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xtrim.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nXTRIM mystream MAXLEN 1000\n```\n\n----------------------------------------\n\nTITLE: Add a New Master Node using redis-cli in Redis Cluster\nDESCRIPTION: This snippet demonstrates how to add a new master node to an existing Redis Cluster using the `redis-cli --cluster add-node` command. The command requires the address of the new node and the address of an existing node in the cluster.  It adds the new node to the cluster by sending a `CLUSTER MEET` message.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster add-node 127.0.0.1:7006 127.0.0.1:7000\n```\n\n----------------------------------------\n\nTITLE: XAUTOCLAIM Example\nDESCRIPTION: This example demonstrates how to use the `XAUTOCLAIM` command to claim up to 25 pending stream entries for the consumer \"Alice\" in the group \"mygroup\".  It claims entries that have been idle for at least an hour, starting from the beginning of the stream. The response shows the cursor for the next iteration, the claimed message details (ID, fields, and values), and any deleted message IDs encountered during the process.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xautoclaim.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> XAUTOCLAIM mystream mygroup Alice 3600000 0-0 COUNT 25\n1) \"0-0\"\n2) 1) 1) \"1609338752495-0\"\n      2) 1) \"field\"\n         2) \"value\"\n3) (empty array)\n```\n\n----------------------------------------\n\nTITLE: Using MGET to retrieve multiple key values - Redis CLI\nDESCRIPTION: This code demonstrates how to use the MGET command in Redis to retrieve the values associated with multiple keys. It showcases the behavior when keys exist, hold string values, and when keys are non-existent.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/mget.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"Hello\"\nSET key2 \"World\"\nMGET key1 key2 nonexisting\n```\n\n----------------------------------------\n\nTITLE: Setting Redis User Permissions Using Command Categories\nDESCRIPTION: This code snippet shows how to use command categories to set permissions for a Redis user.  It allows all commands (+@all) and then removes dangerous commands (-@dangerous). A password is also set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER antirez on +@all -@dangerous >42a979... ~*\n```\n\n----------------------------------------\n\nTITLE: LRANGE Example in Redis CLI\nDESCRIPTION: This example demonstrates the usage of the LRANGE command in the Redis CLI to retrieve elements from a list. It shows how to push elements onto a list using RPUSH and then retrieve different ranges of elements using LRANGE, including using both positive and negative indices. The example illustrates how out-of-range indices are handled by Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lrange.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLRANGE mylist 0 0\nLRANGE mylist -3 2\nLRANGE mylist -100 100\nLRANGE mylist 5 10\n```\n\n----------------------------------------\n\nTITLE: Controlling Replication with redis.set_repl in Lua\nDESCRIPTION: Controls how a script's effects (write commands) are propagated to replicas and the AOF. Accepts one of the following arguments: `redis.REPL_ALL`, `redis.REPL_AOF`, `redis.REPL_REPLICA` (or `redis.REPL_SLAVE`), or `redis.REPL_NONE`. This function is an advanced feature and misuse can lead to inconsistencies between master, replicas, and AOF.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_13\n\nLANGUAGE: Lua\nCODE:\n```\nredis.replicate_commands() -- Enable effects replication in versions lower than Redis v7.0\nredis.call('SET', KEYS[1], ARGV[1])\nredis.set_repl(redis.REPL_NONE)\nredis.call('SET', KEYS[2], ARGV[2])\nredis.set_repl(redis.REPL_ALL)\nredis.call('SET', KEYS[3], ARGV[3])\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Hash Fields in Redis\nDESCRIPTION: This snippet demonstrates how to set and retrieve fields within a Redis hash using the `HSET`, `HGET`, and `HGETALL` commands. It simulates storing properties of a bicycle (model, brand, type, price) within a hash identified by the key `bike:1`. The `HGETALL` command returns all fields and values in the hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/get-started/data-store.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nHSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972\n```\n\nLANGUAGE: redis\nCODE:\n```\nHGET bike:1 model\n```\n\nLANGUAGE: redis\nCODE:\n```\nHGET bike:1 price\n```\n\nLANGUAGE: redis\nCODE:\n```\nHGETALL bike:1\n```\n\n----------------------------------------\n\nTITLE: Removing Members from a Redis Sorted Set using ZREM\nDESCRIPTION: This example demonstrates how to remove members from a sorted set stored in Redis using the ZREM command. First, members are added to the 'myzset' sorted set using ZADD. Then, the member 'two' is removed using ZREM. Finally, ZRANGE is used to retrieve the remaining members and their scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrem.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREM myzset \"two\"\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client ID using Redis CLI\nDESCRIPTION: This command retrieves the unique ID of the current Redis client connection. The ID is guaranteed to be unique and monotonically increasing, ensuring that a higher ID indicates a later connection time. This is useful for tracking connections and managing client unblocking.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-id.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCLIENT ID\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis with URL\nDESCRIPTION: This JavaScript snippet illustrates connecting to a Redis server using a connection string URL with the node-redis client. The URL includes the hostname, port, username, and password.  It demonstrates how to configure the client to connect to a Redis instance on a non-default host and port with authentication.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncreateClient({\n  url: 'redis://alice:foobared@awesome.redis.server:6380'\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Redis ACL Information for All Users\nDESCRIPTION: This code snippet shows how to list the ACL information for all users, including the newly created 'alice' user and the default user. The output displays the user's flags, password status, command access permissions, key access patterns, and Pub/Sub channel permissions. The ACL LIST command attempts to be explicit rather than implicit.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> ACL LIST\n1) \"user alice off resetchannels -@all\"\n2) \"user default on nopass ~* &* +@all\"\n```\n\n----------------------------------------\n\nTITLE: Capping a Redis List with LTRIM\nDESCRIPTION: This code demonstrates how to use the `LTRIM` command to limit the size of a Redis list, effectively creating a capped collection. The `RPUSH` command adds elements to the list, and `LTRIM` keeps only elements within the specified range, discarding the rest.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2 bike:3 bike:4 bike:5\n(integer) 5\n> LTRIM bikes:repairs 0 2\nOK\n> LRANGE bikes:repairs 0 -1\n1) \"bike:1\"\n2) \"bike:2\"\n3) \"bike:3\"\n```\n\n----------------------------------------\n\nTITLE: Storing and retrieving dictionaries with redis-py\nDESCRIPTION: This snippet demonstrates storing and retrieving a dictionary (hash) in Redis using the `hset` and `hgetall` methods.  It assumes that a Redis client object `r` has already been initialized and is connected to a Redis instance. The dictionary is stored with the key 'user-session:123'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nr.hset('user-session:123', mapping={\n    'name': 'John',\n    \"surname\": 'Smith',\n    \"company\": 'Redis',\n    \"age\": 29\n})\n# True\n\nr.hgetall('user-session:123')\n# {'surname': 'Smith', 'name': 'John', 'company': 'Redis', 'age': '29'}\n```\n\n----------------------------------------\n\nTITLE: Set key with expiration and get expiration time\nDESCRIPTION: This example demonstrates how to set a key with an expiration timestamp using `EXPIREAT` and then retrieve the expiration time using `EXPIRETIME`. The `SET` command initializes the key, `EXPIREAT` sets the expiration, and `EXPIRETIME` retrieves the expiration timestamp in seconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/expiretime.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nEXPIREAT mykey 33177117420\nEXPIRETIME mykey\n```\n\n----------------------------------------\n\nTITLE: Setting ACL user for admin in Redis\nDESCRIPTION: These commands set up an administrator user with a password in Redis using ACL. The first command creates the admin user, enables it, sets a password, and grants access to all Pub/Sub channels and general permissions. The second command disables the default user.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:5000> ACL SETUSER admin ON >admin-password allchannels +@all\nOK\n127.0.0.1:5000> ACL SETUSER default off\nOK\n```\n\n----------------------------------------\n\nTITLE: Sentinel Configuration File Example\nDESCRIPTION: This is an example of a Sentinel configuration file.  It configures Sentinel to monitor a master named 'mymaster' at IP 127.0.0.1, port 6379 with a quorum of 2. It also sets the down-after-milliseconds, failover-timeout, and parallel-syncs parameters.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nport 5000\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 5000\nsentinel failover-timeout mymaster 60000\nsentinel parallel-syncs mymaster 1\n```\n\n----------------------------------------\n\nTITLE: Paginating Stream Query with XRANGE and COUNT - Step 2\nDESCRIPTION: This example shows the second step in paginating through a Redis stream using XRANGE. It retrieves the next 2 entries after the ID '1692632094485-0'. The '(' before the ID indicates an exclusive range, ensuring no duplicate entries are returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_13\n\nLANGUAGE: redis\nCODE:\n```\n> XRANGE race:france (1692632094485-0 + COUNT 2\n```\n\n----------------------------------------\n\nTITLE: Limiting List Size with LPUSH/LTRIM - Redis CLI\nDESCRIPTION: This example demonstrates using LPUSH and LTRIM together to limit the size of a Redis list. LPUSH adds a new element to the list, and LTRIM trims the list to a maximum of 100 elements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/ltrim.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nLPUSH mylist someelement\nLTRIM mylist 0 99\n```\n\n----------------------------------------\n\nTITLE: Modify ACL user rules (Redis)\nDESCRIPTION: This example demonstrates how to modify the existing ACL rules of the 'virginia' user. It adds the permission to execute the 'get' command to the user's existing permissions using the '+get' rule.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nACL SETUSER virginia +get\n```\n\n----------------------------------------\n\nTITLE: Estimating Cardinality with PFCOUNT in Redis CLI\nDESCRIPTION: This example demonstrates how to use the PFADD command to add elements to a HyperLogLog and then use PFCOUNT to estimate the number of unique elements. It showcases both single-key and multiple-key usage.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pfcount.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nPFADD hll foo bar zap\nPFADD hll zap zap zap\nPFADD hll foo bar\nPFCOUNT hll\nPFADD some-other-hll 1 2 3\nPFCOUNT hll some-other-hll\n```\n\n----------------------------------------\n\nTITLE: Getting Member Rank with ZRANK and ZREVRANK - Redis\nDESCRIPTION: This snippet demonstrates how to retrieve the rank of a member in a Redis sorted set using the `ZRANK` and `ZREVRANK` commands. `ZRANK` returns the rank in ascending order (lowest score has rank 0), while `ZREVRANK` returns the rank in descending order (highest score has rank 0).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> ZRANK racer_scores \"Norem\"\n(integer) 0\n> ZREVRANK racer_scores \"Norem\"\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Redis XREAD Subsequent Call\nDESCRIPTION: This example shows a subsequent `XREAD` call after using the `$` ID. The ID should be the last reported item in the stream, otherwise, entries added in between may be missed. It blocks for 5000 milliseconds and retrieves up to 100 entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xread.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> XREAD BLOCK 5000 COUNT 100 STREAMS mystream 1526999644174-3\n```\n\n----------------------------------------\n\nTITLE: Saving Redis ACLs with ACL SAVE\nDESCRIPTION: This code snippet demonstrates the use of the ACL SAVE command to persist the current Redis ACL configuration to the ACL file specified in the redis.conf file.  It shows both a successful save and a potential error scenario.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-save.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> ACL SAVE\n+OK\n\n> ACL SAVE\n-ERR There was an error trying to save the ACLs. Please check the server logs for more information\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with redis-py\nDESCRIPTION: This snippet demonstrates connecting to a Redis instance running on localhost at the default port (6379) using the `redis-py` library. It initializes a Redis client object with `decode_responses=True` to receive decoded strings. It requires the `redis` library.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr = redis.Redis(host='localhost', port=6379, decode_responses=True)\n```\n\n----------------------------------------\n\nTITLE: Indexing Object IDs with Sorted Sets (Redis)\nDESCRIPTION: This snippet demonstrates how to use a Redis sorted set to index objects (users in this case) by a numerical field (age), storing only the object ID in the index. The `ZADD` command associates the user's ID with their age.  A subsequent query would require fetching the full object data using the retrieved ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_2\n\nLANGUAGE: Redis\nCODE:\n```\nZADD user.age.index 38 1\nZADD user.age.index 42 2\nZADD user.age.index 33 3\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Keys with MIGRATE\nDESCRIPTION: This snippet demonstrates how to migrate multiple keys between Redis instances using the MIGRATE command with the `!KEYS` option, enabling pipelining for efficiency. The key argument is set to an empty string, and the actual key names are listed after `!KEYS`. Requires Redis 3.0.6 or later.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/migrate.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nMIGRATE 192.168.1.34 6379 \"\" 0 5000 KEYS key1 key2 key3\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Redis Function in Lua\nDESCRIPTION: This snippet demonstrates how to register a simple function named `knockknock` in a Redis function library using the `redis.register_function()` API in Lua. The function returns a string reply. The Shebang statement defines the engine as Lua and sets the library name to `mylib`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n#!lua name=mylib\nredis.register_function(\n  'knockknock',\n  function() return 'Who\\'s there?' end\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Hash Fields and Values with HGETALL - Redis CLI\nDESCRIPTION: This example demonstrates how to use the HSET command to create a hash and populate it with fields and values, and then uses the HGETALL command to retrieve all fields and values from the hash. The returned value is an array where each field name is followed by its corresponding value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hgetall.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHGETALL myhash\n```\n\n----------------------------------------\n\nTITLE: Enable Client Tracking with BCAST and PREFIX\nDESCRIPTION: This snippet shows how to enable client-side caching using the `BCAST` option with specified prefixes. The server will only send invalidation messages for keys matching one of the specified prefixes.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_7\n\nLANGUAGE: redis\nCODE:\n```\nCLIENT TRACKING on REDIRECT 10 BCAST PREFIX object: PREFIX user:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hash Value Using HGET in Redis CLI\nDESCRIPTION: This code snippet demonstrates how to retrieve a value from a Redis hash using the HGET command. The command takes two arguments: the key of the hash and the field to retrieve. The example first sets the value of 'field1' in the hash 'myhash' to 'foo' using HSET, then retrieves the value of 'field1' using HGET, and finally attempts to retrieve the value of 'field2', which does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hget.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET myhash field1 \"foo\"\nHGET myhash field1\nHGET myhash field2\n```\n\n----------------------------------------\n\nTITLE: Redis ZREVRANGE Example\nDESCRIPTION: This example demonstrates the usage of the ZREVRANGE command in Redis to retrieve elements from a sorted set in reverse order based on their scores. The command takes the sorted set key, start index, and stop index as arguments.  The indices are zero-based, with 0 being the element with the highest score. Negative indices can be used to specify offsets from the end of the sorted set, with -1 being the last element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrevrange.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREVRANGE myzset 0 -1\nZREVRANGE myzset 2 3\nZREVRANGE myzset -2 -1\n```\n\n----------------------------------------\n\nTITLE: Redis SPOP examples\nDESCRIPTION: Demonstrates the usage of the Redis SPOP command. Includes examples of adding elements to a set (SADD), popping elements (SPOP) with and without the count argument, and displaying the remaining elements (SMEMBERS).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/spop.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD myset \"one\"\nSADD myset \"two\"\nSADD myset \"three\"\nSPOP myset\nSMEMBERS myset\nSADD myset \"four\"\nSADD myset \"five\"\nSPOP myset 3\nSMEMBERS myset\n```\n\n----------------------------------------\n\nTITLE: Adding Geospatial Data to a Sorted Set - Redis CLI\nDESCRIPTION: This example demonstrates how to add geospatial data (longitude, latitude, member) to a sorted set using the GEOADD command in Redis. It adds the coordinates of \"Palermo\", \"Catania\", \"edge1\" and \"edge2\" to the \"Sicily\" sorted set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geosearch.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOADD Sicily 12.758489 38.788135 \"edge1\"   17.241510 38.788135 \"edge2\" \n```\n\n----------------------------------------\n\nTITLE: Atomically Moving Elements Between Redis Lists\nDESCRIPTION: This example demonstrates how to atomically move an element from one list to another using the LMOVE command. It shows moving an element from the 'bikes:repairs' list to the 'bikes:finished' list, effectively transferring a bike from the repair queue to the finished queue.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> LPUSH bikes:repairs bike:1\n(integer) 1\n> LPUSH bikes:repairs bike:2\n(integer) 2\n> LMOVE bikes:repairs bikes:finished LEFT LEFT\n\"bike:2\"\n> LRANGE bikes:repairs 0 -1\n1) \"bike:1\"\n> LRANGE bikes:finished 0 -1\n1) \"bike:2\"\n```\n\n----------------------------------------\n\nTITLE: Listing Redis ACL Users\nDESCRIPTION: This example demonstrates how to use the ACL USERS command to retrieve a list of all currently configured usernames in the Redis ACL system. The command returns an array of strings, where each string represents a username.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-users.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> ACL USERS\n1) \"anna\"\n2) \"antirez\"\n3) \"default\"\n```\n\n----------------------------------------\n\nTITLE: Configure Linux kernel overcommit memory - sysctl\nDESCRIPTION: This command adds the `vm.overcommit_memory = 1` setting to the `/etc/sysctl.conf` file, which adjusts how the Linux kernel handles memory allocation. This is a recommended setting for Redis to prevent background saving failures. Requires root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvm.overcommit_memory = 1\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Pattern in Redis Pub/Sub (Bash)\nDESCRIPTION: This snippet demonstrates how to subscribe to a pattern in Redis channels using the `PSUBSCRIBE` command. The client issues the command with a glob-style pattern.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPSUBSCRIBE news.*\n```\n\n----------------------------------------\n\nTITLE: Appending Fixed-Size Samples to Time Series with Redis CLI\nDESCRIPTION: This example shows how to append fixed-size samples to a Redis key representing a time series. It appends two temperature readings (\"0043\" and \"0035\") to the key \"ts\", and then retrieves them using GETRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/append.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nAPPEND ts \"0043\"\nAPPEND ts \"0035\"\nGETRANGE ts 0 3\nGETRANGE ts 4 7\n```\n\n----------------------------------------\n\nTITLE: Using WAIT command in Redis\nDESCRIPTION: This example demonstrates the usage of the WAIT command in Redis. The first call waits until the 'SET foo bar' command is replicated to one replica without a timeout. The second call attempts to wait for replication to two replicas with a 1-second timeout. The return value indicates the number of replicas that have acknowledged the write.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/wait.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> SET foo bar\nOK\n> WAIT 1 0\n(integer) 1\n> WAIT 2 1000\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Listing Available ACL Categories in Redis\nDESCRIPTION: This command retrieves a list of all available ACL categories in the Redis server. It is invoked without any arguments. The output is an array of category names.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-cat.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> ACL CAT\n```\n\n----------------------------------------\n\nTITLE: Redis SUNION example\nDESCRIPTION: Demonstrates the usage of the Redis SUNION command.  It adds elements to two sets, 'key1' and 'key2', and then uses SUNION to retrieve the union of these sets. The example shows how to populate sets with SADD and then retrieve the union.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sunion.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSUNION key1 key2\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis Cluster\nDESCRIPTION: This JavaScript snippet demonstrates how to connect to a Redis Cluster using the node-redis client. It defines an array of root nodes, each specifying the URL of a Redis instance in the cluster. It then establishes a connection to the cluster and performs a set and get operation to verify the connection. The code also includes error handling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCluster } from 'redis';\n\nconst cluster = createCluster({\n    rootNodes: [\n        {\n            url: 'redis://127.0.0.1:16379'\n        },\n        {\n            url: 'redis://127.0.0.1:16380'\n        },\n        // ...\n    ]\n});\n\ncluster.on('error', (err) => console.log('Redis Cluster Error', err));\n\nawait cluster.connect();\n\nawait cluster.set('foo', 'bar');\nconst value = await cluster.get('foo');\nconsole.log(value); // returns 'bar'\n\nawait cluster.quit();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a limited number of entries\nDESCRIPTION: This example demonstrates the use of the `COUNT` option in `XRANGE` to limit the number of returned entries. It showcases how to retrieve at most one entry greater or equal to a given ID. The `COUNT` option is crucial for controlling the size of the result and enabling iterator-like behavior.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE somestream 1526985054069-0 + COUNT 1\n1) 1) 1526985054069-0\n   2) 1) \"duration\"\n      2) \"72\"\n      3) \"event-id\"\n      4) \"9\"\n      5) \"user-id\"\n      6) \"839248\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maxmemory Samples in Redis\nDESCRIPTION: This snippet demonstrates how to configure the `maxmemory-samples` directive, which controls the precision of the Redis LRU algorithm. Higher values result in closer approximations of true LRU at the cost of increased CPU usage. It is adjustable via `CONFIG SET`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/eviction/index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmaxmemory-samples 5\n```\n\n----------------------------------------\n\nTITLE: Example stream operations\nDESCRIPTION: This snippet provides example stream operations, including adding entries with `XADD`, checking stream length with `XLEN`, and fetching entries with `XRANGE`. It demonstrates basic stream manipulation and retrieval.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\nXADD writers * name Virginia surname Woolf\nXADD writers * name Jane surname Austen\nXADD writers * name Toni surname Morrison\nXADD writers * name Agatha surname Christie\nXADD writers * name Ngozi surname Adichie\nXLEN writers\nXRANGE writers - + COUNT 2\n```\n\n----------------------------------------\n\nTITLE: Redis ZMSCORE Example Usage\nDESCRIPTION: Demonstrates how to use the ZMSCORE command in Redis to retrieve the scores of members in a sorted set. If a member does not exist, the command returns nil for that member.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zmscore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZMSCORE myzset \"one\" \"two\" \"nofield\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a database in redis-cli\nDESCRIPTION: This snippet demonstrates how to select a different database using the `SELECT` command in the redis-cli interactive mode. The prompt updates to reflect the currently selected database. The `DBSIZE` command then shows the size of the selected database.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> SELECT 2\nOK\n127.0.0.1:6379[2]> DBSIZE\n(integer) 1\n127.0.0.1:6379[2]> SELECT 0\nOK\n127.0.0.1:6379> DBSIZE\n(integer) 503\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis for JSON indexing example\nDESCRIPTION: This snippet connects to a Redis instance running on localhost at the default port (6379) using the `redis-py` library, preparing for JSON indexing and querying.  It initializes a Redis client object. It requires the `redis` library.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nr = redis.Redis(host='localhost', port=6379)\n```\n\n----------------------------------------\n\nTITLE: SETNX Command Usage Example (Redis CLI)\nDESCRIPTION: This snippet demonstrates the basic usage of the SETNX command in the Redis CLI to set a key only if it doesn't already exist. The subsequent GET command retrieves the value of the key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/setnx.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSETNX mykey \"Hello\"\nSETNX mykey \"World\"\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Connection with CLI\nDESCRIPTION: This snippet demonstrates how to use the `redis-cli` command-line utility to check if the Redis server is running and accessible. It sends a PING command to the server and expects a PONG response. This verifies basic connectivity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli ping\nPONG\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Password Option\nDESCRIPTION: This code shows how to authenticate with a password-protected Redis instance using the `-a` option.  The PING command is used to verify the authentication.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -a myUnguessablePazzzzzword123 PING\nPONG\n```\n\n----------------------------------------\n\nTITLE: Accessing KEYS and ARGV in Lua Script\nDESCRIPTION: This example demonstrates how to access the `KEYS` and `ARGV` runtime global variables in a Lua script executed in Redis.  It returns a Lua table containing the first two elements of the `KEYS` table and the first three elements of the `ARGV` table. The '2' specifies the number of key arguments.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return { KEYS[1], KEYS[2], ARGV[1], ARGV[2], ARGV[3] }\" 2 key1 key2 arg1 arg2 arg3\n1) \"key1\"\n2) \"key2\"\n3) \"arg1\"\n4) \"arg2\"\n5) \"arg3\"\n```\n\n----------------------------------------\n\nTITLE: Find Element Index with Rank Option in Redis\nDESCRIPTION: This snippet demonstrates using the RANK option with the LPOS command to find the index of a specific occurrence of an element in a Redis list. It shows how to find the second occurrence of the element 'c'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> LPOS mylist c RANK 2\n6\n```\n\n----------------------------------------\n\nTITLE: Modifying String with SETRANGE - CLI\nDESCRIPTION: Demonstrates basic usage of the SETRANGE command to modify a string value at a specific offset. It sets an initial string, then overwrites a portion of it using SETRANGE. The GET command is used to retrieve the modified string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/setrange.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"Hello World\"\nSETRANGE key1 6 \"Redis\"\nGET key1\n```\n\n----------------------------------------\n\nTITLE: Running Redis Tests with TLS\nDESCRIPTION: These commands generate test certificates, then run the Redis test suite in TLS mode. The `gen-test-certs.sh` script creates the necessary certificates, and the `runtest` or `runtest-cluster` commands execute the tests with the `--tls` flag to enable TLS.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/encryption.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./utils/gen-test-certs.sh\n```\n\nLANGUAGE: sh\nCODE:\n```\n./runtest --tls\n```\n\nLANGUAGE: sh\nCODE:\n```\n./runtest-cluster --tls\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Bits in Redis\nDESCRIPTION: This example demonstrates how to use the `SETBIT` command to set a bit at a specific offset and the `GETBIT` command to retrieve the value of a bit at a given offset in a Redis bitmap. It shows a practical example of tracking cyclist pings using bitmaps, where the key represents the hour and the bit offset represents the cyclist ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/bitmaps.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> SETBIT pings:2024-01-01-00:00 123 1\n(integer) 0\n> GETBIT pings:2024-01-01-00:00 123\n1\n> GETBIT pings:2024-01-01-00:00 456\n0\n```\n\n----------------------------------------\n\nTITLE: Intersect Sorted Sets with ZINTER - CLI\nDESCRIPTION: This example demonstrates the usage of the ZINTER command in the Redis CLI to intersect two sorted sets, 'zset1' and 'zset2'. The first example returns the elements present in both sets. The second example returns the elements along with their scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zinter.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZINTER 2 zset1 zset2\nZINTER 2 zset1 zset2 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Using SRANDMEMBER command\nDESCRIPTION: Examples showcasing the SRANDMEMBER command with different arguments. The first retrieves a single random element, the second retrieves two distinct elements, and the third retrieves five elements, allowing duplicates.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/srandmember.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD myset one two three\nSRANDMEMBER myset\nSRANDMEMBER myset 2\nSRANDMEMBER myset -5\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Counters in a Hash - Redis\nDESCRIPTION: This example demonstrates how to use Redis hashes to store and increment counters for various bike statistics, such as rides, crashes, and owners. It uses HINCRBY to increment the counters and HGET and HMGET to retrieve their values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/hashes.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n> HINCRBY bike:1:stats rides 1\n(integer) 1\n> HINCRBY bike:1:stats rides 1\n(integer) 2\n> HINCRBY bike:1:stats rides 1\n(integer) 3\n> HINCRBY bike:1:stats crashes 1\n(integer) 1\n> HINCRBY bike:1:stats owners 1\n(integer) 1\n> HGET bike:1:stats rides\n\"3\"\n> HMGET bike:1:stats owners crashes\n1) \"1\"\n2) \"1\"\n```\n\n----------------------------------------\n\nTITLE: Checking Set Membership with SMISMEMBER in Redis CLI\nDESCRIPTION: This example demonstrates how to use the SMISMEMBER command in the Redis CLI to check if multiple members exist in a set. It first adds \"one\" to the set 'myset' and then uses SMISMEMBER to check for the existence of \"one\" and \"notamember\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/smismember.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD myset \"one\"\nSADD myset \"one\"\nSMISMEMBER myset \"one\" \"notamember\"\n```\n\n----------------------------------------\n\nTITLE: Adding elements to a sorted set using ZADD - Redis CLI\nDESCRIPTION: This example demonstrates how to use the ZADD command to add elements with associated scores to a Redis sorted set. It showcases adding single and multiple elements and retrieving them using ZRANGE with scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zadd.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 1 \"uno\"\nZADD myzset 2 \"two\" 3 \"three\"\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Tracking in Redis\nDESCRIPTION: Enables the tracking feature of the Redis server for server-assisted client-side caching. This command configures the server to remember requested keys and send invalidation messages upon modification. Additional options can be used to modify tracking behavior.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-tracking.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCLIENT TRACKING on ... options ...\n```\n\n----------------------------------------\n\nTITLE: Handling Deadlocks with GETSET (Redis CLI)\nDESCRIPTION: This snippet demonstrates how to handle deadlocks by checking if the lock has expired using GET and GETSET.  The GETSET command atomically gets the old value and sets a new value, allowing a client to safely acquire the lock if it has expired. This approach mitigates the race condition that occurs when multiple clients try to acquire the lock after it expires.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/setnx.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nGETSET lock.foo <current Unix timestamp + lock timeout + 1>\n```\n\n----------------------------------------\n\nTITLE: BZPOPMIN Usage Example - Redis\nDESCRIPTION: This example demonstrates how to use the BZPOPMIN command to pop the element with the lowest score from one of the provided sorted sets. It first deletes the specified sorted sets (zset1 and zset2), then adds elements to zset1 with their scores. Finally, it calls BZPOPMIN with a timeout of 0 (indefinite block) on zset1 and zset2.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bzpopmin.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> DEL zset1 zset2\n(integer) 0\nredis> ZADD zset1 0 a 1 b 2 c\n(integer) 3\nredis> BZPOPMIN zset1 zset2 0\n1) \"zset1\"\n2) \"a\"\n3) \"0\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Hash Fields - Redis\nDESCRIPTION: This example demonstrates how to retrieve multiple fields from a Redis hash using HMGET. It shows how the command returns an array of values corresponding to the requested fields, with (nil) indicating that a field does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/hashes.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> HMGET bike:1 model price no-such-field\n1) \"Deimos\"\n2) \"4972\"\n3) (nil)\n```\n\n----------------------------------------\n\nTITLE: Removing and Retrieving Set Members (SREM, SPOP, SRANDMEMBER) - Redis\nDESCRIPTION: This snippet shows how to remove items from a set using `SREM` (remove specific item) and `SPOP` (remove a random item).  It also shows how to retrieve a random member without removing it, using `SRANDMEMBER`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\n> SADD bikes:racing:france bike:1 bike:2 bike:3 bike:4 bike:5\n(integer) 5\n> SREM bikes:racing:france bike:1\n(integer) 1\n> SPOP bikes:racing:france\n\"bike:3\"\n> SMEMBERS bikes:racing:france\n1) \"bike:2\"\n2) \"bike:4\"\n3) \"bike:5\"\n> SRANDMEMBER bikes:racing:france\n\"bike:2\"\n```\n\n----------------------------------------\n\nTITLE: Establishing Asynchronous Redis Connection - Lettuce\nDESCRIPTION: This Java code demonstrates establishing an asynchronous connection to a Redis server using Lettuce. It shows how to create a RedisClient, connect to the server, set and retrieve a string value, and store/retrieve key-value pairs in a hash asynchronously. It requires the `io.lettuce.core` library and handles potential `ExecutionException` and `InterruptedException`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\n\nimport io.lettuce.core.*;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport io.lettuce.core.api.StatefulRedisConnection;\n\npublic class Async {\n  public static void main(String[] args) {\n    RedisClient redisClient = RedisClient.create(\"redis://localhost:6379\");\n\n    try (StatefulRedisConnection<String, String> connection = redisClient.connect()) {\n      RedisAsyncCommands<String, String> asyncCommands = connection.async();\n\n      // Asynchronously store & retrieve a simple string\n      asyncCommands.set(\"foo\", \"bar\").get();\n      System.out.println(asyncCommands.get(\"foo\").get()); // prints bar\n\n      // Asynchronously store key-value pairs in a hash directly\n      Map<String, String> hash = new HashMap<>();\n      hash.put(\"name\", \"John\");\n      hash.put(\"surname\", \"Smith\");\n      hash.put(\"company\", \"Redis\");\n      hash.put(\"age\", \"29\");\n      asyncCommands.hset(\"user-session:123\", hash).get();\n\n      System.out.println(asyncCommands.hgetall(\"user-session:123\").get());\n      // Prints: {name=John, surname=Smith, company=Redis, age=29}\n    } catch (ExecutionException | InterruptedException e) {\n      throw new RuntimeException(e);\n    } finally {\n      redisClient.shutdown();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Continuously Incrementing a Counter\nDESCRIPTION: This code demonstrates how to continuously execute a command using the `-r` and `-i` options. It increments the 'counter_value' key 5 times with no delay between executions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -r 5 INCR counter_value\n(integer) 1\n(integer) 2\n(integer) 3\n(integer) 4\n(integer) 5\n```\n\n----------------------------------------\n\nTITLE: Obtain stack trace in GDB\nDESCRIPTION: This GDB command retrieves the stack trace of the program at the point of interruption (e.g., after a crash). The stack trace shows the sequence of function calls leading to the current execution point, aiding in identifying the root cause of issues.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_4\n\nLANGUAGE: gdb\nCODE:\n```\n(gdb) bt\n```\n\n----------------------------------------\n\nTITLE: Authenticating with redis-cli\nDESCRIPTION: This code snippet shows how to authenticate with a Redis server using the AUTH command. It emphasizes escaping special characters within the password string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:6379> AUTH some_admin_user \">^8T>6Na{u|jp>+v\\\"55\\@_;OU(OR]7mbAYGqsfyu48(j'%hQH7;v*f1H${*gD(Se'\"\n```\n\n----------------------------------------\n\nTITLE: Redis Stream: Adding, Creating Group, Reading, Deleting Example\nDESCRIPTION: This example demonstrates adding data to a stream using XADD, creating a consumer group using XGROUP CREATE, reading data using XREADGROUP, and deleting a message using XDEL. It highlights the behavior of reading pending entries after a message has been deleted from the stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xreadgroup.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\n> XADD mystream 1 myfield mydata\n\"1-0\"\n> XGROUP CREATE mystream mygroup 0\nOK\n> XREADGROUP GROUP mygroup myconsumer STREAMS mystream >\n1) 1) \"mystream\"\n   2) 1) 1) \"1-0\"\n         2) 1) \"myfield\"\n            2) \"mydata\"\n> XDEL mystream 1-0\n(integer) 1\n> XREADGROUP GROUP mygroup myconsumer STREAMS mystream 0\n1) 1) \"mystream\"\n   2) 1) 1) \"1-0\"\n         2) (nil)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Hash Values - Redis CLI\nDESCRIPTION: This example demonstrates retrieving all values from a Redis hash. It first sets two fields, `field1` and `field2`, with the values \"Hello\" and \"World\" respectively, and then retrieves all values using the `HVALS` command. The key used is `myhash`. No dependencies are needed, other than having a running Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hvals.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHVALS myhash\n```\n\n----------------------------------------\n\nTITLE: Checking Set Membership using SISMEMBER - Redis\nDESCRIPTION: This snippet demonstrates how to check for membership of specific strings within Redis sets using the `SISMEMBER` command. The command returns 1 if the member exists in the set, and 0 otherwise.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> SISMEMBER bikes:racing:usa bike:1\n(integer) 1\n> SISMEMBER bikes:racing:usa bike:2\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Redis BITPOS Command Examples\nDESCRIPTION: These examples demonstrate the usage of the BITPOS command in Redis, including setting a key with a specific byte sequence and then querying for the position of a particular bit value. The examples cover different scenarios such as specifying byte ranges, bit ranges, and using negative indices.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitpos.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"\\xff\\xf0\\x00\"\nBITPOS mykey 0\nSET mykey \"\\x00\\xff\\xf0\"\nBITPOS mykey 1 0\nBITPOS mykey 1 2\nBITPOS mykey 1 2 -1 BYTE\nBITPOS mykey 1 7 15 BIT\nset mykey \"\\x00\\x00\\x00\"\nBITPOS mykey 1\nBITPOS mykey 1 7 -3 BIT\n```\n\n----------------------------------------\n\nTITLE: RPOPLPUSH Example\nDESCRIPTION: This example demonstrates the basic usage of the RPOPLPUSH command in Redis. It initializes two lists, `mylist` and `myotherlist`, pushes elements into `mylist`, then uses RPOPLPUSH to move the last element of `mylist` to the beginning of `myotherlist`. Finally, it retrieves and displays the contents of both lists using LRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/rpoplpush.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nRPOPLPUSH mylist myotherlist\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Renaming a Key in Redis (CLI)\nDESCRIPTION: This example demonstrates how to rename a key in Redis using the CLI. It first sets a key named 'mykey' to the value 'Hello', then renames it to 'myotherkey'. Finally, it retrieves the value of the new key to verify the rename operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/rename.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nRENAME mykey myotherkey\nGET myotherkey\n```\n\n----------------------------------------\n\nTITLE: Call Redis ECHO Command with redis.call in Lua\nDESCRIPTION: This code snippet demonstrates how to use `redis.call()` to execute the Redis `ECHO` command from within a Lua script. It illustrates how to pass arguments to the command and return the reply from Redis. `redis.call()` is the standard way to interact with Redis commands from Lua.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nreturn redis.call('ECHO', 'Echo, echo... eco... o...')\n```\n\n----------------------------------------\n\nTITLE: Querying Stream with XRANGE by Timestamp Range\nDESCRIPTION: This snippet shows how to query a Redis stream within a specific time range using XRANGE. It uses Unix timestamps in milliseconds to define the start and end of the range. The example retrieves entries created between 1692632086369 and 1692632086371 milliseconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_11\n\nLANGUAGE: redis\nCODE:\n```\n> XRANGE race:france 1692632086369 1692632086371\n```\n\n----------------------------------------\n\nTITLE: Setting JSON data in Redis\nDESCRIPTION: This snippet sets JSON data for each user in Redis using the `JSON.SET` command. It uses the `Path.root_path()` to set the entire JSON object at the root path of the key. It assumes a Redis client object `r` is already initialized and connected and that the `user1`, `user2`, and `user3` variables are defined.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nr.json().set(\"user:1\", Path.root_path(), user1)\nr.json().set(\"user:2\", Path.root_path(), user2)\nr.json().set(\"user:3\", Path.root_path(), user3)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with Host and Port\nDESCRIPTION: This snippet demonstrates how to connect to a Redis server on a specific host and port using the -h and -p options, respectively. It executes the PING command to verify the connection.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -h redis15.localnet.org -p 6390 PING\nPONG\n```\n\n----------------------------------------\n\nTITLE: Querying Hexastore Graph with Redis ZRANGEBYLEX\nDESCRIPTION: This snippet shows how to query the hexastore graph represented in a Redis sorted set using the ZRANGEBYLEX command. It finds relationships where 'antirez' is friends with someone. The query utilizes lexicographical ranges based on the 'spo' prefix to filter results and retrieve only relevant relationships.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_21\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex \"[spo:antirez:is-friend-of:\" \"[spo:antirez:is-friend-of:\\xff\" BYLEX\n```\n\n----------------------------------------\n\nTITLE: Retrieving ACL Log Entries in Redis\nDESCRIPTION: This example shows how to retrieve recent ACL log entries using the `ACL LOG` command.  The argument '1' specifies that only one log entry should be returned. The output includes various fields providing details about the security event, such as the reason for the event ('auth'), the affected object ('AUTH'), the username, and client information.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-log.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\n> ACL LOG 1\n1)  1) \"count\"\n    2) (integer) 1\n    3) \"reason\"\n    4) \"auth\"\n    5) \"context\"\n    6) \"toplevel\"\n    7) \"object\"\n    8) \"AUTH\"\n    9) \"username\"\n   10) \"someuser\"\n   11) \"age-seconds\"\n   12) \"8.038\"\n   13) \"client-info\"\n   14) \"id=3 addr=127.0.0.1:57275 laddr=127.0.0.1:6379 fd=8 name= age=16 idle=0 flags=N db=0 sub=0 psub=0 ssub=0 multi=-1 qbuf=48 qbuf-free=16842 argv-mem=25 multi-mem=0 rbs=1024 rbp=0 obl=0 oll=0 omem=0 tot-mem=18737 events=r cmd=auth user=default redir=-1 resp=2\"\n   15) \"entry-id\"\n   16) (integer) 0\n   17) \"timestamp-created\"\n   18) (integer) 1675361492408\n   19) \"timestamp-last-updated\"\n   20) (integer) 1675361492408\n```\n\n----------------------------------------\n\nTITLE: SMOVE Example in Redis CLI\nDESCRIPTION: Demonstrates the usage of the SMOVE command in the Redis CLI. It includes adding elements to two sets (myset and myotherset), moving an element from myset to myotherset using SMOVE, and then checking the members of both sets using SMEMBERS to verify the movement. This example assumes a running Redis server and a Redis CLI client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/smove.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nSADD myset \"one\"\nSADD myset \"two\"\nSADD myotherset \"three\"\nSMOVE myset myotherset \"two\"\nSMEMBERS myset\nSMEMBERS myotherset\n```\n\n----------------------------------------\n\nTITLE: Getting the Longest Common Subsequence (LCS) in Redis\nDESCRIPTION: This example demonstrates how to use the LCS command in Redis to find the longest common subsequence between two strings stored as values in keys 'key1' and 'key2'.  The strings 'ohmytext' and 'mynewtext' are first stored in Redis, and then the LCS command is used to retrieve the common subsequence.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lcs.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> MSET key1 ohmytext key2 mynewtext\nOK\n> LCS key1 key2\n\"mytext\"\n```\n\n----------------------------------------\n\nTITLE: Measuring Intrinsic Latency with Redis CLI\nDESCRIPTION: This command measures the intrinsic latency of the system running `redis-cli`, which represents the baseline latency.  It uses the `--intrinsic-latency` option, specifying the test time in seconds, and must be run on the same machine as the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n./redis-cli --intrinsic-latency 5\n```\n\n----------------------------------------\n\nTITLE: Running Redis Benchmark with Pipelining\nDESCRIPTION: Executes the `redis-benchmark` utility with pipelining enabled (16 commands per pipeline), running the `SET` and `GET` tests in quiet mode, sending 1,000,000 requests. Requires a running Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-benchmark -n 1000000 -t set,get -P 16 -q\nSET: 403063.28 requests per second\nGET: 508388.41 requests per second\n```\n\n----------------------------------------\n\nTITLE: Redis SUNIONSTORE Example\nDESCRIPTION: This example demonstrates how to use the SUNIONSTORE command in Redis to calculate the union of two sets (key1 and key2) and store the result in a new set (key).  It first adds elements to key1 and key2 using SADD. Then, it uses SUNIONSTORE to store the union. Finally, it retrieves the elements of the resulting set using SMEMBERS.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sunionstore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSUNIONSTORE key key1 key2\nSMEMBERS key\n```\n\n----------------------------------------\n\nTITLE: Disable RDB Persistence using redis-cli\nDESCRIPTION: This code shows how to disable RDB snapshotting (persistence) using the `redis-cli` command-line tool.  The `config set save \"\"` command clears the save configuration, preventing automatic RDB snapshots.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli config set save \"\"\n```\n\n----------------------------------------\n\nTITLE: Master Role Output Example\nDESCRIPTION: Example output of the ROLE command when executed on a Redis master instance. It shows the master's role, replication offset, and connected replicas' information (IP, port, and last acknowledged offset).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/role.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1) \"master\"\n2) (integer) 3129659\n3) 1) 1) \"127.0.0.1\"\n      2) \"9001\"\n      3) \"3129242\"\n   2) 1) \"127.0.0.1\"\n      2) \"9002\"\n      3) \"3129543\"\n```\n\n----------------------------------------\n\nTITLE: RPUSH Example in Redis CLI\nDESCRIPTION: Demonstrates how to use the RPUSH command to add elements to a Redis list and then retrieve the elements using LRANGE. It creates a list named 'mylist', adds 'hello' and 'world' to it, and then retrieves all elements in the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/rpush.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nRPUSH mylist \"hello\"\nRPUSH mylist \"world\"\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: HyperLogLog Operations with PFADD, PFCOUNT, PFMERGE\nDESCRIPTION: This example demonstrates the fundamental operations for using HyperLogLogs in Redis. It adds elements to HyperLogLogs using `PFADD`, retrieves the estimated count of unique elements using `PFCOUNT`, and merges two HyperLogLogs using `PFMERGE`.  The commands are executed via a Redis client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/probabilistic/hyperloglogs.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> PFADD bikes Hyperion Deimos Phoebe Quaoar\n(integer) 1\n> PFCOUNT bikes\n(integer) 4\n> PFADD commuter_bikes Salacia Mimas Quaoar\n(integer) 1\n> PFMERGE all_bikes bikes commuter_bikes\nOK\n> PFCOUNT all_bikes\n(integer) 6\n```\n\n----------------------------------------\n\nTITLE: Appending to a String Key with Redis CLI\nDESCRIPTION: This example demonstrates appending strings to a key in Redis using the CLI. It first checks if the key exists, then appends \"Hello\" and \" World\" to it. Finally, it retrieves the combined string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/append.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nEXISTS mykey\nAPPEND mykey \"Hello\"\nAPPEND mykey \" World\"\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Check AOF Rewrite Status - Redis INFO persistence\nDESCRIPTION: This snippet retrieves information about AOF persistence, specifically checking if an AOF rewrite is currently in progress. The `INFO persistence` command returns a dictionary containing the `aof_rewrite_in_progress` field, which should be 0 to proceed with the backup.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_9\n\nLANGUAGE: Redis\nCODE:\n```\nINFO persistence\n```\n\n----------------------------------------\n\nTITLE: Store and Retrieve String in Redis\nDESCRIPTION: Demonstrates how to store and retrieve a simple string value in Redis using the StringSet and StringGet methods. It stores the string \"bar\" with the key \"foo\" and then retrieves the value, printing it to the console.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\ndb.StringSet(\"foo\", \"bar\");\nConsole.WriteLine(db.StringGet(\"foo\")); // prints bar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sorted Set Members and Scores with WITHSCORES - Redis\nDESCRIPTION: This example demonstrates retrieving members along with their associated scores from a Redis sorted set using the `ZRANGE` command with the `WITHSCORES` option. The output alternates between member and score.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> ZRANGE racer_scores 0 -1 withscores\n 1) \"Ford\"\n 2) \"6\"\n 3) \"Sam-Bodden\"\n 4) \"8\"\n 5) \"Norem\"\n 6) \"10\"\n 7) \"Royce\"\n 8) \"10\"\n 9) \"Castilla\"\n10) \"12\"\n11) \"Prickett\"\n12) \"14\"\n```\n\n----------------------------------------\n\nTITLE: Redis Discard Command Example\nDESCRIPTION: This example demonstrates how the DISCARD command can be used to abort a transaction. The INCR command is queued, but then the transaction is discarded, so GET foo still returns the original value, \"1\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> SET foo 1\nOK\n> MULTI\nOK\n> INCR foo\nQUEUED\n> DISCARD\nOK\n> GET foo\n\"1\"\n```\n\n----------------------------------------\n\nTITLE: Setting, Getting, and Retrieving All Hash Fields - Redis\nDESCRIPTION: This example demonstrates how to set multiple fields in a Redis hash using HSET, retrieve a single field using HGET, and retrieve all fields and values using HGETALL.  It showcases basic hash operations in Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/hashes.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> HSET bike:1 model Deimos brand Ergonom type 'Enduro bikes' price 4972\n(integer) 4\n> HGET bike:1 model\n\"Deimos\"\n> HGET bike:1 price\n\"4972\"\n> HGETALL bike:1\n1) \"model\"\n2) \"Deimos\"\n3) \"brand\"\n4) \"Ergonom\"\n5) \"type\"\n6) \"Enduro bikes\"\n7) \"price\"\n8) \"4972\"\n```\n\n----------------------------------------\n\nTITLE: Redis BITOP Example\nDESCRIPTION: This example demonstrates how to use the BITOP command to perform a bitwise AND operation between two keys, key1 and key2, and store the result in dest.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitop.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"foobar\"\nSET key2 \"abcdef\"\nBITOP AND dest key1 key2\nGET dest\n```\n\n----------------------------------------\n\nTITLE: Replying with a Map - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply to a client with a RESP3 Map using the Redis Module API. The function `RedisModule_ReplyWithMap` initiates the map reply, and subsequent `ReplyWith*` functions populate the key-value pairs. `RedisModule_ReplySetMapLength` is used for setting the map length when it is not known beforehand.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_58\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithMap(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: RPOP Usage Examples - Redis CLI\nDESCRIPTION: Demonstrates the use of the RPOP command in Redis. The first example pops a single element. The second example pops two elements.  LRANGE is used to display the remaining list elements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/rpop.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nRPOP mylist\nRPOP mylist 2\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Redis Reconnection Strategy (TypeScript)\nDESCRIPTION: This TypeScript snippet showcases a custom reconnection strategy for the node-redis client.  It allows configuring the client to attempt reconnection with a defined delay between attempts, and to terminate the connection if the maximum number of retries is exceeded. This ensures a more robust connection to the Redis server in the event of network issues.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  socket: {\n    reconnectStrategy: function(retries) {\n        if (retries > 20) {\n            console.log(\"Too many attempts to reconnect. Redis connection was terminated\");\n            return new Error(\"Too many retries.\");\n        } else {\n            return retries * 500;\n        }\n    }\n  }\n});\nclient.on('error', error => console.error('Redis client error:', error));\n```\n\n----------------------------------------\n\nTITLE: Interacting with Redis via redis.call\nDESCRIPTION: This example shows how to interact with Redis from a Lua script using `redis.call()`. The script calls the `SET` command to set the value of a key passed as an argument. The first argument '1' specifies that there is one key name argument.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n> EVAL \"return redis.call('SET', KEYS[1], ARGV[1])\" 1 foo bar\nOK\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster\nDESCRIPTION: This snippet shows how to connect to a Redis cluster using `NewClusterClient`. It defines the addresses of the cluster nodes.  Options for routing commands by latency or randomly are also shown. Requires `go-redis/v9`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nclient := redis.NewClusterClient(&redis.ClusterOptions{\n    Addrs: []string{\":16379\", \":16380\", \":16381\", \":16382\", \":16383\", \":16384\"},\n\n    // To route commands by latency or randomly, enable one of the following.\n    //RouteByLatency: true,\n    //RouteRandomly: true,\n})\n```\n\n----------------------------------------\n\nTITLE: MSET Command Example\nDESCRIPTION: This example shows the output of the `COMMAND` introspection for the `MSET` command. It highlights the arity, flags, first key, last key, and step values, demonstrating how to determine key positions in a multi-key command using the step count.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1) 1) \"mset\"\n   2) (integer) -3\n   3) 1) write\n      2) denyoom\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 2\n   ...\n```\n\n----------------------------------------\n\nTITLE: Adding Followers to a Sorted Set in Redis\nDESCRIPTION: This snippet demonstrates how to add a follower to a user's `followers` Sorted Set in Redis. The `ZADD` command adds a user ID (e.g., 1234) to the set, with the score representing the Unix timestamp when the user started following (e.g., 1401267618).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_17\n\nLANGUAGE: Redis\nCODE:\n```\nZADD followers:1000 1401267618 1234 => Add user 1234 with time 1401267618\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server with TLS using redis-cli\nDESCRIPTION: This command connects to a Redis server with TLS enabled using the redis-cli. It requires the paths to the TLS certificate, key, and CA certificate files for proper authentication and encryption. These are the same files used by the server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/encryption.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./src/redis-cli --tls \\\n    --cert ./tests/tls/redis.crt \\\n    --key ./tests/tls/redis.key \\\n    --cacert ./tests/tls/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Getting Integer Reply Value (C)\nDESCRIPTION: This snippet shows how to get the integer value from a RedisModuleCallReply of type `REDISMODULE_REPLY_INTEGER` using `RedisModule_CallReplyInteger`. If the reply is not an integer, it returns `LLONG_MIN`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nlong long reply_integer_val = RedisModule_CallReplyInteger(reply);\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Hash Field Existence using HEXISTS\nDESCRIPTION: This example demonstrates how to use the `HEXISTS` command in the Redis CLI to check if a field exists within a hash.  It first sets a field (`field1`) in a hash called `myhash` and then checks the existence of both `field1` and `field2`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hexists.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nHSET myhash field1 \"foo\"\nHEXISTS myhash field1\nHEXISTS myhash field2\n```\n\n----------------------------------------\n\nTITLE: Duplicating Strings with RedisModule_Strdup (C)\nDESCRIPTION: This function duplicates a string using Redis's memory allocation. The returned string is allocated using `RedisModule_Alloc()`. This is similar to `strdup()` but uses Redis's memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nchar *RedisModule_Strdup(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Store and Retrieve HashMap in Redis\nDESCRIPTION: Demonstrates how to store and retrieve a HashMap (Redis Hash) in Redis using the HashSet and HashGetAll methods. It creates a HashEntry array with key-value pairs and stores it in Redis under the key \"user-session:123\", then retrieves and prints all the fields.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar hash = new HashEntry[] { \n    new HashEntry(\"name\", \"John\"), \n    new HashEntry(\"surname\", \"Smith\"),\n    new HashEntry(\"company\", \"Redis\"),\n    new HashEntry(\"age\", \"29\"),\n    };\ndb.HashSet(\"user-session:123\", hash);\n\nvar hashFields = db.HashGetAll(\"user-session:123\");\nConsole.WriteLine(String.Join(\"; \", hashFields));\n// Prints: \n// name: John; surname: Smith; company: Redis; age: 29\n```\n\n----------------------------------------\n\nTITLE: Get Value Type of a Key - Redis\nDESCRIPTION: This example shows how to determine the data type of a value stored at a specific key using the `TYPE` command in Redis. If the key does not exist, the command returns 'none'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> set mykey x\nOK\n> type mykey\nstring\n> del mykey\n(integer) 1\n> type mykey\nnone\n```\n\n----------------------------------------\n\nTITLE: BRPOP Example\nDESCRIPTION: This example demonstrates the usage of the BRPOP command in Redis. It first deletes the lists 'list1' and 'list2', then pushes elements 'a', 'b', and 'c' onto 'list1'. Finally, it uses BRPOP to pop an element from either 'list1' or 'list2', with a timeout of 0 (blocking indefinitely). The output shows the list from which the element was popped ('list1') and the value of the popped element ('c').\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/brpop.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> DEL list1 list2\n(integer) 0\nredis> RPUSH list1 a b c\n(integer) 3\nredis> BRPOP list1 list2 0\n1) \"list1\"\n2) \"c\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer Group and Stream with XGROUP CREATE MKSTREAM\nDESCRIPTION: This command creates a consumer group named `italy_riders` for the stream `race:italy`.  If the stream doesn't exist, the `MKSTREAM` option creates it automatically. The `$` ID means only new messages will be consumed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_19\n\nLANGUAGE: Redis\nCODE:\n```\nXGROUP CREATE race:italy italy_riders $ MKSTREAM\n```\n\n----------------------------------------\n\nTITLE: Sentinel Authentication Configuration\nDESCRIPTION: These snippets show how to configure Sentinel to authenticate with the Redis server using the `auth-user` and `auth-pass` directives. This is necessary when the master requires authentication from clients.  The master name, username, and password must be specified in the sentinel configuration file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_17\n\nLANGUAGE: Redis Configuration\nCODE:\n```\nsentinel auth-user <master-name> <username>\n```\n\nLANGUAGE: Redis Configuration\nCODE:\n```\nsentinel auth-pass <master-name> <password>\n```\n\n----------------------------------------\n\nTITLE: LPUSH example in Redis CLI\nDESCRIPTION: This example demonstrates how to use the LPUSH command to insert elements at the head of a list in Redis. It first pushes \"world\", then \"hello\", and finally retrieves the list using LRANGE. The resulting list will contain \"hello\" as the first element and \"world\" as the second element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpush.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nLPUSH mylist \"world\"\nLPUSH mylist \"hello\"\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Adding Composite Index Data\nDESCRIPTION: This shows how to add composite index data (e.g., room, price, and product ID) in a Redis sorted set using a colon as a separator between the fields. Numerical values are padded with leading zeros.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_17\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 0056:0028.44:90\nZADD myindex 0 0034:0011.00:832\n```\n\n----------------------------------------\n\nTITLE: Lexicographical (Alphabetical) Sort in Redis\nDESCRIPTION: This snippet demonstrates how to use the `ALPHA` modifier to sort a list of strings lexicographically.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist ALPHA\n```\n\n----------------------------------------\n\nTITLE: Minimal Redis Sentinel Configuration\nDESCRIPTION: This snippet showcases a minimal configuration file for Redis Sentinel. It defines two masters to monitor (`mymaster` and `resque`) along with their respective IP addresses, ports, and quorum values. The `down-after-milliseconds`, `failover-timeout`, and `parallel-syncs` options are also configured for each master, controlling how long Sentinel waits before considering a master down, the failover timeout, and the number of replicas that can be reconfigured simultaneously.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nsentinel monitor mymaster 127.0.0.1 6379 2\nsentinel down-after-milliseconds mymaster 60000\nsentinel failover-timeout mymaster 180000\nsentinel parallel-syncs mymaster 1\n\nsentinel monitor resque 192.168.1.3 6380 4\nsentinel down-after-milliseconds resque 10000\nsentinel failover-timeout resque 180000\nsentinel parallel-syncs resque 5\n```\n\n----------------------------------------\n\nTITLE: BITCOUNT Usage Examples\nDESCRIPTION: These examples demonstrate how to use the BITCOUNT command in Redis to count set bits in a string. The examples showcase the use of the command with and without start/end indices and the BIT option. The SET command is used to initialize a string value for the key 'mykey'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitcount.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"foobar\"\nBITCOUNT mykey\nBITCOUNT mykey 0 0\nBITCOUNT mykey 1 1\nBITCOUNT mykey 1 1 BYTE\nBITCOUNT mykey 5 30 BIT\n```\n\n----------------------------------------\n\nTITLE: Redis GETRANGE Examples\nDESCRIPTION: Illustrates the usage of the GETRANGE command with various start and end offsets to retrieve substrings from a Redis string value. Demonstrates both positive and negative indexing, as well as out-of-range handling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/getrange.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSET mykey \"This is a string\"\nGETRANGE mykey 0 3\nGETRANGE mykey -3 -1\nGETRANGE mykey 0 -1\nGETRANGE mykey 10 100\n```\n\n----------------------------------------\n\nTITLE: Popping Elements from Redis Lists using LPOP and RPOP\nDESCRIPTION: This example demonstrates how to remove and retrieve elements from Redis lists using LPOP (from the head) and RPOP (from the tail). It illustrates the process of emptying a list by popping elements and shows how Redis returns a NULL value when attempting to pop from an empty list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2 bike:3\n(integer) 3\n> RPOP bikes:repairs\n\"bike:3\"\n> LPOP bikes:repairs\n\"bike:1\"\n> RPOP bikes:repairs\n\"bike:2\"\n> RPOP bikes:repairs\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Logging to Redis Server Log with redis.log in Lua\nDESCRIPTION: Writes a message to the Redis server log using the `redis.log` function. Requires two arguments: the log level (e.g., `redis.LOG_WARNING`) and the message string. The message is logged only if its level is equal to or greater than the server's `loglevel` configuration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_11\n\nLANGUAGE: Lua\nCODE:\n```\nredis.log(redis.LOG_WARNING, 'Something is terribly wrong')\n```\n\n----------------------------------------\n\nTITLE: Redis Function Library: Adding Error Handling (Lua)\nDESCRIPTION: This Lua snippet adds an error-handling helper function, `check_keys()`, to the `mylib` library. It verifies that the number of key arguments is exactly one. If not, it logs a warning and returns an error reply using `redis.error_reply()`. The other functions in the library now call `check_keys()` to validate the input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal function check_keys(keys)\n  local error = nil\n  local nkeys = table.getn(keys)\n  if nkeys == 0 then\n    error = 'Hash key name not provided'\n  elseif nkeys > 1 then\n    error = 'Only one key name is allowed'\n  end\n\n  if error ~= nil then\n    redis.log(redis.LOG_WARNING, error);\n    return redis.error_reply(error)\n  end\n  return nil\nend\n\nlocal function my_hset(keys, args)\n  local error = check_keys(keys)\n  if error ~= nil then\n    return error\n  end\n\n  local hash = keys[1]\n  local time = redis.call('TIME')[1]\n  return redis.call('HSET', hash, '_last_modified_', time, unpack(args))\nend\n\nlocal function my_hgetall(keys, args)\n  local error = check_keys(keys)\n  if error ~= nil then\n    return error\n  end\n\n  redis.setresp(3)\n  local hash = keys[1]\n  local res = redis.call('HGETALL', hash)\n  res['map']['_last_modified_'] = nil\n  return res\nend\n\nlocal function my_hlastmodified(keys, args)\n  local error = check_keys(keys)\n  if error ~= nil then\n    return error\n  end\n\n  local hash = keys[1]\n  return redis.call('HGET', keys[1], '_last_modified_')\nend\n\nredis.register_function('my_hset', my_hset)\nredis.register_function('my_hgetall', my_hgetall)\nredis.register_function('my_hlastmodified', my_hlastmodified)\n```\n\n----------------------------------------\n\nTITLE: Calling a Redis Function using FCALL\nDESCRIPTION: This command invokes the Redis Function `my_hset` using the `FCALL` command. It specifies `1` as the number of key arguments, indicating that the first argument (`myhash`) is the key name. Subsequent arguments are treated as regular arguments to the function.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nredis> FCALL my_hset 1 myhash myfield \"some value\" another_field \"another value\"\n```\n\n----------------------------------------\n\nTITLE: Get Redis Configuration parameters\nDESCRIPTION: This redis command is used to fetch Redis configuration parameters at runtime. Used for auditing and understanding the current configuration state.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\nCONFIG GET *\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Key-Value Pair in Redis\nDESCRIPTION: This snippet demonstrates how to retrieve a value associated with a key in Redis using the `GET` command. It retrieves the value previously stored with the `SET` command, confirming Redis's data persistence.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGET foo => bar\n```\n\n----------------------------------------\n\nTITLE: Redis GET Example\nDESCRIPTION: This example demonstrates the usage of the GET command in Redis. It shows how to retrieve a non-existent key, set a key to a string value, and then retrieve that value. The first GET returns nil, the SET assigns 'Hello' to 'mykey', and the second GET retrieves 'Hello'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/get.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGET nonexisting\nSET mykey \"Hello\"\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Fetching a single entry from a stream\nDESCRIPTION: This snippet illustrates how to retrieve a single entry from a Redis stream using `XRANGE` by specifying the same ID as both the start and end of the range. It demonstrates that `XRANGE` effectively acts as a `XGET` command when used in this manner.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE mystream 1526984818136-0 1526984818136-0\n1) 1) 1526984818136-0\n   2) 1) \"duration\"\n      2) \"1532\"\n      3) \"event-id\"\n      4) \"5\"\n      5) \"user-id\"\n      6) \"7782813\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Redis ACL Categories\nDESCRIPTION: This code snippet lists all available command categories in Redis using `ACL CAT`. These categories can be used to grant or revoke permissions efficiently.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nACL CAT -- Will just list all the categories available\n```\n\n----------------------------------------\n\nTITLE: Set Key with Expiration Using SET Options - Redis\nDESCRIPTION: This example demonstrates how to set a key with an expiration time using the `SET` command with the `EX` option in Redis. `EX` specifies the expiration time in seconds. The `TTL` command is used to check the remaining time to live for the key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n> set key 100 ex 10\nOK\n> ttl key\n(integer) 9\n```\n\n----------------------------------------\n\nTITLE: Acknowledging processed message with XACK\nDESCRIPTION: This command acknowledges that the message with ID `1692632639151-0` in the `race:italy` stream has been processed by the `italy_riders` consumer group. This removes the message from the pending entries list (PEL).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_23\n\nLANGUAGE: Redis\nCODE:\n```\nXACK race:italy italy_riders 1692632639151-0\n```\n\n----------------------------------------\n\nTITLE: Example XADD Argument Structure\nDESCRIPTION: This example demonstrates how the `XADD` command's arguments are structured when retrieved using the `COMMAND DOCS` command. It illustrates the use of `block`, `oneof`, and other argument types to represent complex argument structures, like the trimming clause `[MAXLEN|MINID [=|~] threshold [LIMIT count]]`.  The example provides a nested map structure representing the command arguments, showing attributes like `name`, `type`, `token`, `flags` and `value`\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/command-arguments.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1) 1) \"name\"\n   2) \"key\"\n   3) \"type\"\n   4) \"key\"\n   5) \"value\"\n   6) \"key\"\n2)  1) \"name\"\n    2) \"nomkstream\"\n    3) \"type\"\n    4) \"pure-token\"\n    5) \"token\"\n    6) \"NOMKSTREAM\"\n    7) \"since\"\n    8) \"6.2\"\n    9) \"flags\"\n   10) 1) optional\n3) 1) \"name\"\n   2) \"trim\"\n   3) \"type\"\n   4) \"block\"\n   5) \"flags\"\n   6) 1) optional\n   7) \"value\"\n   8) 1) 1) \"name\"\n         2) \"strategy\"\n         3) \"type\"\n         4) \"oneof\"\n         5) \"value\"\n         6) 1) 1) \"name\"\n               2) \"maxlen\"\n               3) \"type\"\n               4) \"pure-token\"\n               5) \"token\"\n               6) \"MAXLEN\"\n            2) 1) \"name\"\n               2) \"minid\"\n               3) \"type\"\n               4) \"pure-token\"\n               5) \"token\"\n               6) \"MINID\"\n               7) \"since\"\n               8) \"6.2\"\n      2) 1) \"name\"\n         2) \"operator\"\n         3) \"type\"\n         4) \"oneof\"\n         5) \"flags\"\n         6) 1) optional\n         7) \"value\"\n         8) 1) 1) \"name\"\n               2) \"equal\"\n               3) \"type\"\n               4) \"pure-token\"\n               5) \"token\"\n               6) \"=\"\n            2) 1) \"name\"\n               2) \"approximately\"\n               3) \"type\"\n               4) \"pure-token\"\n               5) \"token\"\n               6) \"~\"\n      3) 1) \"name\"\n         2) \"threshold\"\n         3) \"type\"\n         4) \"string\"\n         5) \"value\"\n         6) \"threshold\"\n      4)  1) \"name\"\n          2) \"count\"\n          3) \"type\"\n          4) \"integer\"\n          5) \"token\"\n          6) \"LIMIT\"\n          7) \"since\"\n          8) \"6.2\"\n          9) \"flags\"\n         10) 1) optional\n         11) \"value\"\n         12) \"count\"\n4) 1) \"name\"\n   2) \"id_or_auto\"\n   3) \"type\"\n   4) \"oneof\"\n   5) \"value\"\n   6) 1) 1) \"name\"\n         2) \"auto_id\"\n         3) \"type\"\n         4) \"pure-token\"\n         5) \"token\"\n         6) \"*\"\n      2) 1) \"name\"\n         2) \"id\"\n         3) \"type\"\n         4) \"string\"\n         5) \"value\"\n         6) \"id\"\n5) 1) \"name\"\n   2) \"field_value\"\n   3) \"type\"\n   4) \"block\"\n   5) \"flags\"\n   6) 1) multiple\n   7) \"value\"\n   8) 1) 1) \"name\"\n         2) \"field\"\n         3) \"type\"\n         4) \"string\"\n         5) \"value\"\n         6) \"field\"\n      2) 1) \"name\"\n         2) \"value\"\n         3) \"type\"\n         4) \"string\"\n         5) \"value\"\n         6) \"value\"\n```\n\n----------------------------------------\n\nTITLE: Setting Key from Stdin with -x Option\nDESCRIPTION: This snippet shows how to set a Redis key with the content of a file using input redirection and the `-x` option.  It sets the key 'net_services' to the content of /etc/services and then retrieves a portion of the value using GETRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -x SET net_services < /etc/services\nOK\n$ redis-cli GETRANGE net_services 0 50\n\"#\\n# Network services, Internet style\\n#\\n# Note that \"\n```\n\n----------------------------------------\n\nTITLE: Setting Client Timeout via CONFIG SET - Redis\nDESCRIPTION: This snippet demonstrates how to configure the client timeout in Redis using the `CONFIG SET` command. The timeout value is specified in seconds. If a client is idle for longer than the specified timeout, the connection will be closed. Note that this does not apply to Pub/Sub clients.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/clients.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCONFIG SET timeout <value>\n```\n\n----------------------------------------\n\nTITLE: Set Key Expiration - Redis\nDESCRIPTION: This example demonstrates how to set an expiration time (TTL) for a key using the `EXPIRE` command in Redis. After the specified number of seconds, the key is automatically deleted. The `GET` command will return the value while the key exists, and `(nil)` after the key has expired.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> set key some-value\nOK\n> expire key 5\n(integer) 1\n> get key (immediately)\n\"some-value\"\n> get key (after some time)\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Automatically Claiming Pending Messages (XAUTOCLAIM)\nDESCRIPTION: This command automates the process of claiming idle pending messages and transferring ownership to a specified consumer. It optimizes the generic recovery process within Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_30\n\nLANGUAGE: redis\nCODE:\n```\n> XAUTOCLAIM race:italy italy_riders Alice 60000 0-0 COUNT 1\n```\n\n----------------------------------------\n\nTITLE: Bitwise OR Operation in Lua\nDESCRIPTION: Performs a bitwise OR operation on multiple numbers using the `bit.bor()` function. The function accepts one or more numbers as arguments and returns the result of the bitwise OR operation applied to all arguments. Part of the `bit` library, available in Redis Lua scripts and functions since version 2.8.18.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_31\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL 'return bit.bor(1,2,4,8,16,32,64,128)' 0\n(integer) 255\n```\n\n----------------------------------------\n\nTITLE: Counting Objects by Key Name with Redis CLI\nDESCRIPTION: This command uses `--scan` and `--pattern` to find keys matching a specific pattern, and pipes the output to `wc -l` to count the number of matching keys. It is useful for counting specific types of objects in Redis based on their key naming convention.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --scan --pattern 'user:*' | wc -l\n```\n\n----------------------------------------\n\nTITLE: Adding Members to Sets using SADD - Redis\nDESCRIPTION: This snippet demonstrates how to add new members to existing Redis sets using the `SADD` command. It showcases adding single and multiple members. If a member already exists, it will be ignored.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> SADD bikes:racing:france bike:1\n(integer) 1\n> SADD bikes:racing:france bike:1\n(integer) 0\n> SADD bikes:racing:france bike:2 bike:3\n(integer) 2\n> SADD bikes:racing:usa bike:1 bike:4\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Array Reply\nDESCRIPTION: Replies to the client with an array. First, the array length must be sent. Then the array elements are sent using other ReplyWith functions. `ctx` is the RedisModuleCtx, and the second argument is the number of elements in the array.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithArray(ctx,2);\nRedisModule_ReplyWithStringBuffer(ctx,\"age\",3);\nRedisModule_ReplyWithLongLong(ctx,22);\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration String with Spaces Example\nDESCRIPTION: This snippet illustrates how to include strings containing spaces as arguments in Redis configuration directives.  Double quotes are used to enclose the string \"hello world\", which is assigned to the `requirepass` directive, setting the password required for authentication. This example demonstrates the correct syntax for handling arguments with spaces in Redis configurations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/config.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrequirepass \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Get detailed pending entries using XPENDING - Redis\nDESCRIPTION: This command retrieves detailed information about pending messages within a specified range of IDs in the consumer group `group55` for the stream `mystream`. The `-` and `+` arguments represent the minimum and maximum IDs respectively, and `10` limits the number of returned messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xpending.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n> XPENDING mystream group55 - + 10\n1) 1) 1526984818136-0\n   2) \"consumer-123\"\n   3) (integer) 196415\n   4) (integer) 1\n```\n\n----------------------------------------\n\nTITLE: Filtering Matches by Minimal Length in Redis\nDESCRIPTION: This example shows how to filter the matches returned by the `IDX` option to only include those with a minimum length of 4, using the `MINMATCHLEN` option. This allows focusing on longer, more significant matches between the strings.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lcs.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n> LCS key1 key2 IDX MINMATCHLEN 4\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n3) \"len\"\n4) (integer) 6\n```\n\n----------------------------------------\n\nTITLE: Searching Within Radius with GEOSEARCH - Redis CLI\nDESCRIPTION: This example shows how to search for members within a specified radius of a given longitude and latitude using the GEOSEARCH command in Redis. The example searches the \"Sicily\" sorted set for members within a 200km radius of longitude 15 and latitude 37, sorted in ascending order by distance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geosearch.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nGEOSEARCH Sicily FROMLONLAT 15 37 BYRADIUS 200 km ASC\n```\n\n----------------------------------------\n\nTITLE: RedisInsight Deployment YAML with Persistent Storage\nDESCRIPTION: This YAML configuration defines a Kubernetes deployment for RedisInsight with persistent storage using a PersistentVolumeClaim. It includes a service definition, a PVC, and a deployment. An init container is used to set the correct permissions on the volume. The deployment strategy is set to `Recreate` for compatibility with persistent volumes.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# RedisInsight service with name 'redisinsight-service'\napiVersion: v1\nkind: Service\nmetadata:\n  name: redisinsight-service       # name should not be 'redisinsight'\n                                   # since the service creates\n                                   # environment variables that\n                                   # conflicts with redisinsight\n                                   # application's environment\n                                   # variables `RI_APP_HOST` and\n                                   # `RI_APP_PORT`\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 5540\n  selector:\n    app: redisinsight\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: redisinsight-pv-claim\n  labels:\n    app: redisinsight\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: default\n---\n# RedisInsight deployment with name 'redisinsight'\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redisinsight #deployment name\n  labels:\n    app: redisinsight #deployment label\nspec:\n  replicas: 1 #a single replica pod\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: redisinsight #which pods is the deployment managing, as defined by the pod template\n  template: #pod template\n    metadata:\n      labels:\n        app: redisinsight #label for pod/s\n    spec:\n      volumes:\n        - name: redisinsight\n          persistentVolumeClaim:\n            claimName: redisinsight-pv-claim\n      initContainers:\n        - name: init\n          image: busybox\n          command:\n            - /bin/sh\n            - '-c'\n            - |\n              chown -R 1001 /data\n          resources: {}\n          volumeMounts:\n            - name: redisinsight\n              mountPath: /data\n          terminationMessagePath: /dev/termination-log\n          terminationMessagePolicy: File\n      containers:\n        - name:  redisinsight #Container name (DNS_LABEL, unique)\n          image: redis/redisinsight:latest #repo/image\n          imagePullPolicy: IfNotPresent #Always pull image\n          volumeMounts:\n          - name: redisinsight #Pod volumes to mount into the container's filesystem. Cannot be updated.\n            mountPath: /data\n          ports:\n          - containerPort: 5540 #exposed container port and protocol\n            protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Hash Fields using HMSET in Redis CLI\nDESCRIPTION: This snippet demonstrates how to set multiple fields and their values in a Redis hash using the `HMSET` command.  It overwrites any existing fields. It then uses `HGET` to retrieve the values of those fields. Requires a Redis server to be running.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hmset.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nHMSET myhash field1 \"Hello\" field2 \"World\"\nHGET myhash field1\nHGET myhash field2\n```\n\n----------------------------------------\n\nTITLE: Redis XREAD with Special $ ID\nDESCRIPTION: This example demonstrates how to use the special `$` ID with `XREAD` to only receive entries added to the stream after the command is called. It blocks for 5000 milliseconds and retrieves up to 100 entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xread.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> XREAD BLOCK 5000 COUNT 100 STREAMS mystream $\n```\n\n----------------------------------------\n\nTITLE: Listing Active ACL Rules in Redis\nDESCRIPTION: This example demonstrates how to list the currently active ACL rules in the Redis server using the ACL LIST command.  The output shows user configurations, including access permissions and associated passwords/keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-list.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> ACL LIST\n1) \"user antirez on #9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08 ~objects:* &* +@all -@admin -@dangerous\"\n2) \"user default on nopass ~* &* +@all\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with URL\nDESCRIPTION: This snippet demonstrates connecting to Redis using a connection string (URL). It parses the URL to extract connection details and creates a Redis client.  Error handling is included to catch parsing errors. Requires `go-redis/v9`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nopt, err := redis.ParseURL(\"redis://<user>:<pass>@localhost:6379/<db>\")\nif err != nil {\n\tpanic(err)\n}\n\nclient := redis.NewClient(opt)\n```\n\n----------------------------------------\n\nTITLE: Reading from multiple Redis streams\nDESCRIPTION: This example demonstrates how to read data from two Redis streams, `mystream` and `writers`, starting from the beginning of each stream. It uses the `XREAD` command with the `COUNT` option to limit the number of entries returned per stream to two.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xread.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> XREAD COUNT 2 STREAMS mystream writers 0-0 0-0\n1) 1) \"mystream\"\n   2) 1) 1) 1526984818136-0\n         2) 1) \"duration\"\n            2) \"1532\"\n            3) \"event-id\"\n            4) \"5\"\n            5) \"user-id\"\n            6) \"7782813\"\n      2) 1) 1526999352406-0\n         2) 1) \"duration\"\n            2) \"812\"\n            3) \"event-id\"\n            4) \"9\"\n            5) \"user-id\"\n            6) \"388234\"\n2) 1) \"writers\"\n   2) 1) 1) 1526985676425-0\n         2) 1) \"name\"\n            2) \"Virginia\"\n            3) \"surname\"\n            4) \"Woolf\"\n      2) 1) 1526985685298-0\n         2) 1) \"name\"\n            2) \"Jane\"\n            3) \"surname\"\n            4) \"Austen\"\n```\n\n----------------------------------------\n\nTITLE: GET Command Example\nDESCRIPTION: This example illustrates the output of the `COMMAND` command for the `GET` command. It shows how the information is formatted, including the command name, arity, flags, key positions, ACL categories, tips, key specifications, and subcommands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1)  1) \"get\"\n    2) (integer) 2\n    3) 1) readonly\n       2) fast\n    4) (integer) 1\n    5) (integer) 1\n    6) (integer) 1\n    7) 1) @read\n       2) @string\n       3) @fast\n    8) (empty array)\n    9) 1) 1) \"flags\"\n          2) 1) read\n          3) \"begin_search\"\n          4) 1) \"type\"\n             2) \"index\"\n             3) \"spec\"\n             4) 1) \"index\"\n                2) (integer) 1\n          5) \"find_keys\"\n          6) 1) \"type\"\n             2) \"range\"\n             3) \"spec\"\n             4) 1) \"lastkey\"\n                2) (integer) 0\n                3) \"keystep\"\n                4) (integer) 1\n                5) \"limit\"\n                6) (integer) 0\n   10) (empty array)\n...\n```\n\n----------------------------------------\n\nTITLE: Executing the TIME Command in Redis CLI\nDESCRIPTION: This snippet demonstrates how to execute the TIME command in the Redis command-line interface. The command returns the current server time as a two-item list: a Unix timestamp and the microseconds elapsed in the current second. It mimics the `gettimeofday` system call interface.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/time.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nTIME\nTIME\n```\n\n----------------------------------------\n\nTITLE: Converting Number to Hex String in Lua\nDESCRIPTION: Converts a number to a hexadecimal string representation. The `bit.tohex()` function takes a number as input and returns its hexadecimal equivalent. An optional second argument specifies the number of hex digits. The function is available as part of the `bit` library in Redis Lua scripts and functions since version 2.8.18.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_30\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL 'return bit.tohex(422342)' 0\n\"000671c6\"\n```\n\n----------------------------------------\n\nTITLE: Trimming a List with LTRIM - Redis CLI\nDESCRIPTION: This example showcases how to trim a Redis list using the LTRIM command. It initializes a list with three elements, trims it to include only elements from index 1 to the last element (-1), and then retrieves the remaining elements using LRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/ltrim.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLTRIM mylist 1 -1\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Counting Set Bits in Redis Bitmap\nDESCRIPTION: This example shows how to use the `BITCOUNT` command to count the number of bits set to 1 in a Redis bitmap.  This is useful for determining how many users or events occurred within a specific period represented by the bitmap.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/bitmaps.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\n> BITCOUNT pings:2024-01-01-00:00\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: ZINTERSTORE Example\nDESCRIPTION: This example demonstrates the usage of the ZINTERSTORE command with WEIGHTS option. It adds elements to two sorted sets, zset1 and zset2, then computes their intersection using ZINTERSTORE, storing the result in the 'out' sorted set.  The WEIGHTS option multiplies the scores of zset1 by 2 and zset2 by 3 during the intersection.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zinterstore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3\nZRANGE out 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Reading Stream messages with XREADGROUP\nDESCRIPTION: This command reads messages from the `race:italy` stream using the `italy_riders` consumer group as the `Alice` consumer. The `>` ID means that the command will return only new messages never delivered to other consumers so far.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_21\n\nLANGUAGE: Redis\nCODE:\n```\nXREADGROUP GROUP italy_riders Alice COUNT 1 STREAMS race:italy >\n```\n\n----------------------------------------\n\nTITLE: GEOADD and GEORADIUS examples\nDESCRIPTION: This example demonstrates adding geospatial data to a sorted set and then querying it using GEORADIUS. The first line adds two locations, \"Palermo\" and \"Catania\", to the \"Sicily\" sorted set with their respective longitude and latitude coordinates. The subsequent lines demonstrate querying the sorted set to find locations within 200km of longitude 15 and latitude 37, returning the distance and coordinates respectively or both.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/georadius.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEORADIUS Sicily 15 37 200 km WITHDIST\nGEORADIUS Sicily 15 37 200 km WITHCOORD\nGEORADIUS Sicily 15 37 200 km WITHDIST WITHCOORD\n```\n\n----------------------------------------\n\nTITLE: Executing a Simple Lua Script with EVAL\nDESCRIPTION: This example demonstrates how to execute a simple Lua script using the `EVAL` command in Redis. The script returns the string 'Hello, scripting!'. The second argument '0' indicates that no key names are passed as arguments to the script.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n> EVAL \"return 'Hello, scripting!'\" 0\n\"Hello, scripting!\"\n```\n\n----------------------------------------\n\nTITLE: Finding the Difference Between Sets using SDIFF - Redis\nDESCRIPTION: This snippet finds the difference between two sets using `SDIFF`. It shows which elements are in the first set but not in the subsequent sets.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\n> SADD bikes:racing:usa bike:1 bike:4\n(integer) 2\n> SDIFF bikes:racing:france bikes:racing:usa\n1) \"bike:3\"\n2) \"bike:2\"\n```\n\n----------------------------------------\n\nTITLE: Redis SINTERCARD Examples\nDESCRIPTION: Illustrates the usage of the Redis SINTERCARD command with different arguments, including the LIMIT option. Demonstrates how to add elements to sets using SADD, find the intersection using SINTER, and get the cardinality of the intersection using SINTERCARD, with and without a limit.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sintercard.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key1 \"d\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSINTER key1 key2\nSINTERCARD 2 key1 key2\nSINTERCARD 2 key1 key2 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: ZRANGEBYSCORE Basic Usage Examples - Redis CLI\nDESCRIPTION: This example shows a set of basic ZRANGEBYSCORE command usages. These include retrieving all elements within positive and negative infinity, retrieving elements within a closed range, and retrieving elements with single and double exclusive ranges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebyscore.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZRANGEBYSCORE myzset -inf +inf\nZRANGEBYSCORE myzset 1 2\nZRANGEBYSCORE myzset (1 2\nZRANGEBYSCORE myzset (1 (2\n```\n\n----------------------------------------\n\nTITLE: Type Checking Before LPUSH\nDESCRIPTION: This snippet demonstrates Redis' type checking. If a key exists with a different data type (e.g., string), `LPUSH` will return an error. `SET` is used to create a string, and then `LPUSH` is attempted on the same key, resulting in a `WRONGTYPE` error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_12\n\nLANGUAGE: redis\nCODE:\n```\n> SET new_bikes bike:1\nOK\n> TYPE new_bikes\nstring\n> LPUSH new_bikes bike:2 bike:3\n(error) WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: LMOVE command examples\nDESCRIPTION: Demonstrates the usage of the LMOVE command to move list elements between two Redis lists. The example first populates 'mylist' with values, then uses LMOVE to move elements to 'myotherlist' from the right side of mylist and adds them to the left side of myotherlist, and vice versa.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lmove.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLMOVE mylist myotherlist RIGHT LEFT\nLMOVE mylist myotherlist LEFT RIGHT\nLRANGE mylist 0 -1\nLRANGE myotherlist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Adding and Retrieving Set Members using SADD & SMEMBERS - Redis\nDESCRIPTION: This snippet demonstrates adding elements to a set with `SADD` and retrieving all elements using `SMEMBERS`. Note that the order of returned elements is not guaranteed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\n> SADD bikes:racing:france bike:1 bike:2 bike:3\n(integer) 3\n> SMEMBERS bikes:racing:france\n1) bike:3\n2) bike:1\n3) bike:2\n```\n\n----------------------------------------\n\nTITLE: Get Redis Process ID with redis-cli\nDESCRIPTION: This command uses `redis-cli` to retrieve the process ID of the running Redis instance. The `info` command provides various information about the Redis server, and `grep process_id` filters the output to extract the process ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli info | grep process_id\n```\n\n----------------------------------------\n\nTITLE: Read stream using XREADGROUP - Redis\nDESCRIPTION: This command reads one message from the stream `mystream` as part of the consumer group `group55` and assigns it to the consumer `consumer-123`. The `>` symbol indicates that only new messages will be read.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xpending.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> XREADGROUP GROUP group55 consumer-123 COUNT 1 STREAMS mystream >\n1) 1) \"mystream\"\n   2) 1) 1) 1526984818136-0\n         2) 1) \"duration\"\n            2) \"1532\"\n            3) \"event-id\"\n            4) \"5\"\n            5) \"user-id\"\n            6) \"7782813\"\n```\n\n----------------------------------------\n\nTITLE: Increment Hash Field by Float Value - Redis CLI\nDESCRIPTION: This example demonstrates how to use the HINCRBYFLOAT command in the Redis CLI to increment a specified field in a hash stored at a given key by a floating-point number. It showcases setting initial values with HSET and then incrementing or decrementing them using HINCRBYFLOAT. The values are updated in place within the hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hincrbyfloat.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET mykey field 10.50\nHINCRBYFLOAT mykey field 0.1\nHINCRBYFLOAT mykey field -5\nHSET mykey field 5.0e3\nHINCRBYFLOAT mykey field 2.0e2\n```\n\n----------------------------------------\n\nTITLE: Removing the lowest scoring member - Redis CLI\nDESCRIPTION: Removes and returns the member with the lowest score from the sorted set `myzset`. In this case, it will remove \"one\" with score 1.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zpopmin.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nZPOPMIN myzset\n```\n\n----------------------------------------\n\nTITLE: Key Type Check\nDESCRIPTION: Checks the type of a key.  `RedisModule_OpenKey` opens a key. `RedisModule_KeyType` returns the type of a key. `RedisModule_CloseKey` closes a key. `REDISMODULE_KEYTYPE_STRING`, `REDISMODULE_KEYTYPE_EMPTY` are key types. `ctx` is the RedisModuleCtx, `argv[1]` is the key name, and the mode can be `REDISMODULE_READ` or `REDISMODULE_WRITE`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleKey *key = RedisModule_OpenKey(ctx,argv[1],\n    REDISMODULE_READ|REDISMODULE_WRITE);\n\nint keytype = RedisModule_KeyType(key);\nif (keytype != REDISMODULE_KEYTYPE_STRING &&\n    keytype != REDISMODULE_KEYTYPE_EMPTY)\n{\n    RedisModule_CloseKey(key);\n    return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Redis Databases using SWAPDB\nDESCRIPTION: This command swaps the data between two Redis databases.  For example, SWAPDB 0 1 swaps the contents of database 0 with database 1. All clients connected to database 0 will see the data previously in database 1, and vice versa.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/swapdb.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSWAPDB 0 1\n```\n\n----------------------------------------\n\nTITLE: ZRANGE by Score with LIMIT Example in Redis CLI\nDESCRIPTION: Shows how to use ZRANGE with the BYSCORE and LIMIT options to retrieve elements within a score range and limit the number of returned elements. An exclusive start score is used here.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_2\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\" 2 \"two\" 3 \"three\"\nZRANGE myzset (1 +inf BYSCORE LIMIT 1 1\n```\n\n----------------------------------------\n\nTITLE: Setting and Checking Key Expiry with PTTL - Redis CLI\nDESCRIPTION: This example demonstrates setting an expiration on a key and then retrieving the remaining time-to-live in milliseconds using the PTTL command. It shows how to set a key, set its expiration, and then check its remaining TTL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pttl.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSET mykey \"Hello\"\nEXPIRE mykey 1\nPTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from a Redis Sorted Set (ZRANGE)\nDESCRIPTION: This snippet demonstrates the `ZRANGE` command, which retrieves elements from a Redis Sorted Set within a specified range. Elements are returned in ascending order based on their scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nZRANGE zset 0 -1 => b,a,c\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with TLS using redis-py\nDESCRIPTION: This snippet demonstrates connecting to a Redis instance using TLS with the `redis-py` library.  It requires specifying the host, port, username, password, and enabling SSL. It also requires providing paths to the SSL certificate, key file, and CA certificates.  The `redis` module must be imported.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport redis\n\nr = redis.Redis(\n    host=\"my-redis.cloud.redislabs.com\", port=6379,\n    username=\"default\", # use your Redis user. More info https://redis.io/docs/management/security/acl/\n    password=\"secret\", # use your Redis password\n    ssl=True,\n    ssl_certfile=\"./redis_user.crt\",\n    ssl_keyfile=\"./redis_user_private.key\",\n    ssl_ca_certs=\"./redis_ca.pem\",\n)\nr.set('foo', 'bar')\n# True\n\nr.get('foo')\n# b'bar'\n```\n\n----------------------------------------\n\nTITLE: ZRANGEBYLEX usage examples\nDESCRIPTION: These examples demonstrate the usage of the ZRANGEBYLEX command with different ranges, including inclusive and exclusive boundaries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebylex.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\nZRANGEBYLEX myzset - [c\nZRANGEBYLEX myzset - (c\nZRANGEBYLEX myzset [aaa (g\n```\n\n----------------------------------------\n\nTITLE: Setting User Data with HMSET and HSET in Redis\nDESCRIPTION: This example shows how to set user data in Redis using `HMSET` and `HSET`. `HMSET` is used to set the username and password in a hash identified by `user:1000`, while `HSET` is used to map the username to the user ID in the `users` hash. The user ID is obtained using `INCR next_user_id`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_16\n\nLANGUAGE: Redis\nCODE:\n```\nINCR next_user_id => 1000\nHMSET user:1000 username antirez password p1pp0\nHSET users antirez 1000\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Channels in Redis Pub/Sub (Bash)\nDESCRIPTION: This snippet demonstrates how to subscribe to Redis channels using the `SUBSCRIBE` command. The client issues the command with a list of channel names to subscribe to. Messages sent to these channels will then be pushed to the client by Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSUBSCRIBE channel11 ch:00\n```\n\n----------------------------------------\n\nTITLE: Redis Set Member Removal Example (CLI)\nDESCRIPTION: This example demonstrates the usage of the SREM command to remove members from a Redis set. It first adds members \"one\", \"two\", and \"three\" to the set \"myset\", then attempts to remove \"one\" and \"four\". The SMEMBERS command is used to display the remaining members of the set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/srem.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD myset \"one\"\nSADD myset \"two\"\nSADD myset \"three\"\nSREM myset \"one\"\nSREM myset \"four\"\nSMEMBERS myset\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration with PEXPIREAT in Redis CLI\nDESCRIPTION: This example demonstrates how to set the expiration timestamp of a key using the `PEXPIREAT` command in the Redis CLI. The timestamp is specified in milliseconds. It also showcases how to retrieve the TTL and PTTL after setting the expiry.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pexpireat.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSET mykey \"Hello\"\nPEXPIREAT mykey 1555555555005\nTTL mykey\nPTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Search JSON Documents and Return Specific Field\nDESCRIPTION: Searches the \"idx:users\" index for users named \"Paul\" and returns only the \"city\" field from the results. It then joins the city names with a comma and space and prints the result.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar res_cities = ft.Search(\"idx:users\", new Query(\"Paul\").ReturnFields(new FieldName(\"$.city\", \"city\"))).Documents.Select(x => x[\"city\"]);\nConsole.WriteLine(string.Join(\", \", res_cities)); \n// Prints: London, Tel Aviv\n```\n\n----------------------------------------\n\nTITLE: Defining index schema for JSON documents\nDESCRIPTION: This snippet defines the index schema for JSON documents to be stored in Redis. It specifies the indexed fields and their data types using `TextField`, `TagField`, and `NumericField`. JSON path expressions are used to map JSON elements to the schema fields.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nschema = (\n    TextField(\"$.name\", as_name=\"name\"), \n    TagField(\"$.city\", as_name=\"city\"), \n    NumericField(\"$.age\", as_name=\"age\")\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling JVM DNS Cache - Java\nDESCRIPTION: This Java snippet demonstrates how to disable the JVM's DNS cache for applications connecting to a Redis database with multiple endpoints, like Redis Enterprise Active-Active.  Setting both cache TTLs to \"0\" ensures load balancing across endpoints by forcing DNS resolution for each request.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\njava.security.Security.setProperty(\"networkaddress.cache.ttl\",\"0\");\njava.security.Security.setProperty(\"networkaddress.cache.negative.ttl\", \"0\");\n```\n\n----------------------------------------\n\nTITLE: Variadic LPUSH and RPUSH Operations in Redis Lists\nDESCRIPTION: This example demonstrates the variadic nature of LPUSH and RPUSH commands in Redis, allowing multiple elements to be added to a list in a single call. It also uses LRANGE to retrieve the elements of the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2 bike:3\n(integer) 3\n> LPUSH bikes:repairs bike:important_bike bike:very_important_bike\n> LRANGE mylist 0 -1\n1) \"bike:very_important_bike\"\n2) \"bike:important_bike\"\n3) \"bike:1\"\n4) \"bike:2\"\n5) \"bike:3\"\n```\n\n----------------------------------------\n\nTITLE: Get Current Command Name - C\nDESCRIPTION: Returns the name of the command that is currently being executed. It requires a `RedisModuleCtx` context and returns a `const char *` representing the command's name. Returns NULL if no command is executing in the current context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_302\n\nLANGUAGE: c\nCODE:\n```\nconst char *RedisModule_GetCurrentCommandName(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Importing dependencies for Redis Stack JSON indexing\nDESCRIPTION: This snippet imports the necessary modules from the `redis-py` library for indexing and querying JSON documents using Redis Stack. It includes modules for JSON path, aggregation, reducers, fields, index definition, and queries. It requires that redis-py and Redis Stack are installed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport redis\nfrom redis.commands.json.path import Path\nimport redis.commands.search.aggregation as aggregations\nimport redis.commands.search.reducers as reducers\nfrom redis.commands.search.field import TextField, NumericField, TagField\nfrom redis.commands.search.indexDefinition import IndexDefinition, IndexType\nfrom redis.commands.search.query import NumericFilter, Query\n```\n\n----------------------------------------\n\nTITLE: Redis HSET Command Example for Key-Value Abstraction\nDESCRIPTION: This command demonstrates how to use the HSET command to store a value in a hash, where the key is split into a key and a field.  This is used to create a memory efficient key-value store on top of Redis.  The example splits \"object:1234\" into key \"object:12\" and field \"34\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHSET object:12 34 somevalue\n```\n\n----------------------------------------\n\nTITLE: Establishing Reactive Redis Connection - Lettuce\nDESCRIPTION: This Java code shows how to establish a reactive connection to a Redis server using Lettuce. It creates a RedisClient, connects to the server, sets and retrieves a string value, and stores/retrieves key-value pairs in a hash reactively. It requires the `io.lettuce.core` library and uses Project Reactor for reactive operations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage org.example;\nimport java.util.*;\nimport io.lettuce.core.*;\nimport io.lettuce.core.api.reactive.RedisReactiveCommands;\nimport io.lettuce.core.api.StatefulRedisConnection;\n\npublic class Main {\n  public static void main(String[] args) {\n    RedisClient redisClient = RedisClient.create(\"redis://localhost:6379\");\n\n    try (StatefulRedisConnection<String, String> connection = redisClient.connect()) {\n      RedisReactiveCommands<String, String> reactiveCommands = connection.reactive();\n\n      // Reactively store & retrieve a simple string\n      reactiveCommands.set(\"foo\", \"bar\").block();\n      reactiveCommands.get(\"foo\").doOnNext(System.out::println).block(); // prints bar\n\n      // Reactively store key-value pairs in a hash directly\n      Map<String, String> hash = new HashMap<>();\n      hash.put(\"name\", \"John\");\n      hash.put(\"surname\", \"Smith\");\n      hash.put(\"company\", \"Redis\");\n      hash.put(\"age\", \"29\");\n\n      reactiveCommands.hset(\"user-session:124\", hash).then(\n              reactiveCommands.hgetall(\"user-session:124\")\n                  .collectMap(KeyValue::getKey, KeyValue::getValue).doOnNext(System.out::println))\n          .block();\n      // Prints: {surname=Smith, name=John, company=Redis, age=29}\n\n    } finally {\n      redisClient.shutdown();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring maxmemory on replicas\nDESCRIPTION: This configuration directive allows a replica to not ignore the `maxmemory` setting. By default, replicas ignore `maxmemory` and rely on the master to evict keys. Enabling this setting allows the replica to manage its own memory, but it is important to ensure that all writes to the replica are idempotent to maintain consistency.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/replication.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n    replica-ignore-maxmemory no\n```\n\n----------------------------------------\n\nTITLE: Searching Locations Within Radius - Redis\nDESCRIPTION: This example shows how to find locations within a specified radius of a given longitude and latitude using the GEOSEARCH command in Redis.  The command returns the locations and their distances from the given point. WITHDIST returns the distance to each location.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/geospatial.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\n> GEOSEARCH bikes:rentable FROMLONLAT -122.2612767 37.7936847 BYRADIUS 5 km WITHDIST\n1) 1) \"station:1\"\n   2) \"1.8523\"\n2) 1) \"station:2\"\n   2) \"1.4979\"\n3) 1) \"station:3\"\n   2) \"2.2441\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Calling a Redis Function with FCALL\nDESCRIPTION: This snippet demonstrates loading a Redis function library containing the `knockknock` function and then calling it using the `FCALL` command. It shows how to specify the function name and the number of keys (0 in this case, as the function doesn't use keys). The snippet also includes the server response.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib\\nredis.register_function('knockknock', function() return 'Who\\\\\\'s there?' end)\"\nmylib\nredis> FCALL knockknock 0\n\"Who's there?\"\n```\n\n----------------------------------------\n\nTITLE: Removing Members and Score Ranges with ZREM and ZREMRANGEBYSCORE - Redis\nDESCRIPTION: This example demonstrates removing members and score ranges from a Redis sorted set using the `ZREM` and `ZREMRANGEBYSCORE` commands. `ZREM` removes a specific member, while `ZREMRANGEBYSCORE` removes members within a specified score range. `ZREMRANGEBYSCORE` returns the number of removed elements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> ZREM racer_scores \"Castilla\"\n(integer) 1\n> ZREMRANGEBYSCORE racer_scores -inf 9\n(integer) 2\n> ZRANGE racer_scores 0 -1\n1) \"Norem\"\n2) \"Royce\"\n3) \"Prickett\"\n```\n\n----------------------------------------\n\nTITLE: Atomic Indexing and Hashing\nDESCRIPTION: Demonstrates atomic updating with both indexing and hash mapping using a Redis MULTI/EXEC block. The operation will insert the given values into both the Sorted Set `myindex` and Hash `index.content`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_19\n\nLANGUAGE: redis\nCODE:\n```\nMULTI\nZADD myindex 0 0056:0028.44:90\nHSET index.content 90 0056:0028.44:90\nEXEC\n```\n\n----------------------------------------\n\nTITLE: Redis List Insertion Example\nDESCRIPTION: Demonstrates the usage of the LINSERT command to insert an element into a Redis list. The example first populates the list using RPUSH, then inserts \"There\" before \"World\" using LINSERT, and finally retrieves the list content using LRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/linsert.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"Hello\"\nRPUSH mylist \"World\"\nLINSERT mylist BEFORE \"World\" \"There\"\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: ZRANDMEMBER Usage Examples (Redis CLI)\nDESCRIPTION: This snippet demonstrates various usages of the ZRANDMEMBER command in Redis CLI. It shows how to add elements to a sorted set using ZADD, and then retrieve random elements using ZRANDMEMBER with different options like positive count, negative count, and WITHSCORES. The output will vary depending on the state of the 'dadi' sorted set in your Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrandmember.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD dadi 1 uno 2 due 3 tre 4 quattro 5 cinque 6 sei\nZRANDMEMBER dadi\nZRANDMEMBER dadi\nZRANDMEMBER dadi -5 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Redis Stream: Adding and Deleting Entries with XADD and XDEL\nDESCRIPTION: This code snippet demonstrates how to add entries to a Redis stream using the XADD command, followed by deleting a specific entry using the XDEL command. It then shows how XRANGE can be used to retrieve the remaining stream entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xdel.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> XADD mystream * a 1\n1538561698944-0\n> XADD mystream * b 2\n1538561700640-0\n> XADD mystream * c 3\n1538561701744-0\n> XDEL mystream 1538561700640-0\n(integer) 1\n127.0.0.1:6379> XRANGE mystream - +\n1) 1) 1538561698944-0\n   2) 1) \"a\"\n      2) \"1\"\n2) 1) 1538561701744-0\n   2) 1) \"c\"\n      2) \"3\"\n```\n\n----------------------------------------\n\nTITLE: Simple Error Encoding\nDESCRIPTION: Demonstrates the encoding of a simple error message in RESP.  It starts with the '-' character, followed by the error message, and is terminated by CRLF (\\r\\n). Clients should treat these as exceptions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-Error message\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Nearly Exact Trimming with MAXLEN and ~\nDESCRIPTION: This command trims the 'mystream' stream to approximately the latest 1000 items using the MAXLEN strategy with the '~' modifier.  This makes trimming more efficient by allowing Redis to stop trimming early when performance can be gained, potentially resulting in slightly more than 1000 entries after trimming.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xtrim.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nXTRIM mystream MAXLEN ~ 1000\n```\n\n----------------------------------------\n\nTITLE: BLPOP command example\nDESCRIPTION: This example demonstrates how to use the BLPOP command to retrieve an element from a list. It first deletes the specified lists, then pushes elements into `list1`, and finally uses BLPOP to retrieve an element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/blpop.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> DEL list1 list2\n(integer) 0\nredis> RPUSH list1 a b c\n(integer) 3\nredis> BLPOP list1 list2 0\n1) \"list1\"\n2) \"a\"\n```\n\n----------------------------------------\n\nTITLE: Replying with String Buffer - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply with a bulk string using a C buffer pointer and length via the Redis Module API. The function `RedisModule_ReplyWithStringBuffer` sends the string to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_67\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithStringBuffer(RedisModuleCtx *ctx,\n                                          const char *buf,\n                                          size_t len);\n```\n\n----------------------------------------\n\nTITLE: Get Key Type\nDESCRIPTION: Gets the type of a key. `RedisModule_KeyType` returns the key type. `key` is the RedisModuleKey pointer. Possible return values: `REDISMODULE_KEYTYPE_EMPTY`, `REDISMODULE_KEYTYPE_STRING`, `REDISMODULE_KEYTYPE_LIST`, `REDISMODULE_KEYTYPE_HASH`, `REDISMODULE_KEYTYPE_SET`, `REDISMODULE_KEYTYPE_ZSET`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nint keytype = RedisModule_KeyType(key);\n```\n\n----------------------------------------\n\nTITLE: Redis RESTORE Example\nDESCRIPTION: This example demonstrates the usage of the `RESTORE` command in Redis to create a list named `mykey` from a serialized value with no expiration time. It first deletes the key (if it exists), then uses `RESTORE` to create it. Finally, it verifies the type and contents of the newly created key using `TYPE` and `LRANGE` commands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/restore.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> DEL mykey\n0\nredis> RESTORE mykey 0 \"\\n\\x17\\x17\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x03\\x00\\\n                        x00\\xc0\\x01\\x00\\x04\\xc0\\x02\\x00\\x04\\xc0\\x03\\x00\\\n                        xff\\x04\\x00u#<\\xc0;.\\xe9\\xdd\"\nOK\nredis> TYPE mykey\nlist\nredis> LRANGE mykey 0 -1\n1) \"1\"\n2) \"2\"\n3) \"3\"\n```\n\n----------------------------------------\n\nTITLE: Simulate LRU Cache Behavior using Redis CLI\nDESCRIPTION: This command uses `redis-cli` to simulate LRU cache behavior by performing GET and SET operations with an 80-20 power law distribution. It requires configuring a sensible `maxmemory` setting in the Redis configuration to prevent excessive memory usage. This mode helps in estimating cache hit rates under various conditions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$ ./redis-cli --lru-test 10000000\n156000 Gets/sec | Hits: 4552 (2.92%) | Misses: 151448 (97.08%)\n153750 Gets/sec | Hits: 12906 (8.39%) | Misses: 140844 (91.61%)\n159250 Gets/sec | Hits: 21811 (13.70%) | Misses: 137439 (86.30%)\n151000 Gets/sec | Hits: 27615 (18.29%) | Misses: 123385 (81.71%)\n145000 Gets/sec | Hits: 32791 (22.61%) | Misses: 112209 (77.39%)\n157750 Gets/sec | Hits: 42178 (26.74%) | Misses: 115572 (73.26%)\n154500 Gets/sec | Hits: 47418 (30.69%) | Misses: 107082 (69.31%)\n151250 Gets/sec | Hits: 51636 (34.14%) | Misses: 99614 (65.86%)\n\n120750 Gets/sec | Hits: 48774 (40.39%) | Misses: 71976 (59.61%)\n122500 Gets/sec | Hits: 49052 (40.04%) | Misses: 73448 (59.96%)\n127000 Gets/sec | Hits: 50870 (40.06%) | Misses: 76130 (59.94%)\n124250 Gets/sec | Hits: 50147 (40.36%) | Misses: 74103 (59.64%)\n\n140000 Gets/sec | Hits: 135376 (96.70%) | Misses: 4624 (3.30%)\n141250 Gets/sec | Hits: 136523 (96.65%) | Misses: 4727 (3.35%)\n140250 Gets/sec | Hits: 135457 (96.58%) | Misses: 4793 (3.42%)\n140500 Gets/sec | Hits: 135947 (96.76%) | Misses: 4553 (3.24%)\n```\n\n----------------------------------------\n\nTITLE: Logging Message to Standard Redis Log\nDESCRIPTION: Logs a message to the standard Redis log, accepting printf-style format specifiers and a log level string. Valid log levels are \"debug\", \"verbose\", \"notice\", and \"warning\". The `ctx` argument can be NULL, in which case a generic \"module\" name will be used.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_185\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_Log(RedisModuleCtx *ctx,\n                         const char *levelstr,\n                         const char *fmt,\n                         ...);\n```\n\n----------------------------------------\n\nTITLE: Rename Redis Command\nDESCRIPTION: This code snippet demonstrates how to rename the `CONFIG` command in the `redis.conf` file to an unguessable name. This prevents normal clients from altering the Redis configuration, enhancing security in managed Redis instance services. An empty string disables the command entirely.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/_index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Example with INCRBY and GET\nDESCRIPTION: This example demonstrates how to increment a 5-bit signed integer at bit offset 100 and retrieve a 4-bit unsigned integer from bit offset 0 using the BITFIELD command. The command operates on the key 'mykey'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitfield.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> BITFIELD mykey INCRBY i5 100 1 GET u4 0\n1) (integer) 1\n2) (integer) 0\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Example with SET\nDESCRIPTION: This example sets two i8 integers at offsets #0 and #1 (which are multiplied by the integer encoding's width) to values 100 and 200 respectively. This allows modification of plain arrays of integers of a given size. The command operates on the key 'mystring'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitfield.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBITFIELD mystring SET i8 #0 100 SET i8 #1 200\n```\n\n----------------------------------------\n\nTITLE: Scanning with Pattern Matching using Redis CLI\nDESCRIPTION: This command utilizes the `--scan` option combined with `--pattern` to retrieve keys matching a specified pattern from the Redis server.  It allows filtering keys based on a glob-style pattern, enabling targeted key retrieval. Because it uses the SCAN command, keys may be reported multiple times.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --scan --pattern '*-11*'\n```\n\n----------------------------------------\n\nTITLE: Deleting Fields from Redis Hash (HDEL) - CLI\nDESCRIPTION: Demonstrates the usage of the HDEL command in the Redis CLI to remove 'field1' and 'field2' from the hash stored at the key 'myhash'. First, 'field1' is set to \"foo\" and then deleted. The subsequent attempt to delete 'field2' shows the command's behavior when a field does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hdel.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET myhash field1 \"foo\"\nHDEL myhash field1\nHDEL myhash field2\n```\n\n----------------------------------------\n\nTITLE: Iterating Hash Values with HSCAN in Redis\nDESCRIPTION: This snippet demonstrates iterating over the keys and values of a Redis hash using the `HSCAN` command. It shows how to retrieve all the key-value pairs from the hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scan.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nredis 127.0.0.1:6379> hmset hash name Jack age 33\nOK\nredis 127.0.0.1:6379> hscan hash 0\n1) \"0\"\n2) 1) \"name\"\n   2) \"Jack\"\n   3) \"age\"\n   4) \"33\"\n```\n\n----------------------------------------\n\nTITLE: ZRANGE with WITHSCORES Example in Redis CLI\nDESCRIPTION: Illustrates the use of the WITHSCORES option to retrieve elements along with their scores. The output is an array containing element-score pairs.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_1\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\" 2 \"two\" 3 \"three\"\nZRANGE myzset 0 1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis using NRedisStack\nDESCRIPTION: Establishes a connection to a Redis server running on localhost at the default port 6379. It creates a ConnectionMultiplexer instance and retrieves an IDatabase object, which is used for executing Redis commands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing NRedisStack;\nusing NRedisStack.RedisStackCommands;\nusing StackExchange.Redis;\n//...\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(\"localhost\");\nIDatabase db = redis.GetDatabase();\n```\n\n----------------------------------------\n\nTITLE: Handling MOVED Redirection\nDESCRIPTION: This example shows a `MOVED` error returned by a Redis Cluster node to a client. The error indicates that the key belongs to a different hash slot (3999) and should be accessed through another node (`127.0.0.1:6381`). The client is expected to reissue the query to the correct node.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nGET x\n-MOVED 3999 127.0.0.1:6381\n```\n\n----------------------------------------\n\nTITLE: Redis GETRANGE Examples\nDESCRIPTION: This example demonstrates the usage of the GETRANGE command in Redis. It shows how to extract substrings using different start and end offsets, including negative offsets. It also demonstrates how Redis handles out-of-range requests.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/substr.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"This is a string\"\nGETRANGE mykey 0 3\nGETRANGE mykey -3 -1\nGETRANGE mykey 0 -1\nGETRANGE mykey 10 100\n```\n\n----------------------------------------\n\nTITLE: Writing to Native Type - C\nDESCRIPTION: This snippet demonstrates the idiomatic code for writing to a Redis key with a native type.  It opens the key for read/write access, checks the key's type, and returns an error if the type is incorrect. If the key is empty or of the correct type, the code proceeds to update or create the native type value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleKey *key = RedisModule_OpenKey(ctx,argv[1],\n    REDISMODULE_READ|REDISMODULE_WRITE);\nint type = RedisModule_KeyType(key);\nif (type != REDISMODULE_KEYTYPE_EMPTY &&\n    RedisModule_ModuleTypeGetType(key) != MyType)\n{\n    return RedisModule_ReplyWithError(ctx,REDISMODULE_ERRORMSG_WRONGTYPE);\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration Snippet\nDESCRIPTION: This configuration snippet shows the minimal required settings in the `redis.conf` file to enable Redis Cluster mode. It includes settings for port, cluster enablement, config file path, node timeout, and appendonly mode.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nport 7000\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes\n```\n\n----------------------------------------\n\nTITLE: Adding Redis repository and installing Redis on Ubuntu\nDESCRIPTION: This code snippet adds the official Redis repository to the Ubuntu system's APT package manager, updates the package lists, and then installs the Redis package.  It uses `curl` to import the Redis GPG key, adds the repository to the sources list, and then installs Redis using `apt-get`.  This allows for the installation of recent stable versions of Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-windows.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\nsudo apt-get install redis\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Hash Encoding (Redis >= 7.0)\nDESCRIPTION: These configuration directives in redis.conf control the maximum number of entries and value size for specially encoded hashes, lists and sets using listpacks.  Adjusting these settings can optimize memory usage, but exceeding these limits will result in automatic conversion to normal encoding.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhash-max-listpack-entries 512\nhash-max-listpack-value 64\nzset-max-listpack-entries 128\nzset-max-listpack-value 64\nset-max-intset-entries 512\n```\n\n----------------------------------------\n\nTITLE: Running Subset of Redis Benchmark Tests\nDESCRIPTION: Executes the `redis-benchmark` utility to run only the `SET` and `LPUSH` tests in quiet mode, sending 100,000 requests.  It uses the `-t` option to select specific tests. Requires a running Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-benchmark -t set,lpush -n 100000 -q\nSET: 74239.05 requests per second\nLPUSH: 79239.30 requests per second\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Data with Redis CLI Pipe Mode\nDESCRIPTION: This Bash command pipes the content of `data.txt` to the `redis-cli` utility with the `--pipe` option. This enables bulk loading of the data into Redis, providing feedback on the number of errors and replies received from the server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/bulk-loading.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat data.txt | redis-cli --pipe\n```\n\n----------------------------------------\n\nTITLE: Loading a Lua library into Redis\nDESCRIPTION: This example demonstrates loading a Lua library named `mylib` into Redis. The library defines a single function, `myfunc`, which returns its first argument. The `FUNCTION LOAD` command is used along with the shebang to specify the engine (lua) and library name.  After loading, the function `myfunc` can be called via the `FCALL` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-load.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib \\n redis.register_function('myfunc', function(keys, args) return args[1] end)\"\nmylib\nredis> FCALL myfunc 0 hello\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Set Key Expire\nDESCRIPTION: Sets or modifies the time to live (TTL) of a key. `RedisModule_SetExpire` sets the TTL. `key` is the RedisModuleKey pointer, and `expire` is the TTL in milliseconds. Use `REDISMODULE_NO_EXPIRE` to remove the expire.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_SetExpire(RedisModuleKey *key, mstime_t expire);\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Redis List (LPUSH)\nDESCRIPTION: This snippet demonstrates the `LPUSH` command in Redis, which adds elements to the left (head) of a list. If the list doesn't exist, it's created automatically.  This is useful for implementing features like displaying recent updates.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLPUSH mylist a (now mylist holds 'a')\nLPUSH mylist b (now mylist holds 'b','a')\nLPUSH mylist c (now mylist holds 'c','b','a')\n```\n\n----------------------------------------\n\nTITLE: Measure Intrinsic Latency with redis-cli\nDESCRIPTION: This command uses `redis-cli` to measure the intrinsic latency of the server. This measurement reflects the baseline latency introduced by the operating system kernel or hypervisor, impacting the responsiveness of all processes, including Redis. It needs to run on the server, not on a client, and doesn't connect to a Redis server. The argument '100' represents how long the test will be executed in seconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./redis-cli --intrinsic-latency 100\n```\n\n----------------------------------------\n\nTITLE: Starting Redis with Command Line Arguments\nDESCRIPTION: This snippet shows how to start a Redis instance using command-line arguments. It starts a Redis server on port 6380 and configures it as a replica of a server running on 127.0.0.1:6379. The `--port` and `--replicaof` options are used to specify the port and master server, respectively.  This is useful for testing different configurations without modifying the `redis.conf` file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/config.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./redis-server --port 6380 --replicaof 127.0.0.1 6379\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Slots Information with Redis CLI\nDESCRIPTION: This code snippet demonstrates how to use the `CLUSTER SLOTS` command in the Redis CLI to retrieve information about the mapping of cluster slots to Redis instances. The output shows the slot ranges and the associated master and replica nodes, including their IP addresses, ports, node IDs, and optional hostnames. The command requires a working Redis cluster to execute.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-slots.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER SLOTS\n1) 1) (integer) 0\n   2) (integer) 5460\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30001\n      3) \"09dbe9720cda62f7865eabc5fd8857c5d2678366\"\n      4) 1) hostname\n         2) \"host-1.redis.example.com\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30004\n      3) \"821d8ca00d7ccf931ed3ffc7e3db0599d2271abf\"\n      4) 1) hostname\n         2) \"host-2.redis.example.com\"\n2) 1) (integer) 5461\n   2) (integer) 10922\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30002\n      3) \"c9d93d9f2c0c524ff34cc11838c2003d8c29e013\"\n      4) 1) hostname\n         2) \"host-3.redis.example.com\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30005\n      3) \"faadb3eb99009de4ab72ad6b6ed87634c7ee410f\"\n      4) 1) hostname\n         2) \"host-4.redis.example.com\"\n3) 1) (integer) 10923\n   2) (integer) 16383\n   3) 1) \"127.0.0.1\"\n      2) (integer) 30003\n      3) \"044ec91f325b7595e76dbcb18cc688b6a5b434a1\"\n      4) 1) hostname\n         2) \"host-5.redis.example.com\"\n   4) 1) \"127.0.0.1\"\n      2) (integer) 30006\n      3) \"58e6e48d41228013e5d9c1c37c5060693925e97e\"\n      4) 1) hostname\n         2) \"host-6.redis.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Information with XINFO STREAM\nDESCRIPTION: This example demonstrates how to retrieve basic information about a stream using the `XINFO STREAM` command. It returns details such as stream length, radix tree keys and nodes, the last generated ID, and information about consumer groups.  No special dependencies are needed other than a Redis server with a stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xinfo-stream.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> XINFO STREAM mystream\n 1) \"length\"\n 2) (integer) 2\n 3) \"radix-tree-keys\"\n 4) (integer) 1\n 5) \"radix-tree-nodes\"\n 6) (integer) 2\n 7) \"last-generated-id\"\n 8) \"1638125141232-0\"\n 9) \"max-deleted-entry-id\"\n10) \"0-0\"\n11) \"entries-added\"\n12) (integer) 2\n13) \"groups\"\n14) (integer) 1\n15) \"first-entry\"\n16) 1) \"1638125133432-0\"\n    2) 1) \"message\"\n       2) \"apple\"\n17) \"last-entry\"\n18) 1) \"1638125141232-0\"\n    2) 1) \"message\"\n       2) \"banana\"\n```\n\n----------------------------------------\n\nTITLE: Redis COPY command example\nDESCRIPTION: This example demonstrates the usage of the Redis COPY command to copy the value from the key 'dolly' to the key 'clone'. It first sets the value of 'dolly' to \"sheep\", then copies the value to 'clone', and finally retrieves the value of 'clone'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/copy.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nSET dolly \"sheep\"\nCOPY dolly clone\nGET clone\n```\n\n----------------------------------------\n\nTITLE: Combined Modifiers for Sorting in Redis\nDESCRIPTION: This snippet demonstrates how to combine multiple modifiers (`LIMIT`, `ALPHA`, and `DESC`) to sort a list lexicographically in descending order and limit the results.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist LIMIT 0 5 ALPHA DESC\n```\n\n----------------------------------------\n\nTITLE: Removing Slot Range with CLUSTER DELSLOTSRANGE - Redis\nDESCRIPTION: This example demonstrates removing a range of slots (1 to 5 inclusive) from a Redis Cluster node using the CLUSTER DELSLOTSRANGE command.  This command provides an alternative to CLUSTER DELSLOTS when dealing with contiguous slot ranges. The expected output is \"OK\" upon successful execution.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-delslotsrange.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\n> CLUSTER DELSLOTSRANGE 1 5\nOK\n```\n\n----------------------------------------\n\nTITLE: Checking User Login Status in PHP\nDESCRIPTION: This PHP function `isLoggedIn()` checks if a user is currently logged in based on the presence and validity of the `auth` cookie. It retrieves the cookie value, verifies its existence in the `auths` hash in Redis, and cross-checks it against the user's `auth` field. It populates the `$User` global variable with user information if authenticated. This function depends on `redisLink()` and `loadUserInfo()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nfunction isLoggedIn() {\n    global $User, $_COOKIE;\n\n    if (isset($User)) return true;\n\n    if (isset($_COOKIE['auth'])) {\n        $r = redisLink();\n        $authcookie = $_COOKIE['auth'];\n        if ($userid = $r->hget(\"auths\",$authcookie)) {\n            if ($r->hget(\"user:$userid\",\"auth\") != $authcookie) return false;\n            loadUserInfo($userid);\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Command Count Example\nDESCRIPTION: This example demonstrates how to use the COMMAND COUNT command in Redis to retrieve the total number of commands executed by the server. The command returns an integer representing the count.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-count.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND COUNT\n```\n\n----------------------------------------\n\nTITLE: Publishing a message to a shard channel using SPublish in Redis CLI\nDESCRIPTION: This code snippet demonstrates how to publish a message to a specific shard channel named 'orders' using the `SPublish` command in the Redis command-line interface. The command returns an integer representing the number of subscribers that received the message.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/spublish.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> spublish orders hello\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Find All Matching Element Indices in Redis\nDESCRIPTION: This snippet demonstrates how to use the COUNT option with a value of 0 to retrieve all indices of the matching element in a Redis list. It retrieves all indices where the element 'c' is found.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\n> LPOS mylist c COUNT 0\n[2,6,7]\n```\n\n----------------------------------------\n\nTITLE: Redis Stream Trimming Example\nDESCRIPTION: This example demonstrates adding entries to a stream named 'mystream', then trimming it to a maximum length of 2 using MAXLEN, and finally querying the stream's range. This showcases the effect of XTRIM on the stream's contents.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xtrim.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nXADD mystream * field1 A field2 B field3 C field4 D\nXTRIM mystream MAXLEN 2\nXRANGE mystream - +\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Score of an Element in a Redis Sorted Set (ZSCORE)\nDESCRIPTION: This snippet demonstrates the `ZSCORE` command, used to retrieve the score associated with a given element in a Redis Sorted Set. It returns the score or `NULL` if the element does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nZSCORE zset a => 10\nZSCORE zset non_existing_element => NULL\n```\n\n----------------------------------------\n\nTITLE: Replying with a Long Long Integer\nDESCRIPTION: Demonstrates how to return a long long integer as a reply to the client that invoked the command, using the `RedisModule_ReplyWithLongLong` function. This is analogous to how built-in Redis commands return integer values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithLongLong(RedisModuleCtx *ctx, long long integer);\n```\n\n----------------------------------------\n\nTITLE: Sorting Hash Fields in Redis\nDESCRIPTION: This snippet demonstrates how to sort and retrieve data from hash fields using the `BY` and `GET` options with the `->` syntax.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_10\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist BY weight_*->fieldname GET object_*->fieldname\n```\n\n----------------------------------------\n\nTITLE: HRANDFIELD examples in Redis CLI\nDESCRIPTION: Demonstrates the usage of the HRANDFIELD command with various parameters including setting hash values, retrieving a single random field, and retrieving multiple random fields with and without values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hrandfield.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSET coin heads obverse tails reverse edge null\nHRANDFIELD coin\nHRANDFIELD coin\nHRANDFIELD coin -5 WITHVALUES\n```\n\n----------------------------------------\n\nTITLE: Set Redis Connection Timeout (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to configure a connection timeout for the node-redis client.  The `connectTimeout` option specifies the maximum time (in milliseconds) that the client will wait to establish a connection with the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createClient({\n  // setting a 10-second timeout  \n  connectTimeout: 10000 // in milliseconds\n});\nclient.on('error', error => console.error('Redis client error:', error));\n```\n\n----------------------------------------\n\nTITLE: Ruby: Optimized Key-Value Store Simulation with Redis\nDESCRIPTION: This Ruby script simulates a key-value store using Redis, demonstrating memory optimization by storing values in hashes with a limited number of fields. It calculates a key and field from the input key to distribute data across hashes.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'redis'\n\nUSE_OPTIMIZATION = true\n\ndef hash_get_key_field(key)\n  s = key.split(':')\n  if s[1].length > 2\n    { key: s[0] + ':' + s[1][0..-3], field: s[1][-2..-1] }\n  else\n    { key: s[0] + ':', field: s[1] }\n  end\nend\n\ndef hash_set(r, key, value)\n  kf = hash_get_key_field(key)\n  r.hset(kf[:key], kf[:field], value)\nend\n\ndef hash_get(r, key, value)\n  kf = hash_get_key_field(key)\n  r.hget(kf[:key], kf[:field], value)\nend\n\nr = Redis.new\n(0..100_000).each do |id|\n  key = \"object:#{id}\"\n  if USE_OPTIMIZATION\n    hash_set(r, key, 'val')\n  else\n    r.set(key, 'val')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sentinel Information via Redis CLI\nDESCRIPTION: This example demonstrates how to retrieve information from a Redis Sentinel instance using the `redis-cli` command.  The `INFO` command provides details about the Sentinel's status, including whether it is in TILT mode.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n$ redis-cli -p 26379\n127.0.0.1:26379> info\n(Other information from Sentinel server skipped.)\n\n# Sentinel\nsentinel_masters:1\nsentinel_tilt:0\nsentinel_tilt_since_seconds:-1\nsentinel_running_scripts:0\nsentinel_scripts_queue_length:0\nsentinel_simulate_failure_flags:0\nmaster0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=0,sentinels=1\n```\n\n----------------------------------------\n\nTITLE: Setting Master Authentication Password\nDESCRIPTION: This command sets the master authentication password for a running Redis replica. It uses the `CONFIG SET` command to dynamically update the `masterauth` configuration. The password must replace `<password>`\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/replication.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nconfig set masterauth <password>\n```\n\n----------------------------------------\n\nTITLE: Handle Redis Errors with redis.pcall in Lua\nDESCRIPTION: This code snippet demonstrates how to use `redis.pcall()` to call a Redis command and handle potential runtime errors. It shows how to check the returned table for an 'err' field, indicating an error, and how to handle the error accordingly. `redis.pcall()` is essential for robust error handling in Redis Lua scripts.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlocal reply = redis.pcall('ECHO', unpack(ARGV))\nif reply['err'] ~= nil then\n  -- Handle the error sometime, but for now just log it\n  redis.log(redis.LOG_WARNING, reply['err'])\n  reply['err'] = 'ERR Something is wrong, but no worries, everything is under control'\nend\nreturn reply\n```\n\n----------------------------------------\n\nTITLE: Monitoring Redis using redis-cli\nDESCRIPTION: This code snippet demonstrates how to use the `redis-cli monitor` command to stream all commands processed by the Redis server. It shows sample output and instructs how to terminate the monitor stream using Ctrl+C (SIGINT).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/monitor.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli monitor\n1339518083.107412 [0 127.0.0.1:60866] \"keys\" \"*\"\n1339518087.877697 [0 127.0.0.1:60866] \"dbsize\"\n1339518090.420270 [0 127.0.0.1:60866] \"set\" \"x\" \"6\"\n1339518096.506257 [0 127.0.0.1:60866] \"get\" \"x\"\n1339518099.363765 [0 127.0.0.1:60866] \"eval\" \"return redis.call('set','x','7')\" \"0\"\n1339518100.363799 [0 lua] \"set\" \"x\" \"7\"\n1339518100.544926 [0 127.0.0.1:60866] \"del\" \"x\"\n```\n\n----------------------------------------\n\nTITLE: Querying Stream with XRANGE for all entries\nDESCRIPTION: This example demonstrates how to retrieve all entries from a Redis stream named 'race:france' using the XRANGE command. It uses '-' and '+' to represent the smallest and largest possible IDs, respectively, effectively querying the entire stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_10\n\nLANGUAGE: redis\nCODE:\n```\n> XRANGE race:france - +\n```\n\n----------------------------------------\n\nTITLE: Disable Redis Command\nDESCRIPTION: This code snippet demonstrates how to completely disable a Redis command (CONFIG in this case) by renaming it to an empty string in the `redis.conf` file. This restricts access to sensitive commands, improving security. Useful for preventing unauthorized configuration changes.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/_index.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrename-command CONFIG \"\"\n```\n\n----------------------------------------\n\nTITLE: Verify Replica Status using redis-cli and grep\nDESCRIPTION: This shell command uses `redis-cli` to retrieve the cluster nodes information, and then pipes the output to `grep` to filter for replicas of a specific master node. It is useful for verifying that a node has been correctly configured as a replica of a particular master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -p 7000 cluster nodes | grep slave | grep 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e\n```\n\n----------------------------------------\n\nTITLE: Redis ZCARD Example\nDESCRIPTION: This example demonstrates how to add elements to a sorted set using ZADD and then retrieve the cardinality of the set using ZCARD. The ZADD command adds elements \"one\" and \"two\" with scores 1 and 2, respectively, to the sorted set \"myzset\".  The ZCARD command then returns the number of elements (2) in \"myzset\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zcard.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZCARD myzset\n```\n\n----------------------------------------\n\nTITLE: Updating System Runlevels for Redis\nDESCRIPTION: This command adds the Redis init script to the default runlevels, ensuring that Redis starts automatically during system boot. `update-rc.d` manages symbolic links in the `/etc/rc*.d/` directories.  `sudo` is needed for root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo update-rc.d redis_6379 defaults\n```\n\n----------------------------------------\n\nTITLE: Installing redis-py with hiredis support\nDESCRIPTION: This snippet shows how to install `redis-py` with `hiredis` support, which provides a compiled response parser for improved performance.  It installs the redis package with the `hiredis` extra dependency.  `hiredis` must be compatible (>=1.0) for `redis-py` to utilize it.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install redis[hiredis]\n```\n\n----------------------------------------\n\nTITLE: Getting ACL user details - Redis CLI\nDESCRIPTION: This snippet demonstrates how to retrieve the ACL details of a specific user using the ACL GETUSER command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_19\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> ACL GETUSER default\n1) \"flags\"\n2) 1) \"on\"\n3) \"passwords\"\n4) 1) \"2d9c75273d72b32df726fb545c8a4edc719f0a95a6fd993950b10c474ad9c927\"\n5) \"commands\"\n6) \"+@all\"\n7) \"keys\"\n8) \"~*\"\n9) \"channels\"\n10) \"&*\"\n11) \"selectors\"\n12) (empty array)\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Server in Foreground with Bash\nDESCRIPTION: This command starts the Redis server in the foreground. It's used to test the Redis installation and displays the startup logs in the terminal. Pressing Ctrl-C will stop the server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nredis-server\n```\n\n----------------------------------------\n\nTITLE: Turn a Master Node into a Replica in Redis Cluster\nDESCRIPTION: This Redis command allows you to reconfigure a master node to become a replica of another specified master node.  You connect to the node that you want to turn into a replica, and provide the node ID of the master it should replicate.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_18\n\nLANGUAGE: redis\nCODE:\n```\ncluster replicate 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Debugger Help Command List\nDESCRIPTION: This snippet provides a list of commands available in the Redis Lua debugger. These commands allow users to step through code, set breakpoints, inspect variables, execute Redis commands, and control the debugging session. Each command can often be abbreviated to a single character.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlua debugger> help\nRedis Lua debugger help:\n[h]elp               Show this help.\n[s]tep               Run current line and stop again.\n[n]ext               Alias for step.\n[c]ontinue           Run till next breakpoint.\n[l]ist               List source code around current line.\n[l]ist [line]        List source code around [line].\n                     line = 0 means: current position.\n[l]ist [line] [ctx]  In this form [ctx] specifies how many lines\n                     to show before/after [line].\n[w]hole              List all source code. Alias for 'list 1 1000000'.\n[p]rint              Show all the local variables.\n[p]rint <var>        Show the value of the specified variable.\n                     Can also show global vars KEYS and ARGV.\n[b]reak              Show all breakpoints.\n[b]reak <line>       Add a breakpoint to the specified line.\n[b]reak -<line>      Remove breakpoint from the specified line.\n[b]reak 0            Remove all breakpoints.\n[t]race              Show a backtrace.\n[e]val <code>        Execute some Lua code (in a different callframe).\n[r]edis <cmd>        Execute a Redis command.\n[m]axlen [len]       Trim logged Redis replies and Lua var dumps to len.\n                     Specifying zero as <len> means unlimited.\n[a]bort              Stop the execution of the script. In sync\n                     mode dataset changes will be retained.\n\nDebugger functions you can call from Lua scripts:\nredis.debug()        Produce logs in the debugger console.\nredis.breakpoint()   Stop execution as if there was a breakpoint in the\n                     next line of code.\n```\n\n----------------------------------------\n\nTITLE: Registering a Redis Function Library in Lua\nDESCRIPTION: This Lua snippet defines a Redis Function library named `mylib` containing a single function `my_hset`. The function takes a hash key and field-value pairs as arguments, updates the hash with the new values, and sets the `_last_modified_` field to the current server time. It then registers the function with Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal function my_hset(keys, args)\n  local hash = keys[1]\n  local time = redis.call('TIME')[1]\n  return redis.call('HSET', hash, '_last_modified_', time, unpack(args))\nend\n\nredis.register_function('my_hset', my_hset)\n```\n\n----------------------------------------\n\nTITLE: Running Redis Benchmark with Random Keys\nDESCRIPTION: Executes the `redis-benchmark` utility with the `SET` test, using random keys from a keyspace of 100,000, sending a total of 1,000,000 requests. Requires a running Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-benchmark -t set -r 100000 -n 1000000\n====== SET ======\n  1000000 requests completed in 13.86 seconds\n  50 parallel clients\n  3 bytes payload\n  keep alive: 1\n\n99.76% `<=` 1 milliseconds\n99.98% `<=` 2 milliseconds\n100.00% `<=` 3 milliseconds\n100.00% `<=` 3 milliseconds\n72144.87 requests per second\n```\n\n----------------------------------------\n\nTITLE: Redis Sorted Set Union Example\nDESCRIPTION: This example demonstrates the usage of the ZUNIONSTORE command to compute the union of two sorted sets (zset1 and zset2) and store the result in a new sorted set named 'out'. It uses the WEIGHTS option to multiply the scores of elements in zset1 by 2 and zset2 by 3 before aggregation. The ZRANGE command is then used to display the resulting sorted set with scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zunionstore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZUNIONSTORE out 2 zset1 zset2 WEIGHTS 2 3\nZRANGE out 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Using BITFIELD to manage bicycle statistics\nDESCRIPTION: This example demonstrates how to use the BITFIELD command to maintain metrics for bicycles, such as the current price and the number of owners. It shows how to set initial values, increment/decrement counters, and retrieve the current values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/bitfields.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> BITFIELD bike:1:stats SET u32 #0 1000\n1) (integer) 0\n> BITFIELD bike:1:stats INCRBY u32 #0 -50 INCRBY u32 #1 1\n1) (integer) 950\n2) (integer) 1\n> BITFIELD bike:1:stats INCRBY u32 #0 500 INCRBY u32 #1 1\n1) (integer) 1450\n2) (integer) 2\n> BITFIELD bike:1:stats GET u32 #0 GET u32 #1\n1) (integer) 1450\n2) (integer) 2\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Memory Management with RedisModule_AutoMemory - C\nDESCRIPTION: Enables automatic memory management for a command, eliminating the need to manually free resources like open keys, replies, and strings. Call at the start of the command implementation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_49\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_AutoMemory(ctx);\n```\n\n----------------------------------------\n\nTITLE: Example CLIENT LIST Output - Redis\nDESCRIPTION: This snippet provides an example of the output from the `CLIENT LIST` command in Redis.  It shows the data provided for each connected client, including the client's address (`addr`), file descriptor (`fd`), name (`name`), connection age (`age`), idle time (`idle`), flags (`flags`), database (`db`), pub/sub subscriptions (`sub`, `psub`), multi/exec status (`multi`), query buffer usage (`qbuf`, `qbuf-free`), output buffer lists and memory usage (`obl`, `oll`, `omem`), events (`events`), and the last executed command (`cmd`).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/clients.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\naddr=127.0.0.1:52555 fd=5 name= age=855 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=client\naddr=127.0.0.1:52787 fd=6 name= age=6 idle=5 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=ping\n```\n\n----------------------------------------\n\nTITLE: XCLAIM Command Example\nDESCRIPTION: This example demonstrates how to use the XCLAIM command to claim a message with a specific ID if it has been idle for at least one hour. It assigns the ownership of the message to the consumer \"Alice\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xclaim.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> XCLAIM mystream mygroup Alice 3600000 1526569498055-0\n1) 1) 1526569498055-0\n   2) 1) \"message\"\n      2) \"orange\"\n```\n\n----------------------------------------\n\nTITLE: Null Bulk String Encoding in RESP\nDESCRIPTION: This snippet shows how a null bulk string is encoded in RESP. It uses a length of -1 to represent a null value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$-1\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Key Exists Check - Redis Module API (C)\nDESCRIPTION: Checks if a key exists without affecting its last access time. It is equivalent to opening a key in read mode with the NOTOUCH flag. Available since Redis 7.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_88\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_KeyExists(RedisModuleCtx *ctx, robj *keyname);\n```\n\n----------------------------------------\n\nTITLE: Setting Redis User Permissions: Password, Key Access, Command Access\nDESCRIPTION: This code snippet demonstrates how to set specific permissions for a Redis user using `ACL SETUSER`. It activates the user ('on'), sets a password ('p1pp0'), grants access to keys starting with 'cached:' ('~cached:*'), and allows only the 'GET' command ('+get').\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER alice on >p1pp0 ~cached:* +get\nOK\n```\n\n----------------------------------------\n\nTITLE: Capping a Stream with MAXLEN option in XADD\nDESCRIPTION: This example shows how to use the MAXLEN option in the XADD command to limit the size of a Redis stream. Old entries are automatically evicted when the specified maximum length is reached.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_35\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> XADD race:italy MAXLEN 2 * rider Jones\n\"1692633189161-0\"\n> XADD race:italy MAXLEN 2 * rider Wood\n\"1692633198206-0\"\n> XADD race:italy MAXLEN 2 * rider Henshaw\n\"1692633208557-0\"\n> XLEN race:italy\n(integer) 2\n> XRANGE race:italy - +\n1) 1) \"1692633198206-0\"\n   2) 1) \"rider\"\n      2) \"Wood\"\n2) 1) \"1692633208557-0\"\n   2) 1) \"rider\"\n      2) \"Henshaw\"\n```\n\n----------------------------------------\n\nTITLE: Error Reply in Redis Module\nDESCRIPTION: This code snippet demonstrates how to reply with an error message from within a Redis module context.  It uses the `RedisModule_ReplyWithError` function to send an error message to the client. The `ctx` parameter represents the module context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithError(ctx,\"Sorry can't create a thread\");\n```\n\n----------------------------------------\n\nTITLE: Trimming Redis Stream with MINID\nDESCRIPTION: This command trims the 'mystream' stream by evicting entries with IDs lower than 649085820. The MINID strategy ensures all remaining entries have IDs greater than or equal to the specified ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xtrim.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nXTRIM mystream MINID 649085820\n```\n\n----------------------------------------\n\nTITLE: Invoking a Redis Function with FCALL\nDESCRIPTION: This command invokes the Redis Function 'myfunc' with 0 key arguments and the argument 'hello'. The function returns the first argument, which in this case is 'hello'. The first argument to FCALL is the function name, followed by the number of key arguments, and then the actual arguments.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/fcall.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nredis> FCALL myfunc 0 hello\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Sorted Results in Redis\nDESCRIPTION: This snippet shows how to use the `LIMIT` modifier to return a subset of the sorted list, specifying an offset and a count.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist LIMIT 0 10\n```\n\n----------------------------------------\n\nTITLE: Extract Keys from MSET Command - Redis CLI\nDESCRIPTION: This example demonstrates how to extract keys from an `MSET` command using `COMMAND GETKEYS`. The `MSET` command sets multiple key-value pairs.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-getkeys.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND GETKEYS MSET a b c d e f\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster with redis-py\nDESCRIPTION: This snippet demonstrates connecting to a Redis Cluster using the `RedisCluster` class from the `redis-py` library. It initializes a RedisCluster client and then performs a `set` and `get` operation. It requires the `redis.cluster` module to be imported.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom redis.cluster import RedisCluster\n\nrc = RedisCluster(host='localhost', port=16379)\n\nprint(rc.get_nodes())\n# [[host=127.0.0.1,port=16379,name=127.0.0.1:16379,server_type=primary,redis_connection=Redis<ConnectionPool<Connection<host=127.0.0.1,port=16379,db=0>>>], ...\n\nrc.set('foo', 'bar')\n# True\n\nrc.get('foo')\n# b'bar'\n```\n\n----------------------------------------\n\nTITLE: Generating Key-Value Pairs and Bulk Loading with Redis CLI\nDESCRIPTION: This Ruby script generates a sequence of SET commands in Redis protocol format for key-value pairs. It then pipes the output directly to the `redis-cli` utility with the `--pipe` option, enabling bulk loading of the generated data into Redis.  The pipe mode ensures efficient data transfer and error handling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/bulk-loading.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n(0...1000).each{|n|\n    STDOUT.write(gen_redis_proto(\"SET\",\"Key#{n}\",\"Value#{n}\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Decrement Value with Redis CLI\nDESCRIPTION: This example demonstrates how to decrement the value of a key using the Redis CLI. It shows the initial setting of a key with an integer value and the subsequent decrement operation using the DECR command. The example also shows what happens when trying to decrement a very large number.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/decr.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"10\"\nDECR mykey\nSET mykey \"234293482390480948029348230948\"\nDECR mykey\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Information using CLIENT INFO in Redis CLI\nDESCRIPTION: This command retrieves information and statistics about the current client connection in a human-readable format.  It returns information identical to the `CLIENT LIST` command, but only for the current client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-info.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCLIENT INFO\n```\n\n----------------------------------------\n\nTITLE: Redis LREM Usage Example\nDESCRIPTION: This example demonstrates how to use the LREM command to remove elements from a Redis list. It showcases different count values to control the direction and number of elements removed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lrem.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist \"hello\"\nRPUSH mylist \"hello\"\nRPUSH mylist \"foo\"\nRPUSH mylist \"hello\"\nLREM mylist -2 \"hello\"\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Setting a Key-Value Pair in a Redis Module Dictionary\nDESCRIPTION: This function stores a key-value pair in the dictionary, using a `RedisModuleString` for the key. It returns `REDISMODULE_OK` if the key was added successfully (did not already exist), and `REDISMODULE_ERR` if the key already existed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_245\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DictSet(RedisModuleDict *d, RedisModuleString *key, void *ptr);\n```\n\n----------------------------------------\n\nTITLE: Counting elements in Redis sorted set with ZCOUNT\nDESCRIPTION: This example demonstrates how to use the ZCOUNT command in Redis to count the number of elements in a sorted set that fall within a specific score range. It shows how to use -inf and +inf for unbounded ranges and the '(' notation for exclusive ranges. Dependencies: Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zcount.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZCOUNT myzset -inf +inf\nZCOUNT myzset (1 3\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Group Last Delivered ID - Redis\nDESCRIPTION: This command sets the last delivered ID for a consumer group in a Redis stream. It allows consumers in the group to re-process all messages in the stream by setting the ID to 0. Requires a Redis server with Streams enabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xgroup-setid.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nXGROUP SETID mystream mygroup 0\n```\n\n----------------------------------------\n\nTITLE: Trimming a Stream with XTRIM MAXLEN\nDESCRIPTION: This command demonstrates using XTRIM with the MAXLEN option to explicitly trim a Redis stream to a specified maximum length. It removes older entries to maintain the stream's size.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_36\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> XTRIM race:italy MAXLEN 10\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Close Key - Redis Module API (C)\nDESCRIPTION: Closes a key handle that was previously opened with `RedisModule_OpenKey()`. Available since Redis 4.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_91\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_CloseKey(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Exporting Data to CSV\nDESCRIPTION: This example showcases exporting data from Redis using the `--csv` option. It pushes values to a list and then retrieves the list as a comma-separated value string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli LPUSH mylist a b c d\n(integer) 4\n$ redis-cli --csv LRANGE mylist 0 -1\n\"d\",\"c\",\"b\",\"a\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer Group with XGROUP CREATE\nDESCRIPTION: This command creates a consumer group named `france_riders` for the stream `race:france`. The `$` ID specifies that only new messages arriving in the stream will be delivered to consumers in the group.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_18\n\nLANGUAGE: Redis\nCODE:\n```\nXGROUP CREATE race:france france_riders $\n```\n\n----------------------------------------\n\nTITLE: Modify Key Value\nDESCRIPTION: This snippet shows a simple `SET` command to modify the value of a key. This action will trigger an invalidation message to be sent to the client connection that is tracking the key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n(Some other unrelated connection)\nSET foo bar\n+OK\n```\n\n----------------------------------------\n\nTITLE: Updating and Installing Docker on EC2\nDESCRIPTION: These commands update the yum package manager, install Docker, start the Docker service, and add the `ec2-user` to the `docker` group. It prepares the EC2 instance for running Docker containers. The user needs to log out and back in for the group change to take effect.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-aws.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum update -y\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo service docker start\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -a -G docker ec2-user\n```\n\n----------------------------------------\n\nTITLE: Adding Lettuce Dependency - Maven\nDESCRIPTION: This XML snippet shows how to add Lettuce as a dependency to a Maven project. It includes the group ID, artifact ID, and version of the Lettuce core library. Ensure to check Maven Central for the latest version.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.lettuce</groupId>\n    <artifactId>lettuce-core</artifactId>\n    <version>6.3.2.RELEASE</version> <!-- Check for the latest version on Maven Central -->\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding and Querying Geospatial Data in Redis\nDESCRIPTION: This example demonstrates how to add geospatial data to a Redis sorted set and then query it using GEORADIUSBYMEMBER.  It adds three locations in Sicily to the 'Sicily' key and then queries for locations within 100km of 'Agrigento'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/georadiusbymember.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.583333 37.316667 \"Agrigento\"\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEORADIUSBYMEMBER Sicily Agrigento 100 km\n```\n\n----------------------------------------\n\nTITLE: Iterating with Redis versions < 6.2\nDESCRIPTION: Demonstrates iterating a Redis stream using `XRANGE` in versions prior to 6.2 (without exclusive ranges). It involves programmatically incrementing the sequence part of the last returned ID to fetch the next set of entries, requiring manual handling of ID advancement.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE writers 1526985685298-1 + COUNT 2\n1) 1) 1526985691746-0\n   2) 1) \"name\"\n      2) \"Toni\"\n...\n```\n\n----------------------------------------\n\nTITLE: Simple Numeric Sort in Redis\nDESCRIPTION: This code snippet demonstrates the simplest form of the Redis SORT command, which sorts a list of numbers in ascending order.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist\n```\n\n----------------------------------------\n\nTITLE: Creating sample JSON data for Redis indexing\nDESCRIPTION: This snippet creates sample JSON data representing user profiles to be stored and indexed in Redis using the JSON module and search capabilities. It defines three dictionaries, each representing a user with name, email, age, and city.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nuser1 = {\n    \"name\": \"Paul John\",\n    \"email\": \"paul.john@example.com\",\n    \"age\": 42,\n    \"city\": \"London\"\n}\nuser2 = {\n    \"name\": \"Eden Zamir\",\n    \"email\": \"eden.zamir@example.com\",\n    \"age\": 29,\n    \"city\": \"Tel Aviv\"\n}\nuser3 = {\n    \"name\": \"Paul Zamir\",\n    \"email\": \"paul.zamir@example.com\",\n    \"age\": 35,\n    \"city\": \"Tel Aviv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidation Message (RESP2)\nDESCRIPTION: This snippet shows the structure of the invalidation message received in RESP2 mode through Pub/Sub.  It indicates that the key `foo` has been invalidated.  The message is sent to the subscribed connection when the key `foo` is modified.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\n(Connection 1 -- used for invalidations)\n*3\n$7\nmessage\n$20\n__redis__:invalidate\n*1\n$3\nfoo\n```\n\n----------------------------------------\n\nTITLE: Sentinel Role Output Example\nDESCRIPTION: Example output of the ROLE command when executed on a Redis Sentinel instance. It shows the sentinel's role and the list of master names that it is monitoring.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/role.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1) \"sentinel\"\n2) 1) \"resque-master\"\n   2) \"html-fragments-master\"\n   3) \"stats-master\"\n   4) \"metadata-master\"\n```\n\n----------------------------------------\n\nTITLE: Executing Redis INFO Command\nDESCRIPTION: Executes the Redis INFO command without any parameters. This returns the default set of information sections from the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/info.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nINFO\n```\n\n----------------------------------------\n\nTITLE: Unblocking a Blocked Client - RedisModule_UnblockClient\nDESCRIPTION: Unblocks a client blocked by `RedisModule_BlockedClient`. The provided `privdata` will be accessible by the reply callback. This function is thread-safe.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_198\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_UnblockClient(RedisModuleBlockedClient *bc, void *privdata);\n```\n\n----------------------------------------\n\nTITLE: Getting Module Type Value with RedisModule_ModuleTypeGetValue - C\nDESCRIPTION: Retrieves the low-level value of a module type stored in a Redis key.  This function returns the raw pointer that was previously set via `RedisModule_ModuleTypeSetValue`. It is assumed that `RedisModule_KeyType` returned `REDISMODULE_KEYTYPE_MODULE` beforehand.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_162\n\nLANGUAGE: C\nCODE:\n```\nvoid *RedisModule_ModuleTypeGetValue(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Redis PubSub ShardNumSub Example\nDESCRIPTION: This example demonstrates how to use the `PUBSUB SHARDNUMSUB` command in Redis to retrieve the number of subscribers for the shard channel named 'orders'. The command returns an array where the first element is the channel name and the second element is the number of subscribers (an integer).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pubsub-shardnumsub.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> PUBSUB SHARDNUMSUB orders\n1) \"orders\"\n2) (integer) 1\n```\n\n----------------------------------------\n\nTITLE: ZRANGE by Score Exclusive Range Example\nDESCRIPTION: Demonstrates ZRANGE usage with an exclusive score range.  Elements with scores strictly greater than 1 and less than or equal to 5 will be returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_3\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZRANGE zset (1 5 BYSCORE\n```\n\n----------------------------------------\n\nTITLE: MGET Command Example\nDESCRIPTION: This example provides the output from the `COMMAND` command for the `MGET` command, demonstrating the information available about the command's properties. The arity, flags, first key, last key, and step are displayed to illustrate how to use this information.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1) 1) \"mget\"\n   2) (integer) -2\n   3) 1) readonly\n      2) fast\n   4) (integer) 1\n   5) (integer) -1\n   6) (integer) 1\n   ...\n```\n\n----------------------------------------\n\nTITLE: Redis Shutdown Command\nDESCRIPTION: This snippet shows how to shut down the Redis server gracefully using the `redis-cli` command. This command will trigger Redis to save the data to disk before exiting.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli shutdown\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Sharded Channel using SSUBSCRIBE in Redis\nDESCRIPTION: The `ssubscribe` command subscribes the client to the specified shard channel named \"orders\". The command returns a series of responses indicating the subscription status and any subsequent messages received on that channel. Ctrl-C is used to terminate the subscription.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/ssubscribe.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> ssubscribe orders\nReading messages... (press Ctrl-C to quit)\n1) \"ssubscribe\"\n2) \"orders\"\n3) (integer) 1\n1) \"smessage\"\n2) \"orders\"\n3) \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Get pending entries for a specific consumer using XPENDING - Redis\nDESCRIPTION: This command retrieves detailed information about pending messages for a specific consumer (`consumer-123`) within a specified range of IDs in the consumer group `group55` for the stream `mystream`. The `-` and `+` arguments represent the minimum and maximum IDs respectively, and `10` limits the number of returned messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xpending.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\n> XPENDING mystream group55 - + 10 consumer-123\n```\n\n----------------------------------------\n\nTITLE: Find First Element Index in Redis List\nDESCRIPTION: This snippet demonstrates the basic usage of the LPOS command to find the index of the first occurrence of an element in a Redis list. It first pushes elements onto the 'mylist' list and then uses LPOS to find the index of the element 'c'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> RPUSH mylist a b c 1 2 3 c c\n> LPOS mylist c\n2\n```\n\n----------------------------------------\n\nTITLE: RedisInsight Service and Deployment YAML\nDESCRIPTION: This YAML configuration file defines a Kubernetes service and deployment for RedisInsight. The service exposes RedisInsight on port 80, targeting port 5540 on the RedisInsight pod. The deployment creates a single replica of the RedisInsight pod using the latest image, mounting a volume for data storage.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# RedisInsight service with name 'redisinsight-service'\napiVersion: v1\nkind: Service\nmetadata:\n  name: redisinsight-service       # name should not be 'redisinsight'\n                                   # since the service creates\n                                   # environment variables that\n                                   # conflicts with redisinsight\n                                   # application's environment\n                                   # variables `RI_APP_HOST` and\n                                   # `RI_APP_PORT`\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 5540\n  selector:\n    app: redisinsight\n---\n# RedisInsight deployment with name 'redisinsight'\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redisinsight #deployment name\n  labels:\n    app: redisinsight #deployment label\nspec:\n  replicas: 1 #a single replica pod\n  selector:\n    matchLabels:\n      app: redisinsight #which pods is the deployment managing, as defined by the pod template\n  template: #pod template\n    metadata:\n      labels:\n        app: redisinsight #label for pod/s\n    spec:\n      containers:\n\n      - name:  redisinsight #Container name (DNS_LABEL, unique)\n        image: redis/redisinsight:latest #repo/image\n        imagePullPolicy: IfNotPresent #Installs the latest RedisInsight version\n        volumeMounts:\n        - name: redisinsight #Pod volumes to mount into the container's filesystem. Cannot be updated.\n          mountPath: /data\n        ports:\n        - containerPort: 5540 #exposed container port and protocol\n          protocol: TCP\n      volumes:\n      - name: redisinsight\n        emptyDir: {} # node-ephemeral volume https://kubernetes.io/docs/concepts/storage/volumes/#emptydir\n```\n\n----------------------------------------\n\nTITLE: Live Resharding Step 4\nDESCRIPTION: Step 4 involves sending the `CLUSTER SETSLOT` command to the destination node, assigning the slot to the destination node. It's crucial to execute this before Step 5 to ensure a smooth transition and data consistency during failover scenarios.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT <slot> NODE <destination-node-id>\n```\n\n----------------------------------------\n\nTITLE: Delete Redis ACL User\nDESCRIPTION: Deletes the specified ACL user 'antirez' and terminates all connections authenticated with that user.  The command returns 1 on success.  This snippet demonstrates a basic usage of the ACL DELUSER command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-deluser.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> ACL DELUSER antirez\n1\n```\n\n----------------------------------------\n\nTITLE: Installing Redis binaries with sudo make install\nDESCRIPTION: Installs the compiled Redis binaries (redis-server, redis-cli, etc.) to the `/usr/local/bin` directory. Requires root privileges, hence the use of `sudo`. This makes the Redis commands accessible system-wide.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-from-source.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Reverse Range Query using XREVRANGE in Redis CLI\nDESCRIPTION: Retrieves all entries from a Redis stream named 'somestream' in reverse order, from the highest ID to the lowest ID. The '+' denotes the highest possible ID, and the '-' denotes the lowest possible ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrevrange.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nXREVRANGE somestream + -\n```\n\n----------------------------------------\n\nTITLE: GEOADD and GEOSEARCHSTORE Example in Redis CLI\nDESCRIPTION: This example demonstrates adding geospatial data using GEOADD and then using GEOSEARCHSTORE to store the results of a geospatial search into a new key. It includes storing the distance and retrieving the data with scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geosearchstore.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOADD Sicily 12.758489 38.788135 \"edge1\"   17.241510 38.788135 \"edge2\" \nGEOSEARCHSTORE key1 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3\nGEOSEARCH key1 FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST WITHHASH\nGEOSEARCHSTORE key2 Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC COUNT 3 STOREDIST\nZRANGE key2 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Setting Element at Index in Redis List\nDESCRIPTION: This function replaces the element at a given index within a Redis list. The index is zero-based, supporting negative indexing from the end.  Returns REDISMODULE_OK on success, or REDISMODULE_ERR on failure, setting errno based on the cause (EINVAL, ENOTSUP, EBADF, or EDOM).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_113\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ListSet(RedisModuleKey *key,\n                            long index,\n                            RedisModuleString *value);\n```\n\n----------------------------------------\n\nTITLE: Redis Data Type Query Examples\nDESCRIPTION: This snippet demonstrates how to use the TYPE command in Redis to identify the data type stored at different keys. It first sets keys to different data types (string, list, and set) and then queries their types using the TYPE command. The expected output would be the respective data types: string, list, and set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/type.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"value\"\nLPUSH key2 \"value\"\nSADD key3 \"value\"\nTYPE key1\nTYPE key2\nTYPE key3\n```\n\n----------------------------------------\n\nTITLE: Redis Geospatial Index Operations - CLI Examples\nDESCRIPTION: This example showcases the usage of GEOADD and GEODIST commands in Redis CLI. GEOADD is used to populate the geospatial index, while GEODIST retrieves the distance between two members in specified units. If members are missing, GEODIST returns NULL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geodist.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEODIST Sicily Palermo Catania\nGEODIST Sicily Palermo Catania km\nGEODIST Sicily Palermo Catania mi\nGEODIST Sicily Foo Bar\n```\n\n----------------------------------------\n\nTITLE: Weighted Random Element Retrieval - Redis CLI\nDESCRIPTION: This shows the command used to retrieve a weighted random element from a sorted set, where the score of the element is between a random number (between 0 and 1) and positive infinity. It retrieves a single element using the LIMIT option.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebyscore.md#_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\nRANDOM_ELE = ZRANGEBYSCORE key RAND() +inf LIMIT 0 1\n```\n\n----------------------------------------\n\nTITLE: Aborting Client Blocking (C)\nDESCRIPTION: This code shows how to abort blocking if there is an error, using `RedisModule_AbortBlock`.  This will unblock the client without calling the reply callback, preventing unexpected behavior.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint Example_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,\n                             int argc)\n    {\n        RedisModuleBlockedClient *bc =\n            RedisModule_BlockClient(ctx,reply_func,timeout_func,NULL,0);\n\n        pthread_t tid;\n        if (pthread_create(&tid,NULL,threadmain,bc) != 0) {\n            RedisModule_AbortBlock(bc);\n            RedisModule_ReplyWithError(ctx,\"Sorry can't create a thread\");\n        }\n\n        return REDISMODULE_OK;\n    }\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis with TLS using NRedisStack\nDESCRIPTION: Establishes a secure connection to a TLS-enabled Redis server using NRedisStack. It configures the ConnectionMultiplexer with TLS settings, including SSL encryption, certificate selection, and server certificate validation.  It uses an X509Certificate2 to load the PFX certificate and validates the server certificate against a CA.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nConfigurationOptions options = new ConfigurationOptions\n{\n    EndPoints = { { \"my-redis.cloud.redislabs.com\", 6379 } },\n    User = \"default\",  // use your Redis user. More info https://redis.io/docs/management/security/acl/\n    Password = \"secret\", // use your Redis password\n    Ssl = true,\n    SslProtocols = System.Security.Authentication.SslProtocols.Tls12                \n};\n\noptions.CertificateSelection += delegate\n{\n    return new X509Certificate2(\"redis.pfx\", \"secret\"); // use the password you specified for pfx file\n};\noptions.CertificateValidation += ValidateServerCertificate;\n\nbool ValidateServerCertificate(\n        object sender,\n        X509Certificate? certificate,\n        X509Chain? chain,\n        SslPolicyErrors sslPolicyErrors)\n{\n    if (certificate == null) {\n        return false;       \n    }\n\n    var ca = new X509Certificate2(\"redis_ca.pem\");\n    bool verdict = (certificate.Issuer == ca.Subject);\n    if (verdict) {\n        return true;\n    }\n    Console.WriteLine(\"Certificate error: {0}\", sslPolicyErrors);\n    return false;\n}\n\nConnectionMultiplexer muxer = ConnectionMultiplexer.Connect(options);   \n            \n//Creation of the connection to the DB\nIDatabase conn = muxer.GetDatabase();\n\n//send SET command\nconn.StringSet(\"foo\", \"bar\");\n\n//send GET command and print the value\nConsole.WriteLine(conn.StringGet(\"foo\"));   \n```\n\n----------------------------------------\n\nTITLE: Declare Eval Flags in Lua Script\nDESCRIPTION: This Lua script demonstrates how to declare flags using a Shebang statement at the beginning of the script.  The `flags=no-writes,allow-stale` declaration tells Redis how the script interacts with the database, allowing Redis to optimize execution and ensure safety. This feature is available in Redis 7.0 and later.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\n#!lua flags=no-writes,allow-stale\nlocal x = redis.call('get','x')\nreturn x\n```\n\n----------------------------------------\n\nTITLE: Redis Sentinel: Get Master Address\nDESCRIPTION: This command uses the redis-cli to connect to a Sentinel instance and retrieves the current master's address (IP and port) for a given master set name. This is useful for clients that need to dynamically discover the active master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:5000> SENTINEL get-master-addr-by-name mymaster\n1) \"127.0.0.1\"\n2) \"6379\"\n```\n\n----------------------------------------\n\nTITLE: Adding messages to Stream with XADD\nDESCRIPTION: These commands add messages to the `race:italy` stream with the field `rider` and respective rider names. This sets up data for subsequent consumer group reads.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_20\n\nLANGUAGE: Redis\nCODE:\n```\nXADD race:italy * rider Castilla\nXADD race:italy * rider Royce\nXADD race:italy * rider Sam-Bodden\nXADD race:italy * rider Prickett\nXADD race:italy * rider Norem\n```\n\n----------------------------------------\n\nTITLE: Getting Node ID with redis-cli\nDESCRIPTION: This snippet demonstrates how to retrieve the Node ID of a Redis instance using `redis-cli`. It connects to the Redis instance on the specified port (7000 in this example) and executes the `CLUSTER NODES` command. The output is then filtered using `grep` to find the line containing \"myself\", which indicates the current node. The Node ID is the first token on that line.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -p 7000 cluster nodes | grep myself\n97a3a64667477371c4479320d683e4c8db5858b1 :0 myself,master - 0 0 0 connected 0-5460\n```\n\n----------------------------------------\n\nTITLE: Creating a New Redis String with Length in C\nDESCRIPTION: This function `sdsnewlen` creates a new Redis string. It allocates memory for the `sdshdr` structure and the string buffer, initializes the `len` and `free` fields, copies the initial data into the buffer (if provided), and null-terminates the string. It returns a pointer to the string buffer (`sh->buf`). Error handling includes checking for memory allocation failures.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-sds.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nsds sdsnewlen(const void *init, size_t initlen) {\n    struct sdshdr *sh;\n\n    sh = zmalloc(sizeof(struct sdshdr)+initlen+1);\n#ifdef SDS_ABORT_ON_OOM\n    if (sh == NULL) sdsOomAbort();\n#else\n    if (sh == NULL) return NULL;\n#endif\n    sh->len = initlen;\n    sh->free = 0;\n    if (initlen) {\n        if (init) memcpy(sh->buf, init, initlen);\n        else memset(sh->buf,0,initlen);\n    }\n    sh->buf[initlen] = '\\0';\n    return (char*)sh->buf;\n}\n```\n\n----------------------------------------\n\nTITLE: Store JSON Documents in Redis\nDESCRIPTION: Stores the user data created earlier as JSON documents in Redis, using the JSON.SET command. Each user object is stored with a unique key (user:1, user:2, user:3).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\njson.Set(\"user:1\", \"$\", user1);\njson.Set(\"user:2\", \"$\", user2);\njson.Set(\"user:3\", \"$\", user3);\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis (localhost)\nDESCRIPTION: This JavaScript snippet demonstrates how to connect to a Redis server running on localhost using the node-redis client.  It initializes a Redis client, attaches an error handler, and establishes a connection to the server using the default host and port (localhost:6379).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClient } from 'redis';\n\nconst client = createClient();\n\nclient.on('error', err => console.log('Redis Client Error', err));\n\nawait client.connect();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Consumer Group Information with XINFO GROUPS\nDESCRIPTION: This example demonstrates the use of the `XINFO GROUPS` command to retrieve information about consumer groups associated with a Redis stream. The output shows details like the consumer group name, number of consumers, pending messages, last delivered ID, entries read counter, and the lag between read and added entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xinfo-groups.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> XINFO GROUPS mystream\n1)  1) \"name\"\n    2) \"mygroup\"\n    3) \"consumers\"\n    4) (integer) 2\n    5) \"pending\"\n    6) (integer) 2\n    7) \"last-delivered-id\"\n    8) \"1638126030001-0\"\n    9) \"entries-read\"\n   10) (integer) 2\n   11) \"lag\"\n   12) (integer) 0\n2)  1) \"name\"\n    2) \"some-other-group\"\n    3) \"consumers\"\n    4) (integer) 1\n    5) \"pending\"\n    6) (integer) 0\n    7) \"last-delivered-id\"\n    8) \"1638126028070-0\"\n    9) \"entries-read\"\n   10) (integer) 1\n   11) \"lag\"\n   12) (integer) 1\n```\n\n----------------------------------------\n\nTITLE: Listing Redis Cluster nodes with redis-cli\nDESCRIPTION: This command utilizes redis-cli to retrieve and filter the list of nodes in the Redis Cluster, specifically focusing on identifying the master nodes by filtering the output with grep.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -p 7000 cluster nodes | grep master\n```\n\n----------------------------------------\n\nTITLE: Redis SMEMBERS Example\nDESCRIPTION: This example demonstrates how to use the SMEMBERS command in Redis to retrieve all members of a set.  It first adds two members, \"Hello\" and \"World\", to the set \"myset\", and then retrieves all members using SMEMBERS myset.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/smembers.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD myset \"Hello\"\nSADD myset \"World\"\nSMEMBERS myset\n```\n\n----------------------------------------\n\nTITLE: Redis Client Tracking Example\nDESCRIPTION: This example demonstrates the basic interaction between a client and a Redis server when client-side tracking is enabled. Client 1 enables tracking, retrieves the value of 'foo', and then Client 2 sets a new value for 'foo'. The server then sends an invalidation message to Client 1, indicating that its cached value for 'foo' is stale.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* Client 1 `->` Server: CLIENT TRACKING ON\n* Client 1 `->` Server: GET foo\n* (The server remembers that Client 1 may have the key \"foo\" cached)\n* (Client 1 may remember the value of \"foo\" inside its local memory)\n* Client 2 `->` Server: SET foo SomeOtherValue\n* Server `->` Client 1: INVALIDATE \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Registering Authentication Callback\nDESCRIPTION: Registers a callback function to be executed in addition to normal password-based authentication. Multiple callbacks can be registered, and they are attempted in reverse registration order. The callback must either authenticate, deny, or skip authentication, potentially blocking the client. When the module is unloaded, the callback is unregistered.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_189\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_RegisterAuthCallback(RedisModuleCtx *ctx,\n                                          RedisModuleAuthCallback cb);\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String Object with printf (C)\nDESCRIPTION: This code snippet demonstrates creating a new Redis module string object using a printf-style format string. The string is created using the sds formatter function sdscatvprintf(). The returned string should be freed with RedisModule_FreeString unless automatic memory management is active.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringPrintf(RedisModuleCtx *ctx,\n                                                      const char *fmt,\n                                                      ...);\n```\n\n----------------------------------------\n\nTITLE: Allocating Memory with RedisModule_Alloc Functions - C\nDESCRIPTION: Uses Redis Modules specific memory allocation functions (`RedisModule_Alloc`, `RedisModule_Realloc`, `RedisModule_Free`, `RedisModule_Calloc`, `RedisModule_Strdup`) instead of `malloc` and `free`. This ensures memory is tracked by Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_50\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_Alloc(size_t bytes);\nvoid* RedisModule_Realloc(void *ptr, size_t bytes);\nvoid RedisModule_Free(void *ptr);\nvoid RedisModule_Calloc(size_t nmemb, size_t size);\nchar *RedisModule_Strdup(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Querying Sorted Set for Completion Suggestions with LIMIT\nDESCRIPTION: This snippet shows how to query a Redis sorted set to generate search completion suggestions, limiting the number of returned results using the LIMIT option.  It allows retrieving the top N most frequent search terms that match a given prefix.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_11\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex \"[banana:\" + BYLEX LIMIT 0 10\n1) \"banana:123\"\n2) \"banaooo:1\"\n3) \"banned user:49\"\n4) \"banning:89\"\n```\n\n----------------------------------------\n\nTITLE: Loading RDB file using RedisModule_RdbLoad (C)\nDESCRIPTION: This example illustrates how to load an RDB file into a Redis module using `RedisModule_RdbLoad`. It involves creating an RDB stream from a file, loading the data, and then freeing the stream. Requires the filename of the rdb file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_293\n\nLANGUAGE: c\nCODE:\n```\n    RedisModuleRdbStream *s = RedisModule_RdbStreamCreateFromFile(\"exp.rdb\");\n    RedisModule_RdbLoad(ctx, s, 0);\n    RedisModule_RdbStreamFree(s);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keys by Slot in Redis Cluster\nDESCRIPTION: This example demonstrates how to retrieve keys stored in a Redis cluster node that hash to a specific slot. The `CLUSTER GETKEYSINSLOT` command takes the slot number and a count of keys to return as arguments. The command returns an array of key names.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-getkeysinslot.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> CLUSTER GETKEYSINSLOT 7000 3\n1) \"key_39015\"\n2) \"key_89793\"\n3) \"key_92937\"\n```\n\n----------------------------------------\n\nTITLE: CRC16 Lookup Table Initialization C\nDESCRIPTION: This snippet initializes a constant lookup table `crc16tab` used for calculating the CRC16 checksum.  The table contains pre-computed CRC16 values for each possible byte, allowing for efficient CRC16 computation by table lookup.  The table is defined as an array of `uint16_t` values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nstatic const uint16_t crc16tab[256]= {\n        0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,\n        0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef,\n        0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,\n        0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de,\n        0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,\n        0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d,\n        0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4,\n        0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc,\n        0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,\n        0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b,\n        0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12,\n        0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a,\n        0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41,\n        0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,\n        0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70,\n        0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,\n        0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f,\n        0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067,\n        0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e,\n        0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256,\n        0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d,\n        0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405,\n        0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c,\n        0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634,\n        0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab,\n        0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,\n        0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a,\n        0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92,\n        0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9,\n        0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,\n        0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,\n        0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0\n    };\n```\n\n----------------------------------------\n\nTITLE: Incrementing Score of Element in Redis Sorted Set\nDESCRIPTION: This function increments the score of an element in a Redis sorted set by the given value. If the element doesn't exist, it's added with the increment as its score.  Flags and return values are similar to RedisModule_ZsetAdd. A newscore parameter can be used to retrieve the element's final score after incrementing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_117\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetIncrby(RedisModuleKey *key,\n                               double score,\n                               RedisModuleString *ele,\n                               int *flagsptr,\n                               double *newscore);\n```\n\n----------------------------------------\n\nTITLE: Redis SDIFF Example\nDESCRIPTION: This example demonstrates the usage of the SDIFF command to find the difference between sets in Redis. It initializes two sets, key1 and key2, with sample data and then uses SDIFF to find the elements present in key1 but not in key2. The output will be the elements {a,b,c}.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sdiff.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSDIFF key1 key2\n```\n\n----------------------------------------\n\nTITLE: Retrieving members of a Redis set using SMEMBERS\nDESCRIPTION: The `SMEMBERS` command returns all the members of the set value stored at the specified key.  In this example, it displays the members of the set \"myset\", which were previously added using the `SADD` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sadd.md#_snippet_1\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSMEMBERS myset\n```\n\n----------------------------------------\n\nTITLE: Pause Redis clients\nDESCRIPTION: This Redis command pauses all connected clients for a specified duration (in milliseconds). This is useful to prevent clients from writing to the master instance during a switchover.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nCLIENT PAUSE\n```\n\n----------------------------------------\n\nTITLE: Enable Redis Latency Monitoring\nDESCRIPTION: This command enables the Redis latency monitor at runtime in a production server by setting a latency threshold in milliseconds. Only events that take longer than the specified threshold will be logged as latency spikes. Monitoring is turned off by default (threshold set to 0).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency-monitor.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nCONFIG SET latency-monitor-threshold 100\n```\n\n----------------------------------------\n\nTITLE: Example Redis Cluster Application with redis-rb-cluster\nDESCRIPTION: This Ruby snippet demonstrates a basic application that interacts with a Redis Cluster using the `redis-rb-cluster` gem.  It initializes a `RedisCluster` object with a list of startup nodes and then sets and gets keys in a loop, handling potential errors during cluster operations. The application connects to the cluster, sets keys in the format `foo<number>` to `number`, and retrieves the stored values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n   1  require './cluster'\n   2\n   3  if ARGV.length != 2\n   4      startup_nodes = [\n   5          {:host => \"127.0.0.1\", :port => 7000},\n   6          {:host => \"127.0.0.1\", :port => 7001}\n   7      ]\n   8  else\n   9      startup_nodes = [\n  10          {:host => ARGV[0], :port => ARGV[1].to_i}\n  11      ]\n  12  end\n  13\n  14  rc = RedisCluster.new(startup_nodes,32,:timeout => 0.1)\n  15\n  16  last = false\n  17\n  18  while not last\n  19      begin\n  20          last = rc.get(\"__last__\")\n  21          last = 0 if !last\n  22      rescue => e\n  23          puts \"error #{e.to_s}\"\n  24          sleep 1\n  25      end\n  26  end\n  27\n  28  ((last.to_i+1)..1000000000).each{|x|\n  29      begin\n  30          rc.set(\"foo#{x}\",x)\n  31          puts rc.get(\"foo#{x}\")\n  32          rc.set(\"__last__\",x)\n  33      rescue => e\n  34          puts \"error #{e.to_s}\"\n  35      end\n  36      sleep 0.1\n  37  }\n```\n\n----------------------------------------\n\nTITLE: ACL WHOAMI Example in Redis\nDESCRIPTION: This example demonstrates how to use the ACL WHOAMI command in Redis to retrieve the username associated with the current connection. The initial connection defaults to the \"default\" user, which can be changed using the AUTH command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-whoami.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> ACL WHOAMI\n\"default\"\n```\n\n----------------------------------------\n\nTITLE: Sorting by External Keys in Redis\nDESCRIPTION: This snippet shows how to sort a list based on the values of external keys, using a pattern to generate the key names.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist BY weight_*\n```\n\n----------------------------------------\n\nTITLE: Abort Promise Execution - C\nDESCRIPTION: Aborts the execution of a given promise RedisModuleCallReply. Returns `REDMODULE_OK` in case the abort was done successfully and `REDISMODULE_ERR` if it's not possible to abort the execution (execution already finished).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_156\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_CallReplyPromiseAbort(RedisModuleCallReply *reply,\n                                          void **private_data);\n```\n\n----------------------------------------\n\nTITLE: Connecting Redis Cluster Nodes with CLUSTER MEET\nDESCRIPTION: This command forces a node to meet another node, adding it to the list of nodes composing a Redis Cluster. It is essential for initializing the cluster by establishing initial connections between nodes. It takes the IP address and port of the target node as parameters.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-meet.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`CLUSTER MEET B-ip B-port`\n```\n\n----------------------------------------\n\nTITLE: Generating Redis Protocol in Ruby\nDESCRIPTION: This Ruby function `gen_redis_proto` generates the Redis protocol for a given command and its arguments. It takes a variable number of arguments, formats them according to the Redis protocol specification, and returns the resulting protocol string. The `inspect` method is used to display the string with escape characters.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/bulk-loading.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef gen_redis_proto(*cmd)\n    proto = \"\"\n    proto << \"*\"+cmd.length.to_s+\"\\r\\n\"\n    cmd.each{|arg|\n        proto << \"$\"+arg.to_s.bytesize.to_s+\"\\r\\n\"\n        proto << arg.to_s+\"\\r\\n\"\n    }\n    proto\nend\n\nputs gen_redis_proto(\"SET\",\"mykey\",\"Hello World!\").inspect\n```\n\n----------------------------------------\n\nTITLE: Store and Retrieve Map in Redis\nDESCRIPTION: This JavaScript snippet shows how to store a JavaScript object (map) in Redis as a hash and then retrieve all fields from the hash using the node-redis client.  It demonstrates the use of `hSet` to store the map and `hGetAll` to retrieve all fields and their values.  The stored data is then printed to the console as a JSON string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/nodejs.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait client.hSet('user-session:123', {\n    name: 'John',\n    surname: 'Smith',\n    company: 'Redis',\n    age: 29\n})\n\nlet userSession = await client.hGetAll('user-session:123');\nconsole.log(JSON.stringify(userSession, null, 2));\n/*\n{\n  \"surname\": \"Smith\",\n  \"name\": \"John\",\n  \"company\": \"Redis\",\n  \"age\": \"29\"\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Allocating Pool Memory with RedisModule_PoolAlloc (C)\nDESCRIPTION: This function allocates memory from a memory pool associated with the module context. Memory allocated with `RedisModule_PoolAlloc` is automatically freed when the module callback function returns. This is useful for short-lived, temporary allocations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid *RedisModule_PoolAlloc(RedisModuleCtx *ctx, size_t bytes);\n```\n\n----------------------------------------\n\nTITLE: Establishing TLS Connection - Lettuce\nDESCRIPTION: This Java snippet illustrates how to create a TLS-encrypted connection to a Redis server using Lettuce. It configures a `RedisURI` with SSL enabled and a password. Ensure that the Redis server is configured to accept TLS connections and that the correct password is used.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nRedisURI redisUri = RedisURI.Builder.redis(\"localhost\")\n                                 .withSsl(true)\n                                 .withPassword(\"secret!\") // use your Redis password\n                                 .build();\n\nRedisClient client = RedisClient.create(redisUri);\n```\n\n----------------------------------------\n\nTITLE: Registering a Command Filter in Redis Module (C)\nDESCRIPTION: This function registers a new command filter that intercepts and potentially modifies any command executed in Redis, including core commands, module commands, Lua scripts, and replicated commands. It requires a valid `RedisModuleCtx`, a callback function of type `RedisModuleCommandFilterFunc`, and flags to specify filter behavior (e.g., `REDISMODULE_CMDFILTER_NOSELF`). The function returns a pointer to the registered filter.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_265\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleCommandFilter *RedisModule_RegisterCommandFilter(RedisModuleCtx *ctx,\n                                                                RedisModuleCommandFilterFunc callback,\n                                                                int flags);\n```\n\n----------------------------------------\n\nTITLE: Promote Redis replica to master\nDESCRIPTION: This Redis command promotes a replica to master by breaking the replication link. It's used during planned failovers or upgrades.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_7\n\nLANGUAGE: redis\nCODE:\n```\nREPLICAOF NO ONE\n```\n\n----------------------------------------\n\nTITLE: Getting Set Cardinality using SCARD - Redis\nDESCRIPTION: This snippet demonstrates how to determine the cardinality (size) of a Redis set using the `SCARD` command.  The command returns the number of members in the set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n> SCARD bikes:racing:france\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Extract Keys and Flags from Redis Commands - CLI\nDESCRIPTION: Examples of using `COMMAND GETKEYS` and `COMMAND GETKEYSANDFLAGS` to extract keys from various Redis commands such as `MSET`, `EVAL`, and `LMOVE`. These commands help identify the keys involved and their roles within the specified operations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-getkeysandflags.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND GETKEYS MSET a b c d e f\n```\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND GETKEYS EVAL \"not consulted\" 3 key1 key2 key3 arg1 arg2 arg3 argN\n```\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND GETKEYSANDFLAGS LMOVE mylist1 mylist2 left left\n```\n\n----------------------------------------\n\nTITLE: Enable Client Tracking with REDIRECT\nDESCRIPTION: This snippet demonstrates how to enable client tracking on a data connection, redirecting invalidation messages to another connection specified by its client ID. It sets the `CLIENT TRACKING` option to `on`, and redirects invalidation messages to client ID 4. The `GET foo` command retrieves the value of the key `foo`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n(Connection 2 -- data connection)\nCLIENT TRACKING on REDIRECT 4\n+OK\n\nGET foo\n$3\nbar\n```\n\n----------------------------------------\n\nTITLE: Set Redis replica to read-only mode off\nDESCRIPTION: This Redis command allows writes to the replica instance, which is necessary when promoting a replica to master during an upgrade or failover. It changes the runtime configuration of Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\nCONFIG SET slave-read-only no\n```\n\n----------------------------------------\n\nTITLE: Specifying Stream ID with XADD\nDESCRIPTION: This example shows how to specify an exact stream ID using XADD. It shows explicitly adding an entry with \"1526919030474-55\" and then uses milliseconds and auto-incrementing sequence to add another entry.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xadd.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n> XADD mystream 1526919030474-55 message \"Hello,\"\n\"1526919030474-55\"\n> XADD mystream 1526919030474-* message \" World!\"\n\"1526919030474-56\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Server using redis-cli\nDESCRIPTION: This snippet demonstrates how to connect to a Redis server running on localhost using the `redis-cli` command-line tool. It specifies the host (`-h`) and port (`-p`) for the connection.  The default port 6379 is used.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/get-started/data-store.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -h 127.0.0.1 -p 6379\n```\n\n----------------------------------------\n\nTITLE: Getting Hash Fields in Redis Module (C)\nDESCRIPTION: This function retrieves fields from a hash value. It's a variadic function that takes field names (as `RedisModuleString` pointers or C strings using the `REDISMODULE_HASH_CFIELDS` flag) and pointers to `RedisModuleString` pointers or integer pointers. If the field exists, its value is assigned to the `RedisModuleString` pointer. The `REDISMODULE_HASH_EXISTS` flag is used to check for field existence. A NULL argument signals the end of the field/value pairs.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_130\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_HashGet(RedisModuleKey *key, int flags, ...);\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Redis Set (SADD)\nDESCRIPTION: This snippet demonstrates the `SADD` command, which adds elements to a Redis Set. Sets only store unique elements and do not maintain any specific order.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nSADD myset a\nSADD myset b\nSADD myset foo\nSADD myset bar\n```\n\n----------------------------------------\n\nTITLE: Redis ZLEXCOUNT Examples\nDESCRIPTION: Demonstrates the usage of the ZLEXCOUNT command in Redis to count elements within a sorted set based on lexicographical ranges. The examples show how to add elements to the sorted set and then count elements within different ranges using '-' and '+' for unbounded ranges and '[b' and '[f' for specific boundaries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zlexcount.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 0 a 0 b 0 c 0 d 0 e\nZADD myzset 0 f 0 g\nZLEXCOUNT myzset - +\nZLEXCOUNT myzset [b [f\n```\n\n----------------------------------------\n\nTITLE: Inserting Element at Index in Redis List\nDESCRIPTION: This function inserts an element into a Redis list at the specified index.  The index is zero-based and can be negative. Returns REDISMODULE_OK on success or REDISMODULE_ERR on failure, with errno set appropriately (EINVAL, ENOTSUP, EBADF, or EDOM).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_114\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ListInsert(RedisModuleKey *key,\n                               long index,\n                               RedisModuleString *value);\n```\n\n----------------------------------------\n\nTITLE: Replying with Empty String - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply with an empty string via the Redis Module API. The function `RedisModule_ReplyWithEmptyString` sends an empty string to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_70\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithEmptyString(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Encoding with cmsgpack in Lua\nDESCRIPTION: Encodes a Lua data type into a MessagePack string using the `cmsgpack.pack()` function. This function takes a Lua data type as an argument and returns its MessagePack string representation, which can then be stored or transmitted. It is available in Redis Lua scripts and functions since version 2.6.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_27\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return cmsgpack.pack({'foo', 'bar', 'baz'})\" 0\n\"\\x93\\xa3foo\\xa3bar\\xa3baz\"\n```\n\n----------------------------------------\n\nTITLE: Using redis.breakpoint() for dynamic breakpoints in Lua\nDESCRIPTION: This snippet shows how to use the `redis.breakpoint()` function within a Lua script to create dynamic breakpoints. When called, it halts execution as if a breakpoint were set on the next line. This is particularly useful for stopping execution only when a specific condition is met.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nif counter > 10 then redis.breakpoint() end\n```\n\n----------------------------------------\n\nTITLE: Deleting a Stream Entry During Iteration - C\nDESCRIPTION: This function deletes the current stream entry while iterating through a stream. It requires a RedisModuleKey opened for writing. It returns REDISMODULE_OK on success and REDISMODULE_ERR on failure, setting errno accordingly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_139\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamIteratorDelete(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Client HELLO Command Example\nDESCRIPTION: This example illustrates the client initiating the HELLO command with a protocol version and the server responding with an error if the protocol is not supported.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nClient: HELLO 4\nServer: -NOPROTO sorry, this protocol version is not supported.\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in Milliseconds\nDESCRIPTION: This function retrieves the current UNIX time in milliseconds. It provides a way for modules to measure time intervals. Available since Redis 4.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nmstime_t RedisModule_Milliseconds(void);\n```\n\n----------------------------------------\n\nTITLE: Setting a Module Type Value with RedisModule_ModuleTypeSetValue - C\nDESCRIPTION: Sets the specified module type object as the value of a Redis key, deleting any existing value. The function requires the key to be open for writing and no active iterators. Returns REDISMODULE_OK on success, or REDISMODULE_ERR if the key is not writable or an iterator is active.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_160\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_ModuleTypeSetValue(RedisModuleKey *key,\n                                       moduleType *mt,\n                                       void *value);\n```\n\n----------------------------------------\n\nTITLE: Redis SINTER Example\nDESCRIPTION: This example demonstrates the usage of the SINTER command in Redis. It adds elements to two sets (key1 and key2) and then calculates their intersection using SINTER. The result will be the common members of both sets.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sinter.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSINTER key1 key2\n```\n\n----------------------------------------\n\nTITLE: Check Cluster Nodes Status in Redis\nDESCRIPTION: This Redis command is used to retrieve information about all the nodes currently part of the Redis Cluster. The output includes node IDs, IP addresses, roles (master/slave), and connectivity status. It can be used to verify if a node has joined the cluster successfully.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_15\n\nLANGUAGE: redis\nCODE:\n```\ncluster nodes\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Service with Homebrew in Bash\nDESCRIPTION: This command starts the Redis service using `launchd` managed by Homebrew. It launches Redis in the background and restarts it at login.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start redis\n```\n\n----------------------------------------\n\nTITLE: Open Key\nDESCRIPTION: Opens a Redis key.  `RedisModule_OpenKey` opens a key for reading or writing. `ctx` is the RedisModuleCtx pointer, `argv[1]` is the key name (a RedisModuleString), and mode is `REDISMODULE_READ` or `REDISMODULE_WRITE`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleKey *key;\nkey = RedisModule_OpenKey(ctx,argv[1],REDISMODULE_READ);\n```\n\n----------------------------------------\n\nTITLE: Redis LPOS Command examples\nDESCRIPTION: This example shows different usages of the `LPOS` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\nRPUSH mylist a b c d 1 2 3 4 3 3 3\nLPOS mylist 3\nLPOS mylist 3 COUNT 0 RANK 2\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificate and Key Files\nDESCRIPTION: These configuration directives specify the paths to the TLS certificate, key, CA certificate, and DH params files. These files are necessary for Redis to establish secure connections using TLS. The CA certificate is used to validate client certificates.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/encryption.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntls-cert-file /path/to/redis.crt\ntls-key-file /path/to/redis.key\ntls-ca-cert-file /path/to/ca.crt\ntls-dh-params-file /path/to/redis.dh\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration: min-replicas-to-write & min-replicas-max-lag\nDESCRIPTION: This configuration snippet demonstrates how to configure a Redis master to stop accepting writes if it can't write to a specified number of replicas within a certain time frame. This helps prevent data loss in scenarios where the master becomes isolated from its replicas due to network partitions or replica failures.  The `min-replicas-to-write` parameter specifies the minimum number of replicas required for the master to accept writes, and `min-replicas-max-lag` defines the maximum lag in seconds allowed between the master and its replicas.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nmin-replicas-to-write 1\nmin-replicas-max-lag 10\n```\n\n----------------------------------------\n\nTITLE: Getting Client User Name by ID with RedisModule_GetClientUserNameById - C\nDESCRIPTION: Retrieves the ACL user name used by the client with the specified client ID.  The client ID can be obtained using RedisModule_GetClientId(). Returns NULL if the client does not exist or is not using an ACL user.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_78\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_GetClientUserNameById(RedisModuleCtx *ctx,\n                                                         uint64_t id);\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Directive Example\nDESCRIPTION: This snippet demonstrates the basic format of a Redis configuration directive within the `redis.conf` file. It sets up a replica using the `replicaof` directive, specifying the host and port of the master Redis instance. The directive is used to configure Redis instances to act as replicas.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/config.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nreplicaof 127.0.0.1 6380\n```\n\n----------------------------------------\n\nTITLE: Setting File Descriptor Limits in Linux\nDESCRIPTION: These commands demonstrate how to set the maximum number of file descriptors per process under Linux. `ulimit` sets the limit for the current session, while `sysctl` sets a system-wide limit.  Note that `ulimit` only works if the hard limit is high enough.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/clients.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nulimit -Sn 100000 # This will only work if hard limit is big enough.\nsysctl -w fs.file-max=100000\n```\n\n----------------------------------------\n\nTITLE: Redis XREAD with incomplete IDs\nDESCRIPTION: This example shows that using incomplete IDs (e.g., just the timestamp part) with `XREAD` is valid.  The missing sequence part is interpreted as zero.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xread.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> XREAD COUNT 2 STREAMS mystream writers 0 0\n```\n\nLANGUAGE: text\nCODE:\n```\n> XREAD COUNT 2 STREAMS mystream writers 0-0 0-0\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Redis on Ubuntu/Debian (Bash)\nDESCRIPTION: Installs necessary prerequisites like `lsb-release`, `curl`, and `gpg` using `apt` package manager on Ubuntu/Debian systems. These tools are required if you're running a minimal distribution like a Docker container. The `apt install` command updates the package list and installs the specified packages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-linux.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install lsb-release curl gpg\n```\n\n----------------------------------------\n\nTITLE: Redis ZINTERCARD Examples\nDESCRIPTION: Illustrates the usage of the `ZINTERCARD` command in Redis. It shows how to calculate the cardinality of the intersection of two sorted sets with and without the `LIMIT` option. Demonstrates the basic commands to add elements to sorted sets.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zintercard.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZINTER 2 zset1 zset2\nZINTERCARD 2 zset1 zset2\nZINTERCARD 2 zset1 zset2 LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: Enable Client Tracking with OPTIN\nDESCRIPTION: This snippet shows how to enable client tracking with the `OPTIN` option, which requires the client to explicitly declare which keys it wants to cache. In this mode, keys mentioned in read queries are not cached by default.  The example redirects the invalidation messages to client ID 1234.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nCLIENT TRACKING on REDIRECT 1234 OPTIN\n```\n\n----------------------------------------\n\nTITLE: Checking Membership in a Redis Set (SISMEMBER)\nDESCRIPTION: This snippet demonstrates the `SISMEMBER` command, used to check if a given element is a member of a Redis Set. It returns 1 if the element is a member and 0 otherwise.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nSISMEMBER myset foo => 1\nSISMEMBER myset notamember => 0\n```\n\n----------------------------------------\n\nTITLE: Module Authentication Callback Example\nDESCRIPTION: Illustrates how to use non-blocking module-based authentication with the RegisterAuthCallback API. Demonstrates authenticating, denying authentication, and skipping authentication.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_190\n\nLANGUAGE: c\nCODE:\n```\nint auth_cb(RedisModuleCtx *ctx, RedisModuleString *username, RedisModuleString *password, RedisModuleString **err) {\n         const char *user = RedisModule_StringPtrLen(username, NULL);\n         const char *pwd = RedisModule_StringPtrLen(password, NULL);\n         if (!strcmp(user,\"foo\") && !strcmp(pwd,\"valid_password\")) {\n             RedisModule_AuthenticateClientWithACLUser(ctx, \"foo\", 3, NULL, NULL, NULL);\n             return REDISMODULE_AUTH_HANDLED;\n         }\n\n         else if (!strcmp(user,\"foo\") && !strcmp(pwd,\"wrong_password\")) {\n             RedisModuleString *log = RedisModule_CreateString(ctx, \"Module Auth\", 11);\n             RedisModule_ACLAddLogEntryByUserName(ctx, username, log, REDISMODULE_ACL_LOG_AUTH);\n             RedisModule_FreeString(ctx, log);\n             const char *err_msg = \"Auth denied by Misc Module.\";\n             *err = RedisModule_CreateString(ctx, err_msg, strlen(err_msg));\n             return REDISMODULE_AUTH_HANDLED;\n         }\n         return REDISMODULE_AUTH_NOT_HANDLED;\n      }\n\n     int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n         if (RedisModule_Init(ctx,\"authmodule\",1,REDISMODULE_APIVER_1)== REDISMODULE_ERR)\n             return REDISMODULE_ERR;\n         RedisModule_RegisterAuthCallback(ctx, auth_cb);\n         return REDISMODULE_OK;\n     }\n```\n\n----------------------------------------\n\nTITLE: Loading a Redis Function Library from a file using redis-cli\nDESCRIPTION: This bash command loads a Redis Function library from a file named `mylib.lua` into Redis. It uses the `redis-cli` tool with the `-x` option to read the file contents as standard input for the `FUNCTION LOAD REPLACE` command. The `REPLACE` option overwrites any existing library with the same name.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cat mylib.lua | redis-cli -x FUNCTION LOAD REPLACE\n```\n\n----------------------------------------\n\nTITLE: Retrieve Command Information in Redis\nDESCRIPTION: This example shows how to retrieve information about a Redis command using the `COMMAND INFO` command. The output includes details such as the command's flags, arguments, and tips, which provide additional information for clients, especially in clustered environments. The example specifically retrieves information for the 'ping' command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/command-tips.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nredis> command info ping\n1)  1) \"ping\"\n    2) (integer) -1\n    3) 1) fast\n    4) (integer) 0\n    5) (integer) 0\n    6) (integer) 0\n    7) 1) @fast\n       2) @connection\n    8) 1) \"request_policy:all_shards\"\n       2) \"response_policy:all_succeeded\"\n    9) (empty array)\n   10) (empty array)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maxmemory in Redis\nDESCRIPTION: This snippet demonstrates how to set the `maxmemory` configuration directive in Redis to limit memory usage to a specified amount.  The `maxmemory` directive can be set in the `redis.conf` file or using the `CONFIG SET` command at runtime. Setting to zero means no memory limits (default for 64-bit, 3GB limit on 32-bit).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/eviction/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmaxmemory 100mb\n```\n\n----------------------------------------\n\nTITLE: Evaluating Lua Expressions for Debugging\nDESCRIPTION: This code snippet shows how to use the `eval` command within the Redis Lua debugger to execute small Lua scripts outside the context of the current call frame. This is useful for testing Lua functions and verifying their behavior. It takes a Lua expression as input and returns the result.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlua debugger> e redis.sha1hex('foo')\n<retval> \"0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\"\n```\n\n----------------------------------------\n\nTITLE: Replying with Simple String\nDESCRIPTION: RedisModule_ReplyWithSimpleString replies with a simple string (`+... \\r\\n` in RESP protocol). This replies are suitable only when sending a small non-binary string with small overhead, like \"OK\" or similar replies. The function always returns REDISMODULE_OK.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_56\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithSimpleString(RedisModuleCtx *ctx, const char *msg);\n```\n\n----------------------------------------\n\nTITLE: Live Resharding Step 5\nDESCRIPTION: Step 5 involves sending the `CLUSTER SETSLOT` command to the source node to inform the source node the slot has been assigned to a different node. This is done after the destination node is informed, to ensure data consistency.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT <slot> NODE <destination-node-id>\n```\n\n----------------------------------------\n\nTITLE: Displaying Redis Cluster Links\nDESCRIPTION: This code snippet shows an example output of the `CLUSTER LINKS` command in Redis. The command returns an array of maps, where each map represents a TCP link between nodes in the cluster. Each map contains attributes like 'direction', 'node', 'create-time', 'events', 'send-buffer-allocated', and 'send-buffer-used', providing details about the link's state and usage.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-links.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER LINKS\n1)  1) \"direction\"\n    2) \"to\"\n    3) \"node\"\n    4) \"8149d745fa551e40764fecaf7cab9dbdf6b659ae\"\n    5) \"create-time\"\n    6) (integer) 1639442739375\n    7) \"events\"\n    8) \"rw\"\n    9) \"send-buffer-allocated\"\n   10) (integer) 4512\n   11) \"send-buffer-used\"\n   12) (integer) 0\n2)  1) \"direction\"\n    2) \"from\"\n    3) \"node\"\n    4) \"8149d745fa551e40764fecaf7cab9dbdf6b659ae\"\n    5) \"create-time\"\n    6) (integer) 1639442739411\n    7) \"events\"\n    8) \"r\"\n    9) \"send-buffer-allocated\"\n   10) (integer) 0\n   11) \"send-buffer-used\"\n   12) (integer) 0\n```\n\n----------------------------------------\n\nTITLE: Get Set Cardinality using SCARD in Redis CLI\nDESCRIPTION: This example demonstrates how to use the SCARD command to retrieve the cardinality of a Redis set. It first adds two elements, 'Hello' and 'World', to the set named 'myset' using the SADD command. Then, it uses SCARD to get the number of elements in 'myset'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scard.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSADD myset \"Hello\"\nSADD myset \"World\"\nSCARD myset\n```\n\n----------------------------------------\n\nTITLE: Searching Within Box with GEOSEARCH - Redis CLI\nDESCRIPTION: This example demonstrates how to search for members within a specified rectangular area (box) using the GEOSEARCH command in Redis. The example searches the \"Sicily\" sorted set for members within a 400km x 400km box centered at longitude 15 and latitude 37, sorted in ascending order and returns the coordinates and distance of each member.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geosearch.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nGEOSEARCH Sicily FROMLONLAT 15 37 BYBOX 400 400 km ASC WITHCOORD WITHDIST\n```\n\n----------------------------------------\n\nTITLE: Redis PING Command Examples\nDESCRIPTION: Examples demonstrating the usage of the Redis PING command with and without arguments. The first example tests the connection, while the second sends a string to be echoed back.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/ping.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nPING\n\nPING \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Approximate Trimming with XTRIM MAXLEN ~\nDESCRIPTION: This command shows the XTRIM command used with the MAXLEN option and the ~ (approximate) modifier. This allows for more efficient trimming by removing whole nodes from the underlying data structure instead of individual entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_37\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> XTRIM mystream MAXLEN ~ 10\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Expanding Redis Function Library with more functions in Lua\nDESCRIPTION: This Lua code expands the existing `mylib` library with two new functions: `my_hgetall` and `my_hlastmodified`. `my_hgetall` retrieves all fields from a hash, excluding `_last_modified_`, while `my_hlastmodified` retrieves only the `_last_modified_` field. It uses `redis.setresp(3)` for RESP3 support in `my_hgetall`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlocal function my_hgetall(keys, args)\n  redis.setresp(3)\n  local hash = keys[1]\n  local res = redis.call('HGETALL', hash)\n  res['map']['_last_modified_'] = nil\n  return res\nend\n\nlocal function my_hlastmodified(keys, args)\n  local hash = keys[1]\n  return redis.call('HGET', hash, '_last_modified_')\nend\n\nredis.register_function('my_hgetall', my_hgetall)\nredis.register_function('my_hlastmodified', my_hlastmodified)\n```\n\n----------------------------------------\n\nTITLE: Struct Packing Example in Redis Lua\nDESCRIPTION: Demonstrates how to use the `struct.pack()` function within a Redis Lua script to encode values into a struct-encoded string using a specified format. The format string 'HH' indicates two unsigned short values.  The script returns the packed string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_22\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return struct.pack('HH', 1, 2)\" 0\n\"\\x01\\x00\\x02\\x00\"\n```\n\n----------------------------------------\n\nTITLE: Redis Key Setting\nDESCRIPTION: Sets a key named 'mykey' to the value 'Hello' in Redis. This is a prerequisite for the EVAL_RO example.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/eval_ro.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> SET mykey \"Hello\"\nOK\n```\n\n----------------------------------------\n\nTITLE: Get Latest Latency Events in Redis\nDESCRIPTION: This example demonstrates how to use the `latency latest` command in Redis to retrieve the latest latency events.  It shows the command execution and the structure of the returned data, including the event name, timestamp, latest latency in milliseconds, and all-time maximum latency.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/latency-latest.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n127.0.0.1:6379> debug sleep 1\nOK\n(1.00s)\n127.0.0.1:6379> debug sleep .25\nOK\n127.0.0.1:6379> latency latest\n1) 1) \"command\"\n   2) (integer) 1405067976\n   3) (integer) 251\n   4) (integer) 1001\n```\n\n----------------------------------------\n\nTITLE: Disable Transparent Huge Pages (THP)\nDESCRIPTION: This command disables transparent huge pages (THP) in Linux. THP can cause significant latency in Redis after a fork operation. Disabling THP is recommended to avoid performance issues.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Replying with Wrong Arity Error\nDESCRIPTION: RedisModule_WrongArity sends an error about the number of arguments given to the command, citing the command name in the error message. Returns REDISMODULE_OK.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_52\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_WrongArity(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in Microseconds\nDESCRIPTION: This function retrieves the current UNIX time in microseconds, offering finer granularity than milliseconds. It's useful for precise time measurements. Available since Redis 7.2.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nustime_t RedisModule_Microseconds(void);\n```\n\n----------------------------------------\n\nTITLE: SSCAN Usage with MATCH\nDESCRIPTION: This example demonstrates the usage of the `SSCAN` command with the `MATCH` option to iterate over elements in a set that match a specific pattern ('f*'). It shows how to filter elements during iteration based on a glob-style pattern.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scan.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\nredis 127.0.0.1:6379> sadd myset 1 2 3 foo foobar feelsgood\n(integer) 6\nredis 127.0.0.1:6379> sscan myset 0 match f*\n1) \"0\"\n2) 1) \"foo\"\n   2) \"feelsgood\"\n   3) \"foobar\"\nredis 127.0.0.1:6379>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Redis Command Information (with non-existent commands)\nDESCRIPTION: This example demonstrates how to retrieve information about commands, including non-existent ones, using `COMMAND INFO`. Note that `foo` and `bar` do not exist, and will return nil in their respective positions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-info.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND INFO foo evalsha config bar\n```\n\n----------------------------------------\n\nTITLE: Cluster Set Slot Command - Redis\nDESCRIPTION: This command sets the state of a slot. Can set the node ID, or set the slot to MIGRATING or IMPORTING states during resharding.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT slot NODE node\n```\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT slot MIGRATING node\n```\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT slot IMPORTING node\n```\n\n----------------------------------------\n\nTITLE: Redis HSETNX Example\nDESCRIPTION: Demonstrates the usage of the HSETNX command to set a field in a hash only if it doesn't already exist. The example first sets the 'field' to 'Hello', then attempts to set it to 'World' (which fails), and finally retrieves the value of 'field'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hsetnx.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nHSETNX myhash field \"Hello\"\nHSETNX myhash field \"World\"\nHGET myhash field\n```\n\n----------------------------------------\n\nTITLE: Event Notification Pattern - Producer Side\nDESCRIPTION: This snippet illustrates the producer side of an event notification pattern. It adds a new element to a set using SADD and then pushes a value to a helper list using LPUSH.  The MULTI/EXEC block ensures atomicity, guaranteeing that the consumer is notified whenever an element is added to the set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/blpop.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nMULTI\nSADD key element\nLPUSH helper_key x\nEXEC\n```\n\n----------------------------------------\n\nTITLE: Loading a Lua Library in Redis\nDESCRIPTION: Loads a Lua library named 'mylib' into Redis. This library registers a function named 'myfunc' that takes keys and arguments and returns the second argument.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-dump.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nFUNCTION LOAD \"#!lua name=mylib \\n redis.register_function('myfunc', function(keys, args) return args[1] end)\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Redis Cluster Nodes with Multiple CLUSTER MEET\nDESCRIPTION: This series of commands illustrates connecting a node A to multiple other nodes (B, C, and D) using `CLUSTER MEET`.  This initiates the cluster formation process, allowing A to propagate gossip information, enabling the other nodes to discover each other and form a full mesh cluster.  The commands take the IP address and port of each target node.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-meet.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1. `CLUSTER MEET B-ip B-port`\n2. `CLUSTER MEET C-ip C-port`\n3. `CLUSTER MEET D-ip D-port`\n```\n\n----------------------------------------\n\nTITLE: Getting Module Type from a Key with RedisModule_ModuleTypeGetType - C\nDESCRIPTION: Retrieves the module type pointer associated with a given Redis key. This function should be called after verifying the key type using RedisModule_KeyType(). Returns the module type pointer if the key is associated with a module type, otherwise returns NULL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_161\n\nLANGUAGE: C\nCODE:\n```\nmoduleType *RedisModule_ModuleTypeGetType(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Getting the Cardinality of a Redis Set (SCARD)\nDESCRIPTION: This snippet shows the `SCARD` command, used to retrieve the number of elements (cardinality) in a Redis Set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nSCARD myset => 4\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Hash Encoding (Redis <= 6.2)\nDESCRIPTION: These configuration directives in redis.conf control the maximum number of entries and value size for specially encoded hashes, lists and sets using ziplists.  Adjusting these settings can optimize memory usage, but exceeding these limits will result in automatic conversion to normal encoding.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nzset-max-ziplist-entries 128 \nzset-max-ziplist-value 64\nset-max-intset-entries 512\n```\n\n----------------------------------------\n\nTITLE: Monitoring Redis performance using perf stat\nDESCRIPTION: This command uses the `perf stat` tool to monitor the performance of a Redis process by counting various hardware events. It calculates metrics such as instructions per cycle, micro ops executed, stall cycles on memory (per memory type), cache references and cache misses. The collected statistics are displayed for a duration of 60 seconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ perf stat -e \"cpu-clock,cpu-cycles,instructions,uops_executed.core,uops_executed.stall_cycles,cache-references,cache-misses,cycle_activity.stalls_total,cycle_activity.stalls_mem_any,cycle_activity.stalls_l3_miss,cycle_activity.stalls_l2_miss,cycle_activity.stalls_l1d_miss\" --pid $(pgrep redis-server) -- sleep 60\n```\n\n----------------------------------------\n\nTITLE: Saving Unsigned Integer in RDB File (RedisModule_SaveUnsigned)\nDESCRIPTION: This function saves an unsigned 64-bit value into the Redis RDB file. It is intended for use within the `rdb_save` method of modules that implement custom data types. The `RedisModuleIO` pointer provides the context for writing to the RDB file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_164\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveUnsigned(RedisModuleIO *io, uint64_t value);\n```\n\n----------------------------------------\n\nTITLE: Copying Redis Configuration File\nDESCRIPTION: This command copies the default Redis configuration file (`redis.conf`) to `/etc/redis/`, renaming it to `6379.conf`. This file contains various configuration options for the Redis server, such as port number, persistence settings, and logging options. `sudo cp` requires root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp redis.conf /etc/redis/6379.conf\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Example with OVERFLOW FAIL\nDESCRIPTION: This example demonstrates the `OVERFLOW FAIL` behavior, where incrementing beyond the limit results in a NULL return value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitfield.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> BITFIELD mykey OVERFLOW FAIL incrby u2 102 1\n1) (nil)\n```\n\n----------------------------------------\n\nTITLE: Cache a Key with CLIENT CACHING YES\nDESCRIPTION: This snippet shows how to explicitly mark a key for caching using the `CLIENT CACHING YES` command. This command affects the immediately following command.  In this case, the subsequent `GET foo` command will cause the server to track the key `foo` for client-side caching invalidation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\nCLIENT CACHING YES\n+OK\nGET foo\n\"bar\"\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Redis Sorted Set (ZADD)\nDESCRIPTION: This snippet demonstrates the `ZADD` command, which adds elements to a Redis Sorted Set along with their associated scores. Sorted Sets maintain elements in order based on their scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nZADD zset 10 a\nZADD zset 5 b\nZADD zset 12.55 c\n```\n\n----------------------------------------\n\nTITLE: Setting Module User ACL Permissions with String - RedisModule_SetModuleUserACLString\nDESCRIPTION: Sets the permissions of a user using a complete ACL string, similar to the Redis ACL SETUSER command. It differs from `RedisModule_SetModuleUserACL` by accepting a complete ACL string. If an error occurs, a descriptive string can be returned in the `error` parameter.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_226\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_SetModuleUserACLString(RedisModuleCtx *ctx,\n                                           RedisModuleUser *user,\n                                           const char *acl,\n                                           RedisModuleString **error);\n```\n\n----------------------------------------\n\nTITLE: Get Open Key Modes Mask - Redis Module API (C)\nDESCRIPTION: Returns the full OpenKey modes mask, allowing modules to check if a certain set of OpenKey modes are supported by the Redis server version in use. Available since Redis 7.2.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_90\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_GetOpenKeyModesAll(void);\n```\n\n----------------------------------------\n\nTITLE: Joining Nodes to Cluster using CLUSTER MEET\nDESCRIPTION: The `CLUSTER MEET` command is used to manually add a node to the Redis Cluster.  This command forces the receiving node to accept the sending node as part of the cluster. The `ip` and `port` parameters specify the address and port of the node to be added. This is generally needed to initially bootstrap the cluster.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER MEET ip port\n```\n\n----------------------------------------\n\nTITLE: Generating a secure password - Redis CLI\nDESCRIPTION: This snippet shows how to generate a cryptographically secure password using the ACL GENPASS command. This command outputs a 32-byte pseudorandom string converted to a 64-byte alphanumerical string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_20\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> ACL GENPASS\n\"dd721260bfe1b3d9601e7fbab36de6d04e2e67b0ef1c53de59d45950db0dd3cc\"\n```\n\n----------------------------------------\n\nTITLE: Reading pending messages with XREADGROUP and ID\nDESCRIPTION: This command reads messages from the `race:italy` stream using the `italy_riders` consumer group as the `Alice` consumer, but requests pending messages with ID `0`. This retrieves the history of messages delivered to this consumer but not yet acknowledged.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_22\n\nLANGUAGE: Redis\nCODE:\n```\nXREADGROUP GROUP italy_riders Alice STREAMS race:italy 0\n```\n\n----------------------------------------\n\nTITLE: Redis Benchmark Usage\nDESCRIPTION: Displays the usage information for the `redis-benchmark` utility, outlining available options for configuring the benchmark.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: redis-benchmark [-h <host>] [-p <port>] [-c <clients>] [-n <requests]> [-k <boolean>]\n\n -h <hostname>      Server hostname (default 127.0.0.1)\n -p <port>          Server port (default 6379)\n -s <socket>        Server socket (overrides host and port)\n -a <password>      Password for Redis Auth\n -c <clients>       Number of parallel connections (default 50)\n -n <requests>      Total number of requests (default 100000)\n -d <size>          Data size of SET/GET value in bytes (default 3)\n --dbnum <db>       SELECT the specified db number (default 0)\n -k <boolean>       1=keep alive 0=reconnect (default 1)\n -r <keyspacelen>   Use random keys for SET/GET/INCR, random values for SADD\n  Using this option the benchmark will expand the string __rand_int__\n  inside an argument with a 12 digits number in the specified range\n  from 0 to keyspacelen-1. The substitution changes every time a command\n  is executed. Default tests use this to hit random keys in the\n  specified range.\n -P <numreq>        Pipeline <numreq> requests. Default 1 (no pipeline).\n -q                 Quiet. Just show query/sec values\n --csv              Output in CSV format\n -l                 Loop. Run the tests forever\n -t <tests>         Only run the comma separated list of tests. The test\n                     names are the same as the ones produced as output.\n -I                 Idle mode. Just open N idle connections and wait.\n```\n\n----------------------------------------\n\nTITLE: Listing Commands in a Specific ACL Category in Redis\nDESCRIPTION: This command retrieves a list of all Redis commands belonging to the specified ACL category.  The category name is passed as an argument to the command.  The output is an array of command names associated with the given category.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-cat.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> ACL CAT dangerous\n```\n\n----------------------------------------\n\nTITLE: GEOHASH command example\nDESCRIPTION: This example demonstrates how to use the GEOHASH command in Redis to retrieve the Geohash strings for elements (Palermo and Catania) added to a geospatial index named 'Sicily' using GEOADD. The GEOADD command first adds the elements with their longitude and latitude coordinates.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/geohash.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nGEOADD Sicily 13.361389 38.115556 \"Palermo\" 15.087269 37.502669 \"Catania\"\nGEOHASH Sicily Palermo Catania\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Bus Port\nDESCRIPTION: These examples illustrate how the Cluster bus port is determined. If the `cluster-port` parameter is not set in `redis.conf`, the Cluster bus port is calculated by adding 10000 to the data port. If `cluster-port` parameter is set then the value from the config file will be used.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nExample 1:\n\nIf a Redis node is listening for client connections on port 6379, \nand you do not add cluster-port parameter in redis.conf,\nthe Cluster bus port 16379 will be opened.\n\nExample 2:\n\nIf a Redis node is listening for client connections on port 6379, \nand you set cluster-port 20000 in redis.conf,\nthe Cluster bus port 20000 will be opened.\n```\n\n----------------------------------------\n\nTITLE: Cluster Delete Slots Range Command - Redis\nDESCRIPTION: This command removes a range of slots from a Redis node. Primarily for debugging or manual modification.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER DELSLOTSRANGE start-slot1 end-slot1 [start-slot2 end-slot2] ... [start-slotN end-slotN]\n```\n\n----------------------------------------\n\nTITLE: Assigning Slots using CLUSTER ADDSLOTS in Redis\nDESCRIPTION: This code snippet demonstrates how to assign individual hash slots to a Redis node using the CLUSTER ADDSLOTS command.  It takes a list of slot numbers as input. The output is \"OK\" upon successful assignment.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-addslotsrange.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER ADDSLOTS 1 2 3 4 5\nOK\n```\n\n----------------------------------------\n\nTITLE: Setting String Value with RedisModule_StringSet - C\nDESCRIPTION: Sets a new string value for a given key, similar to the Redis `SET` command. If a value already exists (of any type), it will be deleted and replaced with the new string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_42\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringSet(RedisModuleKey *key, RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latency History with Redis CLI\nDESCRIPTION: This example demonstrates how to use the `latency history` command via the Redis CLI to retrieve the latency history for the 'command' event. The output shows timestamp-latency pairs where the first element is the timestamp and the second is the latency in milliseconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/latency-history.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n127.0.0.1:6379> latency history command\n1) 1) (integer) 1405067822\n   2) (integer) 251\n2) 1) (integer) 1405067941\n   2) (integer) 1001\n```\n\n----------------------------------------\n\nTITLE: Remote RDB Backup using Redis CLI\nDESCRIPTION: This command uses `redis-cli` to create a remote backup of a Redis instance's RDB file. It establishes a connection with the Redis server and initiates a full data transfer in RDB format, storing it in the specified file. Requires a running Redis instance and sufficient write permissions to the destination directory. The destination file name is passed as a parameter.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli --rdb /tmp/dump.rdb\nSYNC sent to master, writing 13256 bytes to '/tmp/dump.rdb'\nTransfer finished with success.\n```\n\n----------------------------------------\n\nTITLE: Getting Blocked Client Handle - RedisModule_GetBlockedClientHandle\nDESCRIPTION: Gets the blocked client associated with a given context. This is useful for cleaning up blocked client handle references in the reply and timeout callbacks.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_205\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleBlockedClient *RedisModule_GetBlockedClientHandle(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Replying with Null - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply to the client with a NULL value using the Redis Module API. The function `RedisModule_ReplyWithNull` sends a NULL reply to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_73\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithNull(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Dumping a Redis Key Value - Redis\nDESCRIPTION: This example demonstrates the usage of the `DUMP` command to serialize the value associated with the key \"mykey\" in Redis. It first sets the value of \"mykey\" to \"10\" and then uses `DUMP` to obtain a serialized representation of the value. The output is a binary string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/dump.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> SET mykey 10\nOK\n> DUMP mykey\n\"\\x00\\xc0\\n\\n\\x00n\\x9fWE\\x0e\\xaec\\xbb\"\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Lexicographical Index (Redis)\nDESCRIPTION: This snippet demonstrates how to add elements to a Redis sorted set for creating a lexicographical index. The `ZADD` command is used with a score of 0 (since lexicographical sorting applies when scores are equal) to add string values to the sorted set.  The elements will be sorted lexicographically.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_4\n\nLANGUAGE: Redis\nCODE:\n```\nZADD myindex 0 baaa\nZADD myindex 0 abbb\nZADD myindex 0 aaaa\nZADD myindex 0 bbbb\n```\n\n----------------------------------------\n\nTITLE: Initializing Hash Slot Table\nDESCRIPTION: This initializes the hash slot table of a new Redis Cluster node to NULL. Each hash slot is not initially bound or linked to any node, meaning that no node is initially responsible for serving that hash slot. This is the starting point for the cluster to build a consistent view of slot ownership.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n0 -> NULL\n1 -> NULL\n2 -> NULL\n...\n16383 -> NULL\n```\n\n----------------------------------------\n\nTITLE: Showing help for Redis commands\nDESCRIPTION: This demonstrates using the `HELP` command in redis-cli to display online help for Redis commands.  It can be used to show help for a specific command or for a category of commands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> HELP PFADD\n\nPFADD key element [element ...]\nsummary: Adds the specified elements to the specified HyperLogLog.\nsince: 2.8.9\n```\n\n----------------------------------------\n\nTITLE: Measure Redis Server Latency with redis-cli\nDESCRIPTION: This command uses `redis-cli` to measure the latency of a Redis server in milliseconds. The `-h` and `-p` flags specify the host and port of the Redis server, respectively. This is one way to measure Redis server response time.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nredis-cli --latency -h `host` -p `port`\n```\n\n----------------------------------------\n\nTITLE: Redis ZDIFF Example\nDESCRIPTION: This example demonstrates how to use the `ZDIFF` command in Redis to find the difference between two sorted sets. The first example shows the basic usage, while the second includes the `WITHSCORES` option to display the scores of the elements in the difference.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zdiff.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset1 3 \"three\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZDIFF 2 zset1 zset2\nZDIFF 2 zset1 zset2 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Get Consumer Information using XINFO CONSUMERS\nDESCRIPTION: This command retrieves information about the consumers within a specific consumer group in a Redis stream, including consumer name, number of pending messages, and idle time.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_34\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> XINFO CONSUMERS race:italy italy_riders\n1) 1) \"name\"\n   2) \"Alice\"\n   3) \"pending\"\n   4) (integer) 1\n   5) \"idle\"\n   6) (integer) 177546\n2) 1) \"name\"\n   2) \"Bob\"\n   3) \"pending\"\n   4) (integer) 0\n   5) \"idle\"\n   6) (integer) 424686\n3) 1) \"name\"\n   2) \"Lora\"\n   3) \"pending\"\n   4) (integer) 1\n   5) \"idle\"\n   6) (integer) 72241\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Redis User\nDESCRIPTION: This snippet shows how to authenticate a Redis user using the AUTH command, along with examples demonstrating permission restrictions. Attempting to GET a non-permitted key or SET a value results in a NOPERM error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n> AUTH alice p1pp0\nOK\n> GET foo\n(error) NOPERM this user has no permissions to access one of the keys used as arguments\n> GET cached:1234\n(nil)\n> SET cached:1234 zap\n(error) NOPERM this user has no permissions to run the 'set' command\n```\n\n----------------------------------------\n\nTITLE: Array Reply with Postponed Length\nDESCRIPTION: Replies to the client with an array, where the length is set later.  `REDISMODULE_POSTPONED_LEN` signals that the array length will be set later. `RedisModule_ReplySetArrayLength` sets the array length.  `ctx` is the RedisModuleCtx pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithArray(ctx, REDISMODULE_POSTPONED_LEN);\n```\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplySetArrayLength(ctx, number_of_items);\n```\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithArray(ctx, REDISMODULE_POSTPONED_LEN);\nnumber_of_factors = 0;\nwhile(still_factors) {\n    RedisModule_ReplyWithLongLong(ctx, some_factor);\n    number_of_factors++;\n}\nRedisModule_ReplySetArrayLength(ctx, number_of_factors);\n```\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithArray(ctx, REDISMODULE_POSTPONED_LEN);\n... generate 100 elements ...\nRedisModule_ReplyWithArray(ctx, REDISMODULE_POSTPONED_LEN);\n... generate 10 elements ...\nRedisModule_ReplySetArrayLength(ctx, 10);\nRedisModule_ReplySetArrayLength(ctx, 100);\n```\n\n----------------------------------------\n\nTITLE: Deleting an entry from a Stream in Redis\nDESCRIPTION: This snippet shows how to delete an entry from a Redis Stream using the `RedisModule_StreamDelete` function. It takes the key and the stream ID of the entry to be deleted as parameters.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_133\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamDelete(RedisModuleKey *key, RedisModuleStreamID *id);\n```\n\n----------------------------------------\n\nTITLE: Setting Redis key value using redis-cli\nDESCRIPTION: This command uses the redis-cli to set the value of a specific key in the Redis database to 0, which simulates an external interference with the consistency test.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -h 127.0.0.1 -p 7000 set key_217 0\n```\n\n----------------------------------------\n\nTITLE: Prevent Accessing Undefined Global Variables in Redis Lua\nDESCRIPTION: This snippet shows how attempting to access an undefined global variable in a Redis Lua script will raise an error. The sandbox prevents access to globals that aren't explicitly pre-defined by Redis. Accessing globals without prior local declaration results in an error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n-- The following will surely raise an error\nreturn an_undefined_global_variable\n```\n\n----------------------------------------\n\nTITLE: Lua to RESP2 conversion example\nDESCRIPTION: This example demonstrates how different Lua data types are converted to RESP2 when returned from a Lua script in Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_20\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return 10\" 0\n(integer) 10\n\nredis> EVAL \"return { 1, 2, { 3, 'Hello World!' } }\" 0\n1) (integer) 1\n2) (integer) 2\n3) 1) (integer) 3\n   1) \"Hello World!\"\n\nredis> EVAL \"return redis.call('get','foo')\" 0\n\"bar\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Redis Latency History with Redis CLI\nDESCRIPTION: This command uses the `--latency-history` option to track the latency of a Redis instance over time. It works similarly to `--latency`, but restarts the sampling session every 15 seconds by default.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --latency-history\n```\n\n----------------------------------------\n\nTITLE: CLUSTER SETSLOT IMPORTING Example\nDESCRIPTION: This subcommand sets a slot to an *importing* state on the destination node during resharding. The command prepares the destination node to import keys from the specified source node. It complements the MIGRATING subcommand by setting up the receiving end of the migration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT `<slot>` IMPORTING `<source-node-id>`\n```\n\n----------------------------------------\n\nTITLE: Blocking Pop Operation (BRPOP) on Redis List\nDESCRIPTION: This snippet demonstrates the use of the `BRPOP` command to block until an element is available in a Redis list. It waits for a specified timeout, and returns the key and value if an element is popped, or NULL if the timeout is reached. The `RPUSH` command adds elements to the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_10\n\nLANGUAGE: redis\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2\n(integer) 2\n> BRPOP bikes:repairs 1\n1) \"bikes:repairs\"\n2) \"bike:2\"\n> BRPOP bikes:repairs 1\n1) \"bikes:repairs\"\n2) \"bike:1\"\n> BRPOP bikes:repairs 1\n(nil)\n(2.01s)\n```\n\n----------------------------------------\n\nTITLE: Updating Hash Slot Table - Rule 1\nDESCRIPTION: This demonstrates the first rule for updating the hash slot table. If a hash slot is unassigned (NULL), and a known node claims it, the node's hash slot table is updated to associate the claimed hash slots with that node. This rule is crucial for the initial assignment of slots when a cluster is created.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n0 -> NULL\n1 -> A [3]\n2 -> A [3]\n...\n16383 -> NULL\n```\n\n----------------------------------------\n\nTITLE: Starting Redis server on Ubuntu\nDESCRIPTION: This command starts the Redis server on Ubuntu using the `service` command. It ensures that the Redis server is running in the background and listening for connections. It assumes that Redis has been successfully installed and configured.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-windows.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo service redis-server start\n```\n\n----------------------------------------\n\nTITLE: ZRANGEBYSCORE Example with Exclusive Interval - Redis CLI\nDESCRIPTION: This example demonstrates how to use ZRANGEBYSCORE with an exclusive interval, excluding the specified minimum score. It retrieves elements from the sorted set 'zset' with scores greater than 1 and less than or equal to 5.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebyscore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZRANGEBYSCORE zset (1 5\n```\n\n----------------------------------------\n\nTITLE: Listing Connected Clients - Redis CLIENT LIST\nDESCRIPTION: This snippet shows how to use the `CLIENT LIST` command in Redis to retrieve information about all connected clients. The output includes details such as client address, file descriptor, name, age, idle time, flags, and the last executed command. This is helpful for debugging and monitoring client connections.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/clients.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nclient list\n```\n\n----------------------------------------\n\nTITLE: SHA1 Hashing with redis.sha1hex in Lua\nDESCRIPTION: Calculates the SHA1 hexadecimal digest of a string using the `redis.sha1hex` function. This function is available in Redis scripts and functions since version 2.6.0. It takes a single string argument and returns its SHA1 hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_10\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return redis.sha1hex('')\" 0\n\"da39a3ee5e6b4b0d3255bfef95601890afd80709\"\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Set Memberships with SMISMEMBER - Redis\nDESCRIPTION: This snippet uses `SISMEMBER` to check the existence of multiple members in a set.  The result is an array of integers, with 1 indicating membership and 0 indicating non-membership for each item.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sets.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\n> SISMEMBER bikes:racing:france bike:1\n(integer) 1\n> SMISMEMBER bikes:racing:france bike:2 bike:3 bike:4\n1) (integer) 1\n2) (integer) 1\n3) (integer) 0\n```\n\n----------------------------------------\n\nTITLE: Disabling JVM DNS Cache - Java\nDESCRIPTION: This snippet disables the JVM's DNS cache. This is recommended when connecting to Redis with multiple endpoints, such as Redis Enterprise Active-Active, to ensure requests are properly load-balanced. It sets the `networkaddress.cache.ttl` and `networkaddress.cache.negative.ttl` security properties to \"0\", effectively disabling caching of both positive and negative DNS lookups.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/jedis.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\njava.security.Security.setProperty(\"networkaddress.cache.ttl\",\"0\");\njava.security.Security.setProperty(\"networkaddress.cache.negative.ttl\", \"0\");\n```\n\n----------------------------------------\n\nTITLE: Get Redis Process ID\nDESCRIPTION: This command retrieves the process ID (PID) of the Redis instance.  The PID is required to inspect the /proc filesystem for memory usage details.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli info | grep process_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from a Redis List (LRANGE)\nDESCRIPTION: This snippet demonstrates the `LRANGE` command in Redis, used to retrieve a range of elements from a list. It showcases how to access specific portions of a list using zero-based indexes and negative indexes for accessing elements from the end.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nLRANGE mylist 0 1 => c,b\nLRANGE mylist 0 -1 => c,b,a\n```\n\n----------------------------------------\n\nTITLE: Allocating Memory with RedisModule_Alloc (C)\nDESCRIPTION: This function allocates memory using Redis's internal memory management. Memory allocated with `RedisModule_Alloc` is tracked by Redis for memory usage information and eviction purposes. Avoid using standard `malloc()` and prefer this function.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid *RedisModule_Alloc(size_t bytes);\n```\n\n----------------------------------------\n\nTITLE: Getting Target Database ID from Optional Context (C)\nDESCRIPTION: Returns the ID of the target database currently being processed, retrieved from the RedisModuleKeyOptCtx. Requires a RedisModuleKeyOptCtx pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_106\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_GetToDbIdFromOptCtx(RedisModuleKeyOptCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Resetting Redis Dataset (FLUSHALL Equivalent) (C)\nDESCRIPTION: Performs an operation similar to FLUSHALL, clearing the current database. Optionally starts a new AOF file if enabled. If `restart_aof` is true, the calling command should not be propagated to the AOF. Setting `async` to true causes the database contents to be freed by a background thread.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_100\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_ResetDataset(int restart_aof, int async);\n```\n\n----------------------------------------\n\nTITLE: Unblocking a Client with RedisModule_UnblockClient (C)\nDESCRIPTION: This code snippet shows how to unblock a previously blocked client using the `RedisModule_UnblockClient` function. It takes the blocked client object and private data as arguments. The `reply_callback` function is executed just before unblocking.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_UnblockClient(RedisModuleBlockedClient *bc, void *privdata);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster - Lettuce\nDESCRIPTION: This Java code shows how to connect to a Redis Cluster using Lettuce.  It creates a `RedisClusterClient` using a `RedisURI` and establishes a connection to the cluster.  It retrieves the asynchronous commands interface for interacting with the cluster. Ensure the Redis Cluster is properly configured and accessible.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.cluster.api.StatefulRedisClusterConnection;\nimport io.lettuce.core.cluster.api.async.RedisAdvancedClusterAsyncCommands;\n\n// ...\n\nRedisURI redisUri = RedisURI.Builder.redis(\"localhost\").withPassword(\"authentication\").build();\n\nRedisClusterClient clusterClient = RedisClusterClient.create(redisUri);\nStatefulRedisClusterConnection<String, String> connection = clusterClient.connect();\nRedisAdvancedClusterAsyncCommands<String, String> commands = connection.async();\n\n// ...\n\nconnection.close();\nclusterClient.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Restoring Libraries in Redis\nDESCRIPTION: Restores libraries from a serialized payload using the FUNCTION RESTORE command. The payload is typically obtained from a previous FUNCTION DUMP operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-dump.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nFUNCTION RESTORE \"\\xf5\\xc3@X@]\\x1f#!lua name=mylib \\n redis.registe\\rr_function('my@\\x0b\\x02', @\\x06`\\x12\\nkeys, args) 6\\x03turn`\\x0c\\a[1] end)\\x0c\\x00\\xba\\x98\\xc2\\xa2\\x13\\x0e$\\a\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with TLS\nDESCRIPTION: This code illustrates how to establish a secure connection to Redis using TLS. It loads client and CA certificates, configures a TLS configuration, and then creates a Redis client with the TLS settings.  After connection it performs basic SET and GET commands. Requires `crypto/tls`, `crypto/x509`, `os`, `log`, and `github.com/redis/go-redis/v9`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Load client cert\ncert, err := tls.LoadX509KeyPair(\"redis_user.crt\", \"redis_user_private.key\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// Load CA cert\ncaCert, err := os.ReadFile(\"redis_ca.pem\")\nif err != nil {\n    log.Fatal(err)\n}\ncaCertPool := x509.NewCertPool()\ncaCertPool.AppendCertsFromPEM(caCert)\n\nclient := redis.NewClient(&redis.Options{\n    Addr:     \"my-redis.cloud.redislabs.com:6379\",\n    Username: \"default\", // use your Redis user. More info https://redis.io/docs/management/security/acl/\n    Password: \"secret\", // use your Redis password\n    TLSConfig: &tls.Config{\n        MinVersion:   tls.VersionTLS12,\n        Certificates: []tls.Certificate{cert},\n        RootCAs:      caCertPool,\n    },\n})\n\n//send SET command\nerr = client.Set(ctx, \"foo\", \"bar\", 0).Err()\nif err != nil {\n    panic(err)\n}\n\n//send GET command and print the value\nval, err := client.Get(ctx, \"foo\").Result()\nif err != nil {\n    panic(err)\n}\nfmt.Println(\"foo\", val)\n```\n\n----------------------------------------\n\nTITLE: Get Blocked Client Private Data (C)\nDESCRIPTION: This reply callback retrieves private data using `RedisModule_GetBlockedClientPrivateData` and sends it back to the client as a long long integer. The memory is not freed here, it is freed by the free_privdata callback.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint reply_func(RedisModuleCtx *ctx, RedisModuleString **argv,\n                   int argc)\n    {\n        long *mynumber = RedisModule_GetBlockedClientPrivateData(ctx);\n        /* IMPORTANT: don't free mynumber here, but in the\n         * free privdata callback. */\n        return RedisModule_ReplyWithLongLong(ctx,mynumber);\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Context Flags - Redis Module API (C)\nDESCRIPTION: Returns the current context's flags, which provide information on the current request context and the Redis instance. The flags indicate if the command is running in a Lua script or transaction, and details about replication and persistence. Available since Redis 4.0.3.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_85\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_GetContextFlags(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Adding Normalized Term with Original Term and Frequency\nDESCRIPTION: This snippet shows how to add a normalized search term, its frequency, and the original term to a Redis sorted set.  The format `normalized:frequency:original` is used to store all relevant data in a single string. This allows presenting the original term to the user while using the normalized term for indexing and searching.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_12\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 banana:273:Banana\n```\n\n----------------------------------------\n\nTITLE: Corrupted AOF Error Message\nDESCRIPTION: This code snippet demonstrates the error message Redis displays when it detects corruption within the AOF file during server startup.  The message advises the user to create a backup of the AOF file and utilize the `redis-check-aof` utility to diagnose and potentially repair the file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* Reading the remaining AOF tail...\n# Bad file format reading the append only file: make a backup of your AOF file, then use ./redis-check-aof --fix <filename>\n```\n\n----------------------------------------\n\nTITLE: Grep for Swap and Size of Memory Maps\nDESCRIPTION: This command searches the smaps file for lines containing 'Swap:' and 'Size:', displaying both the size of the memory map and the amount of swap used by each map. This provides context for the swap usage.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cat smaps | egrep '^(Swap|Size)'\n```\n\n----------------------------------------\n\nTITLE: Merging HyperLogLogs in Redis CLI\nDESCRIPTION: This example demonstrates how to merge two HyperLogLog structures (hll1 and hll2) into a new HyperLogLog structure (hll3) using the PFMERGE command.  It first adds elements to hll1 and hll2, then merges them, and finally counts the cardinality of the merged hll3.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pfmerge.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nPFADD hll1 foo bar zap a\nPFADD hll2 a b c foo\nPFMERGE hll3 hll1 hll2\nPFCOUNT hll3\n```\n\n----------------------------------------\n\nTITLE: Publish Message - Redis Module API (C)\nDESCRIPTION: Publishes a message to subscribers of a specific channel, similar to the `PUBLISH` command. Requires a RedisModuleCtx, a RedisModuleString for the channel, and a RedisModuleString for the message. Available since Redis 6.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_82\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_PublishMessage(RedisModuleCtx *ctx,\n                                   RedisModuleString *channel,\n                                   RedisModuleString *message);\n```\n\n----------------------------------------\n\nTITLE: Using ACL GENPASS command in Redis\nDESCRIPTION: Demonstrates the usage of the `ACL GENPASS` command to generate random hexadecimal strings of varying lengths in Redis.  The command generates a 256-bit string by default, but the length can be specified in bits (rounded to the nearest multiple of 4). The example shows how to generate 256-bit (default), 32-bit, and 5-bit strings.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-genpass.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> ACL GENPASS\n\"dd721260bfe1b3d9601e7fbab36de6d04e2e67b0ef1c53de59d45950db0dd3cc\"\n\n> ACL GENPASS 32\n\"355ef3dd\"\n\n> ACL GENPASS 5\n\"90\"\n```\n\n----------------------------------------\n\nTITLE: ZMPOP Usage Examples in Redis CLI\nDESCRIPTION: Demonstrates the usage of the ZMPOP command in Redis, including popping elements with the minimum and maximum scores, specifying the number of elements to pop using the COUNT option, and handling multiple keys. It also shows how to verify the state of the sorted sets after the ZMPOP operation using ZRANGE and EXISTS.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zmpop.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZMPOP 1 notsuchkey MIN\nZADD myzset 1 \"one\" 2 \"two\" 3 \"three\"\nZMPOP 1 myzset MIN\nZRANGE myzset 0 -1 WITHSCORES\nZMPOP 1 myzset MAX COUNT 10\nZADD myzset2 4 \"four\" 5 \"five\" 6 \"six\"\nZMPOP 2 myzset myzset2 MIN COUNT 10\nZRANGE myzset 0 -1 WITHSCORES\nZMPOP 2 myzset myzset2 MAX COUNT 10\nZRANGE myzset2 0 -1 WITHSCORES\nEXISTS myzset myzset2\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Values with GETSET - Redis CLI\nDESCRIPTION: This snippet illustrates the basic usage of the `GETSET` command. First, `SET` assigns the string \"Hello\" to the key `mykey`. Then, `GETSET` atomically replaces the value with \"World\" and returns the previous value (\"Hello\"). Finally, `GET` retrieves the updated value (\"World\").\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/getset.md#_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\nSET mykey \"Hello\"\nGETSET mykey \"World\"\nGET mykey\n```\n\n----------------------------------------\n\nTITLE: Getting the Length of the LCS in Redis\nDESCRIPTION: This example shows how to retrieve only the length of the longest common subsequence using the `LEN` option with the LCS command.  This is useful when you only need a numerical measure of similarity and not the actual subsequence itself.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lcs.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> LCS key1 key2 LEN\n(integer) 6\n```\n\n----------------------------------------\n\nTITLE: Freeing a Redis Module String (C)\nDESCRIPTION: This snippet demonstrates how to free a `RedisModuleString` object using `RedisModule_FreeString`. It's crucial to free strings created with `RedisModule_CreateString` to avoid memory leaks. Strings provided via the argument vector `argv` do not need to be freed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_FreeString(RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Macros - C\nDESCRIPTION: This snippet illustrates how to use macros to replace libc memory allocation functions (malloc, realloc, free, strdup) with their Redis Module API equivalents (RedisModule_Alloc, RedisModule_Realloc, RedisModule_Free, RedisModule_Strdup). This can simplify code conversion but requires careful attention to ensure all calls are correctly replaced.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n#define malloc RedisModule_Alloc\n#define realloc RedisModule_Realloc\n#define free RedisModule_Free\n#define strdup RedisModule_Strdup\n```\n\n----------------------------------------\n\nTITLE: Publishing to Pub/Sub Channels with Redis CLI\nDESCRIPTION: This command publishes a message to a Redis Pub/Sub channel.  Other clients subscribed to the channel will receive the message. This is an example of how to send messages to channels being listened to by the client in the prior example.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nredis-cli PUBLISH mychannel mymessage\n```\n\n----------------------------------------\n\nTITLE: Loading String Buffer from RDB File (RedisModule_LoadStringBuffer)\nDESCRIPTION: This function loads a string buffer from the Redis RDB file, similar to `RedisModule_LoadString()` but returns a heap-allocated string. The returned string was allocated with `RedisModule_Alloc()`, and can be resized or freed with `RedisModule_Realloc()` or `RedisModule_Free()`. The size of the string is stored at '*lenptr' if not NULL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_171\n\nLANGUAGE: c\nCODE:\n```\nchar *RedisModule_LoadStringBuffer(RedisModuleIO *io, size_t *lenptr);\n```\n\n----------------------------------------\n\nTITLE: Registering a new data type using RedisModule_CreateDataType in C\nDESCRIPTION: This code snippet demonstrates how to register a new native data type within a Redis module using the `RedisModule_CreateDataType` function. It initializes a `RedisModuleType` struct with callback functions for RDB loading, RDB saving, AOF rewriting, and freeing memory. The `RedisModule_CreateDataType` function is then called to register the type, storing the returned reference in a global variable.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic RedisModuleType *MyType;\n#define MYTYPE_ENCODING_VERSION 0\n\nint RedisModule_OnLoad(RedisModuleCtx *ctx) {\n\tRedisModuleTypeMethods tm = {\n\t    .version = REDISMODULE_TYPE_METHOD_VERSION,\n\t    .rdb_load = MyTypeRDBLoad,\n\t    .rdb_save = MyTypeRDBSave,\n\t    .aof_rewrite = MyTypeAOFRewrite,\n\t    .free = MyTypeFree\n\t};\n\n        MyType = RedisModule_CreateDataType(ctx, \"MyType-AZ\",\n\t\tMYTYPE_ENCODING_VERSION, &tm);\n        if (MyType == NULL) return REDISMODULE_ERR;\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Sentinel Master Agreement\nDESCRIPTION: This snippet shows the command `SENTINEL MASTER mastername` used to check if all Sentinels agree on the total number of Sentinels monitoring the master.  This is useful when adding or removing Sentinels from a deployment.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_14\n\nLANGUAGE: Redis\nCODE:\n```\nSENTINEL MASTER mastername\n```\n\n----------------------------------------\n\nTITLE: Integer Encoding in RESP\nDESCRIPTION: This snippet illustrates how integers are encoded in RESP. The encoding starts with a colon (`:`) followed by an optional sign (`+` or `-`), the integer value, and a CRLF terminator (`\\r\\n`).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n:[<+|->]<value>\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Sentinel Configuration Directives for IP/Port Announcement\nDESCRIPTION: These Sentinel configuration directives are used to force Sentinel to announce a specific IP address and port, especially useful in Docker or NAT setups where ports are remapped. This ensures correct communication between Sentinel instances.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nsentinel announce-ip <ip>\nsentinel announce-port <port>\n```\n\n----------------------------------------\n\nTITLE: Get Command Keys With Flags - C\nDESCRIPTION: Parses command arguments to identify key name argument indexes, offering an efficient alternative to `COMMAND GETKEYS`. It can optionally populate an array with `REDISMODULE_CMD_KEY_` flags corresponding to each key index. The caller must free the returned array using `RedisModule_Free`. Errors are indicated by setting `errno` to `ENOENT` (command does not exist) or `EINVAL` (invalid arity).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_300\n\nLANGUAGE: c\nCODE:\n```\nint *RedisModule_GetCommandKeysWithFlags(RedisModuleCtx *ctx,\n                                             RedisModuleString **argv,\n                                             int argc,\n                                             int *num_keys,\n                                             int **out_flags);\n```\n\n----------------------------------------\n\nTITLE: Adding ACL Log Entry By User Name - RedisModule_ACLAddLogEntryByUserName\nDESCRIPTION: Adds a new entry to the ACL log using a username provided as a `RedisModuleString`. This allows logging actions associated with a specific user. Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` on error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_234\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ACLAddLogEntryByUserName(RedisModuleCtx *ctx,\n                                             RedisModuleString *username,\n                                             RedisModuleString *object,\n                                             RedisModuleACLLogEntryReason reason);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Entry from Sorted Set by Lexicographical Range\nDESCRIPTION: This snippet retrieves a single entry from a Redis sorted set based on its lexicographical value.  It is used to check if a search term already exists in the index before incrementing its frequency.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_9\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex \"[banana:\" + BYLEX LIMIT 0 1\n1) \"banana:1\"\n```\n\n----------------------------------------\n\nTITLE: CLUSTER SETSLOT NODE Example\nDESCRIPTION: This subcommand associates the hash slot with the specified node. The command's behavior varies depending on the slot's state. If the slot was in the importing state, the importing state is cleared and a new config epoch is generated if the node's config epoch is not the greatest in the cluster, ensuring new hash slot ownership.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT `<slot>` NODE `<node-id>`\n```\n\n----------------------------------------\n\nTITLE: Example of Bulk String Encoding\nDESCRIPTION: This snippet shows the string \"hello\" encoded as a bulk string in RESP format. The length of the string is 5, followed by the string itself and CRLF terminators.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$5\\r\\nhello\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Loading Double from RDB File (RedisModule_LoadDouble)\nDESCRIPTION: This function loads a double value from the Redis RDB file, previously saved using `RedisModule_SaveDouble()`. It is intended to be called within the `rdb_load` method of a module data type.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_173\n\nLANGUAGE: c\nCODE:\n```\ndouble RedisModule_LoadDouble(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sorted Set Score Range Iterator in Redis Module (C)\nDESCRIPTION: This function sets up a sorted set iterator to find the first element within a specified score range. It takes a `RedisModuleKey` pointer, min and max scores, and flags for exclusive range bounds. It returns `REDISMODULE_OK` on success, or `REDISMODULE_ERR` if the key is not a sorted set or is empty.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_122\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetFirstInScoreRange(RedisModuleKey *key,\n                                          double min,\n                                          double max,\n                                          int minex,\n                                          int maxex);\n```\n\n----------------------------------------\n\nTITLE: Publish Keyevent Notification Example\nDESCRIPTION: This example demonstrates the publication of a key-event notification when a DEL operation targets the key named 'mykey' in database '0'. It shows the `PUBLISH` command with the `__keyevent@0__:del` channel and the `mykey` message.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace-notifications.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPUBLISH __keyevent@0__:del mykey\n```\n\n----------------------------------------\n\nTITLE: Getting Value Length of Redis Key (C)\nDESCRIPTION: Retrieves the length of the value associated with a given Redis key. For strings, it returns the string length. For other types, it returns the number of elements. Returns 0 if the key pointer is NULL or the key is empty. Requires a RedisModuleKey pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_93\n\nLANGUAGE: C\nCODE:\n```\nsize_t RedisModule_ValueLength(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Debugging with redis.debug in Lua\nDESCRIPTION: Prints its argument in the Redis Lua debugger console.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: RMAPI_FUNC_SUPPORTED Macro\nDESCRIPTION: Demonstrates the use of the `RMAPI_FUNC_SUPPORTED` macro, a convenience macro to check API function support in newer versions of `redismodule.h`. This macro simplifies checking for API function availability before use, ensuring compatibility across different Redis versions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nRMAPI_FUNC_SUPPORTED(funcname)\n```\n\n----------------------------------------\n\nTITLE: Counting Keys in Redis Cluster Hash Slot\nDESCRIPTION: This example demonstrates how to use the `CLUSTER COUNTKEYSINSLOT` command to count keys in a Redis Cluster hash slot. The command returns the number of keys in the specified hash slot.  It only queries the local dataset.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-countkeysinslot.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER COUNTKEYSINSLOT 7000\n(integer) 50341\n```\n\n----------------------------------------\n\nTITLE: Starting a debugging session with redis-cli\nDESCRIPTION: This snippet shows how to start a debugging session with the Redis Lua debugger using the `redis-cli` command-line tool. The `--ldb` option enables the debugger, and `--eval` specifies the Lua script to be debugged. The path to the script file is a required parameter.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./redis-cli --ldb --eval /tmp/script.lua\n```\n\n----------------------------------------\n\nTITLE: Select Database - Redis Module API (C)\nDESCRIPTION: Changes the currently selected database. Returns an error if the ID is out of range. Note that the client retains the selected database even after the module command returns. Available since Redis 4.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_87\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_SelectDb(RedisModuleCtx *ctx, int newid);\n```\n\n----------------------------------------\n\nTITLE: Exposing NotifyKeyspaceEvent to Modules (C)\nDESCRIPTION: Exposes the internal notifyKeyspaceEvent function to Redis modules, allowing modules to trigger keyspace events programmatically.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_217\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_NotifyKeyspaceEvent(RedisModuleCtx *ctx,\n                                        int type,\n                                        const char *event,\n                                        RedisModuleString *key);\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred Map Length - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to set the length of a map when using `RedisModule_ReplyWithMap`.  `len` should exactly half of the number of `ReplyWith*` functions called in the context of the map.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_64\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ReplySetMapLength(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sorted Set Last Element Score Range Iterator in Redis Module (C)\nDESCRIPTION: This function is similar to `RedisModule_ZsetFirstInScoreRange` but sets up the iterator to find the last element within the specified score range. It takes the same parameters and returns the same values. It seeks the last element instead of the first.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_123\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetLastInScoreRange(RedisModuleKey *key,\n                                         double min,\n                                         double max,\n                                         int minex,\n                                         int maxex);\n```\n\n----------------------------------------\n\nTITLE: Adding Key-Value Pair to Lexicographical Index\nDESCRIPTION: This snippet demonstrates how to use a Redis sorted set with lexicographical indexing to implement a simple key-value store. The key and value are concatenated using a separator (colon in this case).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_13\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 mykey:myvalue\n```\n\n----------------------------------------\n\nTITLE: Freeing Memory with RedisModule_Free (C)\nDESCRIPTION: This function frees memory allocated with `RedisModule_Alloc()` or `RedisModule_Realloc()`.  It's the counterpart to the allocation functions and must be used to prevent memory leaks. Never free memory allocated with `malloc()` using this function.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_Free(void *ptr);\n```\n\n----------------------------------------\n\nTITLE: Adding Lettuce Dependency - Gradle\nDESCRIPTION: This Gradle snippet shows how to include Lettuce as a dependency in a Gradle project. It specifies the group ID, artifact ID, and version of the Lettuce core library. Ensure to check Maven Central for the latest version.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/java/lettuce.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n    compile 'io.lettuce:lettuce-core:6.3.2.RELEASE'\n}\n```\n\n----------------------------------------\n\nTITLE: RENAMENX Example Usage\nDESCRIPTION: This example demonstrates the usage of the RENAMENX command to rename a key in Redis. It first sets two keys, 'mykey' and 'myotherkey', then attempts to rename 'mykey' to 'myotherkey' using RENAMENX. Finally, it retrieves the value of 'myotherkey' to show that it remains unchanged, because RENAMENX only renames if the target key doesn't exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/renamenx.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nSET myotherkey \"World\"\nRENAMENX mykey myotherkey\nGET myotherkey\n```\n\n----------------------------------------\n\nTITLE: Error when Assigning Already Busy Slots in Redis Cluster\nDESCRIPTION: This example shows the error that occurs when trying to assign hash slots that are already assigned to a node. The command fails and returns an error message indicating that the slot is already busy. This prevents overwriting existing slot assignments and potential data inconsistencies.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-addslots.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER ADDSLOTS 1 2 3\nERR Slot 1 is already busy\n```\n\n----------------------------------------\n\nTITLE: ZRANGE Reversed Score Range Example\nDESCRIPTION: Demonstrates the usage of ZRANGE with the REV and BYSCORE options, retrieving elements with scores less than 10 and greater than 5. In this case, `<start>` must be greater than or equal to `<stop>`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_6\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZRANGE zset 10 5 REV BYSCORE\n```\n\n----------------------------------------\n\nTITLE: Prevent Global Variable Declaration in Redis Lua\nDESCRIPTION: This code snippet demonstrates an attempt to declare a global variable in a Redis Lua script, which is prohibited due to the sandboxed environment. It shows the error that Redis will return when such an attempt is made. Global variables are blocked to prevent scripts from maintaining runtime context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nmy_global_variable = 'some value'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Hex Characters in C\nDESCRIPTION: Generates a string of random hex characters [0-9a-f].\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_262\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_GetRandomHexChars(char *dst, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Listing Loaded Libraries in Redis\nDESCRIPTION: Lists the currently loaded libraries in Redis using the FUNCTION LIST command, displaying information about each library including its name, engine, and functions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-dump.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\nFUNCTION LIST\n```\n\n----------------------------------------\n\nTITLE: Getting Server Info Field as unsigned long long in C\nDESCRIPTION: Retrieves a numerical field from server information data as an unsigned long long. If the field is not found or is invalid, it returns 0 and sets `out_err` to `REDISMODULE_ERR` if provided.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_259\n\nLANGUAGE: C\nCODE:\n```\nunsigned long long RedisModule_ServerInfoGetFieldUnsigned(RedisModuleServerInfoData *data,\n                                                              const char* field,\n                                                              int *out_err);\n```\n\n----------------------------------------\n\nTITLE: JSON Decoding Example in Redis Lua\nDESCRIPTION: Demonstrates how to use the `cjson.decode()` function within a Redis Lua script to decode a JSON-encoded string into a Lua table. The input JSON string is '{\"foo\":\"bar\"}'. The script then accesses the value associated with the key 'foo' in the decoded Lua table and returns that value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_26\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return cjson.decode(ARGV[1])['foo']\" 0 '{\"foo\":\"bar\"}'\n\"bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LFU parameters in redis.conf\nDESCRIPTION: This snippet shows how to configure the `lfu-log-factor` and `lfu-decay-time` parameters in the `redis.conf` file. `lfu-log-factor` controls how many hits are needed to saturate the frequency counter, while `lfu-decay-time` determines the amount of minutes a counter should be decayed. The special value of `0` for `lfu-decay-time` means the counter will never decay.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/eviction/index.md#_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nlfu-log-factor 10\nlfu-decay-time 1\n```\n\n----------------------------------------\n\nTITLE: Logging Errors from RDB/AOF Serialization Callbacks\nDESCRIPTION: Logs errors encountered during RDB/AOF serialization callbacks when a critical error prevents data loading or saving. The `io` parameter is used for IO operations during serialization.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_186\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_LogIOError(RedisModuleIO *io,\n                                const char *levelstr,\n                                const char *fmt,\n                                ...);\n```\n\n----------------------------------------\n\nTITLE: Redis ZREMRANGEBYLEX Example\nDESCRIPTION: This example demonstrates how to use the ZREMRANGEBYLEX command to remove elements from a sorted set based on a lexicographical range. It first adds elements with the same score to force lexicographical ordering, then uses ZREMRANGEBYLEX to remove elements between 'alpha' and 'omega'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zremrangebylex.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 0 aaaa 0 b 0 c 0 d 0 e\nZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha\nZRANGE myzset 0 -1\nZREMRANGEBYLEX myzset [alpha [omega\nZRANGE myzset 0 -1\n```\n\n----------------------------------------\n\nTITLE: Get Command Keys - C\nDESCRIPTION: Retrieves the key name arguments' indexes for a specified command by parsing its arguments.  This function is identical to `RedisModule_GetCommandKeysWithFlags` when flags are not required. The caller must explicitly free the returned array using `RedisModule_Free`. Returns NULL on error or if no keys are present.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_301\n\nLANGUAGE: c\nCODE:\n```\nint *RedisModule_GetCommandKeys(RedisModuleCtx *ctx,\n                                    RedisModuleString **argv,\n                                    int argc,\n                                    int *num_keys);\n```\n\n----------------------------------------\n\nTITLE: Redis disconnection and reconnection handling\nDESCRIPTION: This snippet demonstrates how `redis-cli` handles disconnections and attempts to reconnect automatically. If a connection is refused, the CLI enters a disconnected state. It transparently attempts reconnection with each new command. The CLI also automatically re-selects the last database number selected after reconnection.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> CONNECT 127.0.0.1 9999\nCould not connect to Redis at 127.0.0.1:9999: Connection refused\nnot connected> PING\nCould not connect to Redis at 127.0.0.1:9999: Connection refused\nnot connected> PING\nCould not connect to Redis at 127.0.0.1:9999: Connection refused\n```\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> INFO SERVER\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nnot connected> PING\nPONG\n127.0.0.1:6379> \n(now we are connected again)\n```\n\n----------------------------------------\n\nTITLE: Defining user ACL in redis.conf - Redis Configuration\nDESCRIPTION: This snippet shows an example of defining a user with specific ACL rules directly within the redis.conf file. It includes the username, command permissions, key permissions, and password hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_21\n\nLANGUAGE: Redis Configuration\nCODE:\n```\nuser worker +@list +@connection ~jobs:* on >ffa9203c493aa99\n```\n\n----------------------------------------\n\nTITLE: ZRANGE Reversed Index Range Example\nDESCRIPTION: Shows how ZRANGE can use the REV option with an index range, where the `<start>` index needs to be less than or equal to the `<stop>` index. This example retrieves elements between indexes 5 and 10 in reversed order.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_5\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZRANGE zset 5 10 REV\n```\n\n----------------------------------------\n\nTITLE: Bind Redis to a Specific Interface\nDESCRIPTION: This code snippet demonstrates how to bind Redis to a specific network interface (loopback interface in this case) by configuring the `bind` directive in the `redis.conf` file. This limits network access to Redis, enhancing security. The value `127.0.0.1` represents the IPv4 loopback address.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/_index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbind 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Cluster Node Information Using redis-cli\nDESCRIPTION: This snippet demonstrates how to use the `redis-cli cluster nodes` command to retrieve cluster node information from a Redis Cluster. The command displays the state of the cluster and the information about each node as seen from the queried node. The output includes node ID, address:port, flags, last ping sent, last pong received, configuration epoch, link state, and served slots.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ redis-cli cluster nodes\nd1861060fe6a534d42d8a19aeb36600e18785e04 127.0.0.1:6379 myself - 0 1318428930 1 connected 0-1364\n3886e65cc906bfd9b1f7e7bde468726a052d1dae 127.0.0.1:6380 master - 1318428930 1318428931 2 connected 1365-2729\nd289c575dcbc4bdd2931585fd4339089e461a27d 127.0.0.1:6381 master - 1318428931 1318428931 3 connected 2730-4095\n```\n\n----------------------------------------\n\nTITLE: Deleting Items from Redis Stream using XDEL\nDESCRIPTION: This code snippet demonstrates how to use the `XDEL` command in Redis to remove specific items from a stream using their IDs. The example shows a stream named `race:italy` and the removal of the item with ID `1692633208557-0`. It first queries the stream to show the available entries using `XRANGE`, then removes one with `XDEL`, and then queries the stream again to verify the removal.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n> XRANGE race:italy - + COUNT 2\n1) 1) \"1692633198206-0\"\n   2) 1) \"rider\"\n      2) \"Wood\"\n2) 1) \"1692633208557-0\"\n   2) 1) \"rider\"\n      2) \"Henshaw\"\n> XDEL race:italy 1692633208557-0\n(integer) 1\n> XRANGE race:italy - + COUNT 2\n1) 1) \"1692633198206-0\"\n   2) 1) \"rider\"\n      2) \"Wood\"\n```\n\n----------------------------------------\n\nTITLE: Saving Long Double in RDB File (RedisModule_SaveLongDouble)\nDESCRIPTION: This function saves a long double value to the Redis RDB file. It is intended to be called within the `rdb_save` method of a module data type. The long double can be a valid number, a NaN, or infinity. It can be loaded back using `RedisModule_LoadLongDouble()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_176\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveLongDouble(RedisModuleIO *io, long double value);\n```\n\n----------------------------------------\n\nTITLE: Bulk String Reply (RedisModuleString)\nDESCRIPTION: Replies to the client with a bulk string using a RedisModuleString object.  The `ctx` parameter is the RedisModuleCtx pointer, and `str` is the RedisModuleString object.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithString(RedisModuleCtx *ctx, RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String from long double (C)\nDESCRIPTION: This code snippet illustrates creating a Redis module string object from a long double floating-point number. The returned string object must be released by calling RedisModule_FreeString or enabling automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringFromLongDouble(RedisModuleCtx *ctx,\n                                                              long double ld,\n                                                              int humanfriendly);\n```\n\n----------------------------------------\n\nTITLE: Specifying Key Position with Flags using RedisModule_KeyAtPosWithFlags (C)\nDESCRIPTION: This function is used within a module command (declared with \"getkeys-api\") to report the position of a key along with its flags (e.g., read-only, read-write). It's called when the command is being invoked to determine key positions. Flags are defined via `REDISMODULE_CMD_KEY_*` constants.  This is intended as a fallback when key specs can't fully describe key positions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_KeyAtPosWithFlags(RedisModuleCtx *ctx, int pos, int flags);\n```\n\n----------------------------------------\n\nTITLE: Getting Boolean from Call Reply - C\nDESCRIPTION: Retrieves the boolean value from a boolean-type RedisModuleCallReply.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_150\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_CallReplyBool(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Adding Initial Search Term to Redis Sorted Set (Lexicographical)\nDESCRIPTION: This code snippet demonstrates how to add a search term to a Redis sorted set using the ZADD command. The score is set to 0, indicating lexicographical ordering. This is the initial step in building a simple search index.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 banana\n```\n\n----------------------------------------\n\nTITLE: Removing Hash Slot Associations in Redis Cluster\nDESCRIPTION: The `CLUSTER DELSLOTS` command removes the association between a Redis Cluster node and the specified hash slots. In this example, the command removes the association for slots 5000 and 5001 from the node receiving the command. The command returns OK if successful.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-delslots.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER DELSLOTS 5000 5001\nOK\n```\n\n----------------------------------------\n\nTITLE: Registering a New Command in Redis Module (C)\nDESCRIPTION: This code snippet demonstrates how to register a new command in Redis using `RedisModule_CreateCommand`. It explains the parameters for defining the command name, function pointer (`cmdfunc`), flags (`strflags`), and key positions (`firstkey`, `lastkey`, `keystep`).  The flags define the command's behavior, like whether it writes data, is read-only, or requires specific permissions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_CreateCommand(RedisModuleCtx *ctx,\n                              const char *name,\n                              RedisModuleCmdFunc cmdfunc,\n                              const char *strflags,\n                              int firstkey,\n                              int lastkey,\n                              int keystep);\n```\n\n----------------------------------------\n\nTITLE: Starting Blocked Client Time Measurement\nDESCRIPTION: Marks the start time for measuring the execution time of a blocked client. Used with `RedisModule_BlockedClientMeasureTimeEnd` to calculate elapsed time. Returns `REDISMODULE_OK`. Available since Redis 6.2.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_BlockedClientMeasureTimeStart(RedisModuleBlockedClient *bc);\n```\n\n----------------------------------------\n\nTITLE: Automated Cluster Resharding with redis-cli\nDESCRIPTION: This snippet demonstrates how to perform an automated cluster resharding using `redis-cli`. It uses command-line options to specify the source node (`--cluster-from`), the destination node (`--cluster-to`), the number of slots to move (`--cluster-slots`), and automatically answers \"yes\" to all prompts (`--cluster-yes`). This allows the resharding process to run in a non-interactive mode.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster reshard <host>:<port> --cluster-from <node-id> --cluster-to <node-id> --cluster-slots <number of slots> --cluster-yes\n```\n\n----------------------------------------\n\nTITLE: RedisModuleType callback function typedefs in C\nDESCRIPTION: These typedefs define the function signatures for the callbacks used when registering a new native type with Redis.  These functions handle RDB loading, saving, AOF rewriting, memory usage, digest calculation, and freeing memory. The `value` parameter represents a pointer to the data structure implemented by the module. RedisModuleIO provides an API for reading and writing to RDB and AOF files.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef void *(*RedisModuleTypeLoadFunc)(RedisModuleIO *rdb, int encver);\ntypedef void (*RedisModuleTypeSaveFunc)(RedisModuleIO *rdb, void *value);\ntypedef void (*RedisModuleTypeRewriteFunc)(RedisModuleIO *aof, RedisModuleString *key, void *value);\ntypedef size_t (*RedisModuleTypeMemUsageFunc)(void *value);\ntypedef void (*RedisModuleTypeDigestFunc)(RedisModuleDigest *digest, void *value);\ntypedef void (*RedisModuleTypeFreeFunc)(void *value);\n```\n\n----------------------------------------\n\nTITLE: Getting Blocked Client Private Data - RedisModule_GetBlockedClientPrivateData\nDESCRIPTION: Retrieves the private data set by `RedisModule_UnblockClient`. This allows accessing data passed during the unblocking of a client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_203\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_GetBlockedClientPrivateData(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Initializing Sorted Set Last Element Lexicographical Range Iterator in Redis Module (C)\nDESCRIPTION: This function is similar to `RedisModule_ZsetFirstInLexRange` but sets up the iterator to find the last element within the specified lexicographical range. It takes the same parameters and returns the same values.  It starts the iteration from the last element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_125\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetLastInLexRange(RedisModuleKey *key,\n                                       RedisModuleString *min,\n                                       RedisModuleString *max);\n```\n\n----------------------------------------\n\nTITLE: PEXPIRE Command Examples in Redis CLI\nDESCRIPTION: This snippet demonstrates the usage of the `PEXPIRE` command in Redis for setting the expiration time of a key in milliseconds. It includes examples with different options like `NX` (set only if no expiry), `XX` (set only if expiry exists), and checking the remaining time to live using `TTL` and `PTTL`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pexpire.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nSET mykey \"Hello\"\nPEXPIRE mykey 1500\nTTL mykey\nPTTL mykey\nPEXPIRE mykey 1000 XX\nTTL mykey\nPEXPIRE mykey 1000 NX\nTTL mykey\n```\n\n----------------------------------------\n\nTITLE: Dumping Loaded Libraries in Redis\nDESCRIPTION: Serializes the currently loaded libraries in Redis using the FUNCTION DUMP command. The output is a binary payload that can be used to restore the libraries later.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-dump.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nFUNCTION DUMP\n```\n\n----------------------------------------\n\nTITLE: Executing Lua Scripts with Parameterization\nDESCRIPTION: This example shows how to parametrize Lua scripts in Redis to avoid generating subtle variations of the same scripts. The script returns the first element of the ARGV array. The second argument '0' specifies the number of key arguments.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return ARGV[1]\" 0 Hello\n\"Hello\"\nredis> EVAL \"return ARGV[1]\" 0 Parameterization!\n\"Parameterization!\"\n```\n\n----------------------------------------\n\nTITLE: Performing Intersection between Redis Sets (SINTER)\nDESCRIPTION: This snippet demonstrates the `SINTER` command, which calculates the intersection between two or more Redis Sets, returning only the elements present in all Sets.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nSADD mynewset b\nSADD mynewset foo\nSADD mynewset hello\nSINTER myset mynewset => foo,b\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Permissions - RedisModule_ACLCheckChannelPermissions\nDESCRIPTION: Checks if a user can access a pubsub channel according to their ACLs. The `flags` parameter represents the access flags (see `RedisModule_ChannelAtPosWithFlags`). Returns `REDISMODULE_OK` on success or `REDISMODULE_ERR` on failure, setting errno to `EINVAL` if the flags are invalid or `EACCES` if the user doesn't have permission.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_232\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ACLCheckChannelPermissions(RedisModuleUser *user,\n                                               RedisModuleString *ch,\n                                               int flags);\n```\n\n----------------------------------------\n\nTITLE: Redis Shutdown using CONFIG and SHUTDOWN (pre-7.0)\nDESCRIPTION: This snippet shows how to shut down a Redis instance without AOF enabled in versions before 7.0, where NOW and FORCE flags are not available.  The first command disables AOF, and the second command shuts down the server without saving data.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/shutdown.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\nCONFIG appendonly no\n```\n\nLANGUAGE: Redis\nCODE:\n```\nSHUTDOWN NOSAVE\n```\n\n----------------------------------------\n\nTITLE: Redis SORT_RO Usage Example\nDESCRIPTION: This example demonstrates how to use the SORT_RO command to sort a list named `mylist` based on the weight field of objects and retrieve data from another field of the sorted objects.  It showcases the BY and GET options for sorting and retrieving related data.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort_ro.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSORT_RO mylist BY weight_*->fieldname GET object_*->fieldname\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Module Dictionary\nDESCRIPTION: This function creates a new dictionary for use within a Redis module. The `ctx` argument determines how the dictionary's memory is managed.  A NULL context should be used if the dictionary needs to persist beyond the callback scope, otherwise the current callback context should be passed to leverage automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_240\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleDict *RedisModule_CreateDict(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Moving Sorted Set Iterator to Previous Element in Redis Module (C)\nDESCRIPTION: This function moves a sorted set iterator to the previous element. It takes a `RedisModuleKey` as input. It returns 1 if there was a previous element, or 0 if the iterator is already at the first element or the range does not include any items.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_128\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetRangePrev(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Map Example in RESP\nDESCRIPTION: This example shows how a JSON object is encoded as a map in RESP. It includes the number of entries, the keys, and the values, each as a separate RESP type.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n%2\\r\\n\n+first\\r\\n\n:1\\r\\n\n+second\\r\\n\n:2\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Cluster health\nDESCRIPTION: This command verifies the health and consistency of the Redis Cluster after the migration. It checks for any issues, such as incorrect key assignments or node failures, ensuring that the cluster is operating correctly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nredis-cli --cluster check\n```\n\n----------------------------------------\n\nTITLE: Double Array RDB Load Method - C\nDESCRIPTION: This snippet demonstrates how to load a double array native type from the RDB file. It reads the number of elements and each double value using `RedisModule_LoadUnsigned` and `RedisModule_LoadDouble`.  Error handling is minimal; the function returns `NULL` if the data appears invalid.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nvoid *DoubleArrayRDBLoad(RedisModuleIO *io, int encver) {\n    if (encver != DOUBLE_ARRAY_ENC_VER) {\n        /* We should actually log an error here, or try to implement\n           the ability to load older versions of our data structure. */\n        return NULL;\n    }\n\n    struct double_array *da;\nda = RedisModule_Alloc(sizeof(*da));\nda->count = RedisModule_LoadUnsigned(io);\nda->values = RedisModule_Alloc(da->count * sizeof(double));\n    for (size_t j = 0; j < da->count; j++)\n        da->values[j] = RedisModule_LoadDouble(io);\n    return da;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Redis Key (C)\nDESCRIPTION: Deletes a Redis key if it is open for writing and sets up the key to accept new writes as an empty key. Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` if the key is not open for writing. Requires a RedisModuleKey pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_94\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_DeleteKey(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Removing Slots with CLUSTER DELSLOTS - Redis\nDESCRIPTION: This example demonstrates how to remove individual slots (1, 2, 3, 4, and 5) from a Redis Cluster node using the CLUSTER DELSLOTS command. The command requires that all specified slots are associated with the node. The expected output is \"OK\" upon successful execution.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-delslotsrange.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> CLUSTER DELSLOTS 1 2 3 4 5\nOK\n```\n\n----------------------------------------\n\nTITLE: Register String Config Example - Redis Module (C)\nDESCRIPTION: This code snippet demonstrates how to register a string configuration option for a Redis module using `RedisModule_RegisterStringConfig`. It showcases the get and set callback functions required for managing the string configuration value.  It illustrates how to handle the string value in the set callback by freeing the old value and retaining the new one.  The example also includes error handling within the set callback, demonstrating how to create and return an error string to the client if the value cannot be applied.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_291\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *strval;\nint adjustable = 1;\nRedisModuleString *getStringConfigCommand(const char *name, void *privdata) {\n    return strval;\n}\n\nint setStringConfigCommand(const char *name, RedisModuleString *new, void *privdata, RedisModuleString **err) {\n   if (adjustable) {\n       RedisModule_Free(strval);\n       RedisModule_RetainString(NULL, new);\n       strval = new;\n       return REDISMODULE_OK;\n   }\n   *err = RedisModule_CreateString(NULL, \"Not adjustable.\", 15);\n   return REDISMODULE_ERR;\n}\n...\nRedisModule_RegisterStringConfig(ctx, \"string\", NULL, REDISMODULE_CONFIG_DEFAULT, getStringConfigCommand, setStringConfigCommand, NULL, NULL);\n```\n\n----------------------------------------\n\nTITLE: Listing Redis Functions with FUNCTION LIST\nDESCRIPTION: This Redis command lists all registered functions in the Redis instance, including their names, descriptions, and flags. This provides information about the functions available in the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_9\n\nLANGUAGE: redis\nCODE:\n```\nredis> FUNCTION LIST\n```\n\n----------------------------------------\n\nTITLE: Blocking a Redis Module Client on Keys with Flags\nDESCRIPTION: This code snippet blocks a client and associates it with keys, using flags to modify the unblocking behavior with `RedisModule_BlockClientOnKeysWithFlags`. It requires a `RedisModuleCtx`, a reply callback function (`reply_callback`). The `REDISMODULE_BLOCK_`* flags allows to configure different unblocking strategies. For example, `REDISMODULE_BLOCK_UNBLOCK_DELETED` will trigger the unblocking if the keys are deleted.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_196\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleBlockedClient *RedisModule_BlockClientOnKeysWithFlags(RedisModuleCtx *ctx,\n                                                                     RedisModuleCmdFunc reply_callback,\n                                                                     ;\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Pending Entries Using XAUTOCLAIM with Cursor\nDESCRIPTION: This command demonstrates using the cursor returned by XAUTOCLAIM to iterate through pending entries in a Redis Stream consumer group.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_31\n\nLANGUAGE: redis\nCODE:\n```\n> XAUTOCLAIM race:italy italy_riders Lora 60000 (1692632662819-0 COUNT 1\n```\n\n----------------------------------------\n\nTITLE: Calling Redis Functions: my_hgetall and my_hlastmodified\nDESCRIPTION: These commands demonstrate how to call the newly added functions, `my_hgetall` and `my_hlastmodified`, within the `mylib` Redis Function library using the `FCALL` command. The `1` indicates one key argument (the hash name).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\nredis> FCALL my_hgetall 1 myhash\nredis> FCALL my_hlastmodified 1 myhash\n```\n\n----------------------------------------\n\nTITLE: Adding Numerical Data with Padding\nDESCRIPTION: Illustrates how to use leading zeros to index numerical data in a Redis sorted set, which allows sorting and searching numerical values as strings lexicographically.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_15\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 00324823481:foo\nZADD myindex 0 12838349234:bar\nZADD myindex 0 00000000111:zap\n```\n\n----------------------------------------\n\nTITLE: Prevent Global Function Declaration in Redis Lua\nDESCRIPTION: This code snippet demonstrates an attempt to declare a global function in a Redis Lua script, which is prohibited due to the sandboxed environment. It highlights the error that Redis will return when a global function is defined. Function definitions must be local.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nfunction my_global_function()\n  -- Do something amazing\nend\n```\n\n----------------------------------------\n\nTITLE: Get Private Data from a Blocked Client\nDESCRIPTION: This code snippet retrieves the private data previously set on a blocked client using `RedisModule_BlockClientGetPrivateData`. It requires a `RedisModuleBlockedClient` pointer and returns a `void *` representing the private data. Private data is used to store any information about the specific unblocking operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_193\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_BlockClientGetPrivateData(RedisModuleBlockedClient *blocked_client);\n```\n\n----------------------------------------\n\nTITLE: Boolean Encoding in RESP\nDESCRIPTION: This snippet describes the encoding of boolean values in RESP. It starts with a hash character (`#`), followed by `t` for true or `f` for false, and ends with a CRLF terminator.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n#<t|f>\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Module Options\nDESCRIPTION: Sets various options that define module capabilities and behaviors. Options include handling I/O errors, disabling implicit key modification signaling, handling async replication load, and allowing nested key-space notifications. Available since Redis 6.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_SetModuleOptions(RedisModuleCtx *ctx, int options);\n```\n\n----------------------------------------\n\nTITLE: Blocking Command Example (C)\nDESCRIPTION: This example blocks a client using `RedisModule_BlockClient`, spawns a thread that waits for one second, and then unblocks the client. It uses `reply_func` and `timeout_func` as callbacks for reply and timeout scenarios.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint Example_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,\n                             int argc)\n    {\n        RedisModuleBlockedClient *bc =\n            RedisModule_BlockClient(ctx,reply_func,timeout_func,NULL,0);\n\n        pthread_t tid;\n        pthread_create(&tid,NULL,threadmain,bc);\n\n        return REDISMODULE_OK;\n    }\n\n    void *threadmain(void *arg) {\n        RedisModuleBlockedClient *bc = arg;\n\n        sleep(1); /* Wait one second and unblock. */\n        RedisModule_UnblockClient(bc,NULL);\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Consumer Group with ID 0 - Redis\nDESCRIPTION: Creates a new consumer group named 'mygroup' for the stream 'mystream', starting from the beginning of the stream (ID 0). This allows consumers in the group to fetch the entire stream from the first entry.  No dependencies are required beyond a running Redis instance and the `mystream` stream needing to exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xgroup-create.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nXGROUP CREATE mystream mygroup 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Reply Elements (C)\nDESCRIPTION: This snippet demonstrates how to access elements of a RedisModuleCallReply array using `RedisModule_CallReplyArrayElement`. It retrieves a sub-reply at a given index. Returns NULL if the index is out of range.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleCallReply *subreply;\nsubreply = RedisModule_CallReplyArrayElement(reply,idx);\n```\n\n----------------------------------------\n\nTITLE: Saving Float in RDB File (RedisModule_SaveFloat)\nDESCRIPTION: This function saves a float value to the Redis RDB file. It is intended to be called within the `rdb_save` method of a module data type. The float can be a valid number, a NaN, or infinity. It can be loaded back using `RedisModule_LoadFloat()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_174\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveFloat(RedisModuleIO *io, float value);\n```\n\n----------------------------------------\n\nTITLE: Registering a New Data Type with RedisModule_CreateDataType - C\nDESCRIPTION: Registers a new data type within a Redis module. The function takes a context, data type name, encoding version, and a pointer to a RedisModuleTypeMethods structure. This structure defines callbacks for RDB loading, saving, AOF rewriting, freeing, and other optional operations. The data type name must be unique within the Redis Modules ecosystem and follow a specific format.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_159\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleTypeMethods tm = {\n            .version = REDISMODULE_TYPE_METHOD_VERSION,\n            .rdb_load = myType_RDBLoadCallBack,\n            .rdb_save = myType_RDBSaveCallBack,\n            .aof_rewrite = myType_AOFRewriteCallBack,\n            .free = myType_FreeCallBack,\n\n            // Optional fields\n            .digest = myType_DigestCallBack,\n            .mem_usage = myType_MemUsageCallBack,\n            .aux_load = myType_AuxRDBLoadCallBack,\n            .aux_save = myType_AuxRDBSaveCallBack,\n            .free_effort = myType_FreeEffortCallBack,\n            .unlink = myType_UnlinkCallBack,\n            .copy = myType_CopyCallback,\n            .defrag = myType_DefragCallback\n\n            // Enhanced optional fields\n            .mem_usage2 = myType_MemUsageCallBack2,\n            .free_effort2 = myType_FreeEffortCallBack2,\n            .unlink2 = myType_UnlinkCallBack2,\n            .copy2 = myType_CopyCallback2,\n        }\n```\n\nLANGUAGE: C\nCODE:\n```\nstatic RedisModuleType *BalancedTreeType;\n\n     int RedisModule_OnLoad(RedisModuleCtx *ctx) {\n         // some code here ...\n         BalancedTreeType = RedisModule_CreateDataType(...);\n     }\n```\n\n----------------------------------------\n\nTITLE: Setting Absolute Expiration Time of Redis Key (C)\nDESCRIPTION: Sets a new absolute expiration time (Unix timestamp) for a Redis key. Setting `REDISMODULE_NO_EXPIRE` cancels any existing expiration (equivalent to the PERSIST command). Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` if the key is not open for writing or is empty. Takes a RedisModuleKey pointer and the absolute expiration time as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_99\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_SetAbsExpire(RedisModuleKey *key, mstime_t expire);\n```\n\n----------------------------------------\n\nTITLE: Registering a Function with redis.register_function (Named Args) in Lua\nDESCRIPTION: Registers a function to a loaded library, using named arguments: function_name, callback, flags (optional), and description (optional). This function is only available from the context of the `FUNCTION LOAD` command. function_name and callback are mandatory.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_19\n\nLANGUAGE: Lua\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib\\n redis.register_function{function_name='noop', callback=function() end, flags={ 'no-writes' }, description='Does nothing'}\"\n```\n\n----------------------------------------\n\nTITLE: Removing and Adding Updated Frequency in Redis Sorted Set\nDESCRIPTION: This code demonstrates how to update the frequency of a search term in a Redis sorted set. First, the existing entry is removed, and then a new entry with the incremented frequency is added.  This snippet highlights the individual commands that would be executed inside a Lua script to ensure atomicity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_10\n\nLANGUAGE: redis\nCODE:\n```\nZREM myindex 0 banana:1\nZADD myindex 0 banana:2\n```\n\n----------------------------------------\n\nTITLE: Redis Object Structure Definition\nDESCRIPTION: This code snippet defines the `redisObject` structure, which is a fundamental data structure in Redis.  It shows the members of the structure, including pointers to the actual data, type and encoding information, storage location (memory or swapped), and reference count.  The `redisObjectVM` structure is also included to hold VM-specific metadata.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-vm.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* The actual Redis Object */\ntypedef struct redisObject {\n    void *ptr;\n    unsigned char type;\n    unsigned char encoding;\n    unsigned char storage;  /* If this object is a key, where is the value?\n                             * REDIS_VM_MEMORY, REDIS_VM_SWAPPED, ... */\n    unsigned char vtype; /* If this object is a key, and value is swapped out,\n                          * this is the type of the swapped out object. */\n    int refcount;\n    /* VM fields, this are only allocated if VM is active, otherwise the\n     * object allocation function will just allocate\n     * sizeof(redisObject) minus sizeof(redisObjectVM), so using\n     * Redis without VM active will not have any overhead. */\n    struct redisObjectVM vm;\n} robj;\n```\n\n----------------------------------------\n\nTITLE: Iterating through Redis streams\nDESCRIPTION: This example demonstrates how to continue iterating through two Redis streams, `mystream` and `writers`, by providing the last received IDs. It uses the `XREAD` command with the `COUNT` option to limit the number of entries returned per stream to two.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xread.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> XREAD COUNT 2 STREAMS mystream writers 1526999352406-0 1526985685298-0\n1) 1) \"mystream\"\n   2) 1) 1) 1526999626221-0\n         2) 1) \"duration\"\n            2) \"911\"\n            3) \"event-id\"\n            4) \"7\"\n            5) \"user-id\"\n            6) \"9488232\"\n2) 1) \"writers\"\n   2) 1) 1) 1526985691746-0\n         2) 1) \"name\"\n            2) \"Toni\"\n            3) \"surname\"\n            4) \"Morrison\"\n      2) 1) 1526985712947-0\n         2) 1) \"name\"\n            2) \"Agatha\"\n            3) \"surname\"\n            4) \"Christie\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Consumer Information with XINFO CONSUMERS\nDESCRIPTION: This example demonstrates how to use the `XINFO CONSUMERS` command in Redis to retrieve information about the consumers belonging to a specific consumer group of a stream. The command requires the stream's key and the consumer group's name as input. The output provides details for each consumer including their name, the number of pending messages, idle time (time since last attempted interaction), and inactive time (time since last successful interaction).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xinfo-consumers.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> XINFO CONSUMERS mystream mygroup\n1) 1) name\n   2) \"Alice\"\n   3) pending\n   4) (integer) 1\n   5) idle\n   6) (integer) 9104628\n   7) inactive\n   8) (integer) 18104698\n2) 1) name\n   2) \"Bob\"\n   3) pending\n   4) (integer) 1\n   5) idle\n   6) (integer) 83841983\n   7) inactive\n   8) (integer) 993841998\n```\n\n----------------------------------------\n\nTITLE: Defining Redis String Header Structure in C\nDESCRIPTION: This code snippet defines the `sdshdr` structure, which represents the header for Redis strings. It contains metadata about the string, including its length (`len`) and the amount of free space available (`free`), along with the character buffer (`buf`) to store the actual string data.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-sds.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct sdshdr {\n    long len;\n    long free;\n    char buf[];\n};\n```\n\n----------------------------------------\n\nTITLE: Loading a Redis Function with FUNCTION LOAD\nDESCRIPTION: This command loads a Lua script as a Redis Function into the server, registering a function named 'myfunc' within a library called 'mylib'. The function takes keys and arguments and returns the first argument passed to it.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/fcall.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib \\n redis.register_function('myfunc', function(keys, args) return args[1] end)\"\n\"mylib\"\n```\n\nLANGUAGE: lua\nCODE:\n```\n#!lua name=mylib \n redis.register_function('myfunc', function(keys, args) return args[1] end)\n```\n\n----------------------------------------\n\nTITLE: Defining RedisModuleCommandHistoryEntry struct (C)\nDESCRIPTION: This code snippet defines the `RedisModuleCommandHistoryEntry` struct, which is used to track changes to a Redis command over time. It includes the version string and a description of the changes made in that version.  An array of these entries provides a command's history.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nconst char *since;\nconst char *changes;\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis Cluster with NRedisStack\nDESCRIPTION: Connects to a Redis cluster by specifying the cluster endpoints in the client configuration. It creates a ConfigurationOptions object with a list of cluster nodes and their ports, then establishes a connection using ConnectionMultiplexer.Connect().\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nConfigurationOptions options = new ConfigurationOptions\n{\n    //list of available nodes of the cluster along with the endpoint port.\n    EndPoints = {\n        { \"localhost\", 16379 },\n        { \"localhost\", 16380 },\n        // ...\n    },            \n};\n\nConnectionMultiplexer cluster = ConnectionMultiplexer.Connect(options);\nIDatabase db = cluster.GetDatabase();\n\ndb.StringSet(\"foo\", \"bar\");\nConsole.WriteLine(db.StringGet(\"foo\")); // prints bar\n```\n\n----------------------------------------\n\nTITLE: Simple Redis Module in C\nDESCRIPTION: This C code snippet implements a basic Redis module that exposes a command `helloworld.rand`. The command returns a random number. It includes the `redismodule.h` header, defines the command function `HelloworldRand_RedisCommand`, and the module initialization function `RedisModule_OnLoad`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include \"redismodule.h\"\n#include <stdlib.h>\n\nint HelloworldRand_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    RedisModule_ReplyWithLongLong(ctx,rand());\n    return REDISMODULE_OK;\n}\n\nint RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    if (RedisModule_Init(ctx,\"helloworld\",1,REDISMODULE_APIVER_1)\n        == REDISMODULE_ERR) return REDISMODULE_ERR;\n\n    if (RedisModule_CreateCommand(ctx,\"helloworld.rand\",\n        HelloworldRand_RedisCommand, \"fast random\",\n        0, 0, 0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n    return REDISMODULE_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Hash with NOVALUES option in Redis\nDESCRIPTION: This snippet demonstrates the usage of the `NOVALUES` option with the `HSCAN` command in Redis. It shows how to retrieve only the keys from a hash, without their corresponding values. This can be useful when only the keys are needed, reducing the amount of data transferred.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scan.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\nredis 127.0.0.1:6379> HSET myhash a 1 b 2\nOK\nredis 127.0.0.1:6379> HSCAN myhash 0\n1) \"0\"\n2) 1) \"a\"\n   2) \"1\"\n   3) \"b\"\n   4) \"2\"\nredis 127.0.0.1:6379> HSCAN myhash 0 NOVALUES\n1) \"0\"\n2) 1) \"a\"\n   2) \"b\"\n```\n\n----------------------------------------\n\nTITLE: Querying Padded Numerical Data in Lexicographical Index\nDESCRIPTION: This code snippet showcases how to perform a range query on the lexicographically indexed numerical data. The values will be sorted and retrieved correctly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_16\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex 0 -1\n1) \"00000000111:zap\"\n2) \"00324823481:foo\"\n3) \"12838349234:bar\"\n```\n\n----------------------------------------\n\nTITLE: Consumer implementation with Redis in Ruby\nDESCRIPTION: This Ruby script demonstrates a Redis stream consumer implementation using consumer groups. It first attempts to read pending messages (history) and then switches to reading new messages. Requires the `redis` gem.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'redis'\n\nif ARGV.length == 0\n    puts \"Please specify a consumer name\"\n    exit 1\nend\n\nConsumerName = ARGV[0]\nGroupName = \"mygroup\"\nr = Redis.new\n\ndef process_message(id,msg)\n    puts \"[#{ConsumerName}] #{id} = #{msg.inspect}\"\nend\n\n$lastid = '0-0'\n\nputs \"Consumer #{ConsumerName} starting...\"\ncheck_backlog = true\nwhile true\n    # Pick the ID based on the iteration: the first time we want to\n    # read our pending messages, in case we crashed and are recovering.\n    # Once we consumed our history, we can start getting new messages.\n    if check_backlog\n        myid = $lastid\n    else\n        myid = '>'\n    end\n\n    items = r.xreadgroup('GROUP',GroupName,ConsumerName,'BLOCK','2000','COUNT','10','STREAMS',:my_stream_key,myid)\n\n    if items == nil\n        puts \"Timeout!\"\n        next\n    end\n\n    # If we receive an empty reply, it means we were consuming our history\n    # and that the history is now empty. Let's start to consume new messages.\n    check_backlog = false if items[0][1].length == 0\n\n    items[0][1].each{|i|\n        id,fields = i\n\n        # Process the message\n        process_message(id,fields)\n\n        # Acknowledge the message as processed\n        r.xack(:my_stream_key,GroupName,id)\n\n        $lastid = id\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Sentinel Pub/Sub Subscription\nDESCRIPTION: This snippet describes how to use a Sentinel as a Redis-compatible Pub/Sub server to subscribe to channels and receive notifications about specific events. The example demonstrates subscribing to the `+sdown` channel to receive notifications about instances entering an SDOWN condition.  `PSUBSCRIBE *` can be used to subscribe to all messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_15\n\nLANGUAGE: Redis\nCODE:\n```\nSUBSCRIBE +sdown\n```\n\nLANGUAGE: Redis\nCODE:\n```\nPSUBSCRIBE *\n```\n\n----------------------------------------\n\nTITLE: Setting String Value for Redis Key (C)\nDESCRIPTION: Sets the specified string 'str' as the value of a Redis key, deleting the old value if any. The key must be open for writing. Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` if the key is not open for writing or if there is an active iterator. Takes a RedisModuleKey pointer and a RedisModuleString pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_107\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StringSet(RedisModuleKey *key, RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Null Array Encoding in RESP\nDESCRIPTION: This snippet shows how a null array is encoded in RESP. Similar to null bulk strings, it uses a length of -1, indicated by `*-1\\r\\n`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n*-1\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Fixing AOF using redis-check-aof\nDESCRIPTION: This code shows how to use the `redis-check-aof` tool to fix potentially corrupted AOF files.  It requires passing the `--fix` flag along with the filename of the AOF file.  The user should back up the file first.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-check-aof --fix <filename>\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred Attribute Length - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to set the length of an attribute when using `RedisModule_ReplyWithAttribute`. Must not be called if `RedisModule_ReplyWithAttribute` returned an error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_66\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ReplySetAttributeLength(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Data Directory\nDESCRIPTION: This command creates a directory `/var/redis/6379` which serves as both the data and working directory for the Redis instance. This directory will store the Redis data files (e.g., dump.rdb) and is specified in the Redis configuration file. `sudo mkdir` requires root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /var/redis/6379\n```\n\n----------------------------------------\n\nTITLE: Add stream entry with autogenerated id\nDESCRIPTION: Adds a new entry to the `race:france` stream with the specified racer data.  The `*` indicates that the server should generate a unique ID for the entry. The command returns the generated ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:france * rider Castilla speed 29.9 position 1 location_id 2\n```\n\n----------------------------------------\n\nTITLE: Calling Redis Commands from a Module (C)\nDESCRIPTION: This snippet demonstrates how to call a Redis command from a module using `RedisModule_Call`. It calls the `INCRBY` command with a key from `argv[1]` (a RedisModuleString) and the increment \"10\" (a C string). The format specifier \"sc\" indicates a RedisModuleString and a C string respectively.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleCallReply *reply;\nreply = RedisModule_Call(ctx,\"INCRBY\",\"sc\",argv[1],\"10\");\n```\n\n----------------------------------------\n\nTITLE: Error Reply\nDESCRIPTION: Returns an error reply to the client.  `RedisModule_ReplyWithError` sends a Redis error. `REDISMODULE_ERRORMSG_WRONGTYPE` is a predefined error message for wrong type errors. The `ctx` parameter is the RedisModuleCtx pointer, and `err` is the error message string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithError(RedisModuleCtx *ctx, const char *err);\n```\n\nLANGUAGE: c\nCODE:\n```\nREDISMODULE_ERRORMSG_WRONGTYPE\n```\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithError(ctx,\"ERR invalid arguments\");\n```\n\n----------------------------------------\n\nTITLE: Starting a synchronous debugging session\nDESCRIPTION: This snippet shows how to start a synchronous debugging session, where data changes are retained after the debugging session. This mode blocks the Redis server during the debugging session, so it should be used with caution. The `ldb-sync-mode` option is used in conjunction with `--eval` to start the debugging session.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./redis-cli --ldb-sync-mode --eval /tmp/script.lua\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred Array Length - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to set the length of an array when the length is not known when calling `RedisModule_ReplyWithArray` using `REDISMODULE_POSTPONED_LEN`. The `RedisModule_ReplySetArrayLength` function is called after the array elements have been added to set the array length.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_63\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ReplySetArrayLength(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Extract Keys from EVAL Command - Redis CLI\nDESCRIPTION: This example shows how to extract keys from an `EVAL` command. The `EVAL` command executes a Lua script, and the keys are passed as arguments.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-getkeys.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND GETKEYS EVAL \"not consulted\" 3 key1 key2 key3 arg1 arg2 arg3 argN\n```\n\n----------------------------------------\n\nTITLE: Automatic Key Removal After LPOP\nDESCRIPTION: This example demonstrates that Redis automatically deletes a list key when it becomes empty after removing all elements using `LPOP`. The `EXISTS` command is used to check if the key exists before and after popping all elements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_13\n\nLANGUAGE: redis\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2 bike:3\n(integer) 3\n> EXISTS bikes:repairs\n(integer) 1\n> LPOP bikes:repairs\n\"bike:3\"\n> LPOP bikes:repairs\n\"bike:2\"\n> LPOP bikes:repairs\n\"bike:1\"\n> EXISTS bikes:repairs\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Blocking a Redis Module Client During Authentication\nDESCRIPTION: This code snippet demonstrates blocking a client for module authentication using `RedisModule_BlockClientOnAuth`. It expects a `RedisModuleCtx` and a reply callback (`reply_callback`) as inputs. It is intended for use within the context of a module authentication callback, and returns NULL if module auth is not in progress on the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_192\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleBlockedClient *RedisModule_BlockClientOnAuth(RedisModuleCtx *ctx,\n                                                            RedisModuleAuthCallback reply_callback,\n                                                            ;\n```\n\n----------------------------------------\n\nTITLE: Blocking a Redis Module Client\nDESCRIPTION: This code snippet shows how to block a client using `RedisModule_BlockClient`. It requires a `RedisModuleCtx`, a reply callback function (`reply_callback`), timeout and a free private data callback function. When client is unblocked this callback will be called.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_191\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleBlockedClient *RedisModule_BlockClient(RedisModuleCtx *ctx,\n                                                      RedisModuleCmdFunc reply_callback,\n                                                      ;\n```\n\n----------------------------------------\n\nTITLE: Getting Cached Time in Microseconds\nDESCRIPTION: This function returns a cached version of the current UNIX time in microseconds.  It's updated periodically and before command execution, ensuring consistency across callbacks. Available since Redis 7.2.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nustime_t RedisModule_CachedMicroseconds(void);\n```\n\n----------------------------------------\n\nTITLE: Monitoring I/O Activity with iostat\nDESCRIPTION: This code snippet illustrates how to use the iostat command to monitor global I/O activity of the system. It provides information about CPU usage and device I/O statistics.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ iostat -xk 1\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n              13.55    0.04    2.92    0.53    0.00   82.95\n\nDevice:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await  svctm  %util\nsda               0.77     0.00    0.01    0.00     0.40     0.00    73.65     0.00    3.62   2.58   0.00\nsdb               1.27     4.75    0.82    3.54    38.00    32.32    32.19     0.11   24.80   4.24   1.85\n```\n\n----------------------------------------\n\nTITLE: Parsing a String to Long Long (C)\nDESCRIPTION: This snippet demonstrates how to parse a RedisModuleString to a long long integer using `RedisModule_StringToLongLong`. The function takes the Redis context, the RedisModuleString to parse, and a pointer to store the result.  Returns REDISMODULE_OK on success.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nlong long myval;\nif (RedisModule_StringToLongLong(ctx,argv[1],&myval) == REDISMODULE_OK) {\n    /* Do something with 'myval' */\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Connectivity to ElastiCache Redis Instance\nDESCRIPTION: This command uses `netcat` (`nc`) to send the `info` command to an ElastiCache Redis instance on port 6379.  It verifies network connectivity and that the Redis instance is running and responsive. Replace `<redis host>` with the actual hostname or IP address of the ElastiCache instance. The expected output is information about the Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-aws.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho info | nc <redis host> 6379\n```\n\n----------------------------------------\n\nTITLE: Adding Search Term with Frequency to Redis Sorted Set\nDESCRIPTION: This example shows how to add a search term along with its frequency to a Redis sorted set.  The term and frequency are concatenated with a colon separator. This allows tracking the popularity of search terms for better search completion suggestions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 banana:1\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel user credentials\nDESCRIPTION: This code shows how to configure the username and password for Sentinel to connect to other Redis instances when ACL is enabled. The `sentinel sentinel-user` and `sentinel sentinel-pass` directives specify the credentials of a superuser.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nsentinel sentinel-user <username>\nsentinel sentinel-pass <password>\n```\n\n----------------------------------------\n\nTITLE: Weighted Random Selection Algorithm - Pseudo Code\nDESCRIPTION: This pseudocode snippet illustrates an algorithm for weighted random selection using a sorted set and ZRANGEBYSCORE. It involves calculating element scores based on their weights, adding them to a sorted set, and then using a random number to retrieve a weighted random element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebyscore.md#_snippet_3\n\nLANGUAGE: pseudocode\nCODE:\n```\nSUM = ELEMENTS.TOTAL_WEIGHT // 6 in this case.\nSCORE = 0\nFOREACH ELE in ELEMENTS\n    SCORE += ELE.weight / SUM\n    ZADD KEY SCORE ELE\nEND\n```\n\n----------------------------------------\n\nTITLE: Acquiring the Server Lock - RedisModule_ThreadSafeContextLock\nDESCRIPTION: Acquires the server lock before executing a thread-safe API call. This is not needed for `RedisModule_Reply*` calls when there is a blocked client connected to the thread-safe context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_210\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ThreadSafeContextLock(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Loading Signed Integer from RDB File (RedisModule_LoadSigned)\nDESCRIPTION: This function loads a signed 64-bit value from the Redis RDB file. It is designed for use within the `rdb_load` method of modules that implement custom data types. The `RedisModuleIO` pointer provides the context for reading from the RDB file. Returns the signed 64 bit integer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_167\n\nLANGUAGE: c\nCODE:\n```\nint64_t RedisModule_LoadSigned(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Value in Redis\nDESCRIPTION: This snippet showcases the atomic `INCR` operation in Redis, which atomically increments the integer value stored at the specified key. It ensures data consistency when multiple clients attempt to modify the same value concurrently.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSET foo 10\nINCR foo => 11\nINCR foo => 12\nINCR foo => 13\n```\n\n----------------------------------------\n\nTITLE: Allocating Memory with RedisModule_PoolAlloc - C\nDESCRIPTION: Allocates memory using the Redis pool allocator for short-lived allocations. Memory is automatically released when the command returns, reducing overhead. Aligns memory to the next power of two.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_51\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_PoolAlloc(RedisModuleCtx *ctx, size_t bytes);\n```\n\n----------------------------------------\n\nTITLE: Bulk String Encoding in RESP\nDESCRIPTION: This snippet shows how bulk strings are encoded in RESP. The encoding starts with a dollar sign (`$`), followed by the string length, a CRLF terminator, the actual string data, and a final CRLF terminator.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$<length>\\r\\n<data>\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Hash Slots in Redis Cluster using CLUSTER ADDSLOTS\nDESCRIPTION: This command assigns the specified hash slots to the node receiving the command. The node will map the specified hash slots to itself and start broadcasting the new configuration. The command only works if all the specified slots are currently not assigned from the point of view of the node receiving the command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-addslots.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER ADDSLOTS 1 2 3\nOK\n```\n\n----------------------------------------\n\nTITLE: Disable Software Watchdog via CONFIG SET - Redis\nDESCRIPTION: This command disables the software watchdog by setting the `watchdog-period` parameter to 0. Disabling the watchdog after use is important to avoid unnecessary overhead.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_14\n\nLANGUAGE: Redis\nCODE:\n```\nCONFIG SET watchdog-period 0\n```\n\n----------------------------------------\n\nTITLE: Allocating Zero-Initialized Memory with RedisModule_Calloc (C)\nDESCRIPTION: This function allocates memory and initializes it to zero, similar to `calloc()`. Memory allocated with `RedisModule_Calloc` is managed by Redis for memory tracking and eviction. Prefer this function over `calloc()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid *RedisModule_Calloc(size_t nmemb, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Reading Stream messages as another consumer\nDESCRIPTION: This command reads messages from the `race:italy` stream using the `italy_riders` consumer group as the `Bob` consumer. Since Alice already consumed the first message, Bob will receive subsequent new messages with the `>` ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_24\n\nLANGUAGE: Redis\nCODE:\n```\nXREADGROUP GROUP italy_riders Bob COUNT 2 STREAMS race:italy >\n```\n\n----------------------------------------\n\nTITLE: SENTINEL get-master-addr-by-name Command\nDESCRIPTION: This command is used by the Redis client to query a Sentinel instance for the address (IP and port) of the current master for a given service name.  The `master-name` parameter should be replaced with the actual service name. The command returns an ip:port pair or a null reply if the master is unknown.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/sentinel-clients.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSENTINEL get-master-addr-by-name master-name\n```\n\n----------------------------------------\n\nTITLE: Checking Message Content with XRANGE\nDESCRIPTION: This command is used to inspect the content of a specific message given the message ID in a Redis Stream. It is often used to examine pending messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_28\n\nLANGUAGE: redis\nCODE:\n```\n> XRANGE race:italy 1692632647899-0 1692632647899-0\n```\n\n----------------------------------------\n\nTITLE: Create Redis Error Reply with redis.error_reply in Lua\nDESCRIPTION: This code snippet demonstrates how to use `redis.error_reply()` to create a Redis error reply from within a Lua script. It shows how to pass a string argument containing the error message and how the resulting table with the 'err' field is formatted. `redis.error_reply()` simplifies the creation of error replies.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlocal text = 'ERR My very special error'\nlocal reply1 = { err = text }\nlocal reply2 = redis.error_reply(text)\n```\n\n----------------------------------------\n\nTITLE: Modifying quorum configuration using SENTINEL SET in Redis\nDESCRIPTION: This command modifies the quorum configuration for a master named `objects-cache-master` using the `SENTINEL SET` command. It sets the quorum to 5, dictating the number of Sentinels required to agree on a failover. This allows adjusting the sensitivity and robustness of the failover process.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nSENTINEL SET objects-cache-master quorum 5\n```\n\n----------------------------------------\n\nTITLE: Continue execution in GDB\nDESCRIPTION: This command instructs GDB to allow the attached Redis instance to continue execution. After attaching GDB, the Redis process is initially blocked.  Typing `continue` at the GDB prompt releases the block and allows Redis to resume normal operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_2\n\nLANGUAGE: gdb\nCODE:\n```\n(gdb) continue\n```\n\n----------------------------------------\n\nTITLE: Access Redis Stack Commands via Interfaces\nDESCRIPTION: Shows how to access Redis Stack capabilities using interfaces provided by NRedisStack.  It retrieves instances of command interfaces for various Redis Stack modules like Bloom Filter, Cuckoo Filter, CMS, Graph, TopK, TDigest, Search, JSON, and TimeSeries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIBloomCommands bf = db.BF();\nICuckooCommands cf = db.CF();\nICmsCommands cms = db.CMS();\nIGraphCommands graph = db.GRAPH();\nITopKCommands topk = db.TOPK();\nITdigestCommands tdigest = db.TDIGEST();\nISearchCommands ft = db.FT();\nIJsonCommands json = db.JSON();\nITimeSeriesCommands ts = db.TS();\n```\n\n----------------------------------------\n\nTITLE: Add a New Replica Node using redis-cli in Redis Cluster (Random Master)\nDESCRIPTION: This snippet demonstrates how to add a new replica node to a Redis Cluster using the `redis-cli --cluster add-node` command with the `--cluster-slave` option.  The command requires the address of the new node and the address of an existing node in the cluster. The replica will be assigned to a random master with fewer replicas.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster add-node 127.0.0.1:7006 127.0.0.1:7000 --cluster-slave\n```\n\n----------------------------------------\n\nTITLE: Getting Blocked Client Ready Key - RedisModule_GetBlockedClientReadyKey\nDESCRIPTION: Retrieves the key that is ready when the reply callback is called in the context of a client blocked by `RedisModule_BlockClientOnKeys`. This function provides access to the key that triggered the unblocking event.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_204\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_GetBlockedClientReadyKey(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Starting Redis server in foreground\nDESCRIPTION: Starts the Redis server in the foreground. The server logs will be displayed in the terminal. To stop Redis, the user must press Ctrl-C.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-from-source.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nredis-server\n```\n\n----------------------------------------\n\nTITLE: Adding a stream entry with autogenerated sequence id\nDESCRIPTION: Adds a new entry to the `race:usa` stream with milliseconds portion of the ID equal to `0` and the sequence number auto-generated by Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_9\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:usa 0-* racer Prickett\n```\n\n----------------------------------------\n\nTITLE: LLEN and LPOP on Non-Existent Key\nDESCRIPTION: This example demonstrates that calling `LLEN` or `LPOP` on a non-existent key results in the same behavior as if the key held an empty list. `LLEN` returns 0, and `LPOP` returns NULL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_14\n\nLANGUAGE: redis\nCODE:\n```\n> DEL bikes:repairs\n(integer) 0\n> LLEN bikes:repairs\n(integer) 0\n> LPOP bikes:repairs\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Fetching all entries in a stream\nDESCRIPTION: This snippet demonstrates how to retrieve all entries from a Redis stream using the `XRANGE` command with the `-` and `+` special IDs, representing the minimum and maximum IDs possible within the stream, respectively. It showcases the basic syntax and output format of the command when retrieving the entire stream content.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE somestream - +\n1) 1) 1526985054069-0\n   2) 1) \"duration\"\n      2) \"72\"\n      3) \"event-id\"\n      4) \"9\"\n      5) \"user-id\"\n      6) \"839248\"\n2) 1) 1526985069902-0\n   2) 1) \"duration\"\n      2) \"415\"\n      3) \"event-id\"\n      4) \"2\"\n      5) \"user-id\"\n      6) \"772213\"\n... other entries here ...\n```\n\n----------------------------------------\n\nTITLE: Preparing String Value for DMA Access (C)\nDESCRIPTION: Prepares a string value associated with a key for Direct Memory Access (DMA). Returns a pointer to the string data and its size (by reference). The 'mode' parameter specifies read or write access. Returns NULL on error (wrong type). No other key writing functions should be called during DMA access, and `RedisModule_StringDMA` must be called again after `RedisModule_StringTruncate`. Requires a RedisModuleKey pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_108\n\nLANGUAGE: C\nCODE:\n```\nchar *RedisModule_StringDMA(RedisModuleKey *key, size_t *len, int mode);\n```\n\n----------------------------------------\n\nTITLE: Connect to Redis and get Search and JSON Commands\nDESCRIPTION: Connects to the Redis server and retrieves references to the database and the Search and JSON command interfaces. This setup is necessary for interacting with Redis Search and JSON functionalities.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing NRedisStack;\nusing NRedisStack.RedisStackCommands;\nusing NRedisStack.Search;\nusing NRedisStack.Search.Aggregation;\nusing NRedisStack.Search.Literals.Enums;\nusing StackExchange.Redis;\n\n// ...\n\nConnectionMultiplexer redis = ConnectionMultiplexer.Connect(\"localhost\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar db = redis.GetDatabase();\nvar ft = db.FT();\nvar json = db.JSON();\n```\n\n----------------------------------------\n\nTITLE: Checking for Keys Position Request with RedisModule_IsKeysPositionRequest (C)\nDESCRIPTION: This function checks if a module command, declared with the \"getkeys-api\" flag, is being called to retrieve the positions of keys, rather than to execute the command itself. It returns non-zero if it is a keys position request, and zero otherwise.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_IsKeysPositionRequest(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Cluster Add Slots Range Command - Redis\nDESCRIPTION: This command assigns a range of slots to the Redis node. Used for creating a new cluster from scratch.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER ADDSLOTSRANGE start-slot1 end-slot1 [start-slot2 end-slot2] ... [start-slotN end-slotN]\n```\n\n----------------------------------------\n\nTITLE: Client HELLO Command Error Example\nDESCRIPTION: This example illustrates the client initiating the HELLO command and the server responding with an error because of an unknown command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\nClient: HELLO 3\nServer: -ERR unknown command 'HELLO'\n```\n\n----------------------------------------\n\nTITLE: Replying with C String - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply with a bulk string using a null-terminated C buffer pointer via the Redis Module API. The function `RedisModule_ReplyWithCString` sends the string to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_68\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithCString(RedisModuleCtx *ctx, const char *buf);\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding Example in Redis Lua\nDESCRIPTION: Demonstrates how to use the `cjson.encode()` function within a Redis Lua script to encode a Lua table into a JSON-encoded string. The input Lua table has a key 'foo' with the value 'bar'. The script returns the JSON string representation of the table.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_25\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return cjson.encode({ ['foo'] = 'bar' })\" 0\n\"{\\\"foo\\\":\\\"bar\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Truncating String Value with RedisModule_StringTruncate - C\nDESCRIPTION: Truncates or enlarges a string associated with a given key. If enlarging, it pads with zero bytes. Requires re-obtaining the DMA pointer after each call. If the key is empty, a string value is created.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_44\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_StringTruncate(mykey,1024);\n```\n\n----------------------------------------\n\nTITLE: Latency Histogram Example\nDESCRIPTION: This code demonstrates how to use the LATENCY HISTOGRAM command in Redis to retrieve latency information for a specific command (e.g., 'set').  It shows the structure of the returned histogram, including the command name, total calls, and latency buckets. The example also shows how to interpret the histogram data, including call count and latency bucket values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/latency-histogram.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:6379> LATENCY HISTOGRAM set\n1# \"set\" =>\n   1# \"calls\" => (integer) 100000\n   2# \"histogram_usec\" =>\n      1# (integer) 1 => (integer) 99583\n      2# (integer) 2 => (integer) 99852\n      3# (integer) 4 => (integer) 99914\n      4# (integer) 8 => (integer) 99940\n      5# (integer) 16 => (integer) 99968\n      6# (integer) 33 => (integer) 100000\n```\n\n----------------------------------------\n\nTITLE: Redis Latency Graph Example\nDESCRIPTION: This example demonstrates how to use the `latency graph` command to visualize the latency of the 'command' event. It first resets the latency statistics for the 'command' event, then introduces artificial delays using `debug sleep` and finally generates the latency graph.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/latency-graph.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n127.0.0.1:6379> latency reset command\n(integer) 0\n127.0.0.1:6379> debug sleep .1\nOK\n127.0.0.1:6379> debug sleep .2\nOK\n127.0.0.1:6379> debug sleep .3\nOK\n127.0.0.1:6379> debug sleep .5\nOK\n127.0.0.1:6379> debug sleep .4\nOK\n127.0.0.1:6379> latency graph command\ncommand - high 500 ms, low 101 ms (all time high 500 ms)\n--------------------------------------------------------------------------------\n   #_\n  _|| \n _||| \n_|||| \n\n11186\n542ss\nsss\n```\n\n----------------------------------------\n\nTITLE: Get Client Name By ID - Redis Module API (C)\nDESCRIPTION: Retrieves the name of a client connection given its ID. Returns a RedisModuleString containing the client name, or NULL if the client ID does not exist or the client has no name associated with it. Available since Redis 7.0.3. Requires RedisModuleCtx as context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_80\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_GetClientNameById(RedisModuleCtx *ctx,\n                                                     uint64_t id);\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Migrating Slot Example\nDESCRIPTION: This example demonstrates the format used in the `CLUSTER NODES` output to indicate migrating slots. These slots are assigned to the current node but are being migrated to another node.  Queries are accepted only if all keys exist; otherwise, an ASK redirection is emitted.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-nodes.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[slot_number->-migrating_to_node_id]\n```\n\n----------------------------------------\n\nTITLE: Read-Only Redis Script Execution (EVAL_RO)\nDESCRIPTION: Executes a read-only Lua script using EVAL_RO to retrieve the value of the key 'mykey'. The script uses `redis.call` to call the `GET` command. KEYS[1] represents the key provided as an argument (mykey).\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/eval_ro.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> EVAL_RO \"return redis.call('GET', KEYS[1])\" 1 mykey\n\"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Loading an Empty Redis Function Library with Lua\nDESCRIPTION: This snippet demonstrates attempting to load an empty Redis function library using the `FUNCTION LOAD` command. It highlights that a library must contain at least one registered function to load successfully and returns an error if the library is empty.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib\\n\"\n(error) ERR No functions registered\n```\n\n----------------------------------------\n\nTITLE: Getting String Pointer and Length\nDESCRIPTION: Given a string module object, RedisModule_StringPtrLen returns the string pointer and length of the string. The returned pointer and length should only be used for read-only accesses and never modified.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nconst char *RedisModule_StringPtrLen(const RedisModuleString *str,\n                                         size_t *len);\n```\n\n----------------------------------------\n\nTITLE: Skipping Sorting Operation in Redis\nDESCRIPTION: This snippet demonstrates how to skip the sorting operation using a non-existent key with the `BY` option. This is useful when you only need to retrieve external keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist BY nosort\n```\n\n----------------------------------------\n\nTITLE: BITFIELD Example with OVERFLOW and INCRBY\nDESCRIPTION: This example demonstrates how to use the OVERFLOW subcommand with the SAT (saturation) behavior to control increment operations. The example shows how incrementing past the maximum value results in the value being capped at the maximum.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitfield.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 1\n2) (integer) 1\n> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 2\n2) (integer) 2\n> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 3\n2) (integer) 3\n> BITFIELD mykey incrby u2 100 1 OVERFLOW SAT incrby u2 102 1\n1) (integer) 0\n2) (integer) 3\n```\n\n----------------------------------------\n\nTITLE: Push Random Integers to List - Execution (Ruby)\nDESCRIPTION: This Ruby code shows how to execute the deterministic Lua script by providing a seed value as an argument. The `rand(2**32)` function generates a random 32-bit integer to be used as the seed. The `r.eval` function calls the Lua script and passes the necessary arguments (key, number of iterations, and the seed).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nr.del(:mylist)\nputs r.eval(RandomPushScript,1,:mylist,10,rand(2**32))\n```\n\n----------------------------------------\n\nTITLE: Find Element Index with Negative Rank in Redis\nDESCRIPTION: This snippet shows using a negative RANK with the LPOS command to search from the tail of the list. It demonstrates how to find the first 'c' element starting from the tail of the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> LPOS mylist c RANK -1\n7\n```\n\n----------------------------------------\n\nTITLE: Initializing Go module\nDESCRIPTION: This command initializes a new Go module, which is required to manage dependencies when using go-redis. The module path `github.com/my/repo` should be replaced with the actual repository path of your project.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\n----------------------------------------\n\nTITLE: Replacing a Key-Value Pair in a Redis Module Dictionary (C-style Key)\nDESCRIPTION: This function replaces the value associated with a key in the dictionary, using a C-style string for the key. If the key already exists, its value is updated. If the key does not exist, it is created.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_244\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DictReplaceC(RedisModuleDict *d,\n                                 void *key,\n                                 size_t keylen,\n                                 void *ptr);\n```\n\n----------------------------------------\n\nTITLE: Simple String Encoding\nDESCRIPTION: Illustrates how a simple string 'OK' is encoded in RESP. It shows the '+' character followed by the string and terminated by CRLF (\\r\\n). This type is for short, non-binary strings.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+OK\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Copying Redis Init Script\nDESCRIPTION: This command copies the Redis init script from the Redis distribution's `utils` directory to `/etc/init.d`, renaming it to `redis_6379`. This script is used to start, stop, and restart the Redis server. `sudo cp` requires root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp utils/redis_init_script /etc/init.d/redis_6379\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Data from Redis Key - C\nDESCRIPTION: This snippet shows how to retrieve the private data associated with a Redis key using `RedisModule_ModuleTypeGetValue`. The key must already contain a value of the expected native type. The returned value is a `void*` that should be cast to the appropriate data structure pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct some_private_struct *data;\ndata = RedisModule_ModuleTypeGetValue(key);\n```\n\n----------------------------------------\n\nTITLE: Redis ZREVRANK Examples\nDESCRIPTION: This code snippet demonstrates the usage of the ZREVRANK command in Redis to retrieve the rank of members in a sorted set, ordered from highest to lowest score. It also shows how to use the WITHSCORE option to include the score of the element in the output. Members not present in the sorted set return nil.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrevrank.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREVRANK myzset \"one\"\nZREVRANK myzset \"four\"\nZREVRANK myzset \"three\" WITHSCORE\nZREVRANK myzset \"four\" WITHSCORE\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: This command verifies that Docker is installed correctly and that the current user has the necessary permissions to run Docker commands without `sudo`.  A successful execution shows a list of running containers (if any) or an empty list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-aws.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Create User Data for JSON Indexing\nDESCRIPTION: Creates three anonymous objects representing user data, each with properties like name, email, age, and city. These objects will be stored as JSON documents in Redis and indexed for searching.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvar user1 = new {\n    name = \"Paul John\",\n    email = \"paul.john@example.com\",\n    age = 42,\n    city = \"London\"\n};\n\nvar user2 = new {\n    name = \"Eden Zamir\",\n    email = \"eden.zamir@example.com\",\n    age = 29,\n    city = \"Tel Aviv\"\n};\n\nvar user3 = new {\n    name = \"Paul Zamir\",\n    email = \"paul.zamir@example.com\",\n    age = 35,\n    city = \"Tel Aviv\"\n};\n```\n\n----------------------------------------\n\nTITLE: Replicating a Command with RedisModule_Replicate - C\nDESCRIPTION: Replicates a command with specified arguments to slaves and AOF. It's similar to RedisModule_Call() in terms of argument formatting.  It requires a RedisModuleCtx context and uses format specifiers followed by arguments. A and R modifiers can exclude AOF or replicas respectively.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_75\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_Replicate(RedisModuleCtx *ctx,\n                              const char *cmdname,\n                              const char *fmt,\n                              ...);\n```\n\n----------------------------------------\n\nTITLE: List Minikube Services\nDESCRIPTION: This command lists the services running in Minikube, including the URL to access RedisInsight.  The URL includes the Minikube IP and the service port.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ minikube list\n|-------------|----------------------|--------------|---------------------------------------------|\n|  NAMESPACE  |         NAME         | TARGET PORT  |           URL                               |\n|-------------|----------------------|--------------|---------------------------------------------|\n| default     | kubernetes           | No node port |                                             |\n| default     | redisinsight-service |           80 | http://<minikube-ip>:<minikubeservice-port> |\n| kube-system | kube-dns             | No node port |                                             |\n|-------------|----------------------|--------------|---------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Adding an entry to a Stream in Redis\nDESCRIPTION: This snippet demonstrates how to add an entry to a Redis Stream using the `RedisModule_StreamAdd` function. It includes the parameters such as the key, flags for auto-generating IDs, the stream ID (if not auto-generated), an array of field-value pairs, and the number of field-value pairs.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_132\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamAdd(RedisModuleKey *key,\n                              int flags,\n                              RedisModuleStreamID *id,\n                              RedisModuleString **argv,\n                              long numfields);\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Server Instance\nDESCRIPTION: This command starts a Redis server instance using the configuration file in the specified directory.  It is expected to be run from within the instance's directory.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd 7000\nredis-server ./redis.conf\n```\n\n----------------------------------------\n\nTITLE: Sentinel ACL User Configuration\nDESCRIPTION: This snippet demonstrates the command structure required on the Redis server to create a user for Sentinel with the appropriate ACL permissions. These include read access, replication commands and pub/sub. The created user can then be supplied to each sentinel.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_16\n\nLANGUAGE: Redis\nCODE:\n```\nACL SETUSER sentinel-user ON >somepassword allchannels +multi +slaveof +ping +exec +subscribe +config|rewrite +role +publish +info +client|setname +client|kill +script|kill\n```\n\n----------------------------------------\n\nTITLE: Loading User Information in PHP\nDESCRIPTION: This PHP function `loadUserInfo()` retrieves user information from Redis and populates the `$User` global variable. It fetches the username from the `user:$userid` hash. Requires a valid `$userid` and connection to Redis via `redisLink()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nfunction loadUserInfo($userid) {\n    global $User;\n\n    $r = redisLink();\n    $User['id'] = $userid;\n    $User['username'] = $r->hget(\"user:$userid\",\"username\");\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing a Thread-Safe Context - RedisModule_FreeThreadSafeContext\nDESCRIPTION: Releases a thread-safe context. This function frees the resources allocated for the thread-safe context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_209\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_FreeThreadSafeContext(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Querying a stream by time range\nDESCRIPTION: This snippet illustrates how to use `XRANGE` to fetch entries within a specific millisecond timestamp range. It auto-completes incomplete IDs with `-0` for the start interval and `-18446744073709551615` for the end interval, effectively retrieving all entries generated between the specified timestamps.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE somestream 1526985054069 1526985055069\n```\n\n----------------------------------------\n\nTITLE: Replicating Commands with RedisModule_Call - C\nDESCRIPTION: Replicates module commands like normal Redis commands. Use the \"!\" modifier in the format string of `RedisModule_Call()` to flag the command as \"must replicate\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nreply = RedisModule_Call(ctx,\"INCRBY\",\"!sc\",argv[1],\"10\");\n```\n\n----------------------------------------\n\nTITLE: Getting Client ID with RedisModule_GetClientId - C\nDESCRIPTION: Retrieves the ID of the current client calling the module command. The ID is guaranteed to be unique for each client and increases monotonically. Requires a RedisModuleCtx context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_77\n\nLANGUAGE: C\nCODE:\n```\nunsigned long long RedisModule_GetClientId(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: RedisModule_CreateCommand Function Prototype\nDESCRIPTION: The `RedisModule_CreateCommand` function registers a new command with the Redis core. It takes the module context, command name, command function, flags, and key position information as arguments. It returns `REDISMODULE_ERR` on failure.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_CreateCommand(RedisModuleCtx *ctx, const char *name,\n                              RedisModuleCmdFunc cmdfunc, const char *strflags,\n                              int firstkey, int lastkey, int keystep);\n```\n\n----------------------------------------\n\nTITLE: Iterating Redis Dictionary with RedisModule_DictNextC (C)\nDESCRIPTION: This code snippet demonstrates how to iterate through a Redis dictionary using the `RedisModule_DictNextC` function. It retrieves the key and data associated with each element in the dictionary. The iterator must be created elsewhere. The example shows retrieving key and data until the end of the dictionary is reached.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_253\n\nLANGUAGE: c\nCODE:\n```\n     ... create the iterator here ...\n     char *key;\n     void *data;\n     while((key = RedisModule_DictNextC(iter,&keylen,&data)) != NULL) {\n         printf(\"%.*s %p\\n\", (int)keylen, key, data);\n     }\n```\n\n----------------------------------------\n\nTITLE: Adding String Buffer to Digest (RedisModule_DigestAddStringBuffer)\nDESCRIPTION: This function adds a new string element to the digest. This function can be called multiple times, one element after the other, for all the elements that constitute a given data structure. It is part of the DEBUG DIGEST interface for module types.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_178\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_DigestAddStringBuffer(RedisModuleDigest *md,\n                                           const char *ele,\n                                           size_t len);\n```\n\n----------------------------------------\n\nTITLE: Define aeEventLoop Structure\nDESCRIPTION: Defines the structure `aeEventLoop` which represents the Redis event loop. It contains fields for managing file events, time events, the maximum file descriptor, and other relevant data for the event loop.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-rediseventlib.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct aeEventLoop\n    {\n        int maxfd;\n        long long timeEventNextId;\n        aeFileEvent events[AE_SETSIZE]; /* Registered events */\n        aeFiredEvent fired[AE_SETSIZE]; /* Fired events */\n        aeTimeEvent *timeEventHead;\n        int stop;\n        void *apidata; /* This is used for polling API specific data */\n        aeBeforeSleepProc *beforesleep;\n    } aeEventLoop;\n```\n\n----------------------------------------\n\nTITLE: Executing Latency Doctor Command - Redis\nDESCRIPTION: This code snippet shows how to execute the `LATENCY DOCTOR` command in the Redis CLI to diagnose latency-related issues. The command provides an analysis of observed latency spikes and suggests potential remedies. It requires a running Redis instance accessible through the Redis CLI.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/latency-doctor.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n127.0.0.1:6379> latency doctor\n```\n\n----------------------------------------\n\nTITLE: Checking API Function Availability\nDESCRIPTION: This snippet illustrates how to check if a specific Redis Modules API function is available in the currently running Redis version.  This is done by checking if the function pointer is NULL.  If it is NULL, the function is not available and should not be called.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nif (RedisModule_SetCommandInfo != NULL) {\n    RedisModule_SetCommandInfo(cmd, &info);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Redis Server with TLS\nDESCRIPTION: This command starts a Redis server with TLS enabled on port 6379 and disables the non-TLS port. It requires the paths to the TLS certificate, key, and CA certificate files. These files are typically generated by `./utils/gen-test-certs.sh`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/encryption.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./src/redis-server --tls-port 6379 --port 0 \\\n    --tls-cert-file ./tests/tls/redis.crt \\\n    --tls-key-file ./tests/tls/redis.key \\\n    --tls-ca-cert-file ./tests/tls/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Converting String to Long Double\nDESCRIPTION: RedisModule_StringToLongDouble converts the string into a long double, storing it at *ld. Returns REDISMODULE_OK on success or REDISMODULE_ERR if the string is not a valid string representation of a double value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_47\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringToLongDouble(const RedisModuleString *str,\n                                       long double *ld);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Stream Information with XINFO STREAM FULL\nDESCRIPTION: This example showcases the retrieval of comprehensive stream information, including all entries and detailed consumer group data, using the `XINFO STREAM FULL` command. This requires a Redis server with a stream, entries added to it, and a consumer group created.  The `FULL` modifier includes entries and detailed consumer group information.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xinfo-stream.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n> XADD mystream * foo bar\n\"1638125133432-0\"\n> XADD mystream * foo bar2\n\"1638125141232-0\"\n> XGROUP CREATE mystream mygroup 0-0\nOK\n> XREADGROUP GROUP mygroup Alice COUNT 1 STREAMS mystream >\n1) 1) \"mystream\"\n   2) 1) 1) \"1638125133432-0\"\n         2) 1) \"foo\"\n            2) \"bar\"\n> XINFO STREAM mystream FULL\n 1) \"length\"\n 2) (integer) 2\n 3) \"radix-tree-keys\"\n 4) (integer) 1\n 5) \"radix-tree-nodes\"\n 6) (integer) 2\n 7) \"last-generated-id\"\n 8) \"1638125141232-0\"\n 9) \"max-deleted-entry-id\"\n10) \"0-0\"\n11) \"entries-added\"\n12) (integer) 2\n13) \"entries\"\n14) 1) 1) \"1638125133432-0\"\n       2) 1) \"foo\"\n          2) \"bar\"\n    2) 1) \"1638125141232-0\"\n       2) 1) \"foo\"\n          2) \"bar2\"\n15) \"groups\"\n16) 1)  1) \"name\"\n        2) \"mygroup\"\n        3) \"last-delivered-id\"\n        4) \"1638125133432-0\"\n        5) \"entries-read\"\n        6) (integer) 1\n        7) \"lag\"\n        8) (integer) 1\n        9) \"pel-count\"\n       10) (integer) 1\n       11) \"pending\"\n       12) 1) 1) \"1638125133432-0\"\n              2) \"Alice\"\n              3) (integer) 1638125153423\n              4) (integer) 1\n       13) \"consumers\"\n       14) 1) 1) \"name\"\n              2) \"Alice\"\n              3) \"seen-time\"\n              4) (integer) 1638125133422\n              5) \"active-time\"\n              6) (integer) 1638125133432\n              7) \"pel-count\"\n              8) (integer) 1\n              9) \"pending\"\n              10) 1) 1) \"1638125133432-0\"\n                     2) (integer) 1638125133432\n                     3) (integer) 1\n```\n\n----------------------------------------\n\nTITLE: Kill Client by Address - Redis\nDESCRIPTION: This snippet demonstrates the old format of the CLIENT KILL command, which closes a client connection based on its IP address and port. The `addr:port` should match the `addr` field returned by the `CLIENT LIST` command. It is a simple method for terminating specific client connections.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-kill.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCLIENT KILL addr:port\n```\n\n----------------------------------------\n\nTITLE: Consumer Group Usage Example in Pseudo-Code\nDESCRIPTION: This pseudo-code demonstrates how to use XREADGROUP to read new messages, process them, and acknowledge them using XACK.  It showcases continuous message consumption from a Redis stream using a consumer group, including handling timeouts and message processing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xreadgroup.md#_snippet_0\n\nLANGUAGE: Pseudo-Code\nCODE:\n```\nWHILE true\n    entries = XREADGROUP GROUP $GroupName $ConsumerName BLOCK 2000 COUNT 10 STREAMS mystream >\n    if entries == nil\n        puts \"Timeout... try again\"\n        CONTINUE\n    end\n\n    FOREACH entries AS stream_entries\n        FOREACH stream_entries as message\n            process_message(message.id,message.fields)\n\n            # ACK the message as processed\n            XACK mystream $GroupName message.id\n        END\n    END\nEND\n```\n\n----------------------------------------\n\nTITLE: Authenticating Client With ACL User Name - RedisModule_AuthenticateClientWithACLUser\nDESCRIPTION: Authenticates the current context's user with a Redis ACL user identified by name. It takes the user's name and length, a callback function, private data, and a client ID pointer. Returns `REDISMODULE_ERR` if the user is disabled or does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_236\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_AuthenticateClientWithACLUser(RedisModuleCtx *ctx,\n                                                  const char *name,\n                                                  size_t len,\n                                                  RedisModuleUserChangedFunc callback,\n                                                  void *privdata,\n                                                  uint64_t *client_id);\n```\n\n----------------------------------------\n\nTITLE: Struct Size Example in Redis Lua\nDESCRIPTION: Demonstrates how to use the `struct.size()` function within a Redis Lua script to determine the size, in bytes, of a struct based on a specified format string. The format string 'HH' represents two unsigned short values. The script returns the size of the struct.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_24\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return struct.size('HH')\" 0\n(integer) 4\n```\n\n----------------------------------------\n\nTITLE: Executing a command N times in interactive mode\nDESCRIPTION: This shows how to execute the same command multiple times in interactive mode by prefixing the command name with a number. In the example, the `INCR mycounter` command is executed 5 times, incrementing the counter each time.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> 5 INCR mycounter\n(integer) 1\n(integer) 2\n(integer) 3\n(integer) 4\n(integer) 5\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Pub/Sub Channels with Redis CLI\nDESCRIPTION: This command subscribes the `redis-cli` to a Pub/Sub channel using the `PSUBSCRIBE` command. The terminal will be blocked, waiting for messages published to the channel. Ctrl-C is used to exit the Pub/Sub mode.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli PSUBSCRIBE '*'\n```\n\n----------------------------------------\n\nTITLE: Registering Redis functions with flags in Lua\nDESCRIPTION: This Lua code snippet demonstrates how to register Redis functions with specific flags, such as 'no-writes'. This allows the function to be executed on read-only replicas using FCALL_RO. The `redis.register_function` method is used with named arguments to specify the function name, callback, and flags.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nredis.register_function('my_hset', my_hset)\nredis.register_function{\n  function_name='my_hgetall',\n  callback=my_hgetall,\n  flags={ 'no-writes' }\n}\nredis.register_function{\n  function_name='my_hlastmodified',\n  callback=my_hlastmodified,\n  flags={ 'no-writes' }\n}\n```\n\n----------------------------------------\n\nTITLE: Truncating String Value of Redis Key (C)\nDESCRIPTION: Resizes the string value of a Redis key. If the new length is greater than the old one, it is padded with zero bytes.  `RedisModule_StringDMA` must be called again after this function to continue DMA access. Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` on error (key not open for writing, not a string, or resize exceeds 512MB). Requires a RedisModuleKey pointer and the new length as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_109\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StringTruncate(RedisModuleKey *key, size_t newlen);\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Time of Redis Key (C)\nDESCRIPTION: Sets a new expiration time for a Redis key in milliseconds.  Setting `REDISMODULE_NO_EXPIRE` cancels any existing expiration (equivalent to the PERSIST command). Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` if the key is not open for writing or is empty. Takes a RedisModuleKey pointer and the expiration time in milliseconds as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_97\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_SetExpire(RedisModuleKey *key, mstime_t expire);\n```\n\n----------------------------------------\n\nTITLE: RedisModuleModuleChange Structure (C)\nDESCRIPTION: This code defines the `RedisModuleModuleChange` structure provided during the `RedisModuleEvent_ModuleChange` event. The fields in the struct provides the name of the loaded/unloaded module via `module_name` and the version of the module being loaded/unloaded via `module_version`\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_288\n\nLANGUAGE: c\nCODE:\n```\nconst char* module_name;  // Name of module loaded or unloaded.\n        int32_t module_version;  // Module version.\n```\n\n----------------------------------------\n\nTITLE: Getting Detailed Information About Pending Messages (XPENDING with options)\nDESCRIPTION: This command fetches detailed information about pending messages in the consumer group, including message ID, consumer name, idle time in milliseconds, and number of deliveries. It uses the start ID, end ID, and count arguments to control the information returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_27\n\nLANGUAGE: redis\nCODE:\n```\n> XPENDING race:italy italy_riders - + 10\n```\n\n----------------------------------------\n\nTITLE: Setting Key and Expiration with EXPIREAT\nDESCRIPTION: This example demonstrates setting a key, checking its existence, setting an expiration time using EXPIREAT with a Unix timestamp, and then checking its existence again. The Unix timestamp represents the absolute time when the key should expire.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/expireat.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nEXISTS mykey\nEXPIREAT mykey 1293840000\nEXISTS mykey\n```\n\n----------------------------------------\n\nTITLE: Get Stream Information using XINFO STREAM\nDESCRIPTION: This command retrieves information about a Redis stream, including its length, radix tree keys and nodes, last generated ID, number of groups, and the first and last entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_32\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> XINFO STREAM race:italy\n 1) \"length\"\n 2) (integer) 5\n 3) \"radix-tree-keys\"\n 4) (integer) 1\n 5) \"radix-tree-nodes\"\n 6) (integer) 2\n 7) \"last-generated-id\"\n 8) \"1692632678249-0\"\n 9) \"groups\"\n10) (integer) 1\n11) \"first-entry\"\n12) 1) \"1692632639151-0\"\n    2) 1) \"rider\"\n       2) \"Castilla\"\n13) \"last-entry\"\n14) 1) \"1692632678249-0\"\n    2) 1) \"rider\"\n       2) \"Norem\"\n```\n\n----------------------------------------\n\nTITLE: Using ZADD and ZINCRBY for Leaderboard Updates - Redis\nDESCRIPTION: This example shows how to use `ZADD` and `ZINCRBY` to update scores in a Redis sorted set representing a leaderboard. `ZADD` sets the score directly, while `ZINCRBY` increments the existing score. `ZADD` returns 0 when the member already exists (the score is updated), while `ZINCRBY` returns the new score.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n> ZADD racer_scores 100 \"Wood\"\n(integer) 1\n> ZADD racer_scores 100 \"Henshaw\"\n(integer) 1\n> ZADD racer_scores 150 \"Henshaw\"\n(integer) 0\n> ZINCRBY racer_scores 50 \"Wood\"\n\"150\"\n> ZINCRBY racer_scores 50 \"Henshaw\"\n\"200\"\n```\n\n----------------------------------------\n\nTITLE: Getting Element at Index in Redis List\nDESCRIPTION: This function retrieves the element at a specified index within a Redis list. The index is zero-based and can be negative to access elements from the end.  The function returns a RedisModuleString that must be freed by the user. Returns NULL if the key is NULL, not a list, not opened for reading, or if the index is out of bounds, setting errno accordingly (EINVAL, ENOTSUP, EBADF, or EDOM).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_112\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_ListGet(RedisModuleKey *key, long index);\n```\n\n----------------------------------------\n\nTITLE: Sentinel Monitor Configuration\nDESCRIPTION: This snippet defines the structure of the `sentinel monitor` statement used in the Sentinel configuration file.  It specifies the master's name, IP address, port, and quorum value. The quorum dictates the number of Sentinels that must agree on a master's unavailability before a failover process is initiated. The quorum is only used for failure *detection*; the actual failover requires a *majority* of Sentinels to authorize.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nsentinel monitor <master-name> <ip> <port> <quorum>\n```\n\n----------------------------------------\n\nTITLE: Getting Set Element from Call Reply - C\nDESCRIPTION: Retrieves a specific element from a set-type RedisModuleCallReply. Returns NULL if the reply type is incorrect or the index is out of range.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_151\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleCallReply *RedisModule_CallReplySetElement(RedisModuleCallReply *reply,\n                                                          size_t idx);\n```\n\n----------------------------------------\n\nTITLE: SENTINEL replicas Command\nDESCRIPTION: This command is used to retrieve a list of replica instances associated with a given master name from a Sentinel instance.  It replaces `SENTINEL get-master-addr-by-name` when the client wants to connect to a replica for read scaling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/sentinel-clients.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nSENTINEL replicas master-name\n```\n\n----------------------------------------\n\nTITLE: Checking for Blocked Timeout Request - RedisModule_IsBlockedTimeoutRequest\nDESCRIPTION: Returns non-zero if a module command was called to fill the reply for a blocked client that timed out. This identifies if the current operation handles a blocked client due to a timeout.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_202\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_IsBlockedTimeoutRequest(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Authenticating Client With User - RedisModule_AuthenticateClientWithUser\nDESCRIPTION: Authenticates the current context's user with the provided Redis ACL user. It takes a `RedisModuleUser` pointer, a callback function `RedisModuleUserChangedFunc`, private data `privdata`, and a client ID pointer `client_id`. Returns `REDISMODULE_ERR` if the user is disabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_235\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_AuthenticateClientWithUser(RedisModuleCtx *ctx,\n                                               RedisModuleUser *module_user,\n                                               RedisModuleUserChangedFunc callback,\n                                               void *privdata,\n                                               uint64_t *client_id);\n```\n\n----------------------------------------\n\nTITLE: Adding a third stream entry\nDESCRIPTION: Adds a third new entry to the `race:france` stream with different racer data. Again, the `*` indicates auto-generated ID, and the command returns the generated ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:france * rider Prickett speed 29.7 position 2 location_id 1\n```\n\n----------------------------------------\n\nTITLE: Accessing String Reply Pointer (C)\nDESCRIPTION: This snippet demonstrates how to access the string pointer and length from a RedisModuleCallReply of type string or error using `RedisModule_CallReplyStringPtr`. The returned pointer is `const` and should not be modified.  If the reply is not a string or error, it returns NULL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nsize_t len;\nchar *ptr = RedisModule_CallReplyStringPtr(reply,&len);\n```\n\n----------------------------------------\n\nTITLE: Loading Data Type from String with Encoding Version (RedisModule_LoadDataTypeFromStringEncver)\nDESCRIPTION: This function decodes a serialized representation of a module data type `mt`, in a specific encoding version `encver`, from string `str` and returns a newly allocated value. It reuses the '`rdb_load`' callback, and modules should generally use the `REDISMODULE_OPTIONS_HANDLE_IO_ERRORS` flag and make sure the de-serialization code properly checks and handles IO errors.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_181\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_LoadDataTypeFromStringEncver(const RedisModuleString *str,\n                                                   const moduleType *mt,\n                                                   int encver);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis as a Cache\nDESCRIPTION: This snippet provides an example configuration for using Redis as a cache.  It sets the `maxmemory` directive to 2mb, limiting the memory usage to 2 megabytes, and sets the `maxmemory-policy` to `allkeys-lru`, which evicts keys based on an approximated Least Recently Used (LRU) algorithm.  This setup allows Redis to function similarly to memcached, automatically evicting keys when the memory limit is reached.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/config.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmaxmemory 2mb\nmaxmemory-policy allkeys-lru\n```\n\n----------------------------------------\n\nTITLE: Emitting AOF Command - C\nDESCRIPTION: This snippet shows the function signature for emitting an AOF command using the Redis Module API. `RedisModule_EmitAOF` allows modules to write custom commands to the AOF log during rewriting. It takes `RedisModuleIO` context, command name, and format string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_EmitAOF(RedisModuleIO *io, const char *cmdname, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Redis HELLO Command Example (RESP2)\nDESCRIPTION: This code snippet demonstrates the use of the HELLO command in the default RESP2 protocol.  The command returns a list of server and connection properties, including the Redis version, protocol version, client ID, mode, role, and loaded modules. It shows the output format when no arguments are provided in Redis 6.2.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hello.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> HELLO\n 1) \"server\"\n 2) \"redis\"\n 3) \"version\"\n 4) \"255.255.255\"\n 5) \"proto\"\n 6) (integer) 2\n 7) \"id\"\n 8) (integer) 5\n 9) \"mode\"\n10) \"standalone\"\n11) \"role\"\n12) \"master\"\n13) \"modules\"\n14) (empty array)\n```\n\n----------------------------------------\n\nTITLE: Getting Malloc Size of String in Redis Module (C)\nDESCRIPTION: This function returns the amount of memory allocated for a `RedisModuleString`. It's analogous to `RedisModule_MallocSize` but operates on `RedisModuleString` pointers.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_275\n\nLANGUAGE: c\nCODE:\n```\nsize_t RedisModule_MallocSizeString(RedisModuleString* str);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Keyspace Events with redis-cli\nDESCRIPTION: This snippet demonstrates how to subscribe to all keyspace events using `redis-cli`. It first configures the `notify-keyspace-events` parameter to listen for all key events and then uses `psubscribe` to subscribe to the relevant patterns.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace-notifications.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli config set notify-keyspace-events KEA\n$ redis-cli --csv psubscribe '__key*__:*'\nReading messages... (press Ctrl-C to quit)\n\"psubscribe\",\"__key*__:*\",1\n```\n\n----------------------------------------\n\nTITLE: Starting a Redis Module Dictionary Iterator\nDESCRIPTION: This function returns an iterator to traverse a Redis Module dictionary. The iterator can be setup in order to start iterating from the specified key by applying a comparison operator. Available operators are: `^`, `$`, `>`, `>=`, `<`, `<=`, `==`. The key is passed as a `RedisModuleString`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_252\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleDictIter *RedisModule_DictIteratorStart(RedisModuleDict *d,\n                                                       const char *op,\n                                                       RedisModuleString *key);\n```\n\n----------------------------------------\n\nTITLE: ZRANGE by Score Another Exclusive Range Example\nDESCRIPTION: Shows another ZRANGE usage with exclusive score range, returning all elements with scores strictly greater than 5 and strictly less than 10.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_4\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZRANGE zset (5 (10 BYSCORE\n```\n\n----------------------------------------\n\nTITLE: Remove Elements by Score Range in Redis\nDESCRIPTION: This example demonstrates how to use the `ZREMRANGEBYSCORE` command in Redis to remove elements from a sorted set based on their scores. It includes adding elements to the set, removing elements with scores between -inf and (2 (exclusive), and then displaying the remaining elements with their scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zremrangebyscore.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREMRANGEBYSCORE myzset -inf (2\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Getting a Detached Thread-Safe Context - RedisModule_GetDetachedThreadSafeContext\nDESCRIPTION: Returns a detached thread-safe context that is not associated with any specific blocked client, but is associated with the module's context. This is useful for logging purposes or to hold a global context over the long term.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_208\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleCtx *RedisModule_GetDetachedThreadSafeContext(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Redis Hash using HGETALL\nDESCRIPTION: This Redis command retrieves all fields and values from the hash `myhash` using the `HGETALL` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\nredis> HGETALL myhash\n```\n\n----------------------------------------\n\nTITLE: Getting Shared API in C\nDESCRIPTION: Retrieves a shared API pointer exported by another module.  The caller must cast the returned void pointer to the correct function pointer type. Returns NULL if the API is not available. Requires error handling to check for API availability.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_264\n\nLANGUAGE: C\nCODE:\n```\nvoid *RedisModule_GetSharedAPI(RedisModuleCtx *ctx, const char *apiname);\n```\n\n----------------------------------------\n\nTITLE: Migrate Command - Redis\nDESCRIPTION: This command migrates keys from one Redis instance to another atomically. It requires the target host, port, database ID (always 0 in Cluster), timeout, and a list of keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nMIGRATE target_host target_port \"\" target_database id timeout KEYS key1 key2 ...\n```\n\n----------------------------------------\n\nTITLE: Replying with Error Format\nDESCRIPTION: RedisModule_ReplyWithErrorFormat replies with the error created from a printf format and arguments. Note that 'fmt' must contain all the error, including the initial error code. The function always returns REDISMODULE_OK.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_55\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithErrorFormat(RedisModuleCtx *ctx,\n                                         const char *fmt,\n                                         ...);\n```\n\n----------------------------------------\n\nTITLE: Trimming a Stream By ID - C\nDESCRIPTION: This function trims a stream by ID, similar to XTRIM with MINID. It requires a RedisModuleKey opened for writing, flags for approximate trimming, and the minimum ID to keep. It returns the number of entries deleted, or a negative value on failure, setting errno.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_141\n\nLANGUAGE: C\nCODE:\n```\nlong long RedisModule_StreamTrimByID(RedisModuleKey *key,\n                                         int flags,\n                                         RedisModuleStreamID *id);\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving Native Type Data - C\nDESCRIPTION: This snippet shows how to create a new native type data structure if the key is empty, or retrieve the existing one if the key already has a value of the correct type.  It checks the key's type and either creates a new instance or retrieves the existing one using `RedisModule_ModuleTypeGetValue`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n/* Create an empty value object if the key is currently empty. */\nstruct some_private_struct *data;\nif (type == REDISMODULE_KEYTYPE_EMPTY) {\n    data = createMyDataStructure();\n    RedisModule_ModuleTypeSetValue(key,MyTyke,data);\n} else {\n    data = RedisModule_ModuleTypeGetValue(key);\n}\n/* Do something with 'data'... */\n```\n\n----------------------------------------\n\nTITLE: Replying with an Array - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to reply to a client with an array using the Redis Module API. The function `RedisModule_ReplyWithArray` initiates an array reply, and subsequent `ReplyWith*` functions populate its elements. `RedisModule_ReplySetArrayLength` can be used to set the array length when it is not known beforehand.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_57\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithArray(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with redis-cli in Bash\nDESCRIPTION: This command opens the Redis command-line interface (REPL). It allows users to interact with the Redis server and execute commands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli\n```\n\n----------------------------------------\n\nTITLE: Non-Blocking XREAD Example in Redis\nDESCRIPTION: This example demonstrates the non-blocking form of the XREAD command in Redis. It retrieves a specified number of new entries from a stream, given the stream's key and the ID from which to start reading.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n> XREAD COUNT 2 STREAMS race:france 0\n1) 1) \"race:france\"\n   2) 1) 1) \"1692632086370-0\"\n         2) 1) \"rider\"\n            2) \"Castilla\"\n            3) \"speed\"\n            4) \"30.2\"\n            5) \"position\"\n            6) \"1\"\n            7) \"location_id\"\n            8) \"1\"\n      2) 1) \"1692632094485-0\"\n         2) 1) \"rider\"\n            2) \"Norem\"\n            3) \"speed\"\n            4) \"28.8\"\n            5) \"position\"\n            6) \"3\"\n            7) \"location_id\"\n            8) \"1\"\n```\n\n----------------------------------------\n\nTITLE: Redis Transaction Error Handling\nDESCRIPTION: This example demonstrates how Redis handles errors within a transaction using the raw protocol. The 'LPOP a' command fails after 'SET a abc' because 'a' is a string, but other commands in the transaction are still processed. The EXEC command returns an array indicating the success or failure of each command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nMULTI\n+OK\nSET a abc\n+QUEUED\nLPOP a\n+QUEUED\nEXEC\n*2\n+OK\n-WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Deleting a Redis Function Library\nDESCRIPTION: This example demonstrates how to delete a function library in Redis. It first loads a library named 'mylib' with a function 'myfunc', calls the function, then deletes the library, and attempts to call the function again to show it no longer exists. The `FUNCTION DELETE` command removes the specified library and all functions within it.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-delete.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib \\n redis.register_function('myfunc', function(keys, args) return 'hello' end)\"\n\"mylib\"\nredis> FCALL myfunc 0\n\"hello\"\nredis> FUNCTION DELETE mylib\nOK\nredis> FCALL myfunc 0\n(error) ERR Function not found\n```\n\n----------------------------------------\n\nTITLE: Querying Redis JSON documents\nDESCRIPTION: This snippet demonstrates querying Redis JSON documents using the `FT.SEARCH` command. It searches for users with the name 'Paul' and filters the results by age between 30 and 40. It assumes that a Redis client `r` and an index `rs` have already been initialized.  The index should be named `idx:users`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nres = rs.search(\n    Query(\"Paul @age:[30 40]\")\n)\n# Result{1 total, docs: [Document {'id': 'user:3', 'payload': None, 'json': '{\"name\":\"Paul Zamir\",\"email\":\"paul.zamir@example.com\",\"age\":35,\"city\":\"Tel Aviv\"}'}]}\n```\n\n----------------------------------------\n\nTITLE: Struct Unpacking Example in Redis Lua\nDESCRIPTION: Demonstrates how to use the `struct.unpack()` function within a Redis Lua script to decode values from a struct-encoded string using a specified format. The format string 'HH' indicates two unsigned short values. The script returns a table containing the unpacked values. Note that the example also displays the length of the returned array/table\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_23\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return { struct.unpack('HH', ARGV[1]) }\" 0 \"\\x01\\x00\\x02\\x00\"\n1) (integer) 1\n2) (integer) 2\n3) (integer) 5\n```\n\n----------------------------------------\n\nTITLE: Initializing Sorted Set Lexicographical Range Iterator in Redis Module (C)\nDESCRIPTION: This function initializes a sorted set iterator to find the first element within a specified lexicographical range. It requires a `RedisModuleKey` and two `RedisModuleString` objects for min and max bounds. It returns `REDISMODULE_OK` on success, or `REDISMODULE_ERR` if the key is not a sorted set, is empty, or the lexicographical range format is invalid.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_124\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetFirstInLexRange(RedisModuleKey *key,\n                                        RedisModuleString *min,\n                                        RedisModuleString *max);\n```\n\n----------------------------------------\n\nTITLE: Querying Redis JSON with JSON Path\nDESCRIPTION: This snippet demonstrates querying Redis JSON documents and returning specific fields using JSON Path expressions. It searches for users with the name 'Paul' and returns the 'city' field. It assumes that a Redis client `r` and index `rs` have been initialized and connected. The index is assumed to be called `idx:users`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrs.search(\n    Query(\"Paul\").return_field(\"$.city\", as_field=\"city\")\n).docs\n# [Document {'id': 'user:1', 'payload': None, 'city': 'London'}, Document {'id': 'user:3', 'payload': None, 'city': 'Tel Aviv'}]\n```\n\n----------------------------------------\n\nTITLE: Monitoring Memory Swapping with vmstat\nDESCRIPTION: This code snippet demonstrates how to use the vmstat command to monitor memory swapping activity in a Linux system. The si and so columns indicate the amount of memory swapped from/to the swap file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vmstat 1\nprocs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa\n 0  0   3980 697932 147180 1406456    0    0     2     2    2    0  4  4 91  0\n 0  0   3980 697428 147180 1406580    0    0     0     0 19088 16104  9  6 84  0\n 0  0   3980 697296 147180 1406616    0    0     0    28 18936 16193  7  6 87  0\n 0  0   3980 697048 147180 1406640    0    0     0     0 18613 15987  6  6 88  0\n 2  0   3980 696924 147180 1406656    0    0     0     0 18744 16299  6  5 88  0\n 0  0   3980 697048 147180 1406688    0    0     0     4 18520 15974  6  6 88  0\n^C\n```\n\n----------------------------------------\n\nTITLE: Freeing Server Information Data in C\nDESCRIPTION: Frees memory allocated by `RedisModule_GetServerInfo`. The context pointer 'ctx' is needed only if the dictionary was created using the context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_255\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_FreeServerInfo(RedisModuleCtx *ctx,\n                                    RedisModuleServerInfoData *data);\n```\n\n----------------------------------------\n\nTITLE: BZPOPMAX Example in Redis\nDESCRIPTION: This example demonstrates how to use the BZPOPMAX command in Redis. It first deletes two sorted sets, then adds members to the first sorted set, and finally calls BZPOPMAX to retrieve the member with the highest score.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bzpopmax.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nredis> DEL zset1 zset2\n(integer) 0\nredis> ZADD zset1 0 a 1 b 2 c\n(integer) 3\nredis> BZPOPMAX zset1 zset2 0\n1) \"zset1\"\n2) \"c\"\n3) \"2\"\n```\n\n----------------------------------------\n\nTITLE: Listing Loaded Modules with MODULE LIST\nDESCRIPTION: Demonstrates how to list all currently loaded Redis modules using the `MODULE LIST` command. This command provides information about the loaded modules, including their names and versions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMODULE LIST\n```\n\n----------------------------------------\n\nTITLE: Disabling Client Tracking in Redis\nDESCRIPTION: Disables the tracking feature of the Redis server that was enabled with `CLIENT TRACKING on`. This command turns off the sending of invalidation messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-tracking.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCLIENT TRACKING off\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Effects Replication in Lua (Deprecated)\nDESCRIPTION: This Lua snippet demonstrates how to enable script effects replication in Redis versions prior to 7.0. By calling `redis.replicate_commands()` before any write operations, the commands generated by the script will be replicated instead of the script itself. This function is deprecated as of Redis 7.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nredis.replicate_commands()\n```\n\n----------------------------------------\n\nTITLE: Search JSON Documents and Filter by Age\nDESCRIPTION: Searches the \"idx:users\" index for users named \"Paul\" with an age between 30 and 40. It then selects and prints the \"json\" field from the search results.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar res = ft.Search(\"idx:users\", new Query(\"Paul @age:[30 40]\")).Documents.Select(x => x[\"json\"]);\nConsole.WriteLine(string.Join(\"\\n\", res)); \n// Prints: {\"name\":\"Paul Zamir\",\"email\":\"paul.zamir@example.com\",\"age\":35,\"city\":\"Tel Aviv\"}\n```\n\n----------------------------------------\n\nTITLE: Redis Command Reply Example\nDESCRIPTION: This JSON snippet shows the structure for defining command return values, specifically for the ACL CAT command.  It contains an array of strings, which, when processed, generate Markdown content describing the reply.  This structure is found in both `resp2_replies.json` and `resp3_replies.json`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  ...\n  \"ACL CAT\": [\n    \"One of the following:\",\n    \"* [Array reply](/docs/reference/protocol-spec#arrays): an array of [Bulk string reply](/docs/reference/protocol-spec#bulk-strings) elements representing ACL categories or commands in a given category.\",\n    \"* [Simple error reply](/docs/reference/protocol-spec#simple-errors): the command returns an error if an invalid category name is given.\"\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Redis from APT Repository on Ubuntu/Debian (Bash)\nDESCRIPTION: Adds the official Redis APT repository, updates the package index, and installs Redis on Ubuntu/Debian systems. This involves downloading the Redis GPG key, adding the repository to the APT sources, updating the package list with `apt-get update`, and finally installing Redis using `apt-get install redis`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-linux.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\nsudo apt-get install redis\n```\n\n----------------------------------------\n\nTITLE: ZDIFFSTORE Usage Example in Redis CLI\nDESCRIPTION: This example demonstrates how to use the ZDIFFSTORE command in the Redis CLI to calculate the difference between two sorted sets (zset1 and zset2) and store the result in a new sorted set named 'out'. The example shows the creation of the input sorted sets, the ZDIFFSTORE command, and then retrieval of the resulting sorted set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zdiffstore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset1 3 \"three\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZDIFFSTORE out 2 zset1 zset2\nZRANGE out 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Importing and Migrating Slots Examples\nDESCRIPTION: These are a few examples of importing and migrating slots format. The format consists of the slot number and the node ID from/to which the slot is being migrated. These special slot entries are added as additional info to the node flagged as `myself`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-nodes.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n* `[93-<-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]`\n* `[1002-<-67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1]`\n* `[77->-e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca]`\n* `[16311->-292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f]`\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Replicas for Writes in Redis\nDESCRIPTION: This configuration sets the minimum number of replicas required for a Redis master to accept write operations. It helps to limit data divergence between master and replicas during network partitions by making the master unavailable if it cannot replicate to the specified number of replicas within a given lag.  These settings are configured in the `redis.conf` file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nmin-replicas-to-write 1\nmin-replicas-max-lag 10\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis User ACL Information with ACL GETUSER (RESP3)\nDESCRIPTION: This snippet demonstrates using ACL GETUSER with RESP3 to retrieve user details as a map, enhancing readability and parsability. The output includes flags, passwords, allowed commands, and key access patterns.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n> ACL GETUSER alice\n1# \"flags\" => 1~ \"on\"\n2# \"passwords\" => 1) \"2d9c75273d72b32df726fb545c8a4edc719f0a95a6fd993950b10c474ad9c927\"\n3# \"commands\" => \"-@all +get\"\n4# \"keys\" => \"~cached:*\"\n5# \"channels\" => \"\"\n6# \"selectors\" => (empty array)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Password Only using AUTH Command in Redis\nDESCRIPTION: This snippet shows the backward-compatible form of the `AUTH` command in Redis.  When only a password is provided, it's assumed to be for the 'default' user.  This maintains compatibility with older Redis clients and applications, simplifying the authentication process when ACLs are not strictly enforced for all users.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAUTH <password>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hash Keys using HKEYS in Redis CLI\nDESCRIPTION: This example demonstrates how to retrieve all field names (keys) from a Redis hash named 'myhash' using the HKEYS command. First, the example sets two fields, 'field1' and 'field2', with corresponding values. Then, it uses HKEYS to retrieve the list of field names within the hash. The output will be a list containing 'field1' and 'field2'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hkeys.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nHSET myhash field1 \"Hello\"\nHSET myhash field2 \"World\"\nHKEYS myhash\n```\n\n----------------------------------------\n\nTITLE: Setting Config Epoch\nDESCRIPTION: This section explains how 'redis-cli' uses the 'CLUSTER SET-CONFIG-EPOCH' command at cluster startup to ensure all nodes start with a different configEpoch.  This command is used for initial setup, and nodes will automatically update their configuration epoch if they are misconfigured.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n`CLUSTER SET-CONFIG-EPOCH`\n```\n\n----------------------------------------\n\nTITLE: Trigger AOF Rewriting using redis-cli\nDESCRIPTION: This code demonstrates how to manually trigger an AOF rewrite using the `redis-cli BGREWRITEAOF` command. This command initiates the rewriting process in the background, reducing the AOF file size.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli BGREWRITEAOF\n```\n\n----------------------------------------\n\nTITLE: Blocking a Redis Module Client on Keys\nDESCRIPTION: This code snippet demonstrates how to block a client and associate it with specific keys using `RedisModule_BlockClientOnKeys`. It requires a `RedisModuleCtx`, a reply callback function (`reply_callback`), and a private data pointer. When the key receives new data Redis unblocks the client and `reply_callback` is called.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_195\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleBlockedClient *RedisModule_BlockClientOnKeys(RedisModuleCtx *ctx,\n                                                            RedisModuleCmdFunc reply_callback,\n                                                            ;\n```\n\n----------------------------------------\n\nTITLE: Delete Key\nDESCRIPTION: Deletes a key. `RedisModule_DeleteKey` deletes a key. `key` is the RedisModuleKey pointer. Returns `REDISMODULE_ERR` if the key is not open for writing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_38\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_DeleteKey(key);\n```\n\n----------------------------------------\n\nTITLE: Defrag Cursor Get - C\nDESCRIPTION: Retrieves a cursor value previously stored using `RedisModule_DefragCursorSet`.  Returns `REDISMODULE_OK` on success and sets the cursor value. Returns `REDISMODULE_ERR` if not called during a late defrag operation. Requires a `RedisModuleDefragCtx` context and a pointer to an unsigned long to store the cursor value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_306\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DefragCursorGet(RedisModuleDefragCtx *ctx,\n                                    unsigned long *cursor);\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Node Fields Format\nDESCRIPTION: This example shows the format of the data in each line of the `CLUSTER NODES` output. The fields include the node ID, address, flags, master node ID (if the node is a replica), ping and pong timestamps, configuration epoch, link state, and the list of hash slots served by the node. Understanding this format is crucial for parsing and interpreting the cluster configuration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-nodes.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<id> <ip:port@cport[,hostname]> <flags> <master> <ping-sent> <pong-recv> <config-epoch> <link-state> <slot> <slot> ... <slot>\n```\n\n----------------------------------------\n\nTITLE: Listing Pub/Sub Shard Channels with Pattern - Redis CLI\nDESCRIPTION: This example demonstrates how to list active Pub/Sub shard channels in Redis using the `PUBSUB SHARDCHANNELS` command with a glob-style pattern. The pattern `o*` filters the results to only include channels that start with the letter 'o'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pubsub-shardchannels.md#_snippet_1\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> PUBSUB SHARDCHANNELS o*\n1) \"orders\"\n```\n\n----------------------------------------\n\nTITLE: Loading Data Type from String (RedisModule_LoadDataTypeFromString)\nDESCRIPTION: This function decodes a serialized representation of a module data type from a RedisModuleString. It's similar to `RedisModule_LoadDataTypeFromStringEncver`, but it's the original version of the API, kept for backward compatibility. This leverages the `rdb_load` callback.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_182\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_LoadDataTypeFromString(const RedisModuleString *str,\n                                             const moduleType *mt);\n```\n\n----------------------------------------\n\nTITLE: Aborting a Blocked Client Operation - RedisModule_AbortBlock\nDESCRIPTION: Aborts a blocked client blocking operation, unblocking the client without firing any callbacks. This function forcefully releases the blocked client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_199\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_AbortBlock(RedisModuleBlockedClient *bc);\n```\n\n----------------------------------------\n\nTITLE: Checking for Blocked Reply Request - RedisModule_IsBlockedReplyRequest\nDESCRIPTION: Returns non-zero if a module command was called to fill the reply for a blocked client. This helps to identify if the current operation is part of handling a blocked client's reply.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_201\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_IsBlockedReplyRequest(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Appending Buffer to RedisModuleString\nDESCRIPTION: RedisModule_StringAppendBuffer appends the specified buffer to the string 'str'. The string must be a string created by the user that is referenced only a single time, otherwise REDISMODULE_ERR is returned and the operation is not performed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_50\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringAppendBuffer(RedisModuleCtx *ctx,\n                                       RedisModuleString *str,\n                                       const char *buf,\n                                       size_t len);\n```\n\n----------------------------------------\n\nTITLE: Loading Module at Runtime with MODULE LOAD\nDESCRIPTION: Demonstrates how to load a Redis module at runtime using the `MODULE LOAD` command.  This loads the module while the Redis server is running.  The path to the module's shared object file is required.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nMODULE LOAD /path/to/mymodule.so\n```\n\n----------------------------------------\n\nTITLE: Scanning Key Elements with RedisModule_ScanKey in C\nDESCRIPTION: This code snippet demonstrates how to use the `RedisModule_ScanKey` API to scan elements within a hash, set, or sorted set key. It shows how to create a cursor, open a key, iterate through the key's elements using a callback function, close the key, and destroy the cursor. It also illustrates how to use this API from another thread while acquiring the lock and re-opening the key each time. Note that deleting the key being iterated is unsafe.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_282\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleScanCursor *c = RedisModule_ScanCursorCreate();\n     RedisModuleKey *key = RedisModule_OpenKey(...)\n     while(RedisModule_ScanKey(key, c, callback, privateData));\n     RedisModule_CloseKey(key);\n     RedisModule_ScanCursorDestroy(c);\n```\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleScanCursor *c = RedisModule_ScanCursorCreate();\n     RedisModule_ThreadSafeContextLock(ctx);\n     RedisModuleKey *key = RedisModule_OpenKey(...)\n     while(RedisModule_ScanKey(ctx, c, callback, privateData)){\n         RedisModule_CloseKey(key);\n         RedisModule_ThreadSafeContextUnlock(ctx);\n         // do some background job\n         RedisModule_ThreadSafeContextLock(ctx);\n         RedisModuleKey *key = RedisModule_OpenKey(...)\n     }\n     RedisModule_CloseKey(key);\n     RedisModule_ScanCursorDestroy(c);\n```\n\n----------------------------------------\n\nTITLE: Replicating a Command Verbatim with RedisModule_ReplicateVerbatim - C\nDESCRIPTION: Replicates a command exactly as invoked by the client without wrapping it in a MULTI/EXEC stanza. It requires a RedisModuleCtx context. Useful when the command can be re-executed to deterministically recreate the new state.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_76\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_ReplicateVerbatim(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Open Key - Redis Module API (C)\nDESCRIPTION: Returns a handle representing a Redis key, allowing operations to be performed on the key. The handle must be closed with `RedisModule_CloseKey()`. If the key does not exist and `REDISMODULE_WRITE` mode is requested, the handle is still returned. Available since Redis 4.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_89\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleKey *RedisModule_OpenKey(RedisModuleCtx *ctx,\n                                        robj *keyname,\n                                        int mode);\n```\n\n----------------------------------------\n\nTITLE: Stopping Redis Sorted Set Iterator\nDESCRIPTION: This function stops an ongoing sorted set iteration. No return value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_120\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ZsetRangeStop(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Module String (C)\nDESCRIPTION: This snippet demonstrates how to create a new `RedisModuleString` object using `RedisModule_CreateString`.  The function takes a context, a character pointer (`ptr`), and a length (`len`) as input.  The returned string must be freed with `RedisModule_FreeString`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_CreateString(RedisModuleCtx *ctx, const char *ptr, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Listing ACLs for the Default User in Redis\nDESCRIPTION: This snippet shows the use of the `ACL LIST` command to display the ACL configuration for the default user in Redis. The output shows the current ACL settings, including whether the user is active, password requirements, key access, Pub/Sub channel access, and command permissions. This command is helpful for verifying the ACL configuration and understanding the default user's privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> ACL LIST\n1) \"user default on nopass ~* &* +@all\"\n```\n\n----------------------------------------\n\nTITLE: Array of Strings Encoding in RESP\nDESCRIPTION: This snippet illustrates the encoding of an array containing two strings, \"hello\" and \"world\", in RESP format.  Each string is encoded as a bulk string within the array structure.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n*2\\r\\n$5\\r\\nhello\\r\\n$5\\r\\nworld\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Information from Lua Scripts\nDESCRIPTION: This code snippet demonstrates how to use the `redis.debug()` command within a Lua script executed by Redis to log values to the debug console.  This is useful for inspecting the state of variables during script execution when using a debugger. `redis.debug()` accepts multiple arguments of different types.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlua debugger> list\n-> 1   local a = {1,2,3}\n   2   local b = false\n   3   redis.debug(a,b)\nlua debugger> continue\n<debug> line 3: {1; 2; 3}, false\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from Redis Cluster\nDESCRIPTION: This snippet shows how to remove a node from a Redis Cluster using the `CLUSTER FORGET <node-id>` command. It explains that the command removes the node from other nodes' tables and sets a 60-second ban to prevent re-addition via gossip.  The administrator has 60 seconds to remove the node from all the nodes, preventing the re-addition of the node due to auto discovery.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n`CLUSTER FORGET <node-id>`\n```\n\n----------------------------------------\n\nTITLE: Single Function Blocking Command Implementation (C)\nDESCRIPTION: This code demonstrates how to implement reply and timeout callbacks within the main command function using `RedisModule_IsBlockedReplyRequest` and `RedisModule_IsBlockedTimeoutRequest`. This simplifies the code by reducing the number of functions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nint Example_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv,\n                             int argc)\n    {\n        if (RedisModule_IsBlockedReplyRequest(ctx)) {\n            long *mynumber = RedisModule_GetBlockedClientPrivateData(ctx);\n            return RedisModule_ReplyWithLongLong(ctx,mynumber);\n        } else if (RedisModule_IsBlockedTimeoutRequest) {\n            return RedisModule_ReplyWithNull(ctx);\n        }\n\n        RedisModuleBlockedClient *bc =\n            RedisModule_BlockClient(ctx,reply_func,timeout_func,NULL,0);\n\n        pthread_t tid;\n        if (pthread_create(&tid,NULL,threadmain,bc) != 0) {\n            RedisModule_AbortBlock(bc);\n```\n\n----------------------------------------\n\nTITLE: Redis ZREVRANGEBYSCORE Examples\nDESCRIPTION: Examples demonstrating the usage of the Redis ZREVRANGEBYSCORE command to retrieve elements from a sorted set within a specified score range. The examples showcase different score ranges, including positive infinity (+inf) and negative infinity (-inf), as well as exclusive score ranges using parentheses.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrevrangebyscore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREVRANGEBYSCORE myzset +inf -inf\nZREVRANGEBYSCORE myzset 2 1\nZREVRANGEBYSCORE myzset 2 (1\nZREVRANGEBYSCORE myzset (2 (1\n```\n\n----------------------------------------\n\nTITLE: Adding Hexastore entries to Redis Sorted Set\nDESCRIPTION: This snippet demonstrates how to add entries to a Redis sorted set to represent relationships between objects in a hexastore.  It uses the ZADD command with a score of 0 to add subject-predicate-object combinations with different orderings (spo, sop, ops, osp, pso, pos) to the 'myindex' sorted set. This allows querying the relationships from different perspectives.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_20\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 spo:antirez:is-friend-of:matteocollina\n```\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 sop:antirez:matteocollina:is-friend-of\n```\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 ops:matteocollina:is-friend-of:antirez\n```\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 osp:matteocollina:antirez:is-friend-of\n```\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 pso:is-friend-of:antirez:matteocollina\n```\n\nLANGUAGE: redis\nCODE:\n```\nZADD myindex 0 pos:is-friend-of:matteocollina:antirez\n```\n\n----------------------------------------\n\nTITLE: Running RedisInsight in Docker (Persistent)\nDESCRIPTION: This command runs RedisInsight in a Docker container, mapping port 5540 on the host to port 5540 in the container. It mounts a Docker volume named `redisinsight` to the `/data` path within the container, enabling data persistence. The `--name` option assigns the name `redisinsight` to the container. The `-d` flag runs the container in detached mode.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-aws.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest -v redisinsight:/data\n```\n\n----------------------------------------\n\nTITLE: LTRIM with Negative Indexes for Most Recent Items\nDESCRIPTION: This example shows how to use `LTRIM` with negative indexes to keep only the most recently added elements in a list. The `RPUSH` command adds elements, and `LTRIM` with negative indexes (e.g., -3 -1) keeps only the last three elements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_9\n\nLANGUAGE: redis\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2 bike:3 bike:4 bike:5\n(integer) 5\n> LTRIM bikes:repairs -3 -1\nOK\n> LRANGE bikes:repairs 0 -1\n1) \"bike:3\"\n2) \"bike:4\"\n3) \"bike:5\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Argument into Filtered Command in Redis Module (C)\nDESCRIPTION: This function inserts a new argument into a filtered command at a given position. It accepts a `RedisModuleCommandFilterCtx`, the desired position for insertion (`int pos`), and the `RedisModuleString` to be inserted. The `RedisModuleString` must be managed manually and not auto-memory allocated, as Redis will use it after the filter context is destroyed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_269\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_CommandFilterArgInsert(RedisModuleCommandFilterCtx *fctx,\n                                           int pos,\n                                           RedisModuleString *arg);\n```\n\n----------------------------------------\n\nTITLE: Monitoring Redis using telnet\nDESCRIPTION: This code snippet demonstrates how to use `telnet` to connect to a Redis server and issue the `MONITOR` command. It displays the output stream of Redis commands and explains how to terminate the `MONITOR` session by sending the `QUIT` or `RESET` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/monitor.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ telnet localhost 6379\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nMONITOR\n+OK\n+1339518083.107412 [0 127.0.0.1:60866] \"keys\" \"*\"\n+1339518087.877697 [0 127.0.0.1:60866] \"dbsize\"\n+1339518090.420270 [0 127.0.0.1:60866] \"set\" \"x\" \"6\"\n+1339518096.506257 [0 127.0.0.1:60866] \"get\" \"x\"\n+1339518099.363765 [0 127.0.0.1:60866] \"del\" \"x\"\n+1339518100.544926 [0 127.0.0.1:60866] \"get\" \"x\"\nQUIT\n+OK\nConnection closed by foreign host.\n```\n\n----------------------------------------\n\nTITLE: Setting Command Information using RedisModule_SetCommandInfo (C)\nDESCRIPTION: This code demonstrates the usage of `RedisModule_SetCommandInfo` function. It takes a `RedisModuleCommand` pointer (obtained via `RedisModule_CreateCommand` and `RedisModule_GetCommand`) and a `RedisModuleCommandInfo` struct as arguments. The function configures additional information about a command such as summary, complexity and key specifications. This function can only be called once for each command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_SetCommandInfo(RedisModuleCommand *command,\n                                   const RedisModuleCommandInfo *info);\n```\n\n----------------------------------------\n\nTITLE: Defrag Alloc - C\nDESCRIPTION: Defragments a memory allocation previously allocated using `RedisModule_Alloc`, `RedisModule_Calloc`, etc.  It allocates a new memory block, copies the contents, and returns the new pointer.  If defragmentation wasn't necessary, NULL is returned. The caller must update references to the old pointer with the new one.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_307\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_DefragAlloc(RedisModuleDefragCtx *ctx, void *ptr);\n```\n\n----------------------------------------\n\nTITLE: INFO replication Command\nDESCRIPTION: The INFO replication command can be used as a fallback to determine the role of a Redis instance when the ROLE command is unavailable (Redis versions prior to 2.8.12).  The client needs to parse the `role:` field in the output to determine if the instance is a master or a replica.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/sentinel-clients.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nINFO replication\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Secret in Redis\nDESCRIPTION: This snippet shows how to set an authentication secret for a user in Redis. It uses `HSET` to store a random string (`fea5e81ac8ca77622bed1c2132a021f9`) as the `auth` field in the user's hash (`user:1000`) and also maps the secret to the user ID in the `auths` hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_18\n\nLANGUAGE: Redis\nCODE:\n```\nHSET user:1000 auth fea5e81ac8ca77622bed1c2132a021f9\nHSET auths fea5e81ac8ca77622bed1c2132a021f9 1000\n```\n\n----------------------------------------\n\nTITLE: Creating a New Redis User with ACL SETUSER\nDESCRIPTION: This code snippet demonstrates the simplest way to create a new Redis user named 'alice' using the `ACL SETUSER` command. It sets no specific permissions, resulting in a user with default restrictive settings. This command will create the user if it does not exist and do nothing if it already exists.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER alice\nOK\n```\n\n----------------------------------------\n\nTITLE: Exporting Shared API in C\nDESCRIPTION: Exports an API function from a module, allowing other modules to access it via `RedisModule_GetSharedAPI`. The `apiname` should be a string literal with static lifetime.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_263\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_ExportSharedAPI(RedisModuleCtx *ctx,\n                                    const char *apiname,\n                                    void *func);\n```\n\n----------------------------------------\n\nTITLE: Extract Keys from SORT Command - Redis CLI\nDESCRIPTION: This example illustrates how to extract keys from a `SORT` command. The `SORT` command sorts the elements of a list, set, or sorted set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-getkeys.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND GETKEYS SORT mylist ALPHA STORE outlist\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String from Stream ID (C)\nDESCRIPTION: This code snippet shows how to create a Redis module string object from a stream ID. The returned string must be released with RedisModule_FreeString, unless automatic memory is enabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringFromStreamID(RedisModuleCtx *ctx,\n                                                            const RedisModuleStreamID *id);\n```\n\n----------------------------------------\n\nTITLE: RedisModule_Init Function Prototype\nDESCRIPTION: The `RedisModule_Init` function initializes a Redis module. It takes the module context, module name, module version, and API version as arguments.  It must be the first API call made by the module's OnLoad function.  It returns REDISMODULE_ERR on failure.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_Init(RedisModuleCtx *ctx, const char *modulename,\n                     int module_version, int api_version);\n```\n\n----------------------------------------\n\nTITLE: Infinity and NaN Encoding in RESP\nDESCRIPTION: This snippet displays how positive infinity, negative infinity, and NaN (Not a Number) are encoded in RESP using specific string representations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n,inf\\r\\n\n```\n\nLANGUAGE: text\nCODE:\n```\n,-inf\\r\\n\n```\n\nLANGUAGE: text\nCODE:\n```\n,nan\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Signaling Key Modification\nDESCRIPTION: Signals that a key has been modified, invalidating WATCH commands and client-side caching.  This happens automatically when a key opened for writing is closed unless `REDISMODULE_OPTION_NO_IMPLICIT_SIGNAL_MODIFIED` is set. Available since Redis 6.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_SignalModifiedKey(RedisModuleCtx *ctx,\n                                      RedisModuleString *keyname);\n```\n\n----------------------------------------\n\nTITLE: Running redis-cli in continuous stats mode\nDESCRIPTION: This snippet showcases how to run `redis-cli` in continuous stats mode using the `--stat` option. It provides real-time monitoring of various Redis server statistics such as keys, memory usage, clients, blocked requests, and connections. The `-i <interval>` option can adjust the frequency of updates.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ redis-cli --stat\n------- data ------ --------------------- load -------------------- - child -\nkeys       mem      clients blocked requests            connections\n506        1015.00K 1       0       24 (+0)             7\n506        1015.00K 1       0       25 (+1)             7\n506        3.40M    51      0       60461 (+60436)      57\n506        3.40M    51      0       146425 (+85964)     107\n507        3.40M    51      0       233844 (+87419)     157\n507        3.40M    51      0       321715 (+87871)     207\n508        3.40M    51      0       408642 (+86927)     257\n508        3.40M    51      0       497038 (+88396)     257\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Subcommand in C\nDESCRIPTION: This code demonstrates how to create subcommands for a Redis module command using `RedisModule_CreateSubcommand`. It shows the creation of `set` and `get` subcommands for the `module.config` command. The `parent` command is retrieved using `RedisModule_GetCommand`. The `cmd_config_set` and `cmd_config_get` are assumed to be implemented elsewhere and represent the functions that will be executed when the respective subcommands are called.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n if (RedisModule_CreateCommand(ctx,\"module.config\",NULL,\"\",0,0,0) == REDISMODULE_ERR)\n         return REDISMODULE_ERR;\n\n     RedisModuleCommand *parent = RedisModule_GetCommand(ctx,,\"module.config\");\n\n     if (RedisModule_CreateSubcommand(parent,\"set\",cmd_config_set,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n\n     if (RedisModule_CreateSubcommand(parent,\"get\",cmd_config_get,\"\",0,0,0) == REDISMODULE_ERR)\n        return REDISMODULE_ERR;\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to a Numerical Index using ZADD (Redis)\nDESCRIPTION: This snippet demonstrates how to add elements to a Redis sorted set to create a numerical index, specifically indexing person names by age. The `ZADD` command is used to associate a score (age) with a member (person's name). This creates a simple secondary index for querying based on age.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nZADD myindex 25 Manuel\nZADD myindex 18 Anna\nZADD myindex 35 Jon\nZADD myindex 67 Helen\n```\n\n----------------------------------------\n\nTITLE: Deleting Element at Index in Redis List\nDESCRIPTION: This function removes the element at the specified index from a Redis list. The index is zero-based and allows negative indexing. Returns REDISMODULE_OK on success and REDISMODULE_ERR on failure, with errno set accordingly (EINVAL, ENOTSUP, EBADF, or EDOM).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_115\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ListDelete(RedisModuleKey *key, long index);\n```\n\n----------------------------------------\n\nTITLE: Replacing a Key-Value Pair in a Redis Module Dictionary\nDESCRIPTION: This function replaces the value associated with a key in the dictionary, using a `RedisModuleString` for the key. If the key already exists, its value is updated. If the key does not exist, it is created.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_246\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DictReplace(RedisModuleDict *d,\n                                RedisModuleString *key,\n                                void *ptr);\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Memory Usage\nDESCRIPTION: The `INFO memory` command is used to retrieve information about Redis' memory usage. It provides detailed metrics about memory allocation, fragmentation, and peak memory consumption, which can be useful for monitoring and optimizing Redis performance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/get-started/faq.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nINFO memory\n```\n\n----------------------------------------\n\nTITLE: Retrieving Score of Element in Redis Sorted Set\nDESCRIPTION: This function retrieves the score of an element in a Redis sorted set. Returns REDISMODULE_OK on success and REDISMODULE_ERR if the element does not exist, or the key is not a sorted set or an open empty key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_119\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetScore(RedisModuleKey *key,\n                              RedisModuleString *ele,\n                              double *score);\n```\n\n----------------------------------------\n\nTITLE: Setting Module User ACL Permissions - RedisModule_SetModuleUserACL\nDESCRIPTION: Sets the permissions of a user created through the Redis module interface, using the same syntax as the ACL SETUSER command. The `acl` parameter specifies the ACL rules to apply to the user. It returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` on failure, setting errno accordingly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_225\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_SetModuleUserACL(RedisModuleUser *user, const char* acl);\n```\n\n----------------------------------------\n\nTITLE: Setting Hash Fields in Redis Module (C)\nDESCRIPTION: This function sets the fields of a hash stored in a Redis key. It's a variadic function that takes pairs of field names and values as `RedisModuleString` pointers (or C strings with `REDISMODULE_HASH_CFIELDS`). It supports flags like `REDISMODULE_HASH_NX`, `REDISMODULE_HASH_XX`, `REDISMODULE_HASH_CFIELDS`, and `REDISMODULE_HASH_COUNT_ALL` to control behavior. A NULL argument signals the end of the field/value pairs.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_129\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_HashSet(RedisModuleKey *key, int flags, ...);\n```\n\n----------------------------------------\n\nTITLE: Redis ZREVRANGEBYLEX Examples\nDESCRIPTION: These examples demonstrate how to use the ZREVRANGEBYLEX command in Redis to retrieve elements from a sorted set based on lexicographical range.  The sorted set `myzset` is populated with elements having the same score (0), allowing for lexicographical ordering. The examples show different usages with inclusive '[' and exclusive '(' bounds for the `min` and `max` values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrevrangebylex.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\nZREVRANGEBYLEX myzset [c -\nZREVRANGEBYLEX myzset (c -\nZREVRANGEBYLEX myzset (g [aaa\n```\n\n----------------------------------------\n\nTITLE: Apply Kubernetes Configuration\nDESCRIPTION: This command applies the Kubernetes configuration defined in the `redisinsight.yaml` file. It creates the RedisInsight deployment and service within the Kubernetes cluster.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f redisinsight.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Keys with Redis CLI using Scan\nDESCRIPTION: This command utilizes the `--scan` option to retrieve a list of keys from the Redis server without blocking it. The output can be piped to other utilities like `head` to limit the number of results displayed. Because it uses the SCAN command, keys may be reported multiple times.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --scan | head -10\n```\n\n----------------------------------------\n\nTITLE: Setting List Elements with LSET in Redis CLI\nDESCRIPTION: This example demonstrates how to use the LSET command in Redis to modify elements at specific indices within a list. It first creates a list named 'mylist' using RPUSH, then modifies elements at index 0 and -2 using LSET. Finally, it retrieves and displays the modified list using LRANGE.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lset.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nRPUSH mylist \"one\"\nRPUSH mylist \"two\"\nRPUSH mylist \"three\"\nLSET mylist 0 \"four\"\nLSET mylist -2 \"five\"\nLRANGE mylist 0 -1\n```\n\n----------------------------------------\n\nTITLE: Removing elements by rank in Redis CLI\nDESCRIPTION: This example demonstrates how to remove elements from a sorted set using the ZREMRANGEBYRANK command in the Redis CLI. It first adds elements to a sorted set named `myzset` with scores, then removes elements with ranks 0 and 1, and finally displays the remaining elements with their scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zremrangebyrank.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZREMRANGEBYRANK myzset 0 1\nZRANGE myzset 0 -1 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Starting a Stream Iterator\nDESCRIPTION: This snippet illustrates how to start a stream iterator using `RedisModule_StreamIteratorStart`. The function takes a RedisModuleKey, flags to control the iteration (e.g., exclusive bounds, reverse order), and start/end stream IDs to define the iteration range.  Start and end can be NULL to represent the beginning and end of the stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_134\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamIteratorStart(RedisModuleKey *key,\n                                        int flags,\n                                        RedisModuleStreamID *start,\n                                        RedisModuleStreamID *end);\n```\n\n----------------------------------------\n\nTITLE: Complex ACL user setup (Redis)\nDESCRIPTION: This example creates a user named 'alan' with various permissions. It grants access to all keys, allows execution of commands from the 'string' and 'set' categories, denies the 'SADD' command, and sets a password. This is a comprehensive example demonstrating several ACL rules.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nACL SETUSER alan allkeys +@string +@set -SADD >alanpassword\n```\n\n----------------------------------------\n\nTITLE: Monitoring Memory Usage Continuously\nDESCRIPTION: This snippet demonstrates how to monitor the RSS memory size of a Redis instance continuously using the `-r -1` and `-i 1` options to run indefinitely with a 1-second interval.  It uses grep to filter the output of the INFO command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -r -1 -i 1 INFO | grep rss_human\nused_memory_rss_human:2.71M\nused_memory_rss_human:2.73M\nused_memory_rss_human:2.73M\nused_memory_rss_human:2.73M\n... a new line will be printed each second ...\n```\n\n----------------------------------------\n\nTITLE: Getting Key Hash Slot with Redis CLUSTER KEYSLOT\nDESCRIPTION: This snippet demonstrates the usage of the `CLUSTER KEYSLOT` command in Redis. The command takes a key as input and returns the corresponding hash slot number as an integer. This is useful for understanding how keys are distributed across a Redis cluster and for verifying client-side hashing implementations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-keyslot.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> CLUSTER KEYSLOT somekey\n(integer) 11058\n> CLUSTER KEYSLOT foo{hash_tag}\n(integer) 2515\n> CLUSTER KEYSLOT bar{hash_tag}\n(integer) 2515\n```\n\n----------------------------------------\n\nTITLE: Calling Redis Commands with RedisModule_Call in C\nDESCRIPTION: This snippet shows how to call a Redis command from a module using `RedisModule_Call`. It demonstrates the usage of format specifiers to pass arguments and then checks the reply type to extract the result. Dependencies include RedisModule API.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_158\n\nLANGUAGE: c\nCODE:\n```\nreply = RedisModule_Call(ctx,\"INCRBY\",\"sc\",argv[1],\"10\");\nif (RedisModule_CallReplyType(reply) == REDISMODULE_REPLY_INTEGER) {\n  long long myval = RedisModule_CallReplyInteger(reply);\n  // Do something with myval.\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of a Redis Module Dictionary\nDESCRIPTION: This function returns the number of keys in the dictionary.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_242\n\nLANGUAGE: c\nCODE:\n```\nuint64_t RedisModule_DictSize(RedisModuleDict *d);\n```\n\n----------------------------------------\n\nTITLE: Bulk Error Example in RESP\nDESCRIPTION: This snippet provides an example of a bulk error encoding, representing the error \"SYNTAX invalid syntax\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n!21\\r\\nSYNTAX invalid syntax\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Position with Flags in Redis Module (C)\nDESCRIPTION: This snippet demonstrates how to report channel positions when a module command is flagged as \"getchannels-api\". It uses `RedisModule_ChannelAtPosWithFlags` to specify the channel and flags like `REDISMODULE_CMD_CHANNEL_SUBSCRIBE` and `REDISMODULE_CMD_CHANNEL_PUBLISH` for managing channel subscriptions and publications.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nif (RedisModule_IsChannelsPositionRequest(ctx)) {\n    RedisModule_ChannelAtPosWithFlags(ctx, 1, REDISMODULE_CMD_CHANNEL_SUBSCRIBE | REDISMODULE_CMD_CHANNEL_PATTERN);\n    RedisModule_ChannelAtPosWithFlags(ctx, 1, REDISMODULE_CMD_CHANNEL_PUBLISH);\n}\n```\n\n----------------------------------------\n\nTITLE: Redis CLI example commands\nDESCRIPTION: Example commands to interact with the Redis server once connected using redis-cli. Shows how to push a value onto a list, and then pop it.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:6379> lpush demos redis-macOS-demo\nOK\n127.0.0.1:6379> rpop demos\n\"redis-macOS-demo\"\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Server Event: RedisModule_SubscribeToServerEvent (C)\nDESCRIPTION: This code snippet shows the signature for the `RedisModule_SubscribeToServerEvent` function, which allows a Redis module to subscribe to a specific server event and register a callback function to be executed when the event occurs. The function takes the module context, the event type, and the callback function as parameters. If the callback is NULL, the module is unsubscribed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_283\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_SubscribeToServerEvent(RedisModuleCtx *ctx,\n                                           RedisModuleEvent event,\n                                           RedisModuleEventCallback callback);\n```\n\n----------------------------------------\n\nTITLE: Redis Client JSON Example\nDESCRIPTION: This JSON snippet represents the structure of a client's details as displayed on the Redis clients documentation page.  It includes the client's name, a short description, and a flag indicating if it's a recommended client. This structure is stored under `clients/{language}/github.com/{owner}/{repository}.json`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": \"redis-py\",\n    \"description\": \"Mature and supported. Currently the way to go for Python.\",\n    \"recommended\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Key Patterns to a Redis User's ACL\nDESCRIPTION: This code snippet demonstrates how to add multiple key patterns to an existing user's ACL using `ACL SETUSER`. It adds access to keys matching 'objects:*', 'items:*', and 'public:*' patterns to the user 'alice'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER alice ~objects:* ~items:* ~public:*\nOK\n> ACL LIST\n1) \"user alice on #2d9c75... ~cached:* ~objects:* ~items:* ~public:* resetchannels -@all +get\"\n2) \"user default on nopass ~* &* +@all\"\n```\n\n----------------------------------------\n\nTITLE: Stream Operations with XADD, XLEN, XREVRANGE in Redis CLI\nDESCRIPTION: Demonstrates adding entries to a Redis stream named 'writers', getting the stream length, and retrieving the last entry using XREVRANGE.  XADD adds new entries, XLEN returns the stream length, and XREVRANGE retrieves entries in reverse order.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrevrange.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nXADD writers * name Virginia surname Woolf\nXADD writers * name Jane surname Austen\nXADD writers * name Toni surname Morrison\nXADD writers * name Agatha surname Christie\nXADD writers * name Ngozi surname Adichie\nXLEN writers\nXREVRANGE writers + - COUNT 1\n```\n\n----------------------------------------\n\nTITLE: Redis ZUNION Example\nDESCRIPTION: This example demonstrates how to perform a union operation on two sorted sets (zset1 and zset2) using the ZUNION command. It first adds elements to the sorted sets and then executes the ZUNION command to get the union of the two sets, optionally including the scores.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zunion.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD zset1 1 \"one\"\nZADD zset1 2 \"two\"\nZADD zset2 1 \"one\"\nZADD zset2 2 \"two\"\nZADD zset2 3 \"three\"\nZUNION 2 zset1 zset2\nZUNION 2 zset1 zset2 WITHSCORES\n```\n\n----------------------------------------\n\nTITLE: Unlinking a Redis Key (Non-Blocking Delete) (C)\nDESCRIPTION: Unlinks a Redis key if it is open for writing. This performs a non-blocking delete, avoiding immediate memory reclamation.  The key is then configured to accept new writes as an empty key. Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` if the key is not open for writing. Requires a RedisModuleKey pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_95\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_UnlinkKey(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Getting Indices and Match Lengths in Redis\nDESCRIPTION: This example builds upon the previous one by adding the `WITHMATCHLEN` option to include the length of each individual match in the output.  This provides more detailed information about each matching subsequence.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lcs.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\n> LCS key1 key2 IDX MINMATCHLEN 4 WITHMATCHLEN\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n      3) (integer) 4\n3) \"len\"\n4) (integer) 6\n```\n\n----------------------------------------\n\nTITLE: Generate core dump file in GDB\nDESCRIPTION: This GDB command creates a core dump file, which is a snapshot of the program's memory at the time of execution. This file is used for post-mortem debugging, allowing developers to analyze the program's state after a crash or unexpected termination.  Be aware that core files may contain sensitive data.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_6\n\nLANGUAGE: gdb\nCODE:\n```\n(gdb) gcore\n```\n\n----------------------------------------\n\nTITLE: Building Redis on Raspberry Pi\nDESCRIPTION: This snippet describes the steps required to build Redis from source on a Raspberry Pi. It involves downloading the Redis source code and using the `make` command to compile the executable. The process is similar to building on other Linux environments, with the default allocator being `libc` instead of `jemalloc`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/arm.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n* Download Redis version 4.0 or higher.\n* Use `make` as usual to create the executable.\n```\n\n----------------------------------------\n\nTITLE: Incrementing a Counter with redis-cli\nDESCRIPTION: This code snippet demonstrates how to increment a counter using the INCR command in redis-cli. It shows the raw output mode when the output is redirected to a file and the use of the --raw option to force raw output to the terminal. The command increments 'mycounter' and returns the integer value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli INCR mycounter\n(integer) 7\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli INCR mycounter > /tmp/output.txt\n$ cat /tmp/output.txt\n8\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli --raw INCR mycounter\n9\n```\n\n----------------------------------------\n\nTITLE: RedisModuleFlushInfo Structure (C)\nDESCRIPTION: This code defines the `RedisModuleFlushInfo` structure that provides details about a flush event when the `RedisModuleEvent_FlushDB` event is triggered. It specifies whether the flush operation is asynchronous and the database number being flushed (or -1 for all databases in the case of FLUSHALL). The `async` parameter indicates whether the flush is happening in a thread.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_286\n\nLANGUAGE: c\nCODE:\n```\nint32_t async;  // True if the flush is done in a thread.\n                        // See for instance FLUSHALL ASYNC.\n                        // In this case the END callback is invoked\n                        // immediately after the database is put\n                        // in the free list of the thread.\n        int32_t dbnum;  // Flushed database number, -1 for all the DBs\n                        // in the case of the FLUSHALL operation.\n```\n\n----------------------------------------\n\nTITLE: Example Redis MSET with Hash Tags\nDESCRIPTION: This code snippet demonstrates the use of hash tags in a Redis `MSET` command. Hash tags allow clients to perform multi-key operations on keys that hash to the same slot, ensuring that the keys are stored on the same node in the cluster. This is crucial for maintaining atomicity in multi-key operations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nMSET {user:1000}.name Angela {user:1000}.surname White\n```\n\n----------------------------------------\n\nTITLE: Aggregate Search Results to Count Users by City\nDESCRIPTION: Aggregates the search results from the \"idx:users\" index to count the number of users in each city. It groups the results by the \"city\" field and uses the COUNT reducer.  The results are then printed to the console.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nvar request = new AggregationRequest(\"*\").GroupBy(\"@city\", Reducers.Count().As(\"count\"));\nvar result = ft.Aggregate(\"idx:users\", request);\n\nfor (var i=0; i<result.TotalResults; i++)\n{\n    var row = result.GetRow(i);\n    Console.WriteLine($\"{row[\\\"city\\\"]} - {row[\\\"count\\\"]}\");\n}\n// Prints:\n// London - 1\n// Tel Aviv - 2\n```\n\n----------------------------------------\n\nTITLE: Redis Optimistic Locking without WATCH\nDESCRIPTION: This code snippet illustrates a race condition scenario when incrementing a key without using WATCH for optimistic locking. Multiple clients may read the same old value, increment it, and set it back, leading to lost updates.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nval = GET mykey\nval = val + 1\nSET mykey $val\n```\n\n----------------------------------------\n\nTITLE: Checking Command Permissions - RedisModule_ACLCheckCommandPermissions\nDESCRIPTION: Checks if a user can execute a command according to the ACLs associated with them. The `argv` parameter is an array of `RedisModuleString` representing the command arguments, and `argc` is the number of arguments. Returns `REDISMODULE_OK` on success or `REDISMODULE_ERR` on failure, setting errno to `ENOENT` if the command doesn't exist or `EACCES` if the command cannot be executed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_230\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ACLCheckCommandPermissions(RedisModuleUser *user,\n                                               RedisModuleString **argv,\n                                               int argc);\n```\n\n----------------------------------------\n\nTITLE: Bulk Loading Data with Netcat (Legacy)\nDESCRIPTION: This Bash command uses `cat` to output the content of `data.txt`, pipes it to `netcat` (nc), which sends the data to the Redis server running on localhost at port 6379.  The output is redirected to `/dev/null`. This method is noted to be unreliable.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/bulk-loading.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(cat data.txt; sleep 10) | nc localhost 6379 > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Getting Key Name from Optional Context (C)\nDESCRIPTION: Returns the name of the key currently being processed, retrieved from the RedisModuleKeyOptCtx. Requires a RedisModuleKeyOptCtx pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_103\n\nLANGUAGE: C\nCODE:\n```\nconst RedisModuleString *RedisModule_GetKeyNameFromOptCtx(RedisModuleKeyOptCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Adding stream entries with explicit ids\nDESCRIPTION: Adds a new entry to the `race:usa` stream with explicit ID `0-1`. Also adds another new entry with explicit ID `0-2`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_7\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:usa 0-1 racer Castilla\n```\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:usa 0-2 racer Norem\n```\n\n----------------------------------------\n\nTITLE: Iterating through a stream\nDESCRIPTION: This snippet shows how to iterate through a Redis stream using `XRANGE` and exclusive ranges (available from Redis 6.2). It retrieves a limited number of entries at a time, using the ID of the last entry from the previous call as the exclusive start of the next range. This allows for efficient incremental processing of stream entries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrange.md#_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE writers - + COUNT 2\n1) 1) 1526985676425-0\n   2) 1) \"name\"\n      2) \"Virginia\"\n      3) \"surname\"\n      4) \"Woolf\"\n2) 1) 1526985685298-0\n   2) 1) \"name\"\n      2) \"Jane\"\n      3) \"surname\"\n      4) \"Austen\"\n```\n\nLANGUAGE: cli\nCODE:\n```\n> XRANGE writers (1526985685298-0 + COUNT 2\n1) 1) 1526985691746-0\n   2) 1) \"name\"\n      2) \"Toni\"\n      3) \"surname\"\n      4) \"Morrison\"\n2) 1) 1526985712947-0\n   2) 1) \"name\"\n      2) \"Agatha\"\n      3) \"surname\"\n      4) \"Christie\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Gopher support in Redis\nDESCRIPTION: This configuration line enables Gopher support in the Redis server. When enabled, Redis will respond to Gopher requests on the configured port, serving content from Redis keys that match the requested Gopher paths.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/gopher.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngopher-enabled yes\n```\n\n----------------------------------------\n\nTITLE: Double Array RDB Save Method - C\nDESCRIPTION: This snippet shows how to save a double array native type to the RDB file.  It saves the number of elements in the array followed by each double value using `RedisModule_SaveUnsigned` and `RedisModule_SaveDouble`.  The `RedisModuleIO` context is used for writing to the RDB file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid DoubleArrayRDBSave(RedisModuleIO *io, void *ptr) {\n    struct dobule_array *da = ptr;\n    RedisModule_SaveUnsigned(io,da->count);\n    for (size_t j = 0; j < da->count; j++)\n        RedisModule_SaveDouble(io,da->values[j]);\n}\n```\n\n----------------------------------------\n\nTITLE: Event Loop Example\nDESCRIPTION: This code snippet demonstrates how to add a readable event to the Redis event loop. The `onReadable` function is called when the file descriptor becomes readable, reading data from it and printing the number of bytes read. The event is added using `RedisModule_EventLoopAdd`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_223\n\nLANGUAGE: c\nCODE:\n```\nvoid onReadable(int fd, void *user_data, int mask) {\n    char buf[32];\n    int bytes = read(fd,buf,sizeof(buf));\n    printf(\"Read %d bytes \\n\", bytes);\n}\nRedisModule_EventLoopAdd(fd, REDISMODULE_EVENTLOOP_READABLE, onReadable, NULL);\n```\n\n----------------------------------------\n\nTITLE: Updating a Numerical Index (Redis)\nDESCRIPTION: This snippet illustrates how to update a Redis sorted set-based index when the indexed value changes (e.g., a user's age). The `HSET` command updates the user's age in the hash, and the `ZADD` command updates the score associated with the user's ID in the sorted set index.  A `MULTI`/`EXEC` block can be used to ensure atomicity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_3\n\nLANGUAGE: Redis\nCODE:\n```\nHSET user:1 age 39\nZADD user.age.index 39 1\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Command Filter in Redis Module (C)\nDESCRIPTION: This function unregisters a previously registered command filter. It takes a `RedisModuleCtx` and a pointer to the `RedisModuleCommandFilter` to be unregistered as input. It returns an integer status code, typically 0 for success and a non-zero value for failure.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_266\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_UnregisterCommandFilter(RedisModuleCtx *ctx,\n                                            RedisModuleCommandFilter *filter);\n```\n\n----------------------------------------\n\nTITLE: Deauthenticating and Closing a Redis Client\nDESCRIPTION: This function deauthenticates and closes a specified Redis client. The client's resources are released in a background job. It returns `REDISMODULE_OK` on success, `REDISMODULE_ERR` if the client doesn't exist. It requires a `RedisModuleCtx` and the `client_id` of the client to close.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_237\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DeauthenticateAndCloseClient(RedisModuleCtx *ctx,\n                                                 uint64_t client_id);\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Expiration Time of Redis Key (C)\nDESCRIPTION: Retrieves the absolute expiration time (Unix timestamp) of a Redis key. Returns `REDISMODULE_NO_EXPIRE` if no TTL is associated or if the key is empty. Requires a RedisModuleKey pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_98\n\nLANGUAGE: C\nCODE:\n```\nmstime_t RedisModule_GetAbsExpire(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Redis Shutdown with NOW, NOSAVE, and FORCE\nDESCRIPTION: This snippet demonstrates how to terminate a Redis instance immediately, regardless of its content. It uses the NOW, NOSAVE, and FORCE modifiers to bypass normal shutdown procedures. This is useful when a quick termination is needed and data loss is acceptable.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/shutdown.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nSHUTDOWN NOW NOSAVE FORCE\n```\n\n----------------------------------------\n\nTITLE: Importing data to Redis Cluster\nDESCRIPTION: This command moves all the keys from a running Redis instance to a pre-existing Redis Cluster, deleting the keys from the source instance. This is an alternative to AOF based migration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nredis-cli --cluster import\n```\n\n----------------------------------------\n\nTITLE: CLUSTER SETSLOT MIGRATING Example\nDESCRIPTION: This subcommand sets a slot to a *migrating* state on the source node during resharding. The node receiving the command must be the hash slot owner. When a client sends a request for a non-existent key during the migration, the node redirects the client to the destination node with an `ASK` redirection.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT `<slot>` MIGRATING `<destination-node-id>`\n```\n\n----------------------------------------\n\nTITLE: Yielding Execution Control to Redis\nDESCRIPTION: Allows a module to yield execution control back to Redis, enabling background tasks and client command processing during long blocking operations. The `flags` argument controls allowed operations, and `busy_reply` customizes the `-BUSY` error message. Available since Redis 7.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_Yield(RedisModuleCtx *ctx, int flags, const char *busy_reply);\n```\n\n----------------------------------------\n\nTITLE: Loading Unsigned Integer from RDB File (RedisModule_LoadUnsigned)\nDESCRIPTION: This function loads an unsigned 64-bit value from the Redis RDB file. It is designed for use within the `rdb_load` method of modules that implement custom data types. The `RedisModuleIO` pointer provides the context for reading from the RDB file. Returns the unsigned 64 bit integer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_165\n\nLANGUAGE: c\nCODE:\n```\nuint64_t RedisModule_LoadUnsigned(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Checking Keyspace Notification Flags Support in Redis (C)\nDESCRIPTION: This example illustrates how to determine if specific keyspace notification flags are supported by the running Redis server, by using the `RedisModule_GetKeyspaceNotificationFlagsAll` function. The code retrieves the complete notification flags mask and checks flag support using a bitwise AND.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_297\n\nLANGUAGE: c\nCODE:\n```\n       int supportedFlags = RedisModule_GetKeyspaceNotificationFlagsAll();\n       if (supportedFlags & REDISMODULE_NOTIFY_LOADED) {\n             // REDISMODULE_NOTIFY_LOADED is supported\n       } else{\n             // REDISMODULE_NOTIFY_LOADED is not supported\n       }\n```\n\n----------------------------------------\n\nTITLE: Saving String in RDB File (RedisModule_SaveString)\nDESCRIPTION: This function saves a `RedisModuleString` into the Redis RDB file. It should be called within the context of the `rdb_save` method of a module type. The string can be later loaded using `RedisModule_LoadString()` or other Load family functions expecting a serialized string inside the RDB file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_168\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveString(RedisModuleIO *io, RedisModuleString *s);\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Invalidation Channel (RESP2)\nDESCRIPTION: This snippet shows how to subscribe to the special Pub/Sub channel used to receive invalidation messages in RESP2 mode.  It assumes a connection has already been established. The client ID is retrieved, and then the client subscribes to the `__redis__:invalidate` channel to receive invalidation messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/client-side-caching.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\n(Connection 1 -- used for invalidations)\nCLIENT ID\n:4\nSUBSCRIBE __redis__:invalidate\n*3\n$9\nsubscribe\n$20\n__redis__:invalidate\n:1\n```\n\n----------------------------------------\n\nTITLE: Avoid Replica Traffic - Redis Module API (C)\nDESCRIPTION: Returns true if a client sent the CLIENT PAUSE command or if Redis Cluster is doing a manual failover, pausing clients. Modules should avoid heavy background work that creates data to the replication channel when this function returns true. Available since Redis 6.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_86\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_AvoidReplicaTraffic(void);\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Kernel Parameter for Redis Forking\nDESCRIPTION: This command sets the `overcommit_memory` parameter in the Linux kernel to 1.  This allows Redis to fork processes more optimistically during background saving operations, which is necessary when the free RAM is less than the Redis dataset size. Setting this parameter avoids fork() errors when creating background saves.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/get-started/faq.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho 1 > /proc/sys/vm/overcommit_memory\n```\n\n----------------------------------------\n\nTITLE: Getting Client Info by ID with RedisModule_GetClientInfoById - C\nDESCRIPTION: Retrieves information about the client with the specified ID.  The client ID can be obtained using RedisModule_GetClientId(). If the client exists, the provided RedisModuleClientInfoV1 structure is populated with client details, otherwise, REDISMODULE_ERR is returned. Passing NULL as first argument can be used to check if the client exists.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_79\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_GetClientInfoById(void *ci, uint64_t id);\n```\n\n----------------------------------------\n\nTITLE: Get Type Method Version - C\nDESCRIPTION: Retrieves the current Redis server's runtime value of `REDISMODULE_TYPE_METHOD_VERSION`. This allows modules to determine which fields of `RedisModuleTypeMethods` are supported for use with `RedisModule_CreateDataType`. The function has no dependencies and returns an integer representing the version.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_298\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_GetTypeMethodVersion(void);\n```\n\n----------------------------------------\n\nTITLE: Re-enable Automatic AOF Rewrites - Redis CONFIG SET\nDESCRIPTION: This snippet re-enables automatic AOF rewrites after backing up AOF files. It sets the `auto-aof-rewrite-percentage` configuration to its previous value using the `CONFIG SET` command. The `<prev-value>` placeholder needs to be replaced with the actual original value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_10\n\nLANGUAGE: Redis\nCODE:\n```\nCONFIG SET auto-aof-rewrite-percentage <prev-value>\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Module String from Long Long (C)\nDESCRIPTION: This snippet shows how to create a RedisModuleString from a long long integer value using `RedisModule_CreateStringFromLongLong`. It takes the Redis context and the integer value as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *mystr = RedisModule_CreateStringFromLongLong(ctx,10);\n```\n\n----------------------------------------\n\nTITLE: Getting Monotonic Time in Microseconds\nDESCRIPTION: This function returns a counter of microseconds relative to an arbitrary point in time. It provides a monotonic clock for measuring elapsed time. Available since Redis 7.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nuint64_t RedisModule_MonotonicMicroseconds(void);\n```\n\n----------------------------------------\n\nTITLE: Getting the length of a Redis stream using XLEN\nDESCRIPTION: This example demonstrates how to use the XLEN command in Redis to determine the number of entries within a stream. First, three items are added to a stream named 'mystream'. Then, the XLEN command is used to retrieve the length of the stream, which will return 3.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xlen.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nXADD mystream * item 1\nXADD mystream * item 2\nXADD mystream * item 3\nXLEN mystream\n```\n\n----------------------------------------\n\nTITLE: Update Key Access Time with TOUCH - Redis CLI\nDESCRIPTION: This example demonstrates how to use the TOUCH command to update the last access time of existing keys. It first sets values for `key1` and `key2` and then updates their access times. If the keys don't exist, they will be ignored.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/touch.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET key1 \"Hello\"\nSET key2 \"World\"\nTOUCH key1 key2\n```\n\n----------------------------------------\n\nTITLE: Automatic Key Creation with LPUSH\nDESCRIPTION: This code shows how Redis automatically creates an empty list if the key doesn't exist when using `LPUSH`. The `DEL` command first ensures the key does not exist. Then, `LPUSH` creates the list and adds elements to it.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_11\n\nLANGUAGE: redis\nCODE:\n```\n> DEL new_bikes\n(integer) 0\n> LPUSH new_bikes bike:1 bike:2 bike:3\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving Map\nDESCRIPTION: This code demonstrates how to store and retrieve a map in Redis using the `HSet` and `HGetAll` methods. Each key-value pair in the map is stored as a field in a Redis hash. Requires `go-redis/v9`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nsession := map[string]string{\"name\": \"John\", \"surname\": \"Smith\", \"company\": \"Redis\", \"age\": \"29\"}\nfor k, v := range session {\n    err := client.HSet(ctx, \"user-session:123\", k, v).Err()\n    if err != nil {\n        panic(err)\n    }\n}\n\nuserSession := client.HGetAll(ctx, \"user-session:123\").Val()\nfmt.Println(userSession)\n```\n\n----------------------------------------\n\nTITLE: Rate Limiter Implementation 1\nDESCRIPTION: This code implements a rate limiter that restricts API calls to a maximum of ten requests per second per IP address using INCR and EXPIRE within a MULTI/EXEC block to ensure atomicity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/incr.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nFUNCTION LIMIT_API_CALL(ip)\nts = CURRENT_UNIX_TIME()\nkeyname = ip+\":\"+ts\nMULTI\n    INCR(keyname)\n    EXPIRE(keyname,10)\nEXEC\ncurrent = RESPONSE_OF_INCR_WITHIN_MULTI\nIF current > 10 THEN\n    ERROR \"too many requests per second\"\nELSE\n    PERFORM_API_CALL()\nEND\n```\n\n----------------------------------------\n\nTITLE: Setting Native Type Private Data to Redis Key - C\nDESCRIPTION: This snippet demonstrates how to associate a native type's private data structure with a Redis key. It uses `RedisModule_OpenKey` to open the key for writing, creates a private data structure, and then uses `RedisModule_ModuleTypeSetValue` to set the value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleKey *key = RedisModule_OpenKey(ctx,keyname,REDISMODULE_WRITE);\nstruct some_private_struct *data = createMyDataStructure();\nRedisModule_ModuleTypeSetValue(key,MyType,data);\n```\n\n----------------------------------------\n\nTITLE: Setting ACL user for Sentinel\nDESCRIPTION: This command sets up a restricted Sentinel user in Redis using ACL. It grants specific permissions required for Sentinel's operation, including authentication, client identification, and Sentinel-related commands.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:5000> ACL SETUSER sentinel-user ON >user-password -@all +auth +client|getname +client|id +client|setname +command +hello +ping +role +sentinel|get-master-addr-by-name +sentinel|master +sentinel|myid +sentinel|replicas +sentinel|sentinels\n```\n\n----------------------------------------\n\nTITLE: Resetting Sentinel instances\nDESCRIPTION: This snippet demonstrates how to reset Sentinel instances using the `SENTINEL RESET` command. The command is sent to all Sentinel instances to refresh the list of replicas and remove old master/replica entries. Delaying the command by 30 seconds between instances is recommended to avoid network partition issues.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_13\n\nLANGUAGE: Redis\nCODE:\n```\nSENTINEL RESET *\n```\n\n----------------------------------------\n\nTITLE: LMPOP Command Examples in Redis CLI\nDESCRIPTION: This snippet demonstrates the usage of the LMPOP command in Redis CLI. It shows how to pop elements from the left or right of a list, and how to specify the number of elements to pop using the COUNT option. It includes examples with multiple keys and different count values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lmpop.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nLMPOP 2 non1 non2 LEFT COUNT 10\nLPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nLMPOP 1 mylist LEFT\nLRANGE mylist 0 -1\nLMPOP 1 mylist RIGHT COUNT 10\nLPUSH mylist \"one\" \"two\" \"three\" \"four\" \"five\"\nLPUSH mylist2 \"a\" \"b\" \"c\" \"d\" \"e\"\nLMPOP 2 mylist mylist2 right count 3\nLRANGE mylist 0 -1\nLMPOP 2 mylist mylist2 right count 5\nLMPOP 2 mylist mylist2 right count 10\nEXISTS mylist mylist2\n```\n\n----------------------------------------\n\nTITLE: Create Time Event in Redis\nDESCRIPTION: Shows how `aeCreateTimeEvent` is called from `redis.c:initServer` to add a timed event to the event loop. This timed event is used for the `serverCron` function, which performs periodic maintenance tasks.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-rediseventlib.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\naeCreateTimeEvent(server.el /*eventLoop*/, 1 /*milliseconds*/, serverCron /*proc*/, NULL /*clientData*/, NULL /*finalizerProc*/);\n```\n\n----------------------------------------\n\nTITLE: Setting Max Clients in Redis Configuration\nDESCRIPTION: This code snippet shows how to configure the `maxclients` directive in `redis.conf` to set the maximum number of clients that can connect to the Redis server. It also illustrates the warning message logged when the requested `maxclients` value exceeds the operating system's file descriptor limit.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/clients.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ ./redis-server --maxclients 100000\n[41422] 23 Jan 11:28:33.179 # Unable to set the max number of files limit to 100032 (Invalid argument), setting the max clients configuration to 10112.\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Pattern in Redis Pub/Sub (Bash)\nDESCRIPTION: This snippet demonstrates how to unsubscribe from a pattern in Redis channels using the `PUNSUBSCRIBE` command. The client issues the command with the glob-style pattern to unsubscribe from.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPUNSUBSCRIBE news.*\n```\n\n----------------------------------------\n\nTITLE: Reset ACL user rules (Redis)\nDESCRIPTION: This example demonstrates how to reset all existing ACL rules for the user 'antirez' to the default state (inactive, passwordless, no commands, no key access).  This is achieved using the 'reset' rule as the first argument to the ACL SETUSER command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nACL SETUSER antirez reset [... other rules ...]\n```\n\n----------------------------------------\n\nTITLE: Using BITFIELD_RO to GET value - Redis\nDESCRIPTION: This example demonstrates how to use the BITFIELD_RO command to retrieve a value from a Redis key.  The key 'hello' is accessed, and an 8-bit signed integer ('i8') is retrieved starting at offset 16.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/bitfield_ro.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nBITFIELD_RO hello GET i8 16\n```\n\n----------------------------------------\n\nTITLE: Scanning Keys with RedisModule_Scan in C\nDESCRIPTION: This code snippet demonstrates how to use the `RedisModule_Scan` API to scan all keys in the selected database. It shows the creation of a cursor, iteration through the keys using a callback function, and the destruction of the cursor.  It also illustrates how to use this API from another thread while acquiring the lock. Thread safety considerations when modifying the database during the scan are also important.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_281\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleScanCursor *c = RedisModule_ScanCursorCreate();\n     while(RedisModule_Scan(ctx, c, callback, privateData));\n     RedisModule_ScanCursorDestroy(c);\n```\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleScanCursor *c = RedisModule_ScanCursorCreate();\n     RedisModule_ThreadSafeContextLock(ctx);\n     while(RedisModule_Scan(ctx, c, callback, privateData)){\n         RedisModule_ThreadSafeContextUnlock(ctx);\n         // do some background job\n         RedisModule_ThreadSafeContextLock(ctx);\n     }\n     RedisModule_ScanCursorDestroy(c);\n```\n\n----------------------------------------\n\nTITLE: Getting Notify Keyspace Events Configuration (C)\nDESCRIPTION: Retrieves the configured bitmap of notify-keyspace-events from the Redis server. This allows modules to perform additional filtering of events within the notification callback.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_216\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_GetNotifyKeyspaceEvents(void);\n```\n\n----------------------------------------\n\nTITLE: Signal a Key as Ready\nDESCRIPTION: This code snippet signals a key as ready, potentially unblocking clients blocked on that key with `RedisModule_BlockClientOnKeys`. It requires a `RedisModuleCtx` and a `RedisModuleString` representing the key to signal. When this function is called, all the clients blocked for this key will get their `reply_callback` called.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_197\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SignalKeyAsReady(RedisModuleCtx *ctx, RedisModuleString *key);\n```\n\n----------------------------------------\n\nTITLE: Getting the Next Field during Stream iteration\nDESCRIPTION: This snippet demonstrates how to retrieve the next field and its corresponding value during stream iteration using `RedisModule_StreamIteratorNextField`. It takes the key, a pointer to store the field as a `RedisModuleString`, and a pointer to store the value as a `RedisModuleString`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_137\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamIteratorNextField(RedisModuleKey *key,\n                                            RedisModuleString **field_ptr,\n                                            RedisModuleString **value_ptr);\n```\n\n----------------------------------------\n\nTITLE: Get Selected Database - Redis Module API (C)\nDESCRIPTION: Returns the ID of the currently selected database. Requires a RedisModuleCtx. Available since Redis 4.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_84\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_GetSelectedDb(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Creating Scan Cursor in Redis Module (C)\nDESCRIPTION: This function creates a new cursor for scanning the Redis keyspace or hashes using the `RedisModule_Scan` function.  The returned cursor must be destroyed using `RedisModule_ScanCursorDestroy`. Use in conjunction with `RedisModule_Scan` to iterate through keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_278\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleScanCursor *RedisModule_ScanCursorCreate(void);\n```\n\n----------------------------------------\n\nTITLE: Checking S3 Bucket Access via AWS CLI\nDESCRIPTION: This command uses the AWS CLI to list available S3 buckets, verifying that the EC2 instance has the necessary IAM permissions for read-only access to S3. It requires the AWS CLI to be installed and configured correctly. The expected output is a list of S3 buckets accessible to the IAM role assigned to the EC2 instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-aws.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws s3 ls\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic Memory Management in Redis Module (C)\nDESCRIPTION: This code snippet shows how to enable automatic memory management in a Redis module. When enabled, Redis automatically frees keys, call replies, and Redis string objects after the command returns, reducing the need for manual memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_AutoMemory(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Trimming RedisModuleString Allocation\nDESCRIPTION: RedisModule_TrimStringAllocation trims possible excess memory allocated for a RedisModuleString. This function optimizes such strings by reallocating their memory, which is useful for strings that are not short-lived but retained for an extended duration. This operation is not thread-safe.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_51\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_TrimStringAllocation(RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving a Key-Value Pair in Redis (CLI)\nDESCRIPTION: This example demonstrates how to set a key-value pair in Redis using the `SET` command and then retrieve it using the `GET` command. It also showcases setting an expiry time for a key.  Dependencies: Requires a running Redis server and the redis-cli tool.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/set.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nGET mykey\n\nSET anotherkey \"will expire in a minute\" EX 60\n```\n\n----------------------------------------\n\nTITLE: Selecting a Database with -n Option\nDESCRIPTION: This code illustrates how to select a specific Redis database using the `-n` option.  It performs FLUSHALL on the default database (0) and then increments a key 'a' in database 1 and 2, demonstrating database isolation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli FLUSHALL\nOK\n$ redis-cli -n 1 INCR a\n(integer) 1\n$ redis-cli -n 1 INCR a\n(integer) 2\n$ redis-cli -n 2 INCR a\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Redis command completion using TAB key\nDESCRIPTION: This shows how to use TAB completion in redis-cli to complete command names. The TAB key can be pressed multiple times to show all possible completions. This feature enhances command entry speed and accuracy.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> Z<TAB>\n127.0.0.1:6379> ZADD<TAB>\n127.0.0.1:6379> ZCARD<TAB>\n```\n\n----------------------------------------\n\nTITLE: Passing Reply Data when Unblocking (C)\nDESCRIPTION: This snippet demonstrates how to pass private data from the thread to the reply callback. It allocates a random number, assigns it to `mynumber`, and passes the pointer to `RedisModule_UnblockClient`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nvoid *threadmain(void *arg) {\n        RedisModuleBlockedClient *bc = arg;\n\n        sleep(1); /* Wait one second and unblock. */\n\n        long *mynumber = RedisModule_Alloc(sizeof(long));\n        *mynumber = rand();\n        RedisModule_UnblockClient(bc,mynumber);\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Current User Name - RedisModule_GetCurrentUserName\nDESCRIPTION: Retrieves the user name of the client connection behind the current context as a `RedisModuleString`. This user name can be used to get a `RedisModuleUser` using `RedisModule_GetModuleUserFromUserName`. The returned string must be released with `RedisModule_FreeString()` or by enabling automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_228\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_GetCurrentUserName(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Strings in Redis\nDESCRIPTION: This example demonstrates how to set multiple string values in Redis using the MSET command and retrieve multiple values using MGET. MSET sets multiple key-value pairs in a single command. MGET retrieves the values associated with multiple keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/strings.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> mset bike:1 \"Deimos\" bike:2 \"Ares\" bike:3 \"Vanth\"\nOK\n> mget bike:1 bike:2 bike:3\n1) \"Deimos\"\n2) \"Ares\"\n3) \"Vanth\"\n```\n\n----------------------------------------\n\nTITLE: Get String Length in Redis Hash - CLI Example\nDESCRIPTION: This example demonstrates the usage of the HSTRLEN command in the Redis CLI. It first sets values for different fields in a hash and then retrieves the string length for each field. If a key or field doesn't exist, HSTRLEN returns 0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hstrlen.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nHSET myhash f1 HelloWorld f2 99 f3 -256\nHSTRLEN myhash f1\nHSTRLEN myhash f2\nHSTRLEN myhash f3\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Cluster Using redis-cli\nDESCRIPTION: This command uses the `redis-cli` utility to create a Redis Cluster from a list of Redis instances. It specifies the addresses of the instances, and the number of replicas to create for each master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 \\\n    127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 \\\n    --cluster-replicas 1\n```\n\n----------------------------------------\n\nTITLE: Kill Pubsub Client by Address - Redis\nDESCRIPTION: This example demonstrates how to use multiple filters with the CLIENT KILL command to kill a specific pubsub client by its address. It combines the `addr` and `type` filters to target only pubsub clients with the specified IP address and port. This illustrates the logical AND operation of multiple filters.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/client-kill.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCLIENT KILL addr 127.0.0.1:12345 type pubsub\n```\n\n----------------------------------------\n\nTITLE: Saving Dataset to RDB using RedisModule_RdbSave (C)\nDESCRIPTION: This snippet shows how to save the current dataset to an RDB file using `RedisModule_RdbSave`. It creates an RDB stream, saves the data, and then releases the stream resources. Requires the filename of the rdb file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_294\n\nLANGUAGE: c\nCODE:\n```\n    RedisModuleRdbStream *s = RedisModule_RdbStreamCreateFromFile(\"exp.rdb\");\n    RedisModule_RdbSave(ctx, s, 0);\n    RedisModule_RdbStreamFree(s);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Members within a Score Range with ZRANGEBYSCORE - Redis\nDESCRIPTION: This snippet shows how to retrieve members from a Redis sorted set within a specified score range using the `ZRANGEBYSCORE` command. It retrieves members with scores between negative infinity (`-inf`) and 10 (inclusive).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> ZRANGEBYSCORE racer_scores -inf 10\n1) \"Ford\"\n2) \"Sam-Bodden\"\n3) \"Norem\"\n4) \"Royce\"\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting String Values in Redis\nDESCRIPTION: This snippet shows how to store a string value under a specific key using the `SET` command, and then retrieve the stored value using the `GET` command.  It uses a key named `bike:1` to store the string \"Process 134\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/get-started/data-store.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nSET bike:1 \"Process 134\"\n```\n\nLANGUAGE: redis\nCODE:\n```\nGET bike:1\n```\n\n----------------------------------------\n\nTITLE: ZRANGEBYSCORE Example with Double Exclusive Interval - Redis CLI\nDESCRIPTION: This example demonstrates how to use ZRANGEBYSCORE with a double exclusive interval, excluding both the specified minimum and maximum scores. It retrieves elements from the sorted set 'zset' with scores greater than 5 and less than 10.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebyscore.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nZRANGEBYSCORE zset (5 (10\n```\n\n----------------------------------------\n\nTITLE: Setting a Key with NX and PX options in Redis\nDESCRIPTION: This Redis command sets a key only if it does not already exist (NX option), with an expire time of 30000 milliseconds (PX option). The key is set to a unique random value, which is crucial for safe lock release.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/distributed-locks.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nSET resource_name my_random_value NX PX 30000\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String from double (C)\nDESCRIPTION: This code snippet demonstrates the creation of a Redis module string object from a double-precision floating-point number. The returned string object needs to be released, either by using RedisModule_FreeString or by enabling automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringFromDouble(RedisModuleCtx *ctx,\n                                                          double d);\n```\n\n----------------------------------------\n\nTITLE: Checking for IO Errors with RedisModule_IsIOError - C\nDESCRIPTION: Checks if any previous IO API call has failed during RDB loading or saving. The `REDISMODULE_OPTIONS_HANDLE_IO_ERRORS` flag must be set via `RedisModule_SetModuleOptions` for `Load*` APIs to enable error handling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_163\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_IsIOError(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Run RedisInsight Docker Image (Persistent)\nDESCRIPTION: This command runs the RedisInsight Docker image in detached mode, mapping port 5540 on the host to port 5540 on the container and persisting data to a Docker volume named `redisinsight` mounted at `/data` inside the container. Requires Docker to be installed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest -v redisinsight:/data\n```\n\n----------------------------------------\n\nTITLE: Accessing String Value with RedisModule_StringDMA - C\nDESCRIPTION: Accesses existing string values using Direct Memory Access (DMA) for speed. It returns a pointer and length, allowing direct access and modification of the string. Requires `WRITE` mode for writing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nsize_t len, j;\nchar *myptr = RedisModule_StringDMA(key,&len,REDISMODULE_WRITE);\nfor (j = 0; j < len; j++) myptr[j] = 'A';\n```\n\n----------------------------------------\n\nTITLE: Setting ACL user with specific SELECT argument - Redis CLI\nDESCRIPTION: This snippet demonstrates how to set ACL permissions for a user, specifically removing the general SELECT command and then allowing SELECT with the argument '0'. Note that the reverse is not possible.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_17\n\nLANGUAGE: Redis CLI\nCODE:\n```\nACL SETUSER myuser -select +select|0\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis server using redis-cli\nDESCRIPTION: This snippet shows how to connect to a running Redis server using the `redis-cli` command-line interface. It also demonstrates a simple `ping` command to verify the connection and that the server is responding. The expected output is 'PONG'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-windows.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli \n127.0.0.1:6379> ping\nPONG\n```\n\n----------------------------------------\n\nTITLE: Executing Commands from a File\nDESCRIPTION: This code demonstrates how to execute a series of Redis commands from a text file using input redirection.  It pipes the content of commands.txt to redis-cli, executing each command sequentially.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /tmp/commands.txt\nSET item:3374 100\nINCR item:3374\nAPPEND item:3374 xxx\nGET item:3374\n$ cat /tmp/commands.txt | redis-cli\nOK\n(integer) 101\n(integer) 6\n\"101xxx\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Failover in Redis Cluster\nDESCRIPTION: This command triggers a manual failover of a master node to one of its replicas in a Redis Cluster. This is a crucial step when upgrading master nodes to ensure minimal downtime and data consistency. The master will become a replica after failover.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER FAILOVER\n```\n\n----------------------------------------\n\nTITLE: Redis Benchmark with MONITOR\nDESCRIPTION: This benchmark result shows the performance of Redis while the `MONITOR` command is running. It highlights the significant performance degradation caused by streaming all commands to a monitoring client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/monitor.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ src/redis-benchmark -c 10 -n 100000 -q\nPING_INLINE: 58479.53 requests per second\nPING_BULK: 59136.61 requests per second\nSET: 41823.50 requests per second\nGET: 45330.91 requests per second\nINCR: 41771.09 requests per second\n```\n\n----------------------------------------\n\nTITLE: Retrieving Redis User ACL Information with ACL GETUSER\nDESCRIPTION: This code snippet shows how to retrieve detailed ACL information for a specific user ('alice') using the `ACL GETUSER` command. The output includes flags, passwords, allowed commands, key patterns, channels and selectors. The output is designed for human readability.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n> ACL GETUSER alice\n1) \"flags\"\n2) 1) \"on\"\n3) \"passwords\"\n4) 1) \"2d9c75...\"\n5) \"commands\"\n6) \"-@all +get\"\n7) \"keys\"\n8) \"~cached:*\"\n9) \"channels\"\n10) \"\"\n11) \"selectors\"\n12) (empty array)\n```\n\n----------------------------------------\n\nTITLE: SENTINEL sentinels Command\nDESCRIPTION: This command obtains a list of other Sentinels monitoring a specific master. The client can use this list to update its internal list of Sentinel nodes, improving reliability. It's not necessary to persist the upgraded list in the configuration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/sentinel-clients.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSENTINEL sentinels <master-name>\n```\n\n----------------------------------------\n\nTITLE: Using ECHO command in Redis CLI\nDESCRIPTION: This snippet demonstrates how to use the ECHO command in the Redis CLI to return the provided message. The ECHO command takes a single string argument and returns it to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/echo.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nECHO \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Replying with Long Long\nDESCRIPTION: RedisModule_ReplyWithLongLong sends an integer reply to the client, with the specified long long value. The function always returns REDISMODULE_OK.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_53\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithLongLong(RedisModuleCtx *ctx, long long ll);\n```\n\n----------------------------------------\n\nTITLE: Downloading Redis Source File using wget\nDESCRIPTION: Downloads the latest stable version of Redis source code from the Redis downloads site using the wget command. This step is the first in compiling Redis from source. It requires wget to be installed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-from-source.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://download.redis.io/redis-stable.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Get Key Name From Defrag Ctx - C\nDESCRIPTION: Returns the name of the key currently being processed during a defrag operation. This is useful for modules to understand which key is being defragmented. There is no guarantee that the key name is always available, so this may return NULL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_309\n\nLANGUAGE: c\nCODE:\n```\nconst RedisModuleString *RedisModule_GetKeyNameFromDefragCtx(RedisModuleDefragCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Setting a Disconnect Callback - RedisModule_SetDisconnectCallback\nDESCRIPTION: Sets a callback function that will be called if a blocked client disconnects before `RedisModule_UnblockClient` is called. This allows modules to cleanup their state when a client disconnects unexpectedly. Reply* family functions are not safe to call here.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_200\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SetDisconnectCallback(RedisModuleBlockedClient *bc,\n                                           RedisModuleDisconnectFunc callback);\n```\n\n----------------------------------------\n\nTITLE: Adding Post Notification Job in Redis Module (C)\nDESCRIPTION: Registers a job callback to be executed after a keyspace notification, ensuring that any write operations are performed safely and atomically. The callback is invoked when it's safe to perform write operations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_215\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_AddPostNotificationJob(RedisModuleCtx *ctx,\n                                           RedisModulePostNotificationJobFunc callback,\n                                           void *privdata,\n                                           void (*free_privdata)(void*));\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis with URI Option\nDESCRIPTION: This code shows how to connect to a Redis instance using a URI, including username, password, host, port, and database number. The PING command verifies the connection.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -u redis://LJenkins:p%40ssw0rd@redis-16379.hosted.com:16379/0 PING\nPONG\n```\n\n----------------------------------------\n\nTITLE: Restarting Scan Cursor in Redis Module (C)\nDESCRIPTION: This function restarts an existing scan cursor. Restarting the cursor will cause the keyspace to be rescanned from the beginning.  Use this if the underlying keyspace has changed significantly since the last scan.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_279\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ScanCursorRestart(RedisModuleScanCursor *cursor);\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String from another String (C)\nDESCRIPTION: This code snippet shows how to create a Redis module string object from another existing RedisModuleString object. The returned string should be released using RedisModule_FreeString or via automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringFromString(RedisModuleCtx *ctx,\n                                                          const RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Trimming a Stream By Length - C\nDESCRIPTION: This function trims a stream by length, similar to XTRIM with MAXLEN. It takes a RedisModuleKey opened for writing, flags for approximate trimming, and the desired length. It returns the number of deleted entries, or a negative value on failure, setting errno.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_140\n\nLANGUAGE: C\nCODE:\n```\nlong long RedisModule_StreamTrimByLength(RedisModuleKey *key,\n                                             int flags,\n                                             long long length);\n```\n\n----------------------------------------\n\nTITLE: Adding Element to a Redis Sorted Set\nDESCRIPTION: This function adds a new element to a Redis sorted set with the provided score. If the element exists, it updates the score. Flags can control add behavior (REDISMODULE_ZADD_XX, REDISMODULE_ZADD_NX, REDISMODULE_ZADD_GT, REDISMODULE_ZADD_LT).  Returns REDISMODULE_OK on success and REDISMODULE_ERR on failure (key not opened for writing, wrong type, score is NaN).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_116\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetAdd(RedisModuleKey *key,\n                            double score,\n                            RedisModuleString *ele,\n                            int *flagsptr);\n```\n\n----------------------------------------\n\nTITLE: Removing Element from a Redis Sorted Set\nDESCRIPTION: This function removes an element from a Redis sorted set. Returns REDISMODULE_OK on success, and REDISMODULE_ERR if the key was not opened for writing or of the wrong type. The 'deleted' parameter can be used to check if the element was actually removed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_118\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetRem(RedisModuleKey *key,\n                            RedisModuleString *ele,\n                            int *deleted);\n```\n\n----------------------------------------\n\nTITLE: Getting Malloc Size in Redis Module (C)\nDESCRIPTION: This function returns the amount of memory allocated for a given pointer that was allocated using `RedisModule_Alloc()` or `RedisModule_Realloc()`. The size returned might be larger than the originally requested size due to the underlying allocator.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_273\n\nLANGUAGE: c\nCODE:\n```\nsize_t RedisModule_MallocSize(void* ptr);\n```\n\n----------------------------------------\n\nTITLE: Configuring replica IP and port announcement\nDESCRIPTION: These configuration directives allow a Redis replica to announce an arbitrary IP address and port to the master, which is useful in Docker or NAT environments where the replica's actual IP and port may differ from the ones seen by the master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/replication.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    replica-announce-ip 5.5.5.5\n    replica-announce-port 1234\n```\n\n----------------------------------------\n\nTITLE: Adding stream entry\nDESCRIPTION: Adds a new entry to the `race:france` stream with the specified racer data (rider, speed, position, location_id). The `*` indicates that the server should generate a unique ID for the entry. The command returns the generated ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:france * rider Castilla speed 30.2 position 1 location_id 1\n```\n\n----------------------------------------\n\nTITLE: Assigning Slot Range using CLUSTER ADDSLOTSRANGE in Redis\nDESCRIPTION: This code snippet demonstrates assigning a range of hash slots to a Redis node using the CLUSTER ADDSLOTSRANGE command. It takes a start and end slot as input, defining the range. The output is \"OK\" upon successful assignment.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-addslotsrange.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> CLUSTER ADDSLOTSRANGE 1 5\nOK\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Configuration Directories\nDESCRIPTION: These commands create the necessary directories for storing Redis configuration files and data. `/etc/redis` is used for configuration, and `/var/redis` is used for data and working directories. They are created with `sudo` to ensure correct permissions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /etc/redis\nsudo mkdir /var/redis\n```\n\n----------------------------------------\n\nTITLE: ZRANGE by Index Example in Redis CLI\nDESCRIPTION: Demonstrates basic ZRANGE usage by index to retrieve elements from a sorted set. It showcases retrieving all elements, a specific range, and elements from the end of the set using negative indexes.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\" 2 \"two\" 3 \"three\"\nZRANGE myzset 0 -1\nZRANGE myzset 2 3\nZRANGE myzset -2 -1\n```\n\n----------------------------------------\n\nTITLE: Disable Linux Transparent Huge Pages\nDESCRIPTION: This command disables the Linux kernel feature Transparent Huge Pages (THP), which can negatively impact Redis memory usage and latency. It's recommended to disable THP for Redis deployments. Requires root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration Parameters to Module\nDESCRIPTION: Shows how to pass configuration parameters to a Redis module when loading it using the `MODULE LOAD` command or the `loadmodule` directive in `redis.conf`. The arguments are passed as an array of `RedisModuleString` pointers to the module's `OnLoad()` function.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nloadmodule mymodule.so foo bar 1234\n```\n\n----------------------------------------\n\nTITLE: Replicating Commands Verbatim with RedisModule_ReplicateVerbatim - C\nDESCRIPTION: Replicates a command verbatim as the user executed it. This should only be used if there are no side effects and the command consistently performs the same work. Avoid mixing this with other replication functions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_47\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplicateVerbatim(ctx);\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Expiration Timestamp (Milliseconds) in Redis CLI\nDESCRIPTION: This example demonstrates setting a key's value, setting its expiration time using PEXPIREAT with a specific timestamp in milliseconds, and then retrieving the remaining expiration time using PEXPIRETIME. It assumes a Redis server is running and accessible via the redis-cli.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pexpiretime.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSET mykey \"Hello\"\nPEXPIREAT mykey 33177117420000\nPEXPIRETIME mykey\n```\n\n----------------------------------------\n\nTITLE: Getting Cluster Nodes List in Redis Module (C)\nDESCRIPTION: Retrieves a list of node IDs in the Redis Cluster.  The function returns an array of string pointers with each string pointer being a cluster node ID of exactly `REDISMODULE_NODE_ID_LEN` bytes. The array needs to be freed using `RedisModule_FreeClusterNodesList`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_220\n\nLANGUAGE: C\nCODE:\n```\nchar **RedisModule_GetClusterNodesList(RedisModuleCtx *ctx, size_t *numnodes);\n```\n\n----------------------------------------\n\nTITLE: Stepping through code in the debugger\nDESCRIPTION: This snippet illustrates the output seen when stepping through Lua code in the Redis debugger. It displays the currently executed line of code (`-> 1 redis.call('ping')`), the command sent to Redis (`<redis> ping`), and the server's response (`<reply> \"+PONG\"`). This output is only visible in stepping mode.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n* Stopped at 1, stop reason = step over\n-> 1   redis.call('ping')\nlua debugger> step\n<redis> ping\n<reply> \"+PONG\"\n* Stopped at 2, stop reason = step over\n```\n\n----------------------------------------\n\nTITLE: Converting String to Stream ID\nDESCRIPTION: RedisModule_StringToStreamID converts the string into a stream ID, storing it at *id. Returns REDISMODULE_OK on success and returns REDISMODULE_ERR if the string is not a valid string representation of a stream ID. The special IDs \"+\" and \"-\" are allowed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringToStreamID(const RedisModuleString *str,\n                                     RedisModuleStreamID *id);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Channel and Pattern in Redis Pub/Sub (Bash)\nDESCRIPTION: This snippet shows an example of subscribing to both a channel and a pattern that matches the same channel. In this scenario, a client subscribing to the channel 'foo' and the pattern 'f*' will receive a message twice when it's published to channel 'foo'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSUBSCRIBE foo\nPSUBSCRIBE f*\n```\n\n----------------------------------------\n\nTITLE: Connecting to a different Redis instance\nDESCRIPTION: This example illustrates how to use the `CONNECT` command to connect to a different Redis instance specified by hostname and port. The prompt changes to reflect the newly connected instance. It requires a Redis instance running on the specified hostname and port.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> CONNECT metal 6379\nmetal:6379> PING\nPONG\n```\n\n----------------------------------------\n\nTITLE: Wire Protocol Example: Unsubscribing from Channels in Redis (Text)\nDESCRIPTION: This is an example of how unsubscribing from channels in Redis looks over the wire protocol. It shows the commands and replies exchanged between the client and the server when unsubscribing from all channels.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUNSUBSCRIBE\n*3\n$11\nunsubscribe\n$6\nsecond\n:1\n*3\n$11\nunsubscribe\n$5\nfirst\n:0\n```\n\n----------------------------------------\n\nTITLE: Using WAITAOF command in Redis\nDESCRIPTION: This example demonstrates the usage of the WAITAOF command in Redis to ensure data persistence. It shows how to wait for the write to be fsynced locally and how to wait for replication with a timeout.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/waitaof.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> SET foo bar\nOK\n> WAITAOF 1 0 0\n1) (integer) 1\n2) (integer) 0\n> WAITAOF 0 1 1000\n1) (integer) 1\n2) (integer) 0\n```\n\n----------------------------------------\n\nTITLE: Replying with Verbatim String Type - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to reply with a verbatim string type using the Redis Module API. The function `RedisModule_ReplyWithVerbatimStringType` sends a binary-safe string along with a 3-character extension/type indicator.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_71\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithVerbatimStringType(RedisModuleCtx *ctx,\n                                                const char *buf,\n                                                size_t len,\n                                                const char *ext);\n```\n\n----------------------------------------\n\nTITLE: Create consumer group using XGROUP CREATE - Redis\nDESCRIPTION: This command creates a consumer group named `group55` for the stream `mystream`. The `0-0` argument indicates that the consumer group will start reading from the beginning of the stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xpending.md#_snippet_0\n\nLANGUAGE: redis\nCODE:\n```\n> XGROUP CREATE mystream group55 0-0\nOK\n```\n\n----------------------------------------\n\nTITLE: Simple String Reply\nDESCRIPTION: Replies to the client with a simple string. Suitable for small words like \"OK\", cannot contain binary values or newlines. The `ctx` parameter is the RedisModuleCtx pointer, and the second argument is the simple string to return.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithSimpleString(ctx,\"OK\");\n```\n\n----------------------------------------\n\nTITLE: Getting the Length of a Redis String in C\nDESCRIPTION: The `sdslen` function retrieves the length of a Redis string. It calculates the address of the `sdshdr` structure by subtracting the size of the structure from the given string pointer (`s`). It then accesses the `len` field of the `sdshdr` to return the length of the string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-sds.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nsize_t sdslen(const sds s) {\n    struct sdshdr *sh = (void*) (s-(sizeof(struct sdshdr)));\n    return sh->len;\n}\n```\n\n----------------------------------------\n\nTITLE: Wire Protocol Example: Subscribing to Channels in Redis (Text)\nDESCRIPTION: This is an example of how subscribing to channels in Redis looks over the wire protocol. It shows the commands and replies exchanged between the client and the server when subscribing to the channels `first` and `second`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSUBSCRIBE first second\n*3\n$9\nsubscribe\n$5\nfirst\n:1\n*3\n$9\nsubscribe\n$6\nsecond\n:2\n```\n\n----------------------------------------\n\nTITLE: Interactive Redis CLI Session\nDESCRIPTION: This snippet shows how to start the `redis-cli` in interactive mode.  Once in interactive mode, you can type Redis commands directly. The example shows sending a PING command and receiving a PONG response.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli\nredis 127.0.0.1:6379> ping\nPONG\n```\n\n----------------------------------------\n\nTITLE: Generating AOF file for Redis Masters\nDESCRIPTION: This command generates an append-only file (AOF) for each of the Redis masters in preparation for migrating to a Redis Cluster. The AOF file contains all the write operations performed on the master, allowing for data recovery and migration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nBGREWRITEAOF\n```\n\n----------------------------------------\n\nTITLE: Converting String to Unsigned Long Long\nDESCRIPTION: RedisModule_StringToULongLong converts a RedisModuleString to an unsigned long long integer, storing it at *ull. It returns REDISMODULE_OK on success. If the string can't be parsed as a valid, strict unsigned long long (no spaces before/after), REDISMODULE_ERR is returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_45\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringToULongLong(const RedisModuleString *str,\n                                      unsigned long long *ull);\n```\n\n----------------------------------------\n\nTITLE: Searching for a Key in Lexicographical Index\nDESCRIPTION: This code shows how to search for a key in a Redis sorted set used as a key-value store using lexicographical indexing. The ZRANGE command with BYLEX retrieves the entry matching the key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_14\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex [mykey: + BYLEX LIMIT 0 1\n1) \"mykey:myvalue\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Last Stream Entry with XREVRANGE in Redis CLI\nDESCRIPTION: Retrieves the last element added to a Redis stream named 'somestream'.  The '+' denotes the highest possible ID, and the '-' denotes the lowest possible ID. The COUNT 1 limits the result to a single entry.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xrevrange.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nXREVRANGE somestream + - COUNT 1\n```\n\n----------------------------------------\n\nTITLE: Set ACL user with selectors (Redis 7.0+)\nDESCRIPTION: This example shows how to set ACL rules with selectors in Redis 7.0 or later.  The user 'virginia' has root permissions to execute the 'GET' command on all keys, and a selector that grants permission to execute the 'SET' command on keys starting with 'app1'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nACL SETUSER virginia on +GET allkeys (+SET ~app1*)\n```\n\n----------------------------------------\n\nTITLE: Push Random Integers to List - Deterministic Script (Lua)\nDESCRIPTION: This Lua script demonstrates how to generate random numbers deterministically within a Redis script. It utilizes `math.randomseed()` to seed the pseudo-random number generator with a value provided as an argument.  This ensures that the script produces the same sequence of random numbers given the same seed, maintaining determinism for replication and AOF persistence.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nRandomPushScript = <<EOF\n    local i = tonumber(ARGV[1])\n    local res\n    math.randomseed(tonumber(ARGV[2]))\n    while (i > 0) do\n        res = redis.call('LPUSH',KEYS[1],math.random())\n        i = i-1\n    end\n    return res\nEOF\n```\n\n----------------------------------------\n\nTITLE: Moving Sorted Set Iterator to Next Element in Redis Module (C)\nDESCRIPTION: This function moves a sorted set iterator to the next element. It takes a `RedisModuleKey` as input. It returns 1 if there was a next element, or 0 if the iterator is already at the last element or the range does not include any items.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_127\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetRangeNext(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Checking Key Permissions - RedisModule_ACLCheckKeyPermissions\nDESCRIPTION: Checks if a user can access a key according to their ACLs. The `flags` parameter represents the key access flags (e.g., `REDISMODULE_CMD_KEY_ACCESS`, `REDISMODULE_CMD_KEY_UPDATE`). Returns `REDISMODULE_OK` on success or `REDISMODULE_ERR` on failure, setting errno to `EINVAL` if the flags are invalid or `EACCES` if the user doesn't have permission.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_231\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ACLCheckKeyPermissions(RedisModuleUser *user,\n                                           RedisModuleString *key,\n                                           int flags);\n```\n\n----------------------------------------\n\nTITLE: Replying with a Null Array - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply to the client with a null array using the Redis Module API. The function `RedisModule_ReplyWithNullArray` sends a null array, which is represented as null in RESP3 and a null array in RESP2.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_61\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithNullArray(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Replying with Error\nDESCRIPTION: RedisModule_ReplyWithError replies with the error 'err'. Note that 'err' must contain all the error, including the initial error code. The function always returns REDISMODULE_OK.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_54\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithError(RedisModuleCtx *ctx, const char *err);\n```\n\n----------------------------------------\n\nTITLE: Get Db Id From Defrag Ctx - C\nDESCRIPTION: Returns the database ID of the key currently being processed during defragmentation. This allows modules to identify the database associated with the key being defragmented. The function may return -1 if the information is not available.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_310\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_GetDbIdFromDefragCtx(RedisModuleDefragCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Getting Module User ACL String - RedisModule_GetModuleUserACLString\nDESCRIPTION: Retrieves the ACL string for a given user as a `RedisModuleString`. The returned string must be released with `RedisModule_FreeString()` or by enabling automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_227\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_GetModuleUserACLString(RedisModuleUser *user);\n```\n\n----------------------------------------\n\nTITLE: Getting Server Information with RedisModule_GetServerInfo in C\nDESCRIPTION: Retrieves server information similar to the INFO command.  Takes an optional section argument. The returned `RedisModuleServerInfoData` should be freed with `RedisModule_FreeServerInfo`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_254\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleServerInfoData *RedisModule_GetServerInfo(RedisModuleCtx *ctx,\n                                                         const char *section);\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String Object (C)\nDESCRIPTION: This code snippet creates a new Redis module string object by copying a specified number of bytes from a given pointer. The returned string needs to be freed unless automatic memory management is enabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateString(RedisModuleCtx *ctx,\n                                                const char *ptr,\n                                                size_t len);\n```\n\n----------------------------------------\n\nTITLE: Create New Key\nDESCRIPTION: Creates a new key by opening it for writing and then writing to it. `RedisModule_StringSet` sets the string value of a key.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleKey *key;\nkey = RedisModule_OpenKey(ctx,argv[1],REDISMODULE_WRITE);\nif (RedisModule_KeyType(key) == REDISMODULE_KEYTYPE_EMPTY) {\n    RedisModule_StringSet(key,argv[2]);\n}\n```\n\n----------------------------------------\n\nTITLE: Native Type Free Callback - C\nDESCRIPTION: This snippet provides a trivial example of a free callback function (`MyTypeFreeCallback`) for a native type. It uses `RedisModule_Free` to release the memory allocated for the native type's value.  A more realistic implementation would handle more complex memory reclamation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid MyTypeFreeCallback(void *value) {\n    RedisModule_Free(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling/Enabling Client Eviction in Redis\nDESCRIPTION: These Redis commands demonstrate how to disable or enable client eviction for a specific client connection.  `CLIENT NO-EVICT on` prevents the client from being evicted, while `CLIENT NO-EVICT off` re-enables eviction.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/clients.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nCLIENT NO-EVICT on\n```\n\nLANGUAGE: redis\nCODE:\n```\nCLIENT NO-EVICT off\n```\n\n----------------------------------------\n\nTITLE: Return Error Reply from Redis Lua Script\nDESCRIPTION: This example demonstrates two equivalent methods for returning error replies from Redis Lua scripts. Both involve creating a Lua table with the 'err' field set to the error message, which is then returned to the client, resulting in a Redis error. It highlights the usage of `redis.error_reply()` for creating these replies.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return { err = 'ERR My very special table error' }\" 0\n(error) ERR My very special table error\nredis> EVAL \"return redis.error_reply('ERR My very special reply error')\" 0\n(error) ERR My very special reply error\n```\n\n----------------------------------------\n\nTITLE: Getting Call Reply Type - C\nDESCRIPTION: Returns the type of a RedisModuleCallReply as one of the predefined constants (REDISMODULE_REPLY_STRING, REDISMODULE_REPLY_INTEGER, etc.). Allows modules to determine how to interpret the command reply.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_143\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_CallReplyType(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command Documentation in Redis CLI\nDESCRIPTION: This example shows how to use the `COMMAND DOCS` command in the Redis CLI to retrieve documentation for the `SET` command. The output will be a map containing information about the `SET` command, such as its summary, version, and arguments.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-docs.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND DOCS SET\n```\n\n----------------------------------------\n\nTITLE: Redis KEYS Command Examples\nDESCRIPTION: Illustrates usage of the Redis KEYS command with various glob-style patterns. It sets multiple key-value pairs using MSET and then demonstrates different pattern matching examples to retrieve keys based on specified criteria.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/keys.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nMSET firstname Jack lastname Stuntman age 35\nKEYS *name*\nKEYS a??\nKEYS *\n```\n\n----------------------------------------\n\nTITLE: Redis Authentication Failure Example\nDESCRIPTION: This example demonstrates a failed authentication attempt using the `AUTH` command with an incorrect password. The server returns an error indicating the invalid username-password pair, which is then logged as an ACL security event.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-log.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\n> AUTH someuser wrongpassword\n(error) WRONGPASS invalid username-password pair\n```\n\n----------------------------------------\n\nTITLE: Redis XREAD Blocking Example\nDESCRIPTION: This example demonstrates the blocking behavior of `XREAD`. The command blocks for 1000 milliseconds, waiting for new data to arrive in the `mystream` stream. If no new data arrives within the timeout, the command returns `(nil)`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xread.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n> XREAD BLOCK 1000 STREAMS mystream 1526999626221-0\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Slave Role Output Example\nDESCRIPTION: Example output of the ROLE command when executed on a Redis slave (replica) instance. It shows the slave's role, master IP and port, connection status, and replication offset received from the master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/role.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1) \"slave\"\n2) \"127.0.0.1\"\n3) (integer) 9000\n4) \"connected\"\n5) (integer) 3167038\n```\n\n----------------------------------------\n\nTITLE: Zero Padding with SETRANGE - CLI\nDESCRIPTION: Illustrates the use of SETRANGE with an offset greater than the current string length, resulting in zero padding. It directly sets a substring at an offset using SETRANGE on a non-existing key, then retrieves the resulting string with GET, demonstrating the padding.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/setrange.md#_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\nSETRANGE key2 6 \"Redis\"\nGET key2\n```\n\n----------------------------------------\n\nTITLE: Getting Reply Type (C)\nDESCRIPTION: This snippet demonstrates how to get the type of a RedisModuleCallReply object using `RedisModule_CallReplyType`. It checks if the reply is an integer and then retrieves the integer value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nreply = RedisModule_Call(ctx,\"INCRBY\",\"sc\",argv[1],\"10\");\nif (RedisModule_CallReplyType(reply) == REDISMODULE_REPLY_INTEGER) {\n    long long myval = RedisModule_CallReplyInteger(reply);\n    /* Do something with myval. */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating String from Call Reply (C)\nDESCRIPTION: This snippet demonstrates creating a RedisModuleString from a RedisModuleCallReply that is of type string, error, or integer, using the function `RedisModule_CreateStringFromCallReply`. The created string must be released using `RedisModule_FreeString`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *mystr = RedisModule_CreateStringFromCallReply(myreply);\n```\n\n----------------------------------------\n\nTITLE: Read stream entries by range\nDESCRIPTION: Reads a range of entries from the `race:france` stream. It starts at ID `1692632086370-0` and returns up to 2 entries (`COUNT 2`). The `+` indicates positive infinity, meaning to retrieve from the start ID up to the end of the stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nXRANGE race:france 1692632086370-0 + COUNT 2\n```\n\n----------------------------------------\n\nTITLE: Retrieve Redis Command Information\nDESCRIPTION: This example demonstrates how to retrieve information about the `get`, `set`, and `eval` commands using the `COMMAND INFO` command in Redis. The command returns an array reply containing details for each specified command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command-info.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nCOMMAND INFO get set eval\n```\n\n----------------------------------------\n\nTITLE: Compiling Redis from source with make\nDESCRIPTION: Extracts the downloaded tarball, navigates to the extracted directory, and compiles Redis using the make command. Requires a C compiler and `libc` to be available. The output is several Redis binaries in the `src` directory.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-from-source.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzvf redis-stable.tar.gz\ncd redis-stable\nmake\n```\n\n----------------------------------------\n\nTITLE: ROLE Command\nDESCRIPTION: The ROLE command is used to verify the role (master or replica) of a Redis instance after obtaining its address from Sentinel. It helps ensure that the client is connecting to the correct type of instance. It was introduced in Redis 2.8.12.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/sentinel-clients.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nROLE\n```\n\n----------------------------------------\n\nTITLE: Specifying an external ACL file - Redis Configuration\nDESCRIPTION: This snippet shows how to specify the path to an external ACL file using the `aclfile` configuration directive in the redis.conf file.  This is mutually incompatible with defining users directly in redis.conf.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_22\n\nLANGUAGE: Redis Configuration\nCODE:\n```\naclfile /etc/redis/users.acl\n```\n\n----------------------------------------\n\nTITLE: Claiming Pending Messages from a Failed Consumer (XCLAIM)\nDESCRIPTION: This command changes the ownership of specified messages from one consumer to another within a consumer group. It requires a minimum idle time to prevent simultaneous claims by multiple clients.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_29\n\nLANGUAGE: redis\nCODE:\n```\n> XCLAIM race:italy italy_riders Alice 60000 1692632647899-0\n```\n\n----------------------------------------\n\nTITLE: Profiling Redis with perf (Sampling Stack Traces)\nDESCRIPTION: This command uses the perf tool to record stack traces of the redis-server process for 60 seconds at a frequency of 999 samples per second. The -g option enables stack trace recording, and --pid specifies the target process ID.  It creates a perf.data file with the profiling information.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ perf record -g --pid $(pgrep redis-server) -F 999 -- sleep 60\n```\n\n----------------------------------------\n\nTITLE: Verbatim String Example in RESP\nDESCRIPTION: This example demonstrates the structure of a verbatim string in RESP. It includes the length of the string, the encoding type (txt), and the data itself.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n=15\\r\\n\ntxt:Some string\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Getting Malloc Size of Dictionary in Redis Module (C)\nDESCRIPTION: This function returns the memory overhead of the underlying structures of a `RedisModuleDict`.  It does *not* include the allocation sizes of the keys and values stored in the dictionary.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_276\n\nLANGUAGE: c\nCODE:\n```\nsize_t RedisModule_MallocSizeDict(RedisModuleDict* dict);\n```\n\n----------------------------------------\n\nTITLE: Registering a Function with redis.register_function (Positional Args) in Lua\nDESCRIPTION: Registers a function to a loaded library, using positional arguments: name and callback. This function is only available from the context of the `FUNCTION LOAD` command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_18\n\nLANGUAGE: Lua\nCODE:\n```\nredis> FUNCTION LOAD \"#!lua name=mylib\\n redis.register_function('noop', function() end)\"\n```\n\n----------------------------------------\n\nTITLE: Loading Module via redis.conf\nDESCRIPTION: Demonstrates how to load a Redis module using the `loadmodule` directive in the `redis.conf` file.  This loads the module during Redis startup.  The path to the module's shared object file is required.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nloadmodule /path/to/mymodule.so\n```\n\n----------------------------------------\n\nTITLE: Adding members to a sorted set - Redis CLI\nDESCRIPTION: Adds three members \"one\", \"two\", and \"three\" to the sorted set `myzset` with scores 1, 2, and 3 respectively. This prepares the sorted set for the subsequent ZPOPMIN operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zpopmin.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\n```\n\n----------------------------------------\n\nTITLE: Listing Commands Within a Specific Redis ACL Category\nDESCRIPTION: This code snippet shows how to list all commands within a specific command category using `ACL CAT <category-name>`. The example shows the commands in the 'geo' category.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nACL CAT <category-name> -- Will list all the commands inside the category\n```\n\n----------------------------------------\n\nTITLE: Replying with RedisModuleString - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply with a bulk string using a `RedisModuleString` object via the Redis Module API. The function `RedisModule_ReplyWithString` sends the string to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_69\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithString(RedisModuleCtx *ctx, RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Service\nDESCRIPTION: This command starts the Redis server using the init script located at `/etc/init.d/redis_6379`. The `start` argument tells the script to start the Redis process. `sudo` is needed to execute the script with root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/_index.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/init.d/redis_6379 start\n```\n\n----------------------------------------\n\nTITLE: ACL SETUSER error example (Redis)\nDESCRIPTION: This example demonstrates a syntax error when using `ACL SETUSER`. It shows the error message returned by Redis when an invalid modifier (in this case, 'heeyyyy') is used.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER antirez heeyyyy\n(error) ERR Error in ACL SETUSER modifier 'heeyyyy': Syntax error\n```\n\n----------------------------------------\n\nTITLE: Combine COUNT and RANK options in Redis LPOS\nDESCRIPTION: This example combines the RANK and COUNT options to find multiple indices starting from a specific rank. It finds the first two indices of the element 'c', starting from the last occurrence.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_4\n\nLANGUAGE: redis\nCODE:\n```\n> LPOS mylist c RANK -1 COUNT 2\n[7,6]\n```\n\n----------------------------------------\n\nTITLE: Redis Sentinel: Get Master Address after Failover\nDESCRIPTION: This command checks the master address after a failover has occurred. It connects to a Sentinel instance and retrieves the updated address (IP and port) of the new master for the given master set name ('mymaster').\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:5000> SENTINEL get-master-addr-by-name mymaster\n1) \"127.0.0.1\"\n2) \"6380\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Keyspace Events in Redis Module (C)\nDESCRIPTION: Subscribes a Redis module to keyspace notifications based on specified event types. The callback function is triggered when events matching the type mask occur. This API allows modules to react to data changes within Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_213\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_SubscribeToKeyspaceEvents(RedisModuleCtx *ctx,\n                                              int types,\n                                              RedisModuleNotificationFunc callback);\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Importing Slot Example\nDESCRIPTION: This example demonstrates the format used in the `CLUSTER NODES` output to indicate importing slots. These slots are being migrated to the current node.  Queries about these slots are accepted only if the `ASK` command is used.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-nodes.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[slot_number-<-importing_from_node_id]\n```\n\n----------------------------------------\n\nTITLE: Getting Database ID from Optional Context (C)\nDESCRIPTION: Returns the ID of the database currently being processed, retrieved from the RedisModuleKeyOptCtx. Requires a RedisModuleKeyOptCtx pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_105\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_GetDbIdFromOptCtx(RedisModuleKeyOptCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Replying with Boolean - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to reply with a RESP3 Boolean type using the Redis Module API. The function `RedisModule_ReplyWithBool` sends a boolean value to the client. In RESP2, it's represented as the strings \"1\" and \"0\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_74\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithBool(RedisModuleCtx *ctx, int b);\n```\n\n----------------------------------------\n\nTITLE: Safe Lock Release with Lua Script in Redis\nDESCRIPTION: This Lua script safely releases a lock by verifying that the key exists and its value matches the expected random value. This prevents accidental removal of locks held by other clients, addressing a critical flaw in naive implementations using only DEL.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/distributed-locks.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting and Debugging with a Redis Client in Lua\nDESCRIPTION: This snippet illustrates how to connect to a Redis server using a Lua client, enable debugging mode, execute a script, and then continue the debugging session. It requires the `redis-lua` library.  It sets up a Redis client, enables debugging on the server, executes a Lua script using `EVAL`, retrieves and prints the result, and then sends a 'continue' command to the debugger.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_8\n\nLANGUAGE: Lua\nCODE:\n```\nlocal redis = require 'redis'\n\n-- add LDB's Continue command\nredis.commands['ldbcontinue'] = redis.command('C')\n\n-- script to be debugged\nlocal script = [[\n  local x, y = tonumber(ARGV[1]), tonumber(ARGV[2])\n  local result = x * y\n  return result\n]]\n\nlocal client = redis.connect('127.0.0.1', 6379)\nclient:script(\"DEBUG\", \"YES\")\nprint(unpack(client:eval(script, 0, 6, 9)))\nclient:ldbcontinue()\n```\n\n----------------------------------------\n\nTITLE: Getting Next Stream ID during iteration\nDESCRIPTION: This snippet shows how to retrieve the next stream ID and number of fields during stream iteration using `RedisModule_StreamIteratorNextID`. The function takes the key, a pointer to store the stream ID, and a pointer to store the number of fields in the entry.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_136\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamIteratorNextID(RedisModuleKey *key,\n                                         RedisModuleStreamID *id,\n                                         long *numfields);\n```\n\n----------------------------------------\n\nTITLE: Handling NOSCRIPT Error with EVALSHA\nDESCRIPTION: This example shows how Redis returns an error when `EVALSHA` is called with a SHA1 digest that is not present in the script cache. This necessitates loading the script using `SCRIPT LOAD` before calling `EVALSHA`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVALSHA ffffffffffffffffffffffffffffffffffffffff 0\n(error) NOSCRIPT No matching script\n```\n\n----------------------------------------\n\nTITLE: Reply Callback Function (C)\nDESCRIPTION: This is a reply callback function that sends the string \"Hello!\" to the client when the client is unblocked.  It's invoked by Redis after the client is unblocked via `RedisModule_UnblockClient`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint reply_func(RedisModuleCtx *ctx, RedisModuleString **argv,\n                   int argc)\n    {\n        return RedisModule_ReplyWithSimpleString(ctx,\"Hello!\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Key Type - Redis Module API (C)\nDESCRIPTION: Returns the type of the key. If the key pointer is NULL, `REDISMODULE_KEYTYPE_EMPTY` is returned. Requires a RedisModuleKey pointer obtained via `RedisModule_OpenKey`. Available since Redis 4.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_92\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_KeyType(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Array Encoding in RESP\nDESCRIPTION: This snippet illustrates how arrays are encoded in RESP. The encoding begins with an asterisk (`*`), followed by the number of elements in the array, a CRLF terminator, and then the encoding of each element.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n*<number-of-elements>\\r\\n<element-1>...<element-n>\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding RedisInsight Deployment\nDESCRIPTION: This command sets up port forwarding for the RedisInsight deployment, allowing access to RedisInsight through localhost on port 5540. This is used when a service is not created for the deployment.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl port-forward deployment/redisinsight 5540\n```\n\n----------------------------------------\n\nTITLE: Freeing a Module User - RedisModule_FreeModuleUser\nDESCRIPTION: Frees a Redis module user and disconnects all clients authenticated with it. This function is used to release the resources associated with a module user that was previously created with `RedisModule_CreateModuleUser`. It takes a `RedisModuleUser` pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_224\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_FreeModuleUser(RedisModuleUser *user);\n```\n\n----------------------------------------\n\nTITLE: Get Key Expire\nDESCRIPTION: Gets the time to live (TTL) of a key. `RedisModule_GetExpire` returns the TTL in milliseconds. `key` is the RedisModuleKey pointer. Returns `REDISMODULE_NO_EXPIRE` if the key has no expire or does not exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nmstime_t RedisModule_GetExpire(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Running Redis Cluster consistency test in Ruby\nDESCRIPTION: This command executes the consistency-test.rb script, written in Ruby, which simulates read and write operations against a Redis Cluster while checking for data inconsistencies.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ruby consistency-test.rb\n```\n\n----------------------------------------\n\nTITLE: Get RedisInsight Service Information\nDESCRIPTION: This command retrieves information about the `redisinsight-service` Kubernetes service, including the external IP address which can be used to access RedisInsight.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get svc redisinsight-service\nNAME                   CLUSTER-IP       EXTERNAL-IP      PORT(S)         AGE\nredisinsight-service   <cluster-ip>     <external-ip>    80:32143/TCP    1m\n```\n\n----------------------------------------\n\nTITLE: Defining Redis String Type Alias in C\nDESCRIPTION: This snippet defines `sds` as a type alias for `char *`, representing a Redis string as a character pointer. This allows users to treat Redis strings as standard C strings, hiding the underlying implementation details.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-sds.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef char *sds;\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Service Info with Homebrew in Bash\nDESCRIPTION: This command retrieves the status information of the Redis service managed by `launchd` via Homebrew, including whether it's running, loaded, the user, and the process ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew services info redis\n```\n\n----------------------------------------\n\nTITLE: Getting Usable Malloc Size in Redis Module (C)\nDESCRIPTION: This function returns the usable size of memory allocated for a given pointer allocated via `RedisModule_Alloc()` or `RedisModule_Realloc()`. This is the amount of memory the module can safely use.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_274\n\nLANGUAGE: c\nCODE:\n```\nsize_t RedisModule_MallocUsableSize(void *ptr);\n```\n\n----------------------------------------\n\nTITLE: Building Redis with TLS Support\nDESCRIPTION: This command builds Redis with TLS support enabled, requiring OpenSSL development libraries. The `BUILD_TLS=yes` flag ensures that the TLS-related functionalities are included during the compilation process.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/encryption.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake BUILD_TLS=yes\n```\n\n----------------------------------------\n\nTITLE: Remove a Node from Redis Cluster using redis-cli\nDESCRIPTION: This command removes a specified node from a Redis Cluster.  The first argument is the address of any existing node in the cluster, and the second argument is the ID of the node to be removed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster del-node 127.0.0.1:7000 `<node-id>`\n```\n\n----------------------------------------\n\nTITLE: Executing a simple Lua script using EVAL in Redis\nDESCRIPTION: This snippet demonstrates how to execute a simple Lua script using the EVAL command in Redis. The script returns the first argument passed to it. It requires a Redis server and the redis-cli client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/eval.md#_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\n> EVAL \"return ARGV[1]\" 0 hello\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Listing Redis Cluster nodes after failover with redis-cli\nDESCRIPTION: This command is used to display the current configuration and status of all nodes in the Redis Cluster after a failover event, providing insights into the new master-slave relationships.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -p 7000 cluster nodes\n```\n\n----------------------------------------\n\nTITLE: Adding Latency Event to Latency Monitor\nDESCRIPTION: Adds an event to the latency monitor, allowing it to be observed by the LATENCY command. The call is skipped if the latency is below the configured `latency-monitor-threshold`. Requires specifying the event name and the latency in milliseconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_188\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_LatencyAddSample(const char *event, mstime_t latency);\n```\n\n----------------------------------------\n\nTITLE: Command Implementation Prototype\nDESCRIPTION: This is the function prototype for the Redis module command implementation. It takes the module context, the argument vector, and the argument count as input.  The arguments are passed as RedisModuleString pointers.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint mycommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc);\n```\n\n----------------------------------------\n\nTITLE: Stream ID Struct Definition\nDESCRIPTION: This snippet defines the structure `RedisModuleStreamID`, which is used to represent the ID of an entry in a Redis Stream. It consists of two 64-bit unsigned integers, `ms` (milliseconds) and `seq` (sequence number).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_131\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct RedisModuleStreamID {\n    uint64_t ms;\n    uint64_t seq;\n} RedisModuleStreamID;\n```\n\n----------------------------------------\n\nTITLE: Comparing Two RedisModuleString Objects\nDESCRIPTION: RedisModule_StringCompare compares two string objects, returning -1, 0 or 1 respectively if a < b, a == b, a > b. Strings are compared byte by byte as two binary blobs without any encoding care / collation attempt.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_49\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringCompare(const RedisModuleString *a,\n                                  const RedisModuleString *b);\n```\n\n----------------------------------------\n\nTITLE: Replying with Verbatim String - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to reply with a verbatim string using the Redis Module API.  The function `RedisModule_ReplyWithVerbatimString` sends a binary-safe string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_72\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithVerbatimString(RedisModuleCtx *ctx,\n                                            const char *buf,\n                                            size_t len);\n```\n\n----------------------------------------\n\nTITLE: Unloading Module with MODULE UNLOAD\nDESCRIPTION: Demonstrates how to unload a Redis module using the `MODULE UNLOAD` command.  The module is identified by its registered name, not the filename. The module can be reloaded later if needed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nMODULE UNLOAD mymodule\n```\n\n----------------------------------------\n\nTITLE: Visualizing Redis Latency Distribution with Redis CLI\nDESCRIPTION: This command uses the `--latency-dist` option to visualize the latency distribution of a Redis instance using a color terminal. This is a more advanced tool to observe the distribution of latency measurements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --latency-dist\n```\n\n----------------------------------------\n\nTITLE: Find Multiple Element Indices with COUNT in Redis\nDESCRIPTION: This snippet uses the COUNT option with LPOS to retrieve the indices of multiple matching elements. It demonstrates how to get the indices of the first two occurrences of the element 'c'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lpos.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\n> LPOS mylist c COUNT 2\n[2,6]\n```\n\n----------------------------------------\n\nTITLE: Setting ACL user with specific DEBUG subcommand - Redis CLI\nDESCRIPTION: This snippet shows how to set ACL permissions to allow only the 'digest' subcommand of the DEBUG command for a specific user.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_18\n\nLANGUAGE: Redis CLI\nCODE:\n```\nACL SETUSER myuser -debug +debug|digest\n```\n\n----------------------------------------\n\nTITLE: Compiling Redis with TLS support using make\nDESCRIPTION: Compiles Redis with TLS support using the make command with the `BUILD_TLS=yes` option. Requires OpenSSL development libraries to be installed. This enables secure connections to the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-from-source.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake BUILD_TLS=yes\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster with redis-cli\nDESCRIPTION: This snippet shows how to connect to a Redis Cluster using the `redis-cli` command-line utility with the `-c` option to enable cluster mode and the `-p` option to specify the port. This allows you to execute Redis commands that will be redirected to the correct node in the cluster based on the key's hash slot.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -c -p 7000\nredis 127.0.0.1:7000> set foo bar\n-> Redirected to slot [12182] located at 127.0.0.1:7002\nOK\nredis 127.0.0.1:7002> set hello world\n-> Redirected to slot [866] located at 127.0.0.1:7000\nOK\nredis 127.0.0.1:7000> get foo\n-> Redirected to slot [12182] located at 127.0.0.1:7002\n\"bar\"\nredis 127.0.0.1:7002> get hello\n-> Redirected to slot [866] located at 127.0.0.1:7000\n\"world\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Module Data Type to String in Redis\nDESCRIPTION: Encodes a module data type value into a serialized string format, utilizing the 'rdb_save' callback. This allows modules to serialize/deserialize keys similarly to Redis's DUMP and RESTORE commands. The encoded data is returned as a newly allocated RedisModuleString.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_183\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_SaveDataTypeToString(RedisModuleCtx *ctx,\n                                                        void *data,\n                                                        const moduleType *mt);\n```\n\n----------------------------------------\n\nTITLE: Ending Blocked Client Time Measurement\nDESCRIPTION: Marks the end time for measuring the execution time of a blocked client, calculating the elapsed time since `RedisModule_BlockedClientMeasureTimeStart` was called. Returns `REDISMODULE_OK` on success or `REDISMODULE_ERR` if no start time was defined. Available since Redis 6.2.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_BlockedClientMeasureTimeEnd(RedisModuleBlockedClient *bc);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Key-Value Pair from a Redis Module Dictionary\nDESCRIPTION: This function removes a key-value pair from the dictionary, using a `RedisModuleString` for the key.  It returns `REDISMODULE_OK` if the key was found and deleted, and `REDISMODULE_ERR` if the key was not found. If 'oldval' is not NULL, it is set to the value stored at the key before deletion.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_250\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DictDel(RedisModuleDict *d,\n                            RedisModuleString *key,\n                            void *oldval);\n```\n\n----------------------------------------\n\nTITLE: Getting Expiration Time of Redis Key (C)\nDESCRIPTION: Retrieves the expiration time (TTL) of a Redis key in milliseconds. Returns `REDISMODULE_NO_EXPIRE` if no TTL is associated or if the key is empty. Requires a RedisModuleKey pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_96\n\nLANGUAGE: C\nCODE:\n```\nmstime_t RedisModule_GetExpire(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Live Resharding Step 1\nDESCRIPTION: Step 1 involves setting the destination node's slot to the *importing* state using the `CLUSTER SETSLOT` command. This prepares the destination node to receive the incoming keys from the source node and ensures that it's ready to handle incoming `ASK` redirections.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT <slot> IMPORTING <source-node-id>\n```\n\n----------------------------------------\n\nTITLE: Aggregating Redis JSON query results\nDESCRIPTION: This snippet demonstrates aggregating query results using the `FT.AGGREGATE` command. It groups the results by 'city' and counts the number of users in each city. It assumes a Redis client `r` and index `rs` have been initialized and connected. The `aggregations` and `reducers` modules must be imported from `redis.commands.search`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/python.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nreq = aggregations.AggregateRequest(\"*\").group_by('@city', reducers.count().alias('count'))\nprint(rs.aggregate(req).rows)\n# [[b'city', b'Tel Aviv', b'count', b'2'], [b'city', b'London', b'count', b'1']]\n```\n\n----------------------------------------\n\nTITLE: Querying Last Entry in Stream with XREVRANGE\nDESCRIPTION: This example shows how to retrieve the last entry from a Redis stream using the XREVRANGE command. It uses '+' and '-' to define the range from the largest to the smallest ID, and the COUNT option is set to 1 to retrieve only the last entry.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_15\n\nLANGUAGE: redis\nCODE:\n```\n> XREVRANGE race:france + - COUNT 1\n```\n\n----------------------------------------\n\nTITLE: Getting Argument Count of Filtered Command in Redis Module (C)\nDESCRIPTION: This function retrieves the number of arguments associated with a command being filtered. It takes a `RedisModuleCommandFilterCtx` as input. The returned integer includes the command itself as the first argument (position 0).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_267\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_CommandFilterArgsCount(RedisModuleCommandFilterCtx *fctx);\n```\n\n----------------------------------------\n\nTITLE: Redis Syntax Error Handling\nDESCRIPTION: This example demonstrates how Redis reports syntax errors during transaction creation. If a command has a syntax error (e.g., wrong number of arguments), it's reported immediately, and the command is not queued for execution.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/transactions.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMULTI\n+OK\nINCR a b c\n-ERR wrong number of arguments for 'incr' command\n```\n\n----------------------------------------\n\nTITLE: Create Redis Status Reply with redis.status_reply in Lua\nDESCRIPTION: This code snippet demonstrates how to use `redis.status_reply()` to create a Redis status reply (simple string reply) from within a Lua script. It shows how to pass a string argument representing the status and how the resulting table with the 'ok' field is formatted. `redis.status_reply()` is used to create affirmative or informational responses.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_8\n\nLANGUAGE: lua\nCODE:\n```\nlocal text = 'Frosty'\nlocal status1 = { ok = text }\nlocal status2 = redis.status_reply(text)\n```\n\n----------------------------------------\n\nTITLE: Checking for Disconnected Blocked Client - RedisModule_BlockedClientDisconnected\nDESCRIPTION: Returns true if the reason for unblocking a client in the free callback is due to the client disconnecting while blocked. It helps differentiate reasons for client unblocking in the free callback.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_206\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_BlockedClientDisconnected(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Relationships with Redis ZRANGEBYLEX\nDESCRIPTION: This snippet demonstrates querying for specific relationships between 'antirez' and 'matteocollina' using ZRANGEBYLEX.  The query looks for relationships where 'antirez' is the subject and 'matteocollina' is the object, using the 'sop' prefix to specify the order. This allows retrieving relations such as 'is-friend-of', 'was-at-conference-with', etc.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_22\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex \"[sop:antirez:matteocollina:\" \"[sop:antirez:matteocollina:\\xff\" BYLEX\n```\n\n----------------------------------------\n\nTITLE: Running RedisInsight in Docker (Non-Persistent)\nDESCRIPTION: This command runs RedisInsight in a Docker container, mapping port 5540 on the host to port 5540 in the container. The `--name` option assigns the name `redisinsight` to the container. The `-d` flag runs the container in detached mode. This setup does not persist data.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-aws.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest\n```\n\n----------------------------------------\n\nTITLE: Freeing a Call Reply - C\nDESCRIPTION: Frees a RedisModuleCallReply and any nested replies if it's an array.  It is essential for memory management when calling Redis commands from modules.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_142\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_FreeCallReply(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Forcing Human Readable Output with --no-raw\nDESCRIPTION: This explains that you can force human-readable output when writing to a file or in pipe to other commands by using `--no-raw`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Capping Streams with XADD MAXLEN\nDESCRIPTION: This example shows how to limit the max length of a Redis Stream when appending new entries using the MAXLEN parameter with XADD.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xadd.md#_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\nXADD mystream MAXLEN ~ 1000 * ... entry fields here ...\n```\n\n----------------------------------------\n\nTITLE: Installing go-redis\nDESCRIPTION: This command uses the `go get` command to install the go-redis/v9 library. This library provides the necessary functions to interact with a Redis database from a Go application.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/redis/go-redis/v9\n```\n\n----------------------------------------\n\nTITLE: Wrong Arity Check\nDESCRIPTION: Checks for the correct number of arguments.  `RedisModule_WrongArity()` replies with an error if the number of arguments is incorrect.  `ctx` is the RedisModuleCtx pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nif (argc != 2) return RedisModule_WrongArity(ctx);\n```\n\n----------------------------------------\n\nTITLE: Running Redis Benchmark in Quiet Mode\nDESCRIPTION: Executes the `redis-benchmark` utility in quiet mode, sending 100,000 requests.  The quiet mode only displays query/second values. Requires a running Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nredis-benchmark -q -n 100000\n```\n\n----------------------------------------\n\nTITLE: Bulk String Reply (Buffer)\nDESCRIPTION: Replies to the client with a bulk string using a C pointer and length. The `ctx` parameter is the RedisModuleCtx pointer, `buf` is the pointer to the string buffer, and `len` is the length of the buffer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithStringBuffer(RedisModuleCtx *ctx, const char *buf, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Element from Call Reply - C\nDESCRIPTION: Retrieve the 'idx'-th key and value of an attribute reply. Returns REDISMODULE_OK on success, REDISMODULE_ERR on failure.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_154\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_CallReplyAttributeElement(RedisModuleCallReply *reply,\n                                              size_t idx,\n                                              RedisModuleCallReply **key,\n                                              RedisModuleCallReply **val);\n```\n\n----------------------------------------\n\nTITLE: Change Directory to Redis Process in /proc\nDESCRIPTION: This command changes the current directory to the Redis process's directory within the /proc filesystem. This directory contains information about the process, including memory maps.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /proc/5454\n```\n\n----------------------------------------\n\nTITLE: RedisModule_OnUnload Function Prototype\nDESCRIPTION: This is the function prototype for the optional Redis module unload handler. It takes the module context as input.  Returning REDISMODULE_ERR will prevent the module from unloading.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_OnUnload(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Integer as Double Encoding in RESP\nDESCRIPTION: This snippet shows that the integer value of ten (10) can, therefore, be RESP-encoded both as an integer as well as a double.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n:10\\r\\n\n```\n\nLANGUAGE: text\nCODE:\n```\n,10\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Field from a Redis Hash (HGET)\nDESCRIPTION: This snippet demonstrates the `HGET` command, which retrieves the value of a specific field from a Redis Hash.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nHGET myuser surname => Sanfilippo\n```\n\n----------------------------------------\n\nTITLE: Simulating a Redis server crash with redis-cli\nDESCRIPTION: This command employs the redis-cli to trigger a segmentation fault on the Redis server running on port 7002, simulating a server crash for failover testing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli -p 7002 debug segfault\n```\n\n----------------------------------------\n\nTITLE: Simulate Master Failure with Redis DEBUG sleep\nDESCRIPTION: This command simulates a master server failure by making it unresponsive for a specified duration (30 seconds in this example). It uses the redis-cli command with the DEBUG sleep subcommand to induce a sleep state on the Redis master.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nredis-cli -p 6379 DEBUG sleep 30\n```\n\n----------------------------------------\n\nTITLE: Holding a RedisModuleString\nDESCRIPTION: The RedisModule_HoldString function can be used instead of RedisModule_RetainString(). The main difference between the two is that this function will always succeed, whereas RedisModule_RetainString() may fail because of an assertion. The function returns a pointer to RedisModuleString, which is owned by the caller. It requires a call to RedisModule_FreeString() to free the string when automatic memory management is disabled for the context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_42\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString* RedisModule_HoldString(RedisModuleCtx *ctx,\n                                              RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Redis HELLO Command Example (RESP3)\nDESCRIPTION: This code snippet demonstrates the use of the HELLO command to switch to the RESP3 protocol.  The 'protover' argument is set to \"3\". The command returns server and connection properties as a map type, allowing for more semantically rich replies. The output shows the map format with keys and values.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/hello.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n> HELLO 3\n1# \"server\" => \"redis\"\n2# \"version\" => \"6.0.0\"\n3# \"proto\" => (integer) 3\n4# \"id\" => (integer) 10\n5# \"mode\" => \"standalone\"\n6# \"role\" => \"master\"\n7# \"modules\" => (empty array)\n```\n\n----------------------------------------\n\nTITLE: Executing Lua script using redis-cli --eval\nDESCRIPTION: This snippet shows how to execute a Lua script from a file using the `redis-cli --eval` command.  The script sets a Redis key and returns OK.  The KEYS and ARGV arrays are populated from the command-line arguments separated by a comma.  The KEYS array contains the key name, and ARGV array contains the value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ cat /tmp/script.lua\nreturn redis.call('SET',KEYS[1],ARGV[1])\n$ redis-cli --eval /tmp/script.lua location:hastings:temp , 23\nOK\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster INFO Output Example\nDESCRIPTION: This code snippet illustrates the output format of the `CLUSTER INFO` command. It shows key parameters such as cluster state, slot assignments, node counts, and epoch information. The output is presented as a list of key-value pairs.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-info.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncluster_state:ok\ncluster_slots_assigned:16384\ncluster_slots_ok:16384\ncluster_slots_pfail:0\ncluster_slots_fail:0\ncluster_known_nodes:6\ncluster_size:3\ncluster_current_epoch:6\ncluster_my_epoch:2\ncluster_stats_messages_sent:1483972\ncluster_stats_messages_received:1483968\ntotal_cluster_links_buffer_limit_exceeded:0\n```\n\n----------------------------------------\n\nTITLE: Trying to Acquire the Server Lock - RedisModule_ThreadSafeContextTryLock\nDESCRIPTION: Similar to `RedisModule_ThreadSafeContextLock` but this function would not block if the server lock is already acquired. If successful (lock acquired) `REDISMODULE_OK` is returned, otherwise `REDISMODULE_ERR` is returned and errno is set accordingly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_211\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ThreadSafeContextTryLock(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Updating Hash Slot Table - Rule 2\nDESCRIPTION: This demonstrates the second rule for updating the hash slot table. If a hash slot is already assigned, and a known node advertises it with a `configEpoch` greater than the `configEpoch` of the master currently associated with the slot, the hash slot is re-bound to the new node. This rule ensures that the node with the latest configuration epoch becomes the owner of the slot, implementing a \"last failover wins\" strategy.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n0 -> NULL\n1 -> B [4]\n2 -> B [4]\n...\n16383 -> NULL\n```\n\n----------------------------------------\n\nTITLE: Reallocating Memory with RedisModule_Realloc (C)\nDESCRIPTION: This function reallocates memory previously allocated with `RedisModule_Alloc()`. It behaves like `realloc()` but uses Redis's memory management.  It's essential for resizing memory blocks within modules.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid* RedisModule_Realloc(void *ptr, size_t bytes);\n```\n\n----------------------------------------\n\nTITLE: Trying to Allocate Memory with RedisModule_TryAlloc (C)\nDESCRIPTION: Similar to `RedisModule_Alloc`, but returns NULL in case of allocation failure, instead of panicking. This function provides a non-panicking way to allocate memory within Redis modules.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid *RedisModule_TryAlloc(size_t bytes);\n```\n\n----------------------------------------\n\nTITLE: Saving Signed Integer in RDB File (RedisModule_SaveSigned)\nDESCRIPTION: This function saves a signed 64-bit value into the Redis RDB file. It is intended for use within the `rdb_save` method of modules that implement custom data types. The `RedisModuleIO` pointer provides the context for writing to the RDB file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_166\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveSigned(RedisModuleIO *io, int64_t value);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Sorted Set Element in Redis Module (C)\nDESCRIPTION: This function retrieves the current sorted set element from an active sorted set iterator. It requires a `RedisModuleKey` and a pointer to a double to store the score. It returns a `RedisModuleString` representing the element, or NULL if the range does not contain any elements.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_126\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_ZsetRangeCurrentElement(RedisModuleKey *key,\n                                                           double *score);\n```\n\n----------------------------------------\n\nTITLE: Sending LLEN command to Redis server\nDESCRIPTION: Illustrates how a client sends the LLEN mylist command to the Redis server using the RESP protocol.  The server then replies with the integer length of the list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\nC: *2\\r\\n\nC: $4\\r\\n\nC: LLEN\\r\\n\nC: $6\\r\\n\nC: mylist\\r\\n\n\nS: :48293\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Replying with a Set - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply to a client with a RESP3 Set using the Redis Module API. The function `RedisModule_ReplyWithSet` initiates the set reply, and subsequent `ReplyWith*` functions populate the set elements. `RedisModule_ReplySetSetLength` can be used to set the set length when it is not known beforehand.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_59\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithSet(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Monitor Redis commands in real-time\nDESCRIPTION: This Redis command allows you to monitor all commands received by the Redis server in real-time. This is useful for debugging and observing client activity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\nMONITOR\n```\n\n----------------------------------------\n\nTITLE: Long Long Reply\nDESCRIPTION: Replies to the client with a long long integer value. The `ctx` parameter is the RedisModuleCtx pointer, and the second argument is the long long value to return.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_ReplyWithLongLong(ctx,12345);\n```\n\n----------------------------------------\n\nTITLE: Getting Server Info Field as RedisModuleString in C\nDESCRIPTION: Retrieves the value of a specific field from the server information data. A `RedisModuleString` is returned and should be freed using auto memory if context is provided.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_256\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_ServerInfoGetField(RedisModuleCtx *ctx,\n                                                      RedisModuleServerInfoData *data,\n                                                      const char* field);\n```\n\n----------------------------------------\n\nTITLE: Reconfigure Replica to Replicate with Different Master\nDESCRIPTION: This Redis command allows you to reconfigure a replica to replicate with a different master at any time by specifying the new master's node ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_22\n\nLANGUAGE: redis\nCODE:\n```\nCLUSTER REPLICATE <master-node-id>\n```\n\n----------------------------------------\n\nTITLE: Getting Value Length with RedisModule_ValueLength - C\nDESCRIPTION: Retrieves the length of the value associated with a given key. The returned length is value-specific: string length for strings, element count for aggregated data types. Returns 0 if the key doesn't exist.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nsize_t len = RedisModule_ValueLength(key);\n```\n\n----------------------------------------\n\nTITLE: Getting Database Size (Key Count) (C)\nDESCRIPTION: Returns the number of keys present in the current Redis database. Requires a RedisModuleCtx pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_101\n\nLANGUAGE: C\nCODE:\n```\nunsigned long long RedisModule_DbSize(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Cluster Get Keys In Slot Command - Redis\nDESCRIPTION: This command returns a specified number of keys within a given hash slot. Used during resharding to identify keys to migrate.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER GETKEYSINSLOT slot count\n```\n\n----------------------------------------\n\nTITLE: Fixing Redis Cluster after AOF import\nDESCRIPTION: This command is used to fix the Redis Cluster after importing data from AOF files. It migrates keys to the correct nodes based on their hash slots, ensuring that each node is authoritative for the correct keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nredis-cli --cluster fix\n```\n\n----------------------------------------\n\nTITLE: Check Return Value After RDB Backup\nDESCRIPTION: This snippet demonstrates how to check the return value of the `redis-cli` command after attempting an RDB backup. A non-zero return value indicates an error during the backup process. This is useful for scripting and automation to handle potential failures.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli --rdb /tmp/dump.rdb\nSYNC with master failed: -ERR Can't SYNC while not connected with my master\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: CLIENT KILL Command\nDESCRIPTION: The CLIENT KILL command is sent by Sentinel to Redis instances during configuration changes (e.g., failover). It disconnects all clients from the reconfigured instance, forcing them to resolve the master address again. The `type normal` parameter ensures only normal clients are killed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/sentinel-clients.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCLIENT KILL type normal\n```\n\n----------------------------------------\n\nTITLE: Check Master State via Redis CLI\nDESCRIPTION: This command uses the redis-cli to connect to a Sentinel instance and retrieves information about the monitored master named 'mymaster'. The output provides details like IP, port, flags, and the number of connected replicas and other Sentinels.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ redis-cli -p 5000\n127.0.0.1:5000> sentinel master mymaster\n 1) \"name\"\n 2) \"mymaster\"\n 3) \"ip\"\n 4) \"127.0.0.1\"\n 5) \"port\"\n 6) \"6379\"\n 7) \"runid\"\n 8) \"953ae6a589449c13ddefaee3538d356d287f509b\"\n 9) \"flags\"\n10) \"master\"\n11) \"link-pending-commands\"\n12) \"0\"\n13) \"link-refcount\"\n14) \"1\"\n15) \"last-ping-sent\"\n16) \"0\"\n17) \"last-ok-ping-reply\"\n18) \"735\"\n19) \"last-ping-reply\"\n20) \"735\"\n21) \"down-after-milliseconds\"\n22) \"5000\"\n23) \"info-refresh\"\n24) \"126\"\n25) \"role-reported\"\n26) \"master\"\n27) \"role-reported-time\"\n28) \"532439\"\n29) \"config-epoch\"\n30) \"1\"\n31) \"num-slaves\"\n32) \"1\"\n33) \"num-other-sentinels\"\n34) \"2\"\n35) \"quorum\"\n36) \"2\"\n37) \"failover-timeout\"\n38) \"60000\"\n39) \"parallel-syncs\"\n40) \"1\"\n```\n\n----------------------------------------\n\nTITLE: Generating Flame Graph from bcc/BPF Data\nDESCRIPTION: This command generates a flame graph directly from the redis.folded.stacks file created by the bcc/BPF profile tool. It simplifies the process by removing preprocessing steps.  It requires the flamegraph.pl script from Brendan Gregg's FlameGraph repository.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ flamegraph.pl redis.folded.stacks > redis.svg\n```\n\n----------------------------------------\n\nTITLE: Stopping Redis Replication: `REPLICAOF NO ONE`\nDESCRIPTION: This command stops the Redis server from acting as a replica, effectively turning it into a master. It breaks the replication link and the server will no longer receive updates from any master. This is useful when transitioning a replica into a master role.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/replicaof.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nREPLICAOF NO ONE\n```\n\n----------------------------------------\n\nTITLE: Multi-dimensional Space Query Implementation in Ruby\nDESCRIPTION: This Ruby code defines a `spacequery` function that performs multi-dimensional range queries using bit interleaving. It takes the coordinates of the query box (x0, y0, x1, y1) and an exponent `exp` as input.  It calculates the start and end of the ranges for x and y, converts them to binary, interleaves the bits, and constructs a ZRANGEBYLEX query string for Redis. The function assumes 9 bits for each variable, resulting in an 18-bit interleaved representation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\ndef spacequery(x0,y0,x1,y1,exp)\n    bits=exp*2\n    x_start = x0/(2**exp)\n    x_end = x1/(2**exp)\n    y_start = y0/(2**exp)\n    y_end = y1/(2**exp)\n    (x_start..x_end).each{|x|\n        (y_start..y_end).each{|y|\n            x_range_start = x*(2**exp)\n            x_range_end = x_range_start | ((2**exp)-1)\n            y_range_start = y*(2**exp)\n            y_range_end = y_range_start | ((2**exp)-1)\n            puts \"#{x},#{y} x from #{x_range_start} to #{x_range_end}, y from #{y_range_start} to #{y_range_end}\"\n\n            # Turn it into interleaved form for ZRANGE query.\n            # We assume we need 9 bits for each integer, so the final\n            # interleaved representation will be 18 bits.\n            xbin = x_range_start.to_s(2).rjust(9,'0')\n            ybin = y_range_start.to_s(2).rjust(9,'0')\n            s = xbin.split(\"\").zip(ybin.split(\"\")).flatten.compact.join(\"\")\n            # Now that we have the start of the range, calculate the end\n            # by replacing the specified number of bits from 0 to 1.\n            e = s[0..-(bits+1)]+(\"1\"*bits)\n            puts \"ZRANGE myindex [#{s} [#{e} BYLEX\"\n        }\n    }\nend\n\nspacequery(50,100,100,300,6)\n```\n\n----------------------------------------\n\nTITLE: Starting a Redis Module Dictionary Iterator (C-style Key)\nDESCRIPTION: This function returns an iterator to traverse a Redis Module dictionary. The iterator can be setup in order to start iterating from the specified key by applying a comparison operator. Available operators are: `^`, `$`, `>`, `>=`, `<`, `<=`, `==`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_251\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleDictIter *RedisModule_DictIteratorStartC(RedisModuleDict *d,\n                                                        const char *op,\n                                                        void *key,\n                                                        size_t keylen);\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation for Redis Object\nDESCRIPTION: This code snippet demonstrates how memory is allocated for a `redisObject` structure, conditionally including the `redisObjectVM` structure based on whether VM is enabled. If VM is disabled, the allocation size is reduced to avoid unnecessary memory overhead, optimizing memory usage.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-vm.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n... some code ...\n        if (server.vm_enabled) {\n            pthread_mutex_unlock(&server.obj_freelist_mutex);\n            o = zmalloc(sizeof(*o));\n        } else {\n            o = zmalloc(sizeof(*o)-sizeof(struct redisObjectVM));\n        }\n... some code ...\n```\n\n----------------------------------------\n\nTITLE: Getting Client ID for Filtered Command in Redis Module (C)\nDESCRIPTION: This function retrieves the client ID of the client that issued the command being filtered. It takes a `RedisModuleCommandFilterCtx` as input. The function returns the client ID as an unsigned long long integer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_272\n\nLANGUAGE: c\nCODE:\n```\nunsigned long long RedisModule_CommandFilterGetClientId(RedisModuleCommandFilterCtx *fctx);\n```\n\n----------------------------------------\n\nTITLE: Publish Message to Shard - Redis Module API (C)\nDESCRIPTION: Publishes a message to shard-subscribers of a specific channel, similar to the `SPUBLISH` command. Requires a RedisModuleCtx, a RedisModuleString for the channel, and a RedisModuleString for the message. Available since Redis 7.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_83\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_PublishMessageShard(RedisModuleCtx *ctx,\n                                        RedisModuleString *channel,\n                                        RedisModuleString *message);\n```\n\n----------------------------------------\n\nTITLE: Filtering strace output for Slow System Calls\nDESCRIPTION: This code snippet demonstrates how to filter strace output to show only slow fdatasync and write system calls, helping to pinpoint latency issues related to disk I/O. It uses grep to filter out calls that complete quickly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo strace -f -p $(pidof redis-server) -T -e trace=fdatasync,write 2>&1 | grep -v '0.0' | grep -v unfinished\n```\n\n----------------------------------------\n\nTITLE: Installing Redis via Snapcraft (Bash)\nDESCRIPTION: Installs Redis using the Snapcraft package manager. The command `sudo snap install redis` fetches and installs the Redis package from the Snapcraft store. This assumes that Snapd is already installed and configured on the Linux system.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-linux.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install redis\n```\n\n----------------------------------------\n\nTITLE: Set Client Name By ID - Redis Module API (C)\nDESCRIPTION: Sets the name of a client connection using its ID. Equivalent to the `CLIENT SETNAME` command. Returns `REDISMODULE_OK` on success and `REDISMODULE_ERR` on failure. Sets `errno` to `ENOENT` if the client does not exist, or `EINVAL` if the name contains invalid characters. Available since Redis 7.0.3.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_81\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_SetClientNameById(uint64_t id, RedisModuleString *name);\n```\n\n----------------------------------------\n\nTITLE: Setting Deferred Set Length - Redis Module API (C)\nDESCRIPTION: This code snippet shows how to set the length of a set when using `RedisModule_ReplyWithSet`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_65\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ReplySetSetLength(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Cluster Add Slots Command - Redis\nDESCRIPTION: This command assigns one or more slots to the Redis node. Used for creating a new cluster from scratch.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER ADDSLOTS slot1 [slot2] ... [slotN]\n```\n\n----------------------------------------\n\nTITLE: Stopping Redis Service with Homebrew in Bash\nDESCRIPTION: This command stops the Redis service managed by `launchd` through Homebrew. It terminates the Redis process running in the background.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew services stop redis\n```\n\n----------------------------------------\n\nTITLE: Inline EXISTS Command\nDESCRIPTION: Demonstrates the server/client exchange using an inline EXISTS command, where the server returns an integer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nC: EXISTS somekey\nS: :0\n```\n\n----------------------------------------\n\nTITLE: Live Resharding Step 2\nDESCRIPTION: Step 2 involves setting the source node's slot to the *migrating* state using the `CLUSTER SETSLOT` command. This informs the source node that it needs to redirect requests for keys in the migrating slot to the destination node.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT <slot> MIGRATING <destination-node-id>\n```\n\n----------------------------------------\n\nTITLE: Getting Big Number from Call Reply - C\nDESCRIPTION: Retrieves the big number value as a string from a big number-type RedisModuleCallReply. Returns a pointer to the string and its length.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_148\n\nLANGUAGE: C\nCODE:\n```\nconst char *RedisModule_CallReplyBigNumber(RedisModuleCallReply *reply,\n                                               size_t *len);\n```\n\n----------------------------------------\n\nTITLE: Storing the Sorted Result in Redis\nDESCRIPTION: This snippet demonstrates how to store the sorted result in a new list using the `STORE` option.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_9\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist BY weight_* STORE resultkey\n```\n\n----------------------------------------\n\nTITLE: Installing Redis with Homebrew in Bash\nDESCRIPTION: This command installs Redis on macOS using the Homebrew package manager. It downloads and configures Redis on the system.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install redis\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String from long long (C)\nDESCRIPTION: This code snippet shows how to create a Redis module string object from a long long integer. The string object must be released with RedisModule_FreeString, unless automatic memory management is enabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringFromLongLong(RedisModuleCtx *ctx,\n                                                            long long ll);\n```\n\n----------------------------------------\n\nTITLE: Getting Server Info Field as signed long long in C\nDESCRIPTION: Retrieves a numerical field from server information data as a signed long long. If the field is not found or is invalid, it returns 0 and sets `out_err` to `REDISMODULE_ERR` if provided.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_258\n\nLANGUAGE: C\nCODE:\n```\nlong long RedisModule_ServerInfoGetFieldSigned(RedisModuleServerInfoData *data,\n                                                   const char* field,\n                                                   int *out_err);\n```\n\n----------------------------------------\n\nTITLE: Replying with an Empty Array - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to reply to the client with an empty array using the Redis Module API. The function `RedisModule_ReplyWithEmptyArray` sends an empty array to the client.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_62\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithEmptyArray(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Generating Flame Graph from perf Data\nDESCRIPTION: These commands generate a flame graph from the perf.data file. It involves converting the perf.data into captured stacks, folding the stacks, and then rendering the flame graph as an SVG file.  It requires the stackcollapse-perf.pl and flamegraph.pl scripts from Brendan Gregg's FlameGraph repository.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ perf script > redis.perf.stacks\n$ stackcollapse-perf.pl redis.perf.stacks > redis.folded.stacks\n$ flamegraph.pl redis.folded.stacks > redis.svg\n```\n\n----------------------------------------\n\nTITLE: Calculating Hash Slot with Hash Tags in C\nDESCRIPTION: This C code snippet demonstrates how to calculate the hash slot for a given key, considering hash tags. It searches for curly braces and extracts the substring between them for hashing. If no valid hash tag is found, it hashes the entire key.  It assumes that the `crc16` function is defined elsewhere, takes a char pointer and an integer representing the length of the string, and returns the CRC16 checksum of the string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nunsigned int HASH_SLOT(char *key, int keylen) {\n    int s, e; /* start-end indexes of { and } */\n\n    /* Search the first occurrence of '{'. */\n    for (s = 0; s < keylen; s++)\n        if (key[s] == '{') break;\n\n    /* No '{' ? Hash the whole key. This is the base case. */\n    if (s == keylen) return crc16(key,keylen) & 16383;\n\n    /* '{' found? Check if we have the corresponding '}'. */\n    for (e = s+1; e < keylen; e++)\n        if (key[e] == '}') break;\n\n    /* No '}' or nothing between {} ? Hash the whole key. */\n    if (e == keylen || e == s+1) return crc16(key,keylen) & 16383;\n\n    /* If we are here there is both a { and a } on its right. Hash\n     * what is in the middle between { and }. */\n    return crc16(key+s+1,e-s-1) & 16383;\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Command to AOF during Rewrite in Redis Module\nDESCRIPTION: Emits a command into the AOF during the AOF rewriting process, exclusively within the 'aof_rewrite' method of module-exported data types. Functions similarly to RedisModule_Call(), but without return values, relying on Redis for error handling. The `io` parameter is used for IO operations during the AOF rewrite.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_184\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_EmitAOF(RedisModuleIO *io,\n                             const char *cmdname,\n                             const char *fmt,\n                             ...);\n```\n\n----------------------------------------\n\nTITLE: Getting Module User From User Name - RedisModule_GetModuleUserFromUserName\nDESCRIPTION: Retrieves a `RedisModuleUser` from a user name. This function allows modules to perform ACL checks on general ACL users (not created by `RedisModule_CreateModuleUser`). The returned `RedisModuleUser` should be used only in the context where the function was called and freed using `RedisModule_FreeModuleUser()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_229\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleUser *RedisModule_GetModuleUserFromUserName(RedisModuleString *name);\n```\n\n----------------------------------------\n\nTITLE: Getting a Thread-Safe Context - RedisModule_GetThreadSafeContext\nDESCRIPTION: Returns a context that can be used inside threads to make Redis context calls with certain module APIs. If 'bc' is not NULL, the module will be bound to a blocked client, making the use of the `RedisModule_Reply*` family of functions possible. Non-reply APIs require locking.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_207\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleCtx *RedisModule_GetThreadSafeContext(RedisModuleBlockedClient *bc);\n```\n\n----------------------------------------\n\nTITLE: Wire Protocol Example: Receiving a Published Message in Redis (Text)\nDESCRIPTION: This snippet shows an example of what a client receives when a message is published to a channel it is subscribed to.  The received message is in the form of an array-reply with the type, channel, and payload.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n*3\n$7\nmessage\n$6\nsecond\n$5\nHello\n```\n\n----------------------------------------\n\nTITLE: Monitoring Redis Commands with Redis CLI\nDESCRIPTION: This command enters monitoring mode using the `MONITOR` command. All commands received by the Redis instance will be printed to standard output. The output can be piped to tools like `grep` for filtering.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli MONITOR\n```\n\n----------------------------------------\n\nTITLE: Getting String Pointer from Call Reply - C\nDESCRIPTION: Retrieves a pointer to the string data and its length from a string or error-type RedisModuleCallReply.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_157\n\nLANGUAGE: C\nCODE:\n```\nconst char *RedisModule_CallReplyStringPtr(RedisModuleCallReply *reply,\n                                               size_t *len);\n```\n\n----------------------------------------\n\nTITLE: Converting String to Long Long\nDESCRIPTION: RedisModule_StringToLongLong converts a RedisModuleString to a long long integer, storing it at *ll. It returns REDISMODULE_OK on success. If the string can't be parsed as a valid, strict long long (no spaces before/after), REDISMODULE_ERR is returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_44\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringToLongLong(const RedisModuleString *str, long long *ll);\n```\n\n----------------------------------------\n\nTITLE: Stopping a Stream Iterator\nDESCRIPTION: This snippet demonstrates how to stop a stream iterator using `RedisModule_StreamIteratorStop`. It takes the key as a parameter, releases the memory associated with the iterator, and resets the iterator state.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_135\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_StreamIteratorStop(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Empty Array Encoding in RESP\nDESCRIPTION: This snippet shows the encoding of an empty array in RESP, represented by *0\\r\\n.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n*0\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Big Number Example in RESP\nDESCRIPTION: This snippet illustrates an example of a big number encoded in RESP.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n(3492890328409238509324850943850943825024385\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Mixed Data Type Array Encoding in RESP\nDESCRIPTION: This snippet encodes an array containing integers and a bulk string, showcasing the mixed data type support in RESP arrays.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n*5\\r\\n:1\\r\\n:2\\r\\n:3\\r\\n:4\\r\\n$5\\r\\nhello\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Triggering a Breakpoint with redis.breakpoint in Lua\nDESCRIPTION: Triggers a breakpoint when using the Redis Lua debugger. No arguments are required.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Cluster Delete Slots Command - Redis\nDESCRIPTION: This command removes one or more slots from a Redis node. Primarily for debugging or manual modification.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER DELSLOTS slot1 [slot2] ... [slotN]\n```\n\n----------------------------------------\n\nTITLE: User Login Authentication Logic in PHP\nDESCRIPTION: This PHP code snippet implements the user login authentication logic for Retwis. It retrieves username and password from a form, checks if the username exists in the `users` hash in Redis, verifies the password, and sets an authentication cookie if the credentials are valid. It requires the `retwis.php` include and uses the `redisLink()` function to connect to Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\ninclude(\"retwis.php\");\n\n# Form sanity checks\nif (!gt(\"username\") || !gt(\"password\"))\n    goback(\"You need to enter both username and password to login.\");\n\n# The form is ok, check if the username is available\n$username = gt(\"username\");\n$password = gt(\"password\");\n$r = redisLink();\n$userid = $r->hget(\"users\",$username);\nif (!$userid)\n    goback(\"Wrong username or password\");\n$realpassword = $r->hget(\"user:$userid\",\"password\");\nif ($realpassword != $password)\n    goback(\"Wrong username or password\");\n\n# Username / password OK, set the cookie and redirect to index.php\n$authsecret = $r->hget(\"user:$userid\",\"auth\");\nsetcookie(\"auth\",$authsecret,time()+3600*24*365);\nheader(\"Location: index.php\");\n```\n\n----------------------------------------\n\nTITLE: Calculating Replica Election Delay\nDESCRIPTION: This code snippet calculates the delay a replica waits before trying to get elected.  The delay includes a fixed component, a random component, and a component based on the replica's rank, ensuring that the `FAIL` state has time to propagate and desynchronizing replicas to prevent simultaneous elections. The formula considers rank in the replica election priority.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nDELAY = 500 milliseconds + random delay between 0 and 500 milliseconds + \n            REPLICA_RANK * 1000 milliseconds.\n```\n\n----------------------------------------\n\nTITLE: Compiling Redis for 32-bit Architecture\nDESCRIPTION: This command compiles Redis as a 32-bit binary, reducing memory usage per key but limiting the instance to 4 GB of maximum memory. RDB and AOF files are compatible between 32-bit and 64-bit instances.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmake 32bit\n```\n\n----------------------------------------\n\nTITLE: Decoding with cmsgpack in Lua\nDESCRIPTION: Decodes a MessagePack string into Lua values using the `cmsgpack.unpack()` function. This function takes a MessagePack string as input and returns the corresponding Lua data structure. This functionality is available in Redis Lua scripts and functions since version 2.6.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_28\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return cmsgpack.unpack(ARGV[1])\" 0 \"\\x93\\xa3foo\\xa3bar\\xa3baz\"\n1) \"foo\"\n2) \"bar\"\n3) \"baz\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Redis with Debug & Frame Pointer Options\nDESCRIPTION: This command demonstrates how to compile Redis with debug information (-g) and frame pointer register inclusion (-fno-omit-frame-pointer), while maintaining optimization level (-O2). This enables accurate stack tracing for CPU profiling. It modifies the default compilation flags.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make REDIS_CFLAGS=\"-g -fno-omit-frame-pointer\"\n```\n\n----------------------------------------\n\nTITLE: RedisModuleReplicationInfo Structure (C)\nDESCRIPTION: This code defines the `RedisModuleReplicationInfo` structure that provides information about the replication status when the `RedisModuleEvent_ReplicationRoleChanged` event is triggered.  It indicates whether the instance is a master or replica, the master's hostname and port (if a replica), and replication IDs and offsets.  This information allows the module to adapt its behavior depending on the replication role of the Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_285\n\nLANGUAGE: c\nCODE:\n```\nint master; // true if master, false if replica\n        char *masterhost; // master instance hostname for NOW_REPLICA\n        int masterport; // master instance port for NOW_REPLICA\n        char *replid1; // Main replication ID\n        char *replid2; // Secondary replication ID\n        uint64_t repl1_offset; // Main replication offset\n        uint64_t repl2_offset; // Offset of replid2 validity\n```\n\n----------------------------------------\n\nTITLE: Get Consumer Group Information using XINFO GROUPS\nDESCRIPTION: This command retrieves information about the consumer groups associated with a Redis stream, including the group name, number of consumers, pending messages, and the last delivered ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_33\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> XINFO GROUPS race:italy\n1) 1) \"name\"\n   2) \"italy_riders\"\n   3) \"consumers\"\n   4) (integer) 3\n   5) \"pending\"\n   6) (integer) 2\n   7) \"last-delivered-id\"\n   8) \"1692632662819-0\"\n```\n\n----------------------------------------\n\nTITLE: Executing Lua Scripts with String Return\nDESCRIPTION: This example demonstrates executing two different but conceptually identical Lua scripts in Redis using the `EVAL` command, both returning a string. It illustrates an anti-pattern, where applications generate similar scripts dynamically. The second argument '0' specifies the count of key arguments is zero.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return 'Hello'\" 0\n\"Hello\"\nredis> EVAL \"return 'Scripting!'\" 0\n\"Scripting!\"\n```\n\n----------------------------------------\n\nTITLE: Convert PEM to PFX for TLS Connection\nDESCRIPTION: Converts a user certificate and private key from PEM format to PFX format using OpenSSL. This command is essential for configuring TLS connections to a Redis server, as it bundles the certificate and key into a single file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nopenssl pkcs12 -inkey redis_user_private.key -in redis_user.crt -export -out redis.pfx\n```\n\n----------------------------------------\n\nTITLE: Adding ACL Log Entry - RedisModule_ACLAddLogEntry\nDESCRIPTION: Adds a new entry to the ACL log. The `user` parameter specifies the user associated with the log entry, `object` represents the object being accessed, and `reason` describes the reason for the log entry. Returns `REDISMODULE_OK` on success or `REDISMODULE_ERR` on error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_233\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ACLAddLogEntry(RedisModuleCtx *ctx,\n                                   RedisModuleUser *user,\n                                   RedisModuleString *object,\n                                   RedisModuleACLLogEntryReason reason);\n```\n\n----------------------------------------\n\nTITLE: Inline PING Command\nDESCRIPTION: Demonstrates the server/client exchange using an inline PING command, where the server responds with PONG.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nC: PING\nS: +PONG\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Module Command in Redis (C)\nDESCRIPTION: This snippet shows how to retrieve an opaque structure representing a module command using `RedisModule_GetCommand`. The command is identified by its name. The function returns NULL if the command isn't found, is not a module command, or does not belong to the calling module.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleCommand *RedisModule_GetCommand(RedisModuleCtx *ctx,\n                                           const char *name);\n```\n\n----------------------------------------\n\nTITLE: Freeing a Redis Module Dictionary\nDESCRIPTION: This function frees a dictionary previously created with `RedisModule_CreateDict`. The context pointer `ctx` must be provided if the dictionary was created using a context, otherwise if a NULL context was used, then NULL should be passed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_241\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_FreeDict(RedisModuleCtx *ctx, RedisModuleDict *d);\n```\n\n----------------------------------------\n\nTITLE: Getting Double from Call Reply - C\nDESCRIPTION: Retrieves the double value from a double-type RedisModuleCallReply.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_147\n\nLANGUAGE: C\nCODE:\n```\ndouble RedisModule_CallReplyDouble(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Getting Integer from Call Reply - C\nDESCRIPTION: Retrieves the integer value from an integer-type RedisModuleCallReply.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_146\n\nLANGUAGE: C\nCODE:\n```\nlong long RedisModule_CallReplyInteger(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Argument of Filtered Command in Redis Module (C)\nDESCRIPTION: This function retrieves a specific argument from a command being filtered, based on its position. The `RedisModuleCommandFilterCtx` and the argument's position (`int pos`) are passed as input. It returns a `RedisModuleString` representing the argument at the specified position.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_268\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_CommandFilterArgGet(RedisModuleCommandFilterCtx *fctx,\n                                                       int pos);\n```\n\n----------------------------------------\n\nTITLE: Activate Linux kernel overcommit memory setting\nDESCRIPTION: This command activates the `vm.overcommit_memory=1` setting immediately without requiring a reboot. It's used after adding the setting to `/etc/sysctl.conf`. Requires root privileges.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsysctl vm.overcommit_memory=1\n```\n\n----------------------------------------\n\nTITLE: Loading String from RDB File (RedisModule_LoadString)\nDESCRIPTION: This function loads a string from the Redis RDB file, previously saved with `RedisModule_SaveString()` functions family. It should be called within the context of the `rdb_load` method of a module data type. The function returns a newly allocated `RedisModuleString` object, which the user must free using `RedisModule_FreeString()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_170\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_LoadString(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Tracing fdatasync and write System Calls with strace\nDESCRIPTION: This code snippet uses strace to trace both fdatasync and write system calls performed by Redis, providing a more comprehensive view of disk I/O activity. However, it may generate more output due to the inclusion of write calls for client sockets.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo strace -p $(pidof redis-server) -T -e trace=fdatasync,write\n```\n\n----------------------------------------\n\nTITLE: Getting My Cluster ID in Redis Module (C)\nDESCRIPTION: Retrieves the node ID of the current Redis instance in a cluster.  Returns the node ID or NULL if the cluster is disabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_222\n\nLANGUAGE: C\nCODE:\n```\nconst char *RedisModule_GetMyClusterID(void);\n```\n\n----------------------------------------\n\nTITLE: Add a New Replica Node using redis-cli in Redis Cluster (Specific Master)\nDESCRIPTION: This snippet shows how to add a new replica to a specific master in a Redis Cluster. It uses `redis-cli --cluster add-node` with `--cluster-slave` and `--cluster-master-id` options to target a particular master node by its ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster add-node 127.0.0.1:7006 127.0.0.1:7000 --cluster-slave --cluster-master-id 3c3a0c74aae0b56170ccb03a76b60cfe7dc1912e\n```\n\n----------------------------------------\n\nTITLE: Limiting the Length of a Redis List with LTRIM\nDESCRIPTION: This example demonstrates using the LTRIM command to reduce a Redis list to a specific range of elements. It shows how to limit the 'bikes:repairs' list to the first three elements (indexes 0 to 2).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/lists.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> RPUSH bikes:repairs bike:1 bike:2 bike:3 bike:4 bike:5\n(integer) 5\n> LTRIM bikes:repairs 0 2\nOK\n> LRANGE bikes:repairs 0 -1\n1) \"bike:1\"\n2) \"bike:2\"\n3) \"bike:3\"\n```\n\n----------------------------------------\n\nTITLE: Push Random Integers to List - Initial Implementation (Ruby)\nDESCRIPTION: This Ruby code demonstrates an initial implementation of a Redis script that pushes N random integers into a list. It uses the 'redis' gem to connect to a Redis server and executes a Lua script using `r.eval`. The script utilizes `math.random()` within a loop to generate random numbers and pushes them onto a Redis list.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'redis'\n\nr = Redis.new\n\nRandomPushScript = <<EOF\n    local i = tonumber(ARGV[1])\n    local res\n    while (i > 0) do\n        res = redis.call('LPUSH',KEYS[1],math.random())\n        i = i-1\n    end\n    return res\nEOF\n\nr.del(:mylist)\nputs r.eval(RandomPushScript,[:mylist],[10,rand(2**32)])\n```\n\n----------------------------------------\n\nTITLE: Pushing/Popping List Values with RedisModule_ListPush/Pop - C\nDESCRIPTION: Pushes or pops values from a list. The `where` argument specifies the direction (head or tail) using `REDISMODULE_LIST_HEAD` or `REDISMODULE_LIST_TAIL`. Popped elements are strings and must be freed with `RedisModule_FreeString()` or using automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_45\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ListPush(RedisModuleKey *key, int where, RedisModuleString *ele);\nRedisModuleString *RedisModule_ListPop(RedisModuleKey *key, int where);\n```\n\n----------------------------------------\n\nTITLE: Registering Enum Configuration in Redis Module (C)\nDESCRIPTION: This snippet demonstrates how to register an enum configuration that allows clients to interact with the `CONFIG SET`, `CONFIG GET`, and `CONFIG REWRITE` commands. It defines string tokens and corresponding integer values, along with get and set functions to handle the configuration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_292\n\nLANGUAGE: c\nCODE:\n```\n     const char *enum_vals[3] = {\"first\", \"second\", \"third\"};\n     const int int_vals[3] = {0, 2, 4};\n     int enum_val = 0;\n\n     int getEnumConfigCommand(const char *name, void *privdata) {\n         return enum_val;\n     }\n      \n     int setEnumConfigCommand(const char *name, int val, void *privdata, const char **err) {\n         enum_val = val;\n         return REDISMODULE_OK;\n     }\n     ...\n     RedisModule_RegisterEnumConfig(ctx, \"enum\", 0, REDISMODULE_CONFIG_DEFAULT, enum_vals, int_vals, 3, getEnumConfigCommand, setEnumConfigCommand, NULL, NULL);\n```\n\n----------------------------------------\n\nTITLE: Querying a Numerical Index using ZRANGE (Redis)\nDESCRIPTION: This snippet shows how to query a Redis sorted set, acting as a numerical index, to retrieve elements within a specified score range (age range). The `ZRANGE` command with the `BYSCORE` option is used to fetch elements between the ages of 20 and 40.  The result is a list of person names falling within that age range.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_1\n\nLANGUAGE: Redis\nCODE:\n```\nZRANGE myindex 20 40 BYSCORE\n```\n\n----------------------------------------\n\nTITLE: Getting Map Element from Call Reply - C\nDESCRIPTION: Retrieves the key and value of a specific element from a map-type RedisModuleCallReply. Returns REDISMODULE_OK on success, REDISMODULE_ERR on failure.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_152\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_CallReplyMapElement(RedisModuleCallReply *reply,\n                                        size_t idx,\n                                        RedisModuleCallReply **key,\n                                        RedisModuleCallReply **val);\n```\n\n----------------------------------------\n\nTITLE: Loading Long Double from RDB File (RedisModule_LoadLongDouble)\nDESCRIPTION: This function loads a long double value from the Redis RDB file, previously saved using `RedisModule_SaveLongDouble()`. It is intended to be called within the `rdb_load` method of a module data type.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_177\n\nLANGUAGE: c\nCODE:\n```\nlong double RedisModule_LoadLongDouble(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Get summary of pending entries using XPENDING - Redis\nDESCRIPTION: This command returns a summary of the pending messages in the consumer group `group55` for the stream `mystream`. The output includes the total number of pending messages, the smallest and greatest message IDs, and a list of consumers with their respective number of pending messages.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xpending.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> XPENDING mystream group55\n1) (integer) 1\n2) 1526984818136-0\n3) 1526984818136-0\n4) 1) 1) \"consumer-123\"\n      2) \"1\"\n```\n\n----------------------------------------\n\nTITLE: Saving Double in RDB File (RedisModule_SaveDouble)\nDESCRIPTION: This function saves a double value to the Redis RDB file. It is intended to be called within the `rdb_save` method of a module data type. The double can be a valid number, a NaN, or infinity. It can be loaded back using `RedisModule_LoadDouble()`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_172\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveDouble(RedisModuleIO *io, double value);\n```\n\n----------------------------------------\n\nTITLE: Big Number Encoding in RESP\nDESCRIPTION: This snippet describes the encoding of big numbers in RESP. It starts with a left parenthesis, followed by an optional sign, a number, and a CRLF terminator.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n([+|-]<number>\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Checking if a Module Name is Busy\nDESCRIPTION: This function checks if a given module name is already in use. It returns a non-zero value if the name is busy, and zero otherwise. Available since Redis 4.0.3.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_IsModuleNameBusy(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Hash Encoding (Redis >= 7.2)\nDESCRIPTION: These configuration directives in redis.conf control the maximum number of entries and value size for specially encoded sets using listpacks. Adjusting these settings can optimize memory usage, but exceeding these limits will result in automatic conversion to normal encoding.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nset-max-listpack-entries 128\nset-max-listpack-value 64\n```\n\n----------------------------------------\n\nTITLE: Register Defrag Function - C\nDESCRIPTION: Registers a defrag callback function for global module data, which is memory allocated by the module that is not tied to any specific Redis data type. The registered function (`cb`) will be invoked during the defragmentation process. Returns `REDISMODULE_OK` on success, `REDISMODULE_ERR` on failure. Requires a `RedisModuleCtx` context.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_303\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_RegisterDefragFunc(RedisModuleCtx *ctx,\n                                       RedisModuleDefragFunc cb);\n```\n\n----------------------------------------\n\nTITLE: Adding strings for case-insensitive comparison\nDESCRIPTION: This example demonstrates how to add strings to a sorted set in a way that allows for case-insensitive comparison while still retaining the original case for display. It uses a normalized part before a colon to enforce a specific comparison order.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrangebylex.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for Hash Encoding Limits (Redis <= 6.2)\nDESCRIPTION: These configurations are crucial for the memory optimization strategy with hashes. `hash-max-zipmap-entries` defines the maximum number of entries, while `hash-max-zipmap-value` specifies the maximum size of the keys and values. If a hash exceeds these, it converts to a standard hash table, losing memory savings.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/memory-optimization.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhash-max-zipmap-entries 256\n```\n\nLANGUAGE: text\nCODE:\n```\nhash-max-zipmap-value 1024\n```\n\n----------------------------------------\n\nTITLE: Module Type Replace Value - C\nDESCRIPTION: Replaces the value assigned to a module type within a Redis key.  The key must be open for writing, have an existing module type value, and match the specified `moduleType`. Unlike `RedisModule_ModuleTypeSetValue`, this function swaps the old and new values and returns the old value by reference if provided.  Returns `REDISMODULE_OK` on success, `REDISMODULE_ERR` on failure due to access or type mismatch.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_299\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ModuleTypeReplaceValue(RedisModuleKey *key,\n                                           moduleType *mt,\n                                           void *new_value,\n                                           void **old_value);\n```\n\n----------------------------------------\n\nTITLE: Adding Strings For Case-Insensitive Comparison\nDESCRIPTION: This example illustrates adding strings to a sorted set for case-insensitive comparison using a normalization technique. Elements are added with a normalized lowercase prefix, allowing for case-insensitive range queries.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zrange.md#_snippet_7\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD autocomplete 0 foo:Foo 0 bar:BAR 0 zap:zap\n```\n\n----------------------------------------\n\nTITLE: Checking Homebrew Version with Bash\nDESCRIPTION: This command checks if Homebrew is installed and displays its version. It's a prerequisite step before installing Redis using Homebrew.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redis/install-redis-on-mac-os.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew --version\n```\n\n----------------------------------------\n\nTITLE: RedisModuleEventCallback Function Definition (C)\nDESCRIPTION: This code defines the signature of the callback function that is invoked when a subscribed server event occurs. The callback receives the module context, the event ID, a subevent identifier, and a void pointer to event-specific data. The `eid` parameter is useful if the module subscribes to multiple events with the same callback function. The subevent allows the callback to differentiate different phases of the event. The `data` field can be cast to a specific type dependent on the type of event\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_284\n\nLANGUAGE: c\nCODE:\n```\nint (*RedisModuleEventCallback)(RedisModuleCtx *ctx,\n                                    RedisModuleEvent eid,\n                                    uint64_t subevent,\n                                    void *data);\n```\n\n----------------------------------------\n\nTITLE: Getting Server Info Field as char* in C\nDESCRIPTION: Retrieves a field from server information data, returning a `char*`. The returned pointer should not be freed by the caller.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_257\n\nLANGUAGE: C\nCODE:\n```\nconst char *RedisModule_ServerInfoGetFieldC(RedisModuleServerInfoData *data,\n                                                const char* field);\n```\n\n----------------------------------------\n\nTITLE: Stream Iterator Example\nDESCRIPTION: This code iterates through a Redis stream using stream iterators. It retrieves the stream ID and the field-value pairs within each entry. Each field and value is freed after processing using RedisModule_FreeString.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_138\n\nLANGUAGE: C\nCODE:\n```\nRedisModule_StreamIteratorStart(key, 0, startid_ptr, endid_ptr);\nRedisModuleStreamID id;\nlong numfields;\nwhile (RedisModule_StreamIteratorNextID(key, &id, &numfields) ==\n       REDISMODULE_OK) {\n    RedisModuleString *field, *value;\n    while (RedisModule_StreamIteratorNextField(key, &field, &value) ==\n           REDISMODULE_OK) {\n        //\n        // ... Do stuff ...\n        //\n        RedisModule_FreeString(ctx, field);\n        RedisModule_FreeString(ctx, value);\n    }\n}\nRedisModule_StreamIteratorStop(key);\n```\n\n----------------------------------------\n\nTITLE: XRANGE with COUNT resulting in empty array\nDESCRIPTION: This shows the use of XRANGE when the starting point is after the last element in the stream, resulting in an empty array.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_14\n\nLANGUAGE: redis\nCODE:\n```\n> XRANGE race:france (1692632147973-0 + COUNT 2\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute from Call Reply - C\nDESCRIPTION: Return the attribute of the given reply, or NULL if no attribute exists.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_153\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleCallReply *RedisModule_CallReplyAttribute(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Module Notification Callback (C)\nDESCRIPTION: Defines the signature of the callback function that is invoked when a keyspace notification event occurs. The callback receives the context, event type, event name, and the key affected by the event.  It is executed synchronously with redis logic.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_214\n\nLANGUAGE: C\nCODE:\n```\nint (*RedisModuleNotificationFunc) (RedisModuleCtx *ctx, int type,\n                                        const char *event,\n                                        RedisModuleString *key);\n```\n\n----------------------------------------\n\nTITLE: Movablekeys SORT Example\nDESCRIPTION: This example demonstrates the output of the `COMMAND` command for the `SORT` command, specifically highlighting the `movablekeys` flag. The presence of this flag indicates that the key positions are not fully determined by the first key, last key, and step values, requiring additional logic to identify all keys involved in the command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/command.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1) 1) \"sort\"\n   2) (integer) -2\n   3) 1) write\n      2) denyoom\n      3) movablekeys\n   4) (integer) 1\n   5) (integer) 1\n   6) (integer) 1\n   ...\n```\n\n----------------------------------------\n\nTITLE: Inspect Replication Stream with Redis CLI Replica Mode\nDESCRIPTION: This command starts `redis-cli` in replica mode, connecting to a Redis primary instance and logging the commands received in the replication stream. This is useful for debugging replication issues and understanding the data being transmitted to replicas. The output displays the commands in CSV format.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli --replica\nSYNC with master, discarding 13256 bytes of bulk transfer...\nSYNC done. Logging commands from master.\n\"PING\"\n\"SELECT\",\"0\"\n\"SET\",\"last_name\",\"Enigk\"\n\"PING\"\n\"INCR\",\"mycounter\"\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic AOF Rewrites for Backup - Redis CONFIG SET\nDESCRIPTION: This snippet disables automatic AOF rewrites to ensure a consistent backup of AOF files. It sets the `auto-aof-rewrite-percentage` configuration to 0 using the `CONFIG SET` command. The `<prev-value>` placeholder should be replaced with the original value before re-enabling rewrites.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_8\n\nLANGUAGE: Redis\nCODE:\n```\nCONFIG SET auto-aof-rewrite-percentage 0\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from a Redis Module Dictionary\nDESCRIPTION: This function retrieves the value associated with a key in the dictionary, using a `RedisModuleString` for the key. It returns the value pointer, or NULL if the key does not exist or if NULL was stored at the key. The 'nokey' pointer can be used to distinguish between these two cases.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_248\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_DictGet(RedisModuleDict *d,\n                              RedisModuleString *key,\n                              int *nokey);\n```\n\n----------------------------------------\n\nTITLE: Getting the stream length\nDESCRIPTION: Returns the number of entries in the `race:france` stream.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_6\n\nLANGUAGE: redis\nCODE:\n```\nXLEN race:france\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Node Configuration Example\nDESCRIPTION: This is an example output of the `CLUSTER NODES` command. Each line represents a Redis cluster node and provides information like node ID, address, flags, master node, ping/pong times, configuration epoch, link state, and assigned hash slots.  This information is used for administrative tasks, debugging, and configuration inspections of the Redis cluster.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-nodes.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n07c37dfeb235213a872192d90877d0cd55635b91 127.0.0.1:30004@31004,hostname4 slave e7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 0 1426238317239 4 connected\n67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 127.0.0.1:30002@31002,hostname2 master - 0 1426238316232 2 connected 5461-10922\n292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 127.0.0.1:30003@31003,hostname3 master - 0 1426238318243 3 connected 10923-16383\n6ec23923021cf3ffec47632106199cb7f496ce01 127.0.0.1:30005@31005,hostname5 slave 67ed2db8d677e59ec4a4cefb06858cf2a1a89fa1 0 1426238316232 5 connected\n824fe116063bc5fcf9f4ffd895bc17aee7731ac3 127.0.0.1:30006@31006,hostname6 slave 292f8b365bb7edb5e285caf0b7e6ddc7265d2f4f 0 1426238317741 6 connected\ne7d1eecce10fd6bb5eb35b9f99a514335d9ba9ca 127.0.0.1:30001@31001,hostname1 myself,master - 0 0 1 connected 0-5460\n```\n\n----------------------------------------\n\nTITLE: Run RedisInsight Docker Image (Non-Persistent)\nDESCRIPTION: This command runs the RedisInsight Docker image in detached mode, mapping port 5540 on the host to port 5540 on the container.  It does not persist data across container restarts. Requires Docker to be installed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name redisinsight -p 5540:5540 redis/redisinsight:latest\n```\n\n----------------------------------------\n\nTITLE: Converting String to Double\nDESCRIPTION: RedisModule_StringToDouble converts the string into a double, storing it at *d. Returns REDISMODULE_OK on success or REDISMODULE_ERR if the string is not a valid string representation of a double value.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_StringToDouble(const RedisModuleString *str, double *d);\n```\n\n----------------------------------------\n\nTITLE: Adding a stream entry with a duplicate ID\nDESCRIPTION: Attempts to add a new entry to the `race:usa` stream with the same ID as a previous entry (`0-1`). This results in an error because stream IDs must be monotonically increasing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:usa 0-1 racer Prickett\n```\n\n----------------------------------------\n\nTITLE: RedisModuleCronLoop Structure (C)\nDESCRIPTION: This code defines the `RedisModuleCronLoop` structure which is provided to the callback when `RedisModuleEvent_CronLoop` is triggered. It provides information about how frequently `serverCron()` is being called through the `hz` parameter. This structure is intended to provide a way to measure the frequency of the cron loop.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_287\n\nLANGUAGE: c\nCODE:\n```\nint32_t hz;  // Approximate number of events per second.\n```\n\n----------------------------------------\n\nTITLE: Redis Benchmark without MONITOR\nDESCRIPTION: This benchmark result shows the performance of Redis without the `MONITOR` command running. It is used as a baseline for comparison to demonstrate the performance impact of running `MONITOR`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/monitor.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ src/redis-benchmark -c 10 -n 100000 -q\nPING_INLINE: 101936.80 requests per second\nPING_BULK: 102880.66 requests per second\nSET: 95419.85 requests per second\nGET: 104275.29 requests per second\nINCR: 93283.58 requests per second\n```\n\n----------------------------------------\n\nTITLE: Defining RedisModuleCommandInfo struct (C)\nDESCRIPTION: This code snippet defines the `RedisModuleCommandInfo` struct, which is used to encapsulate various command metadata such as summary, complexity, version, history, tips, arity, key specifications, and argument details. This structure is used by `RedisModule_SetCommandInfo`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct RedisModuleCommandInfo {\n    const RedisModuleCommandInfoVersion *version;\n    const char *summary;\n    const char *complexity;\n    const char *since;\n    RedisModuleCommandHistoryEntry *history;\n    const char *tips;\n    int arity;\n    RedisModuleCommandKeySpec *key_specs;\n    RedisModuleCommandArg *args;\n} RedisModuleCommandInfo;\n```\n\n----------------------------------------\n\nTITLE: Modifying down-after-milliseconds using SENTINEL SET in Redis\nDESCRIPTION: This command modifies the `down-after-milliseconds` configuration parameter for a master named `objects-cache-master` using the `SENTINEL SET` command. It sets the timeout to 1000 milliseconds, determining how long Sentinel waits before considering a master as down. This is a runtime configuration change for the Sentinel instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nSENTINEL SET objects-cache-master down-after-milliseconds 1000\n```\n\n----------------------------------------\n\nTITLE: Getting a Value from a Redis Module Dictionary (C-style Key)\nDESCRIPTION: This function retrieves the value associated with a key in the dictionary, using a C-style string for the key. It returns the value pointer, or NULL if the key does not exist or if NULL was stored at the key. The 'nokey' pointer can be used to distinguish between these two cases.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_247\n\nLANGUAGE: c\nCODE:\n```\nvoid *RedisModule_DictGetC(RedisModuleDict *d,\n                               void *key,\n                               size_t keylen,\n                               int *nokey);\n```\n\n----------------------------------------\n\nTITLE: Event Notification Pattern - Consumer Side\nDESCRIPTION: This snippet illustrates the consumer side of an event notification pattern using Redis's SPOP and BRPOP commands. It continuously attempts to retrieve and process elements from a set. If the set is empty, it blocks using BRPOP on a helper key until a new element is added to the set.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/blpop.md#_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nLOOP forever\n    WHILE SPOP(key) returns elements\n        ... process elements ...\n    END\n    BRPOP helper_key\nEND\n```\n\n----------------------------------------\n\nTITLE: Redis-like Assert Function\nDESCRIPTION: Provides a Redis-like assert function that shuts down the server and generates logging information similar to Redis's own assertions. It's recommended to use the macro `RedisModule_Assert(expression)` instead of calling this function directly. Upon failure, the server is terminated.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_187\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule__Assert(const char *estr, const char *file, int line);\n```\n\n----------------------------------------\n\nTITLE: Redis GETBIT examples\nDESCRIPTION: This example demonstrates how to use the GETBIT command in Redis. It showcases setting a bit using SETBIT and then retrieving bits using GETBIT at different offsets, including those within the string and beyond its length. It highlights the behavior when the key exists and when it's assumed to be an empty string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/getbit.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSETBIT mykey 7 1\nGETBIT mykey 0\nGETBIT mykey 7\nGETBIT mykey 100\n```\n\n----------------------------------------\n\nTITLE: Redis Pipelining Benchmark in Ruby\nDESCRIPTION: This Ruby code benchmarks Redis performance with and without pipelining. It uses the `redis` gem to connect to a Redis server and execute 10,000 PING commands. The `with_pipelining` function uses `r.pipelined` to send the commands in a batch, while `without_pipelining` sends each command individually. The `bench` function measures and prints the execution time for each method.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/pipelining/index.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'redis'\n\ndef bench(descr)\n  start = Time.now\n  yield\n  puts \"#{descr} #{Time.now - start} seconds\"\nend\n\ndef without_pipelining\n  r = Redis.new\n  10_000.times do\n    r.ping\n  end\nend\n\ndef with_pipelining\n  r = Redis.new\n  r.pipelined do\n    10_000.times do\n      r.ping\n    end\n  end\nend\n\nbench('without pipelining') do\n  without_pipelining\nend\nbench('with pipelining') do\n  with_pipelining\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Long Long to Digest (RedisModule_DigestAddLongLong)\nDESCRIPTION: This function adds a `long long` integer to the digest. It's similar to `RedisModule_DigestAddStringBuffer()` but takes a `long long` as input, which is converted to a string before being added to the digest. This is part of the DEBUG DIGEST interface for module types.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_179\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_DigestAddLongLong(RedisModuleDigest *md, long long ll);\n```\n\n----------------------------------------\n\nTITLE: Sending Cluster Message in Redis Module (C)\nDESCRIPTION: Sends a message to a specified target node or all nodes in the cluster.  The target is a node ID. Returns REDISMODULE_OK on success, REDISMODULE_ERR if the node is not connected or the ID doesn't map to a known cluster node.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_219\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_SendClusterMessage(RedisModuleCtx *ctx,\n                                       const char *target_id,\n                                       uint8_t type,\n                                       const char *msg,\n                                       uint32_t len);\n```\n\n----------------------------------------\n\nTITLE: Adding Members with Identical Scores for Lexicographical Ordering - Redis\nDESCRIPTION: This example demonstrates adding members to a Redis sorted set with identical scores (0 in this case) to leverage lexicographical ordering. It shows how members with the same score are sorted lexicographically. This is necessary for `ZRANGEBYLEX` to work correctly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n> ZADD racer_scores 0 \"Norem\" 0 \"Sam-Bodden\" 0 \"Royce\" 0 \"Castilla\" 0 \"Prickett\" 0 \"Ford\"\n(integer) 3\n> ZRANGE racer_scores 0 -1\n1) \"Castilla\"\n2) \"Ford\"\n3) \"Norem\"\n4) \"Prickett\"\n5) \"Royce\"\n6) \"Sam-Bodden\"\n> ZRANGEBYLEX racer_scores [A [L\n1) \"Castilla\"\n2) \"Ford\"\n```\n\n----------------------------------------\n\nTITLE: Generating perf Report with Call Graph\nDESCRIPTION: This command generates a report from the perf.data file, displaying a call graph with a minimum inclusion threshold of 0.5%.  It helps in identifying performance bottlenecks by showing the call chains and stack backtraces.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ perf report -g \"graph,0.5,caller\"\n```\n\n----------------------------------------\n\nTITLE: Grep for Swap Memory Usage\nDESCRIPTION: This command searches the smaps file for lines containing 'Swap:', displaying the amount of memory swapped to disk by the Redis process.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cat smaps | grep 'Swap:'\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Connection with Telnet\nDESCRIPTION: This command line snippet demonstrates how to use telnet to check if Redis Server is listening on the port, run telnet command on the host where the `go-redis` client is running.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/go.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntelnet localhost 6379\nTrying 127.0.0.1...\ntelnet: Unable to connect to remote host: Connection refused\n```\n\n----------------------------------------\n\nTITLE: Loading Float from RDB File (RedisModule_LoadFloat)\nDESCRIPTION: This function loads a float value from the Redis RDB file, previously saved using `RedisModule_SaveFloat()`. It is intended to be called within the `rdb_load` method of a module data type.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_175\n\nLANGUAGE: c\nCODE:\n```\nfloat RedisModule_LoadFloat(RedisModuleIO *io);\n```\n\n----------------------------------------\n\nTITLE: Return Status Reply from Redis Lua Script\nDESCRIPTION: This example demonstrates two equivalent methods for returning status replies from Redis Lua scripts. Both involve creating a Lua table with the 'ok' field set to the status message, which is then returned to the client. It shows the usage of `redis.status_reply()` for creating these replies. Status replies are simple string responses, such as \"OK\".\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL \"return { ok = 'TICK' }\" 0\nTICK\nredis> EVAL \"return redis.status_reply('TOCK')\" 0\nTOCK\n```\n\n----------------------------------------\n\nTITLE: Blocking a Client with RedisModule_BlockClient (C)\nDESCRIPTION: This code snippet demonstrates how to block a client using the `RedisModule_BlockClient` function. It takes context, reply callback, timeout callback, free private data callback, and timeout in milliseconds as arguments. Returns a `RedisModuleBlockedClient` object.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleBlockedClient *RedisModule_BlockClient(RedisModuleCtx *ctx, RedisModuleCmdFunc reply_callback, RedisModuleCmdFunc timeout_callback, void (*free_privdata)(void*), long long timeout_ms);\n```\n\n----------------------------------------\n\nTITLE: Passing key names and arguments to the script during debugging\nDESCRIPTION: This snippet demonstrates how to pass key names and arguments to a Lua script being debugged using `redis-cli`.  The key names and arguments are separated by a comma after the script path. This is equivalent to the KEYS and ARGV arrays available within the Lua script.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-debugging.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./redis-cli --ldb --eval /tmp/script.lua mykey somekey , arg1 arg2\n```\n\n----------------------------------------\n\nTITLE: Double Encoding in RESP\nDESCRIPTION: This snippet shows the encoding format for double-precision floating-point values in RESP. It includes components for sign, integral part, fractional part, and exponent.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n,[<+|->]<integral>[.<fractional>][<E|e>[sign]<exponent>]\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Redis transaction behavior after reconnection\nDESCRIPTION: This example shows that a MULTI/EXEC transaction is lost upon reconnection. If the server is restarted during a transaction, the EXEC command will return an error. This highlights a limitation when using redis-cli in interactive mode for testing.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ redis-cli\n127.0.0.1:6379> MULTI\nOK\n127.0.0.1:6379> PING\nQUEUED\n\n( here the server is manually restarted )\n\n127.0.0.1:6379> EXEC\n(error) ERR EXEC without MULTI\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Database Size\nDESCRIPTION: Checks the number of keys in the currently selected Redis database using `redis-cli dbsize` after running the benchmark with random keys.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli dbsize\n(integer) 99993\n```\n\n----------------------------------------\n\nTITLE: Profiling Redis with bcc/BPF (Stack Traces)\nDESCRIPTION: This command uses the bcc/BPF profile tool to sample stack traces of the redis-server process and output them in folded format directly.  It reduces the overhead on CPU and disk I/O compared to perf. It also generates the output in a format suitable for flame graph generation, removing the need for intermediate steps.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ /usr/share/bcc/tools/profile -F 999 -f --pid $(pgrep redis-server) --duration 60 > redis.folded.stacks\n```\n\n----------------------------------------\n\nTITLE: Remove a Failed Node from Redis Cluster using redis-cli\nDESCRIPTION: This command is used to remove a failed node from a Redis Cluster. The first argument specifies a node in the cluster, and the second argument is the ID of the failed node. It will execute `CLUSTER FORGET` command on every node in the cluster.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --cluster call 127.0.0.1:7000 cluster forget `<node-id>`\n```\n\n----------------------------------------\n\nTITLE: Defining RedisModuleCommandKeySpec struct (C)\nDESCRIPTION: This code snippet defines the `RedisModuleCommandKeySpec` struct, which is used to specify the location of key arguments in a Redis command. It includes fields for notes, flags, the type of search to begin, and how to find keys after the initial search.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct RedisModuleCommandKeySpec {\n    const char *notes;\n    uint64_t flags;\n    RedisModuleKeySpecBeginSearchType begin_search_type;\n    union {\n        struct {\n            int pos;\n        } index;\n        struct {\n            const char *keyword;\n            int startfrom;\n        } keyword;\n    } bs;\n    RedisModuleKeySpecFindKeysType find_keys_type;\n    union {\n        struct {\n            int lastkey;\n            int keystep;\n            int limit;\n        } range;\n        struct {\n            int keynumidx;\n            int firstkey;\n            int keystep;\n        } keynum;\n    } fk;\n} RedisModuleCommandKeySpec;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Key-Value Pair from a Redis Module Dictionary (C-style Key)\nDESCRIPTION: This function removes a key-value pair from the dictionary, using a C-style string for the key.  It returns `REDISMODULE_OK` if the key was found and deleted, and `REDISMODULE_ERR` if the key was not found. If 'oldval' is not NULL, it is set to the value stored at the key before deletion.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_249\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DictDelC(RedisModuleDict *d,\n                             void *key,\n                             size_t keylen,\n                             void *oldval);\n```\n\n----------------------------------------\n\nTITLE: Setting a Key with Newline Character\nDESCRIPTION: This code snippet demonstrates how to set a Redis key with a string value containing a newline character.  The \\n escape sequence is used within the double quotes to represent the newline.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1:6379> SET mykey \"Hello\\nWorld\"\nOK\n127.0.0.1:6379> GET mykey\nHello\nWorld\n```\n\n----------------------------------------\n\nTITLE: Free Private Data Callback (C)\nDESCRIPTION: This `free_privdata` function is responsible for freeing the memory allocated for the private data, ensuring that memory leaks are avoided when clients disconnect or timeout.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid free_privdata(void *privdata) {\n        RedisModule_Free(privdata);\n    }\n```\n\n----------------------------------------\n\nTITLE: RedisModuleSwapDbInfo Structure (C)\nDESCRIPTION: This code defines the struct `RedisModuleSwapDbInfo` that can be cast from the `data` argument when the `RedisModuleEvent_SwapDB` event is triggered. The struct contains information regarding which database numbers were swapped via `dbnum_first` and `dbnum_second`\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_290\n\nLANGUAGE: c\nCODE:\n```\nint32_t dbnum_first;    // Swap Db first dbnum\n        int32_t dbnum_second;   // Swap Db second dbnum\n```\n\n----------------------------------------\n\nTITLE: ACL Command Check with redis.acl_check_cmd in Lua\nDESCRIPTION: Checks if the current user running the script has ACL permissions to execute the given command with the given arguments. Returns a boolean `true` if the user has permissions, or `false` otherwise. Raises an error if the command or its arguments are invalid.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Configuring password-only authentication for Sentinel\nDESCRIPTION: This code shows how to configure password-only authentication for Sentinel using the `requirepass` directive. The same password must be configured on all Sentinel instances for proper communication between them.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nrequirepass \"your_password_here\"\n```\n\n----------------------------------------\n\nTITLE: Defrag RedisModuleString - C\nDESCRIPTION: Defragments a `RedisModuleString` previously allocated. Defragmentation involves allocating new memory and copying the string's content.  It's only possible to defrag strings with a single reference. Returns a new `RedisModuleString` pointer or NULL if defragmentation was not needed. The original pointer must not be used after calling this function if a new pointer is returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_308\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_DefragRedisModuleString(RedisModuleDefragCtx *ctx,\n                                                           RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Checking Module Options Flags Support in Redis (C)\nDESCRIPTION: This snippet demonstrates how to check if specific module options flags are supported by the Redis server version in use, utilizing the `RedisModule_GetModuleOptionsAll` function. It retrieves the full module options flags mask and performs a bitwise AND operation to determine support.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_295\n\nLANGUAGE: c\nCODE:\n```\n       int supportedFlags = RedisModule_GetModuleOptionsAll();\n       if (supportedFlags & REDISMODULE_OPTIONS_ALLOW_NESTED_KEYSPACE_NOTIFICATIONS) {\n             // REDISMODULE_OPTIONS_ALLOW_NESTED_KEYSPACE_NOTIFICATIONS is supported\n       } else{\n             // REDISMODULE_OPTIONS_ALLOW_NESTED_KEYSPACE_NOTIFICATIONS is not supported\n       }\n```\n\n----------------------------------------\n\nTITLE: Normalizing Number for Bitwise Ops in Lua\nDESCRIPTION: Normalizes a number to the numeric range for bit operations. The `bit.tobit()` function converts a number to a format suitable for bitwise manipulations, ensuring correct behavior. It is part of the `bit` library available in Redis Lua scripts and functions since version 2.8.18.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_29\n\nLANGUAGE: lua\nCODE:\n```\nredis> EVAL 'return bit.tobit(1)' 0\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster Directories\nDESCRIPTION: These commands create the directories needed to run a local Redis cluster for testing purposes. It creates a directory named `cluster-test`, and then creates subdirectories named after the port numbers for each Redis instance (7000 to 7005).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/scaling.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cluster-test\ncd cluster-test\nmkdir 7000 7001 7002 7003 7004 7005\n```\n\n----------------------------------------\n\nTITLE: User Logout Logic in PHP\nDESCRIPTION: This PHP code snippet implements the user logout logic for Retwis. It generates a new authentication secret, updates the `auth` field in the user's hash, updates the `auths` hash with the new secret, and deletes the old secret. It uses `redisLink()` to connect to Redis, `isLoggedIn()` to check authentication and requires the `retwis.php` include file.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\ninclude(\"retwis.php\");\n\nif (!isLoggedIn()) {\n    header(\"Location: index.php\");\n    exit;\n}\n\n$r = redisLink();\n$newauthsecret = getrand();\n$userid = $User['id'];\n$oldauthsecret = $r->hget(\"user:$userid\",\"auth\");\n\n$r->hset(\"user:$userid\",\"auth\",$newauthsecret);\n$r->hset(\"auths\",$newauthsecret,$userid);\n$r->hdel(\"auths\",$oldauthsecret);\n```\n\n----------------------------------------\n\nTITLE: Freeing Cluster Nodes List in Redis Module (C)\nDESCRIPTION: Frees the memory allocated for the node list obtained using `RedisModule_GetClusterNodesList`. It's crucial to free the memory to prevent memory leaks.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_221\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_FreeClusterNodesList(char **ids);\n```\n\n----------------------------------------\n\nTITLE: Resetting a Redis Cluster Node\nDESCRIPTION: This snippet describes how to reset a Redis Cluster node using the `CLUSTER RESET` command. It highlights the two variants of the command, `CLUSTER RESET SOFT` and `CLUSTER RESET HARD`, and explains the operations performed by each type of reset, including discarding data, releasing slots, removing node entries, and resetting epochs and Node ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n`CLUSTER RESET SOFT`\n```\n\nLANGUAGE: text\nCODE:\n```\n`CLUSTER RESET HARD`\n```\n\n----------------------------------------\n\nTITLE: Reset user and list ACL (Redis)\nDESCRIPTION: This snippet demonstrates resetting the user 'antirez' using `ACL SETUSER antirez reset` and then listing the ACL to verify the reset. The output shows the user is off (inactive) and has no permissions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-setuser.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER antirez reset\n+OK\n> ACL LIST\n1) \"user antirez off -@all\"\n```\n\n----------------------------------------\n\nTITLE: Pushing an Element into a List (C)\nDESCRIPTION: Pushes an element into a list, either to the head or tail depending on the `where` argument (`REDISMODULE_LIST_HEAD` or `REDISMODULE_LIST_TAIL`). If the key is an empty key opened for writing, it's created. On success, `REDISMODULE_OK` is returned. On failure, `REDISMODULE_ERR` is returned and errno is set accordingly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_110\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_ListPush(RedisModuleKey *key,\n                             int where,\n                             RedisModuleString *ele);\n```\n\n----------------------------------------\n\nTITLE: Getting Used Memory Ratio in Redis Module (C)\nDESCRIPTION: This function returns a float between 0 and 1 indicating the amount of memory currently used relative to the Redis \"maxmemory\" configuration.  0 means no memory limit is configured. 1 means the memory limit is reached. Values greater than 1 indicate that more memory is used than the configured limit.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_277\n\nLANGUAGE: c\nCODE:\n```\nfloat RedisModule_GetUsedMemoryRatio(void);\n```\n\n----------------------------------------\n\nTITLE: Parsing Bulk String Length in C\nDESCRIPTION: This C code snippet demonstrates how to efficiently parse the length of a bulk string from a RESP formatted string. It iterates through the characters representing the length until a carriage return ('\\r') is encountered. It converts each character to its integer representation and accumulates the length.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nint main(void) {\n    unsigned char *p = \"$123\\r\\n\";\n    int len = 0;\n\n    p++;\n    while(*p != '\\r') {\n        len = (len*10)+(*p - '0');\n        p++;\n    }\n\n    /* Now p points at '\\r', and the len is in bulk_len. */\n    printf(\"%d\\n\", len);\n    return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading and Executing a Cached Script\nDESCRIPTION: This example demonstrates loading a Lua script into the Redis script cache using `SCRIPT LOAD` and then executing it using `EVALSHA` with the SHA1 digest returned by `SCRIPT LOAD`. The argument '0' indicates that no key arguments are passed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/eval-intro.md#_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nredis> SCRIPT LOAD \"return 'Immabe a cached script'\"\n\"c664a3bf70bd1d45c4284ffebb65a6f2299bfc9f\"\nredis> EVALSHA c664a3bf70bd1d45c4284ffebb65a6f2299bfc9f 0\n\"Immabe a cached script\"\n```\n\n----------------------------------------\n\nTITLE: Dump processor registers in GDB\nDESCRIPTION: This GDB command displays the values of the processor registers at the time of the program's interruption.  This information is crucial for understanding the program's state and identifying potential issues related to memory access, calculations, or control flow.  Include this output in bug reports to provide detailed context to developers.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_5\n\nLANGUAGE: gdb\nCODE:\n```\n(gdb) info registers\n```\n\n----------------------------------------\n\nTITLE: Generating RESP3 Double with Lua\nDESCRIPTION: This Lua code snippet shows how to generate a RESP3 double for testing purposes within Redis. It uses the `tonumber` function to convert a string representation of a double into a number, which is then returned within a Lua table with the key 'double'. The EVAL command allows executing the Lua script within Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_35\n\nLANGUAGE: lua\nCODE:\n```\nEVAL \"return { double = tonumber(ARGV[1]) }\" 0 1e0\n```\n\n----------------------------------------\n\nTITLE: Getting Reply Length (C)\nDESCRIPTION: This snippet shows how to get the length of a RedisModuleCallReply using `RedisModule_CallReplyLength`.  The length represents the string length for string and error replies, and the number of elements for array replies.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nsize_t reply_len = RedisModule_CallReplyLength(reply);\n```\n\n----------------------------------------\n\nTITLE: Registering Cluster Message Receiver in Redis Module (C)\nDESCRIPTION: Registers a callback function to receive cluster messages of a specific type. This allows Redis modules to communicate with other nodes in a Redis Cluster.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_218\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_RegisterClusterMessageReceiver(RedisModuleCtx *ctx,\n                                                    uint8_t type,\n                                                    RedisModuleClusterMessageReceiver callback);\n```\n\n----------------------------------------\n\nTITLE: Testing Key for Native Type - C\nDESCRIPTION: This snippet illustrates how to check if a Redis key has a specific native type as its value. It uses `RedisModule_ModuleTypeGetType` to get the type of the key's value and compares it with the registered type (`MyType`).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-native-types.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nif (RedisModule_ModuleTypeGetType(key) == MyType) {\n    /* ... do something ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing String Pointer and Length in Redis Module (C)\nDESCRIPTION: This snippet demonstrates how to access a string's pointer and length within a Redis module using the `RedisModule_StringPtrLen` function. It retrieves a pointer to the string data and stores the length in the provided `len` variable. This pointer is `const` and should not be modified.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nconst char *RedisModule_StringPtrLen(RedisModuleString *string, size_t *len);\n```\n\n----------------------------------------\n\nTITLE: Truncated AOF Warning Message\nDESCRIPTION: This code snippet shows an example log message that Redis emits when it encounters a truncated AOF file during startup. The server indicates that it is discarding the last non-well-formed command and proceeds to load the AOF file, as the `aof-load-truncated` configuration is enabled by default.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/persistence.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* Reading RDB preamble from AOF file...\n* Reading the remaining AOF tail...\n# !!! Warning: short read while loading the AOF file !!!\n# !!! Truncating the AOF at offset 439 !!!\n# AOF loaded anyway because aof-load-truncated is enabled\n```\n\n----------------------------------------\n\nTITLE: Netcat Pipelining Example\nDESCRIPTION: This example demonstrates Redis pipelining using the `netcat` utility to send three PING commands to the Redis server at localhost on port 6379. The `sleep 1` command is included to ensure the commands are sent together. The server responds with +PONG for each command.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/pipelining/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ (printf \"PING\\r\\nPING\\r\\nPING\\r\\n\"; sleep 1) | nc localhost 6379\n+PONG\n+PONG\n+PONG\n```\n\n----------------------------------------\n\nTITLE: Spellchecker Execution\nDESCRIPTION: This bash command executes the spellchecker-cli package on the markdown files in the project. It disables suggestions, specifies the file pattern, language, quiet mode, and the wordlist file for exceptions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nspellchecker --no-suggestions -f '**/*.md' -l en-US -q -d wordlist\n```\n\n----------------------------------------\n\nTITLE: Disable Redis daemonization\nDESCRIPTION: When running Redis under daemontools, this setting disables Redis's internal daemonization process, allowing daemontools to manage the process lifecycle.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/admin.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndaemonize no\n```\n\n----------------------------------------\n\nTITLE: Checking Redis Instance Latency with Redis CLI\nDESCRIPTION: This command uses the `--latency` option to measure the latency of a Redis instance by sending `PING` commands and measuring the response time.  It displays minimum, maximum, and average latency in milliseconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli --latency\n```\n\n----------------------------------------\n\nTITLE: Install NRedisStack package using dotnet CLI\nDESCRIPTION: Installs the NRedisStack package using the dotnet command-line interface. This command adds the NRedisStack library to the .NET project, allowing the application to interact with a Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/clients/dotnet.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package NRedisStack\n```\n\n----------------------------------------\n\nTITLE: Getting Array Element from Call Reply - C\nDESCRIPTION: Retrieves a specific element from an array-type RedisModuleCallReply. Returns NULL if the reply type is incorrect or the index is out of range.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_145\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleCallReply *RedisModule_CallReplyArrayElement(RedisModuleCallReply *reply,\n                                                            size_t idx);\n```\n\n----------------------------------------\n\nTITLE: Executing Commands from File with Quoted String\nDESCRIPTION: This snippet demonstrates executing commands from a file, including a command with a quoted string containing spaces. It sets the key 'arg_example' to a string with spaces and then retrieves the length of the string.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/connect/cli.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cat /tmp/commands.txt\nSET arg_example \"This is a single argument\"\nSTRLEN arg_example\n$ cat /tmp/commands.txt | redis-cli\nOK\n(integer) 25\n```\n\n----------------------------------------\n\nTITLE: Check Blocked Request Type (C)\nDESCRIPTION: These functions, `RedisModule_IsBlockedReplyRequest` and `RedisModule_IsBlockedTimeoutRequest`, are used to determine the type of blocked request within a single command function, allowing for consolidated reply and timeout handling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_IsBlockedReplyRequest(RedisModuleCtx *ctx);\n    int RedisModule_IsBlockedTimeoutRequest(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Lua to RESP2 conversion with float and nils\nDESCRIPTION: This example demonstrates how floats and arrays containing nil values are handled during Lua to RESP2 data type conversion.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_21\n\nLANGUAGE: Lua\nCODE:\n```\nredis> EVAL \"return { 1, 2, 3.3333, somekey = 'somevalue', 'foo', nil , 'bar' }\" 0\n1) (integer) 1\n2) (integer) 2\n3) (integer) 3\n4) \"foo\"\n```\n\n----------------------------------------\n\nTITLE: iojob Structure Definition for Redis Threaded VM (C)\nDESCRIPTION: This code defines the `iojob` structure used for communication between the main Redis thread and I/O threads in the threaded VM implementation. It encapsulates information about the I/O request, including the request type, Redis database, key and value objects, swap page details, and cancellation status. This structure is crucial for managing asynchronous swapping operations.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-vm.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct iojob {\n    int type;   /* Request type, REDIS_IOJOB_* */\n    redisDb *db;/* Redis database */\n    robj *key;  /* This I/O request is about swapping this key */\n    robj *val;  /* the value to swap for REDIS_IOREQ_*_SWAP, otherwise this\n                 * field is populated by the I/O thread for REDIS_IOREQ_LOAD. */\n    off_t page; /* Swap page where to read/write the object */\n    off_t pages; /* Swap pages needed to save object. PREPARE_SWAP return val */\n    int canceled; /* True if this command was canceled by blocking side of VM */\n    pthread_t thread; /* ID of the thread processing this entry */\n} iojob;\n```\n\n----------------------------------------\n\nTITLE: Set Unblock Handler for Promise Reply - C\nDESCRIPTION: Sets an unblock handler (callback and private data) on a promise RedisModuleCallReply.  The reply must be of the promise type (REDISMODULE_REPLY_PROMISE).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_155\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_CallReplyPromiseSetUnblockHandler(RedisModuleCallReply *reply,\n                                                       RedisModuleOnUnblocked on_unblock,\n                                                       void *private_data);\n```\n\n----------------------------------------\n\nTITLE: Checking End of Redis Sorted Set Range Iteration\nDESCRIPTION: This function returns a flag indicating if the end of the sorted set range has been reached during iteration.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_121\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ZsetRangeEndReached(RedisModuleKey *key);\n```\n\n----------------------------------------\n\nTITLE: Flushing All Redis Databases\nDESCRIPTION: Flushes all the databases in the Redis instance using `redis-cli`. This command is often used to start with a clean slate before running benchmarks.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli flushall\nOK\n```\n\n----------------------------------------\n\nTITLE: Calculating Hash Slot with Hash Tags in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to calculate the hash slot for a given key, taking into account the hash tag exception.  It extracts the substring between the curly braces if present and hashes only that part. If no valid hash tag is found, the entire key is hashed.  It requires the `crc16` function to be defined elsewhere.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\ndef HASH_SLOT(key)\n    s = key.index \"{\" # Find the index of the first '{'\n    if s\n        e = key.index \"}\",s+1 # Find the index of the first '}' after '{'\n        if e && e != s+1 # Check if '}' exists and is not immediately after '{'\n            key = key[s+1..e-1] # Extract the substring between '{' and '}'\n        end\n    end\n    crc16(key) % 16384 # Calculate the CRC16 hash and take modulo 16384\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Context Flags Support in Redis (C)\nDESCRIPTION: This snippet showcases how to check if specific context flags are supported by the Redis server version in use, leveraging the `RedisModule_GetContextFlagsAll` function.  It gets the full ContextFlags mask and uses a bitwise AND to check flag support.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_296\n\nLANGUAGE: c\nCODE:\n```\n       int supportedFlags = RedisModule_GetContextFlagsAll();\n       if (supportedFlags & REDISMODULE_CTX_FLAGS_MULTI) {\n             // REDISMODULE_CTX_FLAGS_MULTI is supported\n       } else{\n             // REDISMODULE_CTX_FLAGS_MULTI is not supported\n       }\n```\n\n----------------------------------------\n\nTITLE: Null Encoding in RESP3\nDESCRIPTION: This snippet demonstrates how the null data type is encoded in RESP3 using an underscore character followed by a CRLF terminator.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n_\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Composite Index by Lexicographical Range\nDESCRIPTION: Demonstrates how to query a composite index for a range of values. The query is based on the lexicographical order.  In this example, it retrieves products within a specific room and price range.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_18\n\nLANGUAGE: redis\nCODE:\n```\nZRANGE myindex [0056:0010.00 [0056:0030.00 BYLEX\n```\n\n----------------------------------------\n\nTITLE: Redis Sentinel: Get Replicas and Sentinels Information\nDESCRIPTION: These commands are used to obtain information about the replicas connected to the master and the other Sentinels monitoring the same master set.  'mymaster' is the name of the master set being monitored.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/sentinel.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nSENTINEL replicas mymaster\nSENTINEL sentinels mymaster\n```\n\n----------------------------------------\n\nTITLE: Timeout Callback Function (C)\nDESCRIPTION: This is a timeout callback function that sends a NULL reply to the client if the blocking operation times out. It's invoked automatically by Redis after the specified timeout has elapsed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-blocking-ops.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint timeout_func(RedisModuleCtx *ctx, RedisModuleString **argv,\n                   int argc)\n    {\n        return RedisModule_ReplyWithNull(ctx);\n    }\n```\n\n----------------------------------------\n\nTITLE: RedisInsight Deployment YAML without Service\nDESCRIPTION: This YAML configuration file defines a Kubernetes deployment for RedisInsight without creating a service. It sets the `RI_APP_HOST` and `RI_APP_PORT` environment variables to override any potential service-related environment variables and includes a liveness probe to ensure the container is running correctly.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/install/install-redisinsight/install-on-k8s.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redisinsight #deployment name\n  labels:\n    app: redisinsight #deployment label\nspec:\n  replicas: 1 #a single replica pod\n  selector:\n    matchLabels:\n      app: redisinsight #which pods is the deployment managing, as defined by the pod template\n  template: #pod template\n    metadata:\n      labels:\n        app: redisinsight #label for pod/s\n    spec:\n      containers:\n      - name:  redisinsight #Container name (DNS_LABEL, unique)\n        image: redis/redisinsight:latest #repo/image\n        imagePullPolicy: IfNotPresent #Always pull image\n        env:\n          # If there's a service named 'redisinsight' that exposes the\n          # deployment, we manually set `RI_APP_HOST` and\n          # `RI_APP_PORT` to override the service environment\n          # variables.\n          - name: RI_APP_HOST\n            value: \"0.0.0.0\"\n          - name: RI_APP_PORT\n            value: \"5540\"\n        volumeMounts:\n        - name: redisinsight #Pod volumes to mount into the container's filesystem. Cannot be updated.\n          mountPath: /data\n        ports:\n        - containerPort: 5540 #exposed container port and protocol\n          protocol: TCP\n      livenessProbe:\n           httpGet:\n              path : /healthcheck/ # exposed RI endpoint for healthcheck\n              port: 5540 # exposed container port\n           initialDelaySeconds: 5 # number of seconds to wait after the container starts to perform liveness probe\n           periodSeconds: 5 # period in seconds after which liveness probe is performed\n           failureThreshold: 1 # number of liveness probe failures after which container restarts\n      volumes:\n      - name: redisinsight\n        emptyDir: {} # node-ephemeral volume https://kubernetes.io/docs/concepts/storage/volumes/#emptydir\n```\n\n----------------------------------------\n\nTITLE: Setting RESP Version with redis.setresp in Lua\nDESCRIPTION: Switches the Redis Serialization Protocol (RESP) version for replies returned by `redis.call()` and `redis.pcall()`. Takes a single numerical argument representing the protocol version (e.g., 3 for RESP3). Available since Redis 6.0.0.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_12\n\nLANGUAGE: Lua\nCODE:\n```\nredis.setresp(3)\n```\n\n----------------------------------------\n\nTITLE: Client HELLO Authentication Error Example\nDESCRIPTION: This example illustrates the client initiating the HELLO command with authentication credentials and the server responding with an error due to invalid credentials.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nClient: HELLO 3 AUTH default mypassword\nServer: -ERR invalid password\n```\n\n----------------------------------------\n\nTITLE: Debugging Redis Object\nDESCRIPTION: This snippet demonstrates how to use the `DEBUG OBJECT` command in Redis to inspect the internals of a key-value pair. It shows the memory addresses of the key and value objects, along with their reference counts, encoding, and serialized length. This provides insight into how Redis stores and manages data.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-vm.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nredis> set foo bar\nOK\nredis> debug object foo\nKey at:0x100101d00 refcount:1, value at:0x100101ce0 refcount:1 encoding:raw serializedlength:4\n```\n\n----------------------------------------\n\nTITLE: Close Key\nDESCRIPTION: Closes an opened Redis key. `RedisModule_CloseKey` closes the key. `key` is the RedisModuleKey pointer.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_CloseKey(key);\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in Redis Functions with FCALL\nDESCRIPTION: These commands test the error-handling mechanism in the `mylib` Redis Function library using the `FCALL` command. The first example calls `my_hset` with `0` key arguments, triggering the 'Hash key name not provided' error. The second calls `my_hgetall` with `2` key arguments, resulting in the 'Only one key name is allowed' error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/functions-intro.md#_snippet_11\n\nLANGUAGE: redis\nCODE:\n```\n127.0.0.1:6379> FCALL my_hset 0 myhash nope nope\n127.0.0.1:6379> FCALL my_hgetall 2 myhash anotherone\n```\n\n----------------------------------------\n\nTITLE: Getting Indices of Matching Subsequences in Redis\nDESCRIPTION: This example demonstrates how to get the start and end positions of the matching subsequences within the two strings using the `IDX` option of the LCS command. The output includes the \"matches\" array and the total length of the LCS. The positions are returned in reverse order of discovery.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lcs.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> LCS key1 key2 IDX\n1) \"matches\"\n2) 1) 1) 1) (integer) 4\n         2) (integer) 7\n      2) 1) (integer) 5\n         2) (integer) 8\n   2) 1) 1) (integer) 2\n         2) (integer) 3\n      2) 1) (integer) 0\n         2) (integer) 1\n3) \"len\"\n4) (integer) 6\n```\n\n----------------------------------------\n\nTITLE: Setting ACL Categories for Redis Command in C\nDESCRIPTION: This code snippet shows how to set ACL categories for Redis module commands or subcommands using `RedisModule_SetCommandACLCategories`.  It demonstrates setting 'write' and 'slow' ACL flags for a command. The function takes the command and a space-separated string of ACL flags as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n/* Example, the acl flags 'write slow' marks the command as part of the write and \n * slow ACL categories.\n */\n```\n\n----------------------------------------\n\nTITLE: Wire Protocol Example: Publishing a Message in Redis (Text)\nDESCRIPTION: This is an example of how publishing a message in Redis looks over the wire protocol. It shows the command to `PUBLISH` a message to a specific channel, as well as what the subscribed client receives in response.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/pubsub.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> PUBLISH second Hello\n```\n\n----------------------------------------\n\nTITLE: Releasing the Server Lock - RedisModule_ThreadSafeContextUnlock\nDESCRIPTION: Releases the server lock after a thread-safe API call was executed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_212\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ThreadSafeContextUnlock(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Enable Software Watchdog via CONFIG SET - Redis\nDESCRIPTION: This command enables the software watchdog in Redis and sets the monitoring period. The `watchdog-period` parameter specifies the interval (in milliseconds) at which Redis checks for latency issues.  A value of 500 milliseconds is set in the example. The minimum configurable period is 200 milliseconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_13\n\nLANGUAGE: Redis\nCODE:\n```\nCONFIG SET watchdog-period 500\n```\n\n----------------------------------------\n\nTITLE: Benchmarking a Specific Redis Command\nDESCRIPTION: Executes the `redis-benchmark` utility to benchmark a specific Redis command (script load) in quiet mode, sending 100,000 requests. Requires a running Redis instance.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/benchmarks/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-benchmark -n 100000 -q script load \"redis.call('set','foo','bar')\"\nscript load redis.call('set','foo','bar'): 69881.20 requests per second\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes in C\nDESCRIPTION: Generates random bytes using SHA1 in counter mode with a /dev/urandom initialized seed.  Not thread-safe.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_261\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_GetRandomBytes(unsigned char *dst, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Archiving perf Data for Sharing\nDESCRIPTION: This command archives the perf.data file along with all object files with build-ids found in the record data file. This allows analysis of the perf.data contents on a different machine. It relies on the perf-archive.sh script.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ perf-archive.sh perf.data\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ tar xvf perf.data.tar.bz2 -C ~/.debug\n```\n\n----------------------------------------\n\nTITLE: Bulk Error Encoding in RESP\nDESCRIPTION: This snippet describes the encoding of bulk errors in RESP. It starts with an exclamation mark (!), the error message length, a CRLF, the error message, and a final CRLF.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n!<length>\\r\\n<error>\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Defrag Should Stop - C\nDESCRIPTION: Determines whether the defrag callback should stop its work. During complex structure iteration, this function should be called periodically. Returns 0 (false) if the callback can continue, and a non-zero value (true) if it should stop.  If stopped, the callback may use `RedisModule_DefragCursorSet` to store its position.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_304\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DefragShouldStop(RedisModuleDefragCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Ending Digest Sequence (RedisModule_DigestEndSequence)\nDESCRIPTION: This function signals the end of a sequence of elements added to the digest using `RedisModule_DigestAddStringBuffer` or `RedisModule_DigestAddLongLong`. It's part of the DEBUG DIGEST interface for module types.  See the documentation for `RedisModule_DigestAddStringBuffer()` for details.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_180\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_DigestEndSequence(RedisModuleDigest *md);\n```\n\n----------------------------------------\n\nTITLE: Listing Redis ACL Categories\nDESCRIPTION: This snippet demonstrates the output of the `ACL CAT` command, which lists all available ACL categories in Redis.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n> ACL CAT\n1) \"keyspace\"\n2) \"read\"\n3) \"write\"\n4) \"set\"\n5) \"sortedset\"\n6) \"list\"\n7) \"hash\"\n8) \"string\"\n9) \"bitmap\"\n10) \"hyperloglog\"\n11) \"geo\"\n12) \"stream\"\n13) \"pubsub\"\n14) \"admin\"\n15) \"fast\"\n16) \"slow\"\n17) \"blocking\"\n18) \"dangerous\"\n19) \"connection\"\n20) \"transaction\"\n21) \"scripting\"\n```\n\n----------------------------------------\n\nTITLE: Observing Events using redis-cli in another terminal\nDESCRIPTION: This snippet illustrates how to observe keyspace events generated by commands executed in another `redis-cli` terminal. The output shows the event type and the key affected.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace-notifications.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"pmessage\",\"__key*__:*\",\"__keyspace@0__:foo\",\"set\"\n\"pmessage\",\"__key*__:*\",\"__keyevent@0__:set\",\"foo\"\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying Key Position using RedisModule_KeyAtPos (C)\nDESCRIPTION: This deprecated function is used to report the position of a key within a module command that was declared with the \"getkeys-api\" flag. It's called when the command is being invoked to determine key positions. Use [`RedisModule_KeyAtPosWithFlags`](#RedisModule_KeyAtPosWithFlags) instead.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_KeyAtPos(RedisModuleCtx *ctx, int pos);\n```\n\n----------------------------------------\n\nTITLE: Defrag Cursor Set - C\nDESCRIPTION: Stores an arbitrary cursor value for later use by the defrag callback. It should only be called if `RedisModule_DefragShouldStop` returns a non-zero value and the callback is exiting without fully iterating its data type. Returns `REDISMODULE_OK` on success, and `REDISMODULE_ERR` if not called during a late defrag operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_305\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DefragCursorSet(RedisModuleDefragCtx *ctx,\n                                    unsigned long cursor);\n```\n\n----------------------------------------\n\nTITLE: Getting Server Info Field as double in C\nDESCRIPTION: Retrieves a numerical field from server information data as a double. If the field is not found or is invalid, it returns 0 and sets `out_err` to `REDISMODULE_ERR` if provided.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_260\n\nLANGUAGE: C\nCODE:\n```\ndouble RedisModule_ServerInfoGetFieldDouble(RedisModuleServerInfoData *data,\n                                                const char* field,\n                                                int *out_err);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Members of a Redis Set (SMEMBERS)\nDESCRIPTION: This snippet shows the `SMEMBERS` command, which retrieves all members of a Redis Set. The order of the returned elements is not guaranteed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nSMEMBERS myset => bar,a,foo,b\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Certificate\nDESCRIPTION: This function retrieves the X.509 client-side certificate used for authentication. It returns a `RedisModuleString` containing the certificate in PEM format or NULL if the connection ID doesn't exist, is not a TLS connection, or no client certificate was used. The returned string must be freed by the caller.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_239\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_GetClientCertificate(RedisModuleCtx *ctx,\n                                                        uint64_t client_id);\n```\n\n----------------------------------------\n\nTITLE: Attach GDB to a running Redis process\nDESCRIPTION: This command attaches the GNU Debugger (GDB) to a running Redis server process.  It requires the path to the Redis executable and the process ID (PID) of the Redis instance. Replace `<path-to-redis-executable>` and `<pid>` with the actual path and PID, respectively.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gdb <path-to-redis-executable> <pid>\n\nFor example:\n\n$ gdb /usr/local/bin/redis-server 58414\n```\n\n----------------------------------------\n\nTITLE: Adding another stream entry\nDESCRIPTION: Adds another new entry to the `race:france` stream with different racer data. Similar to the previous example, the `*` indicates auto-generated ID, and the command returns the generated ID.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/streams.md#_snippet_1\n\nLANGUAGE: redis\nCODE:\n```\nXADD race:france * rider Norem speed 28.8 position 3 location_id 1\n```\n\n----------------------------------------\n\nTITLE: Non-Atomic Increment Example\nDESCRIPTION: This code shows the race condition that occurs when trying to increment a value without using an atomic operation.  Multiple clients reading, incrementing, and then setting the value can lead to data loss.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nx = GET foo (yields 10)\ny = GET foo (yields 10)\nx = x + 1 (x is now 11)\ny = y + 1 (y is now 11)\nSET foo x (foo is now 11)\nSET foo y (foo is now 11)\n```\n\n----------------------------------------\n\nTITLE: Getting Target Key Name from Optional Context (C)\nDESCRIPTION: Returns the name of the target key currently being processed, retrieved from the RedisModuleKeyOptCtx. Requires a RedisModuleKeyOptCtx pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_104\n\nLANGUAGE: C\nCODE:\n```\nconst RedisModuleString *RedisModule_GetToKeyNameFromOptCtx(RedisModuleKeyOptCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Listing ACLs after Incremental Additions\nDESCRIPTION: This snippet shows the ACL LIST command reflecting the combined permissions granted by previous ACL SETUSER calls.  User 'myuser' now has both +get and +set permissions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n> ACL LIST\n1) \"user default on nopass ~* &* +@all\"\n2) \"user myuser off resetchannels -@all +get +set\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Lexicographical Index using ZRANGE (Redis)\nDESCRIPTION: This snippet shows how to query a Redis sorted set, acting as a lexicographical index, using the `ZRANGE` command with the `BYLEX` option. It demonstrates fetching elements between 'a' (inclusive) and 'b' (exclusive), and elements greater than or equal to 'b'. Note the use of '[' and '(' for inclusive/exclusive ranges, and '-' and '+' for negative and positive infinity.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/indexes/index.md#_snippet_5\n\nLANGUAGE: Redis\nCODE:\n```\nZRANGE myindex [a (b BYLEX\nZRANGE myindex [b + BYLEX\n```\n\n----------------------------------------\n\nTITLE: RedisModuleLoadingProgress Structure (C)\nDESCRIPTION: This code defines the structure `RedisModuleLoadingProgress` which can be cast from the `data` argument provided during the `RedisModuleEvent_LoadingProgress` event. The fields included in the structure provide the aproximate number of loading events per second via `hz` and the approximate progress made on loading via `progress`. The progress is between 0 and 1024, or -1 if unknown\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_289\n\nLANGUAGE: c\nCODE:\n```\nint32_t hz;  // Approximate number of events per second.\n        int32_t progress;  // Approximate progress between 0 and 1024,\n                           // or -1 if unknown.\n```\n\n----------------------------------------\n\nTITLE: SDIFFSTORE Example in Redis CLI\nDESCRIPTION: This example demonstrates the usage of the SDIFFSTORE command. It first adds elements to two sets, key1 and key2. Then, it calculates the difference between key1 and key2 and stores the result in a set named 'key'. Finally, it retrieves the members of the resulting set 'key'.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sdiffstore.md#_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nSADD key1 \"a\"\nSADD key1 \"b\"\nSADD key1 \"c\"\nSADD key2 \"c\"\nSADD key2 \"d\"\nSADD key2 \"e\"\nSDIFFSTORE key key1 key2\nSMEMBERS key\n```\n\n----------------------------------------\n\nTITLE: Publish Keyspace Notification Example\nDESCRIPTION: This example demonstrates the publication of a key-space notification when a DEL operation targets the key named 'mykey' in database '0'. It shows the `PUBLISH` command with the `__keyspace@0__:mykey` channel and the `del` message.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/keyspace-notifications.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPUBLISH __keyspace@0__:mykey del\n```\n\n----------------------------------------\n\nTITLE: Destroying Scan Cursor in Redis Module (C)\nDESCRIPTION: This function destroys a scan cursor that was created with `RedisModule_ScanCursorCreate`. It releases the memory allocated for the cursor. Failure to destroy the cursor will result in a memory leak.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_280\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_ScanCursorDestroy(RedisModuleScanCursor *cursor);\n```\n\n----------------------------------------\n\nTITLE: Getting Call Reply Length - C\nDESCRIPTION: Returns the length of a RedisModuleCallReply, applicable for string, array, and other types where length is relevant.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_144\n\nLANGUAGE: C\nCODE:\n```\nsize_t RedisModule_CallReplyLength(RedisModuleCallReply *reply);\n```\n\n----------------------------------------\n\nTITLE: Array with Null Element Encoding in RESP\nDESCRIPTION: This snippet shows an array that contains a null bulk string as one of its elements, represented by `$-1\\r\\n`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n*3\\r\\n$5\\r\\nhello\\r\\n$-1\\r\\n$5\\r\\nworld\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Call Count Analysis with bcc/BPF funccount\nDESCRIPTION: This command uses the bcc/BPF funccount tool to count the number of times specific functions related to calls, reads, and writes are called within the redis-server process. It traces functions matching the provided pattern for a duration of 60 seconds.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/cpu-profiling.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ /usr/share/bcc/tools/funccount 'redis-server:(call*|*Read*|*Write*)' --pid $(pgrep redis-server) --duration 60\n```\n\n----------------------------------------\n\nTITLE: Empty String Encoding in RESP\nDESCRIPTION: This snippet demonstrates how an empty string is encoded in RESP. The length is 0, and the content between terminators is empty.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$0\\r\\n\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Create a Redis Module String from unsigned long long (C)\nDESCRIPTION: This code snippet shows how to create a Redis module string object from an unsigned long long integer. The resulting string must be released using RedisModule_FreeString or by enabling automatic memory management.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_CreateStringFromULongLong(RedisModuleCtx *ctx,\n                                                             unsigned long long ull);\n```\n\n----------------------------------------\n\nTITLE: Declare Local Variable and Function in Redis Lua\nDESCRIPTION: This code snippet demonstrates the correct way to declare a local variable and a local function in a Redis Lua script. The 'local' keyword is required to define variables and functions within the sandboxed environment. This ensures that no global state is unintentionally modified.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal my_local_variable = 'some value'\n\nlocal function my_local_function()\n  -- Do something else, but equally amazing\nend\n```\n\n----------------------------------------\n\nTITLE: GPG Public Key Block\nDESCRIPTION: This code snippet contains the ASCII armored representation of the Redis Labs GPG public key. It is used to verify signatures from Redis Labs to ensure authenticity and integrity of software and communications. The key needs to be imported into a GPG keyring before it can be used for verification.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/_index.md#_snippet_3\n\nLANGUAGE: gpg\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBF9FWioBEADfBiOE/iKpj2EF/cJ/KzFX+jSBKa8SKrE/9RE0faVF6OYnqstL\nS5ox/o+yT45FdfFiRNDflKenjFbOmCbAdIys9Ta0iq6I9hs4sKfkNfNVlKZWtSVG\nW4lI6zO2Zyc2wLZonI+Q32dDiXWNcCEsmajFcddukPevj9vKMTJZtF79P2SylEPq\nmUuhMy/jOt7q1ibJCj5srtaureBH9662t4IJMFjsEe+hiZ5v071UiQA6Tp7rxLqZ\nO6ZRzuamFP3xfy2Lz5NQ7QwnBH1ROabhJPoBOKCATCbfgFcM1Rj+9AOGfoDCOJKH\n7yiEezMqr9VbDrEmYSmCO4KheqwC0T06lOLIQC4nnwKopNO/PN21mirCLHvfo01O\nH/NUG1LZifOwAURbiFNF8Z3+L0csdhD8JnO+1nphjDHr0Xn9Vff2Vej030pRI/9C\nSJ2s5fZUq8jK4n06sKCbqA4pekpbKyhRy3iuITKv7Nxesl4T/uhkc9ccpAvbuD1E\nNczN1IH05jiMUMM3lC1A9TSvxSqflqI46TZU3qWLa9yg45kDC8Ryr39TY37LscQk\n9x3WwLLkuHeUurnwAk46fSj7+FCKTGTdPVw8v7XbvNOTDf8vJ3o2PxX1uh2P2BHs\n9L+E1P96oMkiEy1ug7gu8V+mKu5PAuD3QFzU3XCB93DpDakgtznRRXCkAQARAQAB\ntBtSZWRpcyBMYWJzIDxyZWRpc0ByZWRpcy5pbz6JAk4EEwEKADgWIQR5sNCo1OBf\nWO913l22qvOUq0evbgUCX0VaKgIbAwULCQgHAgYVCgkICwIEFgIDAQIeAQIXgAAK\nCRC2qvOUq0evbpZaD/4rN7xesDcAG4ec895Fqzk3w74W1/K9lzRKZDwRsAqI+sAz\nZXvQMtWSxLfF2BITxLnHJXK5P+2Y6XlNgrn1GYwC1MsARyM9e1AzwDJHcXFkHU82\n2aALIMXGtiZs/ejFh9ZSs5cgRlxBSqot/uxXm9AvKEByhmIeHPZse/Rc6e3qa57v\nOhCkVZB4ETx5iZrgA+gdmS8N7MXG0cEu5gJLacG57MHi+2WMOCU9Xfj6+Pqhw3qc\nE6lBinKcA/LdgUJ1onK0JCnOG1YVHjuFtaisfPXvEmUBGaSGE6lM4J7lass/OWps\nDd+oHCGI+VOGNx6AiBDZG8mZacu0/7goRnOTdljJ93rKkj31I+6+j4xzkAC0IXW8\nLAP9Mmo9TGx0L5CaljykhW6z/RK3qd7dAYE+i7e8J9PuQaGG5pjFzuW4vY45j0V/\n9JUMKDaGbU5choGqsCpAVtAMFfIBj3UQ5LCt5zKyescKCUb9uifOLeeQ1vay3R9o\neRSD52YpRBpor0AyYxcLur/pkHB0sSvXEfRZENQTohpY71rHSaFd3q1Hkk7lZl95\nm24NRlrJnjFmeSPKP22vqUYIwoGNUF/D38UzvqHD8ltTPgkZc+Y+RRbVNqkQYiwW\nGH/DigNB8r2sdkt+1EUu+YkYosxtzxpxxpYGKXYXx0uf+EZmRqRt/OSHKnf2GLkC\nDQRfRVoqARAApffsrDNo4JWjX3r6wHJJ8IpwnGEJ2IzGkg8f1Ofk2uKrjkII/oIx\nsXC3EeauC1Plhs+m9GP/SPY0LXmZ0OzGD/S1yMpmBeBuXJ0gONDo+xCg1pKGshPs\n75XzpbggSOtEYR5S8Z46yCu7TGJRXBMGBhDgCfPVFBBNsnG5B0EeHXM4trqqlN6d\nPAcwtLnKPz/Z+lloKR6bFXvYGuN5vjRXjcVYZLLCEwdV9iY5/Opqk9sCluasb3t/\nc2gcsLWWFnNz2desvb/Y4ADJzxY+Um848DSR8IcdoArSsqmcCTiYvYC/UU7XPVNk\nJrx/HwgTVYiLGbtMB3u3fUpHW8SabdHc4xG3sx0LeIvl+JwHgx7yVhNYJEyOQfnE\nmfS97x6surXgTVLbWVjXKIJhoWnWbLP4NkBc27H4qo8wM/IWH4SSXYNzFLlCDPnw\nvQZSel21qxdqAWaSxkKcymfMS4nVDhVj0jhlcTY3aZcHMjqoUB07p5+laJr9CCGv\n0Y0j0qT2aUO22A3kbv6H9c1Yjv8EI7eNz07aoH1oYU6ShsiaLfIqPfGYb7LwOFWi\nPSl0dCY7WJg2H6UHsV/y2DwRr/3oH0a9hv/cvcMneMi3tpIkRwYFBPXEsIcoD9xr\nRI5dp8BBdO/Nt+puoQq9oyialWnQK5+AY7ErW1yxjgie4PQ+XtN+85UAEQEAAYkC\nNgQYAQoAIBYhBHmw0KjU4F9Y73XeXbaq85SrR69uBQJfRVoqAhsMAAoJELaq85Sr\nR69uoV0QAIvlxAHYTjvH1lt5KbpVGs5gwIAnCMPxmaOXcaZ8V0Z1GEU+/IztwV+N\nMYCBv1tYa7OppNs1pn75DhzoNAi+XQOVvU0OZgVJutthZe0fNDFGG9B4i/cxRscI\nLd8TPQQNiZPBZ4ubcxbZyBinE9HsYUM49otHjsyFZ0GqTpyne+zBf1GAQoekxlKo\ntWSkkmW0x4qW6eiAmyo5lPS1bBjvaSc67i+6Bv5QkZa0UIkRqAzKN4zVvc2FyILz\n+7wVLCzWcXrJt8dOeS6Y/Fjbhb6m7dtapUSETAKu6wJvSd9ndDUjFHD33NQIZ/nL\nWaPbn01+e/PHtUDmyZ2W2KbcdlIT9nb2uHrruqdCN04sXkID8E2m2gYMA+TjhC0Q\nJBJ9WPmdBeKH91R6wWDq6+HwOpgc/9na+BHZXMG+qyEcvNHB5RJdiu2r1Haf6gHi\nFd6rJ6VzaVwnmKmUSKA2wHUuUJ6oxVJ1nFb7Aaschq8F79TAfee0iaGe9cP+xUHL\nzBDKwZ9PtyGfdBp1qNOb94sfEasWPftT26rLgKPFcroCSR2QCK5qHsMNCZL+u71w\nnTtq9YZDRaQ2JAc6VDZCcgu+dLiFxVIi1PFcJQ31rVe16+AQ9zsafiNsxkPdZcY\nU9XKndQE028dGZv1E3S5BwpnikrUkWdxcYrVZ4fiNIy5I3My2yCe\n=J9BD\n-----END PGP PUBLIC KEY BLOCK-----\n\n```\n\n----------------------------------------\n\nTITLE: Scanning with TYPE option in Redis\nDESCRIPTION: This snippet demonstrates the usage of the `TYPE` option with the `SCAN` command in Redis.  It shows how to filter keys based on their data type (zset in this example). Note that some Redis types may be internally implemented using other types.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/scan.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nredis 127.0.0.1:6379> GEOADD geokey 0 0 value\n(integer) 1\nredis 127.0.0.1:6379> ZADD zkey 1000 value\n(integer) 1\nredis 127.0.0.1:6379> TYPE geokey\nzset\nredis 127.0.0.1:6379> TYPE zkey\nzset\nredis 127.0.0.1:6379> SCAN 0 TYPE zset\n1) \"0\"\n2) 1) \"geokey\"\n   2) \"zkey\"\n```\n\n----------------------------------------\n\nTITLE: Calculate Swappability in Redis VM (C)\nDESCRIPTION: This snippet calculates the 'swappability' of an object in Redis VM. It multiplies the age of the key (time since last access) by the logarithm of its size in memory. The goal is to prioritize swapping out older, larger objects, but with a reduced emphasis on size due to the logarithmic scaling.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-vm.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nswappability = age*log(size_in_memory)\n```\n\n----------------------------------------\n\nTITLE: Example Error Replies\nDESCRIPTION: Shows examples of error replies from Redis, including 'ERR' for unknown commands and 'WRONGTYPE' for operations against the wrong data type. The error prefix (e.g., 'ERR', 'WRONGTYPE') allows clients to understand the type of error without parsing the whole message.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-ERR unknown command 'asdf'\n-WRONGTYPE Operation against a key holding the wrong kind of value\n```\n\n----------------------------------------\n\nTITLE: Simulate segmentation fault\nDESCRIPTION: This command triggers a segmentation fault in Redis, useful for testing crash handling during debugging.  It is important to avoid using this command in a production environment as it will intentionally crash the Redis server.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/debugging.md#_snippet_3\n\nLANGUAGE: redis\nCODE:\n```\nDEBUG SEGFAULT\n```\n\n----------------------------------------\n\nTITLE: Adding Members to a Sorted Set with ZADD - Redis\nDESCRIPTION: This example demonstrates how to add members with associated scores to a Redis sorted set using the `ZADD` command. It showcases adding single and multiple members with their respective scores. `ZADD` is similar to `SADD`, but takes one additional argument, the score, placed before the element to be added.  It returns the number of elements added.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/data-types/sorted-sets.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> ZADD racer_scores 10 \"Norem\"\n(integer) 1\n> ZADD racer_scores 12 \"Castilla\"\n(integer) 1\n> ZADD racer_scores 8 \"Sam-Bodden\" 10 \"Royce\" 6 \"Ford\" 14 \"Prickett\"\n(integer) 4\n```\n\n----------------------------------------\n\nTITLE: Spellchecker Installation\nDESCRIPTION: This bash command installs the spellchecker-cli package globally using npm. This package is used to validate the spelling and grammar of the documentation after modifications.\nSOURCE: https://github.com/redis/redis-doc/blob/master/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --global spellchecker-cli\n```\n\n----------------------------------------\n\nTITLE: Enabling Effects Replication with redis.replicate_commands in Lua\nDESCRIPTION: Switches the script's replication mode from verbatim replication to effects replication, available until Redis version 7.0. As of Redis v7.0, verbatim script replication is no longer supported.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/interact/programmability/lua-api.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Replacing Argument in Filtered Command in Redis Module (C)\nDESCRIPTION: This function replaces an existing argument in a filtered command with a new one at a specific position. It takes a `RedisModuleCommandFilterCtx`, the position of the argument to replace (`int pos`), and the new `RedisModuleString` argument. The provided `RedisModuleString` should be manually managed to avoid issues after filter execution.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_270\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_CommandFilterArgReplace(RedisModuleCommandFilterCtx *fctx,\n                                            int pos,\n                                            RedisModuleString *arg);\n```\n\n----------------------------------------\n\nTITLE: Double Encoding Example in RESP\nDESCRIPTION: This snippet demonstrates how the number 1.23 is encoded as a double in RESP.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n,1.23\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Itself with GET in Redis\nDESCRIPTION: This snippet demonstrates how to retrieve the element itself along with external keys using the `#` pattern with the `GET` option.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/sort.md#_snippet_8\n\nLANGUAGE: redis\nCODE:\n```\nSORT mylist BY weight_* GET object_* GET #\n```\n\n----------------------------------------\n\nTITLE: Nested Array Encoding in RESP\nDESCRIPTION: This snippet demonstrates the encoding of nested arrays in RESP, where an array contains other arrays as elements. It includes an array of integers and an array of a simple string and an error.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n*2\\r\\n*3\\r\\n:1\\r\\n:2\\r\\n:3\\r\\n*2\\r\\n+Hello\\r\\n-World\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Safe Lock Release in Redis\nDESCRIPTION: This Lua script is used to safely release a lock in Redis by verifying that the value of the key matches the provided token. This prevents accidental lock release by a different client after the original lock has expired.  Dependencies: Running Redis server with Lua scripting enabled.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/set.md#_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1]\nthen\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Commands in the 'geo' Redis ACL Category\nDESCRIPTION: This snippet provides an example of the `ACL CAT geo` command output, showcasing the commands belonging to the 'geo' category.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/security/acl.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n> ACL CAT geo\n1) \"geohash\"\n2) \"georadius_ro\"\n3) \"georadiusbymember\"\n4) \"geopos\"\n5) \"geoadd\"\n6) \"georadiusbymember_ro\"\n7) \"geodist\"\n8) \"georadius\"\n9) \"geosearch\"\n10) \"geosearchstore\"\n```\n\n----------------------------------------\n\nTITLE: CLUSTER SETSLOT STABLE Example\nDESCRIPTION: This subcommand clears the migrating and importing states from a slot. It's primarily used to fix clusters stuck in an incorrect state. The states are normally cleared automatically using `SETSLOT ... NODE ...` after resharding.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/cluster-setslot.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCLUSTER SETSLOT `<slot>` STABLE\n```\n\n----------------------------------------\n\nTITLE: Listing Pub/Sub Shard Channels - Redis CLI\nDESCRIPTION: This example demonstrates how to list all active Pub/Sub shard channels in Redis using the `PUBSUB SHARDCHANNELS` command. No pattern is specified, so all active channels are returned. The output is a list of channel names.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/pubsub-shardchannels.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\n> PUBSUB SHARDCHANNELS\n1) \"orders\"\n```\n\n----------------------------------------\n\nTITLE: Tracing fdatasync System Calls with strace\nDESCRIPTION: This code snippet shows how to use the strace command to trace fdatasync(2) system calls performed by Redis. It helps in identifying latency issues related to AOF disk I/O. The -p option specifies the process ID of the redis-server, and the -T option shows the time spent in each system call.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/management/optimization/latency.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo strace -p $(pidof redis-server) -T -e trace=fdatasync\n```\n\n----------------------------------------\n\nTITLE: VM Object Structure Definition\nDESCRIPTION: This code snippet defines the `redisObjectVM` structure, used to store metadata about swapped-out Redis objects. It includes the page offset in the swap file, the number of pages used, and the last access time. This information is essential for locating and managing swapped objects on disk.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-vm.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* The VM object structure */\nstruct redisObjectVM {\n    off_t page;         /* the page at which the object is stored on disk */\n    off_t usedpages;    /* number of pages used on disk */\n    time_t atime;       /* Last access time */\n} vm;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Fields in a Redis Hash (HMSET)\nDESCRIPTION: This snippet demonstrates the `HMSET` command in Redis, used to set multiple fields and their corresponding values within a Hash. This is similar to setting multiple properties on a single object.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/manual/patterns/twitter-clone.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nHMSET myuser name Salvatore surname Sanfilippo country Italy\n```\n\n----------------------------------------\n\nTITLE: ACL DRYRUN Example\nDESCRIPTION: This example demonstrates how to use the ACL DRYRUN command to test user permissions in Redis. It first sets permissions for a user and then simulates two commands to check if the user has the necessary permissions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/acl-dryrun.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n> ACL SETUSER VIRGINIA +SET ~*\n\"OK\"\n> ACL DRYRUN VIRGINIA SET foo bar\n\"OK\"\n> ACL DRYRUN VIRGINIA GET foo\n\"User VIRGINIA has no permissions to run the 'get' command\"\n```\n\n----------------------------------------\n\nTITLE: Executing LOLWUT Command with Version - Redis\nDESCRIPTION: Executes the LOLWUT command in Redis to display the computer art corresponding to a specific Redis version.  The version number must be provided as an argument. Other optional arguments can be added to further modify the output of the LOLWUT command for the specified version.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lolwut.md#_snippet_0\n\nLANGUAGE: Redis\nCODE:\n```\nLOLWUT VERSION 5 ... other optional arguments ...\n```\n\n----------------------------------------\n\nTITLE: Redis List Indexing Example (CLI)\nDESCRIPTION: Demonstrates how to use the LINDEX command in Redis to retrieve elements from a list using both positive and negative indices. It also shows the behavior when accessing an index that is out of range, which returns `nil`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/lindex.md#_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\nLPUSH mylist \"World\"\nLPUSH mylist \"Hello\"\nLINDEX mylist 0\nLINDEX mylist -1\nLINDEX mylist 3\n```\n\n----------------------------------------\n\nTITLE: Replicating Commands with RedisModule_Replicate - C\nDESCRIPTION: Replicates specific commands using an API similar to `RedisModule_Call()`, sending them to the AOF/replicas stream. Multiple calls are wrapped in a `MULTI/EXEC` transaction.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/_index.md#_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nRedisModule_Replicate(ctx,\"INCRBY\",\"cl\",\"foo\",my_increment);\n```\n\n----------------------------------------\n\nTITLE: Create File Event in Redis\nDESCRIPTION: Demonstrates how `aeCreateFileEvent` is called from `redis.c:initServer` to monitor the listening descriptor for incoming client connections. It sets up the event loop to call `acceptHandler` when a new connection is ready to be accepted.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/internals/internals-rediseventlib.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nif (aeCreateFileEvent(server.el, c->fd, AE_READABLE,\n        readQueryFromClient, c) == AE_ERR) {\n        freeClient(c);\n        return NULL;\n    }\n```\n\n----------------------------------------\n\nTITLE: Read-Only Script Error Handling (EVAL_RO)\nDESCRIPTION: Demonstrates the error that occurs when attempting to execute a write command (DEL) within a read-only script using EVAL_RO. The script attempts to delete the key 'mykey', resulting in an error indicating that write commands are not allowed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/eval_ro.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\n> EVAL_RO \"return redis.call('DEL', KEYS[1])\" 1 mykey\n(error) ERR Error running script (call to b0d697da25b13e49157b2c214a4033546aba2104): @user_script:1: @user_script: 1: Write commands are not allowed from read-only scripts.\n```\n\n----------------------------------------\n\nTITLE: CRC16 Calculation Function in C\nDESCRIPTION: This C function, `crc16`, calculates the CRC16 checksum of a given buffer.  It takes a pointer to the buffer (`buf`) and the length of the buffer (`len`) as input.  The function iterates through the buffer, using the XOR of the current CRC value and the current byte as an index into the pre-calculated `crc16tab` lookup table to update the CRC value.  The final CRC16 value is returned.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/cluster-spec.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nuint16_t crc16(const char *buf, int len) {\n        int counter;\n        uint16_t crc = 0;\n        for (counter = 0; counter < len; counter++)\n                crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *buf++)&0x00FF];\n        return crc;\n    }\n```\n\n----------------------------------------\n\nTITLE: Filter pending entries by idle time using XPENDING - Redis\nDESCRIPTION: These commands filter pending messages by idle time. The first command returns entries idle for over 9 seconds for the entire group. The second command filters specifically for `consumer-123`.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/xpending.md#_snippet_5\n\nLANGUAGE: redis\nCODE:\n```\n> XPENDING mystream group55 IDLE 9000 - + 10\n> XPENDING mystream group55 IDLE 9000 - + 10 consumer-123\n```\n\n----------------------------------------\n\nTITLE: Getting Verbatim String from Call Reply - C\nDESCRIPTION: Retrieves the value of a verbatim string reply, including its format. Returns a pointer to the string, its length, and the format.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_149\n\nLANGUAGE: C\nCODE:\n```\nconst char *RedisModule_CallReplyVerbatim(RedisModuleCallReply *reply,\n                                              size_t *len,\n                                              const char **format);\n```\n\n----------------------------------------\n\nTITLE: Replying with an Attribute - Redis Module API (C)\nDESCRIPTION: This code snippet demonstrates how to add attributes (metadata) to the reply using the Redis Module API. The function `RedisModule_ReplyWithAttribute` initiates the attribute reply, and subsequent `ReplyWith*` functions populate the attribute map elements. `RedisModule_ReplySetAttributeLength` is used for setting the attribute length when it is not known beforehand.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_60\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_ReplyWithAttribute(RedisModuleCtx *ctx, long len);\n```\n\n----------------------------------------\n\nTITLE: Free a Redis Module String Object (C)\nDESCRIPTION: This code snippet frees a Redis module string object that was created using one of the Redis modules API calls. This function can be called even when automatic memory management is enabled, releasing the string immediately.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_FreeString(RedisModuleCtx *ctx, RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Popping Element from a Redis List\nDESCRIPTION: This function removes and returns an element from a Redis list. The `where` argument specifies whether to pop from the head or tail of the list.  It returns a RedisModuleString, which the user is responsible for freeing. Returns NULL on failure with errno set appropriately (EINVAL, ENOTSUP, or EBADF).\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_111\n\nLANGUAGE: c\nCODE:\n```\nRedisModuleString *RedisModule_ListPop(RedisModuleKey *key, int where);\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Members from Sorted Set (Redis CLI)\nDESCRIPTION: This example demonstrates how to add members with scores to a Redis sorted set using the ZADD command, and then remove the member with the highest score using the ZPOPMAX command. It shows a basic use case of sorted set manipulation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/zpopmax.md#_snippet_0\n\nLANGUAGE: Redis CLI\nCODE:\n```\nZADD myzset 1 \"one\"\nZADD myzset 2 \"two\"\nZADD myzset 3 \"three\"\nZPOPMAX myzset\n```\n\n----------------------------------------\n\nTITLE: Deleting Argument from Filtered Command in Redis Module (C)\nDESCRIPTION: This function deletes an argument from a filtered command at the specified position. It requires a `RedisModuleCommandFilterCtx` and the position of the argument to delete (`int pos`). It returns an integer indicating the success or failure of the operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_271\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_CommandFilterArgDelete(RedisModuleCommandFilterCtx *fctx,\n                                           int pos);\n```\n\n----------------------------------------\n\nTITLE: Saving String Buffer in RDB File (RedisModule_SaveStringBuffer)\nDESCRIPTION: This function saves a C-style string buffer into the Redis RDB file. It is similar to `RedisModule_SaveString()` but takes a raw C pointer (`const char *str`) and its length (`size_t len`) as input. It should be called within the context of the `rdb_save` method of a module type.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_169\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_SaveStringBuffer(RedisModuleIO *io,\n                                      const char *str,\n                                      size_t len);\n```\n\n----------------------------------------\n\nTITLE: RedisModuleCommandArg Structure Definition\nDESCRIPTION: Defines the structure `RedisModuleCommandArg` used to represent arguments in Redis module commands. It includes fields for argument name, type, key specification index, token, summary, version since introduction, flags, and sub-arguments.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct RedisModuleCommandArg {\n    const char *name;\n    RedisModuleCommandArgType type;\n    int key_spec_index;\n    const char *token;\n    const char *summary;\n    const char *since;\n    int flags;\n    struct RedisModuleCommandArg *subargs;\n} RedisModuleCommandArg;\n```\n\n----------------------------------------\n\nTITLE: Flushing all Libraries in Redis\nDESCRIPTION: Removes all loaded libraries from Redis using the FUNCTION FLUSH command. This effectively clears all custom functions.\nSOURCE: https://github.com/redis/redis-doc/blob/master/commands/function-dump.md#_snippet_2\n\nLANGUAGE: redis\nCODE:\n```\nFUNCTION FLUSH\n```\n\n----------------------------------------\n\nTITLE: Redacting Client Command Arguments\nDESCRIPTION: This function redacts a specific argument of a client's command, obfuscating it in user-facing commands (SLOWLOG, MONITOR) and preventing it from being written to server logs. The function returns `REDISMODULE_OK` on success or `REDISMODULE_ERR` if the parameters are invalid or if the position is out of the argument range.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_238\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_RedactClientCommandArgument(RedisModuleCtx *ctx, int pos);\n```\n\n----------------------------------------\n\nTITLE: Array of Integers Encoding in RESP\nDESCRIPTION: This snippet demonstrates the encoding of an array containing three integers (1, 2, 3) in RESP format.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/protocol-spec.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n*3\\r\\n:1\\r\\n:2\\r\\n:3\\r\\n\n```\n\n----------------------------------------\n\nTITLE: Retain a Redis Module String (C)\nDESCRIPTION: This code snippet demonstrates how to retain a Redis module string object, ensuring that it persists even after the creating callback function returns. Each call to RedisModule_RetainString requires a corresponding call to RedisModule_FreeString to release the memory.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nvoid RedisModule_RetainString(RedisModuleCtx *ctx, RedisModuleString *str);\n```\n\n----------------------------------------\n\nTITLE: Set Private Data on a Blocked Client\nDESCRIPTION: This code snippet sets private data on a blocked client using `RedisModule_BlockClientSetPrivateData`. It expects a `RedisModuleBlockedClient` pointer and a `void *` representing the private data to be set. Private data can be accessed later by the reply callback and used to store information about the specific unblocking operation.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_194\n\nLANGUAGE: c\nCODE:\n```\nvoid RedisModule_BlockClientSetPrivateData(RedisModuleBlockedClient *blocked_client,\n                                               void *private_data);\n```\n\n----------------------------------------\n\nTITLE: Checking for Channels Position Request with RedisModule_IsChannelsPositionRequest (C)\nDESCRIPTION: This function checks if a module command, that was declared with the \"getchannels-api\" flag, is being called to retrieve the positions of channels, rather than to execute the command itself. It returns non-zero if it is a channels position request, and zero otherwise.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nint RedisModule_IsChannelsPositionRequest(RedisModuleCtx *ctx);\n```\n\n----------------------------------------\n\nTITLE: Setting a Key-Value Pair in a Redis Module Dictionary (C-style Key)\nDESCRIPTION: This function stores a key-value pair in the dictionary, using a C-style string for the key. It returns `REDISMODULE_OK` if the key was added successfully (did not already exist), and `REDISMODULE_ERR` if the key already existed.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_243\n\nLANGUAGE: c\nCODE:\n```\nint RedisModule_DictSetC(RedisModuleDict *d,\n                             void *key,\n                             size_t keylen,\n                             void *ptr);\n```\n\n----------------------------------------\n\nTITLE: Getting Random Key Name (C)\nDESCRIPTION: Returns the name of a random key from the current database as a RedisModuleString. Returns NULL if the database is empty. Requires a RedisModuleCtx pointer as input.\nSOURCE: https://github.com/redis/redis-doc/blob/master/docs/reference/modules/modules-api-ref.md#_snippet_102\n\nLANGUAGE: C\nCODE:\n```\nRedisModuleString *RedisModule_RandomKey(RedisModuleCtx *ctx);\n```"
  }
]