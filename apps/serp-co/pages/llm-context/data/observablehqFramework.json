[
  {
    "owner": "observablehq",
    "repo": "framework",
    "content": "TITLE: Implementing a CodeMirror Editor Component for Observable Framework\nDESCRIPTION: Defines a reusable Editor component that integrates CodeMirror with Observable Framework. The component includes JavaScript syntax highlighting, keyboard shortcuts for running code (Shift-Enter and Cmd/Ctrl-S), and a Run button. It exposes the editor's content as a standard input element value.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/codemirror/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {javascript} from \"npm:@codemirror/lang-javascript\";\nimport {EditorView, keymap} from \"npm:@codemirror/view\";\nimport {button} from \"npm:@observablehq/inputs\";\nimport {basicSetup} from \"npm:codemirror\";\n\nexport function Editor({\n  value = \"\",\n  style = \"font-size: 14px;\"\n} = {}) {\n  const parent = document.createElement(\"div\");\n  parent.style = style;\n  parent.value = value;\n\n  const run = () => {\n    parent.value = String(editor.state.doc);\n    parent.dispatchEvent(new InputEvent(\"input\", {bubbles: true}));\n  };\n\n  const editor = new EditorView({\n    parent,\n    doc: value,\n    extensions: [\n      basicSetup,\n      javascript(),\n      keymap.of([\n        {key: \"Shift-Enter\", preventDefault: true, run},\n        {key: \"Mod-s\", preventDefault: true, run}\n      ])\n    ]\n  });\n\n  parent.addEventListener(\"input\", (event) => event.isTrusted && event.stopImmediatePropagation());\n  parent.appendChild(button([[\"Run\", run]]));\n\n  return parent;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Mortgage Rate Summary Cards in JavaScript\nDESCRIPTION: This function creates a detailed HTML card for displaying mortgage rate information. It calculates various statistics, formats percentages, and generates a small chart using Plot. The function is reusable for different mortgage terms.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction frmCard(y, pmms) {\n  const key = `pmms${y}`;\n  const diff1 = pmms.at(-1)[key] - pmms.at(-2)[key];\n  const diffY = pmms.at(-1)[key] - pmms.at(-53)[key];\n  const range = d3.extent(pmms.slice(-52), (d) => d[key]);\n  const stroke = color.apply(`${y}Y FRM`);\n  return html.fragment`\n    <h2 style=\"color: ${stroke}\">${y}-year fixed-rate</h2>\n    <h1>${formatPercent(pmms.at(-1)[key])}</h1>\n    <table>\n      <tr>\n        <td>1-week change</td>\n        <td align=\"right\">${formatPercent(diff1, {signDisplay: \"always\"})}</td>\n        <td>${trend(diff1)}</td>\n      </tr>\n      <tr>\n        <td>1-year change</td>\n        <td align=\"right\">${formatPercent(diffY, {signDisplay: \"always\"})}</td>\n        <td>${trend(diffY)}</td>\n      </tr>\n      <tr>\n        <td>4-week average</td>\n        <td align=\"right\">${formatPercent(d3.mean(pmms.slice(-4), (d) => d[key]))}</td>\n      </tr>\n      <tr>\n        <td>52-week average</td>\n        <td align=\"right\">${formatPercent(d3.mean(pmms.slice(-52), (d) => d[key]))}</td>\n      </tr>\n    </table>\n    ${resize((width) =>\n      Plot.plot({\n        width,\n        height: 40,\n        axis: null,\n        x: {inset: 40},\n        marks: [\n          Plot.tickX(pmms.slice(-52), {\n            x: key,\n            stroke,\n            insetTop: 10,\n            insetBottom: 10,\n            title: (d) => `${d.date?.toLocaleDateString(\"en-us\")}: ${d[key]}%`,\n            tip: {anchor: \"bottom\"}\n          }),\n          Plot.tickX(pmms.slice(-1), {x: key, strokeWidth: 2}),\n          Plot.text([`${range[0]}%`], {frameAnchor: \"left\"}),\n          Plot.text([`${range[1]}%`], {frameAnchor: \"right\"})\n        ]\n      })\n    )}\n    <span class=\"small muted\">52-week range</span>\n  `;\n}\n\nfunction formatPercent(value, format) {\n  return value == null\n    ? \"N/A\"\n    : (value / 100).toLocaleString(\"en-US\", {minimumFractionDigits: 2, style: \"percent\", ...format});\n}\n\nfunction trend(v) {\n  return v >= 0.005 ? html`<span class=\"green\">↗︎</span>`\n    : v <= -0.005 ? html`<span class=\"red\">↘︎</span>`\n    : \"→\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using FileAttachment to Load a JSON File in JavaScript\nDESCRIPTION: Demonstrates how to use FileAttachment to load a JSON file and access its contents as a promise.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"volcano.json\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst volcano = FileAttachment(\"volcano.json\").json();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvolcano\n```\n\n----------------------------------------\n\nTITLE: Creating a React Counter Component with useState\nDESCRIPTION: Implements a button component that tracks and displays the number of times it has been clicked using React's useState hook.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  const [count, setCount] = React.useState(0);\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      You clicked {count} times\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create Bubble Chart of Dam Risk Counts - JavaScript\nDESCRIPTION: Generates a bubble chart visualizing dam risk counts based on condition and hazard potential. Dependencies include Plot.js for creating the bubble chart and styling.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst conditions = [\n  \"Not available\",\n  \"Satisfactory\",\n  \"Fair\",\n  \"Unsatisfactory\",\n  \"Poor\"\n];\n\nconst conditionsColors = [\n  \"#9498a0\",\n  \"#4269d0\",\n  \"#97bbf5\",\n  \"#efb118\",\n  \"#ff725c\"\n];\n\nconst hazardPotential = [\n    \"Undetermined\",\n    \"Low\",\n    \"Significant\",\n    \"High\"\n].reverse()\n\nfunction conditionHazardGrid(width, height) {\nreturn  Plot.plot({\n  width,\n  height: height - 30,\n  marginLeft: 100,\n  marginBottom: 40,\n  marginTop: 0,\n  grid: true,\n  x: {domain: conditions, label: \"Condition\"},\n  y: {domain: hazardPotential, label: \"Hazard potential\"},\n  r: {range: [3, 25], label: \"Number of dams\"},\n  color: {\n    domain: conditions,\n    range: conditionsColors,\n    label: \"Condition\"\n  },\n  marks: [\n    Plot.dot(dams, Plot.group({r: \"count\"}, {x: \"conditionAssessment\", y: \"hazardPotential\", fill: \"conditionAssessment\", tip: true, stroke: \"currentColor\", strokeWidth: 0.5}))\n  ]\n});\n}\n```\n\n----------------------------------------\n\nTITLE: Snowflake Connection and Query Execution Helper in TypeScript\nDESCRIPTION: This helper file provides functions for connecting to Snowflake, executing queries, and managing connections. It uses environment variables for configuration and wraps the snowflake-sdk package to simplify query execution.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-snowflake/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"dotenv/config\";\nimport type {Binds, Connection, ConnectionOptions} from \"snowflake-sdk\";\nimport snowflake from \"snowflake-sdk\";\n\nconst {\n  SNOWFLAKE_ACCOUNT,\n  SNOWFLAKE_USERNAME,\n  SNOWFLAKE_PASSWORD,\n  SNOWFLAKE_DATABASE,\n  SNOWFLAKE_SCHEMA,\n  SNOWFLAKE_WAREHOUSE,\n  SNOWFLAKE_ROLE\n} = process.env;\n\nif (!SNOWFLAKE_ACCOUNT) throw new Error(\"missing SNOWFLAKE_ACCOUNT\");\nif (!SNOWFLAKE_USERNAME) throw new Error(\"missing SNOWFLAKE_USERNAME\");\n\nconst options: ConnectionOptions = {\n  account: SNOWFLAKE_ACCOUNT,\n  username: SNOWFLAKE_USERNAME,\n  password: SNOWFLAKE_PASSWORD,\n  database: SNOWFLAKE_DATABASE,\n  schema: SNOWFLAKE_SCHEMA,\n  warehouse: SNOWFLAKE_WAREHOUSE,\n  role: SNOWFLAKE_ROLE\n};\n\nexport async function run<T>(f: (query: (sql: string, params?: Binds) => Promise<any[]>) => Promise<T>): Promise<T> {\n  const connection = await connect(options);\n  try {\n    return await f((sql, params) => execute(connection, sql, params));\n  } finally {\n    await destroy(connection);\n  }\n}\n\nasync function connect(options: ConnectionOptions): Promise<Connection> {\n  const connection = (snowflake as any).createConnection(options);\n  await new Promise<void>((resolve, reject) => {\n    connection.connect((error) => {\n      if (error) return reject(error);\n      resolve();\n    });\n  });\n  return connection;\n}\n\nasync function destroy(connection: Connection): Promise<void> {\n  await new Promise<void>((resolve, reject) => {\n    connection.destroy((error) => {\n      if (error) return reject(error);\n      resolve();\n    });\n  });\n}\n\nasync function execute(connection: Connection, sql: string, params?: Binds): Promise<any[]> {\n  return await new Promise<any[]>((resolve, reject) => {\n    connection.execute({\n      sqlText: sql,\n      binds: params,\n      complete(error, statement, rows) {\n        if (error) return reject(error);\n        resolve(rows!);\n      }\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Converting mutable operator to Mutable function in JavaScript\nDESCRIPTION: Demonstrates how to replace the Observable-specific mutable operator with the Framework Mutable function for creating reactive variables that can be assigned from other code blocks.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmutable foo = 42\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = Mutable(42);\nconst setFoo = (x) => (foo.value = x);\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-layer Interactive Dam Map with deck.gl in JavaScript\nDESCRIPTION: Configures and renders multiple visualization layers for the interactive dam map, including state boundaries, county outlines, dam locations sized by storage capacity, and capital cities. Each dam is color-coded by condition with tooltips providing detailed information.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndeckInstance.setProps({\n  layers: [\n    new GeoJsonLayer({\n      id: \"base-map\",\n      data: selectedState,\n      lineWidthMinPixels: 1.5,\n      getLineColor: [84, 84, 84],\n      getFillColor: [38, 38, 38]\n    }),\n    new GeoJsonLayer({\n      id: \"county-map\",\n      data: selectedStateCounties,\n      lineWidthMinPixels: 1.5,\n      getLineColor: [84, 84, 84],\n      getFillColor: [38, 38, 38]\n    }),\n        new ScatterplotLayer({\n          id: 'scatter-plot',\n          pickable: true,\n          data: damsSelectedState,\n          radiusScale: 0.010,\n          radiusMinPixels: 2,\n          radiusMaxPixels: 20,\n          getRadius: d => d.maxStorageAcreFt,\n          getPosition: d => [d.longitude, d.latitude, 0],\n          getFillColor: d => d.conditionAssessment == \"Not available\" ? colorRange[0] : (d.conditionAssessment == \"Satisfactory\" ? colorRange[1] : (d.conditionAssessment == \"Fair\" ? colorRange[2] : (d.conditionAssessment == \"Unsatisfactory\" ? colorRange[3] : colorRange[4]))),\n          opacity: 0.6\n        }),\n        new ScatterplotLayer({\n          id: 'scatter-plot-2',\n          data: capitalSelectedState,\n          radiusMinPixels: 8,\n          getPosition: d => [d.longitude, d.latitude],\n          getFillColor: [255, 255, 255, 255],\n          getLineWidth: 20,\n          opacity: 1\n        }),\n        new TextLayer({\n        id: \"text-layer\",\n        data: capitalSelectedState,\n        pickable: true,\n        getPosition: d => [d.longitude, d.latitude],\n        getText: d => d.description,\n        fontFamily: 'Helvetica',\n        fontWeight: 700,\n        fontSettings: ({\n          sdf: true,\n          }),\n        outlineWidth: 4,\n        getSize: 16,\n        getColor: [247,248,243, 255],\n        getTextAnchor: 'middle',\n        getAlignmentBaseline: 'center',\n        pickable: true,\n        getPixelOffset: [0, -20]\n      })\n  ],\n  getTooltip\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Choropleth Map PNG with Python and Matplotlib in Observable Framework\nDESCRIPTION: This Python script creates a choropleth map of birth rates in an Illinois county using matplotlib and outputs it as a PNG image. It's designed to be used as a data loader in Observable Framework, writing the image to standard output.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-png/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport io\nimport json\nimport sys\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load the GeoJSON data\ngdf = gpd.read_file(\"./data/illinois-counties.geojson\")\n\n# Filter for Champaign County\nchampaign = gdf[gdf[\"name\"] == \"Champaign\"]\n\n# Create the plot\nfig, ax = plt.subplots(figsize=(10, 10))\nchampaign.plot(ax=ax, edgecolor=\"black\", linewidth=0.5)\n\n# Remove axis ticks and labels\nax.set_xticks([])\nax.set_yticks([])\n\n# Add a title\nplt.title(\"Champaign County, Illinois\")\n\n# Save the plot to a BytesIO object\nbuf = io.BytesIO()\nplt.savefig(buf, format=\"png\", bbox_inches=\"tight\", pad_inches=0)\nbuf.seek(0)\n\n# Write the PNG data to stdout\nsys.stdout.buffer.write(buf.getvalue())\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing USGS Earthquake Data in Python\nDESCRIPTION: This Python script fetches earthquake data from USGS, extracts metadata and specific earthquake information, and packages it into a ZIP archive. It uses requests for API calls, pandas for data manipulation, and built-in libraries for JSON and ZIP operations.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-zip/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import libraries (must be installed)\nimport requests\nimport pandas as pd\nimport json\nimport zipfile\nimport io\nimport sys\n\n# Access earthquake data as JSON from URL:\nurl = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\"\nresponse = requests.get(url)\ngeojson_data = response.json()\n\n# Get quakes metadata in JSON format:\nearthquake_metadata = geojson_data[\"metadata\"]\nearthquake_meta_json = json.dumps(earthquake_metadata)\n\n# Create a pandas data frame with only earthquake magnitude, longitude, and latitude:\nearthquakes = []\n\nfor i in geojson_data[\"features\"]:\n    mag = i[\"properties\"][\"mag\"]\n    longitude = i[\"geometry\"][\"coordinates\"][0]\n    latitude = i[\"geometry\"][\"coordinates\"][1]\n    earthquakes.append({\"mag\": mag, \"longitude\": longitude, \"latitude\": latitude})\n\nearthquakes_df = pd.DataFrame(earthquakes)\n\n# Create a buffer\nzip_buffer = io.BytesIO()\n\n# Write JSON string to the zip file\nwith zipfile.ZipFile(zip_buffer, \"w\") as zip_file:\n    zip_file.writestr(\"quakes-metadata.json\", earthquake_meta_json)\n\n# Write DataFrame to a CSV file in the zip file\nwith zipfile.ZipFile(zip_buffer, \"a\") as zip_file:\n    df_csv_string = earthquakes_df.to_csv(index=False)\n    zip_file.writestr(\"quakes.csv\", df_csv_string)\n\n# Write the zip file to standard output\nsys.stdout.buffer.write(zip_buffer.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Using SQL Tagged Template Literal (JavaScript)\nDESCRIPTION: Demonstrates the use of the 'sql' tagged template literal to execute a SQL query directly in JavaScript code.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst [row] = await sql`SELECT random() AS random`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Grid with Both Width and Height Adaptation\nDESCRIPTION: Creates a two-column grid of cards containing responsive charts that adapt to both width and height changes of their containers.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\" style=\"grid-auto-rows: 240px;\">\n  <div class=\"card\" style=\"padding: 0;\">\n    ${resize((width, height) => Plot.barY([9, 4, 8, 1, 11, 3, 4, 2, 7, 5]).plot({width, height}))}\n  </div>\n  <div class=\"card\" style=\"padding: 0;\">\n    ${resize((width, height) => Plot.barY([3, 4, 2, 7, 5, 9, 4, 8, 1, 11]).plot({width, height}))}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating CSV with Penguin Classification using Python and scikit-learn\nDESCRIPTION: This Python script loads penguin data, performs logistic regression for species classification, and generates a CSV file with predictions. It uses pandas for data manipulation, scikit-learn for machine learning, and seaborn's dataset for penguin data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-csv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\n\n# Load the penguins dataset\npenguins = sns.load_dataset(\"penguins\")\n\n# Drop rows with missing values\npenguins = penguins.dropna()\n\n# Prepare features and target\nX = penguins[[\"body_mass_g\", \"flipper_length_mm\", \"culmen_length_mm\", \"culmen_depth_mm\"]]\ny = penguins[\"species\"]\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the features\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Train the logistic regression model\nmodel = LogisticRegression(random_state=42)\nmodel.fit(X_train_scaled, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test_scaled)\n\n# Create a DataFrame with the test data and predictions\nresults = X_test.copy()\nresults[\"species\"] = y_test\nresults[\"predicted_species\"] = y_pred\nresults[\"correct\"] = results[\"species\"] == results[\"predicted_species\"]\n\n# Save the results to a CSV file\nresults.to_csv(\"predictions.csv\", index=False)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Interactive Elements for Animation Demo in JavaScript\nDESCRIPTION: Prepares variables and UI elements for the animation demonstration. This includes creating a clickable button and defining colors and duration for the animation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst clicks = view(Inputs.button(\"Click\", {label: \"Run cell\"}));\nconst colors = [\"#4269d0\", \"#efb118\", \"#ff725c\", \"#6cc5b0\"];\nconst duration = 2000;\n```\n\n----------------------------------------\n\nTITLE: Importing Namespace from node_modules Package\nDESCRIPTION: Demonstrates importing an entire package as a namespace from node_modules. This pattern is useful for packages with many related functions that you want to access under a single object.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Arrow from \"apache-arrow\";\n```\n\n----------------------------------------\n\nTITLE: Visualizing Wind Data on a Map using Plot.js\nDESCRIPTION: This snippet creates a map visualization of the wind data using Plot.js. It combines the wind contours, land boundaries, graticule, and sphere to create a comprehensive map. The wind data is displayed as filled contours with a diverging color scale.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf-contours/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width,\n  projection: \"equal-earth\",\n  color: {type: \"diverging\", legend: true, label: \"UWND\"},\n  marks: [\n    Plot.geo(winds, {fill: \"value\"}),\n    Plot.geo(topojson.feature(world, world.objects.land), {stroke: \"black\"}),\n    Plot.graticule({stroke: \"black\"}),\n    Plot.sphere({stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL Query with User Input (JavaScript and SQL)\nDESCRIPTION: Creates a slider input for magnitude and uses it in a SQL query with interpolation to filter stars by brightness.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst mag = view(Inputs.range([6, 22], {label: \"Magnitude\"}));\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM gaia WHERE phot_g_mean_mag BETWEEN ${mag - 0.1} AND ${mag + 0.1};\n```\n\n----------------------------------------\n\nTITLE: Loading CSV File with Type Coercion in JavaScript\nDESCRIPTION: This snippet demonstrates how to load a CSV file named 'gistemp.csv' using FileAttachment with automatic type coercion enabled.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst gistemp = FileAttachment(\"gistemp.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Penguin Species Classification with Python Logistic Regression\nDESCRIPTION: Python script that performs logistic regression on penguin measurements to predict species. Reads input from a CSV file, trains a model on bill and body measurements, and outputs predictions to a new CSV file via stdout.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-csv/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nimport sys\n\n# Read the CSV\ndf = pd.read_csv(\"src/data/penguins.csv\")\n\n# Select columns to train the model\nX = df.iloc[:, [2, 3, 4, 5]]\nY = df.iloc[:, 0]\n\n# Create an instance of Logistic Regression Classifier and fit the data.\nlogreg = LogisticRegression()\nlogreg.fit(X, Y)\n\nresults = df.copy();\n# Add predicted values\nresults['species_predicted'] = logreg.predict(X)\n\n# Write to CSV\nresults.to_csv(sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Databricks Connection Helper Implementation\nDESCRIPTION: Implements helper functions for managing Databricks SQL connections and executing queries. Includes session management and error handling.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-databricks/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\";\nimport {DBSQLClient, DBSQLLogger, LogLevel} from \"@databricks/sql\";\n\nconst token = process.env.DATABRICKS_TOKEN;\nconst host = process.env.DATABRICKS_SERVER_HOSTNAME;\nconst path = process.env.DATABRICKS_HTTP_PATH;\n\nif (!token) throw new Error(\"missing DATABRICKS_TOKEN\");\nif (!host) throw new Error(\"missing DATABRICKS_SERVER_HOSTNAME\");\nif (!path) throw new Error(\"missing DATABRICKS_HTTP_PATH\");\n\nexport async function openSession(f) {\n  const logger = new DBSQLLogger({level: LogLevel.error}); // don't pollute stdout\n  const client = new DBSQLClient({logger});\n  await client.connect({host, path, token});\n  const session = await client.openSession();\n  try {\n    return await f(session, client);\n  } finally {\n    await session.close();\n    await client.close();\n  }\n}\n\nexport async function executeStatement(statement, options) {\n  return await openSession(async (session) => {\n    const queryOperation = await session.executeStatement(statement, options);\n    try {\n      return await queryOperation.fetchAll();\n    } finally {\n      await queryOperation.close();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQL Query with DuckDBClient Using Tagged Template Literal\nDESCRIPTION: Running an SQL query with the db.sql tagged template literal to bin stars by right ascension and declination, returning an Arrow table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bins = db.sql`SELECT\n  floor(ra / 2) * 2 + 1 AS ra,\n  floor(dec / 2) * 2 + 1 AS dec,\n  count() AS count\nFROM\n  gaia\nGROUP BY\n  1,\n  2`\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Market Segment Selection with Radio Buttons in JavaScript\nDESCRIPTION: Implements a radio button input that allows users to filter hotel data by market segment. It excludes complementary reservations from the options and sets 'All' as the default selection.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Radio button input to choose market segment\nconst pickMarketSegmentInput = Inputs.radio(\n  [\"All\"].concat(hotelData.filter((d) => d.MarketSegment != \"Complementary\").map((d) => d.MarketSegment)),\n  {\n    label: \"Booking type:\",\n    value: \"All\",\n    unique: true\n  }\n);\nconst pickMarketSegment = Generators.input(pickMarketSegmentInput);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Chart with Plot\nDESCRIPTION: Demonstrates creating a simple rectangular bar chart using Plot.rectY() with letter frequencies. The example shows the concise API for mapping data dimensions to visual properties.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/plot.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(alphabet, {x: \"letter\", y: \"frequency\"}).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Plot Using width Variable\nDESCRIPTION: Creates a responsive horizontal bar chart using Observable Plot, automatically resizing based on the width reactive variable.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nPlot.barX([9, 4, 8, 1, 11, 3, 4, 2, 7, 5]).plot({width})\n```\n\n----------------------------------------\n\nTITLE: Creating a Raster Plot with Observable Plot in JavaScript\nDESCRIPTION: This snippet uses Observable Plot to create a raster visualization of the processed NetCDF data. It sets up the plot with specific dimensions, color scheme, and axis configurations to display global marine winds.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  style: {\n    aspectRatio: 2,\n    width: \"100%\"\n  },\n  color: {\n    scheme: \"RdBu\",\n    label: \"U wind (m/s)\",\n    legend: true\n  },\n  marks: [\n    Plot.raster(data, {\n      x: \"lon\",\n      y: \"lat\",\n      fill: \"value\",\n      interpolate: \"nearest\"\n    })\n  ],\n  x: {\n    label: \"Longitude\",\n    labelAnchor: \"center\",\n    tickFormat: (d) => d + \"°\"\n  },\n  y: {\n    label: \"Latitude\",\n    labelAnchor: \"center\",\n    tickFormat: (d) => d + \"°\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing deck.gl Instance and Handling Cleanup\nDESCRIPTION: This snippet creates a DeckGL instance, sets up initial view state and tooltip functionality, and handles cleanup when the code block re-runs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst deckInstance = new DeckGL({\n  container,\n  initialViewState,\n  getTooltip,\n  effects,\n  controller: true\n});\n\n// clean up if this code re-runs\ninvalidation.then(() => {\n  deckInstance.finalize();\n  container.innerHTML = \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CSV and Converting to Apache Parquet using Python and pyarrow\nDESCRIPTION: This Python script reads a CSV file containing US dam records, selects specific columns, and converts the data to Apache Parquet format using the pyarrow library. The resulting Parquet file is written to standard output.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\nimport pyarrow as pa\nimport pyarrow.parquet as pq\nimport sys\n\n# Read the CSV file\ndf = pd.read_csv('data/NID_2021_U_CSV.csv')\n\n# Select specific columns\ncolumns = [\n    'LONGITUDE', 'LATITUDE', 'DAM_NAME', 'OTHER_DAM_NAME',\n    'STATE', 'COUNTY', 'RIVER', 'YEAR_COMPLETED', 'DAM_DESIGNER',\n    'DAM_TYPE', 'CORE', 'FOUNDATION', 'PURPOSES', 'NID_HEIGHT', 'MAX_DISCHARGE',\n    'SURFACE_AREA', 'DRAINAGE_AREA', 'HAZARD', 'INSPECTION_DATE', 'STATE_REG_DAM',\n    'SPILLWAY_TYPE', 'OUTLET_GATES', 'NUMBER_OF_LOCKS', 'LENGTH_OF_LOCKS',\n    'WIDTH_OF_LOCKS', 'FED_FUNDING', 'FERC_LICENSE', 'FERC_EXEMPT', 'SOURCE_AGENCY'\n]\ndf = df[columns]\n\n# Convert to PyArrow table\ntable = pa.Table.from_pandas(df)\n\n# Write to Parquet format\npq.write_table(table, sys.stdout.buffer, compression='snappy')\n```\n\n----------------------------------------\n\nTITLE: Creating a Voronoi Diagram with Random Data\nDESCRIPTION: Generates 500 random points and creates a Voronoi diagram visualization. This example shows how to generate data, apply the Voronoi algorithm, and display the resulting chart using Plot.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/plot.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst random = d3.randomLcg(42);\nconst x = Array.from({length: 500}, random);\nconst y = Array.from({length: 500}, random);\nconst chart = Plot.voronoi(x, {x, y, fill: x}).plot({nice: true});\n\ndisplay(chart);\n```\n\n----------------------------------------\n\nTITLE: Embedding Framework Charts in React Components\nDESCRIPTION: React component implementation that dynamically imports a Framework chart module and renders it within a div element. Uses useEffect and useRef hooks to handle mounting and cleanup.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useEffect, useRef} from \"react\";\n\nexport function EmbedChart() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    let parent = ref.current, child;\n    import(\"https://my-app.example.com/chart.js\")\n      .then(({Chart}) => Chart())\n      .then((chart) => parent?.append((child = chart)));\n    return () => ((parent = null), child?.remove());\n  }, []);\n\n  return <div ref={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas Animation with Invalidation in JavaScript\nDESCRIPTION: Demonstrates how to use requestAnimationFrame for canvas animation and the invalidation promise for cleanup. This ensures proper resource management when the cell is re-run or disposed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst context1 = canvas1.getContext(\"2d\");\nconst color = colors[clicks % 4]; // cycle through colors on click\nconst start = performance.now(); // when the animation started\n\nlet frame = requestAnimationFrame(function tick(now) {\n  const t = Math.min(1, (now - start) / duration);\n  context1.fillStyle = color;\n  context1.fillRect(0, 0, t * canvas1.width, canvas1.height);\n  if (t < 1) frame = requestAnimationFrame(tick);\n});\n\ninvalidation.then(() => cancelAnimationFrame(frame));\n```\n\n----------------------------------------\n\nTITLE: Embedding Plot Visualizations in Markdown Text\nDESCRIPTION: Demonstrates embedding sparklines and dot visualizations within Markdown text. Shows how to create small inline visualizations with Plot's concise API and customize their appearance with specific dimensions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/plot.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n… include a ${Plot.lineY([1, 2, 0, 4, 0, 3, 1, 5, 7, 2, 3]).plot({axis: null, width: 80, height: 18})} sparkline…\n… dots ${Plot.dotX(\"abcdef\", {r: 5, fill: Plot.identity}).plot({axis: null, width: 80, height: 12})} — say…\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with FileAttachment\nDESCRIPTION: JavaScript code demonstrating how to load and type CSV data using FileAttachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst quakes = FileAttachment(\"quakes.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Creating a DuckDB Client with File Attachment\nDESCRIPTION: Example of initializing a DuckDBClient with a Parquet file attachment. This creates a database with a table named 'gaia' containing star catalog data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = DuckDBClient.of({gaia: FileAttachment(\"gaia-sample.parquet\")});\n```\n\n----------------------------------------\n\nTITLE: Rendering a React Component with display()\nDESCRIPTION: Uses the built-in display function to render a Greeting component with a specific subject prop.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ndisplay(<Greeting subject=\"JSX\" />);\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Force-Directed Graph with D3.js\nDESCRIPTION: This code creates an interactive force-directed graph using D3.js. It visualizes character co-occurrence in Les Misérables, with nodes representing characters and links representing their interactions. The graph is draggable and uses color to represent clusters.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/d3.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = 640;\nconst height = 640;\nconst color = d3.scaleOrdinal(d3.schemeObservable10);\n\n// Copy the data to protect against mutation by d3.forceSimulation.\nconst links = data.links.map((d) => Object.create(d));\nconst nodes = data.nodes.map((d) => Object.create(d));\n\nconst simulation = d3.forceSimulation(nodes)\n    .force(\"link\", d3.forceLink(links).id((d) => d.id))\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\n    .on(\"tick\", ticked);\n\nconst svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\nconst link = svg.append(\"g\")\n    .attr(\"stroke\", \"var(--theme-foreground-faint)\")\n    .attr(\"stroke-opacity\", 0.6)\n  .selectAll(\"line\")\n  .data(links)\n  .join(\"line\")\n    .attr(\"stroke-width\", (d) => Math.sqrt(d.value));\n\nconst node = svg.append(\"g\")\n    .attr(\"stroke\", \"var(--theme-background)\")\n    .attr(\"stroke-width\", 1.5)\n  .selectAll(\"circle\")\n  .data(nodes)\n  .join(\"circle\")\n    .attr(\"r\", 5)\n    .attr(\"fill\", (d) => color(d.group))\n    .call(drag(simulation));\n\nnode.append(\"title\")\n    .text((d) => d.id);\n\nfunction ticked() {\n  link\n      .attr(\"x1\", (d) => d.source.x)\n      .attr(\"y1\", (d) => d.source.y)\n      .attr(\"x2\", (d) => d.target.x)\n      .attr(\"y2\", (d) => d.target.y);\n\n  node\n      .attr(\"cx\", (d) => d.x)\n      .attr(\"cy\", (d) => d.y);\n}\n\ndisplay(svg.node());\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Leaflet Map with Marker and Popup\nDESCRIPTION: Example demonstrating how to create a basic Leaflet map with a marker and popup. The code creates a container div, initializes a map centered on coordinates [51.505, -0.09] with zoom level 13, adds an OpenStreetMap tile layer, and places a marker with a popup message.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/leaflet.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = display(document.createElement(\"div\"));\ndiv.style = \"height: 400px;\";\n\nconst map = L.map(div)\n  .setView([51.505, -0.09], 13);\n\nL.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n  attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n})\n  .addTo(map);\n\nL.marker([51.5, -0.09])\n  .addTo(map)\n  .bindPopup(\"A nice popup<br> indicating a point of interest.\")\n  .openPopup();\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Entry Points from npm Packages\nDESCRIPTION: Shows how to import specific entry points or files from npm packages by appending the path after the package name. Both examples import alternative entry points from their respective packages.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport mime from \"npm:mime/lite\";\n```\n\n----------------------------------------\n\nTITLE: Implementing an Airtable Data Loader with TypeScript\nDESCRIPTION: A TypeScript data loader that connects to Airtable, retrieves data from a 'penguins' table, and outputs it as CSV format. The code uses environment variables for authentication and the airtable.js library to interact with the Airtable API.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-airtable/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\";\nimport Airtable from \"airtable\";\nimport {csvFormat} from \"d3-dsv\";\n\nconst {AIRTABLE_PAT, AIRTABLE_DB} = process.env;\n\nAirtable.configure({apiKey: AIRTABLE_PAT});\n\nconst base = Airtable.base(AIRTABLE_DB as string);\n\nconst data: any[] = [];\n\nbase(\"penguins\")\n  .select({view: \"Grid view\"})\n  .eachPage(\n    (records, fetchNextPage) => {\n      records.forEach((record) => data.push(record.fields));\n      fetchNextPage();\n    },\n    (err) => {\n      if (err) throw err;\n      process.stdout.write(csvFormat(data));\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Fetching World Map Data\nDESCRIPTION: JavaScript code for fetching topological JSON data for world map visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst world = await fetch(import.meta.resolve(\"npm:world-atlas/land-110m.json\")).then((response) => response.json());\nconst land = topojson.feature(world, world.objects.land);\n```\n\n----------------------------------------\n\nTITLE: Visualizing SQL Query Results with Plot\nDESCRIPTION: Creating a heatmap visualization using Plot's raster mark to display the query results, showing the distribution of stars in the milky way.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  x: {domain: [0, 360]},\n  y: {domain: [-90, 90]},\n  marks: [\n    Plot.frame({fill: 0}),\n    Plot.raster(bins, {\n      x: \"ra\",\n      y: \"dec\",\n      fill: \"count\",\n      width: 360 / 2,\n      height: 180 / 2,\n      imageRendering: \"pixelated\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing Data for deck.gl Visualization\nDESCRIPTION: This snippet demonstrates loading CSV data for road collisions and TopoJSON data for country shapes, then converting the latter to GeoJSON for use in the visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = FileAttachment(\"../data/dft-road-collisions.csv\").csv({array: true, typed: true}).then((data) => data.slice(1));\nconst topo = import.meta.resolve(\"npm:visionscarto-world-atlas/world/50m.json\");\nconst world = fetch(topo).then((response) => response.json());\nconst countries = world.then((world) => topojson.feature(world, world.objects.countries));\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Observable Plot\nDESCRIPTION: Code that creates a line chart of Apple's stock price data using Observable Plot, with customized axis and grid settings.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.lineY(aapl, {x: \"Date\", y: \"Close\"}).plot({y: {grid: true}})\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Database with TypeScript\nDESCRIPTION: This snippet demonstrates how to query a PostgreSQL database using TypeScript. It uses a custom run function and SQL template literals to execute a complex query that retrieves daily event counts for a specific user.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\nimport {run} from \"./postgres.js\";\n\nprocess.stdout.write(\n  csvFormat(\n    await run(\n      (sql) =>\n        sql`WITH counts AS (SELECT DATE_TRUNC('day', e.time) AS \"date\", COUNT(*) AS \"count\"\n  FROM document_events e\n  JOIN documents d ON d.id = e.id\n  JOIN users u ON u.id = d.user_id\n  WHERE u.login = 'd3'\n  GROUP BY 1)\nSELECT g.date, COALESCE(c.count, 0) AS count\nFROM GENERATE_SERIES(DATE '2019-01-01', DATE '2019-12-31', INTERVAL '1 DAY') AS g(date)\nLEFT JOIN counts c ON c.date = g.date\nORDER BY 1 DESC`\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection Helper in TypeScript\nDESCRIPTION: This snippet defines a helper function 'run' that manages the PostgreSQL connection. It uses environment variables for the database URL and handles SSL configuration. The function executes a provided SQL query and ensures proper connection closure.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"dotenv/config\";\nimport type {Row, Sql} from \"postgres\";\nimport postgres from \"postgres\";\n\nconst {POSTGRES_URL} = process.env;\n\nif (!POSTGRES_URL) throw new Error(\"missing POSTGRES_URL\");\n\n// Warning: you may wish to specify a self-signed certificate rather than\n// disabling certificate verification via rejectUnauthorized: false as below.\n// See https://github.com/porsager/postgres/blob/master/README.md#ssl for more.\nexport async function run<T extends Row[]>(f: (sql: Sql) => Promise<T>): Promise<T> {\n  const sql = postgres(POSTGRES_URL!, {ssl: {rejectUnauthorized: false}});\n  try {\n    return await f(sql);\n  } finally {\n    await sql.end();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Data Aggregation in Arquero\nDESCRIPTION: Demonstrates data reshaping and statistical aggregation operations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ndt.fold(aq.all(), {as: [\"city\", \"sun\"]})\n  .groupby(\"city\")\n  .rollup({\n    min: aq.op.min(\"sun\"),\n    max: aq.op.max(\"sun\"),\n    avg: (d) => aq.op.average(d.sun),\n    med: (d) => aq.op.median(d.sun),\n    skew: ({sun}) => (aq.op.mean(sun) - aq.op.median(sun)) / aq.op.stdev(sun)\n  })\n  .objects()\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Temperature Plot Component in JavaScript\nDESCRIPTION: This function creates a reusable component for temperature plotting. It encapsulates Plot configuration and accepts the data as a required parameter plus optional configuration like width. The function returns a Plot element that can be used throughout the application.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction temperaturePlot(data, {width} = {}) {\n  return Plot.plot({\n    title: \"Hourly temperature forecast\",\n    width,\n    x: {type: \"utc\", ticks: \"day\", label: null},\n    y: {grid: true, inset: 10, label: \"Degrees (F)\"},\n    marks: [\n      Plot.lineY(data.properties.periods, {\n        x: \"startTime\",\n        y: \"temperature\",\n        z: null, // varying color, not series\n        stroke: \"temperature\",\n        curve: \"step-after\"\n      })\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Create Deck.gl Instance and Handle Cleanup - JavaScript\nDESCRIPTION: Initializes a DeckGL instance to render the map with predefined view state and effects. Includes a cleanup mechanism using promises to ensure proper resource management when code re-runs. Deck.gl is a prerequisite.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deckInstance = new DeckGL({\n  container,\n  initialViewState,\n  controller: true,\n  effects\n});\n\n// clean up if this code re-runs\ninvalidation.then(() => {\n  deckInstance.finalize();\n  container.innerHTML = \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatterplot with Plot.plot in JavaScript\nDESCRIPTION: This JavaScript code creates a scatterplot using Observable's Plot.plot function. It visualizes penguin size data with text indicating cluster numbers and colors mapped to penguin species.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-csv/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {\n    legend: true,\n    range: [\"lightseagreen\", \"orchid\", \"darkorange\"]\n  },\n  marks: [\n    Plot.text(penguinKmeans, {\n      text: \"cluster\",\n      x: \"body_mass_g\",\n      y: \"flipper_length_mm\",\n      fill: \"species\",\n      fontWeight: 600\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using vlresize Utility Function for Responsive Vega-Lite Chart\nDESCRIPTION: This snippet shows how to use the imported vlresize function to create a responsive bar chart with a maximum width constraint. It simplifies the implementation by encapsulating the resize logic within the utility function.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/vega-responsive/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvlresize({\n  \"height\": 250,\n  \"data\": {\"url\": \"https://vega.github.io/vega-lite/data/cars.json\"},\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"Cylinders\"},\n    \"y\": {\"aggregate\": \"count\", \"title\": \"Number of cars\"}\n  }\n}, {\n  maxWidth: 960 - 16 * 2\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Deck.gl Map Layers for Visualization - JavaScript\nDESCRIPTION: Sets various map layers including GeoJsonLayer, HexagonLayer, and TextLayer using DeckGL to visualize state boundaries, dam data, and state labels. The snippet uses dependencies like GeoJsonLayer and HexagonLayer.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeckInstance.setProps({\n  controller: true,\n  layers: [\n    new GeoJsonLayer({\n      id: \"base-map\",\n      data: states,\n      lineWidthMinPixels: 1.5,\n      getLineColor: [255,255,255, 100],\n      getFillColor: [38, 38, 38]\n    }),\n    new HexagonLayer({\n      id: 'hexbin-plot',\n      data: dams,\n      coverage: 0.2,\n      radius: 6000,\n      upperPercentile: 99,\n      colorRange,\n      elevationScale: 100,\n      elevationRange: [50, 15000],\n      extruded: true,\n      getPosition: d => [d.longitude, d.latitude],\n      opacity: 1,\n      material: {\n        ambient: 1,\n        specularColor: [51, 51, 51]\n      }\n    }),\n    new TextLayer({\n        id: \"text-layer\",\n        data: stateCentroid,\n        getPosition: d => [d.longitude, d.latitude],\n        getText: d => d.name,\n        fontFamily: 'Helvetica',\n        fontWeight: 700,\n        background: false,\n        fontSettings: ({\n          sdf: true,\n          }),\n        outlineWidth: 4,\n        getSize: 14,\n        getColor: [247,248,243, 255],\n        getTextAnchor: 'middle',\n        getAlignmentBaseline: 'center',\n        getPixelOffset: [0, -10]\n      })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Parquet from Dam Data using Python\nDESCRIPTION: This Python script loads dam data from the National Inventory of Dams, selects specific columns, and outputs an Apache Parquet file. It uses pandas for data manipulation and pyarrow for Parquet file creation with Snappy compression.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Load libraries (must be installed in environment)\nimport pandas as pd\nimport pyarrow as pa\nimport pyarrow.parquet as pq\nimport sys\n\ndf = pd.read_csv(\"https://nid.sec.usace.army.mil/api/nation/csv\", low_memory=False, skiprows=1).loc[:, [\"Dam Name\", \"Primary Purpose\", \"Primary Dam Type\", \"Hazard Potential Classification\"]]\n\n# Write DataFrame to a temporary file-like object\nbuf = pa.BufferOutputStream()\ntable = pa.Table.from_pandas(df)\npq.write_table(table, buf, compression=\"snappy\")\n\n# Get the buffer as a bytes object\nbuf_bytes = buf.getvalue().to_pybytes()\n\n# Write the bytes to standard output\nsys.stdout.buffer.write(buf_bytes)\n```\n\n----------------------------------------\n\nTITLE: Creating a Greeting Component with Hypertext Literal\nDESCRIPTION: A JavaScript function that creates a greeting component using Hypertext Literal (html template literal tag) to display formatted HTML.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greeting(name) {\n  return html`Hello, <i>${name}</i>!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Issues with Octokit in TypeScript\nDESCRIPTION: This snippet uses the Octokit SDK to authenticate with GitHub and fetch open issues and pull requests from the Observable Framework repository. It paginates through results and extracts specific fields for each issue.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-github/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\";\nimport {Octokit} from \"octokit\";\n\nconst octokit = new Octokit({auth: process.env.GITHUB_TOKEN});\n\nconst iterator = octokit.paginate.iterator(octokit.rest.issues.listForRepo, {\n  owner: \"observablehq\",\n  repo: \"framework\",\n  state: \"open\",\n  per_page: 100\n});\n\nconst issues = [];\n\nfor await (const {data} of iterator) {\n  for (const item of data) {\n    issues.push({\n      state: item.state,\n      pull_request: !!item.pull_request,\n      created_at: item.created_at,\n      closed_at: item.closed_at,\n      draft: item.draft,\n      reactions: {...item.reactions, url: undefined},\n      title: item.title,\n      number: item.number\n    });\n  }\n}\n\nprocess.stdout.write(JSON.stringify(issues));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Input in Observable\nDESCRIPTION: Creates a button labeled 'Replay' that can be used to trigger the evaluation of cells. This button is commonly used to restart animations or trigger actions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst replay = view(Inputs.button(\"Replay\"));\n```\n\n----------------------------------------\n\nTITLE: Create Histogram of Dam Conditions by Construction Year - JavaScript\nDESCRIPTION: Renders a histogram to show the number of dams built per decade, categorized by condition. Uses Plot.js for constructing the histogram and is dependent on data from the dams array.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction conditionByAge(width, height) {\n  return Plot.plot({\n    width,\n    height: height - 50,\n    marginBottom: 40,\n    marginTop: 0,\n    x: {label: \"Year construction finished\", tickFormat: \"Y\", labelAnchor: \"center\", labelArrow: \"none\"},\n    y: {label: \"Number of dams\", grid: true, ticks: 5, tickSize: 0},\n    color: {domain: conditions, range: conditionsColors, legend: true, label: \"Condition\"},\n    marks: [\n      Plot.rectY(dams, Plot.binX({y: \"count\"},\n        {x: \"yearCompleted\",\n        fill: \"conditionAssessment\",\n         order: conditions,\n         interval: 10,\n         tip: true\n         })\n       )\n     ]\n   })\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable vlresize Utility Function for Vega-Lite Charts\nDESCRIPTION: This snippet defines a reusable vlresize function that can be exported from a module and used across multiple pages. It wraps Vega-Lite charts with responsive behavior, supporting configurable minimum and maximum width constraints.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/vega-responsive/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {resize} from \"npm:@observablehq/stdlib\";\nimport vl from \"observablehq:stdlib/vega-lite\";\n\nexport async function vlresize(\n  {autosize = {type: \"fit\", contains: \"padding\"}, ...spec},\n  {minWidth = 0, maxWidth = Infinity} = {}\n) {\n  const chart = await vl.render({spec: {...spec, width: -1, autosize}});\n  return resize((width) => {\n    chart.value.width(Math.max(minWidth, Math.min(maxWidth, width)));\n    chart.value.run();\n    return chart;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Chart Data Component in JavaScript for Export\nDESCRIPTION: A module that exports a Chart function which loads CSV data and creates a responsive Plot scatterplot of global surface temperature. It uses FileAttachment for data loading and implements resize functionality.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"npm:@observablehq/plot\";\nimport {FileAttachment, resize} from \"observablehq:stdlib\";\n\nexport async function Chart() {\n  const gistemp = await FileAttachment(\"./lib/gistemp.csv\").csv({typed: true});\n  return resize((width) =>\n    Plot.plot({\n      width,\n      y: {grid: true},\n      color: {scheme: \"burd\"},\n      marks: [Plot.dot(gistemp, {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"}), Plot.ruleY([0])]\n    })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from JSR (JavaScript Registry)\nDESCRIPTION: Demonstrates importing named exports from a package in the JavaScript Registry (JSR) using the jsr: protocol. This example imports random number generation functions from the Deno Standard Library.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {randomIntegerBetween, randomSeeded} from \"jsr:@std/random\";\n```\n\n----------------------------------------\n\nTITLE: Defining Color Range and Legend for deck.gl Visualization\nDESCRIPTION: This code defines the color range for the hexagon layer and creates a color legend using Observable Plot.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst colorRange = [\n  [1, 152, 189],\n  [73, 227, 206],\n  [216, 254, 181],\n  [254, 237, 177],\n  [254, 173, 84],\n  [209, 55, 78]\n];\n\nconst colorLegend = Plot.plot({\n  margin: 0,\n  marginTop: 20,\n  width: 180,\n  height: 35,\n  style: \"color: white;\",\n  x: {padding: 0, axis: null},\n  marks: [\n    Plot.cellX(colorRange, {fill: ([r, g, b]) => `rgb(${r},${g},${b})`, inset: 0.5}),\n    Plot.text([\"Fewer\"], {frameAnchor: \"top-left\", dy: -12}),\n    Plot.text([\"More\"], {frameAnchor: \"top-right\", dy: -12})\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Range2D Component Implementation\nDESCRIPTION: Core implementation of the Range2D component using Canvas API. Handles pointer events and maintains the 2D value state within [0,1] range.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-input-2d/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function Range2D({width = 100, height = 100, value = [0.5, 0.5]} = {}) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  canvas.style.border = \"1px solid black\";\n\n  let down = false;\n  canvas.onpointerup = () => (down = false);\n  canvas.onpointerdown = (event) => {\n    down = true;\n    canvas.setPointerCapture(event.pointerId);\n    canvas.onpointermove(event);\n  };\n  canvas.onpointermove = (event) => {\n    if (!down) return;\n    event.preventDefault(); // prevent scrolling and text selection\n    set([event.offsetX / width, event.offsetY / height]);\n    canvas.dispatchEvent(new Event(\"input\", {bubbles: true}));\n  };\n\n  const context = canvas.getContext(\"2d\");\n\n  function set([x, y]) {\n    x = Math.max(0, Math.min(1, x));\n    y = Math.max(0, Math.min(1, y));\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, width, height);\n    context.fillStyle = \"red\";\n    context.fillRect(Math.floor(x * width), 0, 1, height);\n    context.fillRect(0, Math.floor(y * height), width, 1);\n    value = [x, y];\n  }\n\n  set(value);\n\n  return Object.defineProperty(canvas, \"value\", {get: () => value, set});\n}\n```\n\n----------------------------------------\n\nTITLE: Julia Data Loader for Text File Generation\nDESCRIPTION: A Julia script that downloads text from Project Gutenberg, processes it to extract a specific stanza, and outputs the result as a text file. The loader demonstrates text processing and file I/O operations in Julia.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-julia-to-txt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n# Since no code snippets were provided in the original text, this is an empty code block\n```\n\n----------------------------------------\n\nTITLE: Loading External Data into DuckDB with SQL Query\nDESCRIPTION: Example of creating an empty DuckDBClient and then loading data from an external Parquet file using a SQL query with read_parquet.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await DuckDBClient.of();\n\nawait db.sql`CREATE TABLE addresses\n  AS SELECT *\n  FROM read_parquet('https://static.data.gouv.fr/resources/bureaux-de-vote-et-adresses-de-leurs-electeurs/20230626-135723/table-adresses-reu.parquet')\n  LIMIT 100`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial View State and Tooltip for Dam Map in JavaScript\nDESCRIPTION: Sets up the initial view parameters for the map display and creates a tooltip function for showing dam information on hover. The view is centered on the selected state with appropriate zoom levels, and tooltips display key dam statistics.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialViewState = {\n  longitude: stateCentroid[0],\n  latitude: stateCentroid[1],\n  zoom: 6,\n  minZoom: 3,\n  maxZoom: 9,\n  pitch: 0,\n  bearing: 0\n};\n\n// Tooltip function\nfunction getTooltip({object}) {\n return object && `Name: ${object.name}\\nPrimary purpose: ${object.primaryPurpose}\\nMaximum storage: ${d3.format(\",\")(object.maxStorageAcreFt)} acre feet\\nYear completed: ${object.yearCompleted}\\nCondition: ${object.conditionAssessment}\\nHazard potential: ${object.hazardPotential}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Vega-Lite Visualization with JSON Specification\nDESCRIPTION: This example shows how to create a Vega-Lite visualization using a JSON specification object. It creates a scatter plot of temperature anomalies over time, loading data from a CSV file using FileAttachment with a diverging color scale.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/vega-lite.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvl.render({\n  spec: {\n    width: 640,\n    height: 400,\n    data: {url: await FileAttachment(\"gistemp.csv\").url(), format: {type: \"csv\"}},\n    mark: \"point\",\n    encoding: {\n      x: {type: \"temporal\", field: \"Date\"},\n      y: {type: \"quantitative\", field: \"Anomaly\"},\n      color: {type: \"quantitative\", field: \"Anomaly\", scale: {range: \"diverging\", reverse: true}}\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Mapbox GL JS Map in Observable\nDESCRIPTION: Creates a container element and initializes a Mapbox GL JS map with specified parameters including center coordinates, zoom level, pitch, and bearing. The code also includes cleanup logic using the invalidation promise to remove the map when the cell is invalidated.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mapbox-gl.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst div = display(document.createElement(\"div\"));\ndiv.style = \"height: 400px;\";\n\nconst map = new mapboxgl.Map({\n  container: div,\n  accessToken: ACCESS_TOKEN, // replace with your token, \"pk.…\"\n  center: [2.2932, 48.86069], // starting position [longitude, latitude]\n  zoom: 15.1,\n  pitch: 62,\n  bearing: -20\n});\n\ninvalidation.then(() => map.remove());\n```\n\n----------------------------------------\n\nTITLE: Manipulating an Image with Canvas in JavaScript\nDESCRIPTION: Shows how to load an image file, draw it on a canvas, and invert its RGB channel values.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst canvas = document.querySelector(\"#horse-canvas\");\nconst context = canvas.getContext(\"2d\");\nconst horse = await FileAttachment(\"horse.jpg\").image();\ncontext.drawImage(horse, 0, 0, canvas.width, canvas.height);\nconst data = context.getImageData(0, 0, canvas.width, canvas.height);\nfor (let j = 0, k = 0; j < canvas.height; ++j) {\n  for (let i = 0; i < canvas.width; ++i, k += 4) {\n    data.data[k + 0] = 255 - data.data[k + 0];\n    data.data[k + 1] = 255 - data.data[k + 1];\n    data.data[k + 2] = 255 - data.data[k + 2];\n  }\n}\ncontext.putImageData(data, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Importing Visualization Components\nDESCRIPTION: Imports custom visualization components for rendering trend numbers, line charts, Marimekko charts, and punchcard charts.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/google-analytics/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {trendNumber} from \"./components/trendNumber.js\";\nimport {lineChart} from \"./components/lineChart.js\";\nimport {marimekkoChart} from \"./components/marimekkoChart.js\";\nimport {punchcardChart} from \"./components/punchcardChart.js\";\n```\n\n----------------------------------------\n\nTITLE: R Data Loader for Text Processing and JSON Generation\nDESCRIPTION: This R script acts as a data loader in Observable Framework. It downloads 'War and Peace' text, processes it to count word frequencies by book and chapter, and outputs the results as JSON.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-json/README.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n# src/data/tolstoy.json.R\n\nlibrary(tidyverse)\nlibrary(gutenbergr)\nlibrary(tidytext)\nlibrary(jsonlite)\n\n# Download War and Peace\nwp <- gutenberg_download(2600)\n\n# Split into books and chapters\nwp_split <- wp %>%\n  mutate(book = cumsum(str_detect(text, regex(\"^book \", ignore_case = TRUE))),\n         chapter = cumsum(str_detect(text, regex(\"^chapter \", ignore_case = TRUE)))) %>%\n  filter(book > 0, chapter > 0)\n\n# Count words\nword_counts <- wp_split %>%\n  unnest_tokens(word, text) %>%\n  anti_join(stop_words) %>%\n  count(book, chapter, word, sort = TRUE) %>%\n  group_by(book, chapter) %>%\n  slice_max(n, n = 10) %>%\n  ungroup()\n\n# Convert to JSON\njson_data <- word_counts %>%\n  group_by(book, chapter) %>%\n  summarise(words = list(tibble(word = word, count = n))) %>%\n  ungroup() %>%\n  group_by(book) %>%\n  summarise(chapters = list(tibble(chapter = chapter, words = words))) %>%\n  ungroup() %>%\n  toJSON(pretty = TRUE, auto_unbox = TRUE)\n\n# Write JSON to stdout\ncat(json_data)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Button with Hypertext Literal in JavaScript\nDESCRIPTION: This snippet showcases how to create a button with a click event listener using Hypertext Literal, demonstrating its ability to handle non-serializable values like functions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/htl.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<button data-count=\"0\" onclick=${({currentTarget: button}) => {\n  const count = button.dataset.count = +button.dataset.count + 1;\n  button.textContent = `${count} click${count === 1 ? \"\" : \"s\"}`;\n}}>Click me!</button>`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Excel Data with Plot.dot in JavaScript\nDESCRIPTION: Demonstrates creating a scatterplot visualization of the Excel data using Plot.dot. It plots Altitude against Incident Date, with additional attributes for styling and interactivity.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/xlsx.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    label: \"Altitude (feet, thousands)\",\n    domain: [0, 100],\n    transform: (y) => y / 1000,\n    grid: true,\n    clamp: true\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(reports, {x: \"Incident Date\", y: \"Altitude\", r: 1, stroke: \"Incident Time\", tip: true})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Mutable Variables in JavaScript\nDESCRIPTION: Shows how to create a mutable counter variable and define functions to increment and reset it. This allows for state management similar to React's useState hook.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst count = Mutable(0);\nconst increment = () => ++count.value;\nconst reset = () => count.value = 0;\n```\n\n----------------------------------------\n\nTITLE: Plotting Arrow Data with Plot.js\nDESCRIPTION: Creates a line chart visualization of the Arrow data using Plot.js, with proper date handling on the x-axis and a zero reference line.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-arrow/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {\n    type: \"utc\" // treat x-values as dates, not numbers\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(samples, {x: \"date\", y: \"value\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering React Content into a Root\nDESCRIPTION: Renders JSX content into the previously created React root, which can then be used in inline expressions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nroot.render(<>Hello, <i>{name || \"anonymous\"}</i>!</>);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Poker Hand Statistics with Plot\nDESCRIPTION: JavaScript code using Observable Plot to create a bar chart of poker hand frequencies from the simulated data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-rust-to-json/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {tickFormat: \"%\", grid: true},\n  y: {domain: hands.summary.map(d => d.category)},\n  marginLeft: 100,\n  marginRight: 35,\n  marks: [\n    Plot.ruleX([0]),\n    Plot.barX(hands.summary, {\n      x: d => d.count / hands.meta.count,\n      y: \"category\",\n      fill: \"category\",\n    }),\n    Plot.textX(hands.summary, {\n      x: d => d.count / hands.meta.count,\n      y: \"category\",\n      text: d => formatPercent(d.count / hands.meta.count),\n      textAnchor: \"start\",\n      dx: 2,\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Grid Layout with HTML and CSS Classes\nDESCRIPTION: This HTML snippet demonstrates how to create a responsive grid layout using Framework's built-in CSS classes. It creates a two-column grid with three cards, where the first card spans both columns.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\">\n  <div class=\"card grid-colspan-2\">one–two</div>\n  <div class=\"card\">three</div>\n  <div class=\"card\">four</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-Series Chart of Rocket Launches\nDESCRIPTION: Generates a timeline visualization showing the number of rocket launches per year, grouped by country. The function returns a Plot object with a stacked bar chart and includes interactive tooltips.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-dashboard.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction launchTimeline(data, {width} = {}) {\n  return Plot.plot({\n    title: \"Launches over the years\",\n    width,\n    height: 300,\n    y: {grid: true, label: \"Launches\"},\n    color: {...color, legend: true},\n    marks: [\n      Plot.rectY(data, Plot.binX({y: \"count\"}, {x: \"date\", fill: \"state\", interval: \"year\", tip: true})),\n      Plot.ruleY([0])\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeObserver for responsive iframe in JavaScript\nDESCRIPTION: This code snippet creates a ResizeObserver to monitor changes in the document's size. It posts messages to the parent window with the updated height, allowing for dynamic iframe resizing. The observer is disconnected when the component is invalidated.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/embed.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst observer = new ResizeObserver(([entry]) => parent.postMessage({height: entry.target.offsetHeight}, \"*\"));\nobserver.observe(document.documentElement);\ninvalidation.then(() => observer.disconnect());\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Plot.plot\nDESCRIPTION: This snippet visualizes an Apache Arrow table using the `Plot.plot` function. By setting the `x` scale type to `utc`, it instructs the plotting library to treat `date` values as dates rather than numbers. It plots a line chart with `date` on the x-axis and `value` on the y-axis.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-parquet/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlot.plot({\n  x: {\n    type: \"utc\" // treat x-values as dates, not numbers\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(samples, {x: \"date\", y: \"value\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing PostgreSQL Data Loader in TypeScript for Observable Framework\nDESCRIPTION: This code snippet shows the structure of a data loader file that queries a PostgreSQL database. It imports necessary dependencies, defines the query, and exports the data loader function.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport postgres from \"./postgres\";\n\nconst query = `\n  SELECT date_trunc('day', timestamp) AS date, COUNT(*) AS count\n  FROM wikipedia.edits\n  WHERE timestamp >= NOW() - INTERVAL '30 days'\n  GROUP BY date\n  ORDER BY date ASC\n`;\n\nexport async function load() {\n  return postgres.query(query);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data Files with Observable\nDESCRIPTION: Utilizes the FileAttachment API to load and read static CSV files. The code parses files related to dams, county FIPS, and state capitals to extract typed data objects. These files contain essential data for mapping and analyzing geography-related statistics.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Read in static files\nconst dams = FileAttachment(\"data/dam-simple.csv\").csv({ typed: true });\n\nconst fips = FileAttachment(\"data/county_fips_master.csv\").csv({ typed: true });\n\nconst capitals = FileAttachment(\"data/us-state-capitals.csv\").csv({\n  typed: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Penguin Classifications with Observable Plot\nDESCRIPTION: Creates an interactive scatter plot using Observable Plot to visualize penguin measurements and model predictions. Highlights misclassified cases with diamond symbols and includes tooltips for body mass.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-csv/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  grid: true,\n  height: 400,\n  caption: \"Incorrect predictions highlighted with diamonds. Actual species encoded with color and predicted species encoded with symbols.\",\n  color: {\n    legend: true,\n  },\n  x: {label: \"Culmen length (mm)\"},\n  y: {label: \"Culmen depth (mm)\"},\n  marks: [\n    Plot.dot(predictions, {\n      x: \"culmen_length_mm\",\n      y: \"culmen_depth_mm\",\n      stroke: \"species\",\n      symbol: \"species_predicted\",\n      r: 3,\n      tip: {channels: {\"mass\": \"body_mass_g\"}}\n    }),\n    Plot.dot(predictions, {\n      filter: (d) => d.species !== d.species_predicted,\n      x: \"culmen_length_mm\",\n      y: \"culmen_depth_mm\",\n      r: 7,\n      symbol: \"diamond\",\n      stroke: \"currentColor\"\n    })\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Analyzing Penguin Data and Generating ZIP Archive in R\nDESCRIPTION: This R script loads penguin data, performs multiple linear regression, and outputs model estimates and predictions as a ZIP archive. It uses libraries like readr, tidyr, dplyr, and broom for data manipulation and analysis.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-zip/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n# Attach required packages (must be installed)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(broom)\n\n# Data access, wrangling and analysis\npenguins <- read_csv(\"src/data/penguins.csv\") |>\n    drop_na(body_mass_g, species, sex, flipper_length_mm, culmen_depth_mm)\n\npenguins_mlr <- lm(body_mass_g ~ species + sex + flipper_length_mm + culmen_depth_mm, data = penguins)\n\nmlr_est <- tidy(penguins_mlr)\n\nmlr_fit <- penguins |>\n    mutate(\n        body_mass_g_predict = penguins_mlr$fitted.values,\n        body_mass_g_residual = penguins_mlr$residuals\n    )\n\n# Write the data frames as CSVs to a temporary directory\nsetwd(tempdir())\nwrite_csv(mlr_est, \"estimates.csv\")\nwrite_csv(mlr_fit, \"predictions.csv\")\n\n# Zip the contents of the temporary directory\nsystem(\"zip - -r .\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Buttons with Different Reducers\nDESCRIPTION: Creates a counter interface with three buttons (increment, decrement, reset) using an array of content-reducer tuples. Each button performs a different operation on the counter value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = view(Inputs.button([\n  [\"Increment\", value => value + 1],\n  [\"Decrement\", value => value - 1],\n  [\"Reset\", value => 0]\n], {value: 0, label: \"Counter\"}));\n```\n\n----------------------------------------\n\nTITLE: Implementing subindex function for extracting values from objects and arrays in JavaScript\nDESCRIPTION: This function extracts values from complex objects and arrays using string path selectors. It supports dot notation (obj.prop), bracket notation (obj['prop']), and numeric indices for arrays. The implementation handles various edge cases and returns undefined when the path doesn't exist.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/pager/sub/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function subindex(object, selector) {\n  if (object == null) return undefined;\n  if (!selector) return object;\n  if (Array.isArray(selector)) {\n    return selector.map((selector) => subindex(object, selector));\n  }\n  if (selector.indexOf(\".\") < 0 && selector.indexOf(\"[\") < 0) {\n    return object[selector];\n  }\n  // The regexps below are a simplified version of the ones we use in OHQ.\n  const match = RegExp(\n    `^([^.\\\\[]*)${\"\"}\\\\.?${\"\"}\\\\.?$|\\\\.?${\"\"}\\\\.?${\"\"}\\\\.?\\\\[(\\\\d+)\\\\]$|\\\\.?${\"\"}\\\\.?${\"\"}\\\\.?\\\\[([^\\\\]]+)\\\\]$`,\n  ).exec(selector);\n  if (!match) {\n    const dot = selector.indexOf(\".\");\n    const bracket = selector.indexOf(\"[\");\n    const index = dot < 0 ? bracket : bracket < 0 ? dot : Math.min(dot, bracket);\n    const head = selector.slice(0, index);\n    const rest = selector.slice(index);\n    return subindex(object[head], rest[0] === \".\" ? rest.slice(1) : rest);\n  }\n  if (match[1] != null) {\n    return object[match[1]];\n  }\n  if (match[2] != null) {\n    return object[match[2]];\n  }\n  if (match[3] != null) {\n    if (match[3].startsWith('\\'') || match[3].startsWith('\"')) {\n      return object[match[3].slice(1, -1)];\n    }\n    return object[match[3]];\n  }\n  throw new Error(`Invalid selector: ${selector}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Snowflake and Formatting Results as CSV in TypeScript\nDESCRIPTION: This snippet demonstrates how to query Snowflake for API log data, format the results as CSV, and write to stdout. It uses a date range filter and groups results by path, ordering by count descending.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-snowflake/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\nimport {run} from \"./snowflake.js\";\n\nconst start = new Date(\"2024-01-01\");\nconst end = new Date(\"2024-01-08\");\n\nprocess.stdout.write(\n  csvFormat(\n    await run((query) =>\n      query(\n        `SELECT '/' || path AS \"path\", COUNT(*) AS \"count\"\nFROM fct_api_logs\nWHERE time between :1 and :2\nAND STARTSWITH(path, 'document/@d3/')\nGROUP BY 1\nHAVING \"count\" >= 10\nORDER BY 2 DESC`,\n        [start, end]\n      )\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Searchable Dam Data Table in JavaScript\nDESCRIPTION: Creates an interactive searchable table for dam data using Observable's Inputs library. The code combines a search input with a data generator to enable filtering of the dam dataset.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst damSearch = Inputs.search(damsSelectedState);\n\nconst damSearchValue = Generators.input(damSearch);\n```\n\n----------------------------------------\n\nTITLE: R Data Loader for Penguin Data Analysis and ZIP Archive Generation\nDESCRIPTION: This R script loads penguin body size data, performs multiple linear regression, and outputs model estimates and predictions as CSV files in a ZIP archive. It uses the palmerpenguins and zip packages for data processing and file compression.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-zip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n# Load required packages\nlibrary(palmerpenguins)\nlibrary(zip)\n\n# Load the penguins dataset\ndata(penguins)\n\n# Perform multiple linear regression\nmodel <- lm(body_mass_g ~ bill_length_mm + bill_depth_mm + flipper_length_mm + species, data = penguins)\n\n# Extract model estimates\nestimates <- as.data.frame(summary(model)$coefficients)\n\n# Generate predictions\npredictions <- data.frame(\n  actual = penguins$body_mass_g,\n  predicted = predict(model, newdata = penguins)\n)\n\n# Create temporary CSV files\nwrite.csv(estimates, \"estimates.csv\", row.names = TRUE)\nwrite.csv(predictions, \"predictions.csv\", row.names = FALSE)\n\n# Create ZIP archive\nzip::zip(\"penguin-mlr.zip\", c(\"estimates.csv\", \"predictions.csv\"))\n\n# Clean up temporary files\nfile.remove(c(\"estimates.csv\", \"predictions.csv\"))\n\n# Return the path to the ZIP file\n\"penguin-mlr.zip\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Top-level Variables\nDESCRIPTION: Shows how to declare top-level variables that can be referenced elsewhere on the page, demonstrating the basic building blocks of Framework's reactivity system.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 1, y = 2;\n```\n\n----------------------------------------\n\nTITLE: Creating Apache Parquet Data Loader with Random Walk Time Series\nDESCRIPTION: This code snippet shows how to generate synthetic time-series data using a random walk algorithm and save it as a Parquet file. The implementation uses apache-arrow for data structures and parquet-wasm for file output.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-parquet/README.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: JavaScript: Visualizing Language Statistics with Observable Plot\nDESCRIPTION: Creates a stacked bar chart showing most-frequently taught foreign languages in European countries using Observable Plot. Includes sorting, tooltips, and legend configuration.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-duckdb/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {axis: \"top\", grid: true},\n  color: {legend: true, unknown: \"grey\"},\n  marks: [\n    Plot.barX(languages, {\n      x: \"OBS_VALUE\",\n      y: \"geo\",\n      fill: \"language\",\n      order: \"-sum\",\n      sort: {y: \"-x\", color: {value: \"width\", reduce: \"sum\", limit: 9}},\n      tip: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Aggregation for Data Visualization (SQL)\nDESCRIPTION: Groups and counts stars in 2°×2° bins based on celestial coordinates (right ascension and declination) for visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  floor(ra / 2) * 2 + 1 AS ra,\n  floor(dec / 2) * 2 + 1 AS dec,\n  count() AS count\nFROM\n  gaia\nGROUP BY\n  1,\n  2\n```\n\n----------------------------------------\n\nTITLE: Implementing Snowflake Data Loader in TypeScript for Observable Framework\nDESCRIPTION: This code snippet demonstrates the structure of a data loader file that queries Snowflake and returns the results as CSV data. It utilizes a helper function from a separate Snowflake utility file.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-snowflake/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { querySnowflake } from \"./snowflake\";\n\nexport async function load() {\n  const data = await querySnowflake(`\n    SELECT *\n    FROM MY_TABLE\n    LIMIT 100\n  `);\n  return data;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Card Component in JSX\nDESCRIPTION: Creates a Card component in a separate JSX module file that accepts a title and children as props.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Card({title, children} = {}) {\n  return (\n    <div className=\"card\">\n      {title ? <h2>{title}</h2> : null}\n      {children}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a ZIP Archive with FileAttachment in JavaScript\nDESCRIPTION: Demonstrates how to load a ZIP archive using the FileAttachment API. This returns a promise to a ZipArchive object which is powered by JSZip internally.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst muybridge = FileAttachment(\"muybridge.zip\").zip();\n```\n\n----------------------------------------\n\nTITLE: Creating a Condition-Hazard Heatmap for Dam Risk Analysis in JavaScript\nDESCRIPTION: Generates a bubble chart that visualizes dam counts by both condition and hazard potential. The chart uses varying bubble sizes to represent quantity and positions bubbles on a grid where the x-axis shows condition and the y-axis shows hazard potential.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction conditionHeatmap(width, height) {\n  return Plot.plot({\n  width,\n  height,\n  marginRight: 10,\n  marginLeft: 100,\n  r: {range: [4, 20]},\n  y: {domain: [\"Undetermined\", \"Low\", \"Significant\", \"High\"],\n     label: \"Hazard potential\",\n     grid: true,\n     reverse: true},\n  x: {\n    domain: conditions,\n    label: \"Condition\",\n    grid: true\n    },\n  color: {domain: conditions, range: conditionsColors, label: \"Condition\"},\n    marks: [\n    Plot.dot(damsSelectedState, Plot.group({r: \"count\"},\n      {y: \"hazardPotential\",\n      x: \"conditionAssessment\",\n      tip: true,\n      fill: \"conditionAssessment\"\n      })\n    )\n  ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing flight delays with Plot\nDESCRIPTION: Creates a histogram of flight delays using Plot's rect mark and bin transform on Arrow table data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  y: {\n    transform: (d) => d / 1000,\n    label: \"Flights (thousands)\"\n  },\n  marks: [\n    Plot.rectY(flights, Plot.binX({y: \"count\"}, {x: \"delay\", interval: 5, fill: \"var(--theme-blue)\"})),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: BigQuery Client Configuration\nDESCRIPTION: Sets up the Google BigQuery client with authentication credentials from environment variables. Includes error checking for required credentials and exports a query execution function.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-bigquery/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\";\nimport {BigQuery} from \"@google-cloud/bigquery\";\n\nconst {BQ_PROJECT_ID, BQ_CLIENT_EMAIL, BQ_PRIVATE_KEY} = process.env;\n\nif (!BQ_PROJECT_ID) throw new Error(\"missing BQ_PROJECT_ID\");\nif (!BQ_CLIENT_EMAIL) throw new Error(\"missing BQ_CLIENT_EMAIL\");\nif (!BQ_PRIVATE_KEY) throw new Error(\"missing BQ_PRIVATE_KEY\");\n\nconst bigQueryClient = new BigQuery({\n  projectId: BQ_PROJECT_ID,\n  credentials: {\n    client_email: BQ_CLIENT_EMAIL,\n    private_key: BQ_PRIVATE_KEY\n  }\n});\n\nexport async function runQuery(query) {\n  return (await bigQueryClient.query({query}))[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Dam Data with Observable Plot\nDESCRIPTION: This JavaScript code creates a bar chart using Observable Plot to visualize dam counts by purpose, with color-coded hazard classifications. It demonstrates data aggregation and visual encoding of multiple variables.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marginLeft: 220,\n  color: {legend: true, domain: [\"Undetermined\", \"Low\", \"Significant\", \"High\"]},\n  marks: [\n    Plot.barX(dams,\n      Plot.groupY(\n        {x: \"count\"},\n        {\n          y: \"Primary Purpose\",\n          fill: \"Hazard Potential Classification\",\n          sort: {y: \"x\", reverse: true}\n        }\n      )\n    )\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing D3.js Library in Observable\nDESCRIPTION: This snippet shows how to import the D3.js library in an Observable notebook. It uses the npm package to import the entire D3 library.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/d3.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as d3 from \"npm:d3\";\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Mortgage Rate Charts with Observable Plot\nDESCRIPTION: This code snippet, embedded in the page's Markdown, uses Observable Plot to create interactive charts for visualizing mortgage rate trends. It includes an interactive brush for focusing on specific data ranges.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/index.md\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Creating a map with Plot's geo mark\nDESCRIPTION: Demonstrates how to visualize the shapefile data using Plot's geo mark with an orthographic projection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/shapefile.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {\n    type: \"orthographic\",\n    rotate: [110, -30],\n  },\n  marks: [\n    Plot.sphere(),\n    Plot.graticule(),\n    Plot.geo(collection, {fill: \"currentColor\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Visualizing Earthquake Magnitude Distribution with Observable Plot\nDESCRIPTION: This JavaScript snippet uses Observable Plot to create a histogram showing the distribution of earthquake magnitudes from the processed data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-zip/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.rectY(quakes, Plot.binX({y: \"count\"}, {x: \"mag\"})).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Complex SVG with Plot Integration using Hypertext Literal in JavaScript\nDESCRIPTION: This example demonstrates how to use the svg method to create an SVG containing two side-by-side charts generated with Plot, showcasing the integration of Hypertext Literal with data visualization tools.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/htl.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsvg`<svg width=\"400\" height=\"120\">\n  <g>\n    ${Plot.barY([3, 4, 2, 7, 5]).plot({margin: 20, width: 200, height: 120})}\n  </g>\n  <g transform=\"translate(200, 0)\">\n    ${Plot.barY([5, 1, 7, 6, 2]).plot({margin: 20, width: 200, height: 120})}\n  </g>\n</svg>`\n```\n\n----------------------------------------\n\nTITLE: Create Lollipop Chart of Dams by State - JavaScript\nDESCRIPTION: Builds a lollipop chart displaying the number of dams in each state using Plot.js. Inputs include dimensions for the plot and sorted dam data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction countsByState(width, height) {\n\n  return Plot.plot({\n    width,\n    height: height - 40,\n    marginTop: 10,\n    marginLeft: 100,\n    marginBottom: 35,\n    insetTop: -5,\n    insetBottom: -5,\n    color: {scheme: \"Viridis\"},\n    y: {label: \"State\"},\n    x: {label: \"Number of dams\", grid: true, ticks: 5, tickSize: 0},\n    marks: [\n      Plot.ruleY(dams, Plot.groupY({x: \"count\"}, {y: \"state\", strokeWidth: 0.5, sort: {y: \"x\", reverse: true}})),\n      Plot.dot(dams, Plot.groupY({x: \"count\", fill: \"count\"}, {y: \"state\", r: 4, stroke: \"currentColor\", strokeWidth: 0.5, tip: true, sort: {y: \"x\", reverse: true}, title: d => `${d.state}`}))\n    ]\n  });\n\n}\n```\n\n----------------------------------------\n\nTITLE: Google Analytics API Client Wrapper\nDESCRIPTION: Helper module that initializes the Google Analytics Data client with authentication credentials from environment variables. Provides a simplified runReport function to execute analytics queries.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"dotenv/config\";\nimport {BetaAnalyticsDataClient} from \"@google-analytics/data\";\n\nconst {GA_PROPERTY_ID, GA_CLIENT_EMAIL, GA_PRIVATE_KEY} = process.env;\n\nif (!GA_CLIENT_EMAIL) throw new Error(\"missing GA_CLIENT_EMAIL\");\nif (!GA_PRIVATE_KEY) throw new Error(\"missing GA_PRIVATE_KEY\");\n\nconst analyticsClient = new BetaAnalyticsDataClient({\n  credentials: {\n    client_email: GA_CLIENT_EMAIL,\n    private_key: GA_PRIVATE_KEY\n  }\n});\n\nconst defaultProperty = GA_PROPERTY_ID && `properties/${GA_PROPERTY_ID}`;\n\nexport async function runReport({property = defaultProperty, ...options} = {}) {\n  const [response] = await analyticsClient.runReport({property, ...options});\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Raster Plot with Projection in JavaScript\nDESCRIPTION: This snippet creates an advanced raster plot using Observable Plot with the Equal Earth projection. It demonstrates how to apply geographic projections, set bounds, and add graticules to the visualization of wind data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"equal-earth\",\n  color: {\n    label: \"UWND\",\n    legend: true,\n    scheme: \"rdbu\"\n  },\n  marks: [\n    Plot.raster(winds.getDataVariable(\"UWND\"), {\n      width: winds.header.dimensions[0].size,\n      height: winds.header.dimensions[1].size,\n      x1: -180,\n      y1: -90,\n      x2: 180,\n      y2: 90,\n      interpolate: \"barycentric\",\n      clip: \"sphere\"\n    }),\n    Plot.graticule({stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Component with JSX\nDESCRIPTION: Creates a simple Greeting component that accepts a subject prop and renders a greeting message with the subject in bold text.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Greeting({subject}) {\n  return <div>Hello, <b>{subject}</b>!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Flow Diagram with JavaScript\nDESCRIPTION: A JavaScript code snippet that generates a directed graph visualization using the dot template literal. The diagram illustrates the workflow for developing and publishing with Observable Framework, showing the steps from creation to viewing.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst digraph = dot`digraph {\n  rankdir=LR\n\n  create -> edit -> preview -> build -> deploy -> view\n  preview -> edit\n\n  subgraph cluster_develop {\n    label = \"develop\"\n    color = \"gray\"\n    edit\n    preview\n  }\n\n  subgraph cluster_publish {\n    label = \"publish\"\n    color = \"gray\"\n    build\n    deploy\n  }\n}`;`\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Chart with Resize Helper\nDESCRIPTION: This snippet demonstrates how to create a responsive chart that resizes based on its container. It uses Framework's resize helper function that re-renders the chart whenever the container size changes, passing the current width to the chart component.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-1\">\n  <div class=\"card\">${resize((width) => temperaturePlot(forecast, {width}))}</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Components for Hotel Reservations Visualization in JavaScript\nDESCRIPTION: Imports custom visualization components (DonutChart and bigNumber) and loads hotel reservation data from a CSV file. The data is loaded with typed values for further analysis.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DonutChart} from \"./components/donutChart.js\";\nimport {bigNumber} from \"./components/bigNumber.js\";\n\nconst hotelData = FileAttachment(\"data/hotelData.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Loading Electricity Grid Data Files\nDESCRIPTION: Loads various CSV and JSON data files containing electricity interchange, demand, forecast, and spatial information for balancing authorities.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst countryInterchangeSeries = FileAttachment(\"data/country-interchange.csv\").csv({typed: true});\n\nconst baHourlyDemand = FileAttachment(\"data/eia-ba-hourly.csv\").csv({typed: true});\n\nconst usDemandGenForecastAll = FileAttachment(\"data/us-demand.csv\").csv({typed: true});\n\nconst eiaConnRef = FileAttachment(\"data/eia-connections-reference.csv\").csv({typed: true});\n\nconst eiaBARef = FileAttachment(\"data/eia-bia-reference.csv\").csv({typed: true});\n\nconst us = FileAttachment(\"data/us-states.json\").json();\nconst nation = us.then((us) => us.features.find(({id}) => id === \"nation\"));\nconst statemesh = us.then((us) => us.features.find(({id}) => id === \"statemesh\"));\n\nconst eiaPoints = FileAttachment(\"data/eia-system-points.json\").json().then(d => d[0].data);\n```\n\n----------------------------------------\n\nTITLE: Parsing CSV File Content in JavaScript\nDESCRIPTION: Reads and parses the selected CSV file with the typed option enabled, which automatically converts appropriate values to numbers.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncsvfile.csv({typed: true})\n```\n\n----------------------------------------\n\nTITLE: Rendering Weather Location on Leaflet Map\nDESCRIPTION: Creates and configures a Leaflet map to visualize the forecast location using the GeoJSON data from the NWS API. Includes MapBox tiles and proper cleanup on invalidation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst ACCESS_TOKEN = \"pk.eyJ1Ijoib2JzZXJ2YWJsZWhxLWVuZy1hZG1pbiIsImEiOiJjbHMxaTBwdDkwYnRsMmpxeG12M2kzdWFvIn0.Ga6eIWP2YNQrEW4FzHRcTQ\";\nconst map = L.map(document.querySelector(\"#map\"));\nconst tile = L.tileLayer(`https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/256/{z}/{x}/{y}@2x?access_token=${ACCESS_TOKEN}`, {attribution: '© <a href=\"https://www.mapbox.com/feedback/\">Mapbox</a> © <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'}).addTo(map);\nconst geo = L.geoJSON().addData(forecast).addTo(map);\nmap.fitBounds(geo.getBounds(), {padding: [50, 50]});\ninvalidation.then(() => map.remove());\n```\n\n----------------------------------------\n\nTITLE: Import Deck.gl Components for Interactive Map - JavaScript\nDESCRIPTION: This snippet imports the necessary components from deck.gl for rendering interactive maps. Dependencies include the deck.gl library from npm. It prepares components like DeckGL, AmbientLight, GeoJsonLayer, and others for constructing the map visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Import deck.gl components for interactive map\nimport deck from \"npm:deck.gl\";\n\nconst {DeckGL, AmbientLight, GeoJsonLayer, TextLayer, HexagonLayer, LightingEffect, PointLight, ScatterplotLayer} = deck;\n```\n\n----------------------------------------\n\nTITLE: Loading DSV File with Custom Delimiter in JavaScript\nDESCRIPTION: This snippet shows how to load a DSV file with a semicolon delimiter using FileAttachment and custom options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst capitals = FileAttachment(\"us-state-capitals.csv\").dsv({delimiter: \";\", typed: true});\n```\n\n----------------------------------------\n\nTITLE: Importing Mapbox GL JS in Observable Framework\nDESCRIPTION: Demonstrates how to import the Mapbox GL JS library into an Observable Framework project. The import statement brings in the library from npm, and the framework automatically adds the required stylesheet to the page.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mapbox-gl.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mapboxgl from \"npm:mapbox-gl\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Visualization with resize Function\nDESCRIPTION: Demonstrates how to use the resize function to create a responsive chart within a card container that adapts to width changes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n  ${resize((width) => Plot.barX([9, 4, 8, 1, 11, 3, 4, 2, 7, 5]).plot({width}))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Bar Chart for Dam Conditions in JavaScript\nDESCRIPTION: Generates a horizontal stacked bar chart displaying dam counts by condition category. Uses Plot.js to create a visualization with color-coded bars representing different condition states and includes tooltips for detailed information on hover.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst conditionCounts = d3\n  .flatRollup(\n    damsSelectedState,\n    (d) => d.length,\n    (v) => v.conditionAssessment\n  )\n  .map(([condition, count]) => ({ condition, count }));\n\n// Stacked horizontal (1-D) bar chart of conditions\nfunction stackedBarChart(width) {\n  return Plot.plot({\n    width,\n    height: 50,\n    //marginTop: 40,\n    //marginBottom: 30,\n    color: { domain: conditions, range: conditionsColors, legend: true },\n    x: { label: \"Number of dams\" },\n    marks: [\n      Plot.barX(\n        conditionCounts,\n        Plot.stackX({\n          x: \"count\",\n          fill: \"condition\",\n          order: conditions,\n          tip: true,\n          rx: 2,\n          insetRight: 1\n        })\n      )\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Geolocation Component in JavaScript\nDESCRIPTION: A function that creates a location selection component with a 'Locate me' button that uses the browser's geolocation API to determine the user's coordinates. Returns a form element with the location data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst location = view(Locator([-122.47, 37.8]));\n\nfunction Locator(initialValue) {\n  const form = html`<form style=\"font: 12px var(--sans-serif); display: flex; height: 33px; align-items: center;\">\n  <button name=b type=button style=\"margin-right: 0.5em;\">Locate me</button>\n  <output name=o></output>\n</form>`;\n  form.b.onclick = async event => {\n    form.value = await new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(\n        ({coords: {longitude, latitude}}) => {\n          form.o.value = \"Located!\";\n          resolve([longitude, latitude]);\n        },\n        (error) => {\n          form.o.value = \"Error!\";\n          reject(error);\n        }\n      );\n      form.o.value = \"Locating…\";\n    });\n    form.dispatchEvent(new CustomEvent(\"input\", {bubbles: true}));\n  };\n  form.value = initialValue;\n  return form;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing SQL Results with Plot (JavaScript)\nDESCRIPTION: Uses the Plot library to create a raster visualization of the binned star count data from the previous SQL query.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  x: {domain: [0, 360]},\n  y: {domain: [-90, 90]},\n  marks: [\n    Plot.frame({fill: 0}),\n    Plot.raster(bins, {\n      x: \"ra\",\n      y: \"dec\",\n      fill: \"count\",\n      width: 360 / 2,\n      height: 180 / 2,\n      imageRendering: \"pixelated\"\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming shapefile data to a canvas with D3\nDESCRIPTION: Shows a more advanced approach using streaming to render shapefile data to a canvas element using D3's geoPath and a custom rendering loop.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/shapefile.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst canvas = document.querySelector(\"#map-canvas\");\nconst context = canvas.getContext(\"2d\");\ncontext.fillStyle = getComputedStyle(canvas).color;\ncontext.clearRect(0, 0, canvas.width, canvas.height);\n\nconst path = d3.geoPath(d3.geoEquirectangular(), context);\nconst source = await shapefile.open(\n  ...(await Promise.all([\n    FileAttachment(\"ne_110m_land/ne_110m_land.shp\").stream(),\n    FileAttachment(\"ne_110m_land/ne_110m_land.dbf\").stream()\n  ]))\n);\n\nwhile (true) {\n  const {done, value} = await source.read();\n  if (done) break;\n  context.beginPath();\n  path(value);\n  context.fill();\n}\n```\n\n----------------------------------------\n\nTITLE: Loading SQLite Database from URL\nDESCRIPTION: Demonstrates loading a SQLite database from an external URL rather than a local file attachment, useful for accessing live databases without rebuilding.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = SQLiteDatabaseClient.open(\"https://static.observableusercontent.com/files/b3711cfd9bdf50cbe4e74751164d28e907ce366cd4bf56a39a980a48fdc5f998c42a019716a8033e2b54defdd97e4a55ebe4f6464b4f0678ea0311532605a115\");\n```\n\n----------------------------------------\n\nTITLE: Loading Parquet File Data\nDESCRIPTION: This snippet demonstrates how to load data from a Parquet file using the `FileAttachment.parquet` method, which returns a promise to an Apache Arrow table. The table contains columns `date` and `value`, though the `date` values are represented as numbers, indicating data type conversion during serialization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-parquet/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst samples = FileAttachment(\"./data/samples.parquet\").parquet();\n```\n\n----------------------------------------\n\nTITLE: Performing K-means Clustering on Penguin Data and Generating CSV in R\nDESCRIPTION: This R script reads penguin data, performs k-means clustering on culmen measurements, and outputs the results as a CSV. It requires the readr, dplyr, and tidyr libraries.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-csv/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n# Attach libraries (must be installed)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Data access, wrangling and analysis\npenguins <- read_csv(\"docs/data-files/penguins.csv\") |>\n  drop_na(culmen_depth_mm, culmen_length_mm)\n\npenguin_kmeans <- penguins |>\n  select(culmen_depth_mm, culmen_length_mm) |>\n  scale() |>\n  kmeans(centers = 3)\n\npenguin_clusters <- penguins |>\n  mutate(cluster = penguin_kmeans$cluster)\n\n# Convert data frame to delimited string, then write to standard output\ncat(format_csv(penguin_clusters))\n```\n\n----------------------------------------\n\nTITLE: Mermaid Class Diagram Example\nDESCRIPTION: Demonstrates creation of a class diagram showing relationships between different classes including inheritance, composition, and associations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mermaid.md#2025-04-21_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n```\n\n----------------------------------------\n\nTITLE: Define Color Range and Effects for Map Visualization - JavaScript\nDESCRIPTION: Defines color schemes and lighting effects for rendering the interactive map, specifying colors for fewer to more dams and various lighting effects to enhance the visualization. Utilizes Plot.js for plotting settings and deck.gl for lighting effects.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst colorRange = [\n  [59, 82, 139],\n  [33, 145, 140],\n  [94, 201, 98],\n  [253, 231, 37]\n];\n\nconst colorLegend = Plot.plot({\n  margin: 0,\n  marginTop: 30,\n  marginRight: 20,\n  width: 450,\n  height: 50,\n  style: \"color: 'currentColor';\",\n  x: {padding: 0, axis: null},\n  marks: [\n    Plot.cellX(colorRange, {fill: ([r, g, b]) => `rgb(${r},${g},${b})`, inset: 2}),\n    Plot.text([\"Fewer dams\"], {frameAnchor: \"top-left\", dy: -12}),\n    Plot.text([\"More dams\"], {frameAnchor: \"top-right\", dy: -12})\n  ]\n});\n\nconst effects = [\n  new LightingEffect({\n    ambientLight: new AmbientLight({color: [255, 255, 255], intensity: 1}),\n    pointLight: new PointLight({color: [255, 255, 255], intensity: 0.8, position: [-0.144528, 49.739968, 80000]}),\n    pointLight2: new PointLight({color: [255, 255, 255], intensity: 0.8, position: [-3.807751, 54.104682, 8000]})\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Bridget Riley-inspired Animation with D3.js and Canvas\nDESCRIPTION: This code creates an interactive op art animation using D3.js and HTML Canvas. It generates concentric circles with wave-like patterns that rotate slowly around the center, inspired by Bridget Riley's work. The animation uses requestAnimationFrame for smooth rendering and adapts to the available display width.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/404.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as d3 from \"npm:d3\";\n\nconst height = Math.min(640, width);\nconst point = (cx, cy, r, a) => [cx + r * Math.cos(a), cy + r * Math.sin(a)];\nconst circles = [];\nconst random = d3.randomLcg(42);\nconst n = 80;\nlet a = 0.2;\nlet x = width / 2;\nlet y = height / 2;\nlet r = Math.hypot(width, height) / 2;\nlet dr = r / 6.5;\n\nwhile (r > 0) {\n  circles.push({x, y, r, a});\n  const t = random() * 2 * Math.PI;\n  const s = Math.sqrt((random() * dr * dr) / 4);\n  x += Math.cos(t) * s;\n  y += Math.sin(t) * s;\n  r -= dr;\n  a = -a;\n}\n\nconst canvas = display(document.createElement(\"canvas\"));\ncanvas.width = width * devicePixelRatio;\ncanvas.height = height * devicePixelRatio;\ncanvas.style.width = `${width}px`;\n\nconst context = canvas.getContext(\"2d\");\ncontext.scale(devicePixelRatio, devicePixelRatio);\n\n(function frame(elapsed) {\n  context.save();\n  context.clearRect(0, 0, width, height);\n  context.translate(width / 2, height / 2);\n  context.rotate(Math.sin(elapsed / 50000));\n  context.translate(-width / 2, -height / 2);\n  context.beginPath();\n  for (let i = 0; i < n; ++i) {\n    let move = true;\n    d3.pairs(circles, ({x: x1, y: y1, r: r1, a: a1}, {x: x2, y: y2, r: r2, a: a2}) => {\n      const ai = ((i * 2) / n) * Math.PI;\n      context[move ? ((move = false), \"moveTo\") : \"lineTo\"](...point(x1, y1, r1, a1 + ai));\n      context.lineTo(...point(x2, y2, r2, a2 + ai));\n    });\n    d3.pairs(circles.slice().reverse(), ({x: x1, y: y1, r: r1, a: a1}, {x: x2, y: y2, r: r2, a: a2}) => {\n      const ai = ((i * 2 + 1) / n) * Math.PI;\n      context.lineTo(...point(x1, y1, r1, a1 + ai));\n      context.lineTo(...point(x2, y2, r2, a2 + ai));\n    });\n    context.closePath();\n  }\n  context.fillStyle = getComputedStyle(canvas).getPropertyValue(\"color\");\n  context.fill();\n  context.restore();\n  if (canvas.isConnected) requestAnimationFrame(frame);\n})();\n```\n\n----------------------------------------\n\nTITLE: Loading SQLite Database from File Attachment\nDESCRIPTION: Demonstrates how to create a SQLite database client from a file attachment using the convenient .sqlite() method, which handles loading the database file.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = FileAttachment(\"chinook.db\").sqlite();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Word Frequencies with Observable Plot\nDESCRIPTION: This JavaScript code creates a bar chart using Observable Plot to visualize the top words in Book 1 of War and Peace. It filters the data, sorts by word frequency, and uses color to represent different chapters.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-json/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.barY(text, {\n      filter: (d) => d.book === \"Book 1\",\n      x: \"word\",\n      y: \"n\",\n      fill: \"chapter\",\n      tip: true,\n      sort: {x: \"y\", limit: 5, reverse: true}\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Reactive Variables for Inputs\nDESCRIPTION: JavaScript code that sets up a number input and creates a reactive generator that other code can reference.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst numberInput = Inputs.input(0);\nconst number = Generators.input(numberInput);\n```\n\n----------------------------------------\n\nTITLE: Managing Date Range State for Mortgage Data Visualization in JavaScript\nDESCRIPTION: This snippet sets up state management for the date range of mortgage data to be displayed. It uses Mutable for state management and defines functions to get and set the date range.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultStartEnd = [pmms.at(-53).date, pmms.at(-1).date];\nconst startEnd = Mutable(defaultStartEnd);\nconst setStartEnd = (se) => startEnd.value = (se ?? defaultStartEnd);\nconst getStartEnd = () => startEnd.value;\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Maps and Histogram with Mosaic vgplot\nDESCRIPTION: Creates two interactive maps showing taxi pickup and dropoff locations, along with a histogram of ride times. Uses crossfiltering to coordinate the views.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mosaic.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a shared filter\nconst $filter = vg.Selection.crossfilter();\n\n// Shared attributes for the maps\nconst attributes = [\n  vg.width(315),\n  vg.height(550),\n  vg.margin(0),\n  vg.xAxis(null),\n  vg.yAxis(null),\n  vg.xDomain([297000, 297000 + 28.36 * 315]),\n  vg.yDomain([57900, 57900 + 28.36 * 550]), // ensure aspect ratio of 1\n  vg.colorScale(\"symlog\")\n];\n\n// Create two side-by-side maps\nconst maps = vg.hconcat(\n  vg.plot(\n    vg.raster(vg.from(\"trips\", {filterBy: $filter}), {x: \"px\", y: \"py\", imageRendering: \"pixelated\"}),\n    vg.intervalXY({as: $filter}),\n    vg.text([{label: \"Taxi pickups\"}], {\n      dx: 10,\n      dy: 10,\n      text: \"label\",\n      fill: \"white\",\n      frameAnchor: \"top-left\"\n    }),\n    ...attributes,\n    vg.colorScheme(\"turbo\"),\n    vg.frame({stroke: \"black\"})\n  ),\n  vg.hspace(10),\n  vg.plot(\n    vg.raster(vg.from(\"trips\", {filterBy: $filter}), {x: \"dx\", y: \"dy\", imageRendering: \"pixelated\"}),\n    vg.intervalXY({as: $filter}),\n    vg.text([{label: \"Taxi dropoffs\"}], {\n      dx: 10,\n      dy: 10,\n      text: \"label\",\n      fill: \"white\",\n      frameAnchor: \"top-left\"\n    }),\n    ...attributes,\n    vg.colorScheme(\"turbo\"),\n    vg.frame({stroke: \"black\"})\n  )\n);\n\n// Create the histogram\nconst histogram = vg.plot(\n  vg.rectY(vg.from(\"trips\"), {x: vg.bin(\"time\"), y: vg.count(), insetLeft: 0.5, insetRight: 0.5}),\n  vg.intervalX({as: $filter}),\n  vg.yTickFormat(\"s\"),\n  vg.xLabel(\"Hour of pickup\"),\n  vg.yLabel(\"Number of rides\"),\n  vg.width(640),\n  vg.height(100)\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Model Estimates and Predictions using Inputs.table in JavaScript\nDESCRIPTION: These JavaScript snippets use Inputs.table to display the model estimates and predictions data loaded from the CSV files.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-zip/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nInputs.table(modelEstimates)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nInputs.table(modelPredictions)\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data in Observable Notebook\nDESCRIPTION: This code loads the JSON data generated by the GitHub data loader into an Observable notebook using FileAttachment.json().\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-github/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst issues = FileAttachment(\"./data/issues.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Table in JavaScript\nDESCRIPTION: This snippet shows how to display a data table using the Inputs.table function in JavaScript. It assumes the 'edits' variable contains the loaded CSV data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(edits)\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Array Interpolation (JavaScript)\nDESCRIPTION: Demonstrates how to interpolate array values into a SQL query string to work around limitations with prepared statements.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst source_ids = [2028328031008716288n, 2076498116457016960n, 4315266827603868160n, 4123529214004874624n, 5312548578630777344n];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(await sql([`SELECT * FROM gaia WHERE source_id IN (${[source_ids]})`]))\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart with Observable Plot in JavaScript\nDESCRIPTION: This code creates a time-series line chart using Observable Plot to visualize hourly temperature forecasts. It sets up a plot with proper axis formatting and uses temperature data from a forecast API to draw a step line with temperature-based coloring.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(\n  Plot.plot({\n    title: \"Hourly temperature forecast\",\n    x: {type: \"utc\", ticks: \"day\", label: null},\n    y: {grid: true, inset: 10, label: \"Degrees (F)\"},\n    marks: [\n      Plot.lineY(forecast.properties.periods, {\n        x: \"startTime\",\n        y: \"temperature\",\n        z: null, // varying color, not series\n        stroke: \"temperature\",\n        curve: \"step-after\"\n      })\n    ]\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Parquet data with Inputs.table\nDESCRIPTION: Shows how to display Parquet file data (loaded as an Arrow table) using Observable's Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nInputs.table(gaia)\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeObserver for iframe content in JavaScript\nDESCRIPTION: This code uses a ResizeObserver to monitor the content height of the embedded page and send a message to the parent frame with the new height.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst observer = new ResizeObserver(([entry]) => parent.postMessage({height: entry.target.offsetHeight}, \"*\"));\nobserver.observe(document.documentElement);\ninvalidation.then(() => observer.disconnect());\n```\n\n----------------------------------------\n\nTITLE: Generating a US Map PNG with node-canvas and D3.js\nDESCRIPTION: A Node.js script that fetches US map data from the US Atlas package, renders county and state boundaries on a canvas using D3.js and topojson-client, and outputs the result as a PNG image to standard output. The map is rendered with various styling for different boundary types.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-canvas-to-png/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {createCanvas} from \"canvas\";\nimport {geoPath} from \"d3\";\nimport * as topojson from \"topojson-client\";\n\n// Get the map file from the US Atlas package\n// https://github.com/topojson/us-atlas\nconst url = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-albers-10m.json\";\nconst us = await fetch(url).then(response => response.json());\n\n// Create and configure a canvas\nconst width = 975;\nconst height = 610;\nconst canvas = createCanvas(width * 2, height * 2);\nconst context = canvas.getContext(\"2d\");\ncontext.scale(2, 2);\n\n// https://observablehq.com/@d3/u-s-map-canvas\ncontext.lineJoin = \"round\";\ncontext.lineCap = \"round\";\n// Use the null projection, since coordinates in US Atlas are already projected.\nconst path = geoPath(null, context);\n\ncontext.fillStyle = \"#fff\";\ncontext.fillRect(0, 0, width, height);\n\ncontext.beginPath();\npath(topojson.mesh(us, us.objects.counties, (a, b) => a !== b && (a.id / 1000 | 0) === (b.id / 1000 | 0)));\ncontext.lineWidth = 0.5;\ncontext.strokeStyle = \"#aaa\";\ncontext.stroke();\n\ncontext.beginPath();\npath(topojson.mesh(us, us.objects.states, (a, b) => a !== b));\ncontext.lineWidth = 0.5;\ncontext.strokeStyle = \"#000\";\ncontext.stroke();\n\ncontext.beginPath();\npath(topojson.feature(us, us.objects.nation));\ncontext.lineWidth = 1;\ncontext.strokeStyle = \"#000\";\ncontext.stroke();\n\n// Write the canvas to a PNG buffer\nconst buffer = canvas.toBuffer(\"image/png\");\n\n// Pipe the buffer to process.stdout\nprocess.stdout.write(buffer);\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Input Components\nDESCRIPTION: Various implementations of select inputs using ObservableHQ's Inputs.select, including single selection, multiple selection, and formatted options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/select.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = view(Inputs.select(x11colors, {value: \"steelblue\", label: \"Favorite color\"}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst colors = view(Inputs.select(x11colors, {multiple: true, label: \"Favorite colors\"}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst fewerColors = view(Inputs.select(x11colors, {multiple: 4, label: \"Favorite colors\"}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst maybeColor = view(Inputs.select([null].concat(x11colors), {label: \"Favorite color\"}));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst favorite = view(\n  Inputs.select(teams, {\n    label: \"Favorite team\",\n    format: (t) => t.name,\n    value: teams.find((t) => t.name === \"Warriors\")\n  })\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst size = view(\n  Inputs.select(\n    new Map([\n      [\"Short\", 8],\n      [\"Tall\", 12],\n      [\"Grande\", 16],\n      [\"Venti\", 20]\n    ]),\n    {value: 12, label: \"Size\"}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst size2 = view(\n  Inputs.select(\n    new Map([\n      [\"Short\", 8],\n      [\"Tall\", 12],\n      [\"Grande\", 16],\n      [\"Venti\", 20]\n    ]),\n    {value: 12, label: \"Size\", format: ([name, value]) => `${name} (${value} oz)`}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sportAthletes = view(\n  Inputs.select(\n    d3.group(olympians, (d) => d.sport),\n    {label: \"Sport\"}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst sport = view(\n  Inputs.select(\n    olympians.map((d) => d.sport),\n    {label: \"Sport\", sort: true, unique: true}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.select([\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"], {label: \"Vowel\", disabled: true})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.select([\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"], {label: \"Vowel\", disabled: [\"Y\"]})\n```\n\n----------------------------------------\n\nTITLE: Displaying TSV Data in a Table using Inputs in JavaScript\nDESCRIPTION: This snippet demonstrates how to display the loaded TSV data in a table format using the Inputs.table function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(capitals)\n```\n\n----------------------------------------\n\nTITLE: Configuring Observable Framework App Settings in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a basic configuration file for an Observable Framework app, including setting the app title and defining sidebar pages.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  title: \"My awesome app\",\n  pages: [\n    {name: \"Getting ever more awesome\", path: \"/getting-awesome\"},\n    {name: \"Being totally awesome\", path: \"/being-awesome\"},\n    {name: \"Staying as awesome as ever\", path: \"/staying-awesome\"}\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: WebSocket Data Stream Generator\nDESCRIPTION: Implements a generator that streams Bitcoin price data from a WebSocket connection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst socket = new WebSocket(\"wss://ws.eodhistoricaldata.com/ws/crypto?api_token=demo\");\ninvalidation.then(() => socket.close());\nsocket.addEventListener(\"open\", () => socket.send(JSON.stringify({action: \"subscribe\", symbols: \"BTC-USD\"})));\nconst btc = Generators.observe((notify) => {\n  let currentValue;\n  const messaged = (event) => {\n    const m = JSON.parse(event.data);\n    const v = +m.p;\n    if (isNaN(v) || v === currentValue) return;\n    notify((currentValue = v));\n  };\n  socket.addEventListener(\"message\", messaged);\n  return () => socket.removeEventListener(\"message\", messaged);\n});\n```\n\n----------------------------------------\n\nTITLE: Create Searchable Table for U.S. Dams Data - JavaScript\nDESCRIPTION: Implements a searchable table interface for dam data using Inputs and Generators APIs. This setup allows dynamic querying of dam information such as name, state, and condition. Inputs for this snippet involve the dams data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// For search with table\nconst searchUsDams = Inputs.search(dams);\n\nconst searchUsDamsValue = Generators.input(searchUsDams);\n```\n\n----------------------------------------\n\nTITLE: Basic Table Input Usage in JavaScript\nDESCRIPTION: Demonstrates the basic usage of Inputs.table() function to display tabular data from the 'penguins' dataset.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins)\n```\n\n----------------------------------------\n\nTITLE: Complex Graph with Subgraphs in DOT\nDESCRIPTION: Creates a more complex directed graph featuring clusters, subgraphs, custom node shapes, and multiple connections between process flows.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_5\n\nLANGUAGE: dot\nCODE:\n```\ndigraph G {\n  subgraph cluster_0 {\n    a0 -> a1 -> a2 -> a3\n    label = \"process #1\"\n    color = lightblue\n  }\n  subgraph cluster_1 {\n    b0 -> b1 -> b2 -> b3\n    label = \"process #2\"\n    color = orange\n  }\n  start -> a0\n  start -> b0\n  a1 -> b3\n  b2 -> a3\n  a3 -> a0\n  a3 -> end\n  b3 -> end\n  start [shape = diamond]\n  end [shape = square]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Input with Predefined Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a color input with a predefined list of color options using the datalist property.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/color.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst stroke = view(Inputs.color({label: \"Stroke\", datalist: d3.schemeTableau10}));\n```\n\n----------------------------------------\n\nTITLE: Setting up Interactive Controls for deck.gl Visualization\nDESCRIPTION: This code sets up interactive range inputs for controlling the coverage, radius, and upper percentile of the hexagon layer visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst coverage = view(Inputs.range([0, 1], {value: 0.5, label: \"Coverage\", step: 0.01}));\nconst radius = view(Inputs.range([500, 20000], {value: 1000, label: \"Radius\", step: 100}));\nconst upperPercentile = view(Inputs.range([0, 100], {value: 100, label: \"Upper percentile\", step: 1}));\n```\n\n----------------------------------------\n\nTITLE: Loading a Parquet file with FileAttachment\nDESCRIPTION: Shows how to load an Apache Parquet file using FileAttachment, which returns an Arrow table using parquet-wasm library.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst gaia = FileAttachment(\"gaia-sample.parquet\").parquet();\n```\n\n----------------------------------------\n\nTITLE: Equal Earth Projection Visualization\nDESCRIPTION: Creates an advanced visualization using the Equal Earth projection with geographic coordinate bounds and graticule overlay.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/geotiff/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width,\n  projection: \"equal-earth\",\n  color: {label: \"SFCTMP\", legend: true},\n  marks: [\n    Plot.raster(values, {\n      width: image.getWidth(),\n      height: image.getHeight(),\n      x1: 0,\n      y1: 90,\n      x2: 360,\n      y2: -90,\n      interpolate: \"barycentric\",\n      clip: \"sphere\"\n    }),\n    Plot.graticule({stroke: \"black\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Simulating Poker Hands in Rust\nDESCRIPTION: A Rust script that uses Monte Carlo simulation to generate millions of poker hands, categorize them, and output statistics as JSON. It utilizes parallel processing for improved performance.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-rust-to-json/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#!/usr/bin/env rust-script\n//! Since Framework uses rust-script, we can define dependencies here.\n//!\n//! ```cargo\n//! [dependencies]\n//! serde = { version = \"1.0.203\", features = [\"derive\"] }\n//! serde_json = \"1.0.117\"\n//! rand = \"0.8.5\"\n//! rayon = \"1.10.0\"\n//! ```\n\nuse rand::Rng;\nuse rayon::prelude::*;\nuse serde::Serialize;\nuse serde_json::json;\nuse std::collections::HashMap;\n\nfn main() {\n    const COUNT: u32 = 10_000_000;\n    let start = std::time::Instant::now();\n\n    let counts = (0..COUNT)\n        // This line breaks the work up into multiple parallel jobs.\n        .into_par_iter()\n        // Calculate the category of random hands\n        .map(|_| {\n            let hand = Hand::random();\n            // Convert the category into a one-element hashmap, so the reducer\n            // can sum up all the counts for each category.\n            let mut map = HashMap::new();\n            map.insert(hand.categorize(), 1);\n            map\n        })\n        // count up each category\n        .reduce(\n            || HashMap::with_capacity(10),\n            |mut acc, map| {\n                for (category, count) in map {\n                    *acc.entry(category).or_insert(0) += count;\n                }\n                acc\n            },\n        );\n\n    let mut tidy_data = counts\n        .into_iter()\n        .map(|(category, count)| SummaryRow { category, count })\n        .collect::<Vec<_>>();\n    tidy_data.sort_by_key(|data| data.category);\n\n    serde_json::to_writer(std::io::stdout(), &json!({\n        \"summary\": tidy_data,\n        \"meta\": { \"count\": COUNT, \"duration_ms\": start.elapsed().as_millis() },\n    })).unwrap();\n}\n\n// Here, we create types for the domain model of a poker hand. Working with\n// specific types helps makes the rest of the code simpler.\n\n#[derive(Debug, Clone, Serialize)]\nstruct SummaryRow {\n    category: HandCategory,\n    count: u32,\n}\n\n#[derive(Debug, PartialEq, Clone, Serialize)]\nstruct Hand(Vec<Card>);\n\n#[derive(Debug, PartialEq, Clone, Copy, Serialize)]\nstruct Card {\n    /// 1 is an Ace, 2-10 are the numbered cards, 11 is Jack, 12 is Queen, 13 is King.\n    rank: u8,\n    suit: Suit,\n}\n\n#[derive(Debug, PartialEq, Eq, Clone, Copy, Serialize, Hash)]\nenum Suit {\n    Clubs,\n    Diamonds,\n    Hearts,\n    Spades,\n}\n\n#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy, Serialize)]\nenum HandCategory {\n    HighCard,\n    OnePair,\n    TwoPair,\n    ThreeOfAKind,\n    Straight,\n    Flush,\n    FullHouse,\n    FourOfAKind,\n    StraightFlush,\n}\n\n// With the data domain specified, we can write the logic to generate hands and categorize them.\n\nimpl Hand {\n    /// Generate a random 5 card hand\n    fn random() -> Self {\n        let mut rng = rand::thread_rng();\n        let mut cards = Vec::with_capacity(5);\n        while cards.len() < 5 {\n            let rank = rng.gen_range(1..=13);\n            let suit = match rng.gen_range(0..4) {\n                0 => Suit::Clubs,\n                1 => Suit::Diamonds,\n                2 => Suit::Hearts,\n                3 => Suit::Spades,\n                _ => unreachable!(),\n            };\n            let card = Card { rank, suit };\n            if cards.iter().any(|&c| c == card) { continue };\n            cards.push(card);\n        }\n        Self(cards)\n    }\n\n    fn categorize(&self) -> HandCategory {\n        let rank_counts = self.0.iter().fold(HashMap::new(), |mut acc, card| {\n            *acc.entry(card.rank).or_insert(0) += 1;\n            acc\n        });\n        let suit_counts = self.0.iter().fold(HashMap::new(), |mut acc, card| {\n            *acc.entry(card.suit).or_insert(0) += 1;\n            acc\n        });\n        let is_flush = suit_counts.len() == 1;\n        let is_straight = if self.0.iter().any(|card| card.rank == 1) {\n            // Handle aces\n            let min_rank = self.0.iter().map(|card| card.rank).filter(|&rank| rank != 1).min().unwrap();\n            let max_rank = self.0.iter().map(|card| card.rank).filter(|&rank| rank != 1).max().unwrap();\n            (min_rank == 2 && max_rank == 5) || (min_rank == 10 && max_rank == 13)\n        } else {\n            let min_rank = self.0.iter().map(|card| card.rank).min().unwrap();\n            let max_rank = self.0.iter().map(|card| card.rank).max().unwrap();\n            (max_rank - min_rank) as usize == self.0.len() - 1\n        };\n\n        if is_flush && is_straight {\n            HandCategory::StraightFlush\n        } else if rank_counts.values().any(|&count| count == 4) {\n            HandCategory::FourOfAKind\n        } else if rank_counts.values().any(|&count| count == 3)\n            && rank_counts.values().any(|&count| count == 2)\n        {\n            HandCategory::FullHouse\n        } else if is_flush {\n            HandCategory::Flush\n        } else if is_straight {\n            HandCategory::Straight\n        } else if rank_counts.values().any(|&count| count == 3) {\n            HandCategory::ThreeOfAKind\n        } else if rank_counts.values().filter(|&&count| count == 2).count() == 2 {\n            HandCategory::TwoPair\n        } else if rank_counts.values().any(|&count| count == 2) {\n            HandCategory::OnePair\n        } else {\n            HandCategory::HighCard\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Formatting Google Analytics Active Users Data\nDESCRIPTION: Fetches active users metric from Google Analytics API and formats the data into CSV. Uses d3-dsv for CSV formatting and includes a date parsing utility function to convert YYYYMMDD format to ISO 8601.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\nimport {runReport} from \"./google-analytics.js\";\n\nconst {rows} = await runReport({\n  dateRanges: [{startDate: \"2023-06-01\", endDate: \"2023-09-01\"}],\n  dimensions: [{name: \"date\"}],\n  metrics: [{name: \"activeUsers\"}],\n  orderBys: [{dimension: {dimensionName: \"date\"}}]\n});\n\nprocess.stdout.write(\n  csvFormat(\n    rows.map((d) => ({\n      date: parseDate(d.dimensionValues[0].value),\n      value: d.metricValues[0].value\n    }))\n  )\n);\n\nfunction parseDate(date) {\n  return new Date(`${date.slice(0, 4)}-${date.slice(4, 6)}-${date.slice(6, 8)}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Dam Data by State\nDESCRIPTION: Filters the dam information to include only those located within the user-selected state. This operation is crucial for providing a focused view of dam conditions pertinent to specific geographic areas.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get dams just for the selected state\nconst damsSelectedState = dams.filter((d) => d.state == pickState);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data with Observable Plot\nDESCRIPTION: Creates a line chart visualization of sunshine hours data using Observable Plot.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {tickFormat: Plot.formatMonth()},\n  y: {grid: true, label: \"Hours of sunshine ☀️ per month\"},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(dt, {y: \"Seattle\", marker: true, stroke: \"red\"}),\n    Plot.lineY(dt, {y: \"Chicago\", marker: true, stroke: \"turquoise\"}),\n    Plot.lineY(dt, {y: \"San Francisco\", marker: true, stroke: \"orange\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Framework Deployment\nDESCRIPTION: GitHub Actions workflow configuration that automatically builds and deploys a Framework app to GitHub Pages. Supports automated deployments on push to main branch, daily scheduled builds, and manual triggers.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/deploying.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy\n\non:\n  # Run this workflow whenever a new commit is pushed to main.\n  push: {branches: [main]}\n  # Run this workflow once per day, at 10:15 UTC\n  schedule: [{cron: \"15 10 * * *\"}]\n  # Run this workflow when triggered manually in GitHub's UI.\n  workflow_dispatch: {}\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 22\n          cache: npm\n      - run: npm ci\n      - run: npm run build\n      - uses: actions/configure-pages@v4\n      - uses: actions/upload-pages-artifact@v3\n        with:\n          path: dist\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Data Loader for USGS Earthquake Data to ZIP\nDESCRIPTION: This Python script fetches USGS earthquake data, processes it, and outputs a ZIP file containing metadata as JSON and earthquake records as CSV. It uses requests for API calls, pandas for data manipulation, and zipfile for creating the ZIP archive.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-zip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport io\nimport json\nimport zipfile\n\nimport pandas as pd\nimport requests\n\n# Fetch earthquake data from USGS API\nurl = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson\"\nresponse = requests.get(url)\ndata = response.json()\n\n# Extract relevant information\nmetadata = {\n    \"title\": data[\"metadata\"][\"title\"],\n    \"count\": data[\"metadata\"][\"count\"],\n    \"api\": data[\"metadata\"][\"api\"],\n    \"status\": data[\"metadata\"][\"status\"],\n    \"generated\": data[\"metadata\"][\"generated\"]\n}\n\n# Convert features to DataFrame\ndf = pd.json_normalize(data[\"features\"])\n\n# Select and rename columns\ndf = df[[\n    \"id\", \"properties.mag\", \"properties.place\", \"properties.time\",\n    \"properties.updated\", \"properties.tz\", \"properties.url\", \"properties.detail\",\n    \"properties.felt\", \"properties.cdi\", \"properties.mmi\", \"properties.alert\",\n    \"properties.status\", \"properties.tsunami\", \"properties.sig\", \"properties.net\",\n    \"properties.code\", \"properties.ids\", \"properties.sources\", \"properties.types\",\n    \"properties.nst\", \"properties.dmin\", \"properties.rms\", \"properties.gap\",\n    \"properties.magType\", \"properties.type\", \"geometry.type\",\n    \"geometry.coordinates\"\n]]\n\n# Rename columns\ndf.columns = df.columns.str.replace(\"properties.\", \"\")\ndf.columns = df.columns.str.replace(\"geometry.\", \"\")\n\n# Create in-memory ZIP file\nzip_buffer = io.BytesIO()\nwith zipfile.ZipFile(zip_buffer, \"a\", zipfile.ZIP_DEFLATED, False) as zip_file:\n    # Add metadata as JSON\n    zip_file.writestr(\"metadata.json\", json.dumps(metadata))\n    \n    # Add earthquake data as CSV\n    csv_buffer = io.StringIO()\n    df.to_csv(csv_buffer, index=False)\n    zip_file.writestr(\"earthquakes.csv\", csv_buffer.getvalue())\n\n# Return ZIP file contents\nzip_buffer.seek(0)\nprint(zip_buffer.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Reading Exif Metadata from an Image File in JavaScript\nDESCRIPTION: Demonstrates how to load a binary image file and read its Exif metadata using the ExifReader library.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ExifReader from \"npm:exifreader\";\n\nconst buffer = await FileAttachment(\"horse.jpg\").arrayBuffer();\nconst tags = ExifReader.load(buffer);\n\ndisplay(tags);\n```\n\n----------------------------------------\n\nTITLE: Using D3 to Parse and Format Colors in JavaScript\nDESCRIPTION: This example shows how to use D3 to parse a color name and format it as a hexadecimal value for the color input.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/color.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fill = view(Inputs.color({label: \"Fill\", value: d3.color(\"steelblue\").formatHex()}));\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Results in Table Format using JavaScript\nDESCRIPTION: Demonstrates how to present the search results in a table format using the Inputs.table function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/search.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(search)\n```\n\n----------------------------------------\n\nTITLE: Viewing Form Input Value in JavaScript\nDESCRIPTION: Displays the value of the previously created RGB form input. The value will be an array containing the current values of all three range inputs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/form.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrgb\n```\n\n----------------------------------------\n\nTITLE: Parsing Excel File Content in JavaScript\nDESCRIPTION: Reads and parses the selected Excel file into a JavaScript object representing its contents.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nxlsxfile.xlsx()\n```\n\n----------------------------------------\n\nTITLE: Rendering Vega-Lite chart with dynamic theme in JavaScript\nDESCRIPTION: This code snippet imports the vega-themes library and renders a Vega-Lite chart. It uses the `dark` reactive variable from Observable Framework to apply either the dark or default theme from vega-themes. It also configures the chart to have a transparent background and resizes to fit its container.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/vega-dark/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as themes from \"npm:vega-themes\";\n\ndisplay(\n  await vl.render({\n    spec: {\n      config: {\n        ...(dark ? themes.dark : themes.default),\n        background: \"transparent\"\n      },\n      width: 640,\n      height: 250,\n      autosize: {type: \"fit\", contains: \"padding\"},\n      data: {url: \"https://vega.github.io/vega-lite/data/cars.json\"},\n      mark: \"bar\",\n      encoding: {\n        x: {field: \"Cylinders\"},\n        y: {aggregate: \"count\", title: \"Number of cars\"}\n      }\n    }\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Vega-Lite Chart Using Observable Framework's resize Function\nDESCRIPTION: This snippet renders a responsive bar chart using Vega-Lite and Observable Framework's resize function. It dynamically adjusts the chart width based on container size through ResizeObserver, and properly handles all resize events including when the container is initially detached.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/vega-responsive/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = await vl.render({\n  spec: {\n    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n    \"width\": -1,\n    \"height\": 250,\n    \"autosize\": {\"type\": \"fit\", \"contains\": \"padding\"},\n    \"data\": {\"url\": \"https://vega.github.io/vega-lite/data/cars.json\"},\n    \"mark\": \"bar\",\n    \"encoding\": {\n      \"x\": {\"field\": \"Cylinders\"},\n      \"y\": {\"aggregate\": \"count\", \"title\": \"Number of cars\"}\n    }\n  }\n});\n\ndisplay(resize((width) => {\n  chart.value.width(Math.min(960 - 16 * 2, width));\n  chart.value.run();\n  return chart;\n}));\n```\n\n----------------------------------------\n\nTITLE: Loading Chess Rankings Data\nDESCRIPTION: Loads and processes chess rankings data from a JSON file, using the revive function to transform the data. Destructures the data into men's and women's rankings along with configuration constants.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/chess/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {womens, mens, MONTHS_OF_DATA, TOP_N_COUNT} = await FileAttachment(\"data/top-ranked-players.json\").json().then(revive);\n```\n\n----------------------------------------\n\nTITLE: Configuring Nonlinear Range Input with Logarithmic Transform in JavaScript\nDESCRIPTION: Sets up a range input with a logarithmic transform for non-uniform value distribution.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.range([1, 100], {transform: Math.log})\n```\n\n----------------------------------------\n\nTITLE: Directly Accessing a File Within a ZIP Archive in JavaScript\nDESCRIPTION: Shows how to reference a file within a ZIP archive directly without loading the entire archive. The file is extracted at build time rather than runtime.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"muybridge/deer.jpeg\").image({width: 320, alt: \"A deer\"})\n```\n\n----------------------------------------\n\nTITLE: Table with Preselected Rows and Multiple Selection in JavaScript\nDESCRIPTION: Demonstrates creating a table with preselected rows and multiple selection enabled.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins, {\n  value: [1, 3, 7, 9].map((i) => penguins[i]),\n  multiple: true\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching US County Data\nDESCRIPTION: Uses the native fetch API to import and parse a geojson file containing US county-level data. The code constructs geographic features for both states and counties, supporting further geographic data manipulation and visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// County-level data for US\nconst us = await fetch(import.meta.resolve(\"npm:us-atlas/counties-10m.json\")).then((r) => r.json());\n\n// State polygons\nconst states = topojson.feature(us, us.objects.states);\n\n// County polygons\nconst counties = topojson\n  .feature(us, us.objects.counties)\n  .features.map((d) => ({ ...d, fips: +d.id }));\n```\n\n----------------------------------------\n\nTITLE: Multiple File Attachments Example\nDESCRIPTION: Demonstrates loading multiple files in parallel, with downstream code blocks only waiting for the files they specifically reference.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = FileAttachment(\"a.csv\").csv({typed: true});\nconst b = FileAttachment(\"b.csv\").csv({typed: true});\nconst c = FileAttachment(\"c.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Selectively Loading DuckDB Extensions\nDESCRIPTION: Creates a SQL execution environment with specific extensions (spatial and h3) loaded, even if they were configured not to load by default. This allows selective use of extensions only when needed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst geosql = DuckDBClient.sql({}, {extensions: [\"spatial\", \"h3\"]});\n```\n\n----------------------------------------\n\nTITLE: Creating Copy to Clipboard Button\nDESCRIPTION: Creates a button that copies the value of the 'time' variable to the clipboard when clicked. Uses the navigator.clipboard API with a custom reducer function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.button(\"Copy to clipboard\", {value: null, reduce: () => navigator.clipboard.writeText(time)})\n```\n\n----------------------------------------\n\nTITLE: Generating Random Walk Data with Apache Arrow\nDESCRIPTION: Creates a random walk dataset for each day in 2022 and outputs it as an Apache Arrow table. Uses parallel arrays for date and value columns, then converts them to an Arrow table format and writes to stdout.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-arrow/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Arrow from \"apache-arrow\";\n\n// Generate a daily random walk as parallel arrays of {date, value}.\nconst date = [];\nconst value = [];\nconst start = new Date(\"2022-01-01\");\nconst end = new Date(\"2023-01-01\");\nfor (let currentValue = 0, currentDate = start; currentDate < end; ) {\n  date.push(currentDate);\n  value.push(currentValue);\n  (currentDate = new Date(currentDate)), currentDate.setUTCDate(currentDate.getUTCDate() + 1);\n  currentValue += Math.random() - 0.5;\n}\n\n// Construct an Apache Arrow table from the parallel arrays.\nconst table = Arrow.tableFromArrays({date, value});\n\n// Output the Apache Arrow table as an IPC stream to stdout.\nprocess.stdout.write(Arrow.tableToIPC(table));\n```\n\n----------------------------------------\n\nTITLE: Set Initial View State for Deck.gl Map - JavaScript\nDESCRIPTION: Defines the initial viewing parameters such as longitude, latitude, zoom levels, and angles for the DeckGL map. No dependencies are required for this snippet.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst initialViewState = {\n  longitude: -100,\n  latitude: 36,\n  zoom: 4.1,\n  minZoom: 3,\n  maxZoom: 7,\n  pitch: 45,\n  bearing: 20\n};\n```\n\n----------------------------------------\n\nTITLE: Arrival Line Chart Visualization\nDESCRIPTION: Creates a line chart showing booking arrivals over time with seasonal color coding and moving averages.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet mem;\nfunction firstOrRecent(values) {\n  return values.length ? (mem = values[0]) : mem;\n}\nfunction arrivalLineChart(width, height) {\n  return Plot.plot({\n    height: height - 50,\n    marginBottom: 35,\n    width,\n    x: {label: \"Arrival date\"},\n    y: {label: \"Bookings\", grid: true},\n    color: {domain: seasonDomain, range: seasonColors, label: \"Season\"},\n    title: `${pickMarketSegment} bookings by arrival date`,\n    subtitle: `Daily reservation counts (gray area) and 28-day moving average (solid line).`,\n    marks: [\n      () => htl.svg`<defs>\n      <linearGradient id=\"gradient\" gradientTransform=\"rotate(90)\">\n        <stop offset=\"60%\" stop-color=\"#B5B5B5\" stop-opacity=\"0.7\" />\n        <stop offset=\"100%\" stop-color=\"#B5B5B5\" stop-opacity=\"0.1\" />\n      </linearGradient>\n      </defs>`,\n      Plot.areaY(\n        bookingsByMarketSegment,\n        Plot.binX(\n          {y: \"count\", thresholds: \"day\", filter: null},\n          {\n            x: \"arrivalDate\",\n            curve: \"step\",\n            fill: \"url(#gradient)\"\n          }\n        )\n      ),\n      Plot.lineY(\n        bookingsByMarketSegment,\n        Plot.windowY(\n          {k: 28},\n          Plot.binX(\n            {y: \"count\", interval: \"day\", stroke: firstOrRecent, filter: null},\n            {\n              x: \"arrivalDate\",\n              strokeWidth: 2,\n              stroke: \"season\",\n              z: null,\n              tip: {\n                format: {\n                  arrivalDate: true,\n                  bookings: true,\n                  x: \"%d %b %Y\"\n                }\n              }\n            }\n          )\n        )\n      ),\n      Plot.ruleY([0]),\n      Plot.axisX({ticks: 5}),\n      Plot.axisY({ticks: 5})\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lodash partition Method\nDESCRIPTION: Demonstrates Lodash's partition method which creates an array of elements split into two groups - those that satisfy the provided predicate function and those that don't.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/lodash.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_.partition([1, 2, 3, 4], (n) => n % 2)\n```\n\n----------------------------------------\n\nTITLE: Creating JPEG Scatterplot with R and ggplot2\nDESCRIPTION: This R script loads the diamonds dataset, creates a scatterplot using ggplot2, and outputs the chart as a JPEG image to standard output. It visualizes the relationship between diamond carat, price, and cut.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-jpeg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nlibrary(ggplot2)\nlibrary(svglite)\n\n# Create the plot\np <- ggplot(diamonds, aes(x = carat, y = price, color = cut)) +\n  geom_point(alpha = 0.7) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_minimal() +\n  labs(title = \"Diamond Price vs. Carat\",\n       x = \"Carat\",\n       y = \"Price\",\n       color = \"Cut\")\n\n# Save the plot as JPEG to stdout\njpeg(file = stdout(), width = 800, height = 600, quality = 90)\nprint(p)\ndev.off()\n```\n\n----------------------------------------\n\nTITLE: Setting up Lighting Effects for deck.gl Visualization\nDESCRIPTION: This code configures the lighting effects for the 3D hexagon layer, including ambient and point lights.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst effects = [\n  new LightingEffect({\n    ambientLight: new AmbientLight({color: [255, 255, 255], intensity: 1.0}),\n    pointLight: new PointLight({color: [255, 255, 255], intensity: 0.8, position: [-0.144528, 49.739968, 80000]}),\n    pointLight2: new PointLight({color: [255, 255, 255], intensity: 0.8, position: [-3.807751, 54.104682, 8000]})\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Extensions with Array Syntax\nDESCRIPTION: JavaScript configuration example showing how to enable the 'spatial' and 'h3' DuckDB extensions for SQL code blocks in Observable Framework using the simplified array syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  duckdb: {\n    extensions: [\"spatial\", \"h3\"]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using the query Method in DuckDBClient\nDESCRIPTION: Example of using the query method to execute a SQL query as a string, returning a Promise to an Arrow table with the results.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndb.query(\"SELECT * FROM gaia LIMIT 10\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive iframe in Observable Framework (Markdown)\nDESCRIPTION: This snippet shows the main page content with a responsive iframe implementation. It includes HTML for the iframe and JavaScript for adjusting the iframe height dynamically.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```html\n<iframe id=\"myIframe\" src=\"/embed\" width=\"100%\" height=\"100\" frameborder=\"0\"></iframe>\n\n<script>\n  // Function to adjust iframe height\n  function adjustIframeHeight() {\n    const iframe = document.getElementById('myIframe');\n    iframe.style.height = iframe.contentWindow.document.body.scrollHeight + 'px';\n  }\n\n  // Adjust height when iframe loads\n  document.getElementById('myIframe').onload = adjustIframeHeight;\n\n  // Adjust height when window resizes\n  window.addEventListener('resize', adjustIframeHeight);\n</script>\n```\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Launch Data in JavaScript\nDESCRIPTION: Loads rocket launch data from a CSV file attachment and converts it to a typed JavaScript array for further processing.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-dashboard.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst launches = FileAttachment(\"data/launches.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Creating Color Scale and Legend for Mortgage Types in JavaScript\nDESCRIPTION: This snippet defines a color scale for different mortgage types and creates a function to generate HTML for a color-coded legend. It uses Plot.scale for color mapping and template literals for HTML generation.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = Plot.scale({color: {domain: [\"30Y FRM\", \"15Y FRM\"]}});\nconst colorLegend = (y) => html`<span style=\"border-bottom: solid 2px ${color.apply(`${y}Y FRM`)};\">${y}-year fixed-rate</span>`;\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Sport Selection\nDESCRIPTION: Implements a select input for filtering athletes by sport and visualizes the data using Plot.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sport = view(\n  Inputs.select(\n    olympians.filter((d) => d.weight && d.height).map((d) => d.sport),\n    {sort: true, unique: true, label: \"sport\"}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  title: `How ${sport} athletes compare`,\n  marks: [\n    Plot.dot(olympians, {x: \"weight\", y: \"height\"}),\n    Plot.dot(olympians.filter((d) => d.sport === sport), {x: \"weight\", y: \"height\", stroke: \"red\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Range and Legend for Dam Visualization Map in JavaScript\nDESCRIPTION: Sets up the color range for dam condition categories and creates a color legend using Plot.js. The colors represent different condition states from satisfactory to poor, with a visual legend to help interpret the map.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// deck.gl setup\nconst colorRange = [\n  [148,152,160], // not available\n  [66,105,208], // satisfactory\n  [151,187,245], // fair\n  [239, 213, 24], // unsatisfactory\n  [255, 114, 92] // poor\n];\n\nconst colorLegend = Plot.plot({\n  margin: 0,\n  marginTop: 30,\n  marginRight: 20,\n  width: width / 4,\n  height: 50,\n  style: \"color: 'currentColor';\",\n  x: {padding: 0, axis: null},\n  marks: [\n    Plot.cellX(colorRange, {fill: ([r, g, b]) => `rgb(${r},${g},${b})`, inset: 0.5}),\n    Plot.text([\"Fewer dams\"], {frameAnchor: \"top-left\", dy: -12}),\n    Plot.text([\"More dams\"], {frameAnchor: \"top-right\", dy: -12})\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Table Customization in JavaScript\nDESCRIPTION: Demonstrates advanced table customization options including column widths, alignment, row count, and layout settings.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins, {\n  width: {\n    culmen_length_mm: 140,\n    culmen_depth_mm: 140,\n    flipper_length_mm: 140\n  },\n  align: {\n    culmen_length_mm: \"right\",\n    culmen_depth_mm: \"center\",\n    flipper_length_mm: \"left\"\n  },\n  rows: 18,\n  maxWidth: 840,\n  multiple: false,\n  layout: \"fixed\"\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Query with ID and Display Directives (Markdown)\nDESCRIPTION: SQL query that both displays results and saves them to a variable using the id and display directives.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```sql id=top10 display\nSELECT * FROM gaia ORDER BY phot_g_mean_mag LIMIT 10\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Query Results in Table Format\nDESCRIPTION: Demonstrates how to use Inputs.table to display query results in a more readable table format, providing better visualization of database data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(customers)\n```\n\n----------------------------------------\n\nTITLE: Reading Local JSON with FileAttachment\nDESCRIPTION: Using FileAttachment with string interpolation in SQL to read a local JSON file using DuckDB's read_json function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bbox FROM read_json(${FileAttachment(\"../quakes.json\").href});\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing PMMS Data in JavaScript\nDESCRIPTION: This snippet loads CSV data from a file attachment and processes it into a flat structure for 30-year and 15-year fixed-rate mortgages. It uses the FileAttachment API and CSV parsing with type inference.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pmms = FileAttachment(\"data/pmms.csv\").csv({typed: true});\nconst tidy = pmms.then((pmms) => pmms.flatMap(({date, pmms30, pmms15}) => [{date, rate: pmms30, type: \"30Y FRM\"}, {date, rate: pmms15, type: \"15Y FRM\"}]));\n```\n\n----------------------------------------\n\nTITLE: Viewing Object-Based Form Input Value in JavaScript\nDESCRIPTION: Displays the value of the object-based RGB form input. The value will be an object with r, g, and b properties containing the current values of the respective range inputs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/form.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nrgb2\n```\n\n----------------------------------------\n\nTITLE: Shell Script for CSV to Parquet Data Loading with DuckDB\nDESCRIPTION: Shell script that downloads education statistics from Eurostat, processes the data using DuckDB CLI operations, and converts it to Parquet format. The script handles data transformation and filtering operations before final output.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-duckdb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# No code snippets provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Loading Data for Observable Plot Dashboard\nDESCRIPTION: Loads various data files for the dashboard, including version data, npm downloads, GitHub issues, and stars using FileAttachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/plot/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst versions = FileAttachment(\"data/plot-version-data.csv\").csv({typed: true});\nconst downloads = FileAttachment(\"data/plot-npm-downloads.csv\").csv({typed: true});\nconst issues = FileAttachment(\"data/plot-github-issues.json\").json().then(revive);\nconst stars = FileAttachment(\"data/plot-github-stars.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Importing DuckDB-Wasm Library in JavaScript\nDESCRIPTION: How to explicitly import the DuckDB-Wasm library in Observable Framework via npm. This package provides direct access to DuckDB through WebAssembly.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as duckdb from \"npm:@duckdb/duckdb-wasm\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Resize Function\nDESCRIPTION: Creates a utility function for centering and resizing dashboard elements with flex layout.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction centerResize(render) {\n  const div = resize(render);\n  div.style.display = \"flex\";\n  div.style.flexDirection = \"column\";\n  div.style.alignItems = \"center\";\n  return div;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query and Displaying Results\nDESCRIPTION: Shows how to execute a SQL query using the tagged template literal syntax and display the results. The query returns all records from the customers table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst customers = db.sql`SELECT * FROM customers`;\n\ndisplay(await customers);\n```\n\n----------------------------------------\n\nTITLE: Loading NetCDF File as ArrayBuffer in JavaScript\nDESCRIPTION: This code loads a NetCDF file as an ArrayBuffer using FileAttachment and initializes a NetCDFReader with the data. It demonstrates how to handle binary file loading and NetCDF parsing.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst winds = FileAttachment(\"navy_winds_2.nc\").arrayBuffer().then((data) => new NetCDFReader(data));\n```\n\n----------------------------------------\n\nTITLE: Loading Converted GeoJSON Wind Data in JavaScript\nDESCRIPTION: This snippet loads the previously converted GeoJSON wind data from a file. It uses the FileAttachment API to fetch and parse the JSON data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf-contours/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst winds = FileAttachment(\"data/navy_winds_2.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Implementing Elasticsearch Query and Data Transformation in TypeScript\nDESCRIPTION: A TypeScript data loader that queries an Elasticsearch cluster, aggregates log data by date and response code, and outputs the results in CSV format. Uses d3-dsv for CSV formatting and includes type definitions for response handling.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { csvFormat } from \"d3-dsv\";\nimport { esClient } from \"./es_client.js\";\n\ninterface AggsResponseFormat {\n  logs_histogram: {\n    buckets: Array<{\n      key: number;\n      key_as_string: string;\n      doc_count: number;\n      response_code: {\n        buckets: Array<{ key: string; doc_count: number }>;\n      };\n    }>;\n  };\n}\n\ninterface LoaderOutputFormat {\n  date: string;\n  count: number;\n  response_code: string;\n}\n\nconst resp = await esClient.search<unknown, AggsResponseFormat>({\n  index: \"kibana_sample_data_logs\",\n  size: 0,\n  aggs: {\n    logs_histogram: {\n      date_histogram: {\n        field: \"@timestamp\",\n        calendar_interval: \"1d\",\n      },\n      aggs: {\n        response_code: {\n          terms: {\n            field: \"response.keyword\",\n          },\n        },\n      },\n    },\n  },\n});\n\nprocess.stdout.write(\n  csvFormat(\n    resp.aggregations!.logs_histogram.buckets.reduce<Array<LoaderOutputFormat>>(\n      (p, c) => {\n        p.push(\n          ...c.response_code.buckets.map((d) => ({\n            date: c.key_as_string.split(\"T\")[0],\n            count: d.doc_count,\n            response_code: d.key,\n          })),\n        );\n\n        return p;\n      },\n      [],\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript ZIP Archive Generator\nDESCRIPTION: TypeScript data loader that creates a ZIP archive containing JSON and CSV files from earthquake data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\nimport JSZip from \"jszip\";\n\n// Fetch GeoJSON from the USGS.\nconst response = await fetch(\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\");\nif (!response.ok) throw new Error(`fetch failed: ${response.status}`);\nconst collection = await response.json();\n\n// Convert to an array of objects.\nconst features = collection.features.map((f) => ({\n  magnitude: f.properties.mag,\n  longitude: f.geometry.coordinates[0],\n  latitude: f.geometry.coordinates[1]\n}));\n\n// Output a ZIP archive to stdout.\nconst zip = new JSZip();\nzip.file(\"metadata.json\", JSON.stringify(collection.metadata, null, 2));\nzip.file(\"features.csv\", csvFormat(features));\nzip.generateNodeStream().pipe(process.stdout);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parameterized Page Loader for Sales Charts\nDESCRIPTION: A page loader that generates Markdown content with embedded JavaScript to display sales data for a specific product. It demonstrates parsing command-line parameters and embedding them in the generated content.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/params.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {parseArgs} from \"node:util\";\n\nconst {\n  values: {product}\n} = parseArgs({\n  options: {product: {type: \"string\"}}\n});\n\nprocess.stdout.write(`# Sales of product ${product}\n\n~~~js\nconst sales = FileAttachment(\\`sales-${product}.csv\\`).csv({typed: true});\n~~~\n\n~~~js\nPlot.plot({\n  x: {interval: \"day\", label: null},\n  y: {grid: true},\n  marks: [\n    Plot.barY(sales, {x: \"sale_day\", y: \"total_sales_amount\", tip: true}),\n    Plot.ruleY([0])\n  ]\n})\n~~~\n\n`);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Raster Plot with Observable Plot in JavaScript\nDESCRIPTION: This code creates a basic raster plot using Observable Plot to visualize the zonal wind component (UWND) from the NetCDF data. It demonstrates how to set up a plot with color schemes and raster marks.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  color: {\n    label: \"UWND\",\n    legend: true,\n    scheme: \"rdbu\"\n  },\n  marks: [\n    Plot.raster(winds.getDataVariable(\"UWND\"), {\n      width: winds.header.dimensions[0].size,\n      height: winds.header.dimensions[1].size\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Image File Content in JavaScript\nDESCRIPTION: Loads the selected image file into an Image object that can be displayed or manipulated.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimgfile.image()\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Input with Object Structure in JavaScript\nDESCRIPTION: Creates a form input that combines three range inputs for RGB color values using an object structure. This approach associates each input with a named property (r, g, b), which will be reflected in the output value structure.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/form.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst rgb2 = view(Inputs.form({\n  r: Inputs.range([0, 255], {step: 1, label: \"r\"}),\n  g: Inputs.range([0, 255], {step: 1, label: \"g\"}),\n  b: Inputs.range([0, 255], {step: 1, label: \"b\"})\n}));\n```\n\n----------------------------------------\n\nTITLE: Radio Input with Complex Object Values in JavaScript\nDESCRIPTION: Creates a radio input using team objects as values and formats them to display only the team name property, while the full object is stored as the value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst favorite = view(Inputs.radio(teams, {label: \"Favorite team\", format: x => x.name}));\n```\n\n----------------------------------------\n\nTITLE: Sorting Table Data in JavaScript\nDESCRIPTION: Shows how to sort the table data by a specific column in descending order using the 'sort' and 'reverse' options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins, {sort: \"body_mass_g\", reverse: true})\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data for D3.js Visualization in Observable\nDESCRIPTION: This snippet demonstrates how to load JSON data from a file attachment in Observable. The data is used for the force-directed graph visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/d3.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = FileAttachment(\"miserables.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Columns and Headers in JavaScript\nDESCRIPTION: Demonstrates how to customize the displayed columns and their headers using the 'columns' and 'header' options in Inputs.table().\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins, {\n  columns: [\n    \"species\",\n    \"culmen_length_mm\",\n    \"culmen_depth_mm\",\n    \"flipper_length_mm\"\n  ],\n  header: {\n    species: \"Penguin Species\",\n    culmen_length_mm: \"Culmen length (mm)\",\n    flipper_length_mm: \"Flipper length (mm)\",\n    culmen_depth_mm: \"Culmen Depth (mm)\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Event Handlers\nDESCRIPTION: Sets up event listeners to synchronize values between 2D and 1D inputs, using event bubbling to prevent infinite loops.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-input-2d/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nxyInput.oninput = (event) => {\n  if (!event.bubbles) return;\n  xInput.value = xyInput.value[0];\n  yInput.value = xyInput.value[1];\n  xInput.dispatchEvent(new Event(\"input\"));\n  yInput.dispatchEvent(new Event(\"input\"));\n};\nxInput.oninput = yInput.oninput = (event) => {\n  if (!event.bubbles) return;\n  xyInput.value = [xInput.value, yInput.value];\n  xyInput.dispatchEvent(new Event(\"input\"));\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Parquet Data in Observable Framework\nDESCRIPTION: This JavaScript code loads the Apache Parquet file generated by the Python script using Observable Framework's FileAttachment API. It returns a promise to an Apache Arrow table.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst dams = FileAttachment(\"data/us-dams.parquet\").parquet();\n```\n\n----------------------------------------\n\nTITLE: Creating a Purpose-Ownership Dam Analysis Chart in JavaScript\nDESCRIPTION: Generates a horizontal bar chart showing dam counts grouped by primary purpose and color-coded by ownership type. The visualization uses Plot.js to create a sorted chart with tooltips that displays the top 10 purposes with breakdown by ownership category.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction purposeOwnership(width, height) {\n  return Plot.plot({\n    width,\n    marginTop: 0,\n    marginBottom: 40,\n    height: height - 55,\n    marginLeft: 170,\n    y: {label: null, label: \"Primary purpose\"},\n    x: {grid: true, label:\"Number of dams\"},\n    color: {\n      legend: true,\n      scheme: \"Set2\",\n      domain: [\"Private\", \"Public Utility\", \"Local Government\", \"State\", \"Federal\"],\n      label: \"Ownership\"},\n    marks:\n    [\n      Plot.barX(damsSelectedState,\n        Plot.groupY({x: \"count\"},\n          {\n            y: \"primaryPurpose\",\n            rx: 2,\n            insetRight: 1,\n            sort: {y: \"x\", reverse: true, limit: 10},\n            fill: \"ownerType\",\n            order: [\"Private\", \"Public Utility\", \"Local Government\", \"State\", \"Federal\"],\n            tip: true}))\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing an ECharts Bar Chart\nDESCRIPTION: Demonstrates initializing an ECharts visualization by creating a container element, displaying it, and setting chart options. This example creates a basic bar chart showing sales data for different clothing items.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/echarts.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myChart = echarts.init(display(html`<div style=\"width: 600px; height:400px;\"></div>`));\n\nmyChart.setOption({\n  title: {\n    text: \"ECharts getting started example\"\n  },\n  tooltip: {},\n  xAxis: {\n    data: [\"shirt\", \"cardigan\", \"chiffon\", \"pants\", \"heels\", \"socks\"]\n  },\n  yAxis: {},\n  series: [\n    {\n      name: \"sales\",\n      type: \"bar\",\n      data: [5, 20, 36, 10, 10, 20]\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Slider with Observable\nDESCRIPTION: Initializes a jQuery UI range slider with min/max values and implements an Observable pattern for value changes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/jquery-ui.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = Generators.observe((notify) => {\n  const slider = $(\"#slider\");\n  slider.slider({\n    range: true,\n    min: 0,\n    max: 500,\n    values: [5, 300],\n    slide: (event, ui) => notify(ui.values)\n  });\n  notify(slider.slider(\"values\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Reading JSON Data with DuckDB Extension\nDESCRIPTION: Using the DuckDB JSON extension to read GeoJSON data from an external URL and extract the bounding box attribute.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bbox FROM read_json('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson');\n```\n\n----------------------------------------\n\nTITLE: Converting NetCDF to GeoJSON Contours using JavaScript\nDESCRIPTION: This snippet reads a NetCDF file, extracts wind data, and generates GeoJSON contour polygons. It uses netcdfjs for parsing NetCDF and d3-geo-voronoi for contour generation. The output is stringified JSON with limited numeric precision.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf-contours/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {readFile} from \"node:fs/promises\";\nimport {geoContour} from \"d3-geo-voronoi\";\nimport {NetCDFReader} from \"netcdfjs\";\n\n// Read the NetCDF file (relative to this source file).\nconst data = await readFile(new URL(\"./navy_winds_2.nc\", import.meta.url));\n\n// Parse the NetCDF file.\nconst reader = new NetCDFReader(data);\n\n// Extract the grid dimensions.\nconst n = reader.header.dimensions[0].size; // number of columns\nconst m = reader.header.dimensions[1].size; // number of rows\n\n// Create a contour generator which expects a flat n×m grid of numbers.\nconst contour = geoContour()\n  .x((_, i) => ((i % n) * 2 - n + 1) * 180 / n)\n  .y((_, i) => (Math.floor(i / n) * 2 - m + 1) * 90 / m)\n  .value((d) => d);\n\n// Compute the contour polygons.\nconst polygons = contour(reader.getDataVariable(\"UWND\"));\n\n// Limit numeric precision to 2 decimal places.\nfunction replacer(key, value) {\n  return typeof value === \"number\" ? +value.toFixed(2) : value;\n}\n\nprocess.stdout.write(JSON.stringify(polygons, replacer));\n```\n\n----------------------------------------\n\nTITLE: Displaying Earthquake Data Table in Observable\nDESCRIPTION: This JavaScript snippet demonstrates how to create a quick view of the earthquake data using Inputs.table in an Observable notebook.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-zip/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(quakes)\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data with FileAttachment\nDESCRIPTION: JavaScript code showing how to load JSON data using FileAttachment API.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"quakes.json\").json()\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Function for deck.gl Hexagon Layer\nDESCRIPTION: This function generates the tooltip content displayed when hovering over a hexagon in the visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getTooltip({object}) {\n  if (!object) return null;\n  const [lng, lat] = object.position;\n  const count = object.points.length;\n  return `latitude: ${lat.toFixed(2)}\n    longitude: ${lng.toFixed(2)}\n    ${count} collisions`;\n}\n```\n\n----------------------------------------\n\nTITLE: Plotting Earthquake Data on World Map\nDESCRIPTION: JavaScript code using Observable Plot to visualize earthquake data on a world map.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: {\n    type: \"orthographic\",\n    rotate: [110, -30]\n  },\n  marks: [\n    Plot.graticule(),\n    Plot.sphere(),\n    Plot.geo(land, {stroke: \"var(--theme-foreground-faint)\"}),\n    Plot.dot(quakes, {x: \"longitude\", y: \"latitude\", r: \"magnitude\", stroke: \"#f43f5e\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Buttons with Mutable Variables in JavaScript\nDESCRIPTION: Demonstrates how to create interactive buttons that can modify the mutable count variable. This showcases the integration of mutable state with user interface elements.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.button([[\"Increment\", increment], [\"Reset\", reset]])\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Mortgage Rate Data with TypeScript\nDESCRIPTION: This TypeScript data loader fetches mortgage rate data from Freddie Mac's website, restructures it by minimizing to three columns (date in ISO format, 30-year rate, and 15-year rate), and prepares it for visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/README.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/data/pmms.csv.ts\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON File Content in JavaScript\nDESCRIPTION: Reads and parses the selected JSON file into a JavaScript object.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njsonfile.json()\n```\n\n----------------------------------------\n\nTITLE: Loading TSV File with Type Coercion in JavaScript\nDESCRIPTION: This snippet shows how to load a TSV file named 'us-state-capitals.tsv' using FileAttachment with automatic type coercion enabled.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst capitals = FileAttachment(\"us-state-capitals.tsv\").tsv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart with Vega-Lite JavaScript API\nDESCRIPTION: This example demonstrates how to construct a bar chart using the Vega-Lite JavaScript API. It creates a visualization of letter frequencies with horizontal bars, setting the width to 640 pixels.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/vega-lite.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvl.markBar()\n  .data(alphabet)\n  .encode(vl.x().fieldQ(\"frequency\"), vl.y().fieldN(\"letter\"))\n  .width(640)\n  .render()\n```\n\n----------------------------------------\n\nTITLE: Initializing Mosaic vgplot with Custom DuckDB Client\nDESCRIPTION: Demonstrates how to manually initialize Mosaic vgplot with a custom DuckDB client, useful for more advanced configurations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mosaic.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DuckDBClient} from \"npm:@observablehq/duckdb\";\nimport * as vgplot from \"npm:@uwdata/vgplot\";\n\nconst db = await DuckDBClient.of({trips: FileAttachment(\"nyc-taxi.parquet\")});\nconst coordinator = new vgplot.Coordinator();\ncoordinator.databaseConnector(vgplot.wasmConnector({duckdb: db._db}));\nconst vg = vgplot.createAPIContext({coordinator});\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Table in Observable\nDESCRIPTION: This JavaScript code uses Observable's Inputs.table to display the loaded JSON data as an interactive table.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-json/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(text)\n```\n\n----------------------------------------\n\nTITLE: Room Type Seasonal Analysis Chart\nDESCRIPTION: Creates faceted bar charts showing room type distribution across seasons.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction typeSeasonChart(width, height) {\n  return Plot.plot({\n    marginTop: 20,\n    marginBottom: 30,\n    marginLeft: 40,\n    width,\n    height: 270,\n    x: {domain: seasonDomain, tickSize: 0, axis: null, label: \"Season\"},\n    y: {label: \"Count\", fontSize: 0, grid: true, insetTop: 5},\n    fx: {label: \"Room type\"},\n    color: {legend: true, domain: seasonDomain, range: seasonColors, label: \"Season\"},\n    marks: [\n      Plot.text(\"ABCDEFGHLP\", {fx: Plot.identity, text: null}),\n      Plot.frame({opacity: 0.4}),\n      Plot.barY(\n        bookingsByMarketSegment,\n        Plot.groupX(\n          {y: \"count\"},\n          {\n            x: \"season\",\n            fx: \"ReservedRoomType\",\n            fill: \"season\",\n            tip: true\n          }\n        )\n      )\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data with Plot\nDESCRIPTION: Creates a line chart visualization of active users data using Plot library, including axis formatting and tooltips.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.axisY({tickFormat: (d) => d / 1000, label: \"Daily active users (thousands)\"}),\n    Plot.ruleY([0]),\n    Plot.lineY(activeUsers, {x: \"date\", y: \"value\", curve: \"step\", tip: true})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Table with Inputs.table in Observable\nDESCRIPTION: This code creates an interactive table using Observable's Inputs.table, displaying issue titles and upvotes, sorted by upvotes in descending order.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-github/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(\n  issues.map((d) => ({\n    title: `#${d.number} - ${d.title}`,\n    upvotes: d.reactions[\"+1\"]\n  })),\n  {\n    maxWidth: 640,\n    sort: \"upvotes\",\n    reverse: true\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Type Coercion for CSV Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to manually coerce types when loading CSV data, including custom date parsing and number conversion.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {utcParse} from \"npm:d3-time-format\";\n\nconst parseDate = utcParse(\"%Y-%m-%d\");\nconst coerceRow = (d) => ({Date: parseDate(d.Date), Anomaly: Number(d.Anomaly)});\nconst gistemp = FileAttachment(\"gistemp.csv\").csv().then((D) => D.map(coerceRow));\n```\n\n----------------------------------------\n\nTITLE: Creating CSV File Input with Label and Validation in JavaScript\nDESCRIPTION: Creates a file input specifically for CSV files with a custom label and required validation. The input only accepts files with .csv extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst csvfile = view(Inputs.file({label: \"CSV file\", accept: \".csv\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Embedding SVG Charts with Dark Mode Support using HTML\nDESCRIPTION: HTML code that embeds an SVG chart with support for light and dark color schemes using the picture element and media queries. This creates responsive, theme-aware chart embeds.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://observablehq.observablehq.cloud/oss-analytics/@observablehq/framework/downloads-dark.svg\">\n  <img alt=\"Daily downloads of Observable Framework\" src=\"https://observablehq.observablehq.cloud/oss-analytics/@observablehq/framework/downloads.svg\">\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Implementing Visibility-Based Canvas Animation in JavaScript\nDESCRIPTION: Shows how to use the visibility function to defer animation until the content is visible. This optimizes performance by only running animations when they are in view.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nawait visibility(); // wait until this node is visible\n\nconst context2 = canvas2.getContext(\"2d\");\nconst start = performance.now();\n\nlet frame = requestAnimationFrame(function tick(now) {\n  const t = Math.min(1, (now - start) / duration);\n  context2.fillStyle = \"#a463f2\";\n  context2.fillRect(0, 0, t * canvas2.width, canvas2.height);\n  if (t < 1) frame = requestAnimationFrame(tick);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with FileAttachment\nDESCRIPTION: Loads CSV data using FileAttachment with type conversion enabled.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-databricks/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst trips = FileAttachment(\"./data/trips.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Importing Vega-Lite Libraries in Observable Framework\nDESCRIPTION: This snippet shows how to explicitly import Vega, Vega-Lite, and Vega-Lite API libraries and register them for use in Observable Framework. This setup allows for creating visualizations using the Vega-Lite JavaScript API.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/vega-lite.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as vega from \"npm:vega\";\nimport * as vegaLite from \"npm:vega-lite\";\nimport * as vegaLiteApi from \"npm:vega-lite-api\";\n\nconst vl = vegaLiteApi.register(vega, vegaLite);\n```\n\n----------------------------------------\n\nTITLE: Creating GeoJSON for US Nation Outline in JavaScript\nDESCRIPTION: Demonstrates converting the TopoJSON nation object to GeoJSON format using the topojson.feature() method.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst nation = topojson.feature(us, us.objects.nation);\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex Page Structure in Observable Framework\nDESCRIPTION: This JavaScript snippet demonstrates how to configure a more complex page structure with sections and nested pages in an Observable Framework app.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  pages: [\n    {\n      name: \"Section 1\",\n      path: \"/s01/\",\n      pages: [\n        {name: \"Page 1\", path: \"/s01/page1\"},\n        {name: \"Page 2\", path: \"/s01/page2\"}\n      ]\n    },\n    {\n      name: \"Section 2\",\n      open: false,\n      pages: [\n        {name: \"Page 3\", path: \"/s02/page3\"},\n        {name: \"Page 4\", path: \"/s02/page4\"}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Input Generator Example\nDESCRIPTION: Demonstrates creating and using an input generator to track input element changes\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nameInput = display(document.createElement(\"input\"));\nconst name = Generators.input(nameInput);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nname\n```\n\n----------------------------------------\n\nTITLE: Using the now Reactive Variable for Animation\nDESCRIPTION: Demonstrates the now reactive variable which provides the current time in milliseconds, useful for creating animations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nnow\n```\n\n----------------------------------------\n\nTITLE: Updating deck.gl Layers with Interactive Props\nDESCRIPTION: This snippet updates the deck.gl instance with new layer properties, including the interactive parameters for the hexagon layer.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndeckInstance.setProps({\n  layers: [\n    new GeoJsonLayer({\n      id: \"base-map\",\n      data: countries,\n      lineWidthMinPixels: 1,\n      getLineColor: [60, 60, 60],\n      getFillColor: [9, 16, 29]\n    }),\n    new HexagonLayer({\n      id: \"heatmap\",\n      data,\n      coverage,\n      radius,\n      upperPercentile,\n      colorRange,\n      elevationScale: 50,\n      elevationRange: [0, 5000 * t],\n      extruded: true,\n      getPosition: (d) => d,\n      pickable: true,\n      material: {\n        ambient: 0.64,\n        diffuse: 0.6,\n        shininess: 32,\n        specularColor: [51, 51, 51]\n      }\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Input with Observable's Input Component\nDESCRIPTION: Creates a reactive text input using Observable Framework's Inputs.text, which will update the name variable when changed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst name = view(Inputs.text({label: \"Name\", placeholder: \"Anonymous\"}));\n```\n\n----------------------------------------\n\nTITLE: Loading Arrow Data File\nDESCRIPTION: Loads an Apache Arrow table from a file attachment using the FileAttachment.arrow() method.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-arrow/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst samples = FileAttachment(\"./data/samples.arrow\").arrow();\n```\n\n----------------------------------------\n\nTITLE: Reading GeoTIFF Data\nDESCRIPTION: Extracts the image data and raster values from the GeoTIFF file using async/await operations.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/geotiff/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst image = await sfctmp.getImage();\nconst [values] = await image.readRasters();\n```\n\n----------------------------------------\n\nTITLE: Displaying Data with Observable's display Function\nDESCRIPTION: This snippet demonstrates how to inspect the loaded data using Observable's display function.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-github/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(issues);\n```\n\n----------------------------------------\n\nTITLE: Labeled Textarea with Placeholder\nDESCRIPTION: Creates a textarea with a Biography label and placeholder text to improve user experience and provide context for input.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/textarea.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bio = view(Inputs.textarea({label: \"Biography\", placeholder: \"What's your story?\"}));\n```\n\n----------------------------------------\n\nTITLE: JavaScript Data Transformer for Earthquake Data\nDESCRIPTION: JavaScript data loader that transforms USGS GeoJSON data into CSV format with specific columns.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\n\n// Fetch GeoJSON from the USGS.\nconst response = await fetch(\"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\");\nif (!response.ok) throw new Error(`fetch failed: ${response.status}`);\nconst collection = await response.json();\n\n// Convert to an array of objects.\nconst features = collection.features.map((f) => ({\n  magnitude: f.properties.mag,\n  longitude: f.geometry.coordinates[0],\n  latitude: f.geometry.coordinates[1]\n}));\n\n// Output CSV.\nprocess.stdout.write(csvFormat(features));\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data from FileAttachment in JavaScript\nDESCRIPTION: This snippet demonstrates how to load CSV data from a FileAttachment and parse it into an array of objects with typed values. It uses the csv method with the typed option set to true.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-snowflake/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst requests = FileAttachment(\"./data/api-requests.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Initializing Search Input with Penguins Dataset in JavaScript\nDESCRIPTION: Creates a search input for a penguins dataset with a custom placeholder. The result is stored in a 'search' variable for further use.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/search.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchInput = Inputs.search(penguins, {placeholder: \"Search penguins…\"});\nconst search = view(searchInput);\n```\n\n----------------------------------------\n\nTITLE: Displaying a DOM Node with Hypertext Literal\nDESCRIPTION: Example showing how to display a DOM node created with Hypertext Literal that includes a random lucky number.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(html`Your lucky number is ${Math.floor(Math.random () * 10)}!`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Generation and Value Handling\nDESCRIPTION: Sets up chart generation functions and value handlers for different metrics including active users, engagement rate, WAU/MAU ratio, and engaged sessions.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/google-analytics/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction generateValue(target, defaultValue) {\n  return Generators.observe((notify) => {\n    const changed = ({target}) => notify(target.value ?? defaultValue);\n    if (defaultValue !== undefined) notify(defaultValue);\n    target.addEventListener(\"input\", changed);\n    return () => target.removeEventListener(\"input\", changed);\n  });\n}\n\nconst activeUsersChart = resize((width) => lineChart(summary, {width, y: \"active28d\"}));\nconst engagementRateChart = resize((width) => lineChart(summary, {width, y: \"engagementRate\", percent: true}));\nconst wauPerMauChart = resize((width) => lineChart(summary, {width, y: \"wauPerMau\", percent: true}));\nconst engagedSessionsChart = resize((width) => lineChart(summary, {width, y: \"engagedSessions\"}));\n\nconst activeUsers = generateValue(activeUsersChart, summary[summary.length - 1]);\nconst engagementRate = generateValue(engagementRateChart, summary[summary.length - 1]);\nconst wauPerMau = generateValue(wauPerMauChart, summary[summary.length - 1]);\nconst engagedSessions = generateValue(engagedSessionsChart, summary[summary.length - 1]);\n```\n\n----------------------------------------\n\nTITLE: Fetch and Prepare U.S. County and State Data - JavaScript\nDESCRIPTION: Fetches and processes U.S. county and state data from the us-atlas module. Utilizes the topojson library to extract state polygons. Also prepares centroid data for state labels on the map. Dependencies include Fetch API and topojson.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// County-level data for US\nconst us = await fetch(import.meta.resolve(\"npm:us-atlas/counties-10m.json\")).then((r) => r.json());\n\n// State polygons\nconst states = topojson.feature(us, us.objects.states);\n\n// Find state centroids (for text label)\nconst stateCentroid = states.features.map(d => ({name: d.properties.name, longitude: d3.geoCentroid(d.geometry)[0], latitude: d3.geoCentroid(d.geometry)[1]}));\n\n// NID dams data:\nconst dams = FileAttachment(\"data/dam-simple.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Interactive Card with Input and Responsive Chart\nDESCRIPTION: This example shows a card with an interactive input and a responsive chart that filters data based on the selected input value, with the resize helper ensuring proper rendering at different widths.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\" style=\"display: flex; flex-direction: column; gap: 1rem;\">\n  ${industryInput}\n  ${resize((width) => Plot.plot({\n    width,\n    y: {grid: true, label: \"Unemployed (thousands)\"},\n    marks: [\n      Plot.areaY(industries.filter((d) => d.industry === industry), {x: \"date\", y: \"unemployed\", fill: \"var(--theme-foreground-muted)\", curve: \"step\"}),\n      Plot.lineY(industries.filter((d) => d.industry === industry), {x: \"date\", y: \"unemployed\", curve: \"step\"}),\n      Plot.ruleY([0])\n    ]\n  }))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Census Data Processing Bash Script\nDESCRIPTION: Script to download, extract, and process Census Bureau shapefiles into TopoJSON format. Includes downloading ZIP files, unzipping, and converting to GeoJSON and TopoJSON with simplification.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-census/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Download the ZIP archive from the Census Bureau (if needed).\nif [ ! -f src/.observablehq/cache/cb_2023_06_cousub_500k.zip ]; then\n  curl -f -o src/.observablehq/cache/cb_2023_06_cousub_500k.zip 'https://www2.census.gov/geo/tiger/GENZ2023/shp/cb_2023_06_cousub_500k.zip'\nfi\n\n# Unzip the ZIP archive to extract the shapefile.\nunzip -oqd src/.observablehq/cache src/.observablehq/cache/cb_2023_06_cousub_500k.zip\n\n# Convert the shapefile to GeoJSON, then to TopoJSON, simplify, and merge counties.\nshp2json --encoding utf-8 -n src/.observablehq/cache/cb_2023_06_cousub_500k.shp > src/.observablehq/cache/cb_2023_06_cousub_500k.ndjson\ngeo2topo -q 1e5 -n counties=src/.observablehq/cache/cb_2023_06_cousub_500k.ndjson \\\n  | toposimplify -f -s 1e-7 \\\n  | topomerge state=counties\n```\n\n----------------------------------------\n\nTITLE: Data Transformation with Arquero\nDESCRIPTION: Demonstrates deriving new columns and sorting data using Arquero operations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(\n  dt.derive({\n      month: (d) => aq.op.row_number(),\n      diff: (d) => d.Seattle - d.Chicago\n    })\n    .select(\"month\", \"diff\")\n    .orderby(aq.desc(\"diff\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Connection Helper in TypeScript for Observable Framework\nDESCRIPTION: This code snippet illustrates a helper file for establishing and managing a PostgreSQL database connection using Postgres.js. It includes connection setup, query execution, and connection closing functionality.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/README.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport postgres from \"postgres\";\n\nconst sql = postgres(process.env.DATABASE_URL);\n\nexport default {\n  async query(query: string) {\n    try {\n      return await sql.unsafe(query);\n    } finally {\n      await sql.end();\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Dependencies with Requirements.txt\nDESCRIPTION: Defines the exact versions of Python packages required for the project, focusing on data science libraries like numpy, pandas, and scikit-learn along with their dependencies. Ensures reproducible environment setup across different installations.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-csv/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njoblib==1.3.2\nnumpy==1.26.3\npandas==2.2.0\npython-dateutil==2.8.2\npytz==2023.3.post1\nscikit-learn==1.5.0\nscipy==1.12.0\nsix==1.16.0\nthreadpoolctl==3.2.0\ntzdata==2023.4\n```\n\n----------------------------------------\n\nTITLE: Importing Apache ECharts in Observable Framework\nDESCRIPTION: Shows how to import the Apache ECharts library explicitly using npm import syntax. ECharts is available by default as 'echarts' in Markdown, but can also be imported explicitly.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/echarts.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as echarts from \"npm:echarts\";\n```\n\n----------------------------------------\n\nTITLE: Multiple Grids for Variable-Height Content\nDESCRIPTION: Another approach to variable-height content is to use multiple grids rather than a single grid, allowing each grid to adapt to its own content.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\">\n  <div class=\"card\">Call me Ishmael.</div>\n  <div class=\"card\">Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.</div>\n</div>\n<div class=\"grid grid-cols-2\">\n  <div class=\"card\">It is a way I have of driving off the spleen and regulating the circulation.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Hypertext Literal for Safe HTML Escaping in JavaScript\nDESCRIPTION: This example demonstrates how Hypertext Literal safely escapes input when generating HTML content.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/htl.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`My favorite band is \"${\"dollar&pound\"}\" not \"dollar&pound\"!`\n```\n\n----------------------------------------\n\nTITLE: Creating Labeled Date Input with Initial Value in JavaScript\nDESCRIPTION: Demonstrates how to create a date input with a label and an initial value set to September 21, 2021.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = view(Inputs.date({label: \"Start\", value: \"2021-09-21\"}));\n```\n\n----------------------------------------\n\nTITLE: Queue Generator Example\nDESCRIPTION: Demonstrates using the queue generator for tracking hash changes without dropping values\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst hash = Generators.queue((change) => {\n  const changed = () => change(location.hash);\n  addEventListener(\"hashchange\", changed);\n  changed();\n  return () => removeEventListener(\"hashchange\", changed);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhash\n```\n\n----------------------------------------\n\nTITLE: Basic Mermaid Flow Diagram in JavaScript\nDESCRIPTION: Demonstrates creating a simple top-down flow diagram using Mermaid syntax in a JavaScript template literal.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mermaid.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmermaid`graph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;`\n```\n\n----------------------------------------\n\nTITLE: Radio Input with Custom HTML Formatting in JavaScript\nDESCRIPTION: Creates a color radio input with custom HTML formatting, using a bold label and styled options with colored underlines matching each color value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst color2 = view(\n  Inputs.radio([\"red\", \"green\", \"blue\"], {\n    value: \"red\",\n    label: html`<b>Colors</b>`,\n    format: (x) =>\n      html`<span style=\"\n          text-transform: capitalize;\n          border-bottom: solid 2px ${x};\n          margin-bottom: -2px;\n        \">${x}</span>`\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Note with Rich Formatting\nDESCRIPTION: Demonstrates how to create a note with HTML formatting including italics and small text\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"tip\">\n  <p>This is a <i>styled</i> tip using <small>HTML</small>.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Top Routes Data in JavaScript\nDESCRIPTION: This code loads parquet data for top routes by count and duration when the content becomes visible.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst topRoutesCount = visibility().then(() => FileAttachment(\"data/top-routes-count.parquet\").parquet());\nconst topRoutesDuration = visibility().then(() => FileAttachment(\"data/top-routes-duration.parquet\").parquet());\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Users Metric from Google Analytics API in JavaScript\nDESCRIPTION: This code snippet is a data loader that fetches the 'activeUsers' metric from the Google Analytics API for a specified date range. It uses the Google Analytics Data Node.js Client and a helper function for authentication and API interactions. The data is formatted as CSV for easy consumption in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {getAnalyticsData} from \"./google-analytics.js\";\n\nexport async function load() {\n  const propertyId = process.env.GOOGLE_ANALYTICS_PROPERTY_ID;\n  const startDate = \"7daysAgo\";\n  const endDate = \"today\";\n  const metric = \"activeUsers\";\n\n  const response = await getAnalyticsData({\n    propertyId,\n    startDate,\n    endDate,\n    metrics: [metric]\n  });\n\n  const rows = response.rows.map((row) => ({\n    date: row.dimensionValues[0].value,\n    [metric]: parseInt(row.metricValues[0].value)\n  }));\n\n  return rows;\n}\n\nexport async function headers() {\n  return [\n    {name: \"Content-Type\", value: \"text/csv\"}\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with Observable FileAttachment\nDESCRIPTION: JavaScript code to load the predictions CSV file using Observable's FileAttachment API with typed values enabled.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-csv/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst predictions = FileAttachment(\"data/predictions.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout for Mortgage Data Visualization in CSS\nDESCRIPTION: This CSS snippet defines responsive grid layouts for displaying mortgage rate information. It uses CSS Grid and container queries to create a flexible layout that adapts to different screen sizes.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/mortgage-rates/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@container (min-width: 560px) {\n  .grid-cols-2-3 {\n    grid-template-columns: 1fr 1fr;\n  }\n  .grid-cols-2-3 .grid-colspan-2 {\n    grid-column: span 2;\n  }\n}\n\n@container (min-width: 840px) {\n  .grid-cols-2-3 {\n    grid-template-columns: 1fr 2fr;\n    grid-auto-flow: column;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Simple COUNT Query with queryRow\nDESCRIPTION: Using the queryRow method to execute a simple COUNT query on an attached database and get a single row result.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndb2.queryRow(`SELECT COUNT() FROM base.events`)\n```\n\n----------------------------------------\n\nTITLE: Displaying CSV Data using Inputs.table in JavaScript\nDESCRIPTION: This code snippet shows how to display the loaded CSV data using the Inputs.table function, which creates an interactive table view of the data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-snowflake/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(requests)\n```\n\n----------------------------------------\n\nTITLE: Creating Nonlinear Range Input with Square Root Transform in JavaScript\nDESCRIPTION: Demonstrates a range input with a square root transform for non-uniform value distribution.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.range([0, 1], {transform: Math.sqrt})\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Loading Parquet Data with FileAttachment\nDESCRIPTION: Loads the generated Parquet file using Observable's FileAttachment API and converts it to an Arrow table.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-duckdb/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst languages = FileAttachment(\"educ_uoe_lang01.parquet\").parquet();\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollytelling with IntersectionObserver in JavaScript\nDESCRIPTION: This JavaScript code implements the scrollytelling functionality using IntersectionObserver. It detects when scroll sections enter the viewport and updates the sticky info display accordingly with the step number and corresponding background color. The observer disconnects when the component is invalidated.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/intersection-observer/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = document.querySelector(\".scroll-info\");\nconst targets = document.querySelectorAll(\".scroll-section\");\n\nconst observer = new IntersectionObserver((entries) => {\n  for (const target of Array.from(targets).reverse()) {\n    const rect = target.getBoundingClientRect();\n    if (rect.top < innerHeight / 2) {\n      info.textContent = target.dataset.step;\n      info.className = `scroll-info scroll-info--step-${target.dataset.step}`;\n      return;\n    }\n  }\n  info.className = \"scroll-info\";\n  info.textContent = \"0\";\n}, {\n  rootMargin: \"-50% 0% -50% 0%\"\n});\n\nfor (const target of targets) observer.observe(target);\n\ninvalidation.then(() => observer.disconnect());\n```\n\n----------------------------------------\n\nTITLE: Calculating Top Routes and Color Scale in JavaScript\nDESCRIPTION: This code calculates the top routes by request count and creates a color scale for route visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst topRoutesPixel = d3.sort(d3.rollups(latencyHeatmap.getChild(\"route\"), (D) => D.length, (d) => d).filter(([d]) => d), ([, d]) => -d).map(([route, count]) => ({route, count}));\nconst routeColor = Object.assign(Plot.scale({color: {domain: topRoutesPixel.map((d) => d.route)}}), {label: \"route\"});\nconst routeSwatch = (route) => html`<span style=\"white-space: nowrap;\"><svg width=10 height=10 fill=${routeColor.apply(route)}><rect width=10 height=10></rect></svg> <span class=\"small\">${route}</span></span>`;\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Route Latency Data in JavaScript\nDESCRIPTION: This code loads parquet data for latency of specific routes when the content becomes visible and creates a canvas element for rendering.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst latencyDocumentsPublicHeatmap = visibility().then(() => FileAttachment(\"data/latency-heatmap-documents-public.parquet\").parquet());\nconst latencyDocumentsPublicCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Object Destructuring (Markdown)\nDESCRIPTION: SQL query using object destructuring to extract the 'min' column from the result into a variable.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```sql id=[{min}]\nSELECT MIN(phot_g_mean_mag) AS min FROM gaia\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing deck.gl Map Instance in JavaScript\nDESCRIPTION: Creates a new deck.gl instance for rendering the interactive map and sets up cleanup on invalidation. The code initializes the map container and ensures proper cleanup when the notebook is re-run to prevent memory leaks.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst deckInstance = new DeckGL({\n  container,\n  initialViewState,\n  controller: true,\n});\n\n// Replace (instead of overlay) map on re-run\ninvalidation.then(() => {\n  deckInstance.finalize();\n  container.innerHTML = \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Random Walk Data in JavaScript\nDESCRIPTION: This snippet creates a random walk dataset for each day in 2022, storing the results in parallel arrays for `date` and `value`. It constructs an Apache Arrow table from the arrays and outputs the data as a Parquet file using Apache Arrow and Parquet WASM libraries. Ensure `apache-arrow` and `parquet-wasm` are installed via npm or Yarn.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-parquet/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Arrow from \"apache-arrow\";\nimport * as Parquet from \"parquet-wasm\";\n\n// Generate a daily random walk as parallel arrays of {date, value}.\nconst date = [];\nconst value = [];\nconst start = new Date(\"2022-01-01\");\nconst end = new Date(\"2023-01-01\");\nfor (let currentValue = 0, currentDate = start; currentDate < end; ) {\n  date.push(currentDate);\n  value.push(currentValue);\n  (currentDate = new Date(currentDate)), currentDate.setUTCDate(currentDate.getUTCDate() + 1);\n  currentValue += Math.random() - 0.5;\n}\n\n// Construct an Apache Arrow table from the parallel arrays.\nconst table = Arrow.tableFromArrays({date, value});\n\n// Output the Apache Arrow table as a Parquet table to standard out.\nconst parquetTable = Parquet.Table.fromIPCStream(Arrow.tableToIPC(table, \"stream\"));\nconst parquetBuilder = new Parquet.WriterPropertiesBuilder().setCompression(Parquet.Compression.ZSTD).build();\nconst parquetData = Parquet.writeParquet(parquetTable, parquetBuilder);\nprocess.stdout.write(parquetData);\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Sheet with Range and Headers in JavaScript\nDESCRIPTION: Demonstrates loading a specific sheet from the workbook with a defined range and header option. This returns an array of objects representing the sheet data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/xlsx.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst reports = workbook.sheet(\"Laser Report 2020\", {range: \"A:J\", headers: true});\n```\n\n----------------------------------------\n\nTITLE: Inline Expression with Plot Sparkline\nDESCRIPTION: Advanced example showing how to embed a sparkline chart directly in Markdown text using Observable Plot.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\ninterpolate a sparkline ${Plot.plot({axis: null, margin: 0, width: 80, height: 17, x: {type: \"band\", round: false}, marks: [Plot.rectY(aapl.slice(-15 - number, -1 - number), {x: \"Date\", y1: 150, y2: \"Close\", fill: \"var(--theme-foreground-focus)\"})]}))}\n```\n\n----------------------------------------\n\nTITLE: Creating Image File Input in JavaScript\nDESCRIPTION: Creates a file input for image files with a custom label and required validation. The input accepts files with .png and .jpg extensions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst imgfile = view(Inputs.file({label: \"Image file\", accept: \".png,.jpg\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Fallback Data\nDESCRIPTION: Shows how to handle errors within a code block by providing fallback data when a file fails to load.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst volcano = FileAttachment(\"volcano.json\")\n  .json()\n  .catch(() => ({width: 87, height: 61, values: []}));\n```\n\n----------------------------------------\n\nTITLE: Creating Line Chart with Observable Plot in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a line chart using Observable Plot in JavaScript. It visualizes the 'edits' data with an area chart, including a tooltip and a y-axis rule at zero.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  marks: [\n    Plot.areaY(edits, {x: \"date\", y: \"count\", curve: \"step\", tip: true}),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Object Data for Radio Input in JavaScript\nDESCRIPTION: Creates an array of team objects that will be used as data for a radio input, demonstrating how to use complex objects as options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst teams = [\n  {name: \"Lakers\", location: \"Los Angeles, California\"},\n  {name: \"Warriors\", location: \"San Francisco, California\"},\n  {name: \"Celtics\", location: \"Boston, Massachusetts\"},\n  {name: \"Nets\", location: \"New York City, New York\"},\n  {name: \"Raptors\", location: \"Toronto, Ontario\"},\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing 2D Range Input\nDESCRIPTION: Creates a new 2D range input instance and establishes a view binding.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-input-2d/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst xyInput = Range2D();\nconst xy = view(xyInput);\n```\n\n----------------------------------------\n\nTITLE: Initializing CSV Data Sources\nDESCRIPTION: Loads and initializes CSV data files containing Google Analytics metrics for summary statistics, hourly data, and channel breakdown information.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/google-analytics/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst summary = FileAttachment(\"data/google-analytics-summary.csv\").csv({typed: true});\nconst hourly = FileAttachment(\"data/google-analytics-time-of-day.csv\").csv({typed: true});\nconst channelBreakdown = FileAttachment(\"data/google-analytics-channel-breakdown.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Pointer Coordinates Generator\nDESCRIPTION: Creates a generator that tracks and yields pointer coordinates using event listeners.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst pointer = Generators.observe((notify) => {\n  const pointermoved = (event) => notify([event.clientX, event.clientY]);\n  addEventListener(\"pointermove\", pointermoved);\n  notify([0, 0]);\n  return () => removeEventListener(\"pointermove\", pointermoved);\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Query with ID Directive (Markdown)\nDESCRIPTION: SQL query that saves its results to a variable named 'top10' using the id directive in a markdown code block.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```sql id=top10\nSELECT * FROM gaia ORDER BY phot_g_mean_mag LIMIT 10\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Email Input with Validation in JavaScript\nDESCRIPTION: Sets up an email input with built-in validation. The browser will display a warning for invalid input.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst email = view(\n  Inputs.text({\n    type: \"email\",\n    label: \"Email\",\n    placeholder: \"Enter your email\"\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Direct Viz.js API Usage in JavaScript\nDESCRIPTION: Demonstrates how to use the Viz.js API directly instead of the DOT wrapper for programmatically generating graph visualizations with more control.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {instance} from \"npm:@viz-js/viz\";\n\nconst viz = await instance();\n\ndisplay(\n  viz.renderSVGElement({\n    directed: false,\n    edges: [\n      {tail: \"a\", head: \"b\"},\n      {tail: \"b\", head: \"c\"},\n      {tail: \"c\", head: \"a\"}\n    ]\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Query Method\nDESCRIPTION: Demonstrates an alternative approach to executing SQL queries using the query method with parameterized inputs, which helps prevent SQL injection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ndb.query(`SELECT * FROM tracks WHERE Name LIKE $1`, [`%${name}%`])\n```\n\n----------------------------------------\n\nTITLE: Accessing NetCDF File Metadata in JavaScript\nDESCRIPTION: This snippet accesses the header property of the NetCDFReader instance to inspect metadata of the NetCDF file. It provides information about dimensions and variables stored in the file.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwinds.header\n```\n\n----------------------------------------\n\nTITLE: Implementing 2D Range Input Component\nDESCRIPTION: A custom implementation of a 2D range input component using canvas element that synchronizes with two separate 1D range inputs through side effects in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-input-2d/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Framework examples →](../)\n\n# Custom 2D input\n\nView live: <https://observablehq.observablehq.cloud/framework-example-custom-input-2d/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Data Processing\nDESCRIPTION: Sets up color scaling and filters channel breakdown data based on specific domain values and conditions.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/google-analytics/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = Plot.scale({\n  color: {\n    domain: [\"\", \"Organic Search\", \"Direct\", \"Referral\", \"Organic Social\", \"Unassigned\"]\n  }\n});\n\nconst filteredChannelBreakdown = channelBreakdown\n  .filter((d) => color.domain.includes(d.channelGroup) && d.type != \"Unknown\" && d.channelGroup !== \"Unassigned\")\n  .sort((a, b) => color.domain.indexOf(b.channelGroup) - color.domain.indexOf(a.channelGroup));\n```\n\n----------------------------------------\n\nTITLE: Inspecting a ZipArchive Object in JavaScript\nDESCRIPTION: Shows how to inspect the loaded ZipArchive object by simply referencing it in the code, which will display its contents in the Observable environment.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmuybridge\n```\n\n----------------------------------------\n\nTITLE: Reading shapefile data with combined .shp and .dbf files\nDESCRIPTION: Shows how to read both the geometry (.shp) and metadata (.dbf) files of a shapefile, returning a promise to a GeoJSON FeatureCollection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/shapefile.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst collection = shapefile.read(\n  ...(await Promise.all([\n    FileAttachment(\"ne_110m_land/ne_110m_land.shp\").stream(),\n    FileAttachment(\"ne_110m_land/ne_110m_land.dbf\").stream()\n  ]))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Gallery from ZIP Contents in JavaScript\nDESCRIPTION: Shows how to dynamically create a gallery of images from all files in a ZIP archive by mapping over filenames, loading each as an image, and displaying them in a collection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nGallery(await Promise.all(muybridge.filenames.map((f) => muybridge.file(f).image())))\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Versions for Geospatial Analysis\nDESCRIPTION: This snippet defines exact versions of geopandas and matplotlib to be installed. Geopandas 0.14.4 is used for handling geospatial data, while matplotlib 3.9.0 is specified for creating visualizations. These versions ensure compatibility and reproducibility in the project environment.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-png/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ngeopandas==0.14.4\nmatplotlib==3.9.0\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Layout for deck.gl Visualization\nDESCRIPTION: This HTML snippet sets up the layout for the deck.gl visualization, including a container for the chart and a floating card for the title, legend, and controls.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\" style=\"margin: 0 -1rem;\">\n\n## Personal injury road collisions, 2022\n### ${data.length.toLocaleString(\"en-US\")} reported collisions on public roads\n\n<figure style=\"max-width: none; position: relative;\">\n  <div id=\"container\" style=\"border-radius: 8px; overflow: hidden; background: rgb(18, 35, 48); height: 800px; margin: 1rem 0; \"></div>\n  <div style=\"position: absolute; top: 1rem; right: 1rem; filter: drop-shadow(0 0 4px rgba(0,0,0,.5));\">${colorLegend}</div>\n  <figcaption>Data: <a href=\"https://www.data.gov.uk/dataset/cb7ae6f0-4be6-4935-9277-47e5ce24a11f/road-safety-data\">Department for Transport</a></figcaption>\n</figure>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Size Heatmap Data in JavaScript\nDESCRIPTION: This snippet loads parquet data for a size heatmap when the content becomes visible and creates a canvas element for rendering.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sizeHeatmap = visibility().then(() => FileAttachment(\"data/size-heatmap.parquet\").parquet());\nconst sizeByRouteCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: Creating File Selection Dropdown using Inputs.select in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a dropdown menu for file selection using Inputs.select. It uses FileAttachment to reference static files and formats the options to display file names.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/input-select-file/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst file = view(Inputs.select([\n  FileAttachment(\"data/buy-a-boat-cat.jpg\"),\n  FileAttachment(\"data/is-this-a-pigeon.jpg\"),\n  FileAttachment(\"data/picard-annoyed.jpg\"),\n  FileAttachment(\"data/picard-facepalm.jpg\")\n], {\n  format: (d) => d.name\n}));\n```\n\n----------------------------------------\n\nTITLE: Creating State Mesh from TopoJSON in JavaScript\nDESCRIPTION: Demonstrates creating a mesh of state borders, excluding coastlines and country borders, using topojson.mesh() with a filter function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst statemesh = topojson.mesh(us, us.objects.states, (a, b) => a !== b)\n```\n\n----------------------------------------\n\nTITLE: Loading Image from ZIP Archive\nDESCRIPTION: JavaScript code showing how to load and display an image from a ZIP archive using FileAttachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"lib/muybridge/deer.jpeg\").image({width: 320, alt: \"A deer\"})\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple File Input in JavaScript\nDESCRIPTION: Creates a file input that allows selection of multiple files simultaneously. The value resolves to an array of files instead of a single file.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = view(Inputs.file({label: \"Files\", multiple: true}));\n```\n\n----------------------------------------\n\nTITLE: Creating a Categorical Color Scale with D3\nDESCRIPTION: Defines a categorical color scale for consistent visualization styling across the dashboard. The scale is sorted by the number of launches per country and filters out the 'Other' category.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-dashboard.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = Plot.scale({\n  color: {\n    type: \"categorical\",\n    domain: d3.groupSort(launches, (D) => -D.length, (d) => d.state).filter((d) => d !== \"Other\"),\n    unknown: \"var(--theme-foreground-muted)\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to load CSV data from a file attachment in JavaScript. It uses the FileAttachment API to fetch and parse the CSV data, with the 'typed' option set to true for automatic type conversion.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst edits = FileAttachment(\"./data/edits.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Input with Array of Inputs in JavaScript\nDESCRIPTION: Creates a form input that combines three range inputs for RGB color values using an array structure. Each range input controls a color channel (r, g, b) with values from 0 to 255.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/form.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst rgb = view(Inputs.form([\n  Inputs.range([0, 255], {step: 1, label: \"r\"}),\n  Inputs.range([0, 255], {step: 1, label: \"g\"}),\n  Inputs.range([0, 255], {step: 1, label: \"b\"})\n]));\n```\n\n----------------------------------------\n\nTITLE: Radio Input Using Map Data Structure in JavaScript\nDESCRIPTION: Creates a radio input using a Map to define coffee cup sizes, where display labels are the keys and fluid ounces are the values, with 'Tall' (12 oz) as the default value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst size = view(\n  Inputs.radio(\n    new Map([\n      [\"Short\", 8],\n      [\"Tall\", 12],\n      [\"Grande\", 16],\n      [\"Venti\", 20]\n    ]),\n    {value: 12, label: \"Size\"}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up a Mapbox Access Token\nDESCRIPTION: Defines a constant for storing the Mapbox access token. This token is required for authenticating API requests to Mapbox services. In production code, users should replace this with their own token obtained from a Mapbox account.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mapbox-gl.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ACCESS_TOKEN = \"pk.eyJ1Ijoib2JzZXJ2YWJsZWhxLWVuZy1hZG1pbiIsImEiOiJjbHMxaTBwdDkwYnRsMmpxeG12M2kzdWFvIn0.Ga6eIWP2YNQrEW4FzHRcTQ\";\n```\n\n----------------------------------------\n\nTITLE: Embedding Static Datawrapper Chart in HTML\nDESCRIPTION: Shows how to embed a Datawrapper chart using script embed code with auto dark mode support. The chart is wrapped in a card div with maximum width constraint.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/datawrapper-api/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\" style=\"max-width: 908px;\">\n  <script data-dark=\"auto\" defer src=\"https://datawrapper.dwcdn.net/OuHrk/embed.js\"></script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Arrow table data\nDESCRIPTION: Shows how to access the Arrow table returned from loading an Arrow file.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nflights\n```\n\n----------------------------------------\n\nTITLE: Reading Text File Content in JavaScript\nDESCRIPTION: Reads the selected text file and returns its content as a string.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntextfile.text()\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing NetCDF Data in JavaScript\nDESCRIPTION: This code snippet demonstrates how to load a NetCDF file, extract wind data, and convert it to GeoJSON contours. It uses netcdfjs for reading the NetCDF file and d3-geo-voronoi for generating contours.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf-contours/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as Plot from \"@observablehq/plot\";\nimport * as d3 from \"d3\";\nimport { geoVoronoi } from \"d3-geo-voronoi\";\nimport netcdfjs from \"netcdfjs\";\n\nexport async function load(file) {\n  const response = await fetch(file);\n  const buffer = await response.arrayBuffer();\n  const reader = new netcdfjs(buffer);\n\n  const lat = reader.getDataVariable('lat');\n  const lon = reader.getDataVariable('lon');\n  const uwnd = reader.getDataVariable('uwnd');\n  const vwnd = reader.getDataVariable('vwnd');\n\n  const points = [];\n  for (let i = 0; i < lat.length; i++) {\n    for (let j = 0; j < lon.length; j++) {\n      const index = i * lon.length + j;\n      points.push({\n        type: \"Feature\",\n        geometry: { type: \"Point\", coordinates: [lon[j], lat[i]] },\n        properties: { wind: Math.hypot(uwnd[index], vwnd[index]) }\n      });\n    }\n  }\n\n  const voronoi = geoVoronoi(points);\n  const contours = voronoi.contour(points, {\n    value: d => d.properties.wind,\n    threshold: d3.range(0, 30, 2)\n  });\n\n  return contours;\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Input with D3.js Group Integration in JavaScript\nDESCRIPTION: Creates a radio input that uses d3.group to organize Olympic athletes by gold medal count, sorted in descending order, demonstrating integration with D3.js data transformation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst goldAthletes = view(\n  Inputs.radio(\n    d3.group(olympians, (d) => d.gold),\n    {label: \"Gold medal count\", sort: \"descending\"}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Input with Custom Range and Step in JavaScript\nDESCRIPTION: Sets up a range input with a custom range (0 to 255) and step value (1) for integer selection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst y = view(Inputs.range([0, 255], {step: 1}));\n```\n\n----------------------------------------\n\nTITLE: Loading an Apache Arrow IPC file with FileAttachment\nDESCRIPTION: Demonstrates how to load an Arrow IPC file using FileAttachment, which returns a promise to an Arrow table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst flights = FileAttachment(\"flights-200k.arrow\").arrow();\n```\n\n----------------------------------------\n\nTITLE: Visualizing SQL Query Results with Plot Histogram (JavaScript)\nDESCRIPTION: Combines SQL and Plot to bin stars by brightness and create a histogram visualization using a rect mark.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  x: {round: true, label: \"phot_g_mean_mag\"},\n  marks: [\n    Plot.axisY({tickFormat: (d) => d / 1000, label: \"count (thousands)\"}),\n    Plot.rectY(await sql`\n      SELECT FLOOR(phot_g_mean_mag / 0.2) * 0.2 AS mag1\n           , mag1 + 0.2 AS mag2\n           , COUNT() AS count\n        FROM gaia\n       WHERE phot_g_mean_mag IS NOT NULL\n       GROUP BY 1\n    `, {x1: \"mag1\", x2: \"mag2\", y: \"count\", tip: true})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Databricks Environment Configuration\nDESCRIPTION: Example environment configuration file showing required Databricks credentials and connection details.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-databricks/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABRICKS_SERVER_HOSTNAME=\"XXX.cloud.databricks.com\"\nDATABRICKS_HTTP_PATH=\"/sql/1.0/warehouses/XXX\"\nDATABRICKS_TOKEN=\"XXX\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Bump Charts Grid Layout\nDESCRIPTION: Creates a responsive grid layout with two cards showing bump charts for top men and women chess players. Each chart is wrapped in a responsive container that adjusts to width changes.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/chess/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid\">\n  <div class=\"card\">\n    <h2>Top ten women players</h2>\n    ${resize((width) => BumpChart(womens, {width}))}\n  </div>\n  <div class=\"card\">\n    <h2>Top ten men players</h2>\n    ${resize((width) => BumpChart(mens, {width}))}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inline Expression for Current Time\nDESCRIPTION: Example showing how to display the current time using a JavaScript inline expression with the reactive 'now' variable.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nThe current time is ${new Date(now).toLocaleTimeString(\"en-US\")}.\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Text Input in JavaScript\nDESCRIPTION: Creates a basic text input with default settings. The input's value changes as the user types.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = view(Inputs.text());\n```\n\n----------------------------------------\n\nTITLE: Loading ZIP Archive Contents\nDESCRIPTION: JavaScript code demonstrating how to load specific files from a ZIP archive.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst zip = FileAttachment(\"quakes.zip\").zip();\nconst metadata = zip.then((zip) => zip.file(\"metadata.json\").json());\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeMirror Editor with Default Value in Observable Framework\nDESCRIPTION: Creates an instance of the CodeMirror editor with a default value and exposes its content as a variable named 'input'. The editor allows users to enter and modify JavaScript code.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/codemirror/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = view(Editor({value: \"1 + 2\"}));\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Table Rows in JavaScript\nDESCRIPTION: Shows how to display the selected rows from a view-compatible table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nselection // Try selecting rows above!\n```\n\n----------------------------------------\n\nTITLE: Daily Rate Analysis Chart\nDESCRIPTION: Creates faceted histograms showing daily rate distribution by season with mean rate indicators.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst seasonColors = [\"#959C00\", \"#9C5A00\", \"#465C9C\", \"#109F73\"];\nconst seasonDomain = [\"Summer\", \"Fall\", \"Winter\", \"Spring\"];\n\nconst meanRateBySeason = d3\n  .rollups(\n    bookingsByMarketSegment,\n    (v) => d3.mean(v, (d) => d.ADR),\n    (d) => d.season\n  )\n  .map(([season, value]) => ({season, value}));\n\nconst dollarFormat = d3.format(\"$.2f\");\nconst defaultFormat = d3.format(\",\");\nfunction dailyRateChart(width, height) {\n  return Plot.plot({\n    width,\n    height: height - 20,\n    marginLeft: 30,\n    marginRight: 0,\n    marginTop: 10,\n    marginBottom: 30,\n    x: {label: \"Average rate($)\", grid: true},\n    y: {nice: true, label: null},\n    axis: null,\n    fy: {label: \"Season\", domain: seasonDomain},\n    color: {domain: seasonDomain, range: seasonColors, label: \"Season\"},\n    marks: [\n      Plot.axisX({ticks: 4}),\n      Plot.axisY({ticks: 2}),\n      Plot.rectY(\n        bookingsByMarketSegment,\n        Plot.binX({y: \"count\"}, {x: \"ADR\", interval: 10, fill: \"season\", fy: \"season\", tip: true})\n      ),\n      Plot.text(\n        bookingsByMarketSegment,\n        Plot.groupZ(\n          {text: (v) => `${v[0].season} (n = ${defaultFormat(v.length)})`},\n          {\n            fy: \"season\",\n            frameAnchor: \"top-right\",\n            dx: -6,\n            dy: 6\n          }\n        )\n      ),\n      Plot.ruleX(meanRateBySeason, {x: \"value\", fy: \"season\", stroke: \"currentColor\"}),\n      Plot.text(meanRateBySeason, {\n        x: \"value\",\n        fy: \"season\",\n        text: (d) => `${d.season} mean rate: ${dollarFormat(d.value)}`,\n        dx: 5,\n        dy: -20,\n        textAnchor: \"start\"\n      }),\n      Plot.frame({opacity: 0.4})\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Processing CSV Data\nDESCRIPTION: Loads Olympic athlete data from a CSV file and processes it using d3 autoType function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst olympians = await d3.csv(import.meta.resolve(\"npm:@observablehq/sample-datasets/olympians.csv\"), (d) => (delete d.id, delete d.info, d3.autoType(d)));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(olympians)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example .env file configuration for storing BigQuery authentication credentials securely.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-bigquery/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nBQ_PROJECT_ID=\"123456789-abc\"\nBQ_CLIENT_EMAIL=\"xxx@yyy.iam.gserviceaccount.com\"\nBQ_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxx-----END PRIVATE KEY-----\\n\"\n```\n\n----------------------------------------\n\nTITLE: Using Parameters with FileAttachment\nDESCRIPTION: Example showing how to use parameter values with FileAttachment to load corresponding JSON data for a product.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/params.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = FileAttachment(`${observable.params.product}.json`).json();\n```\n\n----------------------------------------\n\nTITLE: Detailed DuckDB Extension Configuration with Object Syntax\nDESCRIPTION: JavaScript configuration example showing the detailed configuration of DuckDB extensions, specifying source repositories, installation preferences, and loading behavior for each extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  duckdb: {\n    extensions: {\n      spatial: {\n        source: \"https://extensions.duckdb.org/\",\n        install: true,\n        load: true\n      },\n      h3: {\n        source: \"https://community-extensions.duckdb.org/\",\n        install: true,\n        load: true\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Latency Histogram Data in JavaScript\nDESCRIPTION: This snippet loads parquet data for a latency histogram and creates a canvas element for rendering.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst latencyHistogram = FileAttachment(\"data/latency-histogram.parquet\").parquet();\nconst histogramCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Workbook Sheet Names in JavaScript\nDESCRIPTION: Shows how to access the sheet names of a loaded Excel workbook. The sheet names are exposed as the workbook.sheetNames property.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/xlsx.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nworkbook.sheetNames\n```\n\n----------------------------------------\n\nTITLE: Displaying Data with Inputs.table\nDESCRIPTION: Renders the trips data in a table format using Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-databricks/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(trips)\n```\n\n----------------------------------------\n\nTITLE: Visualizing star positions from Parquet data\nDESCRIPTION: Creates a visualization of stars from the Gaia catalog using Plot's rect mark with binning to reveal the Milky Way.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  aspectRatio: 1,\n  marks: [\n    Plot.frame({fill: 0}),\n    Plot.rect(gaia, Plot.bin({fill: \"count\"}, {x: \"ra\", y: \"dec\", interval: 2, inset: 0}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Visualizations in Table Cells with JavaScript\nDESCRIPTION: Shows how to create inline visualizations like sparkbars for numeric columns in the table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins, {\n  format: {\n    culmen_length_mm: sparkbar(d3.max(penguins, d => d.culmen_length_mm)),\n    culmen_depth_mm: sparkbar(d3.max(penguins, d => d.culmen_depth_mm)),\n    flipper_length_mm: sparkbar(d3.max(penguins, d => d.flipper_length_mm)),\n    body_mass_g: sparkbar(d3.max(penguins, d => d.body_mass_g)),\n    sex: (x) => x.toLowerCase()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Databricks data loader implementation for Observable Framework\nDESCRIPTION: This code shows how to implement a data loader that queries Databricks and generates a CSV file in Observable Framework. The implementation references two key files: src/data/trips.csv.js (the main data loader) and src/data/databricks.js (a helper module).\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-databricks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/data/trips.csv.js\n// src/data/databricks.js\n```\n\n----------------------------------------\n\nTITLE: Formatted Map Checkbox with Units\nDESCRIPTION: Demonstrates custom formatting of Map entries to display both name and value with units.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst size2 = view(\n  Inputs.checkbox(\n    new Map([\n      [\"Short\", 8],\n      [\"Tall\", 12],\n      [\"Grande\", 16],\n      [\"Venti\", 20]\n    ]),\n    {value: [12], label: \"Size\", format: ([name, value]) => `${name} (${value} oz)`}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Loading XLSX File with FileAttachment in JavaScript\nDESCRIPTION: Demonstrates how to load a Microsoft Excel (XLSX) file using the FileAttachment method and the xlsx() function. This returns a promise to a Workbook instance.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/xlsx.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst workbook = FileAttachment(\"laser-report.xlsx\").xlsx();\n```\n\n----------------------------------------\n\nTITLE: Styling Scrollytelling Components with CSS\nDESCRIPTION: The CSS defines the layout and appearance of the scrollytelling components. It creates a sticky info panel that remains visible while scrolling, with different background colors for each step. The scroll sections have consistent sizing and subtle styling.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/intersection-observer/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.scroll-container {\n  position: relative;\n  margin: 1rem auto;\n  font-family: var(--sans-serif);\n}\n\n.scroll-info {\n  position: sticky;\n  aspect-ratio: 16 / 9;\n  top: calc((100% - 9 / 16 * 100vw) / 2);\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 64px;\n  transition: ease background-color 0.5s;\n  background-color: var(--theme-background-alt);\n}\n\n.scroll-info--step-1 {\n  background-color: #4269d0;\n}\n\n.scroll-info--step-2 {\n  background-color: #efb118;\n}\n\n.scroll-info--step-3 {\n  background-color: #ff725c;\n}\n\n.scroll-info--step-4 {\n  background-color: #6cc5b0;\n}\n\n.scroll-section {\n  position: relative;\n  aspect-ratio: 16 / 9;\n  margin: 1rem 0;\n  display: flex;\n  align-items: start;\n  justify-content: center;\n  border: solid 1px var(--theme-foreground-focus);\n  background: color-mix(in srgb, var(--theme-foreground-focus) 5%, transparent);\n  padding: 1rem;\n  box-sizing: border-box;\n}\n```\n\n----------------------------------------\n\nTITLE: R Data Loader for Dams\nDESCRIPTION: This R script (`dam-simple.csv.R`) is responsible for accessing dam data directly from the National Inventory of Dams (NID) API. It transforms the data into a static CSV file (`dam-simple.csv`) for use in the dashboard. The script depends on the data.table, dplyr, and readr R packages.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/README.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\n```\n.R\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying the Current Width Reactive Variable\nDESCRIPTION: Shows the current width of the main element using the built-in width reactive variable, which updates automatically on window resize.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nwidth\n```\n\n----------------------------------------\n\nTITLE: Displaying Arrow data with Inputs.table\nDESCRIPTION: Shows how to display Arrow table data using Observable's Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nInputs.table(flights)\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Reference in Reactive JavaScript\nDESCRIPTION: Demonstrates how code can reference variables defined later in the document, showing Framework's topological execution order rather than document order.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nx + y\n```\n\n----------------------------------------\n\nTITLE: Computing Hourly Change Percentages\nDESCRIPTION: Calculates percentage changes in demand between consecutive hours for each balancing authority.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst baHourlyChange = d3.rollup(baHourlyDemand, (d) => ((d[hoursAgo]?.value - d[hoursAgo + 1]?.value) / d[hoursAgo]?.value) * 100, (d) => d[\"ba\"] );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Block-level Promise Waiting\nDESCRIPTION: Shows that referencing code blocks must wait for the entire defining block to fulfill, not just the specific referenced variables.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst one = 1;\nconst two = 2;\nawait new Promise((resolve) => setTimeout(resolve, 5000));\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Expression Block in Markdown\nDESCRIPTION: Example of a JavaScript expression block in Markdown that implicitly displays its result (1 + 2 = 3).\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```js\n1 + 2\n```\n```\n\n----------------------------------------\n\nTITLE: Loading JSON with FileAttachment\nDESCRIPTION: Shows how to load a JSON file using FileAttachment, which returns a promise that will be implicitly awaited when referenced in other code blocks.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst volcano = FileAttachment(\"volcano.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Loading Avatar Latency Data in JavaScript\nDESCRIPTION: This code loads parquet data for avatar latency when the content becomes visible and creates a canvas element for rendering.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst latencyAvatarHeatmap = visibility().then(() => FileAttachment(\"data/latency-heatmap-avatar.parquet\").parquet());\nconst latencyAvatarCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Directed Graph with Custom Node Shapes and Edge Styles in DOT\nDESCRIPTION: This DOT language snippet defines a directed graph with four nodes (A, B, C, and D) having different shapes and connecting edges with custom styling. Node A is shaped as a diamond, B as a box, and C as a circle, while the edges demonstrate various styling options including dashed lines and custom arrow properties.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/dot-graphviz.md#2025-04-21_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph D {\n\n  A [shape=diamond]\n  B [shape=box]\n  C [shape=circle]\n\n  A -> B [style=dashed]\n  A -> C\n  A -> D [penwidth=5, arrowhead=none]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Files Array in JavaScript\nDESCRIPTION: Displays the array of files selected through a multiple file input, each providing a FileAttachment-like interface.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfiles\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with FileAttachment\nDESCRIPTION: Loads the processed Google Analytics data from a CSV file using FileAttachment utility.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeUsers = FileAttachment(\"./data/active-users.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: UI for State Selection\nDESCRIPTION: Implements a user-interface component to select a state from a list of available states. This selection drives the data processing and visualization focus in the application, directly affecting which geographic and dam data are presented.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pickState = view(\n  Inputs.select(\n    dams.map((d) => d.state),\n    {\n      multiple: false,\n      label: \"Pick a state or territory:\",\n      unique: true,\n      sort: true,\n      value: \"Louisiana\"\n    }\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using the queryRow Method in DuckDBClient\nDESCRIPTION: Example of using the queryRow method to execute a SQL query and return a single row result, in this case a count of rows in the gaia table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndb.queryRow(\"SELECT count() AS count FROM gaia\")\n```\n\n----------------------------------------\n\nTITLE: Rendering US Map with Observable Plot in JavaScript\nDESCRIPTION: Shows how to use Observable Plot to render a map of the United States using the previously created GeoJSON objects for counties, states, and nation outline.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  projection: \"identity\",\n  width: 975,\n  height: 610,\n  marks: [\n    Plot.geo(countiesmesh, {strokeOpacity: 0.5}),\n    Plot.geo(statemesh, {strokeWidth: 0.75}),\n    Plot.geo(nation, {strokeWidth: 1.5})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Helper for Datawrapper Chart Embedding\nDESCRIPTION: Helper function that creates a script element for embedding Datawrapper charts dynamically. Takes a chart ID as input and configures the embed script with appropriate attributes.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/datawrapper-api/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DatawrapperChart(chartId) {\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"data-dark\", dark);\n  script.setAttribute(\"src\", `https://datawrapper.dwcdn.net/${chartId}/embed.js`);\n  return script;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Generator Implementation\nDESCRIPTION: Demonstrates how to create a custom generator using Generators.observe for handling input events.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = Generators.observe((notify) => {\n  const inputted = () => notify(nameInput.value);\n  inputted();\n  nameInput.addEventListener(\"input\", inputted);\n  return () => nameInput.removeEventListener(\"input\", inputted);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Captured Display Function\nDESCRIPTION: Example of creating an interactive button that uses a previously captured display function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.button(\"Click me\", {value: 0, reduce: (i) => displayThere(++i)})\n```\n\n----------------------------------------\n\nTITLE: Implementing File Selection with Inputs.select in Observable Framework\nDESCRIPTION: This code snippet demonstrates how to create a file selection dropdown using Inputs.select. It uses FileAttachment objects as values for the select options, allowing users to choose between different files. The selected file's content is then displayed.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/input-select-file/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```js\nconst files = [\n  FileAttachment(\"example.csv\"),\n  FileAttachment(\"example.json\"),\n  FileAttachment(\"example.txt\")\n];\n\nconst file = Inputs.select(files, {\n  label: \"Choose a file\",\n  format: f => f.name\n});\n\nfile.text()\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Generator for Hexagon Height\nDESCRIPTION: This generator function creates a smooth animation effect for the height of the extruded hexagons in the visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst t = (function* () {\n  const duration = 1000;\n  const start = performance.now();\n  const end = start + duration;\n  let now;\n  while ((now = performance.now()) < end) yield d3.easeCubicInOut(Math.max(0, (now - start) / duration));\n  yield 1;\n})();\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data in JavaScript\nDESCRIPTION: JavaScript code to load the JSON data generated by the Rust script using FileAttachment in Observable.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-rust-to-json/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst hands = FileAttachment(\"data/poker.json\").json();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst handsTs = FileAttachment(\"data/poker-ts.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Configuring Exported SVG Files for Multiple Projects\nDESCRIPTION: Configuration to export multiple SVG chart files for different projects with light and dark variants. This enables embedding these charts in other websites or GitHub READMEs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  dynamicPaths: [\n    \"/@observablehq/framework/downloads-dark.svg\",\n    \"/@observablehq/framework/downloads.svg\",\n    \"/@observablehq/plot/downloads-dark.svg\",\n    \"/@observablehq/plot/downloads.svg\",\n    \"/@observablehq/runtime/downloads-dark.svg\",\n    \"/@observablehq/runtime/downloads.svg\"\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Radio Input with Disabled Options in JavaScript\nDESCRIPTION: Creates a radio input with vowel options where the letter 'Y' is specifically disabled, demonstrating selective option disabling.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst vowel = view(Inputs.radio([...\"AEIOUY\"], {label: \"Vowel\", disabled: [\"Y\"]}));\n```\n\n----------------------------------------\n\nTITLE: Creating SQLiteDatabaseClient Manually\nDESCRIPTION: Shows how to manually create a SQLiteDatabaseClient by opening a FileAttachment. This approach provides more explicit control over the database initialization process.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = SQLiteDatabaseClient.open(FileAttachment(\"chinook.db\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Chart of Launch Vehicles\nDESCRIPTION: Generates a horizontal bar chart showing the most popular launch vehicles across different countries. The visualization is sorted by number of launches and includes country-based color coding and tooltips.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-dashboard.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction vehicleChart(data, {width}) {\n  return Plot.plot({\n    title: \"Popular launch vehicles\",\n    width,\n    height: 300,\n    marginTop: 0,\n    marginLeft: 50,\n    x: {grid: true, label: \"Launches\"},\n    y: {label: null},\n    color: {...color, legend: true},\n    marks: [\n      Plot.rectX(data, Plot.groupY({x: \"count\"}, {y: \"family\", fill: \"state\", tip: true, sort: {y: \"-x\"}})),\n      Plot.ruleX([0])\n    ]\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CSV Files from ZIP Archive in JavaScript\nDESCRIPTION: These JavaScript snippets demonstrate how to access the 'estimates.csv' and 'predictions.csv' files from the generated ZIP archive using FileAttachment. The data is loaded as CSV with typed values.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-zip/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst modelEstimates = FileAttachment(\"data/penguin-mlr/estimates.csv\").csv({typed: true});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst modelPredictions = FileAttachment(\"data/penguin-mlr/predictions.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Querying Databricks NYC Taxi Data\nDESCRIPTION: Executes a SQL query to fetch 100 rows from the NYC taxi dataset and formats the result as CSV using d3-dsv.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-databricks/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\nimport {executeStatement} from \"./databricks.js\";\n\nprocess.stdout.write(csvFormat(await executeStatement(\"SELECT * FROM samples.nyctaxi.trips LIMIT 100\")));\n```\n\n----------------------------------------\n\nTITLE: Fetching and Processing Text Data with Julia\nDESCRIPTION: Julia implementation for fetching The Raven poem from Project Gutenberg, splitting it into stanzas, and extracting a specific paragraph. Requires HTTP, Gumbo, and TextAnalysis packages.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-julia-to-txt/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n# Load Julia packages (must be installed)\nusing HTTP\nusing Gumbo\nusing TextAnalysis\n\n# Text URL\nurl = \"https://www.gutenberg.org/cache/epub/1065/pg1065.txt\"\n\n# Function to fetch text\nfunction fetch_text_from_url(url::String)\n  response = HTTP.get(url)\n  text = String(response.body)\n  text = replace(text, \"\\r\" => \"\")\n  return text\nend\n\n# Split into paragraphs\nfunction split_into_paragraphs(text::String)\n    paragraphs = split(text, \"\\n\\n\")\n    return paragraphs\nend\n\n# Return a paragraph by number\nfunction get_paragraph_by_number(text::String, paragraph_number::Int)\n  paragraphs = split_into_paragraphs(text)\n  return paragraphs[paragraph_number]\nend\n\n# Fetch text and access a paragraph by number\ntext = fetch_text_from_url(url)\nparagraph_number = 29\nresult_paragraph = get_paragraph_by_number(text, paragraph_number)\n\n# Return text to standard output\nprintln(result_paragraph)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Date Variables for Observable Plot Dashboard\nDESCRIPTION: Declares global date variables to ensure consistency across plots, including end date, start date, last month, and last week.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/plot/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst end = downloads[0].date;\nconst start = d3.utcYear.offset(end, -2);\nconst lastMonth = d3.utcDay.offset(end, -28);\nconst lastWeek = d3.utcDay.offset(end, -7);\nconst x = {domain: [start, end]};\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Input with Colors\nDESCRIPTION: Creates a basic checkbox input with color options and a label.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst colors = view(Inputs.checkbox([\"red\", \"green\", \"blue\"], {label: \"color\"}));\n```\n\n----------------------------------------\n\nTITLE: Customizing Typography and Link Styles in CSS\nDESCRIPTION: This snippet sets custom typography styles, using sans-serif for body text, serif for headings, and adding underlines to links within paragraphs.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-stylesheet/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  font-family: var(--sans-serif);\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: var(--serif);\n}\n\n#observablehq-main p a[href] {\n  text-decoration: underline;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Apache Arrow explicitly\nDESCRIPTION: Shows how to explicitly import the Apache Arrow library from npm in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport * as Arrow from \"npm:apache-arrow\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Data Loader for CSV Generation\nDESCRIPTION: A data loader script that generates CSV data for a specific product by querying a database. It demonstrates parsing command-line parameters and formatting data as CSV.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/params.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {parseArgs} from \"node:util\";\nimport {csvFormat} from \"d3-dsv\";\nimport postgres from \"postgres\";\n\nconst sql = postgres(); // Note: uses psql environment variables\n\nconst {\n  values: {product}\n} = parseArgs({\n  options: {product: {type: \"string\"}}\n});\n\nconst sales = await sql`\n  SELECT\n    DATE(sale_date) AS sale_day,\n    SUM(quantity) AS total_quantity_sold,\n    SUM(total_amount) AS total_sales_amount\n  FROM\n    sales\n  WHERE\n    product_id = ${product}\n  GROUP BY\n    DATE(sale_date)\n  ORDER BY\n    sale_day\n`;\n\nprocess.stdout.write(csvFormat(sales));\n\nawait sql.end();\n```\n\n----------------------------------------\n\nTITLE: Creating Text Input with HTML Label in JavaScript\nDESCRIPTION: Demonstrates how to use an HTML element as a label for more control over styling.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst signature = view(\n  Inputs.text({\n    label: html`<b>Fancy</b>`,\n    placeholder: \"What's your fancy?\"\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Width Vega-Lite Chart with CSS Scaling\nDESCRIPTION: This snippet creates a Vega-Lite chart with a fixed natural width of 640px but applies CSS styling to make it scale down proportionally to fit narrower containers. It uses aspect ratio and max-width properties to maintain the chart's proportions while adapting to available space.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/vega-responsive/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = display(await vl.render({\n  spec: {\n    width: 640,\n    height: 250,\n    data: {url: \"https://vega.github.io/vega-lite/data/cars.json\"},\n    mark: \"bar\",\n    encoding: {\n      x: {field: \"Cylinders\"},\n      y: {aggregate: \"count\", title: \"Number of cars\"}\n    }\n  }\n}));\n\nconst canvas = chart.firstChild;\ncanvas.style.aspectRatio = `${canvas.width} / ${canvas.height}`;\ncanvas.style.maxWidth = \"100%\";\ncanvas.style.height = \"auto\";\n```\n\n----------------------------------------\n\nTITLE: Extracting and Displaying an Image from a ZIP Archive in JavaScript\nDESCRIPTION: Demonstrates extracting a single file from a ZIP archive using the archive.file method and displaying it as an image with custom width and alt text attributes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmuybridge.file(\"deer.jpeg\").image({width: 320, alt: \"A deer\"})\n```\n\n----------------------------------------\n\nTITLE: Loading Arrow File with Arquero\nDESCRIPTION: Example of loading data from an Arrow file using FileAttachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst flights = FileAttachment(\"flights-200k.arrow\").arquero();\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Input Implementation\nDESCRIPTION: Creates a basic textarea input with default configuration that returns an empty string initially and updates as the user types.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/textarea.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = view(Inputs.textarea());\n```\n\n----------------------------------------\n\nTITLE: Creating Counties Mesh from TopoJSON in JavaScript\nDESCRIPTION: Shows how to create a mesh of county borders using topojson.mesh() method, which includes each delimitation once to avoid duplicate strokes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst countiesmesh = topojson.mesh(us, us.objects.counties);\n```\n\n----------------------------------------\n\nTITLE: Converting viewof operator to view function in JavaScript\nDESCRIPTION: Shows how to replace the Observable-specific viewof operator with the Framework view function for creating reactive input elements.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nviewof gain = Inputs.range([0, 11], {value: 5, step: 0.1, label: \"Gain\"})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst gain = view(Inputs.range([0, 11], {value: 5, step: 0.1, label: \"Gain\"}));\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Footer Content in Observable Framework\nDESCRIPTION: This JavaScript snippet shows how to add a custom footer with a dynamic link to view the source of each page in an Observable Framework app.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfooter: ({path}) => `<a href=\"https://github.com/example/test/blob/main/src${path}.md?plain=1\">view source</a>`,\n```\n\n----------------------------------------\n\nTITLE: Creating Block-scoped Variables\nDESCRIPTION: Demonstrates how to prevent variables from being visible outside the current block by using curly braces to create a local scope.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  const z = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Observe Generator Example\nDESCRIPTION: Shows how to use the observe generator to watch for hash changes in the URL\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst hash = Generators.observe((change) => {\n  const changed = () => change(location.hash);\n  addEventListener(\"hashchange\", changed);\n  changed();\n  return () => removeEventListener(\"hashchange\", changed);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nhash\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Range Input in JavaScript\nDESCRIPTION: Creates a basic range input with default settings (0 to 1 range).\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = view(Inputs.range());\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Table of Contents in Observable Framework\nDESCRIPTION: TypeScript interface that defines the configuration options for the table of contents feature in Observable Framework. The interface allows specifying whether to show the TOC and what label to use.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TableOfContents {\n  show?: boolean;\n  label?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Image Files with FileAttachment in JavaScript\nDESCRIPTION: Shows how to load multiple image files using an array of FileAttachment calls.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst frames = [\n  FileAttachment(\"frame1.png\"),\n  FileAttachment(\"frame2.png\"),\n  FileAttachment(\"frame3.png\"),\n  FileAttachment(\"frame4.png\"),\n  FileAttachment(\"frame5.png\"),\n  FileAttachment(\"frame6.png\"),\n  FileAttachment(\"frame7.png\"),\n  FileAttachment(\"frame8.png\"),\n  FileAttachment(\"frame9.png\")\n];\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Generator Example\nDESCRIPTION: Shows how to use the dark mode generator and create responsive visualizations\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst dark = Generators.dark();\n```\n\nLANGUAGE: markdown\nCODE:\n```\nThe current theme is: *${dark ? \"dark\" : \"light\"}*.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  height: 260,\n  color: {scheme: dark ? \"turbo\" : \"ylgnbu\"},\n  marks: [\n    Plot.rectY(\n      olympians,\n      Plot.binX(\n        {y2: \"count\"},\n        {\n          x: \"weight\",\n          fill: \"weight\",\n          z: \"sex\",\n          mixBlendMode: dark ? \"screen\" : \"multiply\"\n        }\n      )\n    ),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Date Input in JavaScript\nDESCRIPTION: Demonstrates the creation of a readonly date input that displays a fixed date value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst readonly = view(Inputs.date({label: \"Readonly date\", value: \"2021-01-01\", readonly: true}));\n```\n\n----------------------------------------\n\nTITLE: Conditional Text Based on Button State\nDESCRIPTION: Uses a ternary expression to conditionally display different text based on whether the confirmation button has been clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nconfirm ? \"Confirmed!\" : \"Awaiting confirmation…\"\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Animation for Count Display\nDESCRIPTION: Defines a CSS animation to visually highlight changes in the count value. This enhances the user experience by providing visual feedback on state changes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n@keyframes flash {\n  from { background-color: var(--theme-blue); }\n  to { background-color: none; }\n}\n.flash {\n  animation-name: flash;\n  animation-duration: 1s;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Vowel Radio Selection in JavaScript\nDESCRIPTION: Displays the currently selected vowel from the vowel radio input defined previously.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvowel\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Rainbow Text\nDESCRIPTION: JavaScript that creates a span element with a dynamically changing color based on the current time (now), creating a rainbow effect.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhtml`<span style=${{color: `hsl(${(now / 10) % 360} 100% 50%)`}}>Rainbow text!</span>`\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle Input with HTML Label in JavaScript\nDESCRIPTION: This example shows how to create a toggle input with an HTML element as the label, allowing for more control over the label's appearance. It uses the html`` template literal to create the label.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fancy = view(Inputs.toggle({label: html`<b>Fancy</b>`}));\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Paths from Database\nDESCRIPTION: Implementation of dynamicPaths as an async generator function that queries a Postgres database to get product IDs and yields corresponding paths.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/params.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport postgres from \"postgres\";\n\nconst sql = postgres(); // Note: uses psql environment variables\n\nexport default {\n  async *dynamicPaths() {\n    for await (const {id} of sql`SELECT id FROM products`.cursor()) {\n      yield `/products/${id}`;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading TopoJSON File in JavaScript\nDESCRIPTION: Shows how to load a TopoJSON file containing data for US counties, states, and outline, projected using Albers' equal area-conic projection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst us = FileAttachment(\"counties-albers-10m.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Mermaid Flow Diagram in Markdown\nDESCRIPTION: Shows how to create a flow diagram using Mermaid fenced code block syntax in Markdown.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mermaid.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n```\n\n----------------------------------------\n\nTITLE: Querying COVID-19 Data from BigQuery\nDESCRIPTION: Executes a BigQuery SQL query to fetch confirmed COVID-19 cases from Italy's public dataset. Uses d3-dsv for CSV formatting and outputs the results to stdout.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-bigquery/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {csvFormat} from \"d3-dsv\";\nimport {runQuery} from \"./google-bigquery.js\";\n\nconst rows = await runQuery(`\n  SELECT\n    FORMAT_TIMESTAMP('%Y-%m-%d', date) as date,\n    confirmed_cases\n  FROM\n    \\`bigquery-public-data.covid19_italy.data_by_province\\`\n  WHERE\n    name = \"Lombardia\"\n    AND province_name = \"Lecco\"\n    AND date BETWEEN '2020-05-01 00:00:00 UTC' AND '2020-05-15 00:00:00 UTC'\n  GROUP BY 1,2\n  ORDER BY 1 ASC;\n`);\n\nprocess.stdout.write(csvFormat(rows));\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Variables in SQL Queries\nDESCRIPTION: Demonstrates how to use reactive variables in SQL queries by interpolating the user input from the text field into a LIKE clause for filtering tracks by name.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst tracks = db.sql`SELECT * FROM tracks WHERE Name LIKE ${`%${name}%`}`;\n```\n\n----------------------------------------\n\nTITLE: Importing Exported Modules in Vanilla JavaScript\nDESCRIPTION: Example of how to import and use an exported Framework module in a standard web page using ES modules. This creates a chart and appends it to the document body.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n\nimport {Chart} from \"https://my-app.example.com/chart.js\";\n\ndocument.body.append(await Chart());\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Data in ObservableHQ\nDESCRIPTION: Imports JSON and CSV data from an external module and displays them using Observable's display function. The code demonstrates basic data visualization functionality in the Observable framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/fetches/foo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fooJsonData, fooCsvData} from \"/foo/foo.js\";\n\ndisplay(fooJsonData);\ndisplay(fooCsvData);\n```\n\n----------------------------------------\n\nTITLE: Using JSR Imported Random Functions\nDESCRIPTION: Shows how to use the random functions imported from JSR to generate random numbers with a seeded PRNG. This example creates a random integer between 1 and 10 using a fixed seed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nrandomIntegerBetween(1, 10, {prng: randomSeeded(1n)})\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Node with JavaScript DOM API\nDESCRIPTION: Example of using the DOM API to create and display a text node. When this code executes, it inserts the text node into the page.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.createTextNode(\"[insert chart here]\") // some imagination required\n```\n\n----------------------------------------\n\nTITLE: Creating Datetime Input in JavaScript\nDESCRIPTION: Illustrates the creation of a datetime input that allows specifying both date and time in the user's local time zone.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst datetime = view(Inputs.datetime({label: \"Moment\"}));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Names from CSV Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to access the column names of the loaded CSV data using the 'columns' property.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngistemp.columns\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP File Input in JavaScript\nDESCRIPTION: Creates a file input specifically for ZIP archives with a custom label and required validation. The input only accepts files with .zip extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst zipfile = view(Inputs.file({label: \"ZIP archive\", accept: \".zip\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Textarea with Submit Button and Validation\nDESCRIPTION: Implements a textarea with submission control, minimum length requirement of 40 characters, and 6 rows of visible text area.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/textarea.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst essay = view(Inputs.textarea({label: \"Essay\", rows: 6, minlength: 40, submit: true}));\n```\n\n----------------------------------------\n\nTITLE: Displaying Penguin Dataset Columns in JavaScript\nDESCRIPTION: Shows how to access and display the column names of the 'penguins' dataset.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npenguins.columns\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic SQL Function with DuckDBClient.sql\nDESCRIPTION: Setting up a dynamic SQL function that connects to an earthquake data feed based on user selection, allowing SQL code blocks to query the data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst sql = DuckDBClient.sql({quakes: `https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/${feed}_day.csv`});\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data from File Attachment in Observable\nDESCRIPTION: Code to load penguins data from a CSV file attachment with type conversion enabled. This references the data generated by the Airtable data loader script.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-airtable/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst penguins = FileAttachment(\"./data/penguins.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying External Modules in Observable Framework\nDESCRIPTION: This code imports the D3 library from NPM, as well as local modules using relative and absolute paths. It then displays the imported modules and references a file attachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/imports/foo/foo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as d3 from \"npm:d3\";\nimport {bar} from \"../bar/bar.js\";\nimport {top} from \"/top.js\";\n\ndisplay(bar);\ndisplay(top);\nFileAttachment(\"/top.js\");\n```\n\n----------------------------------------\n\nTITLE: Loading Penguin Data and Performing K-means Clustering in R\nDESCRIPTION: This R script loads penguin size measurement data, performs k-means clustering, and outputs the results as a CSV file. It uses the palmerpenguins package for data and the stats package for clustering.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-csv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nlibrary(palmerpenguins)\nlibrary(stats)\n\n# Load the penguins dataset\ndata(penguins)\n\n# Remove rows with missing values\npenguins_clean <- na.omit(penguins)\n\n# Perform k-means clustering\nset.seed(123)  # for reproducibility\nkmeans_result <- kmeans(penguins_clean[, c(\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\")], centers = 3)\n\n# Add cluster assignments to the dataset\npenguins_clustered <- cbind(penguins_clean, cluster = kmeans_result$cluster)\n\n# Write the result to a CSV file\nwrite.csv(penguins_clustered, \"penguins_clustered.csv\", row.names = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Using Spatial Extension Functions in SQL\nDESCRIPTION: Example of using the ST_Area function from the spatial extension to calculate the area of a polygon in SQL.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ST_Area('POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))'::GEOMETRY) as area;\n```\n\n----------------------------------------\n\nTITLE: Importing from Remote URL\nDESCRIPTION: Shows how to import a module directly from a remote URL. This example imports canvas-confetti directly from jsDelivr's ESM endpoint, which is less secure and not self-hosted compared to npm imports.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from \"https://cdn.jsdelivr.net/npm/canvas-confetti/+esm\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Table\nDESCRIPTION: Creates an interactive table display of the COVID-19 statistics using Inputs.table.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-bigquery/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(covidStats)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Date Input in JavaScript\nDESCRIPTION: Creates a basic date input using the Inputs.date() function and displays it using the view() function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = view(Inputs.date());\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Styles for Observable Framework\nDESCRIPTION: A CSS stylesheet defining custom styles for various elements in an Observable Framework project. It includes styles for focus elements, color inversion, image cropping, word breaks, and wide containers using theme variables for consistent styling.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.focus {\n  color: var(--theme-foreground-focus);\n}\n\n.invert {\n  background-color: var(--theme-foreground-alt);\n  color: var(--theme-background);\n}\n\n.crop {\n  border-radius: 8px;\n  margin: 1rem;\n  max-width: calc(100% - 2rem);\n  box-shadow: 0 0 0 0.75px rgba(128, 128, 128, 0.2), 0 6px 12px 6px rgba(0, 0, 0, 0.4);\n  aspect-ratio: 3024 / 1888;\n  object-fit: cover;\n  object-position: 0 100%;\n}\n\n.wbr::before {\n  content: \"\\200b\";\n}\n\n.wide {\n  max-width: 960px;\n}\n\nfigcaption code {\n  font-size: 90%; /* TODO move to global.css */\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Row with queryRow\nDESCRIPTION: Shows how to use the queryRow method to retrieve just a single row from a query result, in this case getting the SQLite version information.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndb.queryRow(`SELECT sqlite_version()`)\n```\n\n----------------------------------------\n\nTITLE: Creating a View-Compatible Table in JavaScript\nDESCRIPTION: Demonstrates how to create a view-compatible table that allows row selection and can be referenced from other cells.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst selection = view(Inputs.table(penguins, {required: false}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Input Generator\nDESCRIPTION: Creates a generator that yields input values using Generators.input helper method.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = Generators.input(nameInput);\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a ZIP Archive in JavaScript\nDESCRIPTION: Shows how to access the filenames property of a ZipArchive object to list all paths of files contained within the ZIP archive.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmuybridge.filenames\n```\n\n----------------------------------------\n\nTITLE: Creating Linked 1D Range Inputs\nDESCRIPTION: Initializes two linked 1D range inputs for x and y coordinates with specific range constraints and step values.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-input-2d/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst xInput = Inputs.range([0, 1], {label: \"x\", step: 0.01});\nconst yInput = Inputs.range([0, 1], {label: \"y\", step: 0.01});\nconst x = view(xInput);\nconst y = view(yInput);\n```\n\n----------------------------------------\n\nTITLE: Animation Frame Generator\nDESCRIPTION: Creates a generator that yields on each animation frame for smooth animations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst i = (function* () {\n  for (let i = 0; true; ++i) {\n    yield i;\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Controls\nDESCRIPTION: Sets up time parsing, formatting, and input controls for temporal navigation of the dashboard.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeParse = d3.utcParse(\"%Y-%m-%dT%H\");\nconst hourFormat = d3.timeFormat(\"%-I %p\");\n\nconst MS_IN_AN_HOUR = 1000 * 60 * 60;\nconst hours = [...new Set(baHourlyDemand.map(d => d.period))].map(timeParse);\nconst [startHour, endHour] = d3.extent(hours);\nconst hoursBackOfData = Math.ceil(Math.abs(endHour - startHour) / (MS_IN_AN_HOUR)) - 1;\nconst hoursAgoInput = Inputs.range([hoursBackOfData, 0], {step: 1, value: 0, width: 150});\nconst hoursAgo = Generators.input(hoursAgoInput);\nhoursAgoInput.querySelector(\"input[type=number]\").remove();\n```\n\n----------------------------------------\n\nTITLE: Grid with Text and Table Cards\nDESCRIPTION: Cards can contain various content types including text and tables. This example shows a 2-column grid with a text card and a table card with padding removed for better presentation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\">\n  <div class=\"card\">\n    <h2>Lorem ipsum</h2>\n    <p>Id ornare arcu odio ut sem nulla pharetra. Aliquet lectus proin nibh nisl condimentum id venenatis a. Feugiat sed lectus vestibulum mattis ullamcorper velit. Aliquet nec ullamcorper sit amet. Sit amet tellus cras adipiscing. Condimentum id venenatis a condimentum vitae. Semper eget duis at tellus. Ut faucibus pulvinar elementum integer enim.</p>\n    <p>Et malesuada fames ac turpis. Integer vitae justo eget magna fermentum iaculis eu non diam. Aliquet risus feugiat in ante metus dictum at. Consectetur purus ut faucibus pulvinar.</p>\n  </div>\n  <div class=\"card\" style=\"padding: 0;\">\n    ${Inputs.table(industries)}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Vote Radio Value in JavaScript\nDESCRIPTION: Displays the currently selected value from the vote radio input defined previously.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvote\n```\n\n----------------------------------------\n\nTITLE: Creating a React Root for Inline Expression\nDESCRIPTION: Creates a DOM node and ReactDOM root to enable using React components in inline Markdown expressions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst node = document.createElement(\"SPAN\");\nconst root = ReactDOM.createRoot(node);\n```\n\n----------------------------------------\n\nTITLE: Styled Checkbox with HTML Formatting\nDESCRIPTION: Implements a checkbox with custom HTML styling and formatting for color options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst colors2 = view(\n  Inputs.checkbox([\"red\", \"green\", \"blue\"], {\n    value: [\"red\"],\n    label: html`<b>Colors</b>`,\n    format: (x) =>\n      html`<span style=\"\n          text-transform: capitalize;\n          border-bottom: solid 2px ${x};\n          margin-bottom: -2px;\n        \">${x}</span>`\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: DuckDB Configuration in Observable Framework\nDESCRIPTION: Example of how to configure DuckDB extensions in Observable Framework using the default export config object.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  duckdb: {\n    extensions: [\"spatial\"]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Data with Observable Framework\nDESCRIPTION: This code snippet imports data (fooCsvData, fooJsonData, topCsvData, topJsonData) from the \"/top.js\" module. It then uses the `display` function to render each imported dataset. The `display` function is part of the Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/fetches/top.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fooCsvData, fooJsonData, topCsvData, topJsonData} from \"/top.js\";\n\ndisplay(fooJsonData);\ndisplay(fooCsvData);\ndisplay(topJsonData);\ndisplay(topCsvData);\n```\n\n----------------------------------------\n\nTITLE: Module Preloads for D3 Array and Dependencies\nDESCRIPTION: HTML output showing how Framework preloads d3-array and its transitive dependencies (isoformat and internmap) to optimize loading performance.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"modulepreload\" href=\"/_npm/d3-array@3.2.4/_esm.js\">\n<link rel=\"modulepreload\" href=\"/_npm/isoformat@0.2.1/_esm.js\">\n<link rel=\"modulepreload\" href=\"/_npm/internmap@2.0.3/_esm.js\">\n```\n\n----------------------------------------\n\nTITLE: D3 Grouped Data Checkbox\nDESCRIPTION: Shows integration with d3.group for creating checkboxes from grouped Olympic athlete data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst goldAthletes = view(\n  Inputs.checkbox(\n    d3.group(olympians, (d) => d.gold),\n    {label: \"Gold medal count\", sort: \"descending\", key: [4, 5]}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Framework API Visualization Components in JavaScript\nDESCRIPTION: This code snippet imports two components from the Observable framework: ApiHeatmap and ApiHistogram. These components are likely used for creating visual representations of API data, such as usage patterns or distribution of API calls.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {ApiHeatmap} from \"./components/apiHeatmap.js\";\nimport {ApiHistogram} from \"./components/apiHistogram.js\";\n```\n\n----------------------------------------\n\nTITLE: ObservableHQ Framework Project with Alternative Folder Structure\nDESCRIPTION: Shows a variant project structure where a folder's index page is moved to the parent directory, while maintaining the same URL routing pattern.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/project-structure.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  ├─ missions\n│  │  ├─ apollo.md\n│  │  └─ gemini.md\n│  ├─ missions.md\n│  └─ index.md\n└─ ⋯\n```\n\n----------------------------------------\n\nTITLE: Implementing Submit Option for Date Input in JavaScript\nDESCRIPTION: Shows how to use the submit option to defer reporting the new value until the user clicks Submit or hits Enter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sdate = view(Inputs.date({label: \"Date\", submit: true}));\n```\n\n----------------------------------------\n\nTITLE: Inline Expression with Interactive Input\nDESCRIPTION: Example showing how to embed an interactive range input directly in Markdown text using Observable Inputs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nor even a reactive input ${Inputs.bind(html`<input type=range style=\"width: 120px;\">`, numberInput)} ${number}\n```\n\n----------------------------------------\n\nTITLE: Filtering Geographic Data\nDESCRIPTION: Filters county FIPS codes and state capitals based on a user-selected state. This snippet allows the project to dynamically update its data focus to a specific state, facilitating detailed analysis and visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst fipsSelectedState = fips\n  .filter((d) => d.state_name == pickState)\n  .map((d) => d.fips);\n\nconst capitalSelectedState = capitals.filter((d) => d.name == pickState);\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggle Input Values in JavaScript\nDESCRIPTION: This example demonstrates how to create a toggle input with custom on/off values (1 and 0) instead of the default true/false. It uses the 'values' option in the Inputs.toggle() function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst binary = view(Inputs.toggle({label: \"Binary\", values: [1, 0]}));\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Version from npm Package\nDESCRIPTION: Demonstrates how to import a specific version of a package using semver ranges. This example imports major version 1 of the canvas-confetti package.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from \"npm:canvas-confetti@1\";\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in Observable Framework\nDESCRIPTION: This snippet demonstrates how to access URL parameters in Observable Framework using the observable.params object. The code retrieves the value of a parameter named 'param' which can be passed through the URL.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/params/foo/[param].md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nobservable.params.param\n```\n\n----------------------------------------\n\nTITLE: Defining Sparkbar Function for Table Visualization in JavaScript\nDESCRIPTION: Defines a sparkbar function used to create inline bar visualizations for numeric columns in the table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sparkbar(max) {\n  return (x) => htl.html`<div style=\"\n    background: var(--theme-green);\n    color: black;\n    font: 10px/1.6 var(--sans-serif);\n    width: ${100 * x / max}%;\n    float: right;\n    padding-right: 3px;\n    box-sizing: border-box;\n    overflow: visible;\n    display: flex;\n    justify-content: end;\">${x.toLocaleString(\"en-US\")}`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial View State for deck.gl Visualization\nDESCRIPTION: This code sets up the initial camera position and zoom levels for the deck.gl visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialViewState = {\n  longitude: -2,\n  latitude: 53.5,\n  zoom: 5.7,\n  minZoom: 5,\n  maxZoom: 15,\n  pitch: 40.5,\n  bearing: -5\n};\n```\n\n----------------------------------------\n\nTITLE: Using markdown-it-container for a tip in Markdown\nDESCRIPTION: This example shows how to use the ::: syntax to create a tip container in Markdown. The content inside the container will be styled as a tip.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-container/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n::: tip\nThat's a _nice_ **tip**, ain't it?\n:::\n```\n\n----------------------------------------\n\nTITLE: Extracting ZIP File Content in JavaScript\nDESCRIPTION: Reads and parses the selected ZIP archive, allowing access to its contained files.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nzipfile.zip()\n```\n\n----------------------------------------\n\nTITLE: Creating NBA Teams Data Structure\nDESCRIPTION: Defines an array of objects containing NBA team information with name and location properties.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/select.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst teams = [\n  {name: \"Lakers\", location: \"Los Angeles, California\"},\n  {name: \"Warriors\", location: \"San Francisco, California\"},\n  {name: \"Celtics\", location: \"Boston, Massachusetts\"},\n  {name: \"Nets\", location: \"New York City, New York\"},\n  {name: \"Raptors\", location: \"Toronto, Ontario\"},\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Spanning Grid Cells with Framework Classes\nDESCRIPTION: Grid cells can span multiple columns or rows using grid-colspan-* and grid-rowspan-* classes, allowing for more complex dashboard layouts.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\">\n  <div class=\"card\"><h1>A</h1>1 × 1</div>\n  <div class=\"card grid-rowspan-2\"><h1>B</h1>1 × 2</div>\n  <div class=\"card\"><h1>C</h1>1 × 1</div>\n  <div class=\"card grid-colspan-2\"><h1>D</h1>2 × 1</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Map-based Checkbox for Sizes\nDESCRIPTION: Creates a checkbox using Map to associate display names with values for drink sizes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sizes = view(\n  Inputs.checkbox(\n    new Map([\n      [\"Short\", 8],\n      [\"Tall\", 12],\n      [\"Grande\", 16],\n      [\"Venti\", 20]\n    ]),\n    {value: [12], label: \"Size\"}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Data Selection\nDESCRIPTION: Shows how to create a select input with grouped data using d3.group and display results in a table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sportAthletes = view(\n  Inputs.select(\n    d3.group(olympians, (d) => d.sport),\n    {sort: true, label: \"sport\"}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(sportAthletes)\n```\n\n----------------------------------------\n\nTITLE: Displaying Counter Value\nDESCRIPTION: Outputs the current value of the counter, which changes based on which button (increment, decrement, or reset) was last clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncounter\n```\n\n----------------------------------------\n\nTITLE: Displaying a Generated PNG Image in HTML\nDESCRIPTION: HTML code snippet showing how to include and display the PNG map image that was generated by the Node.js data loader. The image is placed within an img tag with styling to control its maximum width.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-canvas-to-png/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"data/us-map.png\" style=\"max-width: 975px;\">\n```\n\n----------------------------------------\n\nTITLE: Creating Range Input with HTML Label in JavaScript\nDESCRIPTION: Demonstrates how to use an HTML element as a label for the range input.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst n = view(Inputs.range([1, 10], {label: html`Top <i>n</i>`, step: 1}));\n```\n\n----------------------------------------\n\nTITLE: Rendering the Counter Component\nDESCRIPTION: Displays the Counter component using the display function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndisplay(<Counter />);\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Selected Image in JavaScript\nDESCRIPTION: This snippet demonstrates how to load and display the selected image file. It uses the image method of the file object to load the image and specifies a width of 640 pixels.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/input-select-file/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfile.image({width: 640}) // load the image\n```\n\n----------------------------------------\n\nTITLE: TeX Equation: Function Definition and Integral\nDESCRIPTION: This TeX code snippet defines a custom function and displays an integral equation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/tex.md#2025-04-21_snippet_5\n\nLANGUAGE: tex\nCODE:\n```\n\\def\\f#1#2{#1f(#2)}\n\\f\\relax{x} = \\int_{-\\infty}^\\infty\n    \\f\\hat\\xi\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n----------------------------------------\n\nTITLE: Creating Generator-Based Animation\nDESCRIPTION: Sets up an animation using a generator function that progressively reduces a bar's width. The animation restarts when the replay button is clicked, leveraging Observable's reactivity system.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreplay; // run this block when the button is clicked\nconst progress = (function* () {\n  for (let i = canvas.width; i >= 0; --i) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillRect(0, 0, i, canvas.height);\n    yield canvas;\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Evaluating Editor Input with JavaScript eval Function\nDESCRIPTION: Executes the JavaScript code entered in the CodeMirror editor by passing the 'input' variable to JavaScript's eval function. This allows for immediate execution of the code written in the editor.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/codemirror/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\neval(input)\n```\n\n----------------------------------------\n\nTITLE: Data Processing for Market Segment Analysis\nDESCRIPTION: Processes hotel booking data to calculate statistics by market segment, including nationality distribution, booking outcomes, and room types.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookingsByMarketSegment =\n  pickMarketSegment == \"All\"\n    ? hotelData.filter((d) => d.MarketSegment != \"Complementary\")\n    : hotelData.filter((d) => d.MarketSegment == pickMarketSegment && d.MarketSegment != \"Complementary\");\n\nconst bookingsAll = hotelData.filter((d) => d.MarketSegment != \"Complementary\");\n\nconst bookingCountry = d3\n  .rollups(\n    bookingsByMarketSegment,\n    (d) => d.length,\n    (v) => v.Country\n  )\n  .map(([name, value]) => ({name, value}))\n  .sort((a, b) => d3.descending(a.value, b.value));\n\nconst bookingCountryTopN = bookingCountry.slice(0, 5);\n\nconst bookingCountryOther = {\n  name: \"Other\",\n  value: d3.sum(bookingCountry.slice(5 - bookingCountry.length), (d) => d.value)\n};\n\nconst byCountry = bookingCountryTopN.concat(bookingCountryOther);\n\nconst byBookingOutcome = d3\n  .rollups(\n    bookingsByMarketSegment,\n    (d) => d.length,\n    (d) => d.IsCanceled\n  )\n  .map(([name, value]) => ({name, value}))\n  .sort((a, b) => d3.descending(a.value, b.value));\n\nconst byRoomType = d3\n  .rollups(\n    bookingsByMarketSegment,\n    (d) => d.length,\n    (d) => d.ReservedRoomType\n  )\n  .map(([name, value]) => ({name, value}))\n  .sort((a, b) => d3.descending(a.value, b.value));\n\nconst bookingSeason = d3\n  .rollups(\n    bookingsByMarketSegment,\n    (d) => d.length,\n    (v) => v.season\n  )\n  .map(([name, value]) => ({name, value}));\n\nconst arrivalDates = d3.extent(bookingsAll, (d) => d.arrivalDate);\n\nconst datesExtent = [\n  d3.timeFormat(\"%b %d, %Y\")(new Date(arrivalDates[0])),\n  d3.timeFormat(\"%b %d, %Y\")(new Date(arrivalDates[1]))\n];\n\nconst rateDiffFromAverage = d3.mean(bookingsByMarketSegment, (d) => d.ADR) - d3.mean(bookingsAll, (d) => d.ADR);\n```\n\n----------------------------------------\n\nTITLE: Displaying Button Click Count\nDESCRIPTION: Outputs the current value of the clicks button, showing the number of times the button has been clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclicks\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Imports in Observable Framework\nDESCRIPTION: Example of a dynamic import using the npm protocol to lazily load the canvas-confetti library when needed rather than at page load.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst {default: confetti} = await import(\"npm:canvas-confetti\");\n```\n\n----------------------------------------\n\nTITLE: Reading Files Relative to Data Loader in Node.js\nDESCRIPTION: Demonstrates how to read a file relative to the data loader's source location rather than the working directory using import.meta features in Node.js.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport {readFile} from \"node:fs/promises\";\nimport {fileURLToPath} from \"node:url\";\n\nconst table = await readFile(fileURLToPath(import.meta.resolve(\"./table.txt\")), \"utf-8\");\n```\n\n----------------------------------------\n\nTITLE: Importing Range2D Module\nDESCRIPTION: Shows how to import the Range2D component from its module file.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-input-2d/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Range2D} from \"./Range2D.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing Hypertext Literal in JavaScript\nDESCRIPTION: This snippet shows how to import the html method from the htl package using ES6 import syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/htl.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html} from \"npm:htl\";\n```\n\n----------------------------------------\n\nTITLE: Selecting State and County Features\nDESCRIPTION: Selects and processes geographical features for a specific state and its counties. This helps in rendering the geographic boundaries that are critical for visual map generation and interactions.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst selectedState = states.features.filter((d) => d.properties.name === pickState);\n\nconst selectedStateCounties = counties.filter((d) =>\n  fipsSelectedState.includes(d.fips)\n);\n```\n\n----------------------------------------\n\nTITLE: Importing from node_modules Using Bare Specifiers\nDESCRIPTION: Shows how to import packages installed in node_modules using bare specifiers. This approach is useful for managing dependencies with npm or Yarn and for importing private packages.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from \"canvas-confetti\";\n```\n\n----------------------------------------\n\nTITLE: Creating Text File Input in JavaScript\nDESCRIPTION: Creates a file input specifically for text files with a custom label and required validation. The input only accepts files with .txt extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst textfile = view(Inputs.file({label: \"Text file\", accept: \".txt\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Loading GeoTIFF File\nDESCRIPTION: Loads a GeoTIFF file as an ArrayBuffer and converts it to a GeoTIFF object using the fromArrayBuffer constructor.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/geotiff/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sfctmp = FileAttachment(\"sfctmp.tiff\").arrayBuffer().then(fromArrayBuffer);\n```\n\n----------------------------------------\n\nTITLE: Displaying Toggle Input Value in JavaScript\nDESCRIPTION: This snippet shows how to display the value of the 'mute' toggle input created in the previous example.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmute\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Value Toggle Input in JavaScript\nDESCRIPTION: This snippet shows how to display the value of the 'binary' toggle input with custom values created in the previous example.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nbinary\n```\n\n----------------------------------------\n\nTITLE: Importing ReactDOM\nDESCRIPTION: Shows how to import ReactDOM explicitly instead of using the globally available ReactDOM object.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport * as ReactDOM from \"npm:react-dom\";\n```\n\n----------------------------------------\n\nTITLE: Working with File Attachments in Local Modules\nDESCRIPTION: Demonstrates how to import the FileAttachment API from Observable's standard library and use it within a local module to load and parse a CSV file.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FileAttachment} from \"observablehq:stdlib\";\n\nexport const sales = await FileAttachment(\"sales.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Attaching a CSV File from Root Directory\nDESCRIPTION: Uses the FileAttachment API to reference a CSV file located in the root directory of the project.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/files.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nFileAttachment(\"file-top.csv\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Interpreters for Data Loaders\nDESCRIPTION: JavaScript configuration example showing how to add Perl and AppleScript interpreters to the default set of interpreters for data loaders in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  interpreters: {\n    \".pl\": [\"perl\"],\n    \".scpt\": [\"osascript\"]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Loading File Attachment from Parent Directory in Observable Framework\nDESCRIPTION: This snippet demonstrates how to reference and load a CSV file attachment located in a parent directory using the FileAttachment API in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/subsection/subfiles.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nFileAttachment(\"../file-top.csv\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Functionality\nDESCRIPTION: Creates a search input component with datalist suggestions and displays filtered results in a table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResults = view(Inputs.search(olympians, {\n  datalist: [\"mal\", \"1986\", \"USA gym\"],\n  placeholder: \"Search athletes\"\n}))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(searchResults)\n```\n\n----------------------------------------\n\nTITLE: ObservableHQ Framework Project with Nested Folders\nDESCRIPTION: Illustrates a project structure with pages organized in nested folders, which creates a hierarchical URL structure in the resulting site.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/project-structure.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  ├─ missions\n│  │  ├─ index.md\n│  │  ├─ apollo.md\n│  │  └─ gemini.md\n│  └─ index.md\n└─ ⋯\n```\n\n----------------------------------------\n\nTITLE: Mermaid Sequence Diagram Example\nDESCRIPTION: Illustrates creation of a sequence diagram showing interaction between multiple participants with loops and notes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mermaid.md#2025-04-21_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n```\n\n----------------------------------------\n\nTITLE: Integrating Reactive Values with React Components\nDESCRIPTION: Demonstrates how to use Framework's reactivity with React by passing a reactive value as a prop to the Greeting component.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ndisplay(<Greeting subject={name || \"anonymous\"} />);\n```\n\n----------------------------------------\n\nTITLE: Creating FileAttachment Reference\nDESCRIPTION: Creates a reference to a CSV file using a relative path without immediate data parsing.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/multi/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst f2 = FileAttachment(\"./file2.csv\");\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDBClient with No Extensions\nDESCRIPTION: Instantiates a DuckDBClient with no extensions loaded by passing an empty array to the extensions configuration option, regardless of what extensions might be configured globally.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst simpledb = DuckDBClient.of({}, {extensions: []});\n```\n\n----------------------------------------\n\nTITLE: Reading and Processing NetCDF File Data in JavaScript\nDESCRIPTION: This code reads a NetCDF file containing global marine winds data, extracts specific variables, and processes the data for visualization. It handles dimensions, variables, and data transformation.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = await FileAttachment(\"uwnd.nc\").arrayBuffer();\nconst reader = readFile(buffer);\n\nconst lon = reader.getDataVariable(\"lon\");\nconst lat = reader.getDataVariable(\"lat\");\nconst uwnd = reader.getDataVariable(\"uwnd\");\n\nconst data = uwnd.flatMap((u, i) => {\n  const y = Math.floor(i / lon.length);\n  const x = i % lon.length;\n  return {\n    lon: lon[x],\n    lat: lat[y],\n    value: u\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using sum Function in TypeScript\nDESCRIPTION: Shows the usage of the imported sum function with two number arguments.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/typescript/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsum(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Referencing Promise-based Data\nDESCRIPTION: Demonstrates how a promise from a previous code block is implicitly awaited when referenced, allowing direct access to resolved data without explicit await syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvolcano\n```\n\n----------------------------------------\n\nTITLE: Using Imported Modules with Observable Inputs\nDESCRIPTION: Shows how to use an imported module (confetti) in a different code block. This example creates an interactive button that triggers the confetti animation when clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.button(\"Throw confetti! 🎉\", {reduce: () => confetti()})\n```\n\n----------------------------------------\n\nTITLE: Fetching Earthquake Data with Shell Script\nDESCRIPTION: A simple shell script data loader that fetches GeoJSON earthquake data from USGS using curl.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -f https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\n```\n\n----------------------------------------\n\nTITLE: Initializing Number Input with Custom Range in JavaScript\nDESCRIPTION: Creates a number input with a custom range and step, useful for unbounded ranges.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst m = view(Inputs.number([0, Infinity], {step: 1, label: \"Favorite integer\", placeholder: \"\"}));\n```\n\n----------------------------------------\n\nTITLE: Importing SQLiteDatabaseClient\nDESCRIPTION: Shows how to import the SQLiteDatabaseClient class, which implements the DatabaseClient specification for SQLite databases.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SQLiteDatabaseClient} from \"npm:@observablehq/sqlite\";\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Table Row in JavaScript\nDESCRIPTION: Shows how to preselect a single row when 'multiple' option is set to false.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npenguins[4]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using dailyPlot Component in JavaScript\nDESCRIPTION: Reference to a JavaScript file containing the code for creating a daily downloads chart using Observable Plot.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/plot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Reference to dailyPlot.js\n./src/components/dailyPlot.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Airtable Authentication\nDESCRIPTION: Example of environment variables setup in a .env file to store Airtable Personal Access Token (PAT) and database ID required for authentication.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-airtable/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAIRTABLE_PAT=\"patXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXX\"\nAIRTABLE_DB=\"appWXXXXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Loaded CSV Data in JavaScript\nDESCRIPTION: This snippet shows how to access the loaded CSV data, which is a promise to an array of objects.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngistemp\n```\n\n----------------------------------------\n\nTITLE: Basic ObservableHQ Framework Project with Two Pages\nDESCRIPTION: Demonstrates a minimal project structure with just two pages (hello.md and index.md) in the source directory and shows the corresponding output structure after building.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/project-structure.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  ├─ hello.md\n│  └─ index.md\n└─ ⋯\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl in Observable Framework\nDESCRIPTION: This snippet shows how to import the deck.gl standalone bundle and destructure its components for use in an Observable notebook.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/deckgl.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport deck from \"npm:deck.gl\";\n\nconst {DeckGL, AmbientLight, GeoJsonLayer, HexagonLayer, LightingEffect, PointLight} = deck;\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Plot from npm\nDESCRIPTION: Shows how to explicitly import the Observable Plot library into your project using npm. In Markdown, Plot is available by default, but this allows explicit importing when needed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/plot.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Plot from \"npm:@observablehq/plot\";\n```\n\n----------------------------------------\n\nTITLE: SQL Query on Dynamic Data Source\nDESCRIPTION: Using a SQL code block to query the dynamically configured earthquake data, ordering results by the 'updated' timestamp.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM quakes ORDER BY updated DESC;\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected File in JavaScript\nDESCRIPTION: This snippet shows how to display the selected file object. It's a simple expression that outputs the file variable created in the previous snippet.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/input-select-file/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfile\n```\n\n----------------------------------------\n\nTITLE: Graphviz Graph Definition\nDESCRIPTION: This snippet showcases a Graphviz (DOT) graph definition that creates a simple undirected graph. It uses the `strict graph` keyword to allow parallel edges and defines nodes a and b with edges between them, including a blue colored edge.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/preview/dashboard/code/code.md#2025-04-21_snippet_1\n\nLANGUAGE: Graphviz\nCODE:\n```\n  strict graph {\n    a -- b\n    a -- b\n    b -- a [color=blue]\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing Range Input with Custom Value in JavaScript\nDESCRIPTION: Creates a range input with a custom range, step, and initial value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst z = view(Inputs.range([0, 255], {step: 1, value: 0}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Input with Submit Button in JavaScript\nDESCRIPTION: Creates a text input with a submit button. The new value is only reported when the user clicks Submit or presses Enter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = view(Inputs.text({label: \"Query\", placeholder: \"Search\", submit: true}));\n```\n\n----------------------------------------\n\nTITLE: Python Data Loader for Dynamic Datawrapper Chart Generation\nDESCRIPTION: Python script that creates or retrieves a Datawrapper chart using their API. The script handles chart creation, configuration, and publishing, returning the chart's unique identifier.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/datawrapper-api/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nimport pandas as pd\nfrom datawrapper import Datawrapper\n\n# Read in the data file, which is drawn from a Datawrapper example\n# https://academy.datawrapper.de/article/281-examples-of-datawrapper-dot-charts\ndf = pd.read_csv(\"src/data/chart.csv\")\n\n# Connect to the Datawrapper api\ndw = Datawrapper()\n\n# Search if the chart already exists\ntitle = \"Germany is the third-oldest country in the world\"\nsearch_result = dw.get_charts(search=title)\n\n# If the chart already exists, return its id\nif search_result['list']:\n    chart_id = search_result['list'][0][\"id\"]\n    sys.stdout.write(chart_id)\n    sys.exit()\n\n# If it doesn't exist, create the chart\nchart_config = dw.create_chart(\n    # Headline the chart\n    title=title,\n    # Set the type\n    chart_type=\"d3-dot-plot\",\n    # Give the data\n    data=df,\n    # Configure everything about the chart\n    metadata={\n        # Set the description\n        \"describe\": {\n            \"intro\": \"Median age in the three countries with the oldest population and selected other countries, in years\",\n            \"source-name\": \"Estimates by the CIA World Factbook, 2018\",\n            \"source-url\": \"https://www.cia.gov/library/publications/resources/the-world-factbook/fields/343rank.html\",\n        },\n        # Configure the chart\n        \"visualize\": {\n            \"custom-range\": [\n                \"35\",\n                \"55\"\n            ],\n            \"range-extent\": \"custom\",\n            \"highlight-range\": True,\n            \"replace-flags\": {\n                \"style\": \"4x3\",\n                \"enabled\": True\n            },\n            \"color-by-column\": True,\n            \"show-color-key\": True,\n            \"color-category\": {\n                \"map\": {\n                    \"Male\": \"#94c4d1\",\n                    \"Female\": \"#ffca76\",\n                    \"Combined\": \"#545a5d\"\n                },\n            },\n        },\n        \"publish\": {\n            \"autoDarkMode\": True,\n        },\n    }\n)\n\n# Pull out the chart's unique identifier\nchart_id = chart_config[\"id\"]\n\n# Publish the chart\ndw.publish_chart(chart_id)\n\n# Write the chart's unique identifier to stdout\nsys.stdout.write(chart_id)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON File Input in JavaScript\nDESCRIPTION: Creates a file input specifically for JSON files with a custom label and required validation. The input only accepts files with .json extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonfile = view(Inputs.file({label: \"JSON file\", accept: \".json\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Implicit Display in Expression Block\nDESCRIPTION: Example showing how JavaScript expression blocks automatically display their results without needing display().\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 2 // implicit display\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inline Expression for Random Number\nDESCRIPTION: Example of a JavaScript inline expression in Markdown that simulates rolling a 20-sided dice using Math.random().\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nYou rolled ${Math.floor(Math.random() * 20) + 1}.\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Connection URL in .env File\nDESCRIPTION: This snippet shows the format for defining the PostgreSQL connection URL in a .env file. It includes placeholders for username, password, host, and database name.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-postgres/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPOSTGRES_URL=\"postgres://USERNAME:PASSWORD@HOST.example.com:5432/DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Using Lodash defaults Method\nDESCRIPTION: Shows how to use Lodash's defaults method which assigns properties of source objects to the destination object for all destination properties that are undefined.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/lodash.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n_.defaults({a: 1}, {a: 3, b: 2})\n```\n\n----------------------------------------\n\nTITLE: Embedding JavaScript Expression in HTML Template using Observable Framework\nDESCRIPTION: This snippet demonstrates how to embed a JavaScript expression within an HTML div element using Observable Framework's template syntax. The expression '1 + 2' will be evaluated and its result (3) will be rendered in the div.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/block-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>${1 + 2}</div>\n```\n\n----------------------------------------\n\nTITLE: Responsive Display with Resize Helper Function\nDESCRIPTION: The resize helper function allows content to re-render when its container resizes, enabling responsive designs. It's useful for adaptive visualizations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-4\">\n  <div class=\"card\">\n    ${resize((width) => `This card is ${width}px wide.`)}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing All Hypertext Literal Methods in JavaScript\nDESCRIPTION: This snippet shows how to import all methods from the htl package, allowing the use of htl.html and htl.svg syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/htl.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as htl from \"npm:htl\";\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Markdown\nDESCRIPTION: This Markdown snippet demonstrates string interpolation using template literals. The expression `${1 + 2}` is evaluated and its result is embedded into the string. The expected output is 'one3' and 'two'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/inline-within-lists.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"- `one${1 + 2}\n- two`\"\n```\n\n----------------------------------------\n\nTITLE: Using a Component with the Display Function\nDESCRIPTION: This code demonstrates how to use the previously defined temperaturePlot component by passing the forecast data to it and displaying the result on the page using the display function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(temperaturePlot(forecast));\n```\n\n----------------------------------------\n\nTITLE: Now Generator Example\nDESCRIPTION: Shows how to create a generator that yields the current timestamp\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst now = Generators.now();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnow\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Text Input for SQL Queries\nDESCRIPTION: Creates an interactive text input that can be used to filter SQL query results. This snippet sets up the input control with a label and placeholder.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = view(Inputs.text({label: \"Name\", placeholder: \"Search track names\"}));\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Observable Plot Dashboard\nDESCRIPTION: Imports necessary components for the dashboard, including revive function, Trend component, BurndownPlot, and DailyPlot.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/plot/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {revive} from \"./components/revive.js\";\nimport {Trend} from \"./components/trend.js\";\nimport {BurndownPlot} from \"./components/burndownPlot.js\";\nimport {DailyPlot} from \"./components/dailyPlot.js\";\n```\n\n----------------------------------------\n\nTITLE: Importing the shapefile module in JavaScript\nDESCRIPTION: Demonstrates how to import the shapefile module from npm for use in Observable notebooks.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/shapefile.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as shapefile from \"npm:shapefile\";\n```\n\n----------------------------------------\n\nTITLE: TeX Equation: Complex Delta E Formula\nDESCRIPTION: This TeX code snippet shows a complex mathematical formula for calculating Delta E.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/tex.md#2025-04-21_snippet_4\n\nLANGUAGE: tex\nCODE:\n```\n\\Delta E^*_{00} = \\sqrt{\n  \\Big(\\frac{\\Delta L'}{k_LS_L}\\Big)^2 +\n  \\Big(\\frac{\\Delta C'}{k_CS_C}\\Big)^2 +\n  \\Big(\\frac{\\Delta H'}{k_HS_H}\\Big)^2 +\n  R_T\n  \\frac{\\Delta C'}{k_CS_C}\n  \\frac{\\Delta H'}{k_HS_H}}\n```\n\n----------------------------------------\n\nTITLE: Formatted Team Checkbox Display\nDESCRIPTION: Creates a checkbox input that displays team names using a custom format function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst watching = view(Inputs.checkbox(teams, {label: \"Watching\", format: (x) => x.name}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Page in Observable Framework (Markdown)\nDESCRIPTION: This snippet demonstrates the configuration for the embedded page. It shows how to disable Framework's additional UI elements and set the page layout to 'article'.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar: false\nnavbar: false\nfooter: false\nlayout: article\n---\n\n# Embedded content\n\nThis is the content that will be embedded in the iframe on the main page.\n```\n\n----------------------------------------\n\nTITLE: Generating Choropleth Map PNG from GeoJSON Data with Python\nDESCRIPTION: This Python script reads birth statistics from a GeoJSON file, creates a choropleth map using geopandas and matplotlib, and outputs the map as a PNG image to standard output. It requires geopandas, matplotlib, io, and sys modules to be installed.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-png/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import libraries (must be installed and available in environment)\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport io\nimport sys\n\n# Read in data:\nbirth_statistics = gpd.read_file(\"src/data/birth_statistics.geojson\")\n\n# Create a basic choropleth map\nbirth_statistics.plot(column=\"Birth_Rate\", legend=True)\nplt.axis(\"off\")\n\n# Save plot to a virtual file, then write binary PNG data to stdout\nimg_buffer = io.BytesIO()\nplt.savefig(img_buffer, format=\"png\")\nimg_buffer.seek(0)\n\nsys.stdout.buffer.write(img_buffer.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Displaying Mutable Count with Animation in Markdown\nDESCRIPTION: Shows how to display the current count value in Markdown, utilizing the CSS animation for visual feedback. This demonstrates the integration of mutable state with dynamic content rendering.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\nCount is: ${html`<span class=\"flash\">${count}</span>`}.\n```\n\n----------------------------------------\n\nTITLE: Using the display Function to Show Calculation Results\nDESCRIPTION: Demonstrates the display function which shows the specified value in the current context and returns that value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_25\n\nLANGUAGE: js\nCODE:\n```\ndisplay(1 + 2);\n```\n\n----------------------------------------\n\nTITLE: Time-based Generator\nDESCRIPTION: Implements a generator that increments a counter every second using async/await.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst j = (async function* () {\n  for (let j = 0; true; ++j) {\n    yield j;\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from npm Package Using import.meta.resolve\nDESCRIPTION: Example of using import.meta.resolve to get a URL for fetching JSON data from an npm package, enabling access to the resource without importing the entire package.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await fetch(import.meta.resolve(\"npm:us-atlas/counties-albers-10m.json\")).then((r) => r.json());\n```\n\n----------------------------------------\n\nTITLE: Embedding Markdown Inside HTML Elements\nDESCRIPTION: This example demonstrates how to include Markdown formatting inside HTML blocks by surrounding the Markdown content with blank lines.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n<div class=\"grid grid-cols-4\">\n  <div class=\"card\">\n\nThis is **Markdown** inside of _HTML_!\n\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Method from Hypertext Literal in JavaScript\nDESCRIPTION: This code imports the svg method from the htl package, which is used for generating SVG content.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/htl.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {svg} from \"npm:htl\";\n```\n\n----------------------------------------\n\nTITLE: Configuring BigInt Handling in DuckDBClient\nDESCRIPTION: Creates a DuckDBClient instance with BigInt support by setting castBigIntToDouble to false. This overrides the default behavior which would convert BigInt values to JavaScript Number (double) types.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst bigdb = DuckDBClient.of({}, {query: {castBigIntToDouble: false}});\n```\n\n----------------------------------------\n\nTITLE: Loading a Module with Require and Version Specification\nDESCRIPTION: Example showing how to use the require function to load a specific version of D3, though import is recommended instead.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst d3 = await require(\"d3@5\");\n```\n\n----------------------------------------\n\nTITLE: Importing Arquero Library\nDESCRIPTION: Example of importing the Arquero library from npm package.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as aq from \"npm:arquero\";\n```\n\n----------------------------------------\n\nTITLE: Defining Color Palette for Dam Conditions\nDESCRIPTION: Establishes a color palette associated with different dam conditions. This is integral for visual thematic mapping, allowing users to easily distinguish dam conditions using intuitive colors.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Color palette for dam conditions\nconst conditions = [\n  \"Not available\",\n  \"Satisfactory\",\n  \"Fair\",\n  \"Unsatisfactory\",\n  \"Poor\"\n];\n\nconst conditionsColors = [\n  \"#9498a0\",\n  \"#4269d0\",\n  \"#97bbf5\",\n  \"#efb118\",\n  \"#ff725c\"\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Date Input in JavaScript\nDESCRIPTION: Shows how to create a required date input that will cause referencing cells to wait until a valid input is entered.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rdate = view(Inputs.date({label: \"Date\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Export with Static Paths\nDESCRIPTION: Configuration to export a JavaScript module using the dynamicPaths option in the Framework config file. This allows the chart.js module to be accessible externally.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  dynamicPaths: [\n    \"/chart.js\"\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Converting require.resolve to import.meta.resolve in JavaScript\nDESCRIPTION: Demonstrates how to replace require.resolve with the modern import.meta.resolve method for resolving module paths in Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire.resolve(\"regl\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.resolve(\"npm:regl\")\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query (SQL)\nDESCRIPTION: Selects the first 10 rows from the 'gaia' table, sorted by the 'phot_g_mean_mag' column.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM gaia ORDER BY phot_g_mean_mag LIMIT 10\n```\n\n----------------------------------------\n\nTITLE: Importing Mermaid in Observable\nDESCRIPTION: Shows how to import the Mermaid module from npm package in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mermaid.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport mermaid from \"npm:@observablehq/mermaid\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Radio Value in JavaScript\nDESCRIPTION: Displays the currently selected value from the color radio input defined previously.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncolor\n```\n\n----------------------------------------\n\nTITLE: Registering a Local SQL Table in Front Matter (YAML)\nDESCRIPTION: Registers a table named 'gaia' from a local Parquet file using the SQL option in page front matter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsql:\n  gaia: ./lib/gaia-sample.parquet\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Keywords for Search Indexing with YAML Front Matter\nDESCRIPTION: This snippet shows how to add additional keywords to a page for search indexing using the keywords property in the front matter. These keywords are weighted the same as the page title.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/search.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkeywords: file, fileattachment\n---\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying a Video File in HTML\nDESCRIPTION: Demonstrates how to embed a video file in HTML using the video element.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"horse.mp4\" autoplay muted loop controls></video>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Styles in Observable Framework\nDESCRIPTION: This CSS snippet shows how to create a custom stylesheet for an Observable Framework app, importing default styles and a theme, and customizing a CSS variable.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"observablehq:default.css\");\n@import url(\"observablehq:theme-air.css\");\n\n:root {\n  --theme-foreground-focus: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameterized Values in Markdown\nDESCRIPTION: Example of using inline JavaScript expressions to access the current parameter value in Markdown content.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/params.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThe current product is ${observable.params.product}.\n```\n\n----------------------------------------\n\nTITLE: Expression Cell Conversion Example\nDESCRIPTION: Example of converting a simple Observable expression cell to standard JavaScript variable declaration.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfoo = 42\n```\n\nLANGUAGE: js\nCODE:\n```\nconst foo = 42;\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas for Latency Visualization in JavaScript\nDESCRIPTION: This snippet creates a canvas element for rendering a latency visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst latencyCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: Importing DuckDBClient from Observable Package\nDESCRIPTION: How to import the Observable DatabaseClient implementation for DuckDB that provides a simplified API for working with DuckDB databases.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DuckDBClient} from \"npm:@observablehq/duckdb\";\n```\n\n----------------------------------------\n\nTITLE: Registering a Markdown-It Plugin for Footnotes\nDESCRIPTION: JavaScript configuration example showing how to register the markdown-it-footnote plugin to enhance Markdown rendering with footnote support in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkdownItFootnote from \"markdown-it-footnote\";\n\nexport default {\n  markdownIt: (md) => md.use(MarkdownItFootnote)\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Button with Label\nDESCRIPTION: Creates a button with both a label and content. The label appears beside the button and describes its purpose, while the content appears on the button itself.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst confirm = view(Inputs.button(\"OK\", {label: \"Continue?\"}));\n```\n\n----------------------------------------\n\nTITLE: Calculating State Centroid\nDESCRIPTION: Computes the geographical centroid of a selected state using D3.js's geoCentroid method. The centroid is useful in map visualization for centering the view or annotating the geographic center of state-specific data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst stateCentroid = d3.geoCentroid(selectedState[0].geometry);\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Generators\nDESCRIPTION: Shows how to import the Generators module from Observable stdlib\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Generators} from \"observablehq:stdlib\";\n```\n\n----------------------------------------\n\nTITLE: Correlation Analysis with Arquero\nDESCRIPTION: Calculates correlation coefficients between cities' sunshine hours.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(\n  dt.rollup({\n    corr_sf: aq.op.corr(\"Seattle\", \"San Francisco\"),\n    corr_chi: aq.op.corr(\"Seattle\", \"Chicago\")\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Radio Input with Null Option in JavaScript\nDESCRIPTION: Creates a radio input with Yea/Nay options plus a null value that's formatted as 'Abstain', allowing users to have a non-selection option.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst vote = view(Inputs.radio([\"Yea\", \"Nay\", null], {value: null, format: (x) => x ?? \"Abstain\"}));\n```\n\n----------------------------------------\n\nTITLE: Importing Specific React Hooks\nDESCRIPTION: Demonstrates how to import specific hooks from React instead of using the entire library.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport {useState} from \"npm:react\";\n```\n\n----------------------------------------\n\nTITLE: Enhancing Search Functionality with Clickable Abbreviations in JavaScript\nDESCRIPTION: Adds interactivity to abbreviation elements, allowing users to click on them to populate the search input with predefined terms.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/search.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const abbr of document.querySelectorAll(\"abbr\")) {\n  abbr.title = `Search for \"${abbr.textContent}\"`;\n  abbr.style.cursor = \"default\";\n  abbr.onclick = () => {\n    const input = searchInput.querySelector(\"input\");\n    input.value = abbr.textContent;\n    input.dispatchEvent(new Event(\"input\", {bubbles: true}));\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a DuckDB Database File\nDESCRIPTION: How to attach an existing DuckDB file as a schema in the database. This creates a client with access to all tables in the attached database.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db2 = await DuckDBClient.of({base: FileAttachment(\"quakes.db\")});\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents with YAML Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter configuration for a table of contents with a custom label 'dollar&pound' and visibility setting. This configuration appears at the top of a Markdown document to control TOC display properties.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/config/toc-override.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntoc:\n  label: dollar&pound\n  show: true\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Toggle Input with Custom Label and Initial Value in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a toggle input with a custom label 'Mute' and an initial value of true. It uses the Inputs.toggle() function from the ObservableHQ framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst  mute = view(Inputs.toggle({label: \"Mute\", value: true}));\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Inputs for Dashboard Cards\nDESCRIPTION: This JavaScript code creates a detached input as a top-level variable and exposes its reactive value, which can then be used in cards for interactive dashboards.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst industryInput = Inputs.select(industries.map((d) => d.industry), {unique: true, sort: true, label: \"Industry:\"});\nconst industry = Generators.input(industryInput);\n```\n\n----------------------------------------\n\nTITLE: Configuring markdown-it-wikilinks Plugin in Observable Framework\nDESCRIPTION: This snippet shows how to import and configure the markdown-it-wikilinks plugin in the observablehq.config.js file. It uses the markdownIt config option to register the plugin with markdown-it.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-wikilinks/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkdownItWikilinks from \"markdown-it-wikilinks\";\n\nexport default {\n  root: \"src\",\n  markdownIt: (md) => md.use(MarkdownItWikilinks())\n};\n```\n\n----------------------------------------\n\nTITLE: Using add Function with Type Assertion in TypeScript\nDESCRIPTION: Shows how to call the add function with a type assertion in TypeScript.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/typescript/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nadd(1 as number, 3)\n```\n\n----------------------------------------\n\nTITLE: Styling Table Width with CSS\nDESCRIPTION: CSS styling to limit the maximum width of input tables to 640px for better readability.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nform.inputs-3a86ea-table {\n  max-width: 640px;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling an Interpreter in Observable Framework\nDESCRIPTION: JavaScript configuration example showing how to disable the Rust interpreter for data loaders by setting its value to null in the interpreters configuration.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  interpreters: {\n    \".rs\": null\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Paths with Hard-coded Values\nDESCRIPTION: Example configuration that defines dynamicPaths with a static array of product pages to be generated from a parameterized route.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/params.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  dynamicPaths: [\n    \"/products/100736\",\n    \"/products/221797\",\n    \"/products/399145\",\n    \"/products/475651\",\n    …\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring External Links in Search Results\nDESCRIPTION: JavaScript configuration example showing how to add external links to the search index in Observable Framework. This allows search results to point to resources outside the application.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  search: {\n    async *index() {\n      yield {\n        path: \"https://example.com\",\n        title: \"Example\",\n        text: \"This is an example of an external link.\"\n      };\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Generating JPEG Scatterplot with R and ggplot2\nDESCRIPTION: This R script loads the ggplot2 library, creates a scatterplot of the diamonds dataset (carat vs. price, colored by cut), and saves the plot as a JPEG image written to standard output. It requires the ggplot2 package to be installed.  The plot visualizes the relationship between diamond carat, price, and cut.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-jpeg/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n# Load ggplot2\nlibrary(ggplot2)\n\n# Create a scatterplot with built-in diamonds dataset\nmy_plot <- ggplot(diamonds, aes(x = carat, y = price, color = cut)) +\n  geom_point(alpha = 0.6) +\n  labs(\n    title = \"Diamonds Dataset: Carat vs Price by Cut\",\n    x = \"Carat\",\n    y = \"Price\",\n    color = \"Cut\"\n  )\n\n# Save as jpeg and write to standard output\nggsave(plot = my_plot, filename = \"/dev/stdout\", device = \"jpeg\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Query Results\nDESCRIPTION: Shows how to display the dynamically filtered query results in a table format. This updates automatically when the input value changes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(tracks)\n```\n\n----------------------------------------\n\nTITLE: Loading Weather Forecast Data with FileAttachment\nDESCRIPTION: Uses the Observable FileAttachment API to load JSON data from a local file generated by a data loader. This connects the UI to the forecast data fetched from the National Weather Service API.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst forecast = FileAttachment(\"./data/forecast.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Displaying File Input Value in JavaScript\nDESCRIPTION: Displays the current value of the file input, which provides a FileAttachment-like interface for parsing files in various formats.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfile\n```\n\n----------------------------------------\n\nTITLE: Visualizing random walk with Plot's difference mark\nDESCRIPTION: Visualizes the random walk data from an Arrow table using Plot's difference mark and specifying a UTC scale for the x-axis.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nPlot.plot({\n  x: {type: \"utc\"},\n  marks: [\n    Plot.ruleY([0]),\n    Plot.differenceY(table, {x: \"date\", y: \"value\"})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Exporting Core Observable Framework Functionality in JavaScript\nDESCRIPTION: This barrel file exports all the main components and functionality of the Observable Framework, making them available for import by end users. It includes core framework functions, React integration, data table components, and utility functions.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/pager/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport {default as Cell} from \"./src/cell.js\";\nexport {configure, default as Framework} from \"./src/framework.js\";\nexport {default as Library} from \"./src/library.js\";\nexport {default as observe} from \"./src/observe.js\";\nexport {default as React} from \"./src/react.js\";\nexport {default as Runtime} from \"./src/runtime.js\";\n\nexport {javascript, jsonfetch} from \"./src/reexports.js\";\n\nexport {default as Table} from \"./src/table/table.js\";\nexport {default as Plot} from \"@observablehq/plot\";\nexport {default as component} from \"./src/react-component.js\";\n\n// TODO: should these be default exports from the source files?\n// It's annoying to have a mixture of named and default exports\nexport {uid} from \"./src/uid.js\";\nexport {terse} from \"./src/terse.js\";\n\nexport {Paginate} from \"./src/table/paginate.js\";\n\n```\n\n----------------------------------------\n\nTITLE: Creating Weight Range Filter\nDESCRIPTION: Implements a range input for filtering athletes by weight within a 10% threshold.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst weight = view(\n  Inputs.range(\n    d3.extent(olympians, (d) => d.weight),\n    {step: 1, label: \"weight (kg)\"}\n  )\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(\n  olympians.filter((d) => d.weight < weight * 1.1 && weight * 0.9 < d.weight),\n  {sort: \"weight\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Importing React from npm\nDESCRIPTION: Shows how to explicitly import React from npm instead of using the globally available React object.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from \"npm:react\";\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example\nDESCRIPTION: Directory structure showing the organization of the web log analysis project, including source files, components, and data files.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── observablehq.config.js\n├── package.json\n└── src\n    ├── components\n    │   ├── apiHeatmap.js\n    │   └── apiHistogram.js\n    ├── data\n    │   ├── latency-heatmap-avatar.parquet\n    │   ├── latency-heatmap-documents-at.parquet\n    │   ├── latency-heatmap-documents-public.parquet\n    │   ├── latency-heatmap.parquet\n    │   ├── latency-histogram.parquet\n    │   ├── size-heatmap.parquet\n    │   ├── top-routes-count.parquet\n    │   └── top-routes-duration.parquet\n    └── index.md\n```\n\n----------------------------------------\n\nTITLE: Creating Excel File Input in JavaScript\nDESCRIPTION: Creates a file input specifically for Excel files with a custom label and required validation. The input only accepts files with .xlsx extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst xlsxfile = view(Inputs.file({label: \"Excel file\", accept: \".xlsx\", required: true}));\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Helper Function in TypeScript for Observable Framework\nDESCRIPTION: This code snippet shows the implementation of a helper function for executing Snowflake queries. It handles the connection to Snowflake, executes the query, and returns the results in a format suitable for CSV output.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-snowflake/README.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport snowflake from \"snowflake-sdk\";\n\nexport async function querySnowflake(query: string) {\n  const connection = snowflake.createConnection({\n    account: process.env.SNOWFLAKE_ACCOUNT,\n    username: process.env.SNOWFLAKE_USERNAME,\n    password: process.env.SNOWFLAKE_PASSWORD,\n    database: process.env.SNOWFLAKE_DATABASE,\n    schema: process.env.SNOWFLAKE_SCHEMA,\n    warehouse: process.env.SNOWFLAKE_WAREHOUSE\n  });\n\n  await new Promise((resolve, reject) => {\n    connection.connect((err, conn) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(conn);\n      }\n    });\n  });\n\n  const result = await new Promise((resolve, reject) => {\n    connection.execute({\n      sqlText: query,\n      complete: (err, stmt, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      }\n    });\n  });\n\n  await new Promise((resolve, reject) => {\n    connection.destroy((err) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Observable Framework Homepage with CSS\nDESCRIPTION: CSS styles for the Observable Framework homepage, including styling for the hero section, call-to-action elements, and gallery of example applications. Includes responsive design elements and dark mode support.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.hero {\n  margin: 4rem 0;\n  text-wrap: balance;\n}\n\n.hero h1 {\n  font-size: 56px;\n  max-width: none;\n  min-width: min-content;\n  line-height: 1;\n  margin: 2rem 0;\n}\n\n.hero h2 {\n  font-style: normal;\n  font-size: 18px;\n  line-height: normal;\n  color: var(--theme-foreground-muted);\n}\n\n.hero .observablehq-pre-container,\n.hero pre:not(.observablehq-pre-container pre) {\n  margin: 1rem 0;\n}\n\n.cta {\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n}\n\n@container not (min-width: 560px) {\n  .cta {\n    flex-direction: column;\n    align-items: start;\n    gap: 0;\n  }\n  .cta .observablehq-pre-container,\n  .cta pre:not(.observablehq-pre-container pre) {\n    width: 100%;\n  }\n}\n\n.gallery {\n  margin: 4rem -1rem;\n  gap: 2rem;\n  max-width: calc(640px + 2rem);\n}\n\n.gallery a {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.gallery img {\n  max-width: 100%;\n  border-radius: 8px;\n  box-shadow: 0 0 0 0.75px rgba(128, 128, 128, 0.2), 0 6px 12px 0 rgba(0, 0, 0, 0.2);\n  aspect-ratio: 2500 / 1900;\n}\n\n@media (prefers-color-scheme: dark) {\n  .gallery img {\n    box-shadow: 0 0 0 0.75px rgba(128, 128, 128, 0.2), 0 6px 12px 0 rgba(0, 0, 0, 0.4);\n  }\n}\n\n.gallery a:not(:hover, :focus) {\n  color: var(--theme-foreground-muted);\n}\n\n.gallery a:hover img,\n.gallery a:focus img {\n  box-shadow: 0 0 0 0.75px var(--theme-foreground-focus), 0 6px 12px 0 rgba(0, 0, 0, 0.2);\n}\n\n.gallery figcaption {\n  font-size: 12px;\n  color: inherit;\n}\n\n.arrow {\n  font-weight: 500;\n}\n\n.arrow::after {\n  content: \"→\";\n  display: inline-block;\n  margin-left: 0.25rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific File from npm Package\nDESCRIPTION: Demonstrates importing a specific file path from within an npm package. This approach allows accessing specific implementation files rather than the default entry point.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from \"npm:canvas-confetti/dist/confetti.module.mjs\";\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Displaying Data with Inputs.table\nDESCRIPTION: Displays the loaded language statistics data using Observable's Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-duckdb/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(languages)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Radio Input with Color Options in JavaScript\nDESCRIPTION: Creates a basic radio input that allows selecting one color from a predefined list of colors (red, green, blue) with a label.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = view(Inputs.radio([\"red\", \"green\", \"blue\"], {label: \"color\"}));\n```\n\n----------------------------------------\n\nTITLE: Importing TeX Function from npm Package in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the tex function from the @observablehq/tex npm package for use in Observable projects.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/tex.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport tex from \"npm:@observablehq/tex\";\n```\n\n----------------------------------------\n\nTITLE: Listing Loaded DuckDB Extensions\nDESCRIPTION: SQL query to list all currently loaded DuckDB extensions, filtered to show only loaded extensions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nFROM duckdb_extensions() WHERE loaded AND JSON '1';\n```\n\n----------------------------------------\n\nTITLE: Loading CSV as Array of Arrays in JavaScript\nDESCRIPTION: This snippet shows how to load a CSV file as an array of arrays instead of objects, useful when the file doesn't have a header row.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/csv.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"gistemp.csv\").csv({array: true, typed: true})\n```\n\n----------------------------------------\n\nTITLE: Importing Default Export from npm Module in JavaScript\nDESCRIPTION: Imports the default export from the canvas-confetti package using npm protocol. This syntax allows direct access to the default export of the package.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport confetti from \"npm:canvas-confetti\";\n```\n\n----------------------------------------\n\nTITLE: Creating an in-memory Arrow table for a random walk\nDESCRIPTION: Demonstrates creating an in-memory Arrow table from JavaScript arrays representing a year-long random walk.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst date = d3.utcDay.range(new Date(\"2023-01-01\"), new Date(\"2024-01-02\"));\nconst random = d3.randomNormal.source(d3.randomLcg(42))(); // seeded random\nconst value = d3.cumsum(date, random);\nconst table = Arrow.tableFromArrays({date, value});\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image from ZIP Archive Using HTML\nDESCRIPTION: Demonstrates how to display an image extracted from a ZIP archive using static HTML with an img tag, specifying width and alt attributes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"muybridge/deer.jpeg\" width=\"320\" alt=\"A deer\">\n```\n\n----------------------------------------\n\nTITLE: Displaying JSX Component\nDESCRIPTION: Shows how to render the Greeting component with a specific subject prop value.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/jsx.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ndisplay(<Greeting subject=\"JSX\" />);\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Example\nDESCRIPTION: Example .env file structure showing required Google Analytics credentials format for API authentication.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nGA_PROPERTY_ID=\"123456789\"\nGA_CLIENT_EMAIL=\"xxx@yyy.iam.gserviceaccount.com\"\nGA_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxx-----END PRIVATE KEY-----\\n\"\n```\n\n----------------------------------------\n\nTITLE: Importing SQLite in Observable Framework\nDESCRIPTION: Demonstrates how to import the SQLite module from Observable's npm package for use in projects.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SQLite from \"npm:@observablehq/sqlite\";\n```\n\n----------------------------------------\n\nTITLE: Project Navigation Links in Markdown\nDESCRIPTION: Navigation links for the framework examples and live demo of the GeoTIFF visualization project.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/geotiff/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Framework examples →](../)\n\n# GeoTIFF\n\nView live: <https://observablehq.observablehq.cloud/framework-example-geotiff/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Perl Data Loader with Shebang\nDESCRIPTION: Example of a simple Perl data loader script using a shebang to specify the interpreter, which allows any scripting language to be used for .exe data loaders.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_17\n\nLANGUAGE: perl\nCODE:\n```\n#!/usr/bin/env perl\n\nprint(\"Hello World\\n\");\n```\n\n----------------------------------------\n\nTITLE: Width Generator Example\nDESCRIPTION: Demonstrates creating a generator to track element width changes\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/generators.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = Generators.width(document.querySelector(\"main\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwidth\n```\n\n----------------------------------------\n\nTITLE: Equal-Height Grid Rows in Framework Markdown\nDESCRIPTION: By default, grid layouts use equal-height rows, which creates a consistent rhythm but may leave extra space when content lengths vary significantly.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\">\n  <div class=\"card\">Call me Ishmael.</div>\n  <div class=\"card\">Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.</div>\n  <div class=\"card\">It is a way I have of driving off the spleen and regulating the circulation.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing TopoJSON Server and Simplify Libraries in JavaScript\nDESCRIPTION: Demonstrates how to import additional TopoJSON libraries for topology manipulation and simplification. These libraries are useful for more advanced TopoJSON operations.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {topology} from \"npm:topojson-server\";\nimport {presimplify, simplify} from \"npm:topojson-simplify\";\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Search Indexing with YAML Front Matter\nDESCRIPTION: This snippet shows how to exclude a page from search indexing by setting the index property to false in the page's front matter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/search.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: This page won't be indexed\nindex: false\n---\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for Scrollytelling\nDESCRIPTION: The HTML structure consists of a container with a sticky info display element and multiple scrollable section elements. Each section has a data-step attribute that identifies its step number in the scrollytelling sequence.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/intersection-observer/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<section class=\"scroll-container\">\n  <div class=\"scroll-info\"></div>\n  <div class=\"scroll-section\" data-step=\"1\">STEP 1</div>\n  <div class=\"scroll-section\" data-step=\"2\">STEP 2</div>\n  <div class=\"scroll-section\" data-step=\"3\">STEP 3</div>\n  <div class=\"scroll-section\" data-step=\"4\">STEP 4</div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: TeX Equation: Pythagorean Theorem\nDESCRIPTION: This TeX code snippet displays the Pythagorean theorem equation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/tex.md#2025-04-21_snippet_3\n\nLANGUAGE: tex\nCODE:\n```\nc = \\pm\\sqrt{a^2 + b^2}\n```\n\n----------------------------------------\n\nTITLE: Capturing Random Value with Display\nDESCRIPTION: Example demonstrating how display returns the passed value while also showing it, useful for debugging.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst y = display(Math.random());\n```\n\n----------------------------------------\n\nTITLE: Example Local Module Export\nDESCRIPTION: Demonstrates the content of a local JavaScript module that exports a constant. This example shows how to create a simple module that can be imported by other files.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport const foo = 42;\n```\n\n----------------------------------------\n\nTITLE: Processing Balancing Authority Data\nDESCRIPTION: Filters and transforms balancing authority data to clean format, removing total interchange and identifying generation-only authorities.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst usDemandGenForecast = usDemandGenForecastAll.filter(d => d.name != \"totalInterchange\");\n\nconst genOnlyBA = eiaBARef.filter(d => d[\"Generation Only BA\"] == \"Yes\").map(d => d[\"BA Code\"]);\n\nconst baHourlyClean = baHourlyDemand\n  .map((d) => ({\n    \"Date\": timeParse(d.period).toLocaleString(\"en-us\", {month: \"short\", day: \"2-digit\", hour: \"2-digit\"}),\n    \"Balancing authority\": d.ba,\n    \"Abbreviation\": d.baAbb,\n    \"Type\": \"Demand\",\n    \"Value (GWh)\": d.value / 1000\n  }));\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Input with Label and Placeholder in JavaScript\nDESCRIPTION: Sets up a range input with a label, custom range, step, and placeholder text.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst gain = view(Inputs.range([0, 11], {label: \"Gain\", step: 0.1, placeholder: \"0–11\"}));\n```\n\n----------------------------------------\n\nTITLE: Displaying the GeoJSON collection\nDESCRIPTION: Shows the resulting GeoJSON FeatureCollection after reading the shapefile data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/shapefile.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncollection\n```\n\n----------------------------------------\n\nTITLE: Data Loading and Visualization in Observable\nDESCRIPTION: JavaScript code snippets for loading CSV data and creating visualizations using Observable Plot and Inputs.table.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst logs = FileAttachment(\"./data/kibana_sample_data_logs.csv\").csv({typed: true});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(logs)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  style: \"overflow: visible;\",\n  y: { grid: true },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.line(logs, {x: \"date\", y: \"count\", stroke: \"response_code\", tip: true}),\n    Plot.text(logs, Plot.selectLast({x: \"date\", y: \"count\", z: \"response_code\", text: \"response_code\", textAnchor: \"start\", dx: 3}))\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Default Observable Framework Styles in CSS\nDESCRIPTION: This snippet imports the default styles from Observable Framework, providing a base 'theme-less' theme for layout and typography.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-stylesheet/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"observablehq:default.css\");\n```\n\n----------------------------------------\n\nTITLE: Project File Structure\nDESCRIPTION: This snippet shows the directory structure of the U.S. Dams Observable Framework project. It includes the README, configuration file (observablehq.config.js), package.json, and the src directory which contains data files and markdown files defining the pages.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n.\n├── README.md\n├── observablehq.config.js\n├── package.json\n└── src\n    ├── data\n    │   ├── county_fips_master.csv\n    │   ├── dam-simple.csv.R\n    │   └── us-state-capitals.csv\n    ├── by-state.md\n    └── index.md\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Download Link for a ZIP Archive in HTML\nDESCRIPTION: Shows how to create a download link that allows users to download the ZIP archive. The download attribute ensures the browser will download the file rather than navigate to it.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"muybridge.zip\" download>\n  <button>download zip</button>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme to Observable Framework Page\nDESCRIPTION: This YAML snippet demonstrates how to apply a custom theme to a specific page in an Observable Framework app using front matter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: [glacier, slate]\n---\n```\n\n----------------------------------------\n\nTITLE: Testing Non-existent Module Import in JavaScript\nDESCRIPTION: Attempts to import a module that does not exist to test error handling. The import statement references './does-not-exist.js' which should trigger an import failure.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/missing-import/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport(\"./does-not-exist.js\")\n```\n\n----------------------------------------\n\nTITLE: Handling iframe height adjustment messages in JavaScript\nDESCRIPTION: This code sets up an event listener in the parent frame to receive messages from the embedded page and adjust the iframe height accordingly.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst messaged = (event) => iframe.height = event.data.height;\naddEventListener(\"message\", messaged);\ninvalidation.then(() => removeEventListener(\"message\", messaged));\n```\n\n----------------------------------------\n\nTITLE: Loading World Map Data in JavaScript\nDESCRIPTION: This snippet fetches world map data in TopoJSON format from the world-atlas package. It uses the fetch API to retrieve the data and converts it to JSON.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf-contours/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst world = fetch(import.meta.resolve(\"npm:world-atlas/land-110m.json\")).then((r) => r.json());\n```\n\n----------------------------------------\n\nTITLE: Computing Hourly BA Statistics\nDESCRIPTION: Calculates rolling hourly statistics and current values for balancing authorities.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst baHourlyAll = d3.range(0, hoursBackOfData + 1).map((hour) => d3.rollup(baHourlyDemand, (d) => d[hour]?.value, d => d[\"ba\"]));\nconst baHourlyCurrent = baHourlyAll[hoursAgo];\nconst baHourlyLatest = baHourlyAll[0];\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Files from Earthquake ZIP in Observable\nDESCRIPTION: These JavaScript snippets show how to access individual files (quakes-metadata.json and quakes.csv) directly from the ZIP archive in an Observable notebook.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-zip/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst quakesMetadata = FileAttachment(\"data/earthquakes/quakes-metadata.json\").json();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst quakes = FileAttachment(\"data/earthquakes/quakes.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Converting dynamic imports to static npm imports in JavaScript\nDESCRIPTION: Shows how to convert dynamic imports from CDNs like esm.sh to static npm imports for better security and performance in Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nisoformat = import(\"https://esm.sh/isoformat\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as isoformat from \"npm:isoformat\";\n```\n\n----------------------------------------\n\nTITLE: Deriving Secondary Color Variables Using color-mix in CSS\nDESCRIPTION: This snippet uses the color-mix CSS function to derive secondary color variables from the primary colors, allowing for automatic adjustments when primary colors are redefined.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-stylesheet/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --theme-foreground-muted: color-mix(in srgb, var(--theme-foreground) 60%, var(--theme-background));\n  --theme-foreground-faint: color-mix(in srgb, var(--theme-foreground) 50%, var(--theme-background));\n  --theme-foreground-fainter: color-mix(in srgb, var(--theme-foreground) 30%, var(--theme-background));\n  --theme-foreground-faintest: color-mix(in srgb, var(--theme-foreground) 14%, var(--theme-background));\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Text Element with JavaScript Template\nDESCRIPTION: Creates an SVG canvas with a text element that uses JavaScript template literal syntax to display dynamic content. The SVG has fixed dimensions of 640x120 pixels with text positioned at coordinates (20,20).\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/svg-placeholder.md#2025-04-21_snippet_0\n\nLANGUAGE: SVG\nCODE:\n```\n<svg width=640 height=120>\n  <text x=20 y=20>${\"hello\"}</text>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating JSX Greeting Component\nDESCRIPTION: Defines a reusable Greeting component that takes a 'subject' prop and renders a formatted message with bold text.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/jsx.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Greeting({subject}) {\n  return <div>Hello, <b>{subject}</b>!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Display Calls in a Loop\nDESCRIPTION: Code demonstrating how to use multiple display calls in a loop to show a sequence of values.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 5; ++i) {\n  display(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying an Array with Inspector\nDESCRIPTION: Example showing how arrays are displayed with the Observable inspector in fenced code blocks.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Displaying a Structured Object\nDESCRIPTION: Example of using the display function to show a nested JavaScript object for inspection.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay({hello: {subject: \"world\"}, numbers: [1, 2, 3, 4]})\n```\n\n----------------------------------------\n\nTITLE: Creating a Click Counter Button\nDESCRIPTION: Creates a button that counts the number of times it has been clicked. By default, the button value starts at 0 and increments by 1 each time the button is clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst clicks = view(Inputs.button(\"Click me\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Object Checkbox with Team Data\nDESCRIPTION: Demonstrates checkbox input with complex objects and custom formatting for team data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst teams = [\n  {name: \"Lakers\", location: \"Los Angeles, California\"},\n  {name: \"Warriors\", location: \"San Francisco, California\"},\n  {name: \"Celtics\", location: \"Boston, Massachusetts\"},\n  {name: \"Nets\", location: \"New York City, New York\"},\n  {name: \"Raptors\", location: \"Toronto, Ontario\"},\n];\n```\n\n----------------------------------------\n\nTITLE: Defining responsive iframe in HTML\nDESCRIPTION: This HTML snippet defines an iframe with scrolling disabled and a source pointing to an embedded page.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe id=\"iframe\" scrolling=\"no\" src=\"./embed\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing DOT Module in JavaScript\nDESCRIPTION: Shows how to import the DOT module from Observable's package for use in JavaScript code.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport dot from \"npm:@observablehq/dot\";\n```\n\n----------------------------------------\n\nTITLE: Defining Footnotes in Markdown\nDESCRIPTION: This code snippet illustrates how to define footnotes in Markdown. It includes examples of a simple footnote and a multi-paragraph footnote, showing how to indent subsequent paragraphs to associate them with the footnote.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-footnote/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[^1]: Here is the footnote.\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\n    belong to the previous footnote.\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Entry Point from node_modules\nDESCRIPTION: Shows how to import a specific entry point from a package in node_modules by adding the subpath after the package name, similar to npm imports with specific entry points.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport mime from \"mime/lite\";\n```\n\n----------------------------------------\n\nTITLE: Creating Grid Layouts in Framework Markdown\nDESCRIPTION: The grid class creates a CSS grid container with responsive columns. This example shows a 4-column grid layout with card elements.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-4\">\n  <div class=\"card\"><h1>A</h1></div>\n  <div class=\"card\"><h1>B</h1></div>\n  <div class=\"card\"><h1>C</h1></div>\n  <div class=\"card\"><h1>D</h1></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Searchable Table Setup\nDESCRIPTION: Creates search input functionality for the bookings data table.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tableSearch = Inputs.search(bookingsAll);\n\nconst tableSearchValue = view(tableSearch);\n```\n\n----------------------------------------\n\nTITLE: Displaying CSV Data with Inputs.table in JavaScript\nDESCRIPTION: This JavaScript code uses Observable's Inputs.table to display the contents of the penguinKmeans data loaded from the CSV file.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-csv/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguinKmeans)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Examples\nDESCRIPTION: Examples of creating tables with different alignments in Markdown\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nColumn 1   | Column 2     | Column 3\n---------- | ------------ | ----------\nCell 1-1   | Cell 2-1     | Cell 3-1\nCell 1-2   | Cell 2-2     | Cell 3-2\n```\n\nLANGUAGE: markdown\nCODE:\n```\nAlign left | Align center | Align right\n:--------- | :----------: | ----------:\nCell 1-1   |   Cell 2-1   |    Cell 3-1\nCell 1-2   |   Cell 2-2   |    Cell 3-2\n```\n\n----------------------------------------\n\nTITLE: Using markdown-it-container for a card in Markdown\nDESCRIPTION: This example demonstrates how to use the ::: syntax to create a card container in Markdown. The content inside the container will be styled as a card.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-container/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: card\nThat's a _nice_ card, ain't it?\n:::\n```\n\n----------------------------------------\n\nTITLE: Installing PyArrow Library\nDESCRIPTION: Defines the specific version of PyArrow, an Apache Arrow library for efficient data processing and columnar memory\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/requirements.txt#2025-04-21_snippet_1\n\nLANGUAGE: requirements\nCODE:\n```\npyarrow==16.1\n```\n\n----------------------------------------\n\nTITLE: Using TeX Code Block in Markdown\nDESCRIPTION: This example shows how to create a centered TeX block using a fenced code block in Markdown.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/tex.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```tex\nE = mc^2\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Input with Label and Placeholder in JavaScript\nDESCRIPTION: Creates a text input with a label, placeholder, and initial value. Improves usability by providing context for the input.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = view(\n  Inputs.text({\n    label: \"Name\",\n    placeholder: \"Enter your name\",\n    value: \"Anonymous\"\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Latency Heatmap Data in JavaScript\nDESCRIPTION: This snippet loads parquet data for a latency heatmap and creates a canvas element for rendering.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst latencyHeatmap = FileAttachment(\"data/latency-heatmap.parquet\").parquet();\nconst latencyByRouteCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Module Export with Database Query\nDESCRIPTION: Advanced configuration using dynamicPaths as a generator function that queries a PostgreSQL database to create parameterized routes for product-specific charts.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport postgres from \"postgres\";\n\nconst sql = postgres(); // Note: uses psql environment variables\n\nexport default {\n  async *dynamicPaths() {\n    for await (const {id} of sql`SELECT id FROM products`.cursor()) {\n      yield `/product-${id}/chart.js`;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing NetCDFReader from netcdfjs in JavaScript\nDESCRIPTION: This snippet imports the NetCDFReader class from the netcdfjs npm package. It's a prerequisite for reading NetCDF files in the subsequent code.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NetCDFReader} from \"npm:netcdfjs\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Timestamp Button with Custom Reducer\nDESCRIPTION: Creates a button that updates its value to the current date and time when clicked. Uses custom 'value' and 'reduce' options to control the button's behavior.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst time = view(Inputs.button(\"Update\", {value: null, reduce: () => new Date}));\n```\n\n----------------------------------------\n\nTITLE: Converting Arrow table to array of rows\nDESCRIPTION: Demonstrates how to convert an Arrow table to a JavaScript array of rows using the spread operator.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n[...flights]\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Array Destructuring (Markdown)\nDESCRIPTION: SQL query using array destructuring to extract the top row into a variable named 'top'.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```sql id=[top]\nSELECT * FROM gaia ORDER BY phot_g_mean_mag LIMIT 1\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Directory Parameter in Observable\nDESCRIPTION: Displays the value of the directory parameter passed to the Observable notebook. Demonstrates direct access to Observable's params object to retrieve the 'dir' parameter value.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/params/[dir]/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nobservable.params.dir\n```\n\n----------------------------------------\n\nTITLE: Importing Mutable from Observable HQ Stdlib in JavaScript\nDESCRIPTION: Demonstrates how to import the Mutable function from Observable HQ's standard library. This is necessary when working outside of Markdown context.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Mutable} from \"observablehq:stdlib\";\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for Data Loaders\nDESCRIPTION: Sets the executable bit on a data loader file to make it executable, required for .exe data loaders.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x src/quakes.csv.exe\n```\n\n----------------------------------------\n\nTITLE: Capturing the Display Function\nDESCRIPTION: Code showing how to capture a code block's display function for use in other blocks.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst displayThere = display;\n```\n\n----------------------------------------\n\nTITLE: Importing a Custom JSX Component\nDESCRIPTION: Imports the Card component from a local module, using .js extension even though the source file has a .jsx extension.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport {Card} from \"./components/Card.js\";\n```\n\n----------------------------------------\n\nTITLE: Radio Input with Sorting and Uniqueness Options in JavaScript\nDESCRIPTION: Creates a radio input from a string 'GATTACA', applying sorting and uniqueness options to display only unique characters in alphabetical order.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst base = view(Inputs.radio(\"GATTACA\", {sort: true, unique: true}));\n```\n\n----------------------------------------\n\nTITLE: Initializing X11 Color Array\nDESCRIPTION: Defines an array containing all standard X11 color names for use in select inputs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/select.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x11colors = [\"aliceblue\", \"antiquewhite\", \"aqua\", \"aquamarine\", \"azure\", \"beige\", \"bisque\", \"black\", \"blanchedalmond\", \"blue\", \"blueviolet\", \"brown\", \"burlywood\", \"cadetblue\", \"chartreuse\", \"chocolate\", \"coral\", \"cornflowerblue\", \"cornsilk\", \"crimson\", \"cyan\", \"darkblue\", \"darkcyan\", \"darkgoldenrod\", \"darkgray\", \"darkgreen\", \"darkgrey\", \"darkkhaki\", \"darkmagenta\", \"darkolivegreen\", \"darkorange\", \"darkorchid\", \"darkred\", \"darksalmon\", \"darkseagreen\", \"darkslateblue\", \"darkslategray\", \"darkslategrey\", \"darkturquoise\", \"darkviolet\", \"deeppink\", \"deepskyblue\", \"dimgray\", \"dimgrey\", \"dodgerblue\", \"firebrick\", \"floralwhite\", \"forestgreen\", \"fuchsia\", \"gainsboro\", \"ghostwhite\", \"gold\", \"goldenrod\", \"gray\", \"green\", \"greenyellow\", \"grey\", \"honeydew\", \"hotpink\", \"indianred\", \"indigo\", \"ivory\", \"khaki\", \"lavender\", \"lavenderblush\", \"lawngreen\", \"lemonchiffon\", \"lightblue\", \"lightcoral\", \"lightcyan\", \"lightgoldenrodyellow\", \"lightgray\", \"lightgreen\", \"lightgrey\", \"lightpink\", \"lightsalmon\", \"lightseagreen\", \"lightskyblue\", \"lightslategray\", \"lightslategrey\", \"lightsteelblue\", \"lightyellow\", \"lime\", \"limegreen\", \"linen\", \"magenta\", \"maroon\", \"mediumaquamarine\", \"mediumblue\", \"mediumorchid\", \"mediumpurple\", \"mediumseagreen\", \"mediumslateblue\", \"mediumspringgreen\", \"mediumturquoise\", \"mediumvioletred\", \"midnightblue\", \"mintcream\", \"mistyrose\", \"moccasin\", \"navajowhite\", \"navy\", \"oldlace\", \"olive\", \"olivedrab\", \"orange\", \"orangered\", \"orchid\", \"palegoldenrod\", \"palegreen\", \"paleturquoise\", \"palevioletred\", \"papayawhip\", \"peachpuff\", \"peru\", \"pink\", \"plum\", \"powderblue\", \"purple\", \"rebeccapurple\", \"red\", \"rosybrown\", \"royalblue\", \"saddlebrown\", \"salmon\", \"sandybrown\", \"seagreen\", \"seashell\", \"sienna\", \"silver\", \"skyblue\", \"slateblue\", \"slategray\", \"slategrey\", \"snow\", \"springgreen\", \"steelblue\", \"tan\", \"teal\", \"thistle\", \"tomato\", \"turquoise\", \"violet\", \"wheat\", \"white\", \"whitesmoke\", \"yellow\", \"yellowgreen\"];\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Examples\nDESCRIPTION: Examples of creating different types of links in Markdown\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n<https://example.com>\n[relative link](./dashboard)\n[external link](https://example.com)\n[external link](<https://en.wikipedia.org/wiki/Tar_(computing)>)\n```\n\n----------------------------------------\n\nTITLE: Module Preload HTML for Single Package\nDESCRIPTION: HTML output showing how Framework generates preload links for static imports to improve page load performance by parallelizing module loading.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"modulepreload\" href=\"/_npm/canvas-confetti@1.9.2/_esm.js\">\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite via sql.js Directly\nDESCRIPTION: Shows how to import and initialize sql.js directly instead of using Observable's wrapper. This approach gives more control over the initialization process by specifying the file locator function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/sqlite.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport initSqlJs from \"npm:sql.js\";\n\nconst SQLite = await initSqlJs({locateFile: (name) => import.meta.resolve(\"npm:sql.js/dist/\") + name});\n```\n\n----------------------------------------\n\nTITLE: Initializing Color Schemes and Country Order\nDESCRIPTION: Defines arrays for country order and corresponding color scheme used in visualizations.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst countryOrder = [\"PRT\", \"ESP\", \"GBR\", \"DEU\", \"FRA\", \"IRL\", \"AUT\", \"Other\", \"Unknown\"];\n\nconst countryColors = [\n  \"#4269d0\",\n  \"#efb118\",\n  \"#ff725c\",\n  \"#6cc5b0\",\n  \"#3ca951\",\n  \"#ff8ab7\",\n  \"#a463f2\",\n  \"#97bbf5\",\n  \"#9c6b4e\"\n];\n```\n\n----------------------------------------\n\nTITLE: FileAttachment failing to fetch from parent directory\nDESCRIPTION: This code snippet attempts to fetch a non-existent file from the parent directory using FileAttachment. The expected behavior is that this operation should fail, as FileAttachment should prevent access to parent directories for security reasons. The .text() method is used to asynchronously read the file's content as text.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fetch-parent-dir.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fail1 = FileAttachment(\"../NOENT.md\").text()\n```\n\n----------------------------------------\n\nTITLE: Custom Gallery Styling with CSS for Observable Framework Documentation\nDESCRIPTION: CSS styling for a gallery component used in the Observable Framework documentation. Defines layout, spacing, image properties, dark mode adjustments, and hover states for a visually appealing presentation of example applications.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/what-is-framework.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.gallery {\n  gap: 2rem;\n  max-width: 640px;\n}\n\n.gallery a {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.gallery img {\n  max-width: 100%;\n  border-radius: 8px;\n  box-shadow: 0 0 0 0.75px rgba(128, 128, 128, 0.2), 0 6px 12px 0 rgba(0, 0, 0, 0.2);\n  aspect-ratio: 2500 / 1900;\n}\n\n@media (prefers-color-scheme: dark) {\n  .gallery img {\n    box-shadow: 0 0 0 0.75px rgba(128, 128, 128, 0.2), 0 6px 12px 0 rgba(0, 0, 0, 0.4);\n  }\n}\n\n.gallery a:not(:hover, :focus) {\n  color: var(--theme-foreground-muted);\n}\n\n.gallery a:hover img,\n.gallery a:focus img {\n  box-shadow: 0 0 0 0.75px var(--theme-foreground-focus), 0 6px 12px 0 rgba(0, 0, 0, 0.2);\n}\n\n.gallery figcaption {\n  font-size: 12px;\n  color: inherit;\n}\n\n.arrow {\n  font-weight: 500;\n}\n\n.arrow::after {\n  content: \"→\";\n  display: inline-block;\n  margin-left: 0.25rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Excel Data with Inputs.table in JavaScript\nDESCRIPTION: Shows how to display the loaded Excel data using the Inputs.table function for a tabular representation.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/xlsx.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(reports)\n```\n\n----------------------------------------\n\nTITLE: Initializing Password Input in JavaScript\nDESCRIPTION: Creates a password input using the convenience method Inputs.password. Masks the input for security.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst password = view(Inputs.password({label: \"Password\", value: \"open sesame\"}));\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with FileAttachment\nDESCRIPTION: Loads and parses a CSV file named 'file1.csv' using the FileAttachment API with the csv() method for direct data conversion.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/multi/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst f1 = FileAttachment(\"file1.csv\").csv();\n```\n\n----------------------------------------\n\nTITLE: Configuring EIA API Key in Environment File\nDESCRIPTION: This snippet shows how to set up the EIA API key in a .env file for secure access to the EIA data endpoints. The file should be placed in the project root directory and added to .gitignore to prevent exposing the key.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nEIA_KEY=xxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Color Variables for Custom Theme in CSS\nDESCRIPTION: This snippet sets the primary color variables for the custom theme, including foreground, background, and alternative colors.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-stylesheet/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --theme-foreground: #ffffff;\n  --theme-foreground-focus: orange;\n  --theme-background: #4751f8;\n  --theme-background-alt: #312f2e;\n  --theme-foreground-alt: var(--theme-foreground);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Display Calls with No Implicit Display\nDESCRIPTION: Example showing that explicit display calls disable implicit display to avoid duplication.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(1), display(2) // no implicit display\n```\n\n----------------------------------------\n\nTITLE: Processing TopoJSON Features\nDESCRIPTION: Converting TopoJSON data into GeoJSON features for state boundaries and county meshes\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-census/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst castate = topojson.feature(ca, ca.objects.state);\nconst cacounties = topojson.mesh(ca, ca.objects.counties, (a, b) => a !== b);\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Promise Values\nDESCRIPTION: Shows how a code block waits for all referenced promises to resolve before executing, regardless of their individual resolution times.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(fast);\ndisplay(slow);\n```\n\n----------------------------------------\n\nTITLE: Displaying Data with Input Table\nDESCRIPTION: Renders the loaded CSV data using Observable's Input.table component for data visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/multi/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nInput.table(f1)\n```\n\n----------------------------------------\n\nTITLE: Importing SQL Tagged Template Literal (JavaScript)\nDESCRIPTION: Shows how to explicitly import the 'sql' tagged template literal from the @observablehq/duckdb package.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {sql} from \"npm:@observablehq/duckdb\";\n```\n\n----------------------------------------\n\nTITLE: Including HTML Elements in Framework Markdown\nDESCRIPTION: Direct HTML embedding in Markdown allows for more complex layouts and interactive elements. This example shows a details/summary disclosure element.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<details>\n  <summary>Click me</summary>\n  This text is not visible by default.\n</details>\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Source Files\nDESCRIPTION: Example directory structure showing a source folder with a Markdown file and a data file referenced by FileAttachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  ├─ index.md\n│  └─ quakes.csv\n└─ …\n```\n\n----------------------------------------\n\nTITLE: Variable-Height Grid Rows Using CSS Properties\nDESCRIPTION: To create variable-height rows that adapt to content size, set grid-auto-rows to auto on the grid container, which prevents wasted space.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\" style=\"grid-auto-rows: auto;\">\n  <div class=\"card\">Call me Ishmael.</div>\n  <div class=\"card\">Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.</div>\n  <div class=\"card\">It is a way I have of driving off the spleen and regulating the circulation.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the resize Function with Text Output\nDESCRIPTION: Shows how resize can be used with a simple text output that updates when container width changes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nresize((width) => `I am ${width} pixels wide.`)\n```\n\n----------------------------------------\n\nTITLE: Displaying Apache Arrow Table in Inputs\nDESCRIPTION: This code snippet uses `Inputs.table` to display an Apache Arrow table. It also formats the `date` column from numbers to dates using the `format` option, making the data more readable despite serialization losses during conversion to Parquet.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-parquet/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nInputs.table(samples, {\n  format: {\n    date: (x) => new Date(x).toISOString().slice(0, 10)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Serving Static Documentation Site\nDESCRIPTION: Command to serve the built static documentation site using http-server.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhttp-server docs/.observablehq/dist\n```\n\n----------------------------------------\n\nTITLE: Creating Button Without Content\nDESCRIPTION: Creates a button without specifying any content. While possible, this is not recommended as buttons should generally have descriptive labels.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = view(Inputs.button());\n```\n\n----------------------------------------\n\nTITLE: Creating and Viewing Search Input for Penguins Dataset in JavaScript\nDESCRIPTION: Demonstrates a one-line approach to create and immediately view a search input for the penguins dataset.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/search.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst search = view(Inputs.search(penguins, {placeholder: \"Search penguins…\"}));\n```\n\n----------------------------------------\n\nTITLE: Shell Script Data Loader for Earthquake Data\nDESCRIPTION: A shell script data loader that fetches earthquake data from USGS API using curl, with the -f flag to make it fail on HTTP errors.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl -f https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Elasticsearch Connection\nDESCRIPTION: Example of the .env file content for setting up the connection to Elasticsearch. It includes the Elasticsearch node URL, CA fingerprint, and TLS configuration.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nES_NODE=\"https://elastic:<PASSWORD>@localhost:9200\"\nES_CA_FINGERPRINT=\"<CA_FINGERPRINT>\"\nES_UNSAFE_TLS_REJECT_UNAUTHORIZED=\"FALSE\"\n```\n\n----------------------------------------\n\nTITLE: Loading Event Data from JSON File in Observable\nDESCRIPTION: This snippet loads a JSON file containing space exploration events into a variable called events. It uses the FileAttachment function to read and parse the JSON file. Ensure the 'data/events.json' file is accessible and contains valid JSON data with historical space event details.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-report.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst events = FileAttachment(\"./data/events.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Observable Framework Development Environment\nDESCRIPTION: Commands to clone the repository and install dependencies using Yarn Classic.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:observablehq/framework.git\ncd framework\nyarn\n```\n\n----------------------------------------\n\nTITLE: DOT Fenced Code Block in Markdown\nDESCRIPTION: Shows the markdown syntax for creating a DOT graph using a fenced code block, which is rendered as a visualization when displayed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```dot\ndigraph G {\n  rankdir = LR\n  a -> b -> c\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Map-Based Radio Selection in JavaScript\nDESCRIPTION: Displays the currently selected size value (in fluid ounces) from the size radio input defined with a Map.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsize\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter in Framework Markdown\nDESCRIPTION: YAML front matter allows setting page configuration options like title, search indexing options, and layout settings. It's placed at the top of a Markdown file between triple-dash delimiters.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My favorite page\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Observable Framework Page Structure\nDESCRIPTION: Simple markdown file serving as the entry point for an Observable Framework application. Demonstrates the minimal setup required for a working example.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hello-world/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Processing War and Peace Text Data with R\nDESCRIPTION: This R script downloads the text of War and Peace, processes it to extract word frequencies by book and chapter, and outputs the results as JSON. It uses libraries such as tidytext, dplyr, and jsonlite for text processing and JSON conversion.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-json/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n# Attach libraries (must be installed)\nlibrary(tidytext)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(jsonlite)\n\n# Access and wrangle data\ntolstoy <- read_csv(\"https://www.gutenberg.org/cache/epub/2600/pg2600.txt\") |>\n  rename(text = 1)\nbooktext <- tolstoy[-(1:400), ]\nbooktext <- booktext[-(51477:51770), ]\n\ntidy_tolstoy <- booktext |>\n  mutate(book = cumsum(str_detect(text, \"BOOK | EPILOGUE\"))) |>\n  mutate(book = case_when(\n    book < 16 ~ paste(\"Book\", book),\n    book == 16 ~ \"Epilogue 1\",\n    book == 17 ~ \"Epilogue 2\"\n  )) |>\n  group_by(book) |>\n  mutate(chapter = cumsum(str_detect(text, regex(\"CHAPTER\", ignore_case = FALSE)))) |>\n  ungroup() |>\n  filter(!str_detect(text, regex(\"BOOK\", ignore_case = FALSE))) |>\n  filter(!str_detect(text, regex(\"CHAPTER\", ignore_case = FALSE))) |>\n  unnest_tokens(word, text) |>\n  anti_join(stop_words)\n\n# Find top 10 words (by count) for each chapter\ntolstoy_word_counts <- tidy_tolstoy |>\n  group_by(book, chapter) |>\n  count(word) |>\n  top_n(10, n) |>\n  arrange(desc(n), .by_group = TRUE)\n\n# Create JSON and write to standard output\ncat(toJSON(tolstoy_word_counts, pretty = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query Structure\nDESCRIPTION: Simple SQL query template demonstrating table selection with echo parameter enabled\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/sql/index.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nFROM table\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Options\nDESCRIPTION: Shows how to create a checkbox with specific disabled options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst vowels = view(Inputs.checkbox([...\"AEIOUY\"], {label: \"Vowel\", disabled: [\"Y\"]}));\n```\n\n----------------------------------------\n\nTITLE: Manual Module Preload Declaration\nDESCRIPTION: Example of manually declaring a module preload link for d3-array, which is useful when dynamic imports need to be optimized.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"modulepreload\" href=\"npm:d3-array\">\n```\n\n----------------------------------------\n\nTITLE: Initializing Disabled Text Input in JavaScript\nDESCRIPTION: Creates a text input that is disabled, preventing the user from changing its value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst fixed = view(Inputs.text({label: \"Fixed value\", value: \"Can't edit me!\", disabled: true}));\n```\n\n----------------------------------------\n\nTITLE: Importing ExcelJS Library in JavaScript\nDESCRIPTION: Shows how to import the ExcelJS library directly for more advanced Excel file operations. This allows direct use of ExcelJS functions and methods.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/xlsx.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Excel from \"npm:exceljs\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic JavaScript Expression in Observable\nDESCRIPTION: A simple JavaScript expression that adds two numbers and displays the result using Observable's implicit display functionality.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(1 + 2);\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Stylesheet to Observable Framework Page\nDESCRIPTION: This YAML snippet shows how to apply a custom stylesheet to a specific page in an Observable Framework app using front matter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nstyle: custom-style.css\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Input\nDESCRIPTION: Demonstrates creating a checkbox input with various configuration options including disabled values, sorting, and unique value display.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst checkout = view(\n  Inputs.checkbox([\"B\", \"A\", \"Z\", \"Z\", \"⚠️F\", \"D\", \"G\", \"G\", \"G\", \"⚠️Q\"], {\n    disabled: [\"⚠️F\", \"⚠️Q\"],\n    sort: true,\n    unique: true,\n    value: \"B\",\n    label: \"Choose categories:\"\n  })\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncheckout\n```\n\n----------------------------------------\n\nTITLE: Installation Command for Observable Framework\nDESCRIPTION: HTML snippet containing the installation command for Observable Framework using npx. The command is styled as a pre-element with a copy button functionality.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<pre data-copy>npx <span class=\"win\">\"</span>@observablehq/framework@latest<span class=\"win\">\"</span> create</pre>\n```\n\n----------------------------------------\n\nTITLE: Importing Leaflet Library in Observable\nDESCRIPTION: Code snippet showing how to explicitly import the Leaflet library in Observable. When imported, Leaflet's stylesheet is automatically added to the page and the library is available as the L namespace.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/leaflet.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as L from \"npm:leaflet\";\n```\n\n----------------------------------------\n\nTITLE: Configuring markdown-it-container in Observable Framework\nDESCRIPTION: This code snippet demonstrates how to register and configure the markdown-it-container plugin in the Observable Framework configuration file. It sets up a custom 'note' container with specific rendering rules.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-container/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport container from \"markdown-it-container\";\n\nexport default {\n  plugins: {\n    markdown: {\n      use: [\n        [container, \"note\", {\n          validate: function(params) {\n            return params.trim().match(/^note\\s+(.*)$/);\n          },\n          render: function (tokens, idx) {\n            var m = tokens[idx].info.trim().match(/^note\\s+(.*)$/);\n            if (tokens[idx].nesting === 1) {\n              // opening tag\n              return '<div class=\"note\"><strong>' + m[1] + '</strong>\\n';\n            } else {\n              // closing tag\n              return '</div>\\n';\n            }\n          }\n        }]\n      ]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Processing BA Connections\nDESCRIPTION: Processes connection data between balancing authorities, including geographical endpoints for visualization.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst eiaConnRefSpatial = eiaConnRef\n  .filter((d) => d[\"Active Connection\"] == \"Yes\")\n  .map((d) => ({\n    connection: `${d[\"BA Code\"]}-${d[\"Directly Interconnected BA Code\"]}`,\n    location1: locations.get(d[\"BA Code\"]),\n    location2: locations.get(d[\"Directly Interconnected BA Code\"])\n  }));\n```\n\n----------------------------------------\n\nTITLE: Using Display Function with Random Number\nDESCRIPTION: Example showing how to use the display function to show a random number and assign it to a variable.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = Math.random();\n\ndisplay(x);\n```\n\n----------------------------------------\n\nTITLE: Template String Interpolation in JavaScript\nDESCRIPTION: Shows how to use template literals with embedded expression to combine a string with arithmetic calculation result.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/setext.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHello ${1 + 2}\n```\n\n----------------------------------------\n\nTITLE: Importing Analytics Module in JavaScript\nDESCRIPTION: Imports an external analytics JavaScript module from the /code/ directory. This import statement loads the analytics functionality which may be used for tracking user behavior or page metrics.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/params2/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"/code/analytics.js\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Color Input in JavaScript\nDESCRIPTION: This example shows how to create a disabled color input that prevents the user from changing its value.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/color.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst disabled = view(Inputs.color({label: \"Disabled\", value: \"#f28e2c\", disabled: true}));\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Named Exports and Namespaces\nDESCRIPTION: Demonstrates two different import patterns: importing a single named export from a package, and importing an entire package as a namespace using the asterisk syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {rollup} from \"npm:d3-array\"; // a single named import\nimport * as d3 from \"npm:d3\"; // import everything as a namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Min and Max Date Constraints in JavaScript\nDESCRIPTION: Demonstrates how to set lower and upper bounds for valid date inputs using the min and max options.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst birthday = view(Inputs.date({label: \"Birthday\", min: \"2021-01-01\", max: \"2021-12-31\"}));\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Data Source for NYC Taxi Trips\nDESCRIPTION: Sets up the data source for NYC taxi trips using SQL front matter, specifying a Parquet file as the data source.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/mosaic.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ntrips: nyc-taxi.parquet\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Timestamp Value\nDESCRIPTION: Outputs the current value of the time button, which will be null initially or a Date object after the button has been clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntime\n```\n\n----------------------------------------\n\nTITLE: SQL Table Configuration in YAML\nDESCRIPTION: YAML configuration block defining the source table location for SQL queries\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/sql/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsql:\n  table: /table.csv\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Formatting in JavaScript\nDESCRIPTION: Demonstrates how to customize the formatting of specific columns using the 'format' option in Inputs.table().\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins, {\n  format: {\n    culmen_length_mm: (x) => x.toFixed(1),\n    culmen_depth_mm: (x) => x.toFixed(1),\n    sex: (x) => x === \"MALE\" ? \"M\" : x === \"FEMALE\" ? \"F\" : \"\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Button with HTML Content\nDESCRIPTION: Creates a button with HTML content instead of plain text, allowing for custom formatting. This example shows an italicized button label.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst y = view(Inputs.button(html`<i>Fancy</i>`));\n```\n\n----------------------------------------\n\nTITLE: Displaying Content in Observable HQ\nDESCRIPTION: Displays the contents of the previously loaded text file using Observable's display function. This function is commonly used to render values in Observable notebooks.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/simple/simple.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndisplay(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown-Formatted Note\nDESCRIPTION: Shows how to create a note with Markdown formatting inside HTML container\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"tip\">\n\nThis is a *styled* tip using **Markdown**.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Explicitly Importing Default Export with Named Syntax\nDESCRIPTION: Alternative syntax for importing the default export by explicitly naming it. This is equivalent to the simpler import syntax above but shows the underlying mechanism.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {default as confetti} from \"npm:canvas-confetti\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Forecast Data Object\nDESCRIPTION: Outputs the entire forecast data object loaded from the JSON file to allow exploration of its structure and contents.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nforecast\n```\n\n----------------------------------------\n\nTITLE: Importing Timeline Component in Observable\nDESCRIPTION: This snippet imports a timeline component from a relative path. It is used to render timeline visualizations in an Observable notebook. The code assumes the existence of a components directory with a timeline.js module, which is a prerequisite.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-report.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {timeline} from \"./components/timeline.js\";\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Observable HQ Framework\nDESCRIPTION: This snippet demonstrates how to handle errors within the Observable HQ framework using asynchronous functions. It shows the implementation of an error logging function that captures error messages and stack traces. It relies on built-in error objects and asynchronous programming features like promises to provide comprehensive error details. Requires access to the 'console' object for logging purposes.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/files/sub/visible.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function handleError(error) {\\n  console.error('An error occurred:', error.message);\\n  console.error('Stack trace:', error.stack);\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Date Input in JavaScript\nDESCRIPTION: Illustrates how to create a disabled date input that prevents the value from being changed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/date.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst fixed = view(Inputs.date({label: \"Fixed date\", value: \"2021-01-01\", disabled: true}));\n```\n\n----------------------------------------\n\nTITLE: Basic Raster Plot Visualization\nDESCRIPTION: Creates a basic visualization of the surface temperature data using Plot's raster mark with preserved aspect ratio.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/geotiff/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width,\n  aspectRatio: 1, // preserve the aspect ratio of the data\n  color: {label: \"SFCTMP\", legend: true},\n  y: {reverse: true},\n  marks: [\n    Plot.raster(values, {width: image.getWidth(), height: image.getHeight()})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Return Constant JavaScript\nDESCRIPTION: A JavaScript function named bareJs that returns a constant value 1. It doesn't utilize observable-specific attributes.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fenced-code-options.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction bareJs() {\n  return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Block Cell Conversion Example\nDESCRIPTION: Example of converting an Observable block cell to standard JavaScript, showing D3 chart creation code.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nchart = {\n  const width = 960;\n  const height = 500;\n\n  const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n  return svg.node();\n}\n```\n\nLANGUAGE: js\nCODE:\n```\nconst width = 960;\nconst height = 500;\n\nconst svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\nconst chart = display(svg.node());\n```\n\n----------------------------------------\n\nTITLE: Configuring embedded page options in YAML\nDESCRIPTION: This YAML front matter disables the sidebar, header, footer, and pager for the embedded page, focusing solely on the content.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar: false\nheader: false\nfooter: false\npager: false\n---\n```\n\n----------------------------------------\n\nTITLE: Loading External JavaScript Files in HTML\nDESCRIPTION: Demonstrates loading of JavaScript files with different script types - module and other. Shows proper script tag usage with src attribute.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/imports/script.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"top.js\" type=\"module\"></script>\n<script src=\"top.js\" type=\"other\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Hosted Extensions with Default Loading Disabled\nDESCRIPTION: Exports a configuration object that specifies certain DuckDB extensions (spatial and h3) should be self-hosted but not loaded by default. This allows selective loading of extensions when needed.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  duckdb: {\n    extensions: {\n      spatial: false,\n      h3: false\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Note Callout in HTML\nDESCRIPTION: Shows how to create a basic note callout using HTML div with note class\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"note\">This is a note.</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated PNG Image in HTML\nDESCRIPTION: This HTML code snippet displays the PNG image generated by the Python script. It references the image file 'data/birth-statistics.png' and sets a maximum width of 500 pixels.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-png/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"data/birth-statistics.png\" style=\"max-width: 500px;\">\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment with venv\nDESCRIPTION: Creates a Python virtual environment using the venv module, which allows local installation of packages specific to a project.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Mapping BA Locations\nDESCRIPTION: Creates a map of balancing authority abbreviations to their geographical coordinates.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst locations = new Map(eiaPoints.map(d => [d.id, [d.lon, d.lat]]));\n```\n\n----------------------------------------\n\nTITLE: Disabling Table of Contents Using YAML Front Matter\nDESCRIPTION: Example YAML front matter for disabling the table of contents on a specific page in Observable Framework. This page-level configuration overrides the app-level settings.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Alternative Arrow File Loading\nDESCRIPTION: Alternative method to load Arrow file using Arquero's loadArrow function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst flights = aq.loadArrow(FileAttachment(\"flights-200k.arrow\").href);\n```\n\n----------------------------------------\n\nTITLE: Attaching a File with Unknown MIME Extension\nDESCRIPTION: Uses the FileAttachment API to reference a file with an unusual or unknown file extension, showing the flexibility of the FileAttachment API.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/files.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nFileAttachment(\"unknown-mime-extension.really\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Parquet data as Arrow table\nDESCRIPTION: Demonstrates accessing the Arrow table returned from loading a Parquet file.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arrow.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ngaia\n```\n\n----------------------------------------\n\nTITLE: Using DOT Template Literal in JavaScript\nDESCRIPTION: Demonstrates how to use the imported dot tagged template literal to create a simple directed graph with three nodes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndot`digraph G {\n  rankdir = LR\n  a -> b -> c\n}`\n```\n\n----------------------------------------\n\nTITLE: Attributes JavaScript\nDESCRIPTION: A JavaScript function, langAndAttributes, that returns 1. This snippet includes multiple observable attributes toggled off, such as 'echo=false' and 'whatever'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fenced-code-options.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction langAndAttributes() {\n  return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting require to npm import in JavaScript\nDESCRIPTION: Shows how to convert the AMD-style require statement to a standard ES module import when working with the regl library in Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nregl = require(\"regl\")\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport regl from \"npm:regl\";\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Range Input in JavaScript\nDESCRIPTION: Demonstrates how to create a disabled range input that cannot be interacted with.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst d = view(Inputs.range([0, 1], {disabled: true}));\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Formatted Color Radio in JavaScript\nDESCRIPTION: Displays the currently selected color from the color2 radio input with custom HTML formatting.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncolor2\n```\n\n----------------------------------------\n\nTITLE: Shell Script: Downloading and Converting Eurostat CSV to Parquet using DuckDB\nDESCRIPTION: Downloads education statistics CSV from Eurostat API, caches it locally, and uses DuckDB to filter and convert to Parquet format. Filters for 2019 data, lower secondary education, percentage values, and specific geographical regions.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-duckdb/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCODE=\"educ_uoe_lang01\"\nURL=\"https://ec.europa.eu/eurostat/api/dissemination/sdmx/2.1/data/$CODE/?format=SDMX-CSV&i\"\n\n# Use the data loader cache directory to store the downloaded data.\nTMPDIR=\"src/.observablehq/cache/\"\n\n# Download the data (if it's not already in the cache).\nif [ ! -f \"$TMPDIR/$CODE.csv\" ]; then\n  curl -f \"$URL\" -o \"$TMPDIR/$CODE.csv\"\nfi\n\n# Generate a Parquet file using DuckDB.\nduckdb :memory: << EOF\nCOPY (\n  SELECT *\n  FROM read_csv('$TMPDIR/$CODE.csv')\n  WHERE true\n    AND TIME_PERIOD = 2019 -- a good year in terms of data quality\n    AND OBS_VALUE > 0 -- filter out zeros\n    AND isced11 = 'ED2' -- lower secondary education\n    AND unit = 'PC' -- ignore absolute numbers, keep percentages\n    AND language != 'TOTAL' -- ignore total\n    AND length(geo) = 2 -- ignore groupings such as EU_27\n) TO STDOUT (FORMAT 'parquet', COMPRESSION 'gzip');\nEOF\n```\n\n----------------------------------------\n\nTITLE: Importing D3 Array Module with Dependencies\nDESCRIPTION: Example of importing the d3-array module, which demonstrates how Framework handles transitive dependencies.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"npm:d3-array\";\n```\n\n----------------------------------------\n\nTITLE: Build Output Structure with File Attachments\nDESCRIPTION: Example directory structure showing how files are organized after the build process, with the file attachment copied to the _file directory and given a content hash.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ dist\n│  ├─ _file\n│  │  └─ quakes.e5f2eb94.csv\n│  ├─ _observablehq\n│  │  └─ … # additional assets\n│  └─ index.html\n└─ …\n```\n\n----------------------------------------\n\nTITLE: Loading Data from File Attachment in JavaScript\nDESCRIPTION: Loads TSV data from a file attachment, used later for populating a datalist.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst capitals = FileAttachment(\"us-state-capitals.tsv\").tsv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Electricity Grid Visualization\nDESCRIPTION: Imports required chart and map components from separate modules for visualization of electricity grid data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {countryInterchangeChart, top5BalancingAuthoritiesChart, usGenDemandForecastChart} from \"./components/charts.js\";\nimport {balancingAuthoritiesLegend, balancingAuthoritiesMap} from \"./components/map.js\";\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax Highlighting Colors for Dark Mode in CSS\nDESCRIPTION: This snippet sets the syntax highlighting color variables for dark mode, based on Framework's default dark mode colors.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/custom-stylesheet/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --syntax-keyword: #ff7b72;\n  --syntax-entity: #d2a8ff;\n  --syntax-constant: #79c0ff;\n  --syntax-string: #a5d6ff;\n  --syntax-variable: #ffa657;\n  --syntax-comment: var(--theme-foreground-muted);\n  --syntax-entity-tag: #7ee787;\n  --syntax-storage-modifier-import: #c9d1d9;\n  --syntax-markup-heading: #1f6feb;\n  --syntax-markup-list: #f2cc60;\n  --syntax-markup-italic: #c9d1d9;\n  --syntax-markup-bold: #c9d1d9;\n  --syntax-markup-inserted: #aff5b4;\n  --syntax-markup-inserted-background: #033a16;\n  --syntax-markup-deleted: #ffdcd7;\n  --syntax-markup-deleted-background: #67060c;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure with ZIP Archive Data\nDESCRIPTION: Shows a project structure that includes a ZIP archive which can be used as a data source for file attachments.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  ├─ index.md\n│  └─ quakes.zip\n└─ …\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Test Data in Observable HQ Framework\nDESCRIPTION: This code imports a test module from a local file and asynchronously displays its contents. It demonstrates the basic pattern for importing and rendering data in the Observable HQ Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/data-loaders/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {test} from \"./import-test.js\";\n\ndisplay(await test);\n```\n\n----------------------------------------\n\nTITLE: Attaching a PNG Image with Spaces in Filename\nDESCRIPTION: Uses the FileAttachment API to reference a PNG image with spaces in its filename, demonstrating how to handle special characters in filenames.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/files.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nFileAttachment(\"observable logo.png\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Input Element\nDESCRIPTION: Simple HTML input element declaration that serves as the base for generator examples.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"nameInput\">\n```\n\n----------------------------------------\n\nTITLE: Importing Observable Inputs Library\nDESCRIPTION: Shows how to import the entire Observable Inputs library or specific components.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Inputs from \"npm:@observablehq/inputs\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {button, color} from \"npm:@observablehq/inputs\";\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Toggle Input in JavaScript\nDESCRIPTION: This example shows how to create a disabled toggle input that cannot be changed by the user. It uses the 'disabled' option set to true in the Inputs.toggle() function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst frozen = view(Inputs.toggle({label: \"Frozen\", value: true, disabled: true}));\n```\n\n----------------------------------------\n\nTITLE: TeX Equation\nDESCRIPTION: This snippet demonstrates how to render a mathematical equation using TeX markup within the Observable Framework. It displays Einstein's famous equation E=mc^2.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/preview/dashboard/code/code.md#2025-04-21_snippet_2\n\nLANGUAGE: TeX\nCODE:\n```\nE = mc^2\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Formatted Map Radio in JavaScript\nDESCRIPTION: Displays the currently selected size value from the size2 radio input defined with a Map and custom formatting.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsize2\n```\n\n----------------------------------------\n\nTITLE: Installing Required NPM Packages for Shapefile Processing\nDESCRIPTION: Installation of necessary npm packages for handling shapefiles and topojson operations\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-census/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install shapefile topojson-client topojson-server topojson-simplify\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image in Markdown with URL Encoding\nDESCRIPTION: Demonstrates how to embed an image in Markdown syntax where spaces in the filename are URL-encoded with percentage notation.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/files.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![](observable%20logo%20small.png)\n```\n\n----------------------------------------\n\nTITLE: Project Structure with Data Loader Example\nDESCRIPTION: Shows a typical project file structure including a data loader file (quakes.json.sh) alongside other source files.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  ├─ index.md\n│  └─ quakes.json.sh\n└─ …\n```\n\n----------------------------------------\n\nTITLE: FileAttachment successfully fetching file\nDESCRIPTION: This code snippet demonstrates a successful use of FileAttachment.  It fetches an existing file from the current directory using a relative path. The .text() method is used to asynchronously read the file's content as text.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fetch-parent-dir.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ok1 = FileAttachment(\"./tex-expression.md\").text()\n```\n\n----------------------------------------\n\nTITLE: Creating an Iframe Embed for Framework Content\nDESCRIPTION: HTML code for embedding a Framework page using an iframe. The scrolling attribute is set to \"no\" to prevent scrollbars within the embedded content.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<iframe scrolling=\"no\" src=\"https://my-app.example.com/chart\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Importing Lodash in ObservableHQ\nDESCRIPTION: Demonstrates explicitly importing the Lodash library from npm, even though it's available by default as '_' in Markdown.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/lodash.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport _ from \"npm:lodash\";\n```\n\n----------------------------------------\n\nTITLE: Rendering a Card Component with Content\nDESCRIPTION: Displays a Card component with a title and text content using the display function.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\ndisplay(<Card title=\"A test of cards\">If you can read this, success!</Card>);\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying a URL-encoded Module Path\nDESCRIPTION: This snippet imports a module with a URL-encoded space in its filename and displays its contents. The import uses a relative path with URL encoding for the space character.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/imports/foo/foo.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {foobar} from \"./foo%20bar.js\";\ndisplay(foobar);\n```\n\n----------------------------------------\n\nTITLE: Using the Greeting Component\nDESCRIPTION: Example showing how to use the previously defined greeting component with the string \"world\" as an argument.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngreeting(\"world\")\n```\n\n----------------------------------------\n\nTITLE: FileAttachment failing to fetch from parent directory\nDESCRIPTION: This code snippet attempts to fetch an existing file from the parent directory using FileAttachment. The intention is to test the security measure preventing traversal outside allowed directories. The .text() method retrieves file content as text asynchronously.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fetch-parent-dir.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fail2 = FileAttachment(\"../README.md\").text()\n```\n\n----------------------------------------\n\nTITLE: Example ObservableHQ Framework Project Structure\nDESCRIPTION: Shows the typical directory structure of an ObservableHQ Framework project, including source files, configuration, and package management files.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/project-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src                    # source root\n│  ├─ .observablehq\n│  │  ├─ cache            # data loader cache\n│  │  └─ deploy.json      # deployment metadata\n│  ├─ components\n│  │  └─ dotmap.js        # shared JavaScript module\n│  ├─ data\n│  │  └─ quakes.csv.ts    # data loader\n│  ├─ index.md            # home page\n│  └─ quakes.md           # page\n├─ .gitignore\n├─ README.md\n├─ observablehq.config.js # app configuration\n├─ package.json           # node package dependencies\n└─ yarn.lock              # node package lockfile\n```\n\n----------------------------------------\n\nTITLE: Purging the Entire Data Loader Cache\nDESCRIPTION: Shell command to delete the entire data loader cache directory, forcing all data loaders to run on the next build.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf src/.observablehq/cache\n```\n\n----------------------------------------\n\nTITLE: Referencing Footnotes in Markdown\nDESCRIPTION: This example demonstrates how to reference footnotes in Markdown text. It shows two footnote references, one with a simple number and another with a descriptive identifier.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-footnote/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHere is a footnote reference,[^1] and another.[^longnote]\n```\n\n----------------------------------------\n\nTITLE: Using markdown-it-container for a warning in Markdown\nDESCRIPTION: This example illustrates how to use the ::: syntax to create a warning container in Markdown. The content inside the container will be styled as a warning.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-container/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n::: warning\nThat's a _nice_ **warning**, ain't it?\n:::\n```\n\n----------------------------------------\n\nTITLE: Displaying Arquero Table\nDESCRIPTION: Renders the Arquero table using Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(dt)\n```\n\n----------------------------------------\n\nTITLE: Reading Text File Using FileAttachment in Observable HQ\nDESCRIPTION: Reads the contents of a text file named 'data.txt' using Observable's FileAttachment API and stores it in a variable. The FileAttachment function returns a promise that resolves to the file's text content.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/simple/simple.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = FileAttachment(\"data.txt\").text();\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for NetCDF Processing and Visualization in JavaScript\nDESCRIPTION: This snippet imports the necessary libraries and modules for reading NetCDF files and creating plots. It includes netcdfjs for NetCDF processing, Observable Plot for visualization, and FileAttachment for handling file attachments.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/netcdf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFile } from \"netcdfjs\";\nimport * as Plot from \"@observablehq/plot\";\nimport { FileAttachment } from \"@observablehq/stdlib\";\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data\nDESCRIPTION: Loads the generated CSV file into the application using FileAttachment with type conversion.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-bigquery/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst covidStats = FileAttachment(\"data/covidstats_it.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Importing GeoTIFF Library\nDESCRIPTION: Imports the fromArrayBuffer function from the geotiff.js library to handle GeoTIFF file parsing.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/geotiff/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {fromArrayBuffer} from \"npm:geotiff\";\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Require Pattern with D3-Require\nDESCRIPTION: Example of importing the require function from d3-require for compatibility with older AMD-style module loading.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport {require} from \"npm:d3-require\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Display\nDESCRIPTION: Configures date formatting for display in the dashboard interface.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatDate = d3.utcFormat(\"%B %d, %Y\");\nconst currentHour = new Date(endHour.getTime() - hoursAgo * MS_IN_AN_HOUR);\nconst currentDate = d3.timeFormat(\"%-d %b %Y\")(currentHour);\n```\n\n----------------------------------------\n\nTITLE: HTML Template with JavaScript Expression\nDESCRIPTION: Shows how to embed a basic JavaScript arithmetic expression (1 + 2) within an HTML span element using template literal interpolation.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/inline-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<span>${1 + 2}</span>\n```\n\n----------------------------------------\n\nTITLE: Displaying HTML Label Toggle Input in JavaScript\nDESCRIPTION: This snippet demonstrates how to display the value of the 'fancy' toggle input with an HTML label created in the previous example.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfancy\n```\n\n----------------------------------------\n\nTITLE: Template Literal String Interpolation in Script Module\nDESCRIPTION: Demonstrates the use of ES6 template literals for string interpolation within a module script tag. Shows how to embed a variable within a string using ${} syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/script-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"module\">\n\nconst subject = \"world\";\nconst message = `Hello, ${subject}!`;\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Dependencies\nDESCRIPTION: Imports the necessary components for data revival and bump chart visualization from local modules.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/chess/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {revive} from \"./components/revive.js\";\nimport {BumpChart} from \"./components/BumpChart.js\";\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on macOS/Linux\nDESCRIPTION: Activates the Python virtual environment on Unix-like systems (macOS, Linux) to use locally installed packages.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Simple Undirected Graph Example in DOT\nDESCRIPTION: Creates a simple undirected cyclic graph with four nodes using DOT syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_3\n\nLANGUAGE: dot\nCODE:\n```\ngraph { n0 -- n1 -- n2 -- n3 -- n0 }\n```\n\n----------------------------------------\n\nTITLE: Local Module Import Example\nDESCRIPTION: Example of importing a local module from a chart.js file, demonstrating how Framework handles relative imports.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Chart} from \"./chart.js\";\n```\n\n----------------------------------------\n\nTITLE: Loading Earthquake ZIP Archive in Observable\nDESCRIPTION: This JavaScript snippet demonstrates how to load the entire ZIP archive generated by the Python script in an Observable notebook using FileAttachment.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-zip/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst earthquakes = FileAttachment(\"data/earthquakes.zip\").zip();\n```\n\n----------------------------------------\n\nTITLE: Configuring markdown-it-footnote Plugin in Observable Framework\nDESCRIPTION: This code snippet shows how to register the markdown-it-footnote plugin in the Observable Framework configuration file. It imports the plugin and adds it to the markdown-it instance.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-footnote/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport footnote from \"markdown-it-footnote\";\n\nexport default {\n  plugins: {\n    // ...\n    markdown: {\n      remarkPlugins: [],\n      rehypePlugins: [],\n      remarkRehype: {},\n      markdownItPlugins: [\n        footnote\n      ]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Arithmetic Expression\nDESCRIPTION: Evaluates a basic mathematical expression within a template literal, computing the sum of 1 and 2\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/triple-backtick-inline.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n${1 + 2}\n```\n\n----------------------------------------\n\nTITLE: Initializing jQuery and jQuery UI\nDESCRIPTION: Imports jQuery library, assigns it to global scope, and imports jQuery UI components.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/jquery-ui.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport $ from \"npm:jquery\";\nself.jQuery = $;\nawait import(\"npm:jquery-ui\");\n```\n\n----------------------------------------\n\nTITLE: ObservableHQ Framework Build Output Directory Structure\nDESCRIPTION: Shows the output directory structure after building a basic project, with HTML files generated from Markdown sources and additional assets.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/project-structure.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ dist\n│  ├─ _observablehq\n│  │  └─ ⋯ # additional assets\n│  ├─ hello.html\n│  └─ index.html\n└─ ⋯\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables from Delayed Block\nDESCRIPTION: Demonstrates how a reference to variables from a delayed block must wait for the entire defining block to complete before executing.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\none + two // waits 5 seconds!\n```\n\n----------------------------------------\n\nTITLE: Template Literal and Escape Sequence Tests\nDESCRIPTION: Collection of test cases showing different combinations of escape characters, template literals, and HTML tags with variable substitution patterns.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/escaped-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n${1}\\n\\${2}\\n\\\\${3}\\n\\\\\\${4}\\n${5}\\n$\\{6}\\n$\\\\{7}\\n$\\\\\\{8}\\n`${9}`\\n`\\${10}`\\n`\\\\${11}`\\n`\\\\\\${12}`\\n`${13}`\\n`$\\{14}`\\n`$\\\\{15}`\\n`$\\\\\\{16}`\\n<code>${17}</code>\\n<code>$\\{18}</code>\\n<code>$\\\\{19}</code>\\n<code>$\\\\\\{20}</code>\\n<code>${21}</code>\\n<code>\\${22}</code>\\n<code>\\\\${23}</code>\\n<code>\\\\\\${24}</code>\\n<pre>${25}</pre>\\n<pre>$\\{26}</pre>\\n<pre>$\\\\{27}</pre>\\n<pre>$\\\\\\{28}</pre>\\n<pre>${29}</pre>\\n<pre>\\${30}</pre>\\n<pre>\\\\${31}</pre>\\n<pre>\\\\\\${32}</pre>\\n$33\\n\\$34\\n\\\\$35\\n\\\\\\$36\\n{37}\\n\\{38}\\n\\\\{39}\\n\\\\\\{40}\n```\n\n----------------------------------------\n\nTITLE: Preselecting Table Rows in JavaScript\nDESCRIPTION: Shows how to preselect the first two rows in the table using the 'value' option.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npenguins.slice(0, 2)\n```\n\n----------------------------------------\n\nTITLE: Commented Observable JavaScript Code Block\nDESCRIPTION: A JavaScript code block within HTML comments that contains an Observable display function call.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/comment.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!--\n```js\ndisplay(1 + 2);\n``` -->\n```\n\n----------------------------------------\n\nTITLE: Creating Text Input with Datalist Suggestions in JavaScript\nDESCRIPTION: Sets up a text input with a datalist of U.S. state names for autocomplete suggestions.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/text.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst state = view(Inputs.text({\n  label: \"U.S. state\",\n  placeholder: \"Enter state name\",\n  datalist: capitals.map((d) => d.State)\n}));\n```\n\n----------------------------------------\n\nTITLE: Registering an External SQL Table in Front Matter (YAML)\nDESCRIPTION: Registers a table named 'quakes' from an external CSV URL in page front matter. Added in Framework v1.4.0.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/sql.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsql:\n  quakes: https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.csv\n---\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Elasticsearch and Kibana on macOS\nDESCRIPTION: Commands for downloading, extracting, and running Elasticsearch and Kibana on macOS. This setup is required to create the sample web logs dataset for the data loader example.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Download and run Elasticsearch\ncurl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.14.1-darwin-x86_64.tar.gz\ngunzip -c elasticsearch-8.14.1-darwin-x86_64.tar.gz | tar xopf -\ncd elasticsearch-8.14.1\n./bin/elasticsearch\n\n# Next, in another terminal tab, download and run Kibana\ncurl -O https://artifacts.elastic.co/downloads/kibana/kibana-8.14.1-darwin-x86_64.tar.gz\ngunzip -c kibana-8.14.1-darwin-x86_64.tar.gz | tar xopf -\ncd kibana-8.14.1\n./bin/kibana\n```\n\n----------------------------------------\n\nTITLE: Markdown List Examples\nDESCRIPTION: Examples of creating unordered and ordered lists with nested items in Markdown\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- red\n- green\n- blue\n  - light blue\n  - dark blue\n```\n\nLANGUAGE: markdown\nCODE:\n```\n1. first\n1. second\n1. third\n   1. third first\n   1. third second\n```\n\n----------------------------------------\n\nTITLE: Built Output Directory Structure\nDESCRIPTION: Shows the output directory structure after building a project with a data loader, with the processed file in the _file directory with a content hash.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ dist\n│  ├─ _file\n│  │  └─ quakes.99da78d9.json\n│  ├─ _observablehq\n│  │  └─ … # additional assets\n│  └─ index.html\n└─ …\n```\n\n----------------------------------------\n\nTITLE: Displaying D3 Grouped Data Radio Selection in JavaScript\nDESCRIPTION: Displays the currently selected group of athletes from the goldAthletes radio input based on gold medal count.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngoldAthletes\n```\n\n----------------------------------------\n\nTITLE: Configuring markdown-it-container in Observable Framework\nDESCRIPTION: This code snippet shows how to configure markdown-it-container in the observablehq.config.js file. It imports the plugin and registers three custom containers: card, tip, and warning.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-container/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkdownItContainer from \"markdown-it-container\";\n\nexport default {\n  root: \"src\",\n  markdownIt: (md) =>\n    md\n      .use(MarkdownItContainer, \"card\") // ::: card\n      .use(MarkdownItContainer, \"tip\") // ::: tip\n      .use(MarkdownItContainer, \"warning\") // ::: warning\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Math Expression with Echo\nDESCRIPTION: A simple JavaScript expression that demonstrates implicit display in Observable Framework with the echo attribute to show both the code and its result.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Importing FileAttachment from Observable Stdlib in JavaScript\nDESCRIPTION: Shows how to import the FileAttachment function from the Observable standard library.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {FileAttachment} from \"observablehq:stdlib\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Local File with FileAttachment\nDESCRIPTION: Uses the FileAttachment API to load a local markdown file named 'local-fetch.md'. This is a common pattern in ObservableHQ notebooks for accessing local file resources.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/local-fetch.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"./local-fetch.md\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Observable Framework Project Structure\nDESCRIPTION: This code snippet shows the directory structure of a minimal Observable Framework project, including the source directory, configuration file, and package.json.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hello-world/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ src\n│  └─ index.md\n├─ observablehq.config.js\n└─ package.json\n```\n\n----------------------------------------\n\nTITLE: Initializing Latency Heatmap for Documents Route\nDESCRIPTION: Creates a canvas element and loads a Parquet file containing latency data for the /documents/@{login} route, enabling performance visualization\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/api/src/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst latencyDocumentsAtHeatmap = visibility().then(() => FileAttachment(\"data/latency-heatmap-documents-at.parquet\").parquet());\nconst latencyDocumentsAtCanvas = document.createElement(\"canvas\");\n```\n\n----------------------------------------\n\nTITLE: Displaying Airtable Data with Inputs.table in Observable\nDESCRIPTION: Renders the retrieved penguins data as an interactive table using Observable's Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-airtable/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(penguins)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer Between Range with JSR in JavaScript\nDESCRIPTION: This JavaScript snippet imports the 'randomIntegerBetween' and 'randomSeeded' functions from the JSR library to create a seeded pseudo-random number generator. The generator is initialized with a seed value, allowing deterministic outputs based on the same seed. The snippet displays a random integer between 1 and 10, inclusive.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/jsr/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {randomIntegerBetween, randomSeeded} from \"jsr:@std/random\";\n\nconst prng = randomSeeded(1n);\n\ndisplay(randomIntegerBetween(1, 10, {prng}));\n```\n\n----------------------------------------\n\nTITLE: Writing a Data Loader in Python for Weather Forecast\nDESCRIPTION: This Python script creates a data loader that fetches weather forecast data from the National Weather Service API. It retrieves the hourly forecast for a specified location (latitude/longitude) and outputs the JSON response to stdout for Framework to consume.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\nimport sys\n\nlongitude = -122.47\nlatitude = 37.80\n\nstation = requests.get(f\"https://api.weather.gov/points/{latitude},{longitude}\").json()\nforecast = requests.get(station[\"properties\"][\"forecastHourly\"]).json()\n\njson.dump(forecast, sys.stdout)\n```\n\n----------------------------------------\n\nTITLE: Importing TopoJSON Client Library in JavaScript\nDESCRIPTION: Demonstrates how to import the TopoJSON client library in JavaScript. This library allows transformation of compact TopoJSON files to GeoJSON for map display.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/topojson.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as topojson from \"npm:topojson-client\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elasticsearch CA Fingerprint\nDESCRIPTION: Command to obtain the CA fingerprint for the Elasticsearch configuration. This is necessary for setting up the environment variables for secure communication with Elasticsearch.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -fingerprint -sha256 -noout -in ./elasticsearch-8.14.1/config/certs/http_ca.crt\n```\n\n----------------------------------------\n\nTITLE: External Link HTML Example\nDESCRIPTION: Example of creating an external link with specific attributes\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/robots.txt\" rel=\"external\">robots.txt</a>\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Example\nDESCRIPTION: Example .env file configuration for setting up Elasticsearch connection credentials.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nES_NODE=\"https://USERNAME:PASSWORD@HOST:9200\"\n```\n\n----------------------------------------\n\nTITLE: Price Range Display Template\nDESCRIPTION: Markdown template for displaying the selected price range values.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/jquery-ui.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nPrice range: ${value.join(\"–\")}\n```\n\n----------------------------------------\n\nTITLE: Importing Framework Index Module in JavaScript\nDESCRIPTION: A JavaScript import statement that loads the main index.js module from the current directory. This is typically used to import the core functionality of the Observable HQ framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/npm/index.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./index.js\";\n```\n\n----------------------------------------\n\nTITLE: Loading California JSON Data\nDESCRIPTION: Loading California geographical data from a JSON file attachment\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-census/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ca = FileAttachment(\"data/ca.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Using Wikilinks in Markdown\nDESCRIPTION: This example demonstrates how to use wikilinks syntax in Markdown. It shows two different styles of wikilinks: one with a custom display text and another with a direct link to a wiki page.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-wikilinks/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nClick [[Wiki Links|here]] to learn about [[/Wiki]] links.\n```\n\n----------------------------------------\n\nTITLE: Simple Calculation in Observable Markdown\nDESCRIPTION: This snippet demonstrates a simple mathematical calculation that is evaluated by Observable Framework.  The expression `${1 + 2}` will be evaluated and its result will be displayed in the output.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/heading-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ${1 + 2}\n```\n\n----------------------------------------\n\nTITLE: Calculating Top 5 Balancing Authorities\nDESCRIPTION: Computes the top 5 balancing authorities by demand and tracks maximum demand values.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/eia/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction computeTopDemand(baHourly) {\n  return Array\n    .from(baHourly, ([name, value]) => ({name, value}))\n    .sort(((a, b) => b.value - a.value))\n    .slice(0, 5);\n}\nconst top5LatestDemand = computeTopDemand(baHourlyCurrent);\nconst maxDemand = d3.max(baHourlyAll.map((demand) => computeTopDemand(demand)[0].value));\n```\n\n----------------------------------------\n\nTITLE: Displaying Arrow Table with Formatted Dates\nDESCRIPTION: Creates an interactive table display of the Arrow data using Inputs.table with custom date formatting to improve readability.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-arrow/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(samples, {\n  format: {\n    date: (x) => new Date(x).toISOString().slice(0, 10)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing add Function in TypeScript\nDESCRIPTION: Defines a typed add function that takes two number parameters and returns their sum.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/typescript/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Headings Syntax\nDESCRIPTION: Examples of creating different level headings in Markdown\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n# A first-level heading\n## A second-level heading\n### A third-level heading\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Input with Custom Formatting in JavaScript\nDESCRIPTION: Sets up a range input with a custom format function to control the display of values.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/range.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst f = view(Inputs.range([0, 1], {format: x => x.toFixed(2)}));\n```\n\n----------------------------------------\n\nTITLE: Importing vlresize Utility Function\nDESCRIPTION: This snippet demonstrates how to import the vlresize utility function from a local module file, making it available for use in the current page.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/vega-responsive/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {vlresize} from \"./vlresize.js\";\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage Report\nDESCRIPTION: Command to generate test coverage report using c8 in text and lcov formats.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:coverage\n```\n\n----------------------------------------\n\nTITLE: JavaScript Addition Function Example\nDESCRIPTION: A basic JavaScript function that takes two parameters and returns their sum. Uses standard function declaration syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fenced-code.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Directed Graph Example in DOT\nDESCRIPTION: Creates a simple directed linear graph with three nodes using DOT syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/dot.md#2025-04-21_snippet_4\n\nLANGUAGE: dot\nCODE:\n```\ndigraph { x -> y -> z }\n```\n\n----------------------------------------\n\nTITLE: Displaying Disabled Toggle Input in JavaScript\nDESCRIPTION: This snippet demonstrates how to display the value of the 'frozen' disabled toggle input created in the previous example.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/toggle.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfrozen\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Token for API Authentication\nDESCRIPTION: Instructions for adding a GitHub token to a .env file to avoid rate limits when accessing GitHub's API during development.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/plot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGITHUB_TOKEN=ghp_xxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline of Space Events in Observable\nDESCRIPTION: This snippet uses the previously imported timeline component to render a timeline visualization of space exploration events. It specifies a height of 300 for the visualization. Ensure the events data is correctly formatted as expected by the timeline component.\nSOURCE: https://github.com/observablehq/framework/blob/main/templates/default/src/example-report.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntimeline(events, {height: 300})\n```\n\n----------------------------------------\n\nTITLE: Configuring markdown-it-footnote in Observable Framework\nDESCRIPTION: This code snippet shows how to import and register the markdown-it-footnote plugin in the observablehq.config.js file. It uses the markdownIt config option to add the plugin to the Markdown processor.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-footnote/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MarkdownItFootnote from \"markdown-it-footnote\";\n\nexport default {\n  root: \"src\",\n  markdownIt: (md) => md.use(MarkdownItFootnote)\n};\n```\n\n----------------------------------------\n\nTITLE: Program Block with No Implicit Display\nDESCRIPTION: Example showing how program blocks (with semicolons) don't implicitly display their results.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/javascript.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 2; // no implicit display\n```\n\n----------------------------------------\n\nTITLE: Language and Echo JavaScript\nDESCRIPTION: A JavaScript function, langOutside, which returns 1. It includes specific observable attributes like 'echo'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fenced-code-options.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction langOutside() {\n  return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Preselecting Specific Table Rows in JavaScript\nDESCRIPTION: Demonstrates how to preselect specific rows (1, 3, 7, and 9) in the table.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/table.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 3, 7, 9].map((i) => penguins[i])\n```\n\n----------------------------------------\n\nTITLE: Resolving Import URLs with import.meta.resolve\nDESCRIPTION: Using import.meta.resolve to statically determine the URL of a module, which is useful for debugging or explicitly loading resources.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.resolve(\"npm:canvas-confetti\")\n```\n\n----------------------------------------\n\nTITLE: Creating Directed Graph Flow with Mermaid\nDESCRIPTION: Defines a directed graph using Mermaid syntax, showing connections between four nodes A, B, C, and D. The graph uses TD (top-down) orientation with arrows (-->) to show directional relationships between nodes.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/mermaid.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n----------------------------------------\n\nTITLE: Adding Numbers JavaScript\nDESCRIPTION: A simple JavaScript function named add that takes two parameters and returns their sum. This code includes an observable-specific option 'echo'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fenced-code-options.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction add(a, b) {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Python Addition Expression\nDESCRIPTION: A simple Python expression that computes the sum of 1 and 2. It includes an observable-specific attribute 'echo=false'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fenced-code-options.md#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Template Literal String Interpolation\nDESCRIPTION: Basic example of string interpolation using template literals, outputting the value '1'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/inline-following-backticks.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n${`1`}\n```\n\n----------------------------------------\n\nTITLE: Inline TeX Expression in Markdown\nDESCRIPTION: This snippet demonstrates how to use an inline TeX expression within Markdown text using the tex tagged template literal.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/tex.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nMy favorite equation is ${tex`E = mc^2`}.\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Inside HTML div Element\nDESCRIPTION: Example showing how a Markdown heading is nested within an HTML div container. This demonstrates the mixing of HTML and Markdown syntax.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/markdown-in-html.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  # Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google Analytics API\nDESCRIPTION: Configuration of required environment variables for Google Analytics API authentication, including property ID, client email, and private key credentials.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/google-analytics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGA_PROPERTY_ID=111111111\nGA_CLIENT_EMAIL=xxxx@yyy.gserviceaccount.com\nGA_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxx-----END PRIVATE KEY-----\\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Leaflet Visualization in JavaScript\nDESCRIPTION: This JavaScript snippet uses the Leaflet library to display a visualization component. Leaflet must be included as a dependency before using this snippet. The `display(L)` function is used to render the Leaflet map object `L`. There should be provisions for handling Leaflet setup, and context management must ensure this snippet is not included in build or sidebar components.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/embed/chart.js.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndisplay(L);\n```\n\n----------------------------------------\n\nTITLE: Modifying Location Coordinates for Weather Data\nDESCRIPTION: This code snippet shows how to edit the location coordinates in the forecast.json.js file to retrieve weather data for a different location. The example specifically shows coordinates for the White House location.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst longitude = -77.04;\nconst latitude = 38.90;\n```\n\n----------------------------------------\n\nTITLE: Evaluating embedded JavaScript expression within a template literal\nDESCRIPTION: Demonstrates embedding a simple arithmetic expression (1 + 2) within a template literal string using the ${} syntax. The expression will be evaluated and its result (3) will be inserted into the string.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/embedded-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n${1 + 2}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Configuration with YAML Front Matter\nDESCRIPTION: This YAML front matter configures the page to use the dashboard theme, which allows content to span the full width of the window, and disables the table of contents for a cleaner interface.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: dashboard\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements\nDESCRIPTION: Installs Python packages listed in requirements.txt file within the active virtual environment.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic File Input in JavaScript\nDESCRIPTION: Creates a basic file input that allows the user to select any file type. The value resolves to null by default until a file is selected.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/file.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst file = view(Inputs.file());\n```\n\n----------------------------------------\n\nTITLE: Dynamic Chart Embedding with Generated ID\nDESCRIPTION: HTML code that uses the DatawrapperChart helper function to embed a chart using an ID loaded from a file attachment. The chart is wrapped in a card div with maximum width constraint.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/datawrapper-api/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\" style=\"max-width: 908px;\">\n  ${DatawrapperChart(await FileAttachment(\"data/chart.txt\").text())}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using add Function in JavaScript\nDESCRIPTION: Demonstrates calling the add function in JavaScript with two number arguments.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/typescript/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nadd(1, 3)\n```\n\n----------------------------------------\n\nTITLE: Default Interpreter Configuration for Data Loaders\nDESCRIPTION: JavaScript object showing the default configuration for interpreters used in data loaders. Maps file extensions to the commands used to execute files of that type.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \".js\": [\"node\", \"--no-warnings=ExperimentalWarning\"],\n  \".ts\": [\"tsx\"],\n  \".py\": [\"python3\"],\n  \".r\": [\"Rscript\"],\n  \".R\": [\"Rscript\"],\n  \".rs\": [\"rust-script\"]\n  \".go\": [\"go\", \"run\"],\n  \".java\": [\"java\"],\n  \".jl\": [\"julia\"],\n  \".php\": [\"php\"],\n  \".sh\": [\"sh\"],\n  \".exe\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting iframe width with user input in JavaScript\nDESCRIPTION: This snippet creates a range input to control the iframe's width, using Observable's view and Inputs.range functions.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst iframeWidth = view(Inputs.range([200, 640], {step: 1, value: document.querySelector(\"#observablehq-main\").offsetWidth, label: \"Width\"}));\n```\n\n----------------------------------------\n\nTITLE: Adding Data Caching to Framework Deployment Workflow\nDESCRIPTION: Configuration steps for implementing data caching in the GitHub Actions workflow. Caches data loader results based on file changes and configured time intervals to improve build performance.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/deploying.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  deploy:\n    steps:\n      # …\n      - id: date\n        run: echo \"date=$(TZ=America/Los_Angeles date +'%Y-%m-%d')\" >> $GITHUB_OUTPUT\n      - id: cache-data\n        uses: actions/cache@v4\n        with:\n          path: src/.observablehq/cache\n          key: data-${{ hashFiles('src/data/*') }}-${{ steps.date.outputs.date }}\n      # …\n```\n\n----------------------------------------\n\nTITLE: Attaching a CSV File from Subdirectory\nDESCRIPTION: Uses the FileAttachment API to reference a CSV file located in a subdirectory of the project.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/files.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nFileAttachment(\"subsection/file-sub.csv\")\n```\n\n----------------------------------------\n\nTITLE: Loading File Attachment from Current Directory in Observable Framework\nDESCRIPTION: This snippet demonstrates how to reference and load a CSV file attachment located in the current directory using the FileAttachment API in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/subsection/subfiles.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nFileAttachment(\"file-sub.csv\")\n```\n\n----------------------------------------\n\nTITLE: HTML Template with String Literal\nDESCRIPTION: This snippet demonstrates how to embed a string literal (`hello`) directly within HTML. This is a simple example of dynamic content rendering where the `hello` value would typically be replaced with actual data.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/indented-inline.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div>\n    ${\"hello\"}\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Converting generator cells to IIGFE in JavaScript\nDESCRIPTION: Demonstrates how to wrap generator cells with an immediately-invoked generator function expression (IIGFE) to make them compatible with vanilla JavaScript in Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfoo = {\n  for (let i = 0; i < 10; ++i) {\n    yield i;\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = (function* () {\n  for (let i = 0; i < 10; ++i) {\n    yield i;\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Examples\nDESCRIPTION: Examples of embedding images in Markdown with local and remote sources\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n![A horse](./horse.jpg)\n![A happy kitten](https://placekitten.com/200/300)\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Client with Environment Variables\nDESCRIPTION: Helper module that configures and exports an Elasticsearch client instance using environment variables for authentication and connection settings. Supports various authentication methods including API keys and username/password.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-elasticsearch/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"dotenv/config\";\nimport { Client } from \"@elastic/elasticsearch\";\n\nconst {\n  ES_NODE,\n  ES_CLOUD_ID,\n  ES_API_KEY,\n  ES_USERNAME,\n  ES_PASSWORD,\n  ES_CA_FINGERPRINT,\n  ES_UNSAFE_TLS_REJECT_UNAUTHORIZED,\n} = process.env;\n\nif ((!ES_NODE && !ES_CLOUD_ID) || (ES_NODE && ES_CLOUD_ID))\n  throw new Error(\n    \"Either ES_NODE or ES_CLOUD_ID need to be defined, but not both.\",\n  );\n\nconst esUrl = ES_NODE ? new URL(ES_NODE) : undefined;\nconst isHTTPS = esUrl?.protocol === \"https:\";\nconst isLocalhost = esUrl?.hostname === \"localhost\";\n\nexport const esClient = new Client({\n  ...(ES_NODE ? { node: ES_NODE } : {}),\n  ...(ES_CLOUD_ID ? { cloud: { id: ES_CLOUD_ID } } : {}),\n  ...(ES_CA_FINGERPRINT ? { caFingerprint: ES_CA_FINGERPRINT } : {}),\n  ...(ES_API_KEY\n    ? {\n        auth: {\n          apiKey: ES_API_KEY,\n        },\n      }\n    : {}),\n  ...(!ES_API_KEY && ES_USERNAME && ES_PASSWORD\n    ? {\n        auth: {\n          username: ES_USERNAME,\n          password: ES_PASSWORD,\n        },\n      }\n    : {}),\n  ...(isHTTPS &&\n  isLocalhost &&\n  ES_UNSAFE_TLS_REJECT_UNAUTHORIZED?.toLowerCase() === \"false\"\n    ? {\n        tls: {\n          rejectUnauthorized: false,\n        },\n      }\n    : {}),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing One Component in React for observablehq/framework\nDESCRIPTION: A React component that renders a single child element within a div container. It accepts children as props and applies specific styling through the className property.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/config/one.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function One({children}) {\n  return <div className=\"${One.className}\">{children}</div>;\n}\n\nOne.className = \"observablehq-one\";\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment with uv\nDESCRIPTION: Creates a Python virtual environment using the uv tool, an alternative to standard venv.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nuv venv\n```\n\n----------------------------------------\n\nTITLE: Malformed HTML block\nDESCRIPTION: This HTML snippet demonstrates a simple HTML block with a structure that, while valid, might be considered less than ideal. It shows a div containing another div with content inside.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/malformed-block.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<div>\\n\\n  <div>content</div>\\n\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Output Structure with Extracted ZIP Files\nDESCRIPTION: Shows the output directory structure after building a project with files extracted from a ZIP archive, organized in a directory structure.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n.\n├─ dist\n│  ├─ _file\n│  │  └─ quakes\n│  │     └─ 2021.e5f2eb94.csv\n│  ├─ _observablehq\n│  │  └─ … # additional assets\n│  └─ index.html\n└─ …\n```\n\n----------------------------------------\n\nTITLE: Extracting Coordinates from Location Component\nDESCRIPTION: Destructures the longitude and latitude values from the location component for use in other parts of the application.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst [longitude, latitude] = location;\n```\n\n----------------------------------------\n\nTITLE: Creating Wiki-Style Link in Markdown\nDESCRIPTION: Demonstrates how to create a wiki-style link in Markdown, specifically linking back to an index page. This syntax is commonly used in wikis and some documentation systems to create internal links.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-wikilinks/src/Wiki_Links.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[/index]]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Preview Server\nDESCRIPTION: Command to start the development server for local preview.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Color Input in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic color input with a label and default value using the Inputs.color method.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/color.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst color = view(Inputs.color({label: \"Favorite color\", value: \"#4682b4\"}));\n```\n\n----------------------------------------\n\nTITLE: Formatting Percentages in JavaScript\nDESCRIPTION: A JavaScript function to format percentages with appropriate decimal places for both large and small values.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-rust-to-json/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatPercent(x, {maxDecimals = 5} = {}) {\n  let rv;\n  for (let decimals = 0; decimals <= maxDecimals; decimals++) {\n    const f = d3.format(`.${decimals}%`);\n    const s = f(x);\n    if (s.match(/[1-9]\\.?\\d/)) {\n      rv = s;\n      break;\n    }\n  }\n  if (!rv) return \"0%\";\n  if (rv.startsWith(\"100\") && x < 1) return \"99.9%\";\n  return rv;\n}\n```\n\n----------------------------------------\n\nTITLE: Purging Specific Data Loader Cache\nDESCRIPTION: Shell command to delete a specific data loader's cache, forcing only that loader to run on the next build.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nrm -f src/.observablehq/cache/quakes.csv\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: Activates the Python virtual environment on Windows systems to use locally installed packages.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n.venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Opting Into Search Indexing with YAML Front Matter\nDESCRIPTION: This snippet demonstrates how to include a page in search indexing even if it's not in the sidebar by setting the index property to true in the page's front matter.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/search.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: A page that is not in the sidebar, but gets indexed\nindex: true\n---\n```\n\n----------------------------------------\n\nTITLE: Disabled Textarea Implementation\nDESCRIPTION: Creates a textarea with fixed content that cannot be edited by using the disabled property.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/textarea.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst fixed = view(Inputs.textarea({label: \"Fixed value\", value: \"Can't edit me!\", disabled: true}));\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Version of DuckDB-Wasm\nDESCRIPTION: Demonstrates how to import a specific version of DuckDB-Wasm directly from npm. This approach bypasses Framework's built-in DuckDB version but won't integrate with Framework's extension hosting or SQL code blocks.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/duckdb.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as duckdb from \"npm:@duckdb/duckdb-wasm@1.28.0\";\n```\n\n----------------------------------------\n\nTITLE: Linking External CSS Stylesheets in HTML\nDESCRIPTION: Demonstrates how to include external CSS stylesheet references in HTML using the link tag, including local files and remote URLs.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/files/files.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"custom-styles.css\">\n<link rel=\"stylesheet\" href=\"subsection/additional-styles.css\">\n<link rel=\"stylesheet\" href=\"https://example.com/style.css\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Framework Pages for Iframe Embedding with YAML Front Matter\nDESCRIPTION: YAML front matter configuration to disable Framework's built-in UI elements (sidebar, header, footer, and pager) for pages intended to be embedded in iframes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/embeds.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsidebar: false\nheader: false\nfooter: false\npager: false\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Link with Encoded Space\nDESCRIPTION: Shows how to create a markdown link where the URL contains spaces that are percent-encoded. The link text 'a page with a space' points to a URL where the space is encoded as '%20'.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/space-page/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[a page with a space](a%20space)\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Table with Inputs.table\nDESCRIPTION: Renders the active users data in a tabular format using Inputs.table component.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-analytics/src/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(activeUsers)\n```\n\n----------------------------------------\n\nTITLE: Markdown Text Styling\nDESCRIPTION: Examples of basic text styling in Markdown including bold, italic, strikethrough, and quotes\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nthis is **bold** text\nthis is __bold__ text\nthis is *italic* text\nthis is _italic_ text\nthis is ~~strikethrough~~ text\nthis is `monospaced` text\n> this is quoted text\n```\n\n----------------------------------------\n\nTITLE: FileAttachment failing to fetch non-existent file\nDESCRIPTION: This code snippet attempts to fetch a non-existent file from the current directory using FileAttachment. The intention is to test error handling for missing files. The .text() method is used to asynchronously retrieve the file content as text.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/fetch-parent-dir.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fail3 = FileAttachment(\"./NOENT.md\").text()\n```\n\n----------------------------------------\n\nTITLE: Nested HTML Comments with JavaScript Expression\nDESCRIPTION: An example of nested HTML comments where the inner comment contains a JavaScript expression.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/comment.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- <!-- ${1 + 2} --> -->\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data with FileAttachment in JavaScript\nDESCRIPTION: This JavaScript code loads the CSV data generated by the R script using Observable's FileAttachment API. It specifies the file path and sets the 'typed' option to true for automatic type inference.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-csv/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst penguinKmeans = FileAttachment(\"data/penguin-kmeans.csv\").csv({typed: true});\n```\n\n----------------------------------------\n\nTITLE: Defining a Gallery Component for Displaying Images in JavaScript\nDESCRIPTION: Defines a Gallery function that takes an array of images and returns an HTML element with a grid layout to display the images in a responsive grid with three columns.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/zip.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Gallery(images) {\n  return html`<div style=\"\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 1rem;\n\">${images.map((i) => (i.style = 'width: 100%; height: 100%;', i))}</div>`;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Style Block\nDESCRIPTION: A CSS style block that defines styling for a class 'this' with 'should' selector\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/search-public/page1.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.this:should(be) {\n  ignored: true\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Parquet Data as Table in Observable\nDESCRIPTION: This JavaScript code displays the loaded Parquet data as an interactive table using Observable's Inputs.table function.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nInputs.table(dams)\n```\n\n----------------------------------------\n\nTITLE: Loading Text File with JavaScript FileAttachment\nDESCRIPTION: JavaScript code to load the processed raven.txt file using FileAttachment API and display its contents.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-julia-to-txt/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ravenStanza = FileAttachment(\"data/raven.txt\").text()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nravenStanza\n```\n\n----------------------------------------\n\nTITLE: Using Grid Layout Without Card Styling\nDESCRIPTION: Grids can be used without the card class for layouts that don't require card aesthetics. This example mixes card and non-card elements in a grid.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid grid-cols-2\">\n  <div>Some years ago—never mind how long precisely—having little or no money in my purse, and nothing particular to interest me on shore, I thought I would sail about a little and see the watery part of the world.</div>\n  <div class=\"card\">Call me Ishmael.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Static Documentation Site\nDESCRIPTION: Command to generate the static documentation site in the docs/.observablehq/dist folder.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn docs:build\n```\n\n----------------------------------------\n\nTITLE: Testing DuckDB with Basic SQL Query\nDESCRIPTION: A simple SQL SELECT statement that returns the literal value 1. This is commonly used as a basic test to verify database connectivity and query execution.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/duckdb/index.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT 1;\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data in Observable\nDESCRIPTION: This JavaScript code loads the JSON data generated by the R script using FileAttachment in Observable. It assumes the R script output is saved as 'data/tolstoy.json'.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-json/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst text = FileAttachment(\"data/tolstoy.json\").json();\n```\n\n----------------------------------------\n\nTITLE: Evaluating Mathematical Expression in ObservableHQ\nDESCRIPTION: This code snippet demonstrates the ObservableHQ expression syntax using double dollar signs ($$) to evaluate a mathematical expression. The expression 1 + 2 will be calculated and displayed in the notebook.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/dollar-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$${1 + 2}\n```\n\n----------------------------------------\n\nTITLE: URL and Email Link Formatting Examples\nDESCRIPTION: Examples showing how URLs and email addresses are handled in text. Explicit https:// URLs and mailto: links are recognized as clickable links, while plain domain names and email addresses without proper formatting are not automatically linkified due to disabled fuzzy link detection.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/linkify.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://observablehq.com/ is a link to https://observablehq.com.\n\nmailto:support@observablehq.com is a link too.\n\nObservablehq.com and support@observablehq.com are not links, since by default we disable fuzzy links.\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Search Results\nDESCRIPTION: TypeScript interface that defines the structure of search results in Observable Framework. Each result requires a path, title, and text, with optional keywords for improving search relevance.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/config.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SearchResult {\n  path: string;\n  title: string | null;\n  text: string;\n  keywords?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Editor Component in Observable Framework\nDESCRIPTION: Imports the custom Editor component from a local module file. This component encapsulates the CodeMirror editor functionality for reuse throughout the application.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/codemirror/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Editor} from \"./components/Editor.js\";\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data with Plot\nDESCRIPTION: Creates a line chart visualization of the COVID-19 data using Plot.plot with interactive tooltips and markers.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-google-bigquery/src/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  y: {\n    nice: 2,\n    grid: true,\n    label: \"Confirmed cases\"\n  },\n  marks: [\n    Plot.lineY(covidStats, {\n      x: \"date\",\n      y: \"confirmed_cases\",\n      stroke: \"steelblue\",\n      marker: true,\n      tip: true\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Project Structure Directory Tree\nDESCRIPTION: Directory structure showing the organization of the hotel bookings dashboard project, including configuration files, source files, components, and data.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/hotel-bookings/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── observablehq.config.js\n├── package.json\n└── src\n    ├── components\n    │   ├── bigNumber.js\n    │   └── donutChart.js\n    ├── data\n    │   ├── hotelData.csv\n    └── index.md\n```\n\n----------------------------------------\n\nTITLE: Using React in Markdown with Inline Expressions\nDESCRIPTION: Shows the Markdown syntax for embedding the React-rendered node inside a div using an inline expression.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/jsx.md#2025-04-21_snippet_14\n\nLANGUAGE: md\nCODE:\n```\n<div class=\"card\">\n  <h2>Rendering into an inline expression</h2>\n  ${node}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Pandas Library\nDESCRIPTION: Specifies the exact version of the Pandas data manipulation library required for the project\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-python-to-parquet/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\npandas==2.2.0\n```\n\n----------------------------------------\n\nTITLE: Exporting Numeric Constant in JavaScript\nDESCRIPTION: This snippet exports a single numeric constant with the value of 2. This is a simple JavaScript module export that can be imported by other parts of the application that need to reference this specific number.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/config/sub/two.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default 2;\n```\n\n----------------------------------------\n\nTITLE: Generating Datawrapper Chart Data with Python\nDESCRIPTION: This Python script creates a data loader for generating Datawrapper chart data. It uses the requests library to fetch data from an API and processes it to create a chart-friendly format.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/datawrapper-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport requests\n\n# Fetch data from an API\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\n\n# Process the data for the chart\nchart_data = [\n    ['Category', 'Value'],\n    ['A', data['a']],\n    ['B', data['b']],\n    ['C', data['c']]\n]\n\n# Convert to JSON string\nprint(json.dumps(chart_data))\n```\n\n----------------------------------------\n\nTITLE: Sorted and Unique Checkbox\nDESCRIPTION: Demonstrates sorting and uniqueness options for checkbox inputs.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/checkbox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst bases = view(Inputs.checkbox(\"GATTACA\", {sort: true, unique: true}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Functionality for D3.js Force-Directed Graph\nDESCRIPTION: This helper function implements drag functionality for the force-directed graph. It handles the start, drag, and end events of the drag interaction, updating the simulation accordingly.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/d3.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction drag(simulation) {\n\n  function dragstarted(event) {\n    if (!event.active) simulation.alphaTarget(0.3).restart();\n    event.subject.fx = event.subject.x;\n    event.subject.fy = event.subject.y;\n  }\n\n  function dragged(event) {\n    event.subject.fx = event.x;\n    event.subject.fy = event.y;\n  }\n\n  function dragended(event) {\n    if (!event.active) simulation.alphaTarget(0);\n    event.subject.fx = null;\n    event.subject.fy = null;\n  }\n\n  return d3.drag()\n      .on(\"start\", dragstarted)\n      .on(\"drag\", dragged)\n      .on(\"end\", dragended);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Sorted Unique Radio Selection in JavaScript\nDESCRIPTION: Displays the currently selected character from the base radio input created from the sorted and unique characters of 'GATTACA'.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nbase\n```\n\n----------------------------------------\n\nTITLE: Simple Expression Code Block\nDESCRIPTION: Example of a simple expression code block that works the same in both Observable and Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Radio Input with Custom Format for Map Entries in JavaScript\nDESCRIPTION: Creates a radio input using a Map of coffee sizes with a custom format function that combines both the name and value in the display label.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst size2 = view(\n  Inputs.radio(\n    new Map([\n      [\"Short\", 8],\n      [\"Tall\", 12],\n      [\"Grande\", 16],\n      [\"Venti\", 20]\n    ]),\n    {value: 12, label: \"Size\", format: ([name, value]) => `${name} (${value} oz)`}\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Team Radio Selection in JavaScript\nDESCRIPTION: Displays the currently selected team object from the favorite radio input defined previously.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/radio.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfavorite\n```\n\n----------------------------------------\n\nTITLE: Embedding JPEG Image in HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed the generated JPEG image (data/diamonds.jpeg) into an HTML page using the <img> tag. It sets the maximum width of the image to 500 pixels using inline CSS. The image source is specified as \"data/diamonds.jpeg\".\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-r-to-jpeg/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"data/diamonds.jpeg\" style=\"max-width: 500px;\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Results in JavaScript\nDESCRIPTION: Shows how to display the 'search' variable, which contains the results of the search input.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/search.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsearch\n```\n\n----------------------------------------\n\nTITLE: Configuring markdown-it-wikilinks Plugin in Observable Framework\nDESCRIPTION: This code snippet demonstrates how to register the markdown-it-wikilinks plugin in the Observable Framework configuration file. It enables the use of Wikimedia-style links in Markdown content.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/markdown-it-wikilinks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {defineConfig} from \"@observablehq/framework\";\nimport markdownItWikilinks from \"markdown-it-wikilinks\";\n\nexport default defineConfig({\n  plugins: {\n    markdown: {\n      use: [\n        [markdownItWikilinks, {baseURL: 'https://observablehq.com/@observablehq/', uriSuffix: ''}]\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Plotting California Boundaries with Plot.js\nDESCRIPTION: JavaScript code to visualize California state and county boundaries using Plot library with specific projection settings\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-census/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nPlot.plot({\n  width: 640,\n  height: 720,\n  projection: {\n    type: \"conic-conformal\",\n    parallels: [37 + 4 / 60, 38 + 26 / 60],\n    rotate: [120 + 30 / 60, 0],\n    domain: castate\n  },\n  marks: [\n    Plot.geo(castate),\n    Plot.geo(cacounties, {strokeOpacity: 0.2})\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing context2d function in JavaScript\nDESCRIPTION: A replacement for the removed DOM.context2d method in Framework that creates a 2D canvas context with proper pixel ratio scaling.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction context2d(width, height, dpi = devicePixelRatio) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width * dpi;\n  canvas.height = height * dpi;\n  canvas.style = `width: ${width}px;`;\n  const context = canvas.getContext(\"2d\");\n  context.scale(dpi, dpi);\n  return context;\n}\n```\n\n----------------------------------------\n\nTITLE: Slider Container Element\nDESCRIPTION: HTML container for the jQuery UI slider widget with width constraint.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/jquery-ui.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"max-width: 320px;\" id=\"slider\"></div>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Framework Examples Repository with Git\nDESCRIPTION: This command clones the Observable Framework repository from GitHub, allowing users to run and modify the examples locally. After cloning, users need to navigate to the desired example directory and install dependencies.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:observablehq/framework.git\n```\n\n----------------------------------------\n\nTITLE: Resolving File Path with import.meta\nDESCRIPTION: This code demonstrates how to use import.meta.resolve to get the resolved URL of a text file relative to the current module. This is useful for referencing non-JavaScript resources.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/imports/foo/foo.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.resolve(\"./hello.txt\")\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for GitHub Token\nDESCRIPTION: This snippet shows the format for storing the GitHub personal access token in a .env file. It's used for local development authentication with the GitHub API.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/loader-github/src/index.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGITHUB_TOKEN=\"github_pat_XXX\"\n```\n\n----------------------------------------\n\nTITLE: Including jQuery UI CSS\nDESCRIPTION: Imports the base theme stylesheet for jQuery UI components from npm package.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/jquery-ui.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"npm:jquery-ui/dist/themes/base/jquery-ui.css\">\n```\n\n----------------------------------------\n\nTITLE: Template Literal Special Characters\nDESCRIPTION: Template literal containing escaped special characters: template literal syntax (${}), single quote, double quote and backtick.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/template-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n${`}'\"`}\n```\n\n----------------------------------------\n\nTITLE: Reading a File as a Stream in JavaScript\nDESCRIPTION: Shows how to read a file incrementally as a stream and count its total bytes.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/files.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst stream = await FileAttachment(\"horse.jpg\").stream();\nconst reader = stream.getReader();\nlet total = 0;\n\nwhile (true) {\n  const {done, value} = await reader.read();\n  if (done) break;\n  total += value.length;\n}\n\ndisplay(total);\n```\n\n----------------------------------------\n\nTITLE: Rendering KaTeX Inline Equation in Observable Framework\nDESCRIPTION: Uses the tex template literal to render mathematical equations with KaTeX, demonstrating inline LaTeX rendering for E = mc^2\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/tex-expression.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello, ${tex`\\KaTeX`}\n```\n\nLANGUAGE: markdown\nCODE:\n```\nMy favorite equation is ${tex`E = mc^2`}.\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Markdown Text\nDESCRIPTION: Shows how to embed resolved promise values within markdown text using inline expressions, with the values being automatically awaited.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nThe volcano dataset has ${volcano.values.length.toLocaleString(\"en-US\")} values.\n```\n\n----------------------------------------\n\nTITLE: Setting iframe width reactively in JavaScript\nDESCRIPTION: This JavaScript code sets the iframe's width reactively based on the iframeWidth variable.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/responsive-iframe/src/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\niframe.width = iframeWidth; // set the iframe width reactively\n```\n\n----------------------------------------\n\nTITLE: Creating Cards with Titles and Visualizations\nDESCRIPTION: Cards can contain titles, subtitles, and visualizations. This example shows a card with heading elements and a Plot visualization showing temperature data.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/markdown.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\" style=\"max-width: 640px;\">\n  <h2>It gets hotter during summer</h2>\n  <h3>And months have 28–31 days</h3>\n  ${Plot.cell(weather.slice(-365), {x: (d) => d.date.getUTCDate(), y: (d) => d.date.getUTCMonth(), fill: \"temp_max\", tip: true, inset: 0.5}).plot({marginTop: 0, height: 240, padding: 0})}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multi-line Commented Observable JavaScript Code\nDESCRIPTION: A multi-line comment containing a JavaScript code block with an Observable display function call and extra whitespace.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/comment.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!--\n\n```js\n\ndisplay(1 + 2);\n\n```\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating Arquero Data Table\nDESCRIPTION: Creates an Arquero table with sunshine hours data for different cities.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/lib/arquero.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dt = aq.table({\n  \"Seattle\": [69, 108, 178, 207, 253, 268, 312, 281, 221, 142, 72, 52],\n  \"Chicago\": [135, 136, 187, 215, 281, 311, 318, 283, 226, 193, 113, 106],\n  \"San Francisco\": [165, 182, 251, 281, 314, 330, 300, 272, 267, 243, 189, 156]\n});\n```\n\n----------------------------------------\n\nTITLE: Commenting JavaScript Expression in HTML\nDESCRIPTION: A commented JavaScript expression using template literal syntax, commonly used in Observable Framework.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/comment.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- ${1 + 2} -->\n```\n\n----------------------------------------\n\nTITLE: HTML Image Display\nDESCRIPTION: HTML markup for displaying an image from an archive.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/data-loaders.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"lib/muybridge/deer.jpeg\" width=\"320\" alt=\"A deer\">\n```\n\n----------------------------------------\n\nTITLE: Importing from a Local JavaScript Module\nDESCRIPTION: Shows how to import an export from a local JavaScript file. This example imports the 'foo' constant from a file in the same directory.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/imports.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport {foo} from \"./foo.js\";\n```\n\n----------------------------------------\n\nTITLE: Displaying Click Count in Markdown\nDESCRIPTION: Uses markdown with string interpolation to display a message showing the number of times the button has been clicked.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nYou have clicked ${clicks} times.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Canvas Context for Animation\nDESCRIPTION: Initializes a canvas and its 2D context for drawing. This code sets up the drawing environment with the color style matching the computed style of the canvas element.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/inputs/button.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst canvas = document.querySelector(\"#canvas\");\nconst context = canvas.getContext(\"2d\");\ncontext.fillStyle = getComputedStyle(canvas).color;\n```\n\n----------------------------------------\n\nTITLE: Importing deck.gl Components for 3D Map Visualization in JavaScript\nDESCRIPTION: Imports necessary components from the deck.gl library to create an interactive 3D map visualization of dam locations. The imported components include layers for geographical data and lighting effects for enhanced visual representation.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/us-dams/src/by-state.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport deck from \"npm:deck.gl\";\n\nconst {DeckGL, AmbientLight, GeoJsonLayer, TextLayer, HexagonLayer, LightingEffect, PointLight, ScatterplotLayer} = deck;\n```\n\n----------------------------------------\n\nTITLE: HTML Details Element\nDESCRIPTION: This snippet demonstrates the use of the HTML `<details>` element, which allows content to be collapsed and expanded. The `<summary>` tag provides a clickable title to toggle the visibility of the enclosed content.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/preview/dashboard/code/code.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<details>\n  <summary>Click me</summary>\n  This text is not visible by default.\n</details>\n```\n\n----------------------------------------\n\nTITLE: Creating Fast and Slow Promises\nDESCRIPTION: Creates two promises with different resolution times to demonstrate how code blocks wait for all referenced promises before executing.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/reactivity.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst fast = new Promise((resolve) => setTimeout(() => resolve(\"fast\"), 500));\nconst slow = new Promise((resolve) => setTimeout(() => resolve(\"slow\"), 5000));\n```\n\n----------------------------------------\n\nTITLE: Basic Notebook Conversion Command\nDESCRIPTION: Basic command syntax for converting an Observable notebook using npm run within an existing project.\nSOURCE: https://github.com/observablehq/framework/blob/main/docs/convert.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run observable convert <notebook-url>\n```\n\n----------------------------------------\n\nTITLE: Styling Dashboard Layout\nDESCRIPTION: Defines CSS styles for dashboard layout adjustments, specifically handling overflow and padding.\nSOURCE: https://github.com/observablehq/framework/blob/main/examples/google-analytics/src/index.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.crop {\n  padding-bottom: 0;\n  overflow: hidden;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing sum Function in TypeScript\nDESCRIPTION: Demonstrates importing the sum function from an external module.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/typescript/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {sum} from \"./sum.js\";\n```\n\n----------------------------------------\n\nTITLE: Testing FileAttachment with Non-existent File in Observable\nDESCRIPTION: Demonstrates how to attempt accessing a non-existent file using the FileAttachment API. This code is used to test error handling when requested files are not found.\nSOURCE: https://github.com/observablehq/framework/blob/main/test/input/build/missing-file/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFileAttachment(\"does-not-exist.txt\")\n```"
  }
]