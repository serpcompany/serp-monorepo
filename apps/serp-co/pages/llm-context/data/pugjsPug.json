[
  {
    "owner": "pugjs",
    "repo": "pug",
    "content": "TITLE: Pug JavaScript API Usage\nDESCRIPTION: Example showing how to use Pug's JavaScript API for compiling and rendering templates in Node.js applications with various options.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pug = require('pug');\n\n// compile\nvar fn = pug.compile('string of pug', options);\nvar html = fn(locals);\n\n// render\nvar html = pug.render('string of pug', merge(options, locals));\n\n// renderFile\nvar html = pug.renderFile('filename.pug', merge(options, locals));\n```\n\n----------------------------------------\n\nTITLE: Basic Pug Template Syntax Example\nDESCRIPTION: Example of Pug template syntax showing various features including doctype declaration, attributes, conditional rendering, and multiline text.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: pug\nCODE:\n```\ndoctype html\nhtml(lang=\"en\")\n  head\n    title= pageTitle\n    script(type='text/javascript').\n      if (foo) bar(1 + 5);\n  body\n    h1 Pug - node template engine\n    #container.col\n      if youAreUsingPug\n        p You are amazing\n      else\n        p Get on it!\n      p.\n        Pug is a terse and simple templating language with a\n        strong focus on performance and powerful features.\n```\n\n----------------------------------------\n\nTITLE: Pug Node.js API Usage Examples\nDESCRIPTION: Examples of using Pug's JavaScript API for compiling, rendering templates, and rendering files with options and locals.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar pug = require('pug');\n\n// compile\nvar fn = pug.compile('string of pug', options);\nvar html = fn(locals);\n\n// render\nvar html = pug.render('string of pug', merge(options, locals));\n\n// renderFile\nvar html = pug.renderFile('filename.pug', merge(options, locals));\n```\n\n----------------------------------------\n\nTITLE: Basic Pug Template Syntax Example\nDESCRIPTION: Example demonstrating Pug's clean, whitespace-sensitive syntax for writing HTML templates with variables, conditionals, and multi-line text.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_3\n\nLANGUAGE: pug\nCODE:\n```\ndoctype html\nhtml(lang=\"en\")\n  head\n    title= pageTitle\n    script(type='text/javascript').\n      if (foo) bar(1 + 5)\n  body\n    h1 Pug - node template engine\n    #container.col\n      if youAreUsingPug\n        p You are amazing\n      else\n        p Get on it!\n      p.\n        Pug is a terse and simple templating language with a\n        strong focus on performance and powerful features.\n```\n\n----------------------------------------\n\nTITLE: Compiled HTML Output from Pug Example\nDESCRIPTION: The resulting HTML code after compiling the previous Pug template, showing how Pug's syntax translates to standard HTML.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Pug</title>\n    <script type=\"text/javascript\">\n      if (foo) bar(1 + 5)\n    </script>\n  </head>\n  <body>\n    <h1>Pug - node template engine</h1>\n    <div id=\"container\" class=\"col\">\n      <p>You are amazing</p>\n      <p>Pug is a terse and simple templating language with a strong focus on performance and powerful features.</p>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Pug Template Example\nDESCRIPTION: HTML output generated by Pug when processing the example template. Shows how Pug's concise syntax transforms into standard HTML.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Pug</title>\n    <script type=\"text/javascript\">\n      if (foo) bar(1 + 5);\n    </script>\n  </head>\n  <body>\n    <h1>Pug - node template engine</h1>\n    <div id=\"container\" class=\"col\">\n      <p>You are amazing</p>\n      <p>\n        Pug is a terse and simple templating language with a strong focus on\n        performance and powerful features.\n      </p>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generating JavaScript Function from Pug AST\nDESCRIPTION: This example demonstrates how to use pug-code-gen along with other Pug-related modules to generate a JavaScript function from a Pug template string. It shows the process of lexing, parsing, and code generation.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-code-gen/README.md#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\nvar wrap = require('pug-runtime/wrap');\nvar generateCode = require('pug-code-gen');\n\nvar funcStr = generateCode(parse(lex('p Hello world!')), {\n  compileDebug: false,\n  pretty: true,\n  inlineRuntimeFunctions: false,\n  templateName: 'helloWorld'\n});\n//=> 'function helloWorld(locals) { ... }'\n\nvar func = wrap(funcStr, 'helloWorld');\nfunc();\n//=> '\\n<p>Hello world!</p>'\n```\n\n----------------------------------------\n\nTITLE: Parsing Pug Tokens to AST in JavaScript\nDESCRIPTION: Shows how to use the pug-parser along with pug-lexer to convert Pug source code into an abstract syntax tree. It includes setting up the filename and source, lexing the source, and then parsing the tokens.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-parser/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar lex = require('pug-lexer');\n\nvar filename = 'my-file.pug';\nvar src = 'div(data-foo=\"bar\")';\nvar tokens = lex(src, {filename});\n\nvar ast = parse(tokens, {filename, src});\n\nconsole.log(JSON.stringify(ast, null, '  '))\n```\n\n----------------------------------------\n\nTITLE: Using pug-lexer to convert Pug string to tokens\nDESCRIPTION: Example of converting a Pug template string to an array of tokens using the lex function with a filename option.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-lexer/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify(lex('div(data-foo=\"bar\")', {filename: 'my-file.pug'}), null, '  '))\n```\n\n----------------------------------------\n\nTITLE: Using pug-strip-comments to Remove Comments from Pug Tokens in JavaScript\nDESCRIPTION: This example demonstrates how to use pug-strip-comments to process Pug token streams. It shows different configuration options for stripping buffered or unbuffered comments from Pug tokens, with example output for each configuration.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-strip-comments/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar lex = require('pug-lexer');\nvar stripComments = require('pug-strip-comments');\n\nvar tokens = lex('//- unbuffered\\n// buffered');\n// [ { type: 'comment', line: 1, val: ' unbuffered', buffer: false },\n//   { type: 'newline', line: 2 },\n//   { type: 'comment', line: 2, val: ' buffered', buffer: true },\n//   { type: 'eos', line: 2 } ]\n\n// Only strip unbuffered comments (default)\nstripComments(tokens, { filename: 'pug' });\n// [ { type: 'newline', line: 2 },\n//   { type: 'comment', line: 2, val: ' buffered', buffer: true },\n//   { type: 'eos', line: 2 } ]\n\n// Only strip buffered comments (when you want to play a joke on your coworkers)\nstripComments(tokens, { filename: 'pug', stripUnbuffered: false, stripBuffered: true });\n// [ { type: 'comment', line: 1, val: ' unbuffered', buffer: false },\n//   { type: 'newline', line: 2 },\n//   { type: 'eos', line: 2 } ]\n\n// Strip both (if you want Pug VERY clean)\nstripComments(tokens, { filename: 'pug', stripBuffered: true });\n// [ { type: 'newline', line: 2 },\n//   { type: 'eos', line: 2 } ]\n```\n\n----------------------------------------\n\nTITLE: Converting Strong Tags to Text in Pug AST using JavaScript\nDESCRIPTION: Shows how to use pug-walk to convert all simple <strong> elements to text in a Pug AST. It demonstrates node replacement and conditional transformations.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-walk/README.md#2025-04-12_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar source = 'p abc #[strong NO]\\nstrong on its own line';\nvar dest = 'p abc #[| NO]\\n| on its own line';\n\nvar ast = parse(lex(source));\n\nast = walk(ast, function before(node, replace) {\n  // Find all <strong> tags\n  if (node.type === 'Tag' && node.name === 'strong') {\n    var children = node.block.nodes;\n\n    // Make sure that the Tag only has one child -- the text\n    if (children.length === 1 && children[0].type === 'Text') {\n      // Replace the Tag with the Text\n      replace({ type: 'Text', val: children[0].val, line: node.line });\n    }\n  }\n}, {\n  includeDependencies: true\n});\n\nassert.deepEqual(parse(lex(dest)), ast);\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Blocks in Pug AST using JavaScript\nDESCRIPTION: Demonstrates how to use pug-walk to flatten nested blocks in a Pug AST. It uses the 'after' handler to process innermost blocks first and shows how to replace nodes with arrays.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-walk/README.md#2025-04-12_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ast = {\n  type: 'Block',\n  nodes: [\n    { type: 'Text', val: 'a' },\n    {\n      type: 'Block',\n      nodes: [\n        { type: 'Text', val: 'b' },\n        {\n          type: 'Block',\n          nodes: [ { type: 'Text', val: 'c' } ]\n        },\n        { type: 'Text', val: 'd' }\n      ]\n    },\n    { type: 'Text', val: 'e' }\n  ]\n};\n\nvar dest = {\n  type: 'Block',\n  nodes: [\n    { type: 'Text', val: 'a' },\n    { type: 'Text', val: 'b' },\n    { type: 'Text', val: 'c' },\n    { type: 'Text', val: 'd' },\n    { type: 'Text', val: 'e' }\n  ]\n};\n\nast = walk(ast, null, function after(node, replace) {\n  if (node.type === 'Block' && replace.arrayAllowed) {\n    // Replace the block with its contents\n    replace(node.nodes);\n  }\n});\n\nassert.deepEqual(dest, ast);\n```\n\n----------------------------------------\n\nTITLE: Using pug-load.string for simplified loading in JavaScript\nDESCRIPTION: This example shows how to use the pug-load.string method for a more concise way of loading and parsing Pug files. It still includes a custom resolve function.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-load/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('fs');\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\nvar load = require('pug-load');\n\nvar str = fs.readFileSync('bar.pug', 'utf8');\nvar ast = load.string(str, 'bar.pug', {\n  lex: lex,\n  parse: parse,\n  resolve: function (filename, source, options) {\n    console.log('\"' + filename + '\" file requested from \"' + source + '\".');\n    return load.resolve(filename, source, options);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using pug-load.file for one-step loading in JavaScript\nDESCRIPTION: This example demonstrates the use of pug-load.file method, which simplifies the process to a single step. It reads the file, lexes, parses, and loads dependencies in one function call.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-load/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\nvar load = require('pug-load');\n\nvar ast = load.file('bar.pug', {\n  lex: lex,\n  parse: parse,\n  resolve: function (filename, source, options) {\n    console.log('\"' + filename + '\" file requested from \"' + source + '\".');\n    return load.resolve(filename, source, options);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using compileAttrs Function with Examples in HTML and Object Format\nDESCRIPTION: Demonstrates complete usage of compileAttrs function with sample attribute data. Shows how to compile attributes in both HTML format and object format, then execute the generated code with runtime functions.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-attrs/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar compileAttrs = require('pug-attrs');\nvar pugRuntime = require('pug-runtime');\n\nfunction getBaz () { return 'baz<>'; }\n\nvar attrs = [\n  {name: 'foo',  val: '\"bar\"',    mustEscape: true },\n  {name: 'baz',  val: 'getBaz()', mustEscape: true },\n  {name: 'quux', val: true,       mustEscape: false}\n];\nvar result, finalResult;\n\n// HTML MODE\nresult = compileAttrs(attrs, {\n  terse:   true,\n  format:  'html',\n  runtime: function (name) { return 'pugRuntime.' + name; }\n});\n//=> '\" foo=\\\"bar\\\"\" + pugRuntime.attr(\"baz\", getBaz(), true, true) + \" quux\"'\n\nfinalResult = Function('pugRuntime, getBaz',\n  'return (' + result + ');'\n);\nfinalResult(pugRuntime, getBaz);\n// => ' foo=\"bar\" baz=\"baz&lt;&gt;\" quux'\n\n// OBJECT MODE\nresult = compileAttrs(attrs, {\n  terse:   true,\n  format:  'object',\n  runtime: function (name) { return 'pugRuntime.' + name; }\n});\n//=> '{\"foo\": \"bar\",\"baz\": pugRuntime.escape(getBaz()),\"quux\": true}'\n\nfinalResult = Function('pugRuntime, getBaz',\n  'return (' + result + ');'\n);\nfinalResult(pugRuntime, getBaz);\n//=> { foo: 'bar', baz: 'baz&lt;&gt;', quux: true }\n```\n\n----------------------------------------\n\nTITLE: Testing Browser-Compiled Code in Node.js\nDESCRIPTION: Illustrates how to test Pug templates compiled for browser usage in a Node.js environment using pug-runtime/wrap. Shows compilation with external runtime and template function wrapping.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-runtime/README.md#2025-04-12_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar pug = require('pug');\nvar wrap = require('pug-runtime/wrap');\n\nvar pugSrc = 'p= content';\n// By default compileClient automatically embeds the needed runtime functions,\n// rendering this module useless.\nvar compiledCode = pug.compileClient(pugSrc, {\n  externalRuntime: true\n});\n//=> 'function template (locals) { ... pug.escape() ... }'\n\nvar templateFunc = wrap(compiledCode);\ntemplateFunc({content: 'Hey!'});\n//=> '<p>Hey!</p>'\n\n// Change template function name to 'heyTemplate'\ncompiledCode = pug.compileClient(pugSrc, {\n  externalRuntime: true,\n  name: 'heyTemplate'\n});\n//=> 'function heyTemplate (locals) { ... }'\n\ntemplateFunc = wrap(compiledCode, 'heyTemplate');\ntemplateFunc({content: 'Hey!'});\n//=> '<p>Hey!</p>'\n```\n\n----------------------------------------\n\nTITLE: Building Runtime Functions for Browser Usage\nDESCRIPTION: Shows how to build a string containing runtime functions that can be used in browser environments. Demonstrates creating a standalone attr function.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-runtime/README.md#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar build = require('pug-runtime/build');\nvar src = build(['attr']);\n\nvar attr = Function('', src + ';return pug_attr;')();\nassert(attr('foo', 'bar', true, true) === ' foo=\"bar\"');\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Methods Directly in JavaScript\nDESCRIPTION: Demonstrates how to use runtime methods directly by importing the pug-runtime module. Shows example of using the attr() method to generate HTML attributes.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-runtime/README.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar runtime = require('pug-runtime');\n\nassert(runtime.attr('foo', 'bar', true, true) === ' foo=\"bar\"');\n```\n\n----------------------------------------\n\nTITLE: Creating a Pug Error Object Example\nDESCRIPTION: Demonstrates how to create and use a Pug error object with code, message, and additional options including line number, filename, and source code for context display.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-error/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar error = require('pug-error');\n\nvar err = error('MY_CODE', 'My message', {line: 3, filename: 'myfile', src: 'foo\\nbar\\nbaz\\nbash\\nbing'});\n// { code: 'PUG:MY_CODE',\n//   msg: 'My message',\n//   line: 3,\n//   column: undefined,\n//   filename: 'myfile',\n//   src: 'foo\\nbar\\nbaz\\nbash\\nbing',\n//   message: 'myfile:3\\n    1| foo\\n    2| bar\\n  > 3| baz\\n    4| bash\\n    5| bing\\n\\nMy message' }\n\nthrow err;\n```\n\n----------------------------------------\n\nTITLE: Changing Text Node Content in Pug AST using JavaScript\nDESCRIPTION: Illustrates how to use pug-walk to modify the content of all Text nodes in a Pug AST. It uses pug-lexer and pug-parser to generate the initial AST.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-walk/README.md#2025-04-12_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\n\nvar source = '.my-class foo';\nvar dest = '.my-class bar';\n\nvar ast = parse(lex(source));\n\nast = walk(ast, function before(node, replace) {\n  if (node.type === 'Text') {\n    node.val = 'bar';\n\n    // Alternatively, you can replace the entire node\n    // rather than just the text.\n    // replace({ type: 'Text', val: 'bar', line: node.line });\n  }\n}, {\n  includeDependencies: true\n});\n\nassert.deepEqual(parse(lex(dest)), ast);\n```\n\n----------------------------------------\n\nTITLE: Using pug-load with manual file reading and parsing in JavaScript\nDESCRIPTION: This example demonstrates how to use pug-load with manual file reading, lexing, and parsing. It includes a custom resolve function to log file requests.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-load/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar fs = require('fs');\nvar lex = require('pug-lexer');\nvar parse = require('pug-parser');\nvar load = require('pug-load');\n\nvar str = fs.readFileSync('bar.pug', 'utf8');\nvar ast = load(parse(lex(str, 'bar.pug'), 'bar.pug'), {\n  lex: lex,\n  parse: parse,\n  resolve: function (filename, source, options) {\n    console.log('\"' + filename + '\" file requested from \"' + source + '\".');\n    return load.resolve(filename, source, options);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using pug-linker in JavaScript\nDESCRIPTION: A simple example showing how to import and use the pug-linker module to flatten the Pug AST for inclusion and inheritance. This module links the AST together without reading the file system to resolve and parse included and extended files.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-linker/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar link = require('pug-linker');\n```\n\n----------------------------------------\n\nTITLE: Compiling Pug Templates for Client-Side Use\nDESCRIPTION: Command line instruction to pre-compile Pug templates to JavaScript for use in the browser, with client-side rendering enabled and debug mode disabled.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pug --client --no-debug filename.pug\n```\n\n----------------------------------------\n\nTITLE: Compiling Pug for Client-Side Use with CLI\nDESCRIPTION: Command to compile a Pug template to JavaScript for client-side use without debugging information.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pug --client --no-debug filename.pug\n```\n\n----------------------------------------\n\nTITLE: Example AST Output in JSON\nDESCRIPTION: Provides an example of the JSON output representing the abstract syntax tree generated by parsing a simple Pug template with a div tag and a data attribute.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-parser/README.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"Block\",\n  \"nodes\": [\n    {\n      \"type\": \"Tag\",\n      \"name\": \"div\",\n      \"selfClosing\": false,\n      \"block\": {\n        \"type\": \"Block\",\n        \"nodes\": [],\n        \"line\": 1,\n        \"filename\": \"my-file.pug\"\n      },\n      \"attrs\": [\n        {\n          \"name\": \"data-foo\",\n          \"val\": \"\\\"bar\\\"\",\n          \"line\": 1,\n          \"column\": 5,\n          \"filename\": \"my-file.pug\",\n          \"mustEscape\": true\n        }\n      ],\n      \"attributeBlocks\": [],\n      \"isInline\": false,\n      \"line\": 1,\n      \"column\": 1,\n      \"filename\": \"my-file.pug\"\n    }\n  ],\n  \"line\": 0,\n  \"filename\": \"my-file.pug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example output of pug-lexer tokenization\nDESCRIPTION: JSON representation of the token array generated by the lexer from a simple Pug div element with attributes.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-lexer/README.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"tag\",\n    \"line\": 1,\n    \"val\": \"div\",\n    \"selfClosing\": false\n  },\n  {\n    \"type\": \"attrs\",\n    \"line\": 1,\n    \"attrs\": [\n      {\n        \"name\": \"data-foo\",\n        \"val\": \"\\\"bar\\\"\",\n        \"escaped\": true\n      }\n    ]\n  },\n  {\n    \"type\": \"eos\",\n    \"line\": 1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Pug Package via npm\nDESCRIPTION: Command to install the Pug package using npm for use in Node.js applications.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pug\n```\n\n----------------------------------------\n\nTITLE: Installing Pug as Package Dependency in Node.js\nDESCRIPTION: Command to install Pug as a dependency in a Node.js project using npm.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pug\n```\n\n----------------------------------------\n\nTITLE: Installing Pug Command Line Tool\nDESCRIPTION: Command to install the Pug CLI tool globally to use Pug from the command line.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pug-cli -g\n```\n\n----------------------------------------\n\nTITLE: Installing Pug Command Line Interface Globally\nDESCRIPTION: Command to install the Pug CLI globally to use Pug from the command line.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pug-cli -g\n```\n\n----------------------------------------\n\nTITLE: Running Pug CLI Help Command\nDESCRIPTION: Command to display help information for the Pug command line interface.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pug --help\n```\n\n----------------------------------------\n\nTITLE: Running Pug CLI with Help Flag\nDESCRIPTION: Command to display help information for the Pug command-line interface.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pug --help\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Pug.js Testing\nDESCRIPTION: Command to install all required npm dependencies before running tests. Must be run as the first step.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/test/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Pug.js Test Suite\nDESCRIPTION: Command to execute the test suite after dependencies are installed. Runs all tests in the Pug.js project.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/test/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Executing Pug Example with Node.js\nDESCRIPTION: This command demonstrates how to run a Pug example file named 'attributes.js' using Node.js from the command line.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/examples/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode attributes.js\n```\n\n----------------------------------------\n\nTITLE: Importing Pug Parser in JavaScript\nDESCRIPTION: Demonstrates how to require and use the pug-parser module in a JavaScript file.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-parser/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar parse = require('pug-parser');\n```\n\n----------------------------------------\n\nTITLE: Importing pug-lexer in JavaScript\nDESCRIPTION: Basic import of the pug-lexer module in a JavaScript application.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-lexer/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar lex = require('pug-lexer');\n```\n\n----------------------------------------\n\nTITLE: Importing Pug Error Module in JavaScript\nDESCRIPTION: Shows how to import the pug-error module into a JavaScript application.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-error/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar error = require('pug-error');\n```\n\n----------------------------------------\n\nTITLE: Importing pug-filters Module in JavaScript\nDESCRIPTION: This snippet shows how to import the pug-filters module in a JavaScript file. It demonstrates the basic setup required to use the module in a project.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-filters/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar filters = require('pug-filters');\n```\n\n----------------------------------------\n\nTITLE: Importing pug-attrs Module in JavaScript\nDESCRIPTION: Shows how to require the pug-attrs module in a JavaScript application.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-attrs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar compileAttrs = require('pug-attrs');\n```\n\n----------------------------------------\n\nTITLE: Importing pug-load module in JavaScript\nDESCRIPTION: This snippet shows how to require the pug-load module in a JavaScript file.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-load/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar load = require('pug-load');\n```\n\n----------------------------------------\n\nTITLE: Importing pug-code-gen in JavaScript\nDESCRIPTION: This snippet shows how to import the pug-code-gen module in a JavaScript file.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-code-gen/README.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar generateCode = require('pug-code-gen');\n```\n\n----------------------------------------\n\nTITLE: Importing pug-walk Module in JavaScript\nDESCRIPTION: Demonstrates how to require the pug-walk module in a JavaScript file.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug-walk/README.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar walk = require('pug-walk');\n```\n\n----------------------------------------\n\nTITLE: Displaying Backer Links and Avatars in HTML\nDESCRIPTION: HTML code for displaying a grid of backer avatars with links to their websites. Each backer is represented by their avatar image from OpenCollective with a clickable link to their website.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/pug/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/pug/backer/0/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsor Links and Avatars in HTML\nDESCRIPTION: HTML code for displaying a grid of sponsor avatars with links to their websites. Each sponsor is represented by their avatar image from OpenCollective with a clickable link to their website.\nSOURCE: https://github.com/pugjs/pug/blob/master/README.md#2025-04-12_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/pug/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/pug/sponsor/0/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Heading with ID\nDESCRIPTION: Demonstrates how to create an HTML heading (h1) element with a custom ID attribute 'myHeader'. The heading displays the text 'Hello World!'.\nSOURCE: https://github.com/pugjs/pug/blob/master/packages/pug/test/markdown-it/comment.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1 id=\"myHeader\">Hello World!</h1>\n```"
  }
]