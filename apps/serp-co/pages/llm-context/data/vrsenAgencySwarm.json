[
  {
    "owner": "vrsen",
    "repo": "agency-swarm",
    "content": "TITLE: Creating Multi-Agent Agency in Python\nDESCRIPTION: Example demonstrating how to create an agency with three agents (CEO, Developer, and Virtual Assistant) and define their communication patterns. The code shows agent initialization and setting up the agency hierarchy with specific communication permissions between agents.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\nfrom .ceo import CEO\nfrom .developer import Developer\nfrom .virtual_assistant import VirtualAssistant\n\nceo = CEO()\ndev = Developer()\nva = VirtualAssistant()\n\nagency = Agency([\n    ceo, dev  # CEO and Developer will be the entry point for communication with the user\n    [ceo, dev],  # CEO can initiate communication with Developer\n    [ceo, va],   # CEO can initiate communication with Virtual Assistant\n    [dev, va]    # Developer can initiate communication with Virtual Assistant\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Agency Communication Flows\nDESCRIPTION: Demonstrates how to establish an Agency with defined communication paths between agents, specifying which agents can initiate communication with others and setting agency-wide parameters.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\n# if importing from local files\nfrom Developer import Developer\nfrom VirtualAssistant import VirtualAssistant\n\ndev = Developer()\nva = VirtualAssistant()\n\nagency = Agency([\n        ceo,  # CEO will be the entry point for communication with the user\n        [ceo, dev],  # CEO can initiate communication with Developer\n        [ceo, va],   # CEO can initiate communication with Virtual Assistant\n        [dev, va]    # Developer can initiate communication with Virtual Assistant\n    ],\n    shared_instructions='agency_manifesto.md', # shared instructions for all agents\n    temperature=0.3, # default temperature for all agents\n    max_prompt_tokens=25000 # default max tokens in conversation history\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Role in Python\nDESCRIPTION: Shows how to create an agent role by extending the Agent class from the Agency Swarm framework, including initialization parameters and file paths.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nclass Developer(Agent):\n    def __init__(self):\n        super().__init__(\n            name=\"Developer\",\n            description=\"Responsible for executing tasks.\",\n            instructions=\"./instructions.md\",\n            files_folder=\"./files\",\n            schemas_folder=\"./schemas\",\n            tools_folder=\"./tools\",\n            temperature=0.3,\n            max_prompt_tokens=25000,\n            examples=[]\n        )\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Agency Communication Flow in Python\nDESCRIPTION: Demonstrates how to set up a basic communication flow between a CEO, Developer, and Virtual Assistant agents. The CEO can communicate with both Developer and VA, while Developer can communicate with VA.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/communication-flows.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\n\nagency = Agency([\n    ceo, dev  # CEO and Developer will be the entry point for communication with the user\n    [ceo, dev],  # CEO can initiate communication with Developer\n    [ceo, va],   # CEO can initiate communication with Virtual Assistant\n    [dev, va]    # Developer can initiate communication with Virtual Assistant\n])\n```\n\n----------------------------------------\n\nTITLE: Running Agency Demo in Terminal with Agency Swarm\nDESCRIPTION: This code snippet demonstrates how to run the agency directly from the terminal using the run_demo method. It provides a quick way for debugging and testing the agency.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/running-agency.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nagency.run_demo()\n```\n\n----------------------------------------\n\nTITLE: Creating Agency in Python\nDESCRIPTION: Demonstrates how to import agents and initialize the Agency class in the Agency Swarm framework, including defining communication relationships between agents.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\nfrom .Developer import Developer\nfrom .CEO import CEO\n\ndeveloper = Developer()\nceo = CEO()\n\nagency = Agency(\n    [\n        ceo,  # CEO will be the entry point for communication with the user\n        [ceo, developer],  # CEO can initiate communication with Developer\n    ],\n    shared_instructions='./agency_manifesto.md'  # shared instructions for all agents\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Tool to an Agent\nDESCRIPTION: Shows how to integrate a custom tool with an Agent by adding it to the agent's tools list, enabling the agent to use the tool's functionality.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\nfrom .tools.calculator import Calculator\n\nagent = Agent(\n    name=\"MathAgent\",\n    tools=[Calculator],\n    # Other agent parameters\n)\n```\n\n----------------------------------------\n\nTITLE: Running Agency Swarm in Different Modes\nDESCRIPTION: Shows three ways to run Agency Swarm: with a Gradio web interface, in terminal demo mode, or as a backend service returning completion outputs.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagency.demo_gradio(height=900)\n```\n\nLANGUAGE: python\nCODE:\n```\nagency.run_demo()\n```\n\nLANGUAGE: python\nCODE:\n```\ncompletion_output = agency.get_completion(\"Please create a new website for our client.\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Agent Class in Agency Swarm\nDESCRIPTION: Template for creating a custom agent class that inherits from the Agent base class in Agency Swarm. This shows how to initialize an agent with various parameters including name, description, instructions file path, and tool configurations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nclass AgentName(Agent):\n    def __init__(self):\n        super().__init__(\n            name=\"agent_name\",\n            description=\"agent_description\",\n            instructions=\"./instructions.md\",\n            files_folder=\"./files\",\n            schemas_folder=\"./schemas\",\n            tools_folder=\"./tools\",\n            tools=[],\n            temperature=0.3,\n            max_prompt_tokens=25000,\n            examples=[]\n        )\n```\n\n----------------------------------------\n\nTITLE: Agent Creation Process Instructions in Markdown\nDESCRIPTION: Detailed markdown instructions for the AgentCreator agent detailing the process of creating new agents, including steps for reading manifestos, importing existing agents, creating new agent templates, and coordinating with the ToolCreator agent.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/agency_swarm/agency/genesis/AgentCreator/instructions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AgentCreator Agent Instructions\n\nYou are an agent that creates other agents as instructed by the user.\n\nThe user will communicate to you each agent that needs to be created. Below are your instructions that needs to be followed for each agent communicated by the user.\n\n**Primary Instructions:**\n1. First, read the manifesto using `ReadManifesto` tool if you have not already done so. This file contains the agency manifesto that describes the agency's purpose and goals.\n2. If a similar agent to the requested one is accessible through the `ImportAgent` tool, import this agent and inform the user that the agent has been created. Skip the following steps.\n3. If not, create a new agent using `CreateAgentTemplate` tool.\n4. Tell the `ToolCreator` agent to create tools or APIs for this agent. Make sure to also communicate the agent description, name and a summary of the processes that it needs to perform. CEO Agents do not need to utilize any tools, so you can skip this and the following steps.\n5. If there are no issues and tools have been successfully created, notify the user that the agent has been created. Otherwise, try to resolve any issues with the tool creator before reporting back to the user.\n6. Repeat this process for each agent that needs to be created, as instructed by the user.\n```\n\n----------------------------------------\n\nTITLE: Implementing ToolConfig in a Custom Tool Class in Python\nDESCRIPTION: This example demonstrates how to add a ToolConfig class to a custom tool in Agency Swarm. The configuration sets parameters for concurrent execution control, input validation strictness, asynchronous execution mode, and output handling.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomTool(BaseTool):\n    # ...\n\n    class ToolConfig:\n        one_call_at_a_time = True\n        strict = False\n        async_mode = \"threading\"\n        output_as_result = True\n\n    def run(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Running Agency Demo in Terminal Mode in Python\nDESCRIPTION: Method to start the agency in terminal mode for demonstration purposes. This provides a command-line interface for interacting with the agency's agents for testing and exploration.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef run_demo(self):\n    \"\"\"\n    Start the agency in terminal mode for demonstration.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing the Agency Class in Python\nDESCRIPTION: The Agency class constructor that manages a collection of agents and facilitates their communication. It accepts parameters for defining agent hierarchies, shared instructions, async processing modes, and various configuration options.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\n\nclass Agency:\n    def __init__(self,\n                 agency_chart: List,\n                 shared_instructions: str = \"\",\n                 shared_files: Union[str, List[str]] = None,\n                 async_mode: Literal['threading', \"tools_threading\"] = None,\n                 settings_path: str = \"./settings.json\",\n                 settings_callbacks: SettingsCallbacks = None,\n                 threads_callbacks: ThreadsCallbacks = None,\n                 temperature: float = 0.3,\n                 top_p: float = 1.0,\n                 max_prompt_tokens: int = None,\n                 max_completion_tokens: int = None,\n                 truncation_strategy: dict = None):\n        \"\"\"\n        Initialize an Agency instance.\n\n        Parameters:\n            agency_chart: List defining the hierarchy and interaction of agents\n            shared_instructions: Path to shared instructions markdown file\n            shared_files: Path(s) to folder(s) containing shared files\n            async_mode: 'threading' or 'tools_threading' for async processing\n            settings_path: Path to JSON file for storing agent settings\n            settings_callbacks: Dict with 'load' and 'save' functions for settings\n            threads_callbacks: Dict with 'load' and 'save' functions for threads\n            temperature: Default temperature for all agents\n            top_p: Default top_p value for all agents\n            max_prompt_tokens: Default max tokens for prompts\n            max_completion_tokens: Default max tokens for completions\n            truncation_strategy: Default truncation strategy for agents\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Collection Agency with Multiple Agents\nDESCRIPTION: Creates an agency with a Report Manager and a Browsing Agent in a hierarchical structure. Includes shared instructions for all agents about their data collection mission, autonomy, and goal to compile comprehensive reports.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency(\n    [report_manager, [report_manager, browsing_agent]],\n    shared_instructions=\"You are a part of a data collection agency with the goal to find the most relevant information about people on the web. Your core value is autonomy and you are free to use any means necessary to achieve your goal. You do not stop until you have found the information you need or you have exhausted all possible means. You always to to compile a comprehensive report with as much information from the web pages as possible.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Tools from OpenAPI Schema in Python\nDESCRIPTION: Static method that generates tool classes from an OpenAPI specification, where each endpoint becomes a separate tool. Supports headers for authentication and optional parameters for all requests.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef from_openapi_schema(\n    schema: Union[str, dict],\n    headers: Dict[str, str] = None,\n    params: Dict[str, Any] = None,\n    strict: bool = False\n) -> List[Type[BaseTool]]:\n    \"\"\"\n    Create tools from an OpenAPI specification. Each endpoint becomes a separate tool.\n\n    Parameters:\n        schema: OpenAPI schema as string or dict\n        headers: Optional request headers (e.g., authentication)\n        params: Optional query parameters to include in all requests\n        strict: Enable strict schema validation\n\n    Returns:\n        List of generated tool classes\n\n    Example:\n        # Create tools from a Swagger/OpenAPI spec\n        schema = '''\n        {\n          \"openapi\": \"3.0.0\",\n          \"paths\": {\n            \"/search\": {\n              \"get\": {\n                \"operationId\": \"search\",\n                \"parameters\": [\n                  {\n                    \"name\": \"q\",\n                    \"in\": \"query\",\n                    \"required\": true,\n                    \"schema\": {\"type\": \"string\"}\n                  }\n                ]\n              }\n            }\n          }\n        }\n        '''\n        tools = ToolFactory.from_openapi_schema(\n            schema,\n            headers={\"Authorization\": \"Bearer token\"}\n        )\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Roles in Agency Swarm\nDESCRIPTION: Example of creating an agent with specific role, description, instructions, and tools. This demonstrates how to define a CEO agent with custom parameters.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nceo = Agent(\n    name=\"CEO\",\n    description=\"Responsible for client communication, task planning and management.\",\n    instructions=\"You must converse with other agents to ensure complete task execution.\", # can be a file like ./instructions.md\n    files_folder=\"./files\", # files to be uploaded to OpenAI\n    schemas_folder=\"./schemas\", # OpenAPI schemas to be converted into tools\n    tools=[MyCustomTool],\n    temperature=0.3, # temperature for the agent\n    max_prompt_tokens=25000, # max tokens in conversation history\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bidirectional Agent Communication in Python\nDESCRIPTION: Shows how to enable bidirectional communication between agents by adding the reverse communication flow to the agency chart. This example allows the Developer to initiate communication with the CEO.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/communication-flows.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency([\n    ceo, dev, [dev, ceo]  # Developer can initiate communication with the CEO\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing the Agent Class in Python\nDESCRIPTION: The Agent class constructor that represents an AI assistant with specific capabilities. It accepts parameters for identity, instructions, tools, and configuration options to customize the agent's behavior and capabilities.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nclass Agent:\n    def __init__(self,\n                 name: str = None,\n                 description: str = None,\n                 instructions: str = \"\",\n                 tools: list = None,\n                 temperature: float = None,\n                 model: str = \"gpt-4-0125-preview\",\n                 files_folder: Union[List[str], str] = None):\n        \"\"\"\n        Initialize an Agent instance.\n\n        Parameters:\n            name: The agent's name (defaults to class name if not provided)\n            description: Brief description of the agent's role\n            instructions: Path to markdown file containing agent instructions\n            tools: List of tool classes available to the agent\n            temperature: Controls randomness in responses (0-1)\n            model: OpenAI model to use (defaults to GPT-4)\n            files_folder: Path(s) to folder(s) containing files for the agent\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting Completions from Agency in Python\nDESCRIPTION: Method to get a completion from the agency for a given message. It allows specifying the recipient agent, attaching files, and other parameters to control the response generation process.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_completion(self,\n                  message: str,\n                  message_files: List[str] = None,\n                  yield_messages: bool = False,\n                  recipient_agent: Agent = None,\n                  additional_instructions: str = None,\n                  attachments: List[dict] = None,\n                  tool_choice: dict = None,\n                  verbose: bool = False,\n                  response_format: dict = None):\n    \"\"\"\n    Get a completion from the agency for a given message.\n\n    Parameters:\n        message: The input message or prompt\n        message_files: List of file IDs to attach\n        yield_messages: Whether to yield intermediate messages\n        recipient_agent: Specific agent to send message to\n        additional_instructions: Extra context for the agent\n        attachments: List of file attachments in OpenAI format\n        tool_choice: Specific tool for the agent to use\n        verbose: Whether to print intermediate messages\n        response_format: Format specification for the response\n\n    Returns:\n        Either a generator of messages or the final response\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Agency with Open-Source Model Agents\nDESCRIPTION: Sets up an Agency with agents using open-source models, ensuring all manager agents support function calling capabilities.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\n\nagency = Agency([ceo])\n```\n\n----------------------------------------\n\nTITLE: Getting Agency Completion in Python with Agency Swarm\nDESCRIPTION: This snippet shows how to get a direct response from the agency using the get_completion method. It allows for custom messages, additional instructions, tool choices, attachments, and specifying a recipient agent.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/running-agency.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = agency.get_completion(\"I want you to build me a website\",\n                                 additional_instructions=\"This is an additional instruction for the task.\",\n                                 tool_choice={\"type\": \"function\", \"function\": {\"name\": \"SendMessage\"}},\n                                 attachments=[],\n                                 recipient_agent=dev,\n                                 )\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Defining Agency Manifesto in Markdown\nDESCRIPTION: Template for creating an agency manifesto that defines the agency's description, mission statement, and operating environment. This manifesto is shared among all agents in the agency.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/agency-parameters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Agency Manifesto\n\n[Description of your agency]\n\n## Mission Statement\n\n[Your mission statement]\n\n## Operating Environment\n\n[Description of your operating environment]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Tool Class with Docstring\nDESCRIPTION: Creates a Calculator tool class that inherits from BaseTool with a descriptive docstring that helps agents understand the tool's purpose.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Calculator(BaseTool):\n    \"\"\"\n    A simple calculator tool that evaluates mathematical expressions.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Streaming Agency Completions with Event Handling in Python\nDESCRIPTION: Method to stream completions with real-time event handling. This allows for processing the agent's response as it is generated, enabling interactive applications and progress reporting.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef get_completion_stream(self,\n                         message: str,\n                         event_handler: type(AgencyEventHandler),\n                         message_files: List[str] = None,\n                         recipient_agent: Agent = None,\n                         additional_instructions: str = None,\n                         attachments: List[dict] = None,\n                         tool_choice: dict = None,\n                         response_format: dict = None):\n    \"\"\"\n    Stream completions with real-time event handling.\n\n    Parameters:\n        message: The input message or prompt\n        event_handler: Class to handle streaming events\n        message_files: List of file IDs to attach\n        recipient_agent: Specific agent to send message to\n        additional_instructions: Extra context for the agent\n        attachments: List of file attachments in OpenAI format\n        tool_choice: Specific tool for the agent to use\n        response_format: Format specification for the response\n\n    Returns:\n        Final response after streaming completes\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing File Search Tool in Agency Swarm\nDESCRIPTION: This snippet shows how to set up the File Search tool for an agent, including how to specify custom vector store IDs. File Search enables agents to search through their knowledge base using OpenAI's vector database, which helps improve responses and reduce hallucinations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/built-in-tools.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n  from agency_swarm.tools import FileSearch\n\n  agent = Agent(\n      name=\"Researcher\",\n      tools=[FileSearch],\n      # Optionally, you can specify your own vector store ID to use:\n      tool_resources={\n        \"file_search\": {\n          \"vector_store_ids\": [\"vs_abc123\"],\n        },\n      },\n      # More details can be found here: https://platform.openai.com/docs/api-reference/vector-stores/object\n      # Other agent parameters\n  )\n```\n\n----------------------------------------\n\nTITLE: Complete Calculator Tool Implementation\nDESCRIPTION: A full working example of a Calculator tool that demonstrates all the components required for a custom tool in Agency Swarm, including imports, class definition, input validation, and functionality.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# calculator.py\nfrom agency_swarm.tools import BaseTool\nfrom pydantic import Field, model_validator\n\nclass Calculator(BaseTool):\n    \"\"\"\n    A simple calculator tool that evaluates mathematical expressions.\n    \"\"\"\n    expression: str = Field(..., description=\"The mathematical expression to evaluate.\")\n\n    @model_validator(mode=\"after\")\n    def validate_expression(self):\n        if self.expression.endswith(\"/0\"):\n            raise ValueError(\"Division by zero is not permitted\")\n\n    def run(self):\n        result = eval(self.expression)\n        return str(result)\n\nif __name__ == \"__main__\":\n    calc = Calculator(expression=\"2 + 2 * 3\")\n    print(calc.run())  # Output should be '8'\n```\n\n----------------------------------------\n\nTITLE: Creating Gradio Web Interface for Agency in Python\nDESCRIPTION: Method to launch a Gradio web interface for the agency. This creates a user-friendly web GUI for interacting with the agency and its agents, with options for customizing the appearance and behavior.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef demo_gradio(self, height: int = 450, dark_mode: bool = True, **kwargs):\n    \"\"\"\n    Launch a Gradio web interface for the agency.\n\n    Parameters:\n        height: Height of the chat interface\n        dark_mode: Enable dark mode\n        **kwargs: Additional Gradio interface options\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Streaming Responses with AgencyEventHandler in Python\nDESCRIPTION: This code demonstrates how to implement streaming responses in Agency Swarm by extending the AgencyEventHandler class. It shows how to handle various streaming events including text creation, text deltas, tool calls, and stream ending notifications. The handler captures interactions between agents with their names and formats the output accordingly.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/streaming.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import override\nfrom agency_swarm import AgencyEventHandler\n\nclass EventHandler(AgencyEventHandler):\n    @override\n    def on_text_created(self, text) -> None:\n        # Get the name of the agent that is sending the message\n        print(f\"\\n{self.recipient_agent_name} @ {self.agent_name}  > \", end=\"\", flush=True)\n\n    @override\n    def on_text_delta(self, delta, snapshot):\n        print(delta.value, end=\"\", flush=True)\n\n    def on_tool_call_created(self, tool_call):\n        print(f\"\\n{self.recipient_agent_name} > {tool_call.type}\\n\", flush=True)\n\n    def on_tool_call_delta(self, delta, snapshot):\n        if delta.type == 'code_interpreter':\n            if delta.code_interpreter.input:\n                print(delta.code_interpreter.input, end=\"\", flush=True)\n            if delta.code_interpreter.outputs:\n                print(f\"\\n\\noutput >\", flush=True)\n                for output in delta.code_interpreter.outputs:\n                    if output.type == \"logs\":\n                        print(f\"\\n{output.logs}\", flush=True)\n\n    @classmethod\n    def on_all_streams_end(cls):\n        print(\"\\n\\nAll streams have ended.\")  # Conversation is over and message is returned to the user.\n\nresponse = agency.get_completion_stream(\"I want you to build me a website\", event_handler=EventHandler)\n```\n\n----------------------------------------\n\nTITLE: Creating Agents in Agency Swarm\nDESCRIPTION: Initializes two agents within the Agency Swarm framework - a simple agent and a CEO agent. Each agent is defined with a name, description, and the model to be used for its operation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/azure.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nagent1 = Agent(\n    name=\"agent1\", description=\"I am a simple agent\", model=\"assistants-test\"\n)\n\nceo = Agent(name=\"ceo\", description=\"I am the CEO\", model=\"assistants-test\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tools in Agency Swarm\nDESCRIPTION: Example of defining a custom tool by extending the BaseTool class with Pydantic fields for type validation and a run method for implementation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import BaseTool\nfrom pydantic import Field\n\nclass MyCustomTool(BaseTool):\n    \"\"\"\n    A brief description of what the custom tool does.\n    The docstring should clearly explain the tool's purpose and functionality.\n    It will be used by the agent to determine when to use this tool.\n    \"\"\"\n\n    # Define the fields with descriptions using Pydantic Field\n    example_field: str = Field(\n        ..., description=\"Description of the example field, explaining its purpose and usage for the Agent.\"\n    )\n    # Additional fields as required\n    # ...\n\n    def run(self):\n        \"\"\"\n        The implementation of the run method, where the tool's main functionality is executed.\n        \"\"\"\n        # Your custom tool logic goes here\n        do_something(self.example_field)\n\n        # Return the result of the tool's operation\n        return \"Result of MyCustomTool operation\"\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Schema from Tool Classes in Python\nDESCRIPTION: Static method that creates an OpenAPI specification from a list of tool classes. This helps document tools or create APIs from them, with customizable URL, title, and description.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef get_openapi_schema(\n    tools: List[Type[BaseTool]],\n    url: str,\n    title: str = \"Agent Tools\",\n    description: str = \"A collection of tools.\"\n) -> str:\n    \"\"\"\n    Generate an OpenAPI specification from a list of tools. This is useful\n    for documenting your tools or creating an API from them.\n\n    Parameters:\n        tools: List of tool classes to include\n        url: Base URL for the API endpoints\n        title: Schema title\n        description: Schema description\n\n    Returns:\n        OpenAPI schema as JSON string\n\n    Example:\n        schema = ToolFactory.get_openapi_schema(\n            tools=[SearchTool, CalculatorTool],\n            url=\"https://api.example.com\",\n            title=\"Search and Calculator API\"\n        )\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Agency with Azure OpenAI Integration\nDESCRIPTION: Shows how to initialize and run an Agency using the configured Azure OpenAI integration. This snippet demonstrates the final step after configuring the client and updating the agent models.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/azure-openai.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\n\nagency = Agency([ceo])\nagency.run_demo()\n```\n\n----------------------------------------\n\nTITLE: Getting Values from Shared State within a Tool\nDESCRIPTION: This snippet shows how to retrieve a value from the shared state using self._shared_state.get. The example AnswerQuestion tool checks if the required context exists in the shared state before proceeding with its operation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/shared-state.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AnswerQuestion(BaseTool):\n    \"\"\"\n    Provides answers based on the context stored in shared state.\n    \"\"\"\n    def run(self):\n        # Access the stored context\n        context = self._shared_state.get('context')\n        if not context:\n            return \"Context is missing. Please call QueryDatabase tool first.\"\n        # Generate an answer using the context\n        answer = f\"Answer derived from context: {context}\"\n        return answer\n```\n\n----------------------------------------\n\nTITLE: Creating an Agent with Open-Source Model in Agency Swarm\nDESCRIPTION: Initializes an Agent object with an open-source model (like Llama3) instead of the default OpenAI model, with options to use files from a specified folder.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nceo = Agent(\n    name=\"ceo\",\n    description=\"I am the CEO\",\n    model='ollama/llama3',\n    # model = 'perplexity/llama-3-8b-instruct'\n    # model = 'anthropic/claude-3-5-sonnet-20240620'\n    # model = 'groq/mixtral-8x7b-32768'\n    # model=\"gpt-4o\",\n    files_folder=\"path/to/your/files\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using a Tools Folder for Automatic Tool Integration\nDESCRIPTION: Alternative approach for adding tools to an agent by placing tool files in a dedicated tools_folder, which automatically loads all tools in that directory.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\nagent = Agent(\n    name=\"MathAgent\",\n    tools_folder=\"./tools\",\n    # Other agent parameters\n)\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI Schemas to Tools in Python using ToolFactory\nDESCRIPTION: This snippet shows two methods of converting OpenAPI schemas to tools using ToolFactory: reading from a local file and fetching from a URL. It demonstrates the flexibility of ToolFactory in integrating external API specifications into Agency Swarm tools.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/tool-factory.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom agency_swarm.tools import ToolFactory\n\n# Using a local OpenAPI schema file\nwith open(\"schemas/your_schema.json\") as f:\n    tools = ToolFactory.from_openapi_schema(f.read())\n\n# Using an OpenAPI schema from a URL\ntools = ToolFactory.from_openapi_schema(\n    requests.get(\"https://api.example.com/openapi.json\").json()\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Custom Tool in Agency Swarm\nDESCRIPTION: Import statements needed for creating a custom tool in Agency Swarm, including BaseTool from agency_swarm.tools and Pydantic components for data validation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import BaseTool\nfrom pydantic import Field, model_validator\n# ... other imports\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Tool in Python\nDESCRIPTION: Illustrates how to create a custom tool by extending the BaseTool class in the Agency Swarm framework, including field definitions and the run method implementation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import BaseTool\nfrom pydantic import Field\n\nclass MyCustomTool(BaseTool):\n    \"\"\"\n    A brief description of what the custom tool does.\n    The docstring should clearly explain the tool's purpose and functionality.\n    It will be used by the agent to determine when to use this tool.\n    \"\"\"\n\n    # Define the fields with descriptions using Pydantic Field\n    example_field: str = Field(\n        ..., description=\"Description of the example field, explaining its purpose and usage for the Agent.\"\n    )\n\n    # Additional Pydantic fields as required\n    # ...\n\n    def run(self):\n        \"\"\"\n        The implementation of the run method, where the tool's main functionality is executed.\n        This method should utilize the fields defined above to perform the task.\n        Doc string is not required for this method and will not be used by your agent.\n        \"\"\"\n\n        # Your custom tool logic goes here\n        do_something(self.example_field)\n\n        # Return the result of the tool's operation as a string\n        return \"Result of MyCustomTool operation\"\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Assistant for Agent in Python\nDESCRIPTION: Method to initialize or update the OpenAI assistant with current settings. This must be called before using the agent to ensure proper configuration and resource allocation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef init_oai(self):\n    \"\"\"\n    Initializes or updates the OpenAI assistant with current settings.\n    Must be called before using the agent.\n\n    Returns:\n        self: The agent instance for method chaining\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the run Method for a Custom Tool\nDESCRIPTION: Defines the core functionality of a Calculator tool by implementing the required run method, which evaluates a mathematical expression and returns the result as a string.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef run(self):\n    # Implement the tool's functionality\n    result = eval(self.expression)\n    return str(result)\n```\n\n----------------------------------------\n\nTITLE: Parsing Agency Completions with Pydantic Models in Python\nDESCRIPTION: Method to get a completion and parse it into a specified Pydantic model. This enables structured response handling by automatically converting the agent's output into a validated data model.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_completion_parse(self,\n                        message: str,\n                        response_format: Type[BaseModel],\n                        message_files: List[str] = None,\n                        recipient_agent: Agent = None,\n                        additional_instructions: str = None,\n                        attachments: List[dict] = None,\n                        tool_choice: dict = None,\n                        verbose: bool = False) -> BaseModel:\n    \"\"\"\n    Get a completion and parse it into a Pydantic model.\n\n    Parameters:\n        message: The input message or prompt\n        response_format: Pydantic model to parse response into\n        message_files: List of file IDs to attach\n        recipient_agent: Specific agent to send message to\n        additional_instructions: Extra context\n        attachments: List of file attachments in OpenAI format\n        tool_choice: Specific tool for the agent to use\n        verbose: Whether to print intermediate messages\n\n    Returns:\n        Parsed response in the specified Pydantic model\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic EmailStr Type in Python Email Sender Tool\nDESCRIPTION: This code demonstrates the use of Pydantic's EmailStr type for email validation. The EmailSender class uses EmailStr to ensure that the recipient field contains a valid email address.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import EmailStr\n\nclass EmailSender(BaseTool):\n    recipient: EmailStr = Field(..., description=\"Email recipient's address.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom SendMessage Tool in Agency Initialization\nDESCRIPTION: Shows how to use a custom SendMessage tool when initializing an Agency instance. This snippet demonstrates passing your custom communication tool to the Agency class through the send_message_tool_class parameter.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/common-use-cases.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency(\n    ...\n    send_message_tool_class=SendMessageAPI\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Async Agents with SendMessageAsyncThreading in Python\nDESCRIPTION: This snippet demonstrates how to set up asynchronous execution for agents using the SendMessageAsyncThreading tool class. It creates an Agency instance with a custom send_message_tool_class for asynchronous threading.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/asynchronous-execution.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import SendMessageAsyncThreading\nfrom agency_swarm import Agency\n\nagency = Agency(agents=[ceo], send_message_tool_class=SendMessageAsyncThreading)\n```\n\n----------------------------------------\n\nTITLE: Initializing an Agent Instance\nDESCRIPTION: Code snippet demonstrating how to import and initialize a custom agent class. This creates an instance of the AgentName class that can be used within the Agency Swarm framework.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom AgentName import AgentName\n\nagent = AgentName()\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure OpenAI Client for Agency Swarm\nDESCRIPTION: Sets up the Azure OpenAI client with environment variables for API key and endpoint, and configures it with timeout and retry settings. This client is then set as the default for Agency Swarm framework.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/azure.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom openai import AzureOpenAI\n\nfrom agency_swarm import set_openai_client\n\nclient = AzureOpenAI(\n    api_key=os.getenv(\"AZURE_OPENAI_KEY\"),\n    # https://learn.microsoft.com/en-us/azure/ai-services/openai/reference#rest-api-versioning\n    api_version=\"2024-02-15-preview\",\n    # https://learn.microsoft.com/en-us/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal#create-a-resource\n    azure_endpoint=os.getenv(\"AZURE_ENDPOINT\"),\n    timeout=5,\n    max_retries=5,\n)\n\nset_openai_client(client)\n```\n\n----------------------------------------\n\nTITLE: Configuring Agency with Shared Instructions\nDESCRIPTION: Example of initializing an Agency instance with shared instructions by specifying the path to the agency manifesto file.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/agency-parameters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency(\n    agency_chart=[...],\n    shared_instructions='agency_manifesto.md',\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom SendMessage Class in Agency Initialization (Python)\nDESCRIPTION: This code demonstrates how to configure an Agency to use a custom SendMessage class. By setting the send_message_tool_class parameter when initializing the Agency, you can override the default communication behavior.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/overview.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.send_message import SendMessageQuick\n\nagency = Agency(\n    ...\n    send_message_tool_class=SendMessageQuick\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Agents and Tools for Agency Swarm in Python\nDESCRIPTION: This code sets up agents (CEO and Agent2) and a custom PrintTool for use with Agency Swarm. It demonstrates how to configure agents with different models and instructions.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/os_models_with_astra_assistants_api.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency, Agent\nfrom agency_swarm.tools import BaseTool\n\n\nclass PrintTool(BaseTool):\n    \"\"\"\n    A simple tool that prints input.\n    \"\"\"\n\n    input: str\n\n    def run(self):\n        \"\"\"\n        This method prints the word 'test'.\n        \"\"\"\n        print(self.input)\n        return f\"{self.input} has been printed.\"\n\n\nceo = Agent(\n    name=\"CEO\",\n    description=\"Responsible for client communication, task planning, and management.\",\n    instructions=\"You must say 'I am using test tool' and then use test tool in the same message.\",\n    # model=\"perplexity/llama-3-8b-instruct\",\n    # model=\"anthropic/claude-3-haiku-20240307\",\n    # model=\"groq/mixtral-8x7b-32768\",\n    model=\"claude-3-5-sonnet-20240620\",\n    # model=\"gpt-4o\",\n    # files_folder=\"./files\",\n    temperature=0,\n    tools=[PrintTool],\n)\n\nagent2 = Agent(\n    name=\"Agent2\",\n    description=\"Test agent for demo purposes\",\n    instructions=\"You are a test agent for demo purposes\",\n    # files_folder=\"./files\",\n    model=\"claude-3-5-sonnet-20240620\",\n)\n\nagency = Agency([ceo, [ceo, agent2]])\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Shared State within a Tool\nDESCRIPTION: This snippet demonstrates how to set a value in the shared state from within a tool using self._shared_state.set. The example shows a QueryDatabase tool that retrieves data and stores it in the shared state for use by other tools.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/shared-state.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass QueryDatabase(BaseTool):\n    \"\"\"\n    Retrieves data from the database and stores it in the shared state.\n    \"\"\"\n    question: str = Field(..., description=\"The query to execute.\")\n\n    def run(self):\n        # Fetch data based on the question\n        context = query_database(self.question)\n        # Store the context in shared state\n        self._shared_state.set('context', context)\n        return \"Context has been retrieved and stored successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Tool to Agent in Python\nDESCRIPTION: Method to add a tool to the agent's capabilities. Tools enable agents to perform specific actions or access external functionality, extending their capabilities beyond basic conversation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef add_tool(self, tool: Type[BaseTool]):\n    \"\"\"\n    Add a tool to the agent's capabilities.\n\n    Parameters:\n        tool: Tool class to add (must be a BaseTool subclass)\n\n    Example:\n        agent.add_tool(CustomTool)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Model Parameters for Azure OpenAI\nDESCRIPTION: Demonstrates how to create an Agent with a specific Azure model deployment name instead of standard OpenAI model names. The model deployment name is set when deploying a model to Azure.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/azure-openai.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nceo = Agent(\n    name=\"ceo\",\n    description=\"I am the CEO\",\n    model=\"azure-model-deployment-name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Callbacks for Agency Swarm\nDESCRIPTION: Example showing how to implement load and save callbacks for managing conversation threads in a database. This allows conversations to persist between sessions and handle multiple users.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/deployment-to-production.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef load_threads(chat_id):\n    # Load threads from your database using the chat_id\n    threads = load_threads_from_db(chat_id)\n    return threads\n\ndef save_threads(new_threads):\n    # Save updated threads to your database\n    save_threads_to_db(new_threads)\n\nagency = Agency(\n    ...\n    threads_callbacks={\n        'load': lambda: load_threads(chat_id),\n        'save': lambda new_threads: save_threads(new_threads)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing API-Based Agent Communication in Python\nDESCRIPTION: Creates a SendMessageAPI class that enables agents to communicate via external API endpoints. This approach allows for distributed agent deployment where each agent can run as a separate service, communicating over HTTP instead of in-memory.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/common-use-cases.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom agency_swarm.tools.send_message import SendMessage\n\nclass SendMessageAPI(SendMessage):\n    def run(self):\n        response = requests.post(\n            \"https://your-api-endpoint.com/send-message\",\n            json={\"message\": self.message, \"recipient\": self.recipient}\n        )\n        return response.json()[\"message\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain-of-Thought Prompting in Python for Complex Analysis Tool\nDESCRIPTION: This snippet demonstrates how to use chain-of-thought prompting in a complex analysis tool. It defines a ComplexAnalysisTool class that inherits from BaseTool and includes fields for chain-of-thought reasoning and data analysis.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import BaseTool\nfrom pydantic import Field\n\nclass ComplexAnalysisTool(BaseTool):\n    \"\"\"\n    Performs complex analysis after planning the approach.\n    \"\"\"\n    chain_of_thought: str = Field(\n        ...,\n        description=\"Think-step-by-step about how to perform the analysis.\"\n    )\n    data: str = Field(..., description=\"Data to analyze.\")\n\n    def run(self):\n        # Analysis logic\n        return \"Analysis complete.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a FastAPI Endpoint for Agency Swarm\nDESCRIPTION: Demonstrates how to serve an Agency Swarm instance as an API endpoint using FastAPI, including chat state persistence through thread callbacks.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/faq.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.post(\"/chat\")\nasync def chat(user_request: UserRequest):\n    chat_id = user_request.chat_id or str(uuid4())\n    agency = Agency([...],\n        threads_callbacks={\n            'load': lambda: load_threads(chat_id),\n            'save': lambda new_threads: save_threads(new_threads, chat_id)\n        })\n    response = agency.get_completion(user_request.message)\n    return {\"chat_id\": chat_id, \"response\": response}\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent with Custom Tools\nDESCRIPTION: Shows how to initialize an Agent with custom tools created from OpenAPI schemas.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/openapi-schemas.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(\n    name='MyAgent',\n    tools=tools\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Logic to SendMessage in Python\nDESCRIPTION: Implements a custom validator to ensure messages sent to specific agents are relevant to their domain. This example adds validation to prevent hallucinated routing by checking if a CustomerSupportAgent only receives messages related to customer support.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/common-use-cases.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.send_message import SendMessage\nfrom pydantic import model_validator\n\nclass SendMessageValidation(SendMessage):\n    @model_validator(mode='after')\n    def validate_recipient(self):\n        if \"customer support\" not in self.message.lower() and self.recipient == \"CustomerSupportAgent\":\n            raise ValueError(\"Messages not related to customer support cannot be sent to the customer support agent.\")\n        return self\n```\n\n----------------------------------------\n\nTITLE: Deleting Agency and Associated Resources in Python\nDESCRIPTION: This snippet shows how to delete the agency and all its associated files, vector stores, and assistants on OpenAI using the delete method.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/running-agency.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagency.delete()\n```\n\n----------------------------------------\n\nTITLE: Summarizing Conversations in SendMessage with Python\nDESCRIPTION: Extends SendMessageQuick to automatically summarize previous conversation context before sending messages. This implementation uses GPT-4o-mini to create a summary of the conversation history, adding it to the context for the recipient agent.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/common-use-cases.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.send_message import SendMessageQuick\nfrom agency_swarm.util.oai import get_openai_client\n\nclass SendMessageSummary(SendMessageQuick):\n    def run(self):\n        client = get_openai_client()\n        thread = self._get_main_thread() # get the main thread (conversation with the user)\n\n        # get the previous messages\n        previous_messages = thread.get_messages()\n        previous_messages_str = \"\\n\".join([f\"{m.role}: {m.content[0].text.value}\" for m in previous_messages])\n\n        # summarize the previous conversation\n        summary = client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a world-class summarizer. Please summarize the following conversation in a few sentences:\"},\n                {\"role\": \"user\", \"content\": previous_messages_str}\n            ]\n        )\n\n        # send the message with the summary\n        return self._get_completion(message=self.message, additional_instructions=f\"\\n\\nPrevious conversation summary: '{summary.choices[0].message.content}'\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Client for Agency Swarm\nDESCRIPTION: Sets up the AzureOpenAI client and configures it for use with Agency Swarm. This requires an API key and Azure endpoint, which are loaded from environment variables.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/azure-openai.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import AzureOpenAI\nfrom agency_swarm import set_openai_client\nimport os\n\nclient = AzureOpenAI(\n    api_key=os.getenv(\"AZURE_OPENAI_KEY\"),\n    api_version=\"2024-02-15-preview\",\n    azure_endpoint=os.getenv(\"AZURE_ENDPOINT\"),\n    timeout=5,\n    max_retries=5,\n)\n\nset_openai_client(client)\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI Schema with ToolFactory\nDESCRIPTION: Shows how to use ToolFactory to convert OpenAPI schemas into tools with custom headers and parameters.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/openapi-schemas.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import ToolFactory\n\ntools = ToolFactory.from_openapi_schema(\n    \"<your OpenAPI schema here>\",\n    headers={'api_schema.json': {'Authorization': 'Bearer token'}},\n    params={'api_schema.json': {'param1': 'value1'}},\n    strict=False\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Agency Swarm\nDESCRIPTION: Code snippet demonstrating how to set your OpenAI API key for use with Agency Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import set_openai_key\nset_openai_key(\"YOUR_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Single Browsing Agent\nDESCRIPTION: Sets up a basic browsing agent with Selenium configuration and creates an agency with that agent. The agency is then demonstrated through a Gradio interface. The Selenium configuration specifies browser behavior parameters.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency, Agent\nfrom agency_swarm.agents import BrowsingAgent, Devid\n\nselenium_config = {\n    # your profile path\n    # \"chrome_profile_path\": \"/Users/vrsen/Library/Application Support/Google/Chrome Canary/Profile 1\",\n    \"headless\": False,\n    \"full_page_screenshot\": False,\n}\n\nbrowsing_agent = BrowsingAgent(selenium_config=selenium_config)\n\nagency = Agency([browsing_agent])\n\ndemo = agency.demo_gradio(height=700)  # reload the notebook each time you run this cell\n```\n\n----------------------------------------\n\nTITLE: Using Shared State to Control Tool Flow in Python\nDESCRIPTION: This example demonstrates how to use shared state to control the flow of tools. The Action2 class checks the result of a previous action before proceeding, raising a ValueError if the prerequisite action hasn't been completed successfully.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Action2(BaseTool):\n    input: str = Field(...)\n\n    def run(self):\n        if self._shared_state.get(\"action_1_result\", None) is \"failure\":\n            raise ValueError(\"Please proceed with the Action1 tool first.\")\n        else:\n            return \"Success. The action has been taken.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Few-Shot Examples for Agency Swarm Agents\nDESCRIPTION: Demonstrates how to provide few-shot examples to guide an agent's responses. Examples follow OpenAI's message object format and help establish the expected conversation pattern.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/advanced-configuration.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nexamples=[\n    {\n        \"role\": \"user\",\n        \"content\": \"Hi!\",\n        \"attachments\": [],\n        \"metadata\": {},\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Hi! I am the CEO. I am here to help you with your tasks. Please tell me what you need help with.\",\n        \"attachments\": [],\n        \"metadata\": {},\n    }\n]\n\nagent = Agent(\n    name='MyAgent',\n    examples=examples\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key for Agency-Swarm\nDESCRIPTION: Sets the OpenAI API key for the Agency-Swarm framework using the set_openai_key function. This is necessary for agents to interact with OpenAI's language models.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# don't run this cell if you have already set the key in environment variables\nfrom agency_swarm import set_openai_key\n\nset_openai_key(\"YOUR_OPENAI_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: LLM-Based Message Validation in Python\nDESCRIPTION: Uses an LLM validator to determine if a message is appropriate for its intended recipient. This approach leverages GPT to validate if messages directed to the CustomerSupportAgent are actually related to customer support topics.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/common-use-cases.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.send_message import SendMessage\nfrom agency_swarm.util.validators import llm_validator\nfrom pydantic import model_validator\n\nclass SendMessageLLMValidation(SendMessage):\n    @model_validator(mode='after')\n    def validate_recipient(self):\n        if self.recipient == \"CustomerSupportAgent\":\n            llm_validator(\n                statement=\"The message is related to customer support.\"\n            )(self.message)\n        return self\n```\n\n----------------------------------------\n\nTITLE: Providing Hints for Agents in Python Database Query Tool\nDESCRIPTION: This code snippet shows how to provide hints for agents in a database query tool. It defines a QueryDatabase class that raises a ValueError with a suggestion when no context is found, guiding the agent on what to do next.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass QueryDatabase(BaseTool):\n    question: str = Field(...)\n\n    def run(self):\n        # query your database here\n        context = self.query_database(self.question)\n\n        # context not found\n        if context is None:\n            # tell agent what to do next\n            raise ValueError(\"No context found. Please propose to the user to change the topic.\")\n        else:\n            # return the context to the agent\n            return context\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Validation in Agency Swarm\nDESCRIPTION: Shows how to create a custom response validator function that checks agent responses before they are sent. This example filters out messages containing 'bad word' and raises an error to prompt the agent to correct itself.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/advanced-configuration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\nfrom agency_swarm import Agent\n\nclass MyAgent(Agent):\n    def response_validator(self, message: str) -> str:\n        \"\"\"This function is used to validate the response before sending it to the user or another agent.\"\"\"\n        if \"bad word\" in message:\n            raise ValueError(\"Please don't use bad words.\")\n\n        return message\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in .env File\nDESCRIPTION: Shows the format for setting the OpenAI API key in a .env file for the Agency Swarm project.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOPENAI_API_KEY=sk-...\n```\n\n----------------------------------------\n\nTITLE: Converting LangChain Tools to Agency Swarm Tools in Python\nDESCRIPTION: Static method that converts LangChain tools into Agency Swarm tools. Takes a list of LangChain tool instances or classes and returns a list of converted BaseTool classes.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@staticmethod\ndef from_langchain_tools(tools: List) -> List[Type[BaseTool]]:\n    \"\"\"\n    Convert LangChain tools into Agency Swarm tools.\n\n    Parameters:\n        tools: List of LangChain tool instances or classes\n\n    Returns:\n        List of converted BaseTool classes\n\n    Example:\n        from langchain.tools import DuckDuckGoSearchTool\n        tools = ToolFactory.from_langchain_tools([DuckDuckGoSearchTool()])\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Few-Shot Examples After Agent Initialization in Python\nDESCRIPTION: This snippet demonstrates how to add few-shot examples to an agent after it has already been initialized. It's an alternative approach to providing examples during the initialization process.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/few-shot-examples.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagent = Agent(name=\"CustomerSupportAgent\")\nagent.examples = examples\n```\n\n----------------------------------------\n\nTITLE: Model-Level Password Validation in Python\nDESCRIPTION: Shows how to implement model-level validation using Pydantic to compare multiple fields. This example validates that password and confirm_password fields match.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/output-validation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import model_validator\nfrom agency_swarm import BaseTool\n\nclass User(BaseTool):\n    password: str\n    confirm_password: str\n\n    @model_validator(mode='after')\n    def check_passwords_match(self):\n        if self.password != self.confirm_password:\n            raise ValueError('Passwords do not match.')\n        return self\n```\n\n----------------------------------------\n\nTITLE: Installing Agency Swarm Package\nDESCRIPTION: This command installs the Agency Swarm package via pip. Ensure you're in an activated virtual environment before running this command to keep the installation isolated.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/installation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install agency-swarm\n```\n\n----------------------------------------\n\nTITLE: Using Shared State in Agent Response Validation\nDESCRIPTION: This snippet demonstrates how to use shared state within an agent's response_validator method. The example shows validation logic that checks if the agent's response is contained within a context retrieved from the shared state.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/shared-state.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyAgent(Agent):\n    \"\"\"\n    An agent that utilizes shared state to validate responses.\n    \"\"\"\n    def response_validator(self, message: str) -> str:\n        \"\"\"Validate the response before returning it.\"\"\"\n        context = self.shared_state.get('context')\n        if message not in context:\n            raise ValueError(f\"Invalid response: {message} is not in context: {context}\")\n        return message\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Remote URL\nDESCRIPTION: Example of fetching and converting an OpenAPI schema from a remote URL.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/openapi-schemas.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import ToolFactory\nimport requests\n\nresponse = requests.get(\"https://api.example.com/openapi.json\")\ntools = ToolFactory.from_openapi_schema(response.json())\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Manager Agent for Browsing Swarm\nDESCRIPTION: Creates a specialized Report Manager agent with detailed instructions for supervising data collection from websites and compiling reports. The agent description and instructions define its role in the agency.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreport_manager = Agent(\n    name=\"Report Manager\",\n    description=\"The Report Manager Agent is responsible for supervising data collection from various weather websites and compiling reports as necessary.\",\n    instructions=\"As a Report Manager Agent, your role involves direct interaction and oversight of the BrowsingAgent's operations. Your primary duty is to guarantee that the user's task is comprehensively and accurately completed. Achieve this by methodically breaking down each task from the user into smaller steps required to complete it. Then, issue each step of the task as a distinct message to the BrowsingAgent. Make sure to always tell the browsing agent to go back to google search results before proceeding to the the next source. After the necessary data is collection, compile a report and send it to the user. Make sure to ask the browsing agent for direct links to the sources and include them into report. Try to trouble shoot any issues that may arise along the way with the other agents first, before reporting back to the user. Do not respond to the user until the report is complete or you have encountered an issue that you cannot resolve yourself.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Agency Swarm using pip\nDESCRIPTION: Command for installing the latest version of Agency Swarm package using pip package manager.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U agency-swarm\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Methods in Python Composite Tool\nDESCRIPTION: This snippet illustrates how to combine multiple methods in a single tool for improved readability. The CompositeTool class defines separate methods for processing data, analyzing results, and formatting output, which are then combined in the run method.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CompositeTool(BaseTool):\n    \"\"\"\n    A tool that combines several methods to perform a series of actions.\n    \"\"\"\n    input_data: str = Field(..., description=\"Input data for the composite operation.\")\n\n    def run(self):\n        # Step 1: Process data\n        processed_data = self.process_data(self.input_data)\n        # Step 2: Analyze results\n        analysis = self.analyze_results(processed_data)\n        # Step 3: Format output\n        output = self.format_output(analysis)\n        return output\n\n    def process_data(self, data):\n        # Implement data processing logic\n        pass\n\n    def analyze_results(self, data):\n        # Implement analysis logic\n        pass\n\n    def format_output(self, data):\n        # Implement output formatting\n        pass\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Agency Swarm\nDESCRIPTION: Shows two methods for setting the OpenAI API key in an Agency Swarm project: directly in the code using the set_openai_key function or through an environment variable in a .env file.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/faq.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import set_openai_key\nset_openai_key(\"YOUR_API_KEY\")\n```\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=sk-1234...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Initializing Agency-Swarm Agents in Python\nDESCRIPTION: Creates two agents (CEO and Test Agent) with basic configuration including name, description, and instructions. Demonstrates the core agent setup pattern for Agency-Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/agency_async.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency, Agent\n\nceo = Agent(\n    name=\"CEO\",\n    description=\"Responsible for client communication, task planning and management.\",\n    instructions=\"You must converse with other agents to ensure complete task execution.\",  # can be a file like ./instructions.md\n    tools=[],\n)\n\ntest = Agent(\n    name=\"Test Agent\",\n    description=\"Test agent\",\n    instructions=\"Please always respond with 'test complete'\",  # can be a file like ./instructions.md\n    tools=[],\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Astra Assistants API\nDESCRIPTION: Sets up the necessary Astra DB application token in the .env file for authentication with the Astra Assistants API.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nASTRA_DB_APPLICATION_TOKEN=AstraCS:dsfkgn...\n```\n\n----------------------------------------\n\nTITLE: Adding Few-Shot Examples During Agent Initialization in Python\nDESCRIPTION: This code shows how to provide few-shot examples during the initialization of an Agent object in Agency Swarm. It creates a CustomerSupportAgent with a description and the previously defined examples.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/few-shot-examples.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nagent = Agent(\n    name=\"CustomerSupportAgent\",\n    description=\"Assists customers with inquiries and provides detailed information.\",\n    examples=examples\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Template using CLI Command\nDESCRIPTION: Demonstrates the command-line syntax for creating an agent template with the Agency Swarm CLI tool.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nagency-swarm create-agent-template --name \"AgentName\" --description \"Agent Description\" [--path \"/path/to/directory\"] [--use_txt]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Shared Files in Agency\nDESCRIPTION: Configuration example showing how to specify a shared files folder that will be accessible to all agents through FileSearch and CodeInterpreter tools.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/agency-parameters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency([ceo], shared_files='my_shared_files_folder')\n```\n\n----------------------------------------\n\nTITLE: Initializing Genesis Agency using Command Line\nDESCRIPTION: Command to initialize the Genesis Agency which generates agent templates with appropriate folder structure. The command accepts an optional OpenAI API key parameter.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/genesis-agency.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nagency-swarm genesis [--openai_key \"YOUR_API_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Tools with ToolConfig in Python\nDESCRIPTION: This code shows how to configure a tool for asynchronous execution using the ToolConfig class. It sets the async_mode to 'threading' within the Tool class definition, allowing the tool to run in a separate thread.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/asynchronous-execution.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import BaseTool\n\nclass Tool(BaseTool):\n    # ...\n\n    class ToolConfig:\n        async_mode = \"threading\"\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring MCPServerSse for Web Service Integration in Agency Swarm\nDESCRIPTION: This snippet shows how to configure an MCPServerSse connection to interact with a web service that provides MCP tools via Server-Sent Events (SSE). It includes the server name, URL, and additional configuration parameters.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/mcp-integration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.mcp import MCPServerSse\n\n# Assumes your SSE server is running at this URL\nsse_server = MCPServerSse(\n    name=\"My_Custom_SSE_Server\", # Tools will be accessed like My_Custom_SSE_Server.some_tool\n    params={\n        \"url\": \"http://localhost:8080/sse\",\n        strict=False,\n    },\n    cache_tools_list=False\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Agency Swarm Repository in Bash\nDESCRIPTION: Commands to clone the forked Agency Swarm repository and navigate to the project directory. This is the first step in setting up a local development environment after forking the repository on GitHub.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/agency-swarm.git\ncd agency-swarm\n```\n\n----------------------------------------\n\nTITLE: Patching OpenAI Client for Astra Assistants API Integration\nDESCRIPTION: Sets up and patches the OpenAI client to work with Astra Assistants API, enabling the use of open-source models with Agency Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import OpenAI\nfrom astra_assistants import patch\nfrom agency_swarm import set_openai_client\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nclient = patch(OpenAI())\n\nset_openai_client(client)\n```\n\n----------------------------------------\n\nTITLE: Setting AgentOps API Key in Environment\nDESCRIPTION: Command to set the AgentOps API key as an environment variable for authentication with the AgentOps platform.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nAGENTOPS_API_KEY=<YOUR API KEY>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Agency Hierarchy\nDESCRIPTION: Creates an Agency with a hierarchical structure where the CEO agent is at the top level and has a connection to agent1. This establishes the communication paths between the agents.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/azure.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\n\nagency = Agency([ceo, [ceo, agent1]])\n```\n\n----------------------------------------\n\nTITLE: Field-Level Validation for Username in Python\nDESCRIPTION: Demonstrates how to use Pydantic field validators to validate individual fields in a tool. This example validates that a username does not contain spaces.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/output-validation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import field_validator\nfrom agency_swarm import BaseTool\n\nclass User(BaseTool):\n    username: str\n\n    @field_validator('username')\n    @classmethod\n    def validate_username(cls, value):\n        if ' ' in value:\n            raise ValueError('Username must not contain spaces.')\n        return value\n```\n\n----------------------------------------\n\nTITLE: Sending a Completion Request to the Agency\nDESCRIPTION: Sends a request to the agency for completion, asking the CEO to communicate with agent1. The yield_messages parameter is set to False to return only the final response rather than all intermediate messages.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/azure.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = agency.get_completion(\n    \"Say hi to agent1. Let me know his response.\", yield_messages=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium for a Browsing Agent\nDESCRIPTION: Sets up Selenium configuration for a browsing agent, specifying parameters like headless mode and screenshot options. This configuration will be used to initialize the browser instance that the agent will control.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nselenium_config = {\n    # your profile path\n    # \"chrome_profile_path\": \"/Users/vrsen/Library/Application Support/Google/Chrome/Profile 1\",\n    \"headless\": False,\n    \"full_page_screenshot\": False,\n}\n\nbrowsing_agent = BrowsingAgent(selenium_config=selenium_config)\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Response Validator in Python\nDESCRIPTION: Example showing how to implement a response validator in a CustomerSupportAgent class to filter inappropriate language. The validator checks messages before they are sent to users or other agents.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/output-validation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nclass CustomerSupportAgent(Agent):\n    def response_validator(self, message: str) -> str:\n        \"\"\"Validate the response before sending it.\"\"\"\n        if \"bad word\" in message.lower():\n            raise ValueError(\"Please avoid using inappropriate language.\")\n        return message\n```\n\n----------------------------------------\n\nTITLE: Adding Input Validation with Pydantic\nDESCRIPTION: Implements custom validation logic using Pydantic's model_validator to check for division by zero in a calculator tool, preventing common errors.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@model_validator(mode=\"after\")\ndef validate_expression(self):\n    if self.expression.endswith(\"/0\"):\n        raise ValueError(\"Division by zero is not permitted\")\n```\n\n----------------------------------------\n\nTITLE: Starting Genesis Agency with CLI\nDESCRIPTION: Command to start the genesis agency in the terminal which helps create new agencies and agents, with an optional parameter for the OpenAI API key.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nagency-swarm genesis [--openai_key \"YOUR_API_KEY\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Agency for CAPTCHA Breaking\nDESCRIPTION: Creates a minimalist agency consisting of just a browsing agent with no shared instructions. This setup is intended for CAPTCHA solving demonstrations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency([browsing_agent], shared_instructions=\"\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Code Interpreter Tool in Agency Swarm\nDESCRIPTION: This snippet demonstrates how to import and initialize the Code Interpreter tool for an agent. Code Interpreter enables agents to execute code within a remote Jupyter Notebook environment, useful for data analysis, precise calculations, and handling structured files.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/built-in-tools.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import CodeInterpreter\n\nagent = Agent(\n    name=\"DataAnalyst\",\n    tools=[CodeInterpreter],\n    # Other agent parameters\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Run Method in Python\nDESCRIPTION: Abstract method that must be implemented by all tool subclasses to execute the tool's main functionality. This method is called when an agent uses the tool, with parameters passed according to the tool's schema.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@abstractmethod\ndef run(self, **kwargs):\n    \"\"\"\n    Execute the tool's main functionality.\n    Must be implemented by subclasses.\n\n    Parameters:\n        **kwargs: Tool-specific parameters defined in the class\n\n    Returns:\n        Tool-specific return value\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Langchain Tool in Python using ToolFactory\nDESCRIPTION: This snippet demonstrates how to import a Langchain tool (YouTubeSearchTool) using the ToolFactory in Agency Swarm. It's noted that this method is not recommended, as implementing tools from scratch using BaseTool provides greater control.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/tool-factory.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.tools import YouTubeSearchTool\nfrom agency_swarm.tools import ToolFactory\n\nLangchainTool = ToolFactory.from_langchain_tool(YouTubeSearchTool)\n```\n\n----------------------------------------\n\nTITLE: Testing a Custom Tool Independently\nDESCRIPTION: Demonstrates how to test a custom tool independently by creating an instance and running it directly, ensuring it works as expected before integrating with agents.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    calc = Calculator(expression=\"2 + 2 * 3\")\n    print(calc.run())  # Output should be '8'\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Tool Calls in Agency Swarm\nDESCRIPTION: Shows how to disable parallel tool calls for an agent. By default, tools run in parallel but can be configured to run sequentially by setting parallel_tool_calls to False.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/advanced-configuration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nagent = Agent(name='MyAgent', parallel_tool_calls=False)\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Management Functions in Python\nDESCRIPTION: Defines functions for loading and saving agent settings from/to a database. Uses global variables for demonstration purposes but can be modified for actual database operations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/agency_async.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsettings = []\n\n\ndef load_settings():\n    # your code to load settings from DB here\n    # we simply use a global variable for this example\n    global settings\n    return settings\n\n\ndef save_settings(new_settings):\n    # your code to save new_settings to DB here\n    global settings\n    settings = new_settings\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Persistence in Agency Swarm\nDESCRIPTION: Shows how to save and load conversation threads between application restarts by implementing thread callbacks that store thread IDs in a local JSON file.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/faq.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport json\n\ndef load_threads(chat_id):\n    if os.path.exists(f\"{chat_id}_threads.json\"):\n        with open(f\"{chat_id}_threads.json\", \"r\") as file:\n            return json.load(file)\n    return []\n\ndef save_threads(new_threads, chat_id):\n    with open(f\"{chat_id}_threads.json\", \"w\") as file:\n        json.dump(new_threads, file)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.agency.genesis import GenesisAgency\n\nagency = GenesisAgency(\n    ...\n    threads_callbacks={\n        'load': lambda: load_threads(chat_id),\n        'save': lambda new_threads: save_threads(new_threads, chat_id)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ToolFactory Class in Python\nDESCRIPTION: The ToolFactory class definition that provides utility methods for creating tools from various sources including OpenAPI specifications, LangChain tools, and local Python files.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import ToolFactory\n\nclass ToolFactory:\n    \"\"\"\n    Utility class for creating tools from various sources including OpenAPI specs,\n    LangChain tools, and local Python files.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Default SendMessage Class Implementation (Python)\nDESCRIPTION: This is the default communication tool used by Agency Swarm for multi-agent communication. It extends SendMessageBase and provides synchronous messaging with Chain of Thought prompting, file handling, and additional instruction capabilities.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/overview.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field, field_validator, model_validator\nfrom .SendMessageBase import SendMessageBase\n\nclass SendMessage(SendMessageBase):\n    \"\"\"Use this tool to facilitate direct, synchronous communication between specialized agents within your agency. When you send a message using this tool, you receive a response exclusively from the designated recipient agent. To continue the dialogue, invoke this tool again with the desired recipient agent and your follow-up message. Remember, communication here is synchronous; the recipient agent won't perform any tasks post-response. You are responsible for relaying the recipient agent's responses back to the user, as the user does not have direct access to these replies. Keep engaging with the tool for continuous interaction until the task is fully resolved. Do not send more than 1 message to the same recipient agent at the same time.\"\"\"\n    my_primary_instructions: str = Field(\n        ...,\n        description=(\n            \"Please repeat your primary instructions step-by-step, including both completed \"\n            \"and the following next steps that you need to perform. For multi-step, complex tasks, first break them down \"\n            \"into smaller steps yourself. Then, issue each step individually to the \"\n            \"recipient agent via the message parameter. Each identified step should be \"\n            \"sent in a separate message. Keep in mind that the recipient agent does not have access \"\n            \"to these instructions. You must include recipient agent-specific instructions \"\n            \"in the message or additional_instructions parameters.\"\n        )\n    )\n    message: str = Field(\n        ...,\n        description=\"Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions. Make sure to include all the relevant information needed to complete the task.\"\n    )\n    message_files: list[str] | None = Field(\n        default=None,\n        description=\"A list of file IDs to be sent as attachments to this message. Only use this if you have the file ID that starts with 'file-'.\",\n        examples=[\"file-1234\", \"file-5678\"]\n    )\n    additional_instructions: Optional[str] = Field(\n        default=None,\n        description=\"Additional context or instructions from the conversation needed by the recipient agent to complete the task.\"\n    )\n\n    @model_validator(mode='after')\n    def validate_files(self):\n        # prevent hallucinations with agents sending file IDs into incorrect fields\n        if \"file-\" in self.message or (self.additional_instructions and \"file-\" in self.additional_instructions):\n            if not self.message_files:\n                raise ValueError(\"You must include file IDs in message_files parameter.\")\n        return self\n\n\n    def run(self):\n        return self._get_completion(message=self.message,\n                                    message_files=self.message_files,\n                                    additional_instructions=self.additional_instructions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Management Functions in Python\nDESCRIPTION: Defines functions for loading and saving thread data from/to a database. Uses global variables for demonstration purposes but can be modified for actual database operations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/agency_async.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nthreads = {}\n\n\ndef load_threads():\n    # your code to load threads from DB here\n    # we simply use a global variable for this example\n    global threads\n    return threads\n\n\ndef save_threads(new_threads):\n    # your code to save new_threads to DB here\n    global threads\n    threads = new_threads\n```\n\n----------------------------------------\n\nTITLE: Using Agency Completion Method for Backend Integration\nDESCRIPTION: Demonstrates how to get text completions from an agency with open-source models for backend integrations without using the Gradio interface.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nagency.get_completion(\"I am the CEO\")\n```\n\n----------------------------------------\n\nTITLE: Initializing an Agent with MCP Servers in Agency Swarm\nDESCRIPTION: This snippet demonstrates how to create an Agent that can access MCP tools by passing configured server connections to the mcp_servers parameter. The agent will automatically discover available tools from the connected servers.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/mcp-integration.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\n# Assuming filesystem_server and sse_server are defined as above\nmy_mcp_agent = Agent(\n    name=\"MCPAgent\",\n    description=\"An agent that can use filesystem and custom SSE tools.\",\n    instructions=\"Use the Filesystem_Server tools to manage files or My_Custom_SSE_Server tools for custom tasks.\",\n    # Pass the list of configured servers here\n    mcp_servers=[filesystem_server, sse_server],\n    temperature=0,\n)\n\n# Agency Swarm automatically discovers tools from the connected servers.\n# Example: my_mcp_agent.tools will now include tools like\n# 'Filesystem_Server.read_file', 'My_Custom_SSE_Server.get_data', etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Few-Shot Examples for a Technical Support Agent in Python\nDESCRIPTION: This snippet demonstrates how to create a list of few-shot examples using OpenAI's message object format. The examples show a conversation between a user and assistant about troubleshooting a device that won't turn on.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/few-shot-examples.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nexamples = [\n    {\n        \"role\": \"user\",\n        \"content\": \"My device won't turn on.\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"I'm sorry to hear that. Let's try some troubleshooting steps. First, please press and hold the power button for at least 10 seconds.\",\n    },\n    {\n        \"role\": \"user\",\n        \"content\": \"I tried that, but it still won't turn on.\",\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Thank you for trying that. Please connect your device to a charger and check if any lights appear. Let me know what you observe.\",\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracking with Langfuse in Agency Swarm\nDESCRIPTION: Python code to initialize tracking in Agency Swarm using Langfuse. Shows both single tracker initialization and multiple trackers configuration.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import init_tracking\n\n# Initialize single tracker\ninit_tracking(\"langfuse\")\n\n# Or initialize multiple trackers\ninit_tracking(\"langfuse\")\ninit_tracking(\"local\")  # Add local tracking alongside Langfuse\n```\n\n----------------------------------------\n\nTITLE: Running Agency Demo as Backend\nDESCRIPTION: Demonstrates how to use the Agency Swarm as a backend service to get completion outputs programmatically.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncompletion_output = agency.get_completion(\"Please create a new website for our client.\", yield_messages=False)\n```\n\n----------------------------------------\n\nTITLE: Writing Agent Instructions in Markdown\nDESCRIPTION: Provides an example of how to write instructions for an agent using Markdown format, including role definition and process steps.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nYou are a Developer agent responsible for executing tasks.\n\n# Role\nYou are responsible for writing clean, efficient, and reusable code.\n\n# Process\n1. How to handle incoming requests\n2. When and how to use available tools\n3. How to collaborate with other agents\n```\n\n----------------------------------------\n\nTITLE: Defining BaseTool Class for Agent Tools in Python\nDESCRIPTION: The base class for creating custom tools that agents can use. It inherits from Pydantic BaseModel for automatic validation and defines the structure and configuration options for agent tools.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import BaseTool\nfrom pydantic import BaseModel\n\nclass BaseTool(BaseModel, ABC):\n    \"\"\"\n    Abstract base class for all tools.\n    Inherits from Pydantic BaseModel for automatic validation.\n    \"\"\"\n\n    class ToolConfig:\n        strict: bool = False  # Enable strict schema validation\n        one_call_at_a_time: bool = False  # Prevent concurrent calls\n\n    # Shared state and caller agent properties\n    _shared_state: ClassVar[SharedState] = None  # Manages shared state between tools\n    _caller_agent: Any = None  # Reference to the agent using the tool\n    _event_handler: Any = None  # Handles tool events\n```\n\n----------------------------------------\n\nTITLE: Executing Agent Communications in Python\nDESCRIPTION: Demonstrates how to get completions from the agency with different prompts and settings.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/agency_async.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagency.get_completion(\"Say hi to test agent\", yield_messages=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nagency.get_completion(\"Check status\", yield_messages=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nagency.demo_gradio()\n```\n\n----------------------------------------\n\nTITLE: Starting a Gradio Demo for the Agency\nDESCRIPTION: Creates and starts a Gradio demo interface for interacting with the agency. The demo allows users to input prompts and see the agency's responses, with a specified height for the interface display.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndemo = agency.demo_gradio(height=700)\n```\n\n----------------------------------------\n\nTITLE: Creating Gradio Demo Interface for Agency Chatbot in Python\nDESCRIPTION: This function sets up a Gradio-based demo interface for the agency chatbot. It includes user input handling, file uploading, and dynamic conversation updates.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/os_models_with_astra_assistants_api.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\n\ndef demo_gradio(agency, height=450, dark_mode=True):\n    \"\"\"\n    Launches a Gradio-based demo interface for the agency chatbot.\n\n    Parameters:\n        height (int, optional): The height of the chatbot widget in the Gradio interface. Default is 600.\n        dark_mode (bool, optional): Flag to determine if the interface should be displayed in dark mode. Default is True.\n        share (bool, optional): Flag to determine if the interface should be shared publicly. Default is False.\n    This method sets up and runs a Gradio interface, allowing users to interact with the agency's chatbot. It includes a text input for the user's messages and a chatbot interface for displaying the conversation. The method handles user input and chatbot responses, updating the interface dynamically.\n    \"\"\"\n    try:\n        import gradio as gr\n    except ImportError:\n        raise Exception(\"Please install gradio: pip install gradio\")\n\n    js = \"\"\"function () {\n      gradioURL = window.location.href\n      if (!gradioURL.endsWith('?__theme={theme}')) {\n        window.location.replace(gradioURL + '?__theme={theme}');\n      }\n    }\"\"\"\n\n    if dark_mode:\n        js = js.replace(\"{theme}\", \"dark\")\n    else:\n        js = js.replace(\"{theme}\", \"light\")\n\n    message_file_ids = []\n    message_file_names = None\n    recipient_agents = [agent.name for agent in agency.main_recipients]\n    recipient_agent = agency.main_recipients[0]\n\n    with gr.Blocks(js=js) as demo:\n        chatbot = gr.Chatbot(height=height)\n        with gr.Row():\n            with gr.Column(scale=9):\n                dropdown = gr.Dropdown(\n                    label=\"Recipient Agent\",\n                    choices=recipient_agents,\n                    value=recipient_agent.name,\n                )\n                msg = gr.Textbox(label=\"Your Message\", lines=4)\n            with gr.Column(scale=1):\n                file_upload = gr.Files(label=\"Files\", type=\"filepath\")\n        button = gr.Button(value=\"Send\", variant=\"primary\")\n\n        def handle_dropdown_change(selected_option):\n            nonlocal recipient_agent\n            recipient_agent = agency._get_agent_by_name(selected_option)\n\n        def handle_file_upload(file_list):\n            nonlocal message_file_ids\n            nonlocal message_file_names\n            message_file_ids = []\n            message_file_names = []\n            if file_list:\n                try:\n                    for file_obj in file_list:\n                        with open(file_obj.name, \"rb\") as f:\n                            # Upload the file to OpenAI\n                            file = agency.main_thread.client.files.create(\n                                file=f, purpose=\"assistants\"\n                            )\n                        message_file_ids.append(file.id)\n                        message_file_names.append(file.filename)\n                        print(f\"Uploaded file ID: {file.id}\")\n                    return message_file_ids\n                except Exception as e:\n                    print(f\"Error: {e}\")\n                    return str(e)\n\n            return \"No files uploaded\"\n\n        def user(user_message, history):\n            if not user_message:\n                return user_message, history\n\n            if history is None:\n                history = []\n\n            original_user_message = user_message\n\n            # Append the user message with a placeholder for bot response\n            if recipient_agent:\n                user_message = (\n                    f\"👤 User @{recipient_agent.name}:\\n\" + user_message.strip()\n                )\n            else:\n                user_message = f\"👤 User:\" + user_message.strip()\n\n            nonlocal message_file_names\n            if message_file_names:\n                user_message += \"\\n\\n:paperclip: Files:\\n\" + \"\\n\".join(\n                    message_file_names\n                )\n\n            return original_user_message, history + [[user_message, None]]\n\n        def bot(original_message, history, dropdown):\n            nonlocal message_file_ids\n            nonlocal message_file_names\n            nonlocal recipient_agent\n            print(\"Message files: \", message_file_ids)\n            # Replace this with your actual chatbot logic\n            gen = agency.get_completion(\n                message=original_message,\n                message_files=message_file_ids,\n                recipient_agent=recipient_agent,\n                yield_messages=True,\n            )\n\n            message_file_ids = []\n            message_file_names = []\n            try:\n                # Yield each message from the generator\n                for bot_message in gen:\n                    if bot_message.sender_name.lower() == \"user\":\n                        continue\n\n                    # sometimes thread stops before bot message is received\n                    if not bot_message.content:\n                        main_thread = agency.main_thread\n                        content = bot_message.content\n                        num_attempts = 0\n                        while not content or num_attempts < 30:\n                            time.sleep(1)\n                            content = main_thread._get_last_message_text()\n                            num_attempts += 1\n\n                        bot_message.content = content\n\n                    message = bot_message.get_formatted_content()\n\n                    history.append((None, message))\n                    yield \"\", history\n            except StopIteration:\n                # Handle the end of the conversation if necessary\n                pass\n\n        button.click(user, inputs=[msg, chatbot], outputs=[msg, chatbot]).then(\n            bot, [msg, chatbot], [msg, chatbot]\n        )\n        dropdown.change(handle_dropdown_change, dropdown)\n        file_upload.change(handle_file_upload, file_upload)\n        msg.submit(user, [msg, chatbot], [msg, chatbot], queue=False).then(\n            bot, [msg, chatbot], [msg, chatbot]\n        )\n\n        # Enable queuing for streaming intermediate outputs\n        demo.queue()\n\n    # Launch the demo\n    demo.launch(share=False, debug=True)\n    return demo\n```\n\n----------------------------------------\n\nTITLE: LLM-Based Message Validation in Python\nDESCRIPTION: Example of using LLM validator to validate message content against natural language rules. Validates that messages sent to CustomerSupportAgent are related to customer support.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/output-validation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.send_message import SendMessage\nfrom agency_swarm.util.validators import llm_validator\nfrom pydantic import model_validator\n\nclass SendMessageLLMValidation(SendMessage):\n    @model_validator(mode='after')\n    def validate_recipient(self):\n        if self.recipient == \"CustomerSupportAgent\":\n            llm_validator(\n                statement=\"The message is related to customer support.\"\n            )(self.message)\n        return self\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OpenAI Client for Alternative APIs\nDESCRIPTION: Sets up an OpenAI client with a custom base URL to connect Agency Swarm with alternative Assistant API implementations running locally.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport openai\nfrom agency_swarm import set_openai_client\n\nclient = openai.OpenAI(api_key=\"your-api-key\", base_url=\"http://127.0.0.1:8000/\")\n\nset_openai_client(client)\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent with Schema Folder\nDESCRIPTION: Demonstrates how to initialize an Agent with OpenAPI schemas from a folder, including custom API parameters and headers.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/openapi-schemas.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nagent = Agent(\n    name='MyAgent',\n    schemas_folder='schemas',\n    api_params={'api_schema.json': {'param1': 'value1'}},\n    api_headers={'api_schema.json': {'Authorization': 'Bearer token'}}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Test Cases for Python Email Sender Tool\nDESCRIPTION: This example shows how to include a test case for a tool. It demonstrates testing the EmailSender tool by creating an instance with sample data and asserting the expected output.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # Test the EmailSender tool\n    email_sender = EmailSender(\n        chain_of_thought=\"Plan to inform the team about the update.\",\n        recipient=\"user@example.com\",\n        subject=\"Project Update\",\n        body=\"The project is on track.\"\n    )\n    assert email_sender.run() == \"Email sent successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Callbacks for Agency Swarm\nDESCRIPTION: Example demonstrating how to implement load and save callbacks for managing agent settings in a database. This enables settings persistence between deployments and supports multi-user environments.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/deployment-to-production.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef load_settings(user_id):\n    # Load settings from your database using the user_id\n    settings = load_settings_from_db(user_id)\n    return settings\n\ndef save_settings(new_settings):\n    # Save updated settings to your database\n    save_settings_to_db(new_settings)\n\nagency = Agency(\n    ...\n    settings_callbacks={\n        'load': lambda: load_settings(user_id),\n        'save': lambda new_settings: save_settings(new_settings)\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Launching Gradio Interface for Agency Swarm in Python\nDESCRIPTION: This code snippet demonstrates how to open a convenient Gradio interface in the browser using the demo_gradio method. It provides a user-friendly way to interact with the agency.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/running-agency.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nagency.demo_gradio(height=700)\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Langfuse Tracking Options\nDESCRIPTION: Python code demonstrating how to pass additional configuration options when initializing Langfuse tracking, including debug mode, custom host, user ID, or direct API key passing.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Using environment variables with additional options\ninit_tracking(\"langfuse\", debug=True, host=\"custom-host\", user_id=\"user-123\")\n\n# Direct API key passing (useful for multi-user applications)\ninit_tracking(\"langfuse\", public_key=\"your-public-key\", secret_key=\"your-secret-key\")\n```\n\n----------------------------------------\n\nTITLE: Starting Gradio Interface for Agency Swarm with Open-Source Models\nDESCRIPTION: Initializes a Gradio interface using a non-streaming demo method to interact with Agency Swarm using open-source models.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agency\nfrom .demo_gradio import demo_gradio\n\nagency = Agency([ceo])\n\ndemo_gradio(agency)\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Instructions to Agent in Python\nDESCRIPTION: Method to add shared instructions that will be prepended to the agent's specific instructions. This is useful for giving common context or guidelines to multiple agents in an agency.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef add_shared_instructions(self, instructions: str):\n    \"\"\"\n    Adds shared instructions that will be prepended to the agent's instructions.\n    Useful for giving common context to multiple agents.\n\n    Parameters:\n        instructions: Instructions text to add\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Agency Demo with Web Interface\nDESCRIPTION: Shows how to run the Agency Swarm demo using a web interface powered by Gradio.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nagency.demo_gradio(height=900)\n```\n\n----------------------------------------\n\nTITLE: Agent Class Implementation\nDESCRIPTION: Template for creating a new agent class with tools and configuration\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\nfrom agency_swarm.tools.example import ExampleTool\n\nclass AgentName(Agent):\n    def __init__(self):\n        super().__init__(\n            name=\"AgentName\",\n            description=\"Description of the agent\",\n            instructions=\"instructions.md\",\n            tools=[ExampleTool],\n        )\n```\n\n----------------------------------------\n\nTITLE: Starting a Gradio Demo for CAPTCHA Breaking\nDESCRIPTION: Initializes a Gradio demo interface for the CAPTCHA-breaking agency with a specific height. The comment warns not to change the browser window size to ensure proper functioning of the CAPTCHA solver.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Reload the notebook each time you run this cell\n# Additionally, do not change browser window size, or it will not work\nagency.demo_gradio(height=600)\n```\n\n----------------------------------------\n\nTITLE: Configuring a CAPTCHA-Breaking Browsing Agent\nDESCRIPTION: Sets up a browsing agent specifically configured for solving CAPTCHAs. The configuration specifies whether to run the browser in headless mode and could include a Chrome profile path for persistent sessions.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbrowsing_agent = BrowsingAgent(\n    selenium_config={\n        # \"chrome_profile_path\": \"/Users/vrsen/Library/Application Support/Google/Chrome Canary/Profile 5\", # path to your canary chrome profile\n        \"headless\": False,  # set to True if you don't want to see the browser\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Printing Agency Response\nDESCRIPTION: Outputs the response received from the agency after executing the communication between the CEO and agent1.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/azure.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Settings Path\nDESCRIPTION: Example showing how to configure a custom path for the settings.json file that stores agent states and OpenAI assistant configurations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/agency-parameters.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency([ceo], settings_path='my_settings.json')\n```\n\n----------------------------------------\n\nTITLE: Launching Gradio Demo for Agency Chatbot in Python\nDESCRIPTION: This snippet calls the demo_gradio function to launch the Gradio interface for the agency chatbot with a specified height of 900 pixels.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/os_models_with_astra_assistants_api.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndemo_gradio(agency, height=900)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Agency Parameters\nDESCRIPTION: Example of setting default parameters like temperature and token limits for the entire agency. These values can be overridden by individual agent configurations.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agencies/agency-parameters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency([ceo], temperature=0.3, max_prompt_tokens=25000)\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAI Function Schema for Tools in Python\nDESCRIPTION: Class method to generate OpenAI function schema from the tool class. It automatically extracts documentation from class and parameter docstrings to create a compliant tool definition for the OpenAI API.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@classmethod\n@property\ndef openai_schema(cls) -> dict:\n    \"\"\"\n    Generate OpenAI function schema from the tool class.\n    Automatically extracts documentation from class and parameter docstrings.\n\n    The schema includes:\n    - Tool name and description\n    - Parameter definitions with types and descriptions\n    - Required parameters list\n    - Strict validation settings (if enabled)\n\n    Returns:\n        Dictionary containing tool schema in OpenAI format\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Agency Demo in Terminal\nDESCRIPTION: Illustrates how to run the Agency Swarm demo in a terminal environment.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagency.run_demo()\n```\n\n----------------------------------------\n\nTITLE: Configuring MCPServerStdio for Filesystem Access in Agency Swarm\nDESCRIPTION: This snippet demonstrates how to set up an MCPServerStdio connection to the standard MCP filesystem tool using npx. The configuration specifies the server name, command parameters, and caching options.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/mcp-integration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools.mcp import MCPServerStdio\n\nfilesystem_server = MCPServerStdio(\n    # This name determines how the agent accesses the tools (e.g., Filesystem_Server.list_files)\n    name=\"Filesystem_Server\",\n    params={\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \".\"], # Run in current directory\n        # strict is checked within params for Stdio\n        strict=False,\n    },\n    # cache_tools_list is a direct argument for Stdio\n    cache_tools_list=False\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from Local File\nDESCRIPTION: Example of loading and converting an OpenAPI schema from a local JSON file.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/openapi-schemas.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import ToolFactory\n\nwith open(\"schemas/api_schema.json\") as f:\n    tools = ToolFactory.from_openapi_schema(f.read())\n```\n\n----------------------------------------\n\nTITLE: Patching OpenAI Client with Astra DB in Python\nDESCRIPTION: This snippet patches the OpenAI client with Astra DB, loads environment variables, and sets up the OpenAI client for Agency Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/os_models_with_astra_assistants_api.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom astra_assistants import patch\nfrom dotenv import load_dotenv\nfrom openai import OpenAI\n\nfrom agency_swarm import set_openai_client\n\nload_dotenv()\n\nclient = patch(OpenAI())\n\nset_openai_client(client)\n```\n\n----------------------------------------\n\nTITLE: Creating Tools from OpenAPI Schemas\nDESCRIPTION: Shows how to convert OpenAPI schemas into Agency Swarm tools using the ToolFactory, both from local files and via requests.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.tools import ToolFactory\n# using local file\nwith open(\"schemas/your_schema.json\") as f:\n    tools = ToolFactory.from_openapi_schema(\n        f.read(),\n    )\n\n# using requests\ntools = ToolFactory.from_openapi_schema(\n    requests.get(\"https://api.example.com/openapi.json\").json(),\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Agency Swarm Dependencies\nDESCRIPTION: Install required Python packages including agency-swarm, selenium, webdriver-manager, selenium_stealth and gradio using pip.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/genesis_agency.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install agency-swarm selenium webdriver-manager selenium_stealth gradio\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in Python\nDESCRIPTION: Demonstrates how to set the OpenAI API key using the Agency Swarm framework's set_openai_key function.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/from-scratch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom agency import set_openai_key\nset_openai_key(\"YOUR_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Importing Agents with CLI\nDESCRIPTION: CLI command for importing existing agents from local files into your agency, specifying the agent name and destination directory.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nagency-swarm import-agent --name \"AgentName\" --destination \"/path/to/directory\"\n```\n\n----------------------------------------\n\nTITLE: Defining Input Fields for a Custom Tool\nDESCRIPTION: Uses Pydantic Field to define the inputs for a Calculator tool, specifying a required mathematical expression with a descriptive field annotation.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/step-by-step-guide.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nexpression: str = Field(..., description=\"The mathematical expression to evaluate.\")\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Agents Using CLI\nDESCRIPTION: Command for importing pre-built agents such as Devid (Software Developer) or BrowsingAgent to the local environment using the agency-swarm CLI.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nagency-swarm import-agent --name \"Devid\" --destination \"./\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Agent and Resources in Python\nDESCRIPTION: Method to delete the agent and all associated resources. This includes the OpenAI assistant, uploaded files, and settings, ensuring proper cleanup of allocated resources.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/api.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef delete(self):\n    \"\"\"\n    Deletes the agent and all associated resources.\n    This includes the OpenAI assistant, uploaded files, and settings.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key\nDESCRIPTION: Set up the OpenAI API key for Agency Swarm using the set_openai_key function.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/genesis_agency.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import set_openai_key\n\nset_openai_key(\"YOUR_OPENAI_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Special Types in Python for Command Execution Tool\nDESCRIPTION: This snippet shows how to use special types to restrict agent input. It defines a RunCommand class that uses a Literal type to limit the command field to specific values ('start' or 'stop').\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/tools/custom-tools/best-practices.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\nclass RunCommand(BaseTool):\n    \"\"\"\n    Execute predefined system commands.\n    \"\"\"\n    command: Literal[\"start\", \"stop\"] = Field(..., description=\"Command to execute: 'start' or 'stop'.\")\n\n    def run(self):\n        if self.command == \"start\":\n            # Start command logic\n            pass\n        elif self.command == \"stop\":\n            # Stop command logic\n            pass\n        else:\n            raise ValueError(\"Invalid command\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Database Path for Local Tracking\nDESCRIPTION: Python code demonstrating how to specify a custom database path when initializing local tracking in Agency Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ninit_tracking(\"local\", db_path=\"path/to/your/database.db\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AgentOps Tracking with Direct API Key\nDESCRIPTION: Python code showing how to initialize AgentOps tracking by directly passing the API key, which is useful for multi-user applications.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ninit_tracking(\"agentops\", api_key=\"your-agentops-api-key\")\n```\n\n----------------------------------------\n\nTITLE: Importing Genesis Agency\nDESCRIPTION: Import the GenesisAgency class from the agency_swarm.agency.genesis module.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/genesis_agency.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm.agency.genesis import GenesisAgency\n```\n\n----------------------------------------\n\nTITLE: Creating Agency Instance with Thread and Settings Management\nDESCRIPTION: Initializes an Agency instance with configured agents, threading mode, and callback functions for thread and settings management.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/agency_async.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency(\n    [ceo, [ceo, test]],\n    async_mode=\"threading\",  # only threading is supported for now\n    threads_callbacks={\"load\": load_threads, \"save\": save_threads},\n    settings_callbacks={\"load\": load_settings, \"save\": save_settings},\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Module Path to System Path\nDESCRIPTION: Inserts the parent directory into the system path to allow importing modules from the parent directory. This is needed for accessing the Agency-Swarm package if it's not installed globally.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nsys.path.insert(0, \"../\")\n```\n\n----------------------------------------\n\nTITLE: Creating Genesis Agency Instance\nDESCRIPTION: Initialize a new instance of the GenesisAgency class.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/genesis_agency.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntest_agency = GenesisAgency()\n```\n\n----------------------------------------\n\nTITLE: Installing Agency-Swarm and Dependencies\nDESCRIPTION: Installs the required packages for Agency-Swarm including the core library, Selenium for web automation, webdriver-manager, selenium_stealth for avoiding detection, and Gradio for creating interactive demos.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install agency-swarm selenium webdriver-manager selenium_stealth gradio\n```\n\n----------------------------------------\n\nTITLE: Configuring File Search Options for Agency Swarm Agents\nDESCRIPTION: Demonstrates file search configuration setup with custom parameters for maximum results and ranking options. These settings control how the agent searches through files for information.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/core-framework/agents/advanced-configuration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import Agent\n\nagent = Agent(\n    name='MyAgent',\n    file_search={\n        'max_num_results': 25,\n        'ranking_options': {\n            \"score_threshold\": 0.5,\n            \"ranker\": \"auto\"\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Agency Swarm to Python Path\nDESCRIPTION: This code adds the local 'agency-swarm' directory to the Python system path for importing.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/os_models_with_astra_assistants_api.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nsys.path.append(\"../agency-swarm\")\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Definition\nDESCRIPTION: Specifies required Python packages and their version constraints for project installation. Includes libraries for data modeling, diff comparisons, docstring parsing, JSON handling, OpenAI integration, data validation, environment configuration, rich text formatting, and terminal coloring.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndatamodel-code-generator==0.28.5\ndeepdiff==6.7.1\ndocstring_parser==0.16\njsonref==1.1.0\nopenai>=1.66.0,<2.0.0\npydantic>=2.8.2,<2.12.0\npython-dotenv==1.0.1\nrich>=13.9.4\ntermcolor>=2.3.0\nmcp>=1.6.0\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Tracking in Agency Swarm\nDESCRIPTION: Python code to initialize local tracking in Agency Swarm, which creates a SQLite database in the current directory to store tracking data.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom agency_swarm import init_tracking\ninit_tracking(\"local\")\n```\n\n----------------------------------------\n\nTITLE: Creating Agent Templates with CLI\nDESCRIPTION: Command to create a structured environment for a new agent, including specifying the agent name, description, path, and whether to use text files instead of markdown.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nagency-swarm create-agent-template --name \"AgentName\" --description \"Agent Description\" [--path \"/path/to/directory\"] [--use_txt]\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment using venv\nDESCRIPTION: This command creates a Python virtual environment named 'venv' in your project directory. Virtual environments help isolate project dependencies.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/installation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Model Provider API Keys to Environment Variables\nDESCRIPTION: Configures API keys for multiple model providers including Perplexity AI, Anthropic, Together, and Groq to be used with Astra Assistants API.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nPERPLEXITYAI_API_KEY=your_perplexityai_api_key\nANTHROPIC_API_KEY=your_anthropic_api_key\nTOGETHER_API_KEY=your_together_api_key\nGROQ_API_KEY=your_groq_api_key\n```\n\n----------------------------------------\n\nTITLE: Installing Astra Assistants and Gradio in Python\nDESCRIPTION: This snippet installs the required packages 'astra-assistants' and 'gradio' using pip.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/os_models_with_astra_assistants_api.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install astra-assistants gradio\n```\n\n----------------------------------------\n\nTITLE: Launching Gradio Demo Interface\nDESCRIPTION: Launch the Gradio demo interface for the Agency Swarm instance.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/genesis_agency.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntest_agency.demo_gradio()\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Mac/Linux\nDESCRIPTION: This command activates the Python virtual environment on Mac or Linux systems. It modifies your shell's environment variables to use the virtual environment's Python interpreter.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/installation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Astra Assistants API and Gradio\nDESCRIPTION: Command to install the required Python packages for working with Astra Assistants API and creating a Gradio interface.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install astra-assistants-api gradio\n```\n\n----------------------------------------\n\nTITLE: Installing Langfuse Package\nDESCRIPTION: Command to install the Langfuse package with a specific version to ensure compatibility with Agency Swarm observability features.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install langfuse==2.60.2\n```\n\n----------------------------------------\n\nTITLE: Customizing SendMessage Parameters and Descriptions in Python\nDESCRIPTION: Creates a custom SendMessageTask class that changes the default parameter descriptions to focus on task delegation instead of messaging. This example demonstrates how to adjust the docstring and rename the message parameter to task for better semantic fit.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/custom-communication-flows/common-use-cases.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import Field\nfrom agency_swarm.tools.send_message import SendMessageBase\n\nclass SendMessageTask(SendMessageBase):\n    \"\"\"Use this tool to send tasks to other agents within your agency.\"\"\"\n    chain_of_thought: str = Field(\n        ...,\n        description=\"Please think step-by-step about how to solve your current task, provided by the user. Then, break down this task into smaller steps and issue each step individually to the recipient agent via the task parameter.\"\n    )\n    task: str = Field(\n        ...,\n        description=\"Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions. Make sure to include all the relevant information needed to complete the task.\"\n    )\n\n    def run(self):\n        return self._get_completion(message=self.task)\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment in Bash\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated dependency management. Includes instructions for both Unix-based systems and Windows environments.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n```\n\n----------------------------------------\n\nTITLE: Listing Required Python Packages for Selenium Automation\nDESCRIPTION: This snippet lists three essential Python packages for web automation with Selenium. It includes the core Selenium package for browser automation, webdriver-manager for handling driver installation, and selenium_stealth to avoid detection as an automated browser.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/agency_swarm/agents/BrowsingAgent/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nselenium\nwebdriver-manager\nselenium_stealth\n```\n\n----------------------------------------\n\nTITLE: Tool Test Implementation\nDESCRIPTION: Example test case implementation for a custom tool in the framework\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_my_tool_example():\n    tool = MyCustomTool(example_field=\"test value\")\n    result = tool.run()\n    assert \"expected output\" in result\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks\nDESCRIPTION: Setting up pre-commit hooks for code quality checks\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Mintlify Documentation Tools in Bash\nDESCRIPTION: Commands to install the Mintlify CLI globally using npm and preview documentation changes locally. The local documentation server will be available at http://localhost:3000.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing AgentOps Package\nDESCRIPTION: Command to install the AgentOps package with a specific version for integration with Agency Swarm observability features.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install agentops==0.4.6\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands to install project dependencies and development requirements\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Closing Gradio Demo\nDESCRIPTION: Closes the Gradio demo interface to free up resources. This should be called when you're done using the demo to prevent resource leaks.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/notebooks/web_browser_agent.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndemo.close()\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies in Bash\nDESCRIPTION: Command to install all test dependencies required for running the Agency Swarm test suite. This ensures all testing tools and libraries are available.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Langfuse Environment Variables\nDESCRIPTION: Commands to set the required environment variables for Langfuse integration, including secret and public keys which can be found on the Langfuse dashboard.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport LANGFUSE_SECRET_KEY=<your-secret-key>\nexport LANGFUSE_PUBLIC_KEY=<your-public-key>\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Commands to create and activate a Python virtual environment for isolated development\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest in Bash\nDESCRIPTION: Command to run the Agency Swarm test suite using Pytest. This executes all tests to verify that functionality works as expected.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to the Repository in Bash\nDESCRIPTION: Commands to stage and commit your changes to the local git repository. Includes a commit message format that describes the type of change being made.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Add [feature]: Description\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a YouTube video within a Markdown document using an iframe. It includes responsive width settings and custom styling for border radius.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/getting-started/cursor-ide.mdx#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  width=\"100%\"\n  height=\"400\"\n  src=\"https://www.youtube.com/embed/Og73plUTabs\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n  style={{ borderRadius: \"10px\" }}\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Installing Tiktoken for Local Tracking\nDESCRIPTION: Command to install the tiktoken package required for token counting when using local tracking in Agency Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install tiktoken\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Bash\nDESCRIPTION: Command to create and switch to a new git branch for feature development. This keeps your changes isolated from the main branch until they're ready for submission.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment on Windows\nDESCRIPTION: This command activates the Python virtual environment on Windows systems. It runs the activation script to modify your shell's environment variables.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/welcome/installation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvenv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Structuring Example Project Cards in Markdown\nDESCRIPTION: This snippet shows how to create a grid of example project cards using markdown and custom card components. Each card includes a title, link, icon, and brief description for different Agency Swarm example projects.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/tutorials/tutorials.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={3}>\n  <Card\n    title=\"Web Dev Crafters\"\n    href=\"https://github.com/VRSEN/agency-swarm-lab/tree/main/WebDevCrafters\"\n    icon=\"laptop-code\"\n    iconType=\"duotone\"\n  >\n    Build responsive web apps using Next.js and Material UI.\n  </Card>\n\n  <Card\n    title=\"Code Guardians Agency\"\n    href=\"https://github.com/VRSEN/agency-swarm-lab/tree/main/CodeGuardiansAgency\"\n    icon=\"shield-halved\"\n    iconType=\"duotone\"\n  >\n    Automated code reviews on pull requests using GitHub Actions.\n  </Card>\n\n  <Card\n    title=\"QA Testing with Vision\"\n    href=\"https://youtu.be/Yidy_ePo7pE\"\n    icon=\"magnifying-glass\"\n    iconType=\"duotone\"\n  >\n    Use GPT-4 Vision for QA testing.\n  </Card>\n\n  <Card\n    title=\"Genesis Agency\"\n    href=\"https://youtu.be/qXxO7SvbGs8\"\n    icon=\"leaf\"\n    iconType=\"duotone\"\n  >\n    Create custom agents.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Langchain Package for Observability\nDESCRIPTION: Command to install the Langchain package which is required for using observability features in Agency Swarm.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/observability.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langchain\n```\n\n----------------------------------------\n\nTITLE: Setting Up Agency Swarm Repository\nDESCRIPTION: Initial steps to clone the repository and set up the local development environment\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/VRSEN/agency-swarm.git\ncd agency-swarm\n```\n\n----------------------------------------\n\nTITLE: Installing Agency Swarm Dependencies in Bash\nDESCRIPTION: Command to install the required development packages for Agency Swarm using pip. This installs all dependencies specified in the requirements-dev.txt file.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Older Version of Agency Swarm for Compatibility\nDESCRIPTION: Installs a specific older version of Agency Swarm (0.1.7) that is compatible with projects that don't yet support streaming and Assistants V2.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/additional-features/open-source-models.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install agency-swarm==0.1.7\n```\n\n----------------------------------------\n\nTITLE: Structuring Tutorial Cards in Markdown\nDESCRIPTION: This snippet demonstrates how to create a grid of tutorial cards using markdown and custom card components. Each card includes a title, link, icon, and description for different Agency Swarm tutorials.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/tutorials/tutorials.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={3}>\n  <Card\n    title=\"Quick Start: Deploy AI Agents\"\n    href=\"https://www.youtube.com/watch?v=53_e3lmk6Mo\"\n    icon=\"rocket\"\n    iconType=\"duotone\"\n  >\n    Deploy AI agents in your business using our template. Covers strategies, best practices, and examples.\n  </Card>\n\n  <Card\n    title=\"Build AI Agents in Plain English\"\n    href=\"https://www.youtube.com/watch?v=Og73plUTabs\"\n    icon=\"robot\"\n    iconType=\"duotone\"\n  >\n    Create AI agent teams with Cursor template. Build a content creation agency step-by-step.\n  </Card>\n\n  <Card\n    title=\"Advanced Features Deep Dive\"\n    href=\"https://www.youtube.com/watch?v=AZlPelcATHo\"\n    icon=\"wand-magic-sparkles\"\n    iconType=\"duotone\"\n  >\n    Master async mode, parallel tool calling, and open-source model integration.\n  </Card>\n\n  <Card\n    title=\"5 Innovative AI Agent Projects\"\n    href=\"https://www.youtube.com/watch?v=hb0j9Qn-KjM\"\n    icon=\"brain\"\n    iconType=\"duotone\"\n  >\n    Real-world applications and implementations of AI agents in business automation.\n  </Card>\n\n  <Card\n    title=\"Open Source Model Support\"\n    href=\"https://www.youtube.com/watch?v=Vd-Gtfm_zjw\"\n    icon=\"code-branch\"\n    iconType=\"duotone\"\n  >\n    Integrate open source models and Assistance API v2 features into your projects.\n  </Card>\n\n  <Card\n    title=\"Complete Beginner's Guide\"\n    href=\"https://www.youtube.com/watch?v=MOyl58VF2ak\"\n    icon=\"book-open\"\n    iconType=\"duotone\"\n  >\n    Learn AI agent development from scratch, including building a Social Media Marketing Agency.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring Agency Communication Flow in Python\nDESCRIPTION: Example demonstration of how to define communication flows between agents in Agency Swarm. Shows how to structure agent relationships and shared communication paths using nested arrays.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/agency_swarm/agency/genesis/GenesisCEO/instructions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nagency = Agency([\n    ceo, dev,  # CEO and Developer will be the entry point for communication with the user\n    [ceo, dev],  # CEO can initiate communication with Developer\n    [ceo, va],   # CEO can initiate communication with Virtual Assistant\n    [dev, va]    # Developer can initiate communication with Virtual Assistant\n], shared_instructions='agency_manifesto.md') # shared instructions for all agents\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements\nDESCRIPTION: Lists required Python packages and their versions. Includes LangChain framework components, PyTest for testing, and custom package dependencies.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r requirements.txt\nlangchain==0.3.13\nlangchain-community==0.3.13\nmcp-server-git\npytest\npytest-asyncio\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks in Bash\nDESCRIPTION: Commands to install and set up pre-commit hooks for code quality checks. These hooks run automatically before each commit to ensure code meets quality standards.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub in Bash\nDESCRIPTION: Command to push your local branch and changes to your forked repository on GitHub. This makes your changes available for creating a pull request.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Checking Test Coverage in Bash\nDESCRIPTION: Command to check the test coverage of the Agency Swarm codebase using Pytest with the coverage plugin. This measures how much of the code is covered by tests.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=agency_swarm tests/\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Opening a Pull Request in Markdown\nDESCRIPTION: Markdown guidelines for creating an effective pull request on GitHub. Specifies requirements for providing a clear title, description, and referencing related issues.\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/docs/contributing/contributing.mdx#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- Provide a concise title and description.\n- Reference related issues.\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite\nDESCRIPTION: Commands to execute the test suite and check test coverage\nSOURCE: https://github.com/vrsen/agency-swarm/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest\npytest --cov=agency_swarm tests/\n```"
  }
]