[
  {
    "owner": "graphql-dotnet",
    "repo": "graphql-dotnet",
    "content": "TITLE: Implementing User-Based Throttling with GraphQL Complexity in C#\nDESCRIPTION: Comprehensive implementation of a user-based throttling system using GraphQL complexity analysis. This example shows how to identify users, track their complexity usage, and enforce throttling limits similar to GitHub's API approach.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\ncomplexityConfig.ValidateComplexityDelegate = async (context) =>\n{\n    // Skip throttling if the query has already exceeded complexity limits\n    if (context.Error != null)\n        return;\n\n    var services = context.ValidationContext.RequestServices!;\n\n    // Get the authenticated user, or use the IP address if unauthenticated\n    var user = context.User;\n    string key;\n    if (user?.Identity?.IsAuthenticated == true)\n    {\n        // For authenticated users, use the user ID\n        key = \"name:\" + user.Identity.Name;\n    }\n    else\n    {\n        // For unauthenticated users, use the IP address\n        var httpContext = services.GetRequiredService<IHttpContextAccessor>().HttpContext!;\n        key = \"ip:\" + httpContext.Connection.RemoteIpAddress.ToString();\n    }\n\n    // Pull your throttling service (e.g. Polly) from the DI container\n    var throttlingService = services.GetRequiredService<IThrottlingService>();\n\n    // Throttle the request based on the complexity, subtracting the complexity from the user's limit\n    var (allow, remaining) = await throttlingService.ThrottleAsync(key, context.TotalComplexity);\n\n    // Get the current HttpContext\n    var httpContext = services.GetRequiredService<IHttpContextAccessor>().HttpContext!;\n\n    // Add a header indicating the remaining throttling limit\n    httpContext.Response.Headers[\"X-RateLimit-Remaining\"] = remaining.ToString();\n\n    // Report an error if the user has exceeded their limit\n    if (!allow)\n    {\n        context.Error = new ValidationError($\"Query complexity of {context.TotalComplexity} exceeded throttling limit. Remaining: {remaining}\");\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Request for GraphQL Mutation\nDESCRIPTION: This snippet illustrates the JSON structure for a GraphQL mutation request. It includes the mutation query and variables for creating a human entity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"mutation ($human:HumanInput!){ createHuman(human: $human) { id name } }\",\n  \"variables\": {\n    \"human\": {\n      \"name\": \"Boba Fett\",\n      \"homePlanet\": \"Kamino\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation on Input Object Fields in GraphQL.NET\nDESCRIPTION: Examples of field-level validation on GraphQL input objects using the Validate method. Demonstrates validating string length, numeric range checks, and custom validation logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// for an input object graph type\n\nField(x => x.FirstName)\n    .Validate(value =>\n    {\n        if (((string)value).Length >= 10)\n            throw new ArgumentException(\"Length must be less than 10 characters.\");\n    });\n\nField(x => x.Age)\n    .Validate(value =>\n    {\n        if ((int)value < 18)\n            throw new ArgumentException(\"Age must be 18 or older.\");\n    });\n\nField(x => x.Password)\n    .Validate(value =>\n    {\n        VerifyPasswordComplexity((string)value);\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Field-Specific Extension Methods with IFieldMetadataWriter\nDESCRIPTION: Shows how to implement an extension method using IFieldMetadataWriter interface to add a Federation '@requires' directive to a GraphQL field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// adds the GraphQL Federation '@requires' directive to the field\npublic static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string fields)\n    where TMetadataWriter : IFieldMetadataWriter\n    => fieldType.ApplyDirective(PROVIDES_DIRECTIVE, d => d.AddArgument(new(FIELDS_ARGUMENT) { Value = fields }));\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema First Approach in GraphQL.NET\nDESCRIPTION: Demonstrates the Schema-first approach using GraphQL schema language. It defines domain classes that map to the schema types and uses the GraphQLMetadata attribute to customize the mapping.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  [GraphQLMetadata(\"hero\")]\n  public Droid GetHero()\n  {\n    return new Droid { Id = \"1\", Name = \"R2-D2\" };\n  }\n}\n\nvar schema = Schema.For(@\"\n  type Droid {\n    id: String!\n    name: String!\n  }\n\n  type Query {\n    hero: Droid\n  }\n\", _ => {\n    _.Types.Include<Query>();\n});\n\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.Query = \"{ hero { id name } }\";\n});\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hero\": {\n      \"id\": \"1\",\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a flat Query structure in C# with GraphQL .NET\nDESCRIPTION: C# implementation of the flat Query structure using GraphQL .NET's ObjectGraphType. All fields are defined directly on the Query class.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-organization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Query : ObjectGraphType\n{\n  public Query()\n  {\n    Name = \"Query\";\n    Field<CustomerGraphType>(\"customer\").Arguments(...).Resolve(...);\n    Field<OrderGraphType>(\"order\").Arguments(...).Resolve(...);\n    Field<ListGraphType<ProductGraphType>>(\"products\").Arguments(...).Resolve(...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Endpoint in ASP.NET Core Controller\nDESCRIPTION: This code snippet shows the implementation of a GraphQL endpoint in an ASP.NET Core controller. It demonstrates how to use ISchema, IDocumentExecuter, and IGraphQLTextSerializer to handle GraphQL requests and serialize responses.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/transport.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic GraphQLController(ISchema schema, IDocumentExecuter executer, IGraphQLTextSerializer serializer)\n    {\n        _schema = schema;\n        _executer = executer;\n        _serializer = serializer;\n    }\n\n[HttpPost]\npublic async Task<IActionResult> Post([FromBody] GraphQLRequest query)\n    {\n        var result = await _executer.ExecuteAsync(options =>\n            {\n                options.Schema = _schema;\n                options.Query = query.Query;\n            }).ConfigureAwait(false);\n        Response.StatusCode = (int)(result.Executed ? HttpStatusCode.OK : HttpStatusCode.BadRequest);\n        return Content(_serializer.Serialize(result), \"application/graphql-response+json\", System.Text.Encoding.UTF8);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Data Loaders in GraphQL .NET\nDESCRIPTION: Demonstrates how to create custom data loader classes by inheriting from DataLoaderBase<TKey, T>. Includes examples for batch loading single entities and collections of related entities from a database context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    public int Id { get; set; }\n    public string ShipToName { get; set; }\n}\n\npublic class OrderItem\n{\n    public int Id { get; set; }\n    public int OrderId { get; set; }\n    public string ItemName { get; set; }\n}\n\n// similar to BatchDataLoader\npublic class MyOrderDataLoader : DataLoaderBase<int, Order>\n{\n    private readonly MyDbContext _dbContext;\n    public MyOrderDataLoader(MyDbContext dataContext)\n    {\n        _dbContext = dataContext;\n    }\n\n    protected override async Task FetchAsync(IEnumerable<DataLoaderPair<int, Order>> list, CancellationToken cancellationToken)\n    {\n        IEnumerable<int> ids = list.Select(pair => pair.Key);\n        IDictionary<int, Order> data = await _dbContext.Orders.Where(order => ids.Contains(order.Id)).ToDictionaryAsync(x => x.Id, cancellationToken);\n        foreach (DataLoaderPair<int, Order> entry in list)\n        {\n            entry.SetResult(data.TryGetValue(entry.Key, out var order) ? order : null);\n        }\n    }\n}\n\n// similar to CollectionBatchDataLoader\npublic class MyOrderItemsDataLoader : DataLoaderBase<int, IEnumerable<OrderItem>>\n{\n    private readonly MyDbContext _dbContext;\n    public MyOrderItemsDataLoader(MyDbContext dataContext)\n    {\n        _dbContext = dataContext;\n    }\n\n    protected override async Task FetchAsync(IEnumerable<DataLoaderPair<int, IEnumerable<OrderItem>>> list, CancellationToken cancellationToken)\n    {\n        IEnumerable<int> ids = list.Select(pair => pair.Key);\n        IEnumerable<OrderItem> data = await _dbContext.OrderItems.Where(orderItem => ids.Contains(orderItem.OrderId)).ToListAsync(cancellationToken);\n        ILookup<int, OrderItem> dataLookup = data.ToLookup(x => x.OrderId);\n        foreach (DataLoaderPair<int, IEnumerable<OrderItem>> entry in list)\n        {\n            entry.SetResult(dataLookup[entry.Key]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Services with Microsoft Dependency Injection in C#\nDESCRIPTION: This snippet demonstrates how to configure GraphQL services using the Microsoft Dependency Injection container in a typical ASP.NET Core Startup.cs file. It adds the schema, System.Text.Json serializer, and DataLoader to the service collection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddGraphQL(b => b\n        .AddSchema<MySchema>()\n        .AddSystemTextJson()\n        .AddDataLoader()\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Object in C#\nDESCRIPTION: This snippet demonstrates how to implement a mutation object in C# using ObjectGraphType. It defines a createHuman field that accepts a HumanInputType argument and resolves by adding a new human to the data store.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsMutation : ObjectGraphType\n{\n  public StarWarsMutation(StarWarsData data)\n  {\n    Field<HumanType>(\"createHuman\")\n      .Argument<NonNullGraphType<HumanInputType>>(\"human\")\n      .Resolve(context =>\n      {\n        var human = context.GetArgument<Human>(\"human\");\n        return data.AddHuman(human);\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Queries with Parameters in GraphQL.NET\nDESCRIPTION: This example shows how to implement a GraphQL query with parameters. It defines a Droid type and a Query type with a parameterized droid field that accepts an ID parameter to filter results.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  private List<Droid> _droids = new List<Droid>\n  {\n    new Droid { Id = \"123\", Name = \"R2-D2\" }\n  };\n\n  [GraphQLMetadata(\"droid\")]\n  public Droid GetDroid(string id)\n  {\n    return _droids.FirstOrDefault(x => x.Id == id);\n  }\n}\n\nvar schema = Schema.For(@\"\n  type Droid {\n    id: ID\n    name: String\n  }\n\n  type Query {\n    droid(id: ID): Droid\n  }\n\", _ => {\n    _.Types.Include<Query>();\n});\n\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.Query = $\"{{ droid(id: \\\"123\\\") {{ id name }} }}\";\n});\n```\n\n----------------------------------------\n\nTITLE: Using Builder Approach with GraphQL.MicrosoftDI for Scoped Dependencies\nDESCRIPTION: Example using the builder approach from GraphQL.MicrosoftDI that provides a declarative way to specify scoped service dependencies for field resolvers, improving code clarity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphType : ObjectGraphType<Category>\n{\n    public MyGraphType()\n    {\n        Field(\"Name\").Resolve(context => context.Source.Name);\n        Field<ListGraphType<ProductGraphType>>(\"Products\")\n            .Resolve()\n            .WithScope() // creates a service scope as described above; not necessary for serial execution\n            .WithService<MyDbContext>()\n            .ResolveAsync(async (context, db) => await db.Products.Where(x => x.CategoryId == context.Source.Id).ToListAsync());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Example with GraphQL.NET and System.Text.Json\nDESCRIPTION: A simple Hello World example using GraphQL.NET with the System.Text.Json serialization engine. It creates a basic schema with a single query field and executes it to return a greeting.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing GraphQL;\nusing GraphQL.Types;\nusing GraphQL.SystemTextJson;\n\npublic class Program\n{\n  public static async Task Main(string[] args)\n  {\n    var schema = Schema.For(@\"\n      type Query {\n        hello: String\n      }\n    \");\n\n    var json = await schema.ExecuteAsync(_ =>\n    {\n      _.Query = \"{ hello }\";\n      _.Root = new { Hello = \"Hello World!\" };\n    });\n\n    Console.WriteLine(json);\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hello\": \"Hello World!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Authorization Requirements in GraphQL Types using C#\nDESCRIPTION: Shows how to set permissions requirements on a GraphQL type and its fields using the RequirePermission extension method. This approach utilizes the Metadata dictionary available on Fields to set permissions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphType : ObjectGraphType\n{\n  public MyGraphType()\n  {\n    this.RequirePermission(\"READ_ONLY\");\n    Field(x => x.Secret).RequirePermission(\"Admin\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphType-First Approach for GraphQL Arguments in C#\nDESCRIPTION: This code shows how to implement a GraphType-first approach for handling GraphQL arguments in C# using graphql-dotnet. It defines a Droid class, a DroidType class extending ObjectGraphType, and a StarWarsQuery class that sets up the 'droid' field with an 'id' argument.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/arguments.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class DroidType : ObjectGraphType\n{\n  public DroidType()\n  {\n    Field<NonNullGraphType<IdGraphType>>(\"id\");\n    Field<StringGraphType>(\"name\");\n  }\n}\n\npublic class StarWarsQuery : ObjectGraphType\n{\n  private List<Droid> _droids = new List<Droid>\n  {\n    new Droid { Id = \"123\", Name = \"R2-D2\" }\n  };\n\n  public StarWarsQuery()\n  {\n    Field<DroidType>(\"droid\")\n      .Argument<IdGraphType>(\"id\")\n      .Resolve(context =>\n      {\n        var id = context.GetArgument<string>(\"id\");\n        return _droids.FirstOrDefault(x => x.Id == id);\n      });\n  }\n}\n\nvar schema = new Schema { Query = new StarWarsQuery() };\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.Query = $\"{{ droid(id: \\\"123\\\") {{ id name }} }}\";\n})\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Dependency Injection in C#\nDESCRIPTION: This C# code demonstrates how to execute a GraphQL query using dependency injection. It shows the process of deserializing the request, executing the query, and serializing the result, using injected instances of IGraphQLTextSerializer, ISchema, and IDocumentExecuter.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/variables.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nTask<string> ExecuteAsync(string request, CancellationToken cancellationToken = default)\n{\n  var request = _serializer.Deserialize<GraphQLRequest>(request);\n  var result = await _documentExecuter.ExecuteAsync(options =>\n  {\n    options.Schema = _schema;\n    options.Query = request.Query;\n    options.OperationName = request.OperationName;\n    options.Variables = request.Variables;\n    options.Extensions = request.Extensions;\n    options.CancellationToken = cancellationToken;\n  });\n  var response = _serializer.Serialize(result);\n  return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Query fields into groups using GraphQL SDL\nDESCRIPTION: A refactored approach that groups related functionality into separate types (Account and Retail), which are then exposed through fields on the Query type. This promotes better organization of the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-organization.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account {\n  customer(id: ID): Customer\n  order(id: ID): Order\n}\n\ntype Retail {\n  products: [Product]\n}\n\ntype Query {\n  account: Account\n  retail: Retail\n}\n```\n\n----------------------------------------\n\nTITLE: Input Error Handling in Field Resolver\nDESCRIPTION: Demonstrates how to throw an ExecutionError for invalid input within a field resolver in GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nField<NonNullGraphType<OrderGraph>>(\"order\")\n    .Argument<NonNullGraphType<IntGraphType>>(\"id\")\n    .Resolve(context =>\n    {\n        var order = _orderService.GetById(context.GetArgument<int>(\"id\"));\n        if (order == null)\n            throw new ExecutionError(\"Invalid order id\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Specific Complexity Impact\nDESCRIPTION: Examples of configuring complexity impact for specific fields using both code-first and schema-first approaches.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Code-first\nusersField.WithComplexityImpact(\n    fieldImpact: 1,\n    childImpactMultiplier: 100); // Assume the users field returns 100 items on average\n\n// Schema-first / type-first:\n[Complexity(fieldImpact: 1, childImpactMultiplier: 100)]\npublic static IEnumerable<User> Users([FromServices] IUserService userService) => userService.GetUsers();\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Batching DataLoader in GraphQL .NET Query Type\nDESCRIPTION: Example of using a DataLoader without batching for caching results. This implementation injects IDataLoaderContextAccessor to access the DataLoader context and creates a loader that caches user data after the first request.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class QueryType : ObjectGraphType\n{\n    // Inject the IDataLoaderContextAccessor to access the current DataLoaderContext\n    public QueryType(IDataLoaderContextAccessor accessor, IUsersStore users)\n    {\n        Field<ListGraphType<UserType>, IEnumerable<User>>()\n            .Name(\"Users\")\n            .Description(\"Get all Users\")\n            .ResolveAsync(ctx =>\n            {\n                // Get or add a loader with the key \"GetAllUsers\"\n                var loader = accessor.Context.GetOrAddLoader(\"GetAllUsers\",\n                    () => users.GetAllUsersAsync());\n\n                // Prepare the load operation\n                // If the result is cached, a completed Task<IEnumerable<User>> will be returned\n                return loader.LoadAsync();\n            });\n    }\n}\n\npublic interface IUsersStore\n{\n\tTask<IEnumerable<User>> GetAllUsersAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating an EnumerationGraphType in GraphQL.NET\nDESCRIPTION: Shows how to manually define a GraphQL enumeration type by adding enum values with their names, backing values, and descriptions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EpisodeEnum : EnumerationGraphType\n{\n    public EpisodeEnum()\n    {\n        Name = \"Episode\";\n        Description = \"One of the films in the Star Wars Trilogy.\";\n        Add(\"NEWHOPE\", 4, \"Released in 1977.\");\n        Add(\"EMPIRE\", 5, \"Released in 1980.\");\n        Add(\"JEDI\", 6, \"Released in 1983.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Attributes for Type-First GraphQL Schemas\nDESCRIPTION: Example of creating a custom validation attribute for type-first schemas in GraphQL.NET. Demonstrates how to implement a MaxLength validation attribute that works with the argument validation system.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// for AutoRegisteringObjectGraphType<MyClass>\n\npublic class MyClass\n{\n    public static string TestMe([MyMaxLength(5)] string value) => value;\n}\n\nprivate class MyMaxLength : GraphQLAttribute\n{\n    private readonly int _maxLength;\n    public MyMaxLength(int maxLength)\n    {\n        _maxLength = maxLength;\n    }\n\n    public override void Modify(ArgumentInformation argumentInformation)\n    {\n        if (argumentInformation.TypeInformation.Type != typeof(string))\n        {\n            throw new InvalidOperationException(\"MyMaxLength can only be used on string arguments.\");\n        }\n    }\n\n    public override void Modify(QueryArgument queryArgument)\n    {\n        queryArgument.Validate(value =>\n        {\n            if (((string)value).Length > _maxLength)\n            {\n                throw new ArgumentException($\"Value is too long. Max length is {_maxLength}.\");\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema First Approach with Nested Types in GraphQL.NET\nDESCRIPTION: Advanced example of Schema-first approach with nested types. It shows how to define relationships between types and use the FromSource attribute to access the source object in resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Character\n{\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  [GraphQLMetadata(\"hero\")]\n  public Droid GetHero()\n  {\n    return new Droid { Id = \"1\", Name = \"R2-D2\" };\n  }\n}\n\n[GraphQLMetadata(\"Droid\", IsTypeOf=typeof(Droid))]\npublic class DroidType\n{\n  public string Id([FromSource] Droid droid) => droid.Id;\n  public string Name([FromSource] Droid droid) => droid.Name;\n\n  // these two parameters are optional\n  // IResolveFieldContext provides contextual information about the field\n  public Character Friend(IResolveFieldContext context, [FromSource] Droid source)\n  {\n    return new Character { Name = \"C3-PO\" };\n  }\n}\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var schema = Schema.For(@\"\n          type Droid {\n            id: String!\n            name: String!\n            friend: Character\n          }\n\n          type Character {\n            name: String!\n          }\n\n          type Query {\n            hero: Droid\n          }\n        \", _ =>\n        {\n            _.Types.Include<DroidType>();\n            _.Types.Include<Query>();\n        });\n\n        var json = await schema.ExecuteAsync(_ =>\n        {\n            _.Query = \"{ hero { id name friend { name } } }\";\n        });\n\n        Console.WriteLine(json);\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hero\": {\n      \"id\": \"1\",\n      \"name\": \"R2-D2\",\n      \"friend\": {\n        \"name\": \"C3-PO\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Scope Within Field Resolver in GraphQL .NET\nDESCRIPTION: Example showing how to create a service scope within a field resolver to safely use a scoped service (like a database context) while maintaining thread safety with a singleton schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsQuery : ObjectGraphType\n{\n    public StarWarsQuery()\n    {\n        Field<DroidType>(\"hero\")\n            .Resolve(context =>\n            {\n                using var scope = context.RequestServices.CreateScope();\n                var services = scope.ServiceProvider;\n                return services.GetRequiredService<MyDbContext>().Droids.Find(1);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema-First Approach with GraphQL.NET\nDESCRIPTION: This example demonstrates the schema-first approach using GraphQL schema language. It defines a Droid type and a Query type with a droid field, then executes a query to retrieve droid data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  [GraphQLMetadata(\"droid\")]\n  public Droid GetDroid()\n  {\n    return new Droid { Id = \"123\", Name = \"R2-D2\" };\n  }\n}\n\nvar schema = Schema.For(@\"\n  type Droid {\n    id: ID\n    name: String\n  }\n\n  type Query {\n    droid: Droid\n  }\n\", _ => {\n    _.Types.Include<Query>();\n});\n\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.Query = \"{ droid { id name } }\";\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Hello World Query with GraphQL.NET\nDESCRIPTION: A simple example showing how to create a GraphQL schema using Schema.For with a basic hello world query. This demonstrates the schema-first approach and requires the GraphQL.SystemTextJson package for JSON serialization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing GraphQL;\nusing GraphQL.Types;\nusing GraphQL.SystemTextJson; // First add PackageReference to GraphQL.SystemTextJson\n\nvar schema = Schema.For(@\"\n  type Query {\n    hello: String\n  }\n\");\n\nvar root = new { Hello = \"Hello World!\" };\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.Query = \"{ hello }\";\n  _.Root = root;\n});\n\nConsole.WriteLine(json);\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection with Singleton Data Loaders\nDESCRIPTION: Shows how to use constructor injection to inject a singleton data loader into a GraphQL query type, simplifying access to the data loader in field resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n    public class MyQuery : ObjectGraphType\n    {\n        public MyQuery(MyOrderDataLoader loader)\n        {\n            Field<OrderType, Order>(\"Order\")\n                .Argument<IdGraphType>(\"id\")\n                .ResolveAsync(context =>\n                {\n                    return loader.LoadAsync(context.GetArgument<int>(\"id\"));\n                });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory-based Document Cache for GraphQL in C#\nDESCRIPTION: Implementation of a document cache using in-memory storage. Caches parsed GraphQL documents to avoid repeated parsing operations. Provides methods for cache retrieval, storage, and configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class MemoryDocumentCache : GraphQL.DI.IConfigureExecution, System.IDisposable\n{\n    public MemoryDocumentCache() { }\n    public MemoryDocumentCache(Microsoft.Extensions.Options.IOptions<GraphQL.Caching.MemoryDocumentCacheOptions> options) { }\n    protected MemoryDocumentCache(Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache, bool disposeMemoryCache, Microsoft.Extensions.Options.IOptions<GraphQL.Caching.MemoryDocumentCacheOptions> options) { }\n    public virtual float SortOrder { get; }\n    protected virtual GraphQL.ExecutionResult CreateExecutionResult(GraphQL.ExecutionError error) { }\n    public virtual void Dispose() { }\n    public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }\n    protected virtual System.Threading.Tasks.ValueTask<GraphQLParser.AST.GraphQLDocument?> GetAsync(GraphQL.ExecutionOptions options) { }\n    [System.Obsolete(\"This method is obsolete and will be removed in a future version. Use GetMemoryCac\" +\n        \"heEntryOptions(ExecutionOptions, GraphQLDocument) instead.\")]\n    protected virtual Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions GetMemoryCacheEntryOptions(GraphQL.ExecutionOptions options) { }\n    protected virtual Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions GetMemoryCacheEntryOptions(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument document) { }\n    protected virtual System.Threading.Tasks.ValueTask SetAsync(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a C# Subscription Resolver with GraphQL .NET\nDESCRIPTION: C# implementation of a subscription resolver using GraphQL .NET. The class defines a subscription field 'messageAdded' that returns a Message type and uses ResolveStream to provide an IObservable<Message> stream of updates.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/subscriptions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ChatSubscriptions : ObjectGraphType\n{\n  private readonly IChat _chat;\n\n  public ChatSubscriptions(IChat chat)\n  {\n    _chat = chat;\n\n    Field<MessageType, Message>(\"messageAdded\")\n      .ResolveStream(ResolveStream);\n  }\n\n  private IObservable<Message> ResolveStream(IResolveFieldContext context)\n  {\n    return _chat.Messages();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Services with Dependency Injection\nDESCRIPTION: Example of using the AddGraphQL extension method to configure GraphQL services with dependency injection, including system text JSON support and schema registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(builder => builder\n    .AddSystemTextJson()\n    .AddSchema<MySchema>());\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Generated Schema from CLR Types in GraphQL.NET\nDESCRIPTION: Demonstrates how to build a GraphQL schema entirely from CLR types using the new AddAutoSchema feature, showing configuration, execution, and sample schema classes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// sample configuration of DI\nvar services = new ServiceCollection();\nservices.AddGraphQL(b => b\n    .AddAutoSchema<Query>(s => s.WithMutation<Mutation>())\n    .AddSystemTextJson());\nvar provider = services.BuildServiceProvider();\n\n\n// sample execution from DI\nvar result = await provider.GetRequiredService<IDocumentExecuter>().ExecuteAsync(o =>\n{\n    o.RequestServices = provider;\n    o.Schema = provider.GetRequiredService<ISchema>();\n    o.Query = \"{hero}\";\n});\nvar resultString = provider.GetRequiredService<IGraphQLTextSerializer>().Serialize(result);\n// resultString returns the following JSON: {\"data\":{\"hero\":\"Luke Skywalker\"}}\n\n\n// sample schema\npublic class Query\n{\n    public static string Hero => \"Luke Skywalker\";\n    public static IEnumerable<Droid> Droids => new Droid[] { new Droid(\"R2D2\"), new Droid(\"C3PO\") };\n}\n\npublic class Mutation\n{\n    public static string Hero(string name) => name;\n}\n\npublic record Droid(string Name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Data Loaders with Service Scopes\nDESCRIPTION: Demonstrates how to implement a singleton data loader that creates a service scope for database operations, avoiding caching issues by disabling caching in the constructor.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOrderDataLoader : DataLoaderBase<int, Order>\n{\n    private readonly IServiceProvider _rootServiceProvider;\n    public MyOrderDataLoader(IServiceProvider serviceProvider) : base(false)\n    {\n        _rootServiceProvider = serviceProvider;\n    }\n\n    protected override async Task FetchAsync(IEnumerable<DataLoaderPair<int, Order>> list, CancellationToken cancellationToken)\n    {\n        using (var scope = _rootServiceProvider.CreateScope())\n        {\n            MyDbContext dbContext = scope.ServiceProvider.GetRequiredService<MyDbContext>();\n            IEnumerable<int> ids = list.Select(pair => pair.Key);\n            IDictionary<int, Order> data = await dbContext.Orders.Where(order => ids.Contains(order.Id)).ToDictionaryAsync(x => x.Id, cancellationToken);\n            foreach (DataLoaderPair<int, Order> entry in list)\n            {\n                entry.SetResult(data.TryGetValue(entry.Key, out var order) ? order : null);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Document Executer in C#\nDESCRIPTION: Core class for executing GraphQL documents with support for validation, execution strategy selection, and operation handling. Provides both synchronous and asynchronous execution capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class DocumentExecuter : GraphQL.IDocumentExecuter\n{\n    public DocumentExecuter() { }\n    public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator) { }\n    public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Execution.IExecutionStrategySelector executionStrategySelector, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureExecution> configurations) { }\n    protected virtual GraphQL.Execution.ExecutionContext BuildExecutionContext(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.GraphQLOperationDefinition operation, GraphQL.Validation.IValidationResult validationResult, GraphQL.Instrumentation.Metrics metrics) { }\n    public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options) { }\n    protected virtual GraphQLParser.AST.GraphQLOperationDefinition GetOperation(string? operationName, GraphQLParser.AST.GraphQLDocument document) { }\n    protected virtual GraphQL.Execution.IExecutionStrategy SelectExecutionStrategy(GraphQL.Execution.ExecutionContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Type in C# with GraphQL-DotNet\nDESCRIPTION: This code shows how to implement the Droid type in C# using GraphQL-DotNet. It defines all required fields from the Character interface and an additional field, and specifies that it implements the CharacterInterface.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DroidType : ObjectGraphType<Droid>\n{\n  public DroidType(IStarWarsData data)\n  {\n    Name = \"Droid\";\n    Description = \"A mechanical creature in the Star Wars universe.\";\n\n    Field(d => d.Id).Description(\"The id of the droid.\");\n    Field(d => d.Name).Description(\"The name of the droid.\");\n\n    Field<ListGraphType<CharacterInterface>>(\"friends\").Resolve(context => data.GetFriends(context.Source));\n    Field(d => d.PrimaryFunction, nullable: true).Description(\"The primary function of the droid.\");\n\n    Interface<CharacterInterface>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Complexity Calculation Based on Query Arguments in C#\nDESCRIPTION: Implementation of a custom complexity calculation delegate that considers query arguments. This example uses the 'limit' argument to determine the child impact modifier, which affects how complexity scales with nested fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nField<ListGraphType<ProductGraphType>>(\"products\")\n    .Argument<IntGraphType>(\"offset\")\n    .Argument<IntGraphType>(\"limit\")\n    .WithComplexityImpact(context =>\n    {\n        var fieldImpact = 1;\n        var childImpactModifier = context.GetArgument<int>(\"limit\", 20); // use 20 if unspecified\n        return new(fieldImpact, childImpactModifier);\n    });\n```\n\n----------------------------------------\n\nTITLE: Applying Author Directive to a Field in C#\nDESCRIPTION: Example showing how to apply the author directive to a field in a GraphQL.NET query type. The directive is applied with the author's name and email as arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Query : ObjectGraphType\n{\n    public Query()\n    {\n        Field<Human>(\"human\")\n            .Resolve(context => GetHuman(context))\n            .Directive(\"author\", \"name\", \"Tom Pumpkin\", \"email\", \"ztx0673@gmail.com\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition Example\nDESCRIPTION: A sample GraphQL schema definition using the GraphQL schema language. It defines a Droid type with ID and name fields, and a Query type with a hero field that returns a Droid.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Droid {\n  id: String!\n  name: String!\n}\n\ntype Query {\n  hero: Droid\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Implementation with Service Provider\nDESCRIPTION: Example of implementing a custom Schema class that accepts an IServiceProvider in its constructor, demonstrating how to override the default service provider implementation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsSchema : GraphQL.Types.Schema\n{\n    public StarWarsSchema(IServiceProvider provider, StarWarsQuery query, StarWarsMutation mutation)\n        : base(provider)\n    {\n        Query = query;\n        Mutation = mutation;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation Schema with GraphQL\nDESCRIPTION: A complete GraphQL schema using Apollo Federation v2.3. It defines entity types with federation directives for distributed GraphQL architecture, including the _entities query for entity resolution and service configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/SchemaFirstFederationTest.ServiceTest.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"]) {\n  query: Query\n}\n\nscalar _Any\n\ntype Query {\n  _noop: String\n  _service: _Service!\n  _entities(representations: [_Any!]!): [_Entity]!\n}\n\ntype SchemaFirstExternalResolvableTestDto @key(fields: \"id\") {\n  id: Int!\n  external: String @external\n  extended: String! @requires(fields: \"external\")\n}\n\ntype SchemaFirstExternalTestDto @key(fields: \"id\", resolvable: false) {\n  id: Int!\n}\n\ntype SchemaFirstFederatedTestDto @key(fields: \"id\") {\n  id: Int!\n  name: String @deprecated(reason: \"Test deprecation reason 03.\")\n  externalTestId: Int!\n  externalResolvableTestId: Int!\n  externalTest: SchemaFirstExternalTestDto! @deprecated(reason: \"Test deprecation reason 04.\")\n  externalResolvableTest: SchemaFirstExternalResolvableTestDto! @provides(fields: \"external\")\n}\n\ntype _Service {\n  sdl: String\n}\n\nunion _Entity = SchemaFirstExternalResolvableTestDto | SchemaFirstFederatedTestDto\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in GraphQL Queries\nDESCRIPTION: This example demonstrates how to define and use fragments in GraphQL queries. It shows a query that compares two heroes by reusing the same field selection (defined as 'comparisonFields') for both query operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/fragments.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  leftComparison: hero(id: \"1\") {\n    ...comparisonFields\n  }\n  rightComparison: hero(id: \"2\") {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  appearsIn\n  friends {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with Mutation in C#\nDESCRIPTION: This snippet shows how to set up a GraphQL schema in C# that includes both Query and Mutation objects using dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsSchema : Schema\n{\n  public StarWarsSchema(IServiceProvider provider)\n    : base(provider)\n  {\n    Query = provider.Resolve<StarWarsQuery>();\n    Mutation = provider.Resolve<StarWarsMutation>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Timeout Handling in GraphQL.NET\nDESCRIPTION: Demonstrates how to implement custom timeout handling using a delegate. This approach allows for custom logging and error responses when a GraphQL query execution times out.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .WithTimeout(TimeSpan.FromSeconds(30), options =>\n    {\n        // log the timeout error\n        var logger = options.RequestServices!.GetRequiredService<ILogger<MySchema>>();\n        logger.LogError(\"The operation has timed out.\");\n        // return a custom error\n        return new ExecutionResult(new TimeoutError());\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Animal Types\nDESCRIPTION: A complete GraphQL schema that defines types for cats and dogs, including a Pet union type and query operations. The schema includes fields for animal properties like name, weight, and age, along with various query endpoints for retrieving animal data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.Sorted.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Query\n}\n\n\" A cat\"\ntype Cat {\n  \" cat's name\"\n  name: String!\n  weight(\n    \"comment on argument\"\n    inPounds: Boolean): Float!\n}\n\n\" A dog\"\ntype Dog {\n  \" dog's age\"\n  age: Int!\n}\n\n\"Cats with dogs\"\nunion Pet = Cat | Dog\n\ntype Query {\n  allAnimalsCount: [Int!] @deprecated(reason: \"do not touch!\")\n  animal: Pet\n  catsGroups: [[Cat!]!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphType First Approach in GraphQL.NET\nDESCRIPTION: Demonstrates the GraphType-first approach which uses inheritance to define schema types. It creates custom GraphType classes for domain objects and builds a schema using these types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Threading.Tasks;\nusing GraphQL;\nusing GraphQL.Types;\nusing GraphQL.SystemTextJson;\n\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class DroidType : ObjectGraphType<Droid>\n{\n  public DroidType()\n  {\n    Field(x => x.Id).Description(\"The Id of the Droid.\");\n    Field(x => x.Name).Description(\"The name of the Droid.\");\n  }\n}\n\npublic class StarWarsQuery : ObjectGraphType\n{\n  public StarWarsQuery()\n  {\n    Field<DroidType>(\"hero\")\n        .Resolve(context => new Droid { Id = \"1\", Name = \"R2-D2\" });\n  }\n}\n\npublic class Program\n{\n  public static async Task Main(string[] args)\n  {\n    var schema = new Schema { Query = new StarWarsQuery() };\n\n    var json = await schema.ExecuteAsync(_ =>\n    {\n      _.Query = \"{ hero { id name } }\";\n    });\n\n    Console.WriteLine(json);\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hero\": {\n      \"id\": \"1\",\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending UserContext with HTTP User Claims in GraphQL.NET\nDESCRIPTION: Shows how to extend the UserContext class to include the HTTP user's ClaimsPrincipal for authentication and authorization purposes. Uses AddUserContextBuilder from the GraphQL.Server package to populate the context from the HTTP request.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/user-context.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphQLUserContext : Dictionary<string, object?>\n{\n    public ClaimsPrincipal User { get; set; }\n\n    public MyGraphQLUserContext(ClaimsPrincipal user)\n    {\n        User = user;\n    }\n}\n\nservices.AddGraphQL()\n        .AddUserContextBuilder(httpContext => new MyGraphQLUserContext(httpContext.User));\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLBuilderExtensions in C#\nDESCRIPTION: Extension methods for configuring GraphQL builders, including adding auto mappings, document executors, error providers, and execution strategies. Many methods require care with trimming to ensure CLR types are not removed by the compiler.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphQLBuilderExtensions\n{\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"Please ensure that the CLR types used by your schema are not trimmed by the compi\" +\n        \"ler.\")]\n    public static GraphQL.DI.IGraphQLBuilder AddAutoClrMappings(this GraphQL.DI.IGraphQLBuilder builder, bool mapInputTypes = true, bool mapOutputTypes = true) { }\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"Please ensure that the CLR types used by your schema are not trimmed by the compi\" +\n        \"ler.\")]\n    public static GraphQL.DI.IGraphQLBuilder AddAutoSchema<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]  TQueryClrType>(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.IConfigureAutoSchema>? configure = null) { }\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"Please ensure that the graph types used by your schema and their constructors are\" +\n        \" not trimmed by the compiler.\")]\n    public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder) { }\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"Please ensure that the graph types used by your schema and their constructors are\" +\n        \" not trimmed by the compiler.\")]\n    public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder, System.Reflection.Assembly assembly) { }\n    public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityOptions>? action = null) { }\n    public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityOptions, System.IServiceProvider>? action) { }\n    public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder)\n        where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }\n    public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentExecuter> documentExecuterFactory)\n        where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }\n    public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentExecuter documentExecuter)\n        where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }\n    public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n        where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }\n    public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentListener documentListener)\n        where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }\n    public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentListener> documentListenerFactory, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n        where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }\n    public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.ErrorInfoProviderOptions>? action = null) { }\n    public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.ErrorInfoProviderOptions, System.IServiceProvider>? action) { }\n    public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TProvider>(this GraphQL.DI.IGraphQLBuilder builder)\n        where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }\n    public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TProvider> errorInfoProviderFactory)\n        where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }\n    public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, TProvider errorInfoProvider)\n        where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }\n    public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategy<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TExecutionStrategy>(this GraphQL.DI.IGraphQLBuilder builder, GraphQLParser.AST.OperationType operationType)\n        where TExecutionStrategy :  class, GraphQL.Execution.IExecutionStrategy { }\n    public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategy<TExecutionStrategy>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TExecutionStrategy> executionStrategyFactory, GraphQLParser.AST.OperationType operationType)\n        where TExecutionStrategy :  class, GraphQL.Execution.IExecutionStrategy { }\n    public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategy<TExecutionStrategy>(this GraphQL.DI.IGraphQLBuilder builder, TExecutionStrategy executionStrategy, GraphQLParser.AST.OperationType operationType)\n        where TExecutionStrategy :  class, GraphQL.Execution.IExecutionStrategy { }\n    public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategySelector<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TExecutionStrategySelector>(this GraphQL.DI.IGraphQLBuilder builder)\n        where TExecutionStrategySelector :  class, GraphQL.Execution.IExecutionStrategySelector { }\n    public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategySelector<TExecutionStrategySelector>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TExecutionStrategySelector> executionStrategySelectorFactory)\n        where TExecutionStrategySelector :  class, GraphQL.Execution.IExecutionStrategySelector { }\n```\n\n----------------------------------------\n\nTITLE: Vector3 Data Structure Implementation\nDESCRIPTION: Defines the server-side representation of Vector3 with X, Y, Z float coordinates.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic struct Vector3\n{\n    public Vector3(float x, float y, float z)\n    {\n        X = x;\n        Y = y;\n        Z = z;\n    }\n\n    public float X { get; set; }\n    public float Y { get; set; }\n    public float Z { get; set; }       \n}\n```\n\n----------------------------------------\n\nTITLE: Adding Errors to Resolution Context\nDESCRIPTION: Shows how to directly add execution errors to the resolution context instead of throwing them.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nField<DroidType>(\"hero\")\n    .Resolve(context =>\n    {\n        context.Errors.Add(new ExecutionError(\"Error Message\"));\n        return ...;\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing a Field Middleware Class in C#\nDESCRIPTION: Example implementation of the IFieldMiddleware interface that adds metrics tracking to field resolution. The middleware captures performance metrics when enabled for all resolved fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class InstrumentFieldsMiddleware : IFieldMiddleware\n{\n    public ValueTask<object?> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next)\n    {\n        return context.Metrics.Enabled\n            ? ResolveWhenMetricsEnabledAsync(context, next)\n            : next(context);\n    }\n\n    private async ValueTask<object?> ResolveWhenMetricsEnabledAsync(IResolveFieldContext context, FieldMiddlewareDelegate next)\n    {\n        var name = context.FieldAst.Name.StringValue;\n\n        var metadata = new Dictionary<string, object?>\n        {\n            { \"typeName\", context.ParentType.Name },\n            { \"fieldName\", name },\n            { \"returnTypeName\", context.FieldDefinition.ResolvedType!.ToString() },\n            { \"path\", context.Path },\n        };\n\n        using (context.Metrics.Subject(\"field\", name, metadata))\n            return await next(context).ConfigureAwait(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Error Handler Configuration\nDESCRIPTION: Shows how to configure unhandled exception handling using dependency injection with IGraphQLBuilder.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema()\n    .AddUnhandledExceptionHandler(async (context, options) =>\n    {\n        try\n        {\n            await using var scope = options.RequestServices!.CreateAsyncScope();\n            var db = scope.ServiceProvider.GetRequiredService<MyDatabaseContext>();\n            var errorLog = new ErrorLog {\n                Query = options.Query ?? options.Document?.Source.ToString(),\n                DateStamp = DateTime.UtcNow,\n                Message = context.Exception.Message,\n                Details = context.Exception.ToString()\n            };\n            db.ErrorLogs.Add(errorLog);\n            await db.SaveChangesAsync();\n            context.Exception.Data[\"errorLogId\"] = errorLog.Id;\n        }\n        catch\n        {\n        }\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ScalarGraphType in C#\nDESCRIPTION: Defines an abstract ScalarGraphType class with methods for parsing, serializing, and validating scalar values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_185\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class ScalarGraphType : GraphQL.Types.GraphType\n{\n    protected ScalarGraphType() { }\n    public virtual bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public virtual bool CanParseValue(object? value) { }\n    public virtual bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override void Initialize(GraphQL.Types.ISchema schema) { }\n    public virtual bool IsValidDefault(object value) { }\n    protected double ParseDoubleAccordingSpec<TValueNode>(TValueNode node)\n        where TValueNode : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode { }\n    public virtual object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public abstract object? ParseValue(object? value);\n    public virtual object? Serialize(object? value) { }\n    public virtual System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }\n    [System.Diagnostics.CodeAnalysis.DoesNotReturn]\n    protected GraphQLParser.AST.GraphQLValue ThrowASTConversionError(object? value) { }\n    [System.Diagnostics.CodeAnalysis.DoesNotReturn]\n    protected object ThrowLiteralConversionError(GraphQLParser.AST.GraphQLValue input, string? description = null) { }\n    [System.Diagnostics.CodeAnalysis.DoesNotReturn]\n    protected object ThrowSerializationError(object? value) { }\n    [System.Diagnostics.CodeAnalysis.DoesNotReturn]\n    protected object ThrowValueConversionError(object? value) { }\n    public virtual GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Variables\nDESCRIPTION: This snippet shows how to define a GraphQL query that uses variables. It demonstrates the syntax for declaring and using a variable in a GraphQL query.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/variables.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery DroidQuery($droidId: String!) {\n  droid(id: $droidId) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Configuration Extension Methods in C#\nDESCRIPTION: Extension methods for configuring GraphQL execution, schema setup, and validation rules. Includes methods for handling unhandled exceptions, configuring execution options, and schema configuration with both synchronous and asynchronous patterns.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder ConfigureExecution(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, GraphQL.DI.ExecutionDelegate, System.Threading.Tasks.Task<GraphQL.ExecutionResult>> action) { }\n\npublic static GraphQL.DI.IGraphQLBuilder ConfigureSchema(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Types.ISchema> action) { }\n\npublic static GraphQL.DI.IGraphQLBuilder AddUnhandledExceptionHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> unhandledExceptionDelegate) { }\n\npublic static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, bool useForCachedDocuments = false, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n    where TValidationRule : class, GraphQL.Validation.IValidationRule { }\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Authorization Extension Methods\nDESCRIPTION: Defines extension methods for handling permissions in GraphQL.NET. These methods allow checking, setting, and validating permissions on GraphQL types and fields, using the Metadata dictionary to store permission information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/authorization.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class GraphQLExtensions\n{\n  public static readonly string PermissionsKey = \"Permissions\";\n\n  public static bool RequiresPermissions(this IProvideMetadata type)\n  {\n    var permissions = type.GetMetadata<IEnumerable<string>>(PermissionsKey, new List<string>());\n    return permissions.Any();\n  }\n\n  public static bool CanAccess(this IProvideMetadata type, IEnumerable<string> claims)\n  {\n    var permissions = type.GetMetadata<IEnumerable<string>>(PermissionsKey, new List<string>());\n    return permissions.All(x => claims?.Contains(x) ?? false);\n  }\n\n  public static bool HasPermission(this IProvideMetadata type, string permission)\n  {\n    var permissions = type.GetMetadata<IEnumerable<string>>(PermissionsKey, new List<string>());\n    return permissions.Any(x => string.Equals(x, permission));\n  }\n\n  public static void RequirePermission(this IProvideMetadata type, string permission)\n  {\n    var permissions = type.GetMetadata<List<string>>(PermissionsKey);\n\n    if (permissions == null)\n    {\n      permissions = new List<string>();\n      type.Metadata[PermissionsKey] = permissions;\n    }\n\n    permissions.Add(permission);\n  }\n\n  public static FieldBuilder<TSourceType, TReturnType> RequirePermission<TSourceType, TReturnType>(\n      this FieldBuilder<TSourceType, TReturnType> builder, string permission)\n  {\n    builder.FieldType.RequirePermission(permission);\n    return builder;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL.MicrosoftDI Resolver Builder with Data Loaders\nDESCRIPTION: Shows how to use the resolver builder feature from GraphQL.MicrosoftDI package to simplify field resolver implementation with data loaders.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n    public class MyQuery : ObjectGraphType\n    {\n        public MyQuery()\n        {\n            Field<OrderType, Order>(\"Order\")\n                .Argument<NonNullGraphType<IdGraphType>>(\"id\")\n                .Resolve()\n                .WithService<MyOrderDataLoader>()\n                .ResolveAsync((context, loader) =>\n                {\n                    return loader.LoadAsync(context.GetArgument<int>(\"id\"));\n                });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic GraphiQL Integration in ASP.NET Core\nDESCRIPTION: Adds GraphiQL IDE to an ASP.NET Core application at the default path /ui/graphiql using the GraphQL.Server.Ui.GraphiQL package.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/graphiql.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseGraphQLGraphiQL();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Boolean Type in Schema-First Approach\nDESCRIPTION: Example of registering the custom Boolean type with a schema-first approach using Schema.For and RegisterType methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = Schema.For(...);\nschema.RegisterType(new MyBooleanGraphType());\n```\n\n----------------------------------------\n\nTITLE: Implementing a GraphQL Interface in C# with GraphQL-DotNet\nDESCRIPTION: This code demonstrates how to implement the Character interface in C# using GraphQL-DotNet. It defines the fields and their descriptions for the interface.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CharacterInterface : InterfaceGraphType<StarWarsCharacter>\n{\n  public CharacterInterface()\n  {\n    Name = \"Character\";\n    Field(d => d.Id).Description(\"The id of the character.\");\n    Field(d => d.Name).Description(\"The name of the character.\");\n    Field<ListGraphType<CharacterInterface>>(\"friends\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Schema Definition with Apollo Directives\nDESCRIPTION: Complete GraphQL schema definition using Apollo Federation v2.3. Includes schema links, scalar definitions, query types, and multiple data transfer objects with federation directives like @key, @shareable, @inaccessible, @external, @provides, and @requires.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/CodeFirstFederationTest.ServiceTest.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"]) {\n  query: TestQuery\n}\n\nscalar _Any\n\ntype TestQuery {\n  directivesTest: DirectivesTestDto!\n  _service: _Service!\n  _entities(representations: [_Any!]!): [_Entity]!\n}\n\ntype DirectivesTestDto @key(fields: \"id\") @shareable @inaccessible {\n  id: Int!\n  shareable: String! @shareable\n  inaccessible: String! @inaccessible\n  override: String! @override(from: \"OtherSubgraph\")\n  external: String! @external\n  provides: String! @provides(fields: \"foo bar\")\n  requires: String! @requires(fields: \"foo bar\")\n}\n\ntype _Service {\n  sdl: String\n}\n\nunion _Entity = DirectivesTestDto | FederatedTestDto | ExternalResolvableTestDto\n\ntype FederatedTestDto @key(fields: \"id\") {\n  id: Int!\n  name: String! @deprecated(reason: \"Test deprecation reason 01.\")\n  externalTestId: Int!\n  externalResolvableTestId: Int!\n  externalTest: ExternalTestDto! @deprecated(reason: \"Test deprecation reason 02.\")\n  externalResolvableTest: ExternalResolvableTestDto! @provides(fields: \"external\")\n}\n\ntype ExternalTestDto @key(fields: \"id\", resolvable: false) {\n  id: Int!\n}\n\ntype ExternalResolvableTestDto @key(fields: \"id\") {\n  id: Int!\n  external: String! @external\n  extended: String! @requires(fields: \"External\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Auto-Registering Object Type with Method Support\nDESCRIPTION: Shows how to implement an auto-registering object type with async methods, data loaders, and custom argument handling. Includes service injection, cancellation token support, and custom naming.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Name(\"Person\")]\npublic class Human\n{\n    [Id]\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n\n    [Name(\"Orders\")]\n    [Scoped]\n    public async Task<IEnumerable<Order>> GetOrdersAsync(\n        [FromServices] MyDbContext db,\n        CancellationToken token,\n        [Name(\"Sort\")] SortOrder sortOrder = SortOrder.Date)\n    {\n        var query = db.Orders.Where(x => x.HumanId == Id);\n\n        if (sortOrder == SortOrder.Date)\n            query = query.OrderByDesc(x => x.OrderDate);\n\n        return query.ToListAsync(token);\n    }\n}\n\npublic enum SortOrder\n{\n    Date\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Cache with DataLoader in C#\nDESCRIPTION: Implementation of a custom DataLoader that uses IMemoryCache for global caching of Order entities. The loader includes cache key management, expiration settings, and size limitations. It first checks the cache before querying the database and updates the cache with new values. Includes DI configuration for memory cache with a size limit of 10,000 entries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyOrderDataLoader : DataLoaderBase<int, Order>\n{\n    private readonly IServiceProvider _rootServiceProvider;\n    private readonly IMemoryCache _memoryCache;\n    private readonly MemoryCacheEntryOptions _memoryCacheEntryOptions;\n    private const string CACHE_PREFIX = \"ORDER_\";\n\n    public MyOrderDataLoader(IServiceProvider serviceProvider, IMemoryCache memoryCache) : base(false)\n    {\n        _rootServiceProvider = serviceProvider;\n        _memoryCache = memoryCache;\n        _memoryCacheEntryOptions = new MemoryCacheEntryOptions\n        {\n            // specify a maximum lifetime of 5 minutes\n            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5),\n            // set so that the size of the cache can be limited\n            Size = 1,\n        };\n    }\n\n    protected override async Task FetchAsync(IEnumerable<DataLoaderPair<int, Order>> list, CancellationToken cancellationToken)\n    {\n        // create a list of keys that are not in the cache\n        var unMatched = new List<DataLoaderPair<int, Order>>(list.Count());\n        // attempt to match any keys possible from the global cache\n        foreach (var entry in list)\n        {\n            if (_memoryCache.TryGetValue(CACHE_PREFIX + entry.Key, out var value))\n            {\n                entry.SetResult((Order)value);\n            }\n            else\n            {\n                unMatched.Add(entry);\n            }\n        }\n        // process the unmatched keys as usual\n        list = unMatched;\n        using (var scope = _rootServiceProvider.CreateScope())\n        {\n            var dbContext = scope.ServiceProvider.GetRequiredService<MyDbContext>();\n            IEnumerable<int> ids = list.Select(pair => pair.Key);\n            IDictionary<int, Order> data = await dbContext.Orders.Where(order => ids.Contains(order.Id)).ToDictionaryAsync(x => x.Id, cancellationToken);\n            foreach (DataLoaderPair<int, Order> entry in list)\n            {\n                if (data.TryGetValue(entry.Key, out var order))\n                {\n                    // only save the entry in the cache if it was found in the database\n                    _memoryCache.Set(CACHE_PREFIX + entry.Key, order, _memoryCacheEntryOptions);\n                    entry.SetResult(order);\n                }\n                else\n                {\n                    entry.SetResult(null);\n                }\n            }\n        }\n    }\n}\n\n// also, register the memory cache in your DI configuration\n// limit cache to 10,000 entries\nservices.AddSingleton<IMemoryCache>(_ => new MemoryCache(new MemoryCacheOptions { SizeLimit = 10000 }));\n```\n\n----------------------------------------\n\nTITLE: Using DI-based Data Loaders in GraphQL Field Resolvers\nDESCRIPTION: Demonstrates how to access and use custom data loaders from GraphQL field resolvers using the RequestServices property to retrieve the data loader instance.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyQuery : ObjectGraphType\n{\n    public MyQuery()\n    {\n        Field<OrderType, Order>(\"Order\")\n            .Argument<IdGraphType>(\"id\")\n            .ResolveAsync(context =>\n            {\n                // Get the custom data loader\n                var loader = context.RequestServices.GetRequiredService<MyOrderDataLoader>();\n\n                // Add this UserId to the pending keys to fetch.\n                // The execution strategy will trigger the data loader to fetch the data via MyOrderDataLoader.FetchAsync() at the\n                // appropriate time, and the field will be resolved with an instance of Order once FetchAsync()\n                // returns with the batched results\n                return loader.LoadAsync(context.GetArgument<int>(\"id\"));\n            });\n    }\n}\n\npublic class OrderType : ObjectGraphType<Order>\n{\n    public OrderType()\n    {\n        Field(x => x.Id, type: typeof(IdGraphType));\n        Field(x => x.ShipToName);\n        Field<ListGraphType<OrderItemType>, IEnumerable<OrderItem>>(\"Items\")\n            .ResolveAsync(context =>\n            {\n                var loader = context.RequestServices.GetRequiredService<MyOrderItemsDataLoader>();\n                return loader.LoadAsync(context.Source.Id);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Components Extension Methods in C#\nDESCRIPTION: Extension methods for IGraphQLBuilder that provide configuration options for GraphQL.NET components. Includes methods for adding execution strategies, graph type providers, schemas, validators, and serializers with support for different registration lifetimes and factory patterns.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder AddExecutionStrategySelector<TExecutionStrategySelector>(this GraphQL.DI.IGraphQLBuilder builder, TExecutionStrategySelector executionStrategySelector)\n    where TExecutionStrategySelector : class, GraphQL.Execution.IExecutionStrategySelector { }\n\npublic static GraphQL.DI.IGraphQLBuilder AddGraphTypeMappingProvider<TGraphTypeMappingProvider>(this GraphQL.DI.IGraphQLBuilder builder)\n    where TGraphTypeMappingProvider : class, GraphQL.Types.IGraphTypeMappingProvider { }\n\npublic static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n    where TSchema : class, GraphQL.Types.ISchema { }\n\npublic static GraphQL.DI.IGraphQLBuilder AddSerializer<TSerializer>(this GraphQL.DI.IGraphQLBuilder builder)\n    where TSerializer : class, GraphQL.IGraphQLSerializer { }\n```\n\n----------------------------------------\n\nTITLE: Field Middleware with Scoped Dependencies in C#\nDESCRIPTION: Example of a singleton Field Middleware that works with scoped dependencies by resolving them at execution time instead of construction time. This approach works with a singleton schema while still accessing request-scoped services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyFieldMiddleware : IFieldMiddleware\n{\n  private readonly IHttpContextAccessor _accessor;\n  private readonly IMySingletonService _service;\n\n  public MyFieldMiddleware(IHttpContextAccessor accessor, IMySingletonService service)\n  {\n    _accessor = accessor;\n    _service = service;\n  }\n\n  public ValueTask<object?> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next)\n  {\n    var scopedDependency1 = accessor.HttpContext.RequestServices.GetRequiredService<IMyService1>();\n    var scopedDependency2 = accessor.HttpContext.RequestServices.GetRequiredService<IMyService2>();\n    ...\n    return next(context);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query with Enum Arguments in GraphQL.NET\nDESCRIPTION: Shows how to implement a StarWarsQuery that accepts an episode enum argument and demonstrates two ways to retrieve the enum value in the resolver: as an integer backing value or as the actual enum value.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n    public class StarWarsQuery : ObjectGraphType<object>\n    {\n        public StarWarsQuery()\n        {\n            Name = \"Query\";\n\n            Field<ListGraphType<HumanType>>(\"humans\")\n                .Argument<NonNullGraphType<EpisodeEnum>>(\"appearsIn\", \"An episode the human appears in.\")\n                .Resolve(context => \n                {\n                    // episode = 4\n                    var episode = context.GetArgument<int>(\"appearsIn\");\n\n                    // Alternatively, get the argument as an enum. episodeFromEnum = Episodes.NEWHOPE\n                    var episodeFromEnum = context.GetArgument<Episodes>(\"appearsIn\");\n\n                    // full implementation would access data store to get humans by episode.\n                    return default(Human);\n                }\n            );\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Applying Length Directive to Field Argument in GraphQL.NET\nDESCRIPTION: This code shows how to apply the @length directive to a field argument in a GraphQL.NET query object type definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Query : ObjectGraphType\n{\n    public Query()\n    {\n        Field<Human>(\"human\")\n            .Argument<IdGraphType>(\"id\", arg => arg.ApplyDirective(\"length\", \"min\", 2, \"max\", 5));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Validation Rule in GraphQL.NET\nDESCRIPTION: Creates a custom validation rule that checks user authentication and permissions before executing GraphQL operations. The rule verifies if users have the required permissions for accessing specific fields and reports validation errors when unauthorized.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequiresAuthValidationRule : IValidationRule\n{\n  public Task<INodeVisitor> ValidateAsync(ValidationContext context)\n  {\n    var userContext = context.UserContext as GraphQLUserContext;\n    var authenticated = userContext.User?.IsAuthenticated() ?? false;\n\n    return Task.FromResult(new EnterLeaveListener(_ =>\n    {\n      _.Match<Operation>(op =>\n      {\n        if (op.OperationType == OperationType.Mutation && !authenticated)\n        {\n          context.ReportError(new ValidationError(\n              context.Document.Source,\n              \"6.1.1\", // the rule number of this validation error corresponding to the paragraph number from the official specification\n              $\"Authorization is required to access {op.Name}.\",\n              op) { Code = \"auth-required\" });\n        }\n      });\n\n      // this could leak info about hidden fields in error messages\n      // it would be better to implement a filter on the schema so it\n      // acts as if they just don't exist vs. an auth denied error\n      // - filtering the schema is not currently supported\n      _.Match<Field>(fieldAst =>\n      {\n        var fieldDef = context.TypeInfo.GetFieldDef();\n        if (fieldDef.RequiresPermissions() &&\n            (!authenticated || !fieldDef.CanAccess(userContext.User.Claims)))\n        {\n          context.ReportError(new ValidationError(\n              context.Document.Source,\n              \"6.1.1\", // the rule number of this validation error corresponding to the paragraph number from the official specification\n              $\"You are not authorized to run this query.\",\n              fieldAst) { Code = \"auth-required\" });\n        }\n      });\n    }));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing grouped Query structure in C# with GraphQL .NET\nDESCRIPTION: C# implementation of the grouped Query structure using GraphQL .NET. Separate ObjectGraphType classes are created for each group, and the Query class returns empty objects to resolve these fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-organization.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Query : ObjectGraphType\n{\n  public Query()\n  {\n    Name = \"Query\";\n    Field<AccountGroupGraphType>(\"account\").Resolve(context => new {});\n    Field<RetailGroupGraphType>(\"retail\").Resolve(context => new {});\n  }\n}\n\npublic class AccountGroupGraphType : ObjectGraphType\n{\n  public AccountGroupGraphType()\n  {\n    Name = \"Account\";\n    Field<CustomerGraphType>(\"customer\").Arguments(...).Resolve(...);\n    Field<OrderGraphType>(\"order\").Arguments(...).Resolve(...);\n  }\n}\n\npublic class RetailGroupGraphType : ObjectGraphType\n{\n  public RetailGroupGraphType()\n  {\n    Name = \"Retail\";\n    Field<ListGraphType<ProductGraphType>>(\"products\").Arguments(...).Resolve(...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatGraphType Scalar in C#\nDESCRIPTION: Defines the FloatGraphType class that represents the GraphQL Float scalar type. It provides methods for parsing and serializing float values from/to GraphQL representations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_154\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FloatGraphType : GraphQL.Types.ScalarGraphType\n{\n    public FloatGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Null List Field Definition\nDESCRIPTION: Example of defining a field as a List of Non-Null Strings, where the list can be null but cannot contain null values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/lists-non-null.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmyField: [String!]\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Directive in C# for GraphQL.NET\nDESCRIPTION: This code defines a custom directive 'MyDirective' in C# for use with GraphQL.NET. It specifies the directive's name, locations, description, and arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDirective : Directive\n{\n    public MyDirective()\n        : base(\"my\", DirectiveLocation.Field, DirectiveLocation.FragmentSpread, DirectiveLocation.InlineFragment)\n    {\n        Description = \"My super directive\";\n        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<StringGraphType>>\n        {\n            Name = \"secret\",\n            Description = \"Some secret\"\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-One DataLoader Implementation\nDESCRIPTION: Example of implementing a DataLoader for one-to-one relationships using GetOrAddBatchLoader\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderType : ObjectGraphType<Order>\n{\n    // Inject the IDataLoaderContextAccessor to access the current DataLoaderContext\n    public OrderType(IDataLoaderContextAccessor accessor, IUsersStore users)\n    {\n        ...\n\n        Field<UserType, User>()\n            .Name(\"User\")\n            .ResolveAsync(context =>\n            {\n                // Get or add a batch loader with the key \"GetUsersById\"\n                // The loader will call GetUsersByIdAsync for each batch of keys\n                var loader = accessor.Context.GetOrAddBatchLoader<int, User>(\"GetUsersById\", users.GetUsersByIdAsync);\n\n                // Add this UserId to the pending keys to fetch\n                // The execution strategy will trigger the data loader to fetch the data via GetUsersByIdAsync() at the\n                //   appropriate time, and the field will be resolved with an instance of User once GetUsersByIdAsync()\n                //   returns with the batched results\n                return loader.LoadAsync(context.Source.UserId);\n            });\n    }\n}\n\npublic class UserStore : IUsersStore\n{\n    // This will be called by the loader for all pending keys\n    // Note that fetch delegates can accept a CancellationToken parameter or not\n    Task<IDictionary<int, User>> GetUsersByIdAsync(IEnumerable<int> userIds, CancellationToken cancellationToken)\n    {\n        var users = await ... // load data from database\n\n\t\treturn users\n\t\t\t.ToDictionary(x => x.UserId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Null List Field Examples\nDESCRIPTION: JavaScript examples showing valid and invalid values for a List of Non-Null Strings field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/lists-non-null.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmyField: null // valid\nmyField: [] // valid\nmyField: ['a', 'b'] // valid\nmyField: ['a', null, 'b'] // error\n```\n\n----------------------------------------\n\nTITLE: Persisted Document Handler and Options for GraphQL Query Caching\nDESCRIPTION: Implements document persistence functionality for caching GraphQL queries. The handler integrates with execution pipeline to retrieve persisted queries while options control persistence behavior.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\npublic class PersistedDocumentHandler : GraphQL.DI.IConfigureExecution\n{\n    public PersistedDocumentHandler() { }\n    public PersistedDocumentHandler(GraphQL.PersistedDocuments.PersistedDocumentOptions options) { }\n    public virtual float SortOrder { get; }\n    protected virtual GraphQL.ExecutionResult CreateExecutionResult(GraphQL.ExecutionError error) { }\n    public System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }\n}\n\npublic class PersistedDocumentOptions\n{\n    public PersistedDocumentOptions() { }\n    public bool AllowOnlyPersistedDocuments { get; set; }\n    public System.Collections.Generic.HashSet<string?> AllowedPrefixes { get; }\n    public System.Func<GraphQL.ExecutionOptions, string?, string, System.Threading.Tasks.ValueTask<string?>> GetQueryDelegate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Null Fields in GraphQL Type\nDESCRIPTION: Demonstrates how to define a GraphQL type with Non-Null fields using the exclamation mark modifier. The example shows a Character type with a required name and array of episodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/lists-non-null.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n  appearsIn: [Episode]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract GraphType Base Class in C#\nDESCRIPTION: Defines the abstract GraphType base class that serves as the foundation for all GraphQL types in the library. It provides common properties like Name, Description, and DeprecationReason.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_156\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract class GraphType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    protected GraphType() { }\n    public string? DeprecationReason { get; set; }\n    public string? Description { get; set; }\n    public bool IsPrivate { get; set; }\n    public string Name { get; set; }\n    protected bool Equals(GraphQL.Types.IGraphType other) { }\n    public override bool Equals(object? obj) { }\n    public override int GetHashCode() { }\n    public virtual void Initialize(GraphQL.Types.ISchema schema) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldBuilder Methods in C#\nDESCRIPTION: This snippet demonstrates the implementation of various methods in the FieldBuilder class. It includes methods for configuring field arguments, resolvers, types, and metadata for GraphQL fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\npublic class FieldBuilder<TSourceType, TReturnType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata\n{\n    protected FieldBuilder(GraphQL.Types.FieldType fieldType) { }\n    public GraphQL.Types.FieldType FieldType { get; }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument(GraphQL.Types.IGraphType type, string name, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type, string name, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TArgumentGraphType>(string name)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentClrType>(string name, bool nullable = false, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentClrType>(string name, bool nullable, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }\n    [System.Obsolete(\"Please use Action<QueryArgument> parameter from other Argument() method overloads\" +\n        \" to set default value for parameter or use Arguments() method. This method will \" +\n        \"be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType? defaultValue = default, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Arguments(params GraphQL.Types.QueryArgument[] arguments) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Arguments(System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument> arguments) { }\n    [System.Obsolete(\"Please use the WithComplexityImpact method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ComplexityImpact(double impact) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DefaultValue(TReturnType? defaultValue = default) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DependsOn<TService>() { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DeprecationReason(string? deprecationReason) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Description(string? description) { }\n    [System.Obsolete(\"Please use the ApplyDirective method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name) { }\n    [System.Obsolete(\"Please use the ApplyDirective method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }\n    [System.Obsolete(\"Please use the ApplyDirective method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, string argumentName, object? argumentValue) { }\n    [System.Obsolete(\"Please use the ApplyDirective method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, string argument1Name, object? argument1Value, string argument2Name, object? argument2Value) { }\n    [System.Obsolete(\"Please configure the field name by providing the name as an argument to the 'Fiel\" +\n        \"d' method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Name(string name) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ParseValue(System.Func<object, object> parseValue) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(GraphQL.Resolvers.IFieldResolver? resolver) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolve) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolve) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveDelegate(System.Delegate? resolve) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveStream(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.IObservable<TReturnType?>> sourceStreamResolver) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveStreamAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType?>>> sourceStreamResolver) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Type(GraphQL.Types.IGraphType type) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Validate(System.Action<object> validation) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ValidateArguments(System.Action<GraphQL.Validation.FieldArgumentsValidationContext> validation) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ValidateArguments(System.Func<GraphQL.Validation.FieldArgumentsValidationContext, System.Threading.Tasks.ValueTask> validation) { }\n    [System.Obsolete(\"Please use the overload that accepts the name as the first argument. This method \" +\n        \"will be removed in v9.\")]\n    public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(GraphQL.Types.IGraphType type, string name = \"default\") { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complexity Analysis in GraphQL.NET\nDESCRIPTION: Example showing how to configure complexity checks for a GraphQL schema using dependency injection. This code adds a complexity analyzer with a maximum complexity of 200.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/malicious-queries.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection services = ...;\nservices.AddGraphQL(builder => builder\n    .AddSchema<ComplexitySchema>()\n    .AddComplexityAnalyzer(opt => opt.MaxComplexity = 200));\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Services in ASP.NET Core\nDESCRIPTION: Demonstrates registration of GraphQL.NET services and types using Microsoft's dependency injection container. Shows basic service registration pattern for StarWars schema example.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<IDocumentExecuter, DocumentExecuter>();\n    services.AddSingleton<IGraphQLSerializer, GraphQLSerializer>();\n    services.AddSingleton<StarWarsData>();\n    services.AddSingleton<StarWarsQuery>();\n    services.AddSingleton<StarWarsMutation>();\n    services.AddSingleton<HumanType>();\n    services.AddSingleton<HumanInputType>();\n    services.AddSingleton<DroidType>();\n    services.AddSingleton<CharacterInterface>();\n    services.AddSingleton<EpisodeEnum>();\n    services.AddSingleton<ISchema, StarWarsSchema>();\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Tracing Implementation in C#\nDESCRIPTION: Implements Apollo tracing functionality for GraphQL execution including timing and performance metrics.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_117\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApolloTrace\n{\n    public ApolloTrace(System.DateTime start, double durationMs) { }\n    public long Duration { get; }\n    public System.DateTime EndTime { get; }\n    public GraphQL.Instrumentation.ApolloTrace.ExecutionTrace Execution { get; }\n    public GraphQL.Instrumentation.ApolloTrace.OperationTrace Parsing { get; }\n    public System.DateTime StartTime { get; }\n    public GraphQL.Instrumentation.ApolloTrace.OperationTrace Validation { get; }\n    public int Version { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaBuilder Class for GraphQL Schema Construction in C#\nDESCRIPTION: The SchemaBuilder class provides methods to construct a GraphQL schema from type definitions. It includes options for configuring the build process and methods for converting AST nodes to GraphQL.NET types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_201\n\nLANGUAGE: C#\nCODE:\n```\npublic class SchemaBuilder\n{\n    protected readonly System.Collections.Generic.Dictionary<string, GraphQL.Types.IGraphType> _types;\n    public SchemaBuilder() { }\n    public bool AllowUnknownFields { get; set; }\n    public bool AllowUnknownTypes { get; set; }\n    public bool IgnoreComments { get; set; }\n    public bool IgnoreLocations { get; set; }\n    public bool RunConfigurations { get; set; }\n    public System.IServiceProvider ServiceProvider { get; set; }\n    public GraphQL.Utilities.TypeSettings Types { get; }\n    public virtual GraphQL.Types.Schema Build(string typeDefinitions) { }\n    protected virtual GraphQL.Types.Schema CreateSchema() { }\n    protected virtual GraphQL.Types.IGraphType? GetType(string name) { }\n    protected virtual void PreConfigure(GraphQL.Types.Schema schema) { }\n    protected virtual GraphQL.Types.QueryArgument ToArgument(GraphQL.Utilities.ArgumentConfig argumentConfig, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }\n    protected virtual GraphQL.Types.Directive ToDirective(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDef) { }\n    protected virtual GraphQL.Types.EnumerationGraphType ToEnumerationType(GraphQLParser.AST.GraphQLEnumTypeDefinition enumDef) { }\n    protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }\n    protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }\n    protected virtual GraphQL.Types.InputObjectGraphType ToInputObjectType(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputDef) { }\n    protected virtual GraphQL.Types.InterfaceGraphType ToInterfaceType(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceDef) { }\n    protected virtual GraphQL.Types.IObjectGraphType ToObjectGraphType(GraphQLParser.AST.GraphQLObjectTypeDefinition astType, bool isExtensionType = false) { }\n    protected virtual GraphQL.Types.FieldType ToSubscriptionFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }\n    protected virtual GraphQL.Types.UnionGraphType ToUnionType(GraphQLParser.AST.GraphQLUnionTypeDefinition unionDef) { }\n    protected virtual void Validate(GraphQLParser.AST.GraphQLDocument document) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Query, Cat, Dog, and Pet Types\nDESCRIPTION: This GraphQL schema defines the structure of the API, including a Query type with fields for retrieving pet information, Cat and Dog types with their respective fields, and a Pet union type. It demonstrates the use of scalar types, lists, non-null fields, and the @deprecated directive.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.NoDescriptions.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema {\n  query: Query\n}\n\ntype Query {\n  animal: Pet\n  allAnimalsCount: [Int!] @deprecated(reason: \"do not touch!\")\n  catsGroups: [[Cat!]!]!\n}\n\ntype Cat {\n  name: String!\n  weight(inPounds: Boolean): Float!\n}\n\ntype Dog {\n  age: Int!\n}\n\nunion Pet = Cat | Dog\n```\n\n----------------------------------------\n\nTITLE: Executing Named GraphQL Query in C#\nDESCRIPTION: Demonstrates how to execute a named GraphQL query using C# with ExecuteAsync and ExecutionOptions, specifying the operation name and query string.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/queries.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = new Schema { Query = new StarWarsQuery() };\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.OperationName = \"MyHeroQuery\";\n  _.Query = @\"\n    query MyHeroQuery {\n      hero {\n        id\n        name\n      }\n    }\n  \";\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an Object Type in GraphQL.NET\nDESCRIPTION: Shows how to implement a DroidType class in C# using ObjectGraphType<T>. The implementation defines fields for name and appearsIn properties, with descriptions for each field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DroidType : ObjectGraphType<Droid>\n{\n    public DroidType()\n    {\n        Name = \"Droid\";\n        Description = \"A mechanical creature in the Star Wars universe.\";\n        Field(d => d.Name, nullable: true).Description(\"The name of the droid.\");\n        Field<ListGraphType<EpisodeEnum>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Registering Object Graph Type with Attributes in C#\nDESCRIPTION: Demonstrates how to use attributes to customize field names, types and authentication in an auto-registering object graph type. Shows property decorations for ID specification, output type configuration, authorization, and descriptions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// graph type: AutoRegisteringObjectGraphType<Person>\n\nclass Person\n{\n    [Name(\"Id\")]\n    [OutputType(typeof(IdGraphType))]\n    public int PersonId { get; set; }\n\n    public string Name { get; set; }\n\n    [Authorize(\"Administrators\")]\n    public int Age { get; set; }\n\n    [Description(\"Employee's job position\")]\n    public string? Title { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using UserContext in GraphQL.NET\nDESCRIPTION: Demonstrates how to create a custom UserContext class that inherits from Dictionary<string, object?>, pass it to the GraphQL execution, and access it within a field resolver. This allows sharing data between different parts of the GraphQL execution pipeline.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/user-context.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphQLUserContext : Dictionary<string, object?>\n{\n}\n\nawait schema.ExecuteAsync(_ =>\n{\n  _.Query = \"...\";\n  _.UserContext = new MyGraphQLUserContext();\n});\n\npublic class Query : ObjectGraphType\n{\n  public Query()\n  {\n    Field<DroidType>(\"hero\")\n      .Resolve(context =>\n      {\n        var userContext = context.UserContext as MyGraphQLUserContext;\n        ...\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pattern Matching Directive to Fields\nDESCRIPTION: Demonstrates how to apply the pattern matching directive to a field for input validation using regex patterns.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nField(x => x.FirstName)\n    .ApplyDirective(\"pattern\", \"regex\", \"[A-Z]+\"); // uppercase only\n```\n\n----------------------------------------\n\nTITLE: Configuring Role-based Authorization in GraphQL.NET\nDESCRIPTION: Demonstrates how to implement role-based authorization using the new AuthorizeWithRoles extension method. Supports both comma-separated string and multiple parameter approaches.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\ngraph.AuthorizeWithRoles(\"Administrators,Managers\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\ngraph.AuthorizeWithRoles(\"Administrators\", \"Managers\");\n```\n\n----------------------------------------\n\nTITLE: Field Configuration with Custom Boolean Type\nDESCRIPTION: Example showing how different ways of configuring arguments affect the usage of the custom Boolean type replacement.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"sample\")\n  .Argument<BooleanGraphType>(\"argNewBehavior\") // will be replaced with MyBooleanGraphType\n  .Arguments(new QueryArgument(new BooleanGraphType()) { Name = \"argOldBehavior\" }) // will retain default behavior\n  .Resolve(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring System.Text.Json Serializer in ASP.NET Core for GraphQL\nDESCRIPTION: This snippet demonstrates how to configure the System.Text.Json serializer for GraphQL in an ASP.NET Core application's Program.cs file. It adds GraphQL services and specifies the use of System.Text.Json for serialization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/transport.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddGraphQL(options =>\n    {\n        options.AddSystemTextJson();\n        options.AddSchema<FooSchema>();\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing BooleanGraphType Scalar in C#\nDESCRIPTION: This class defines a scalar GraphQL type for boolean values. It includes methods for parsing literals and values, serializing to AST, and determining if it can parse or serialize various types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\npublic class BooleanGraphType : GraphQL.Types.ScalarGraphType\n{\n    public BooleanGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema-First Approach for GraphQL Arguments in C#\nDESCRIPTION: This code demonstrates how to implement a schema-first approach for handling GraphQL arguments in C# using graphql-dotnet. It defines a Droid class, a Query class with a method to resolve the 'droid' field, and sets up the schema using a GraphQL schema definition language.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/arguments.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Id { get; set; }\n  public string Name { get; set; }\n}\n\npublic class Query\n{\n  private List<Droid> _droids = new List<Droid>\n  {\n    new Droid { Id = \"123\", Name = \"R2-D2\" }\n  };\n\n  [GraphQLMetadata(\"droid\")]\n  public Droid GetDroid(string id)\n  {\n    return _droids.FirstOrDefault(x => x.Id == id);\n  }\n}\n\nvar schema = Schema.For(@\"\n  type Droid {\n    id: ID!\n    name: String\n  }\n\n  type Query {\n    droid(id: ID!): Droid\n  }\n\", _ => {\n    _.Types.Include<Query>();\n});\n\nvar json = await schema.ExecuteAsync(_ =>\n{\n  _.Query = $\"{{ droid(id: \\\"123\\\") {{ id name }} }}\";\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Schema Visitor in GraphQL.NET Schema\nDESCRIPTION: This code demonstrates how to register a schema visitor within a GraphQL.NET schema, which is necessary for implementing custom directive functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    public MySchema()\n    {\n        RegisterVisitor(new UppercaseDirectiveVisitor());\n\n        // there are also registration methods that take the type, see below for details\n        // RegisterVisitor(typeof(UppercaseDirectiveVisitor));\n        // this.RegisterVisitor<UppercaseDirectiveVisitor>(); // extension method\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComplexityValidationRule in C#\nDESCRIPTION: Custom validation rule that checks query complexity against configured limits. Includes methods for calculating and validating query complexity metrics.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_235\n\nLANGUAGE: C#\nCODE:\n```\npublic class ComplexityValidationRule : GraphQL.Validation.ValidationRuleBase\n{\n    public ComplexityValidationRule(GraphQL.Validation.Complexity.ComplexityOptions options) { }\n    protected GraphQL.Validation.Complexity.ComplexityOptions Options { get; }\n    [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"TotalComplexity\",\n            \"MaximumDepth\"})]\n    protected virtual System.Threading.Tasks.ValueTask<System.ValueTuple<double, int>> CalculateComplexityAsync(GraphQL.Validation.ValidationContext context) { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    protected virtual System.Threading.Tasks.ValueTask ValidateComplexityAsync(GraphQL.Validation.ValidationContext context, double totalComplexity, int maxDepth) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated FieldMiddlewareDelegate Signature in GraphQL-DotNet 3.0\nDESCRIPTION: Shows the change in delegate definition for FieldMiddlewareDelegate from accepting ResolveFieldContext to IResolveFieldContext in version 3.0.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// version 2.4.0\npublic delegate Task<object> FieldMiddlewareDelegate(ResolveFieldContext context);\n// version 3.0\npublic delegate Task<object> FieldMiddlewareDelegate(IResolveFieldContext context);\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL.NET Type Classes with Dependency Injection\nDESCRIPTION: Examples of registering specific GraphQL type classes and open generic types with a dependency injection container. Both specific instances and open generic registrations are shown.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<EnumerationGraphType<Episodes>>();\nservices.AddSingleton<AutoRegisteringInputGraphType<Person>>();\nservices.AddSingleton<ProductGraphType>();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton(typeof(AutoRegisteringInputGraphType<>));\nservices.AddSingleton(typeof(AutoRegisteringObjectGraphType<>));\nservices.AddSingleton(typeof(EnumerationGraphType<>));\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationContext Class in C#\nDESCRIPTION: Core validation context class that implements IProvideUserContext interface. Contains properties and methods for managing GraphQL validation state including errors, schema, variables and user context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_225\n\nLANGUAGE: C#\nCODE:\n```\npublic class ValidationContext : GraphQL.Execution.IProvideUserContext\n{\n    public ValidationContext() { }\n    public System.Collections.Generic.Dictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public System.Collections.Generic.Dictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; set; }\n    public GraphQLParser.AST.GraphQLDocument Document { get; set; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> Errors { get; }\n    public GraphQL.Inputs Extensions { get; set; }\n    public bool HasErrors { get; }\n    public GraphQL.Instrumentation.Metrics Metrics { get; set; }\n    public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }\n    public System.IServiceProvider? RequestServices { get; set; }\n    public GraphQL.Types.ISchema Schema { get; set; }\n    public GraphQL.Validation.TypeInfo TypeInfo { get; set; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }\n    public GraphQL.Inputs Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Serializer Implementation\nDESCRIPTION: Main serializer implementation that provides JSON serialization capabilities for GraphQL operations. Supports both synchronous and asynchronous operations with configurable serializer options and error handling.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.SystemTextJson.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLSerializer : GraphQL.IGraphQLSerializer, GraphQL.IGraphQLTextSerializer\n{\n    public GraphQLSerializer() { }\n    public GraphQLSerializer(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    public GraphQLSerializer(System.Action<System.Text.Json.JsonSerializerOptions> configureSerializerOptions) { }\n    public GraphQLSerializer(bool indent) { }\n    public GraphQLSerializer(System.Text.Json.JsonSerializerOptions serializerOptions) { }\n    public bool IsNativelyAsync { get; }\n    protected System.Text.Json.JsonSerializerOptions SerializerOptions { get; }\n    public T? Deserialize<T>(string? json) { }\n    public System.Threading.Tasks.ValueTask<T?> ReadAsync<T>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }\n    public T? ReadNode<T>(object? value) { }\n    public string Serialize<T>(T? value) { }\n    public System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T? value, System.Threading.CancellationToken cancellationToken = default) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Type Mappings in GraphQL.NET Schema\nDESCRIPTION: Demonstrates how to register custom type mappings in a GraphQL.NET schema for input objects, output objects, and scalar types, including how to override default mappings.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema\n{\n    public void MySchema()\n    {\n        ...\n\n        // For output graphs, map the 'User' data model class to the output object graph type 'UserGraphType'\n        this.RegisterTypeMapping<User, UserGraphType>();\n\n        // For input graphs, map the 'User' data model class to the input object graph type 'UserInputGraphType'\n        this.RegisterTypeMapping<User, UserInputGraphType>();\n\n        // For input or output graphs, map the 'Vector' class/struct to the scalar graph type 'VectorGraphType'\n        this.RegisterTypeMapping<Vector, VectorGraphType>();\n\n        // Override Guid default mapping to use the custom scalar graph type 'MyGuidGraphType'\n        this.RegisterTypeMapping<Guid, MyGuidGraphType>()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GuidGraphType Scalar in C#\nDESCRIPTION: Defines the GuidGraphType class that represents the GraphQL UUID/GUID scalar type. It provides methods for parsing, validating, and serializing GUID values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_157\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GuidGraphType : GraphQL.Types.ScalarGraphType\n{\n    public GuidGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Federation Directives in GraphQL SDL\nDESCRIPTION: This snippet defines the federation directives that are used to enable distributed GraphQL schemas. The directives include @extends, @external, @key, @provides, and @requires, each with its specific purpose in federation implementation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationSchemaFirst.1.0.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @provides(fields: FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: FieldSet!) on FIELD_DEFINITION\n\nscalar FieldSet\n```\n\n----------------------------------------\n\nTITLE: Implementing Union Types in GraphQL .NET\nDESCRIPTION: Demonstrates how to create a Union type that combines Cat and Dog types in GraphQL .NET. The example shows the implementation of a CatOrDog union type along with its constituent object types (Cat and Dog) that inherit from ObjectGraphType<T>. Each type defines its own fields with specific GraphQL types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/unions.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CatOrDog : UnionGraphType\n{\n  public CatOrDog()\n  {\n    Type<Cat>();\n    Type<Dog>();\n  }\n}\n\npublic class Cat : ObjectGraphType<CatModel>\n{\n  public Cat()\n  {\n    Field<StringGraphType>(\"name\");\n    Field<BooleanGraphType>(\"meows\");\n  }\n}\n\npublic class Dog : ObjectGraphType<DogModel>\n{\n  public Dog()\n  {\n    Field<StringGraphType>(\"name\");\n    Field<BooleanGraphType>(\"barks\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Schema Using Schema.For Method\nDESCRIPTION: Static method to create a GraphQL schema from a string type definition. This allows for schema-first approach where the schema is defined as a GraphQL SDL string and then converted to a Schema object. Optionally accepts a configuration action.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_187\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.SchemaBuilder>? configure = null) { }\n```\n\n----------------------------------------\n\nTITLE: Defining a Length Directive in C# for GraphQL.NET\nDESCRIPTION: This code defines a 'LengthDirective' in C# for GraphQL.NET, which can be used to specify minimum and maximum lengths for input fields or arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LengthDirective : Directive\n{\n    public override bool? Introspectable => true;\n\n    public LengthDirective()\n        : base(\"length\", DirectiveLocation.InputFieldDefinition, DirectiveLocation.ArgumentDefinition)\n    {\n        Description = \"Used to specify the minimum and/or maximum length for an input field or argument.\";\n        Arguments = new QueryArguments(\n            new QueryArgument<IntGraphType>\n            {\n                Name = \"min\",\n                Description = \"If specified, specifies the minimum length that the input field or argument must have.\"\n            },\n            new QueryArgument<IntGraphType>\n            {\n                Name = \"max\",\n                Description = \"If specified, specifies the maximum length that the input field or argument must have.\"\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolveType for Interface Type Resolution in GraphQL-DotNet\nDESCRIPTION: This snippet demonstrates how to implement the ResolveType method on an interface to resolve concrete types. It provides an exhaustive way to determine the correct type for objects implementing the interface.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CharacterInterface : InterfaceGraphType<StarWarsCharacter>\n{\n  public CharacterInterface()\n  {\n    Name = \"Character\";\n\n    ...\n\n    var droidType = new GraphQLTypeReference(\"Droid\");\n    var humanType = new GraphQLTypeReference(\"Human\");\n\n    ResolveType = obj =>\n    {\n        if (obj is Droid)\n        {\n            return droidType;\n        }\n\n        if (obj is Human)\n        {\n            return humanType;\n        }\n\n        throw new ArgumentOutOfRangeException($\"Could not resolve graph type for {obj.GetType().Name}\");\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Rules Manually in GraphQL.NET\nDESCRIPTION: Example demonstrating how to set validation rules manually when executing a GraphQL query without dependency injection. This shows combining custom rules with core validation rules.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait schema.ExecuteAsync(_ =>\n{\n  _.Query = \"...\";\n  _.ValidationRules =\n    new[]\n    {\n      new RequiresAuthValidationRule()\n    }\n    .Concat(DocumentValidator.CoreRules);\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Length Directive to Input Field in GraphQL.NET\nDESCRIPTION: This snippet demonstrates how to apply the @length directive to an input field in a GraphQL.NET input object type definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ComplexInput : InputObjectGraphType\n{\n    public ComplexInput()\n    {\n        Name = \"ComplexInput\";\n        Field<IntGraphType>(\"intField\");\n        Field<StringGraphType>(\"stringField\").ApplyDirective(\"length\", \"min\", 3, \"max\", 7);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription Query\nDESCRIPTION: Example of a GraphQL subscription query that requests updates when messages are added. It specifies the fields to be returned including nested fields from the sender and message details.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/subscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription MessageAdded {\n  messageAdded {\n    from {\n      id\n      displayName\n    }\n    content\n    sentAt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Scalar Types in C#\nDESCRIPTION: This section defines custom scalar types for BigInt, Boolean, and Byte. Each type implements methods for parsing, serializing, and validating values specific to its data type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_137\n\nLANGUAGE: C#\nCODE:\n```\npublic class BigIntGraphType : GraphQL.Types.ScalarGraphType\n{\n    public BigIntGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n\npublic class BooleanGraphType : GraphQL.Types.ScalarGraphType\n{\n    public BooleanGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n\npublic class ByteGraphType : GraphQL.Types.ScalarGraphType\n{\n    public ByteGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Violating OneOf Field Nullability in Type-First GraphQL\nDESCRIPTION: Example showing incorrect implementation of OneOf input type with non-nullable fields in type-first approach.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql013.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\n[OneOf]\npublic class UserIdentifier\n{\n    // non-nullable value type\n    public int Id { get; set; }\n\n    // Null Reference Types are fully supported\n#nullable enable\n    public string Name { get; set; }\n#nullable restore\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionContext in C#\nDESCRIPTION: Defines an ExecutionContext class that implements IExecutionContext, IProvideUserContext, and IDisposable. It manages the execution state, including variables, errors, and metrics.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\npublic class ExecutionContext : GraphQL.Execution.IExecutionArrayPool, GraphQL.Execution.IExecutionContext, GraphQL.Execution.IProvideUserContext, System.IDisposable\n{\n    public ExecutionContext() { }\n    public ExecutionContext(GraphQL.Execution.ExecutionContext context) { }\n    public System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; set; }\n    public GraphQLParser.AST.GraphQLDocument Document { get; set; }\n    public GraphQL.ExecutionErrors Errors { get; set; }\n    public GraphQL.ExecutionOptions ExecutionOptions { get; set; }\n    public GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; set; }\n    public System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; set; }\n    public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; set; }\n    public int? MaxParallelExecutionCount { get; set; }\n    public GraphQL.Instrumentation.Metrics Metrics { get; set; }\n    public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }\n    public System.Collections.Generic.Dictionary<string, object?> OutputExtensions { get; set; }\n    public System.IServiceProvider? RequestServices { get; set; }\n    public object? RootValue { get; set; }\n    public GraphQL.Types.ISchema Schema { get; set; }\n    public bool ThrowOnUnhandledException { get; set; }\n    public System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; set; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }\n    public GraphQL.Validation.Variables Variables { get; set; }\n    protected virtual void ClearContext() { }\n    public void Dispose() { }\n    public TElement[] Rent<TElement>(int minimumLength) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IsTypeOf for Type Resolution in GraphQL-DotNet\nDESCRIPTION: This code shows how to implement the IsTypeOf function in a GraphQL type to help resolve the implementing type during execution. It's used when a field returns an interface type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DroidType : ObjectGraphType\n{\n  public DroidType(IStarWarsData data)\n  {\n    Name = \"Droid\";\n\n    ...\n\n    Interface<CharacterInterface>();\n\n    IsTypeOf = obj => obj is Droid;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Non-IGraphType as Resolver Return Type\nDESCRIPTION: This example shows the correct implementation, using string (which does not implement IGraphType) as the return type of a resolver.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql011.md#2025-04-21_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyGraphType : ObjectGraphType\n{\n    public MyGraphType()\n    {\n        Field<StringGraphType>(\"name\")\n            .Returns<string>()\n            .Resolve(context => null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Implementations in GraphQL Code-First\nDESCRIPTION: Shows how to define GraphQL interfaces that implement other interfaces using the code-first approach. This demonstrates setting up interface hierarchies using C# classes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NodeGraphType : InterfaceGraphType\n{\n    public NodeGraphType()\n    {\n        Field<NonNullGraphType<IdGraphType>>(\"id\");\n    }\n}\n\npublic class CharacterGraphType : InterfaceGraphType\n{\n    public CharacterGraphType()\n    {\n        Field<NonNullGraphType<IdGraphType>>(\"id\");\n        Field<NonNullGraphType<StringGraphType>>(\"name\");\n        Interface<NodeGraphType>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Directives in C#\nDESCRIPTION: Definition of directive classes for GraphQL schema, including the base Directive class and specialized implementations like DeprecatedDirective. Includes support for directive locations and arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\npublic class Directive : GraphQL.Utilities.MetadataProvider, GraphQL.Types.INamedType, GraphQL.Types.IProvideDescription\n{\n    public Directive(string name, params GraphQLParser.AST.DirectiveLocation[] locations) { }\n    public Directive(string name, System.Collections.Generic.IEnumerable<GraphQLParser.AST.DirectiveLocation> locations) { }\n    public GraphQL.Types.QueryArguments? Arguments { get; set; }\n    public string? Description { get; set; }\n    public virtual bool? Introspectable { get; }\n    public System.Collections.Generic.List<GraphQLParser.AST.DirectiveLocation> Locations { get; }\n    public string Name { get; set; }\n    public bool Repeatable { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining core interfaces for GraphQL.NET type system\nDESCRIPTION: Defines several core interfaces used in the GraphQL.NET type system, including IAbstractGraphType, IComplexGraphType, IFieldMetadataWriter, IFieldType, IGraphType, and others. These interfaces provide the foundation for building GraphQL schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_153\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IAbstractGraphType : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.PossibleTypes PossibleTypes { get; }\n    System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }\n    void AddPossibleType(GraphQL.Types.IObjectGraphType type);\n}\n\npublic interface IComplexGraphType : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.TypeFields Fields { get; }\n    GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType);\n    GraphQL.Types.FieldType? GetField(GraphQLParser.ROM name);\n    bool HasField(string name);\n}\n\npublic interface IFieldMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata { }\n\npublic interface IFieldType : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType\n{\n    GraphQL.Types.QueryArguments? Arguments { get; set; }\n    bool IsPrivate { get; set; }\n    string Name { get; set; }\n}\n\npublic interface IGraphType : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    bool IsPrivate { get; set; }\n    void Initialize(GraphQL.Types.ISchema schema);\n}\n\npublic interface IGraphTypeFactory<out TGraphType>\n    where out TGraphType : GraphQL.Types.IGraphType\n{\n    TGraphType Create();\n}\n\npublic interface IGraphTypeMappingProvider\n{\n    System.Type? GetGraphTypeFromClrType(System.Type clrType, bool isInputType, System.Type? preferredGraphType);\n}\n\npublic interface IHaveDefaultValue : GraphQL.Types.IProvideResolvedType\n{\n    object? DefaultValue { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Resolver with Scoped Services\nDESCRIPTION: Example of a field resolver in StarWarsQuery that uses scoped services through RequestServices.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsQuery : ObjectGraphType\n{\n    public StarWarsQuery()\n    {\n        Field<DroidType>(\"hero\")\n            .Resolve(context => context.RequestServices.GetRequiredService<IDroidRepo>().GetDroid(\"R2-D2\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Request and Executing GraphQL Query in C#\nDESCRIPTION: This C# code snippet demonstrates how to parse a JSON request into a GraphQLRequest object and execute the query using the schema. It uses the GraphQLSerializer to deserialize the JSON and the ExecuteAsync method to run the query.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/variables.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar requestJson = /* request as shown above */;\nvar request = new GraphQLSerializer().Deserialize<GraphQLRequest>(requestJson);\n\nvar result = await schema.ExecuteAsync(options =>\n{\n  options.Query = request.Query;\n  options.OperationName = request.OperationName;\n  options.Variables = request.Variables;\n  options.Extensions = request.Extensions;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation\nDESCRIPTION: This snippet shows how to define a GraphQL mutation for creating a human entity. It demonstrates the mutation syntax and how to pass input arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ($human:HumanInput!) {\n  createHuman(human: $human) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BatchDataLoader Class for Single Items in GraphQL.NET\nDESCRIPTION: Implements a data loader that fetches individual items in batches by key. It provides constructors for fetching data using either a dictionary or a collection with a key selector function.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class BatchDataLoader<TKey, T> : GraphQL.DataLoader.DataLoaderBase<TKey, T>\n    where TKey :  notnull\n{\n    public BatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>>> fetchDelegate, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, T defaultValue = default, int maxBatchSize = 2147483647) { }\n    public BatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchDelegate, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, T defaultValue = default, int maxBatchSize = 2147483647) { }\n    protected override System.Threading.Tasks.Task FetchAsync(System.Collections.Generic.IEnumerable<GraphQL.DataLoader.DataLoaderPair<TKey, T>> list, System.Threading.CancellationToken cancellationToken) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Extensions for GraphQL.NET\nDESCRIPTION: Extension methods for implementing GraphQL Federation features including external fields, overrides, provides/requires functionality, and reference resolution capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_98\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FederationFieldMetadataExtensions\n{\n    public static TMetadataWriter External<TMetadataWriter>(this TMetadataWriter fieldType)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataWriter Override<TMetadataWriter>(this TMetadataWriter fieldType, string from)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataWriter Provides<TMetadataWriter>(this TMetadataWriter fieldType, string[] fields)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataWriter Provides<TMetadataWriter>(this TMetadataWriter fieldType, string fields)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string[] fields)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string fields)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataWriter Shareable<TMetadataWriter>(this TMetadataWriter graphType)\n        where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Variables Separately in C# for GraphQL Execution\nDESCRIPTION: This C# snippet shows how to parse variables separately from the query. It uses the GraphQLSerializer to deserialize a JSON-formatted variables string into an Inputs object, which can then be used in query execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/variables.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar variablesJson = /* get from request */;\nvar inputs = new GraphQLSerializer().Deserialize<Inputs>(variablesJson);\n\nawait schema.ExecuteAsync(options =>\n{\n  options.Query = \"...\";\n  options.Variables = inputs;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Methods in GraphQL.NET\nDESCRIPTION: Collection of field-related method implementations for GraphQL.NET type system. Includes various overloads for field creation with different parameter combinations and async support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, System.Type type) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Boolean GraphQL Type in C#\nDESCRIPTION: Complete implementation of a custom Boolean GraphQL type that extends BooleanGraphType. Includes overrides for ParseLiteral, CanParseLiteral, ParseValue, CanParseValue, and ToAST methods to handle various data type conversions and validations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBooleanGraphType : BooleanGraphType\n{\n    public MyBooleanGraphType()\n    {\n        Name = \"Boolean\";\n    }\n\n    public override object? ParseLiteral(GraphQLValue value) => value switch\n    {\n        GraphQLBooleanValue b => b.BoolValue,\n        GraphQLIntValue i => ParseValue(ParseDoubleAccordingSpec(i)),\n        GraphQLFloatValue f => ParseValue(ParseDoubleAccordingSpec(f)),\n        GraphQLStringValue s => ParseValue((string)s.Value),\n        GraphQLNullValue _ => null,\n        _ => ThrowLiteralConversionError(value)\n    }\n\n    public override bool CanParseLiteral(GraphQLValue value)\n    {\n        try\n        {\n            _ = ParseLiteral(value);\n            return true;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n\n    public override object? ParseValue(object? value) => value switch\n    {\n        bool _ => value,\n        byte b => b != 0,\n        sbyte sb => sb != 0,\n        short s => s != 0,\n        ushort us => us != 0,\n        int i => i != 0,\n        uint ui => ui != 0,\n        long l => l != 0,\n        ulong ul => ul != 0,\n        BigInteger bi => bi != 0,\n        float f => f != 0,\n        double d => d != 0,\n        decimal d => d != 0,\n        string s => bool.Parse(s),\n        null => null,\n        _ => ThrowValueConversionError(value)\n    }\n\n    public override bool CanParseValue(object? value)\n    {\n        try\n        {\n            _ = ParseValue(value);\n            return true;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n\n    public override GraphQLValue ToAST(object? value) => Serialize(value) switch\n    {\n        bool b => new GraphQLBooleanValue(b),\n        null => new GraphQLNullValue(),\n        _ => ThrowASTConversionError(value)\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query with Arguments\nDESCRIPTION: This snippet shows a GraphQL query that includes an argument 'id' for the 'droid' field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/arguments.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  droid(id: \"123\") {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL010 Warnings with Pragma Directives\nDESCRIPTION: Using preprocessor directives to suppress specific GQL010 violations in C# code.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql010.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL010\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL010\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Object Type in GraphQL Schema Language\nDESCRIPTION: Demonstrates how to define a Droid object type using GraphQL schema language. The example defines a Droid with name and appearsIn fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Droid {\n  name: String\n  appearsIn: [Episode]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoRegisteringInterfaceGraphType for GraphQL.NET\nDESCRIPTION: This generic class extends InterfaceGraphType to automatically register fields based on the source type. It includes methods for configuring the graph, creating fields, and applying argument attributes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutoRegisteringInterfaceGraphType<TSourceType> : GraphQL.Types.InterfaceGraphType<TSourceType>\n{\n    public AutoRegisteringInterfaceGraphType() { }\n    public AutoRegisteringInterfaceGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }\n    protected virtual void ApplyArgumentAttributes(System.Reflection.ParameterInfo parameterInfo, GraphQL.Types.QueryArgument queryArgument) { }\n    protected void BuildFieldType(GraphQL.Types.FieldType fieldType, System.Reflection.MemberInfo memberInfo) { }\n    protected virtual void ConfigureGraph() { }\n    protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Value Conversion for Vector3 in GraphQL.NET\nDESCRIPTION: Demonstrates how to register a custom value converter for Vector3 to string conversion using the ValueConverter class. The registration is performed in a static constructor to ensure it's done once per application lifetime.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nValueConverter.Register<Vector3, string>(v => $\"{v.X},{v.Y},{v.Z}\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Schema with Consistent GraphType Instances in GraphQL.NET\nDESCRIPTION: Example showing how to build a dynamic schema in GraphQL.NET while maintaining consistent graph type instances. This approach prevents the 'multiple instances of same graph type' error by reusing created instances.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// create the graph types\nvar queryType = new ObjectGraphType() { Name = \"Query\" };\nvar widgetType = new ObjectGraphType() { Name = \"Widget\" };\nvar manufacturerType = new ObjectGraphType() { Name = \"Manufacturer\" };\n\n// define the fields\nwidgetType.Field(\"Manufacturer\", manufacturerType);\nmanufacturerType.Field(\"Widgets\", new ListGraphType(widgetType));\nqueryType.Field(\"Widgets\", new ListGraphType(widgetType));\nqueryType.Field(\"Manufacturers\", new ListGraphType(manufactuerType));\n\n// create the schema\nvar schema = new Schema();\nschema.Query = queryType;\n```\n\n----------------------------------------\n\nTITLE: Resolving GraphQL Fields Asynchronously with DataLoader in C#\nDESCRIPTION: Extension methods for FieldBuilder to resolve fields asynchronously using DataLoader. These methods support various nesting levels of DataLoaderResult for complex loading scenarios.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>> resolve) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>> resolve) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<TReturnType>> resolve) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>>> resolve) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>> resolve) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>> resolve) { }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Extensions Methods for Type Operations in C#\nDESCRIPTION: Provides extension methods for working with GraphQL types including type checking, metadata operations, and AST conversions. These utilities handle type introspection, validation, and manipulation within a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class GraphQLExtensions\n{\n    public static object? DefaultValueOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }\n    public static string? DeprecationReasonOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }\n    public static string? DescriptionOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }\n    public static bool DoTypesOverlap(GraphQL.Types.IGraphType typeA, GraphQL.Types.IGraphType typeB) { }\n    public static GraphQL.Types.IGraphType GetNamedType(this GraphQL.Types.IGraphType type) { }\n    public static System.Type GetNamedType(this System.Type type) { }\n    public static bool IsCompositeType(this GraphQL.Types.IGraphType type) { }\n    public static bool IsInputObjectType(this GraphQL.Types.IGraphType type) { }\n    public static bool IsInputType(this GraphQL.Types.IGraphType type) { }\n    public static bool IsInputType(this System.Type type) { }\n    public static bool IsLeafType(this GraphQL.Types.IGraphType type) { }\n    public static bool IsOutputType(this GraphQL.Types.IGraphType type) { }\n    public static bool IsOutputType(this System.Type type) { }\n    public static bool IsSubtypeOf(this GraphQL.Types.IGraphType maybeSubType, GraphQL.Types.IGraphType superType) { }\n    public static bool IsSubtypeOf(this GraphQL.Types.IGraphType maybeSubType, GraphQL.Types.IGraphType superType, bool allowScalarsForLists) { }\n    public static bool IsValidDefault(this GraphQL.Types.IGraphType type, object? value) { }\n    public static bool IsValidInterfaceFor(this GraphQL.Types.IInterfaceGraphType implementedType, GraphQL.Types.IComplexGraphType type, bool throwError = true) { }\n    public static string NameOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }\n    public static GraphQLParser.AST.GraphQLValue ToAST(this GraphQL.Types.IGraphType type, object? value) { }\n    public static TMetadataProvider WithMetadata<TMetadataProvider>(this TMetadataProvider provider, string key, object? value)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Uppercase Directive in C# for GraphQL.NET\nDESCRIPTION: This code defines an 'UpperDirective' in C# for GraphQL.NET, which can be used to convert string field values to uppercase.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UpperDirective : Directive\n{\n    public UpperDirective()\n        : base(\"upper\", DirectiveLocation.FieldDefinition)\n    {\n        Description = \"Converts the value of string fields to uppercase.\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLSerializer using Newtonsoft.Json\nDESCRIPTION: A GraphQL serializer implementation that uses Newtonsoft.Json. It implements both IGraphQLSerializer and IGraphQLTextSerializer interfaces, providing various serialization and deserialization methods for GraphQL objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLSerializer : GraphQL.IGraphQLSerializer, GraphQL.IGraphQLTextSerializer\n{\n    public GraphQLSerializer() { }\n    public GraphQLSerializer(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    public GraphQLSerializer(GraphQL.NewtonsoftJson.JsonSerializerSettings serializerSettings) { }\n    protected GraphQLSerializer(Newtonsoft.Json.JsonSerializer jsonSerializer) { }\n    public GraphQLSerializer(System.Action<GraphQL.NewtonsoftJson.JsonSerializerSettings> configureSerializerSettings) { }\n    public GraphQLSerializer(bool indent) { }\n    public GraphQLSerializer(GraphQL.NewtonsoftJson.JsonSerializerSettings serializerSettings, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    public GraphQLSerializer(System.Action<GraphQL.NewtonsoftJson.JsonSerializerSettings> configureSerializerSettings, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    public GraphQLSerializer(bool indent, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    public bool IsNativelyAsync { get; }\n    protected Newtonsoft.Json.JsonSerializer Serializer { get; }\n    public T? Deserialize<T>(string? json) { }\n    public T? Read<T>(System.IO.TextReader json) { }\n    public System.Threading.Tasks.ValueTask<T?> ReadAsync<T>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default) { }\n    public T? ReadNode<T>(object? value) { }\n    public string Serialize<T>(T? value) { }\n    public void Write<T>(System.IO.TextWriter textWriter, T value) { }\n    public System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T? value, System.Threading.CancellationToken cancellationToken = default) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IProvideUserContext Interface for User State Access\nDESCRIPTION: Simple interface that provides access to a dictionary of user-defined state that can be accessed throughout GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_102\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IProvideUserContext\n    {\n        System.Collections.Generic.IDictionary<string, object?> UserContext { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ComplexityConfiguration Class in C#\nDESCRIPTION: The ComplexityConfiguration class used by ComplexityValidationRule to set upper bounds on query complexity. It includes properties for maximum depth, maximum complexity, field impact, and maximum recursion count.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/malicious-queries.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ComplexityConfiguration\n{\n    public int? MaxDepth { get; set; }\n    public int? MaxComplexity { get; set; }\n    public double? FieldImpact { get; set; }\n    public int MaxRecursionCount { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory-based Document Caching in GraphQL.NET\nDESCRIPTION: Demonstrates how to configure document caching using the GraphQL.MemoryCache package with Microsoft.Extensions.DependencyInjection. Shows setup with size limits and expiration settings for cached queries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/document-caching.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection services = ...;\nservices.AddGraphQL(builder => builder\n    .AddSchema<StarWarsSchema>()\n    .AddSystemTextJson()\n    .UseMemoryCache(options =>\n    {\n        // maximum total cached query length of 1,000,000 bytes (assume 10x memory usage\n        // for 10MB maximum memory use by the cache - parsed AST and other stuff)\n        options.SizeLimit = 1000000;\n        // no expiration of cached queries (cached queries are only ejected when the cache is full)\n        options.SlidingExpiration = null;\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Validation Error Classes in C#\nDESCRIPTION: Defines a collection of serializable validation error classes that inherit from ValidationError. These classes handle specific GraphQL validation scenarios such as argument types, fragment naming, field usage, and more.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_222\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ArgumentsOfCorrectTypeError : GraphQL.Validation.ValidationError\n{\n    public ArgumentsOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, string verboseErrors) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DefaultValuesOfCorrectTypeError : GraphQL.Validation.ValidationError\n{\n    public DefaultValuesOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition varDefAst, GraphQL.Types.IGraphType inputType, string verboseErrors) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class DirectivesInAllowedLocationsError : GraphQL.Validation.ValidationError\n{\n    public DirectivesInAllowedLocationsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node, GraphQLParser.AST.DirectiveLocation candidateLocation) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FieldsOnCorrectTypeError : GraphQL.Validation.ValidationError\n{\n    public FieldsOnCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLField node, GraphQL.Types.IGraphType type, System.Collections.Generic.IEnumerable<string> suggestedTypeNames, System.Collections.Generic.IEnumerable<string> suggestedFieldNames) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class FragmentsOnCompositeTypesError : GraphQL.Validation.ValidationError\n{\n    public FragmentsOnCompositeTypesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node) { }\n    public FragmentsOnCompositeTypesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLInlineFragment node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class InputFieldsAndArgumentsOfCorrectLengthError : GraphQL.Validation.ValidationError\n{\n    public InputFieldsAndArgumentsOfCorrectLengthError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.ASTNode node, int? length, int? min, int? max) { }\n    public InputFieldsAndArgumentsOfCorrectLengthError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQL.VariableName variableName, int? length, int? min, int? max) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class KnownArgumentNamesError : GraphQL.Validation.ValidationError\n{\n    public KnownArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, GraphQL.Types.Directive directive) { }\n    public KnownArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, GraphQL.Types.FieldType fieldDef, GraphQL.Types.IGraphType parentType) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class KnownDirectivesError : GraphQL.Validation.ValidationError\n{\n    public KnownDirectivesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class KnownFragmentNamesError : GraphQL.Validation.ValidationError\n{\n    public KnownFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentSpread node, string fragmentName) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class KnownTypeNamesError : GraphQL.Validation.ValidationError\n{\n    public KnownTypeNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLNamedType node, string[] suggestedTypes) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class LoneAnonymousOperationError : GraphQL.Validation.ValidationError\n{\n    public LoneAnonymousOperationError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class NoFragmentCyclesError : GraphQL.Validation.ValidationError\n{\n    public NoFragmentCyclesError(GraphQL.Validation.ValidationContext context, string fragName, string[] spreadNames, params GraphQLParser.AST.ASTNode[] nodes) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class NoUndefinedVariablesError : GraphQL.Validation.ValidationError\n{\n    public NoUndefinedVariablesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition node, GraphQLParser.AST.GraphQLVariable variableReference) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class NoUnusedFragmentsError : GraphQL.Validation.ValidationError\n{\n    public NoUnusedFragmentsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class NoUnusedVariablesError : GraphQL.Validation.ValidationError\n{\n    public NoUnusedVariablesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQLParser.AST.GraphQLOperationDefinition op) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class OneOfInputValuesError : GraphQL.Validation.ValidationError\n{\n    public OneOfInputValuesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLObjectField node) { }\n    public OneOfInputValuesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLValue node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class OverlappingFieldsCanBeMergedError : GraphQL.Validation.ValidationError\n{\n    public OverlappingFieldsCanBeMergedError(GraphQL.Validation.ValidationContext context, GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict conflict) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class PossibleFragmentSpreadsError : GraphQL.Validation.ValidationError\n{\n    public PossibleFragmentSpreadsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentSpread node, GraphQL.Types.IGraphType parentType, GraphQL.Types.IGraphType fragType) { }\n    public PossibleFragmentSpreadsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLInlineFragment node, GraphQL.Types.IGraphType parentType, GraphQL.Types.IGraphType fragType) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ProvidedNonNullArgumentsError : GraphQL.Validation.ValidationError\n{\n    public ProvidedNonNullArgumentsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node, GraphQL.Types.QueryArgument arg) { }\n    public ProvidedNonNullArgumentsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLField node, GraphQL.Types.QueryArgument arg) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ScalarLeafsError : GraphQL.Validation.ValidationError\n{\n    public ScalarLeafsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLField node, GraphQL.Types.IGraphType type) { }\n    public ScalarLeafsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLSelectionSet node, GraphQLParser.AST.GraphQLField field, GraphQL.Types.IGraphType type) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class SingleRootFieldSubscriptionsError : GraphQL.Validation.ValidationError\n{\n    public SingleRootFieldSubscriptionsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition operation, params GraphQLParser.AST.ASTNode[] nodes) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class UniqueArgumentNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, GraphQLParser.AST.GraphQLArgument otherNode) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class UniqueDirectivesPerLocationError : GraphQL.Validation.ValidationError\n{\n    public UniqueDirectivesPerLocationError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class UniqueFragmentNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node, GraphQLParser.AST.GraphQLFragmentDefinition altNode) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class UniqueInputFieldNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueInputFieldNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLValue node, GraphQLParser.AST.GraphQLObjectField altNode) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class UniqueOperationNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueOperationNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition node) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class UniqueVariableNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueVariableNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQLParser.AST.GraphQLVariableDefinition altNode) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class VariablesAreInputTypesError : GraphQL.Validation.ValidationError\n{\n    public VariablesAreInputTypesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQL.Types.IGraphType type) { }\n}\n```\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class VariablesInAllowedPositionError : GraphQL.Validation.ValidationError\n{\n```\n\n----------------------------------------\n\nTITLE: Registering Type Mappings in GraphQL.NET v4 in C#\nDESCRIPTION: These code snippets demonstrate how to register type mappings between CLR types and GraphTypes in GraphQL.NET v4. This allows for proper type inference when building fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nschema.RegisterTypeMapping<Money, MoneyType>();     // instance method on `ISchema` after v4\n```\n\nLANGUAGE: csharp\nCODE:\n```\nschema.RegisterTypeMapping<Money, MoneyType>();\nschema.RegisterTypeMapping<Money, MoneyInputType>();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nschema.RegisterTypeMapping<int, MyIntGraphType>();\nschema.RegisterTypeMapping<string, MySpecialFormattedStringGraphType>();\n```\n\n----------------------------------------\n\nTITLE: Non-Null Arguments in GraphQL Query\nDESCRIPTION: Shows how to use Non-Null modifier for query arguments. The example requires a non-null ID parameter for fetching droid data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/lists-non-null.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery DroidById($id: ID!) {\n  droid(id: $id) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Resolution Context in C#\nDESCRIPTION: Defines interfaces and classes for resolving GraphQL connections including pagination parameters\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IResolveConnectionContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext\n{\n    string? After { get; }\n    string? Before { get; }\n    int? First { get; }\n    bool IsUnidirectional { get; }\n    int? Last { get; }\n    int? PageSize { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Request with GraphQL Query and Variables\nDESCRIPTION: This snippet illustrates how to format a JSON request that includes a GraphQL query with variables. It shows the structure of the request object with the query and variables properties.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/variables.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"query\": \"query DroidQuery($droidId: String!) { droid(id: $droidId) { id name } }\",\n \"variables\": {\n   \"droidId\": \"1\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleDataLoader for Single-Value Data Loading in GraphQL.NET\nDESCRIPTION: Implements a data loader for loading a single value. It combines the loader and result interfaces to simplify usage in simple scenarios.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class SimpleDataLoader<T> : GraphQL.DataLoader.IDataLoader, GraphQL.DataLoader.IDataLoaderResult, GraphQL.DataLoader.IDataLoaderResult<T>, GraphQL.DataLoader.IDataLoader<T>\n{\n    public SimpleDataLoader(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<T>> fetchDelegate) { }\n    public System.Threading.Tasks.Task DispatchAsync(System.Threading.CancellationToken cancellationToken = default) { }\n    public System.Threading.Tasks.Task<T> GetResultAsync(System.Threading.CancellationToken cancellationToken = default) { }\n    public GraphQL.DataLoader.IDataLoaderResult<T> LoadAsync() { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Field Resolution Context Interfaces in C#\nDESCRIPTION: Defines interfaces that provide context for resolving GraphQL fields. These interfaces expose information about the current execution context, field definition, and available data needed to resolve a GraphQL field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IResolveFieldContext : GraphQL.Execution.IProvideUserContext\n{\n    System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }\n    GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }\n    System.Threading.CancellationToken CancellationToken { get; }\n    System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }\n    GraphQLParser.AST.GraphQLDocument Document { get; }\n    GraphQL.ExecutionErrors Errors { get; }\n    GraphQL.Execution.IExecutionContext ExecutionContext { get; }\n    GraphQLParser.AST.GraphQLField FieldAst { get; }\n    GraphQL.Types.FieldType FieldDefinition { get; }\n    System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }\n    GraphQL.Instrumentation.Metrics Metrics { get; }\n    GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }\n    System.Collections.Generic.IDictionary<string, object?> OutputExtensions { get; }\n    GraphQL.IResolveFieldContext? Parent { get; }\n    GraphQL.Types.IObjectGraphType ParentType { get; }\n    System.Collections.Generic.IEnumerable<object> Path { get; }\n    System.IServiceProvider? RequestServices { get; }\n    System.Collections.Generic.IEnumerable<object> ResponsePath { get; }\n    object? RootValue { get; }\n    GraphQL.Types.ISchema Schema { get; }\n    object? Source { get; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"Field\",\n            \"FieldType\"})]\n    System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? SubFields { get; }\n    System.Security.Claims.ClaimsPrincipal? User { get; }\n    GraphQL.Validation.Variables Variables { get; }\n}\n\npublic interface IResolveFieldContext<out TSource> : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext\n{\n    TSource Source { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Field Aliases for Multiple Hero Queries\nDESCRIPTION: Shows how to query the same 'hero' field twice with different IDs by using aliases 'empireHero' and 'jediHero' to distinguish the results. This technique allows querying the same field multiple times in a single query while avoiding naming conflicts.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/aliases.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  empireHero: hero(id: \"1\") {\n    name\n  }\n  jediHero: hero(id: \"2\") {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldType Class in C#\nDESCRIPTION: Defines the FieldType class that represents a field in a GraphQL type. It contains properties for the field's name, description, arguments, resolver, and other metadata required for GraphQL schema definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_153\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FieldType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IFieldType, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType\n{\n    public FieldType() { }\n    public GraphQL.Types.QueryArguments? Arguments { get; set; }\n    public object? DefaultValue { get; set; }\n    public string? DeprecationReason { get; set; }\n    public string? Description { get; set; }\n    public bool IsPrivate { get; set; }\n    public string Name { get; set; }\n    public System.Func<object, object>? Parser { get; set; }\n    public GraphQL.Types.IGraphType? ResolvedType { get; set; }\n    public GraphQL.Resolvers.IFieldResolver? Resolver { get; set; }\n    public GraphQL.Resolvers.ISourceStreamResolver? StreamResolver { get; set; }\n    public System.Type? Type { get; set; }\n    public System.Func<GraphQL.Validation.FieldArgumentsValidationContext, System.Threading.Tasks.ValueTask>? ValidateArguments { get; set; }\n    public System.Action<object>? Validator { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Directive in GraphQL.NET Schema\nDESCRIPTION: This snippet shows how to register a custom directive within a GraphQL.NET schema by adding it to the Directives collection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    public MySchema()\n    {\n        Directives.Register(new MyDirective());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Federation Keys Entity Resolver Implementation\nDESCRIPTION: Demonstrates how to implement a federation entity resolver with multiple key fields, showing resolution logic for different key combinations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic class WidgetType : ObjectGraphType<Widget>\n{\n    public WidgetType()\n    {\n        // configure federation key fields\n        this.Key(\"id\");\n        this.Key(\"sku\");\n\n        // configure federation resolver\n        this.ResolveReference(async (context, widget) =>\n        {\n            // pull the key values from the representation\n            var id = widget.Id;\n            var sku = widget.Sku;\n\n            // resolve the entity reference\n            var widgetData = context.RequestServices!.GetRequiredService<WidgetRepository>();\n            if (id != null)\n                return await widgetData.GetWidgetByIdAsync(id, context.CancellationToken);\n            else\n                return await widgetData.GetWidgetBySkuAsync(sku, context.CancellationToken);\n        });\n\n        // configure fields\n        Field(x => x.Id, type: typeof(NonNullGraphType<IdGraphType>));\n        Field(x => x.Sku);\n        Field(x => x.Name);\n    }\n}\n\npublic class Widget\n{\n    public string Id { get; set; }\n    public string Sku { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Enumeration Case Converter in GraphQL.NET\nDESCRIPTION: Shows how to use a custom enumeration case converter by inheriting from it rather than the standard EnumerationGraphType.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MediaTypeEnum : CamelCaseEnumerationGraphType<MediaTypeViewModel>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Field Middleware Delegate Definition in C#\nDESCRIPTION: The delegate type definition used by Field Middleware for the continuation of the middleware pipeline. This is passed to the middleware to allow calling the next middleware in the chain.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate ValueTask<object?> FieldMiddlewareDelegate(IResolveFieldContext context);\n```\n\n----------------------------------------\n\nTITLE: Replacing Built-in Boolean Scalar in GraphQL.NET\nDESCRIPTION: Demonstrates how to replace a built-in scalar type by creating a custom type that inherits from the original. This example shows a MyBooleanGraphType that extends the built-in BooleanGraphType while keeping the same name.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBooleanGraphType : BooleanGraphType\n{\n    public MyBooleanGraphType()\n    {\n        Name = \"Boolean\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Boolean Type in Schema Constructor\nDESCRIPTION: Example of registering the custom Boolean type within a schema's constructor using RegisterType method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    public void MySchema()\n    {\n        Query = ....;\n\n        RegisterType(new MyBooleanGraphType());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Named GraphQL Query Operation\nDESCRIPTION: Shows how to add an operation name to a GraphQL query for better identification and debugging.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/queries.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyHeroQuery {\n  hero {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonSerializerSettings for GraphQL.NET\nDESCRIPTION: Custom JsonSerializerSettings for GraphQL.NET that extends Newtonsoft.Json's JsonSerializerSettings. It provides default configuration specifically for GraphQL serialization needs.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class JsonSerializerSettings : Newtonsoft.Json.JsonSerializerSettings\n{\n    public JsonSerializerSettings() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaExporter Class for GraphQL Schema Export in C#\nDESCRIPTION: The SchemaExporter class provides functionality to export a GraphQL.NET schema to an AST representation. It includes methods for applying descriptions, directives, and handling schema extensions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_203\n\nLANGUAGE: C#\nCODE:\n```\npublic class SchemaExporter\n{\n    public SchemaExporter(GraphQL.Types.ISchema schema) { }\n    protected GraphQL.Types.ISchema Schema { get; }\n    protected virtual T ApplyDescription<T>(T node, GraphQL.Types.IProvideDescription obj)\n        where T : GraphQLParser.AST.IHasDescriptionNode { }\n    protected virtual T ApplyDirectives<T>(T node, GraphQL.Types.IMetadataReader obj)\n        where T : GraphQLParser.AST.IHasDirectivesNode { }\n    protected virtual GraphQLParser.AST.ASTNode ApplyExtend(GraphQLParser.AST.ASTNode node, GraphQL.Types.IMetadataReader graphType) { }\n    public virtual GraphQLParser.AST.GraphQLDocument Export() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Middleware with Dependency Injection in C#\nDESCRIPTION: Example of using Field Middleware with dependency injection in a schema constructor. Shows how to inject and register middleware through the DI container.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic MySchema : Schema\n{\n  public MySchema(\n    IServiceProvider services,\n    MyQuery query,\n    InstrumentFieldsMiddleware middleware)\n    : base(services)\n  {\n    Query = query;\n    FieldMiddleware.Use(middleware);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4> in C#\nDESCRIPTION: Generic resolver builder class that injects four dependencies from Microsoft DI. Supports both synchronous and asynchronous resolver methods with four injected services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4> WithScope() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> WithService<T5>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Type System Components\nDESCRIPTION: Type system components for GraphQL.NET including extensions for abstract types, directive handling, and argument information classes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_132\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class AbstractGraphTypeExtensions\n{\n    public static GraphQL.Types.IObjectGraphType? GetObjectType(this GraphQL.Types.IAbstractGraphType abstractType, object value, GraphQL.Types.ISchema schema) { }\n    public static bool IsPossibleType(this GraphQL.Types.IAbstractGraphType abstractType, GraphQL.Types.IGraphType type) { }\n}\n\npublic class AppliedDirective : GraphQL.Utilities.MetadataProvider, System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveArgument>, System.Collections.IEnumerable\n{\n    public AppliedDirective(string name) { }\n    public int ArgumentsCount { get; }\n    public string? FromSchemaUrl { get; set; }\n    public string Name { get; set; }\n    public GraphQL.Types.AppliedDirective AddArgument(GraphQL.Types.DirectiveArgument argument) { }\n    public GraphQL.Types.DirectiveArgument? FindArgument(string argumentName) { }\n    public System.Collections.Generic.IEnumerator<GraphQL.Types.DirectiveArgument> GetEnumerator() { }\n}\n\npublic class AppliedDirectives : System.Collections.Generic.IEnumerable<GraphQL.Types.AppliedDirective>, System.Collections.IEnumerable\n{\n    public AppliedDirectives() { }\n    public int Count { get; }\n    public void Add(GraphQL.Types.AppliedDirective directive) { }\n    public GraphQL.Types.AppliedDirective? Find(string name) { }\n    public System.Collections.Generic.IEnumerator<GraphQL.Types.AppliedDirective> GetEnumerator() { }\n    public int Remove(string name) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoIntrospectionValidationRule in GraphQL.NET\nDESCRIPTION: A validation rule that prevents introspection queries by analyzing the document for any introspection fields and reporting an error if any are found. It implements INodeVisitor and checks for __schema or __type fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Analyzes the document for any introspection fields and reports an error if any are found.\n/// </summary>\npublic class NoIntrospectionValidationRule : ValidationRuleBase, INodeVisitor\n{\n    public override ValueTask<INodeVisitor?> GetPreNodeVisitorAsync(ValidationContext context) => new(this);\n\n    ValueTask INodeVisitor.EnterAsync(ASTNode node, ValidationContext context)\n    {\n        if (node is GraphQLField field)\n        {\n            if (field.Name.Value == \"__schema\" || field.Name.Value == \"__type\")\n                context.ReportError(new NoIntrospectionError(context.Document.Source, field));\n        }\n        return default;\n    }\n\n    ValueTask INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context) => default;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating GraphQL Services During Schema Initialization\nDESCRIPTION: Demonstrates the use of ValidateServices method to verify field resolver dependencies during schema initialization. This helps detect missing services or incorrect dependency registrations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema>()\n    .ValidateServices()\n);\n```\n\n----------------------------------------\n\nTITLE: GraphQL Validation Rules Implementation in C#\nDESCRIPTION: Defines validation rule classes that enforce GraphQL schema rules like argument types, field validation, and fragment usage.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_233\n\nLANGUAGE: C#\nCODE:\n```\npublic class ArgumentsOfCorrectType : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.ArgumentsOfCorrectType Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor will be removed in v9.\")]\n    public ArgumentsOfCorrectType() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Annotated Enumeration in .NET for GraphQL\nDESCRIPTION: Shows how to define a .NET enum with descriptions and deprecation attributes that will be used by GraphQL.NET when generating the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Description(\"The Star Wars movies.\")]\n[Obsolete(\"Optional. Sets the GraphQL DeprecationReason for the whole enum.\")]\npublic enum Episodes\n{\n    [Description(\"Episode 1: The Phantom Menace\")]\n    [Obsolete(\"Optional. Sets the GraphQL DeprecationReason for this member.\")]\n    PHANTOMMENACE = 1,\n\n    [Description(\"Episode 4: A New Hope\")]\n    NEWHOPE  = 4,\n\n    [Description(\"Episode 5: The Empire Strikes Back\")]\n    EMPIRE  = 5,\n\n    [Description(\"Episode 6: Return of the Jedi\")]\n    JEDI  = 6\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Field Middlewares with Dependency Injection in C#\nDESCRIPTION: Example showing how to register and use multiple Field Middleware implementations using dependency injection. Injects an enumerable collection of middlewares into the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic MySchema : Schema\n{\n  public MySchema(\n    IServiceProvider services,\n    MyQuery query,\n    IEnumerable<IFieldMiddleware> middlewares)\n    : base(services)\n  {\n    Query = query;\n    foreach (var middleware in middlewares)\n      FieldMiddleware.Use(middleware);\n  }\n}\n\n// within Startup.cs\nservices.AddSingleton<ISchema, MySchema>();\nservices.AddSingleton<IFieldMiddleware, InstrumentFieldsMiddleware>();\nservices.AddSingleton<IFieldMiddleware, MyMiddleware>();\n...\n```\n\n----------------------------------------\n\nTITLE: Type-First Federation Entity Resolver with Instance Method\nDESCRIPTION: Shows implementation of a federation entity resolver using type-first approach with an instance method and using the instance itself for representation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\n// configure federation key fields\n[Key(\"id\")]\npublic class Widget\n{\n    // configure fields\n    [Id]\n    public string Id { get; set; }\n    public string Name { get; set; }\n\n    // configure federation resolver\n    [FederationResolver]\n    public async Task<Widget> ResolveReference([FromServices] WidgetRepository widgetData, CancellationToken token)\n    {\n        // pull the id from the representation\n        var id = Id;\n\n        // resolve the entity reference\n        return await widgetData.GetWidgetByIdAsync(id, token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Operations on DataLoader Results in C#\nDESCRIPTION: Extension methods for chaining transformations on DataLoader results. These methods enable fluent transformations of loaded data with support for both synchronous and asynchronous operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<TResult> Then<T, TResult>(this GraphQL.DataLoader.IDataLoaderResult<T> parent, System.Func<T, System.Threading.Tasks.Task<TResult>> chainedDelegate) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<TResult> Then<T, TResult>(this GraphQL.DataLoader.IDataLoaderResult<T> parent, System.Func<T, TResult> chainedDelegate) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<TResult> Then<T, TResult>(this GraphQL.DataLoader.IDataLoaderResult<T> parent, System.Func<T, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> chainedDelegate) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<TResult> Then<T, TResult>(this System.Collections.Generic.IEnumerable<GraphQL.DataLoader.IDataLoaderResult<T>> parents, System.Func<System.Collections.Generic.IEnumerable<T>, System.Threading.Tasks.Task<TResult>> chainedDelegate) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<TResult> Then<T, TResult>(this System.Collections.Generic.IEnumerable<GraphQL.DataLoader.IDataLoaderResult<T>> parents, System.Func<System.Collections.Generic.IEnumerable<T>, TResult> chainedDelegate) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<TResult> Then<T, TResult>(this System.Collections.Generic.IEnumerable<GraphQL.DataLoader.IDataLoaderResult<T>> parents, System.Func<System.Collections.Generic.IEnumerable<T>, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> chainedDelegate) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Filter Interfaces in C#\nDESCRIPTION: Defines interface methods for schema filtering that allow or deny access to GraphQL schema components. These methods control visibility of types, fields, arguments, directives, and enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISchemaFilter\n{\n    System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument);\n    System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.Directive directive);\n    System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue);\n    System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field);\n    System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Validation Rules Table in Markdown\nDESCRIPTION: Markdown table showing the mapping between GraphQL.NET validation rules, their error codes, and specification reference numbers. Includes all validation checks performed by the system from operation names to variable positioning.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nRule                              | Code                               | Number\n----------------------------------|------------------------------------|-----------\nUniqueOperationNames              | `UNIQUE_OPERATION_NAMES`           | 5.2.1.1\nLoneAnonymousOperation            | `LONE_ANONYMOUS_OPERATION`         | 5.2.2.1\nSingleRootFieldSubscriptions      | `SINGLE_ROOT_FIELD_SUBSCRIPTIONS`  | 5.2.3.1\nFieldsOnCorrectType               | `FIELDS_ON_CORRECT_TYPE`           | 5.3.1\nOverlappingFieldsCanBeMerged      | `OVERLAPPING_FIELDS_CAN_BE_MERGED` | 5.3.2\nScalarLeafs                       | `SCALAR_LEAFS`                     | 5.3.3\nKnownArgumentNames                | `KNOWN_ARGUMENT_NAMES`             | 5.4.1\nUniqueArgumentNames               | `UNIQUE_ARGUMENT_NAMES`            | 5.4.2\nProvidedNonNullArguments          | `PROVIDED_NON_NULL_ARGUMENTS`      | 5.4.2.1\nUniqueFragmentNames               | `UNIQUE_FRAGMENT_NAMES`            | 5.5.1.1\nKnownTypeNames                    | `KNOWN_TYPE_NAMES`                 | 5.5.1.2\nFragmentsOnCompositeTypes         | `FRAGMENTS_ON_COMPOSITE_TYPES`     | 5.5.1.3\nNoUnusedFragments                 | `NO_UNUSED_FRAGMENTS`              | 5.5.1.4\nKnownFragmentNames                | `KNOWN_FRAGMENT_NAMES`             | 5.5.2.1\nNoFragmentCycles                  | `NO_FRAGMENT_CYCLES`               | 5.5.2.2\nPossibleFragmentSpreads           | `POSSIBLE_FRAGMENT_SPREADS`        | 5.5.2.3\nArgumentsOfCorrectType            | `ARGUMENTS_OF_CORRECT_TYPE`        | 5.6.1\nDefaultValuesOfCorrectType        | `DEFAULT_VALUES_OF_CORRECT_TYPE`   | 5.6.1\nUniqueInputFieldNames             | `UNIQUE_INPUT_FIELD_NAMES`         | 5.6.3\nKnownDirectivesInAllowedLocations | `KNOWN_DIRECTIVES`                 | 5.7.1\nKnownDirectivesInAllowedLocations | `DIRECTIVES_IN_ALLOWED_LOCATIONS`  | 5.7.2\nUniqueDirectivesPerLocation       | `UNIQUE_DIRECTIVES_PER_LOCATION`   | 5.7.3\nUniqueVariableNames               | `UNIQUE_VARIABLE_NAMES`            | 5.8.1\nVariablesAreInputTypes            | `VARIABLES_ARE_INPUT_TYPES`        | 5.8.2\nNoUndefinedVariables              | `NO_UNDEFINED_VARIABLES`           | 5.8.3\nNoUnusedVariables                 | `NO_UNUSED_VARIABLES`              | 5.8.4\nVariablesInAllowedPosition        | `VARIABLES_IN_ALLOWED_POSITION`    | 5.8.5\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Connection Types in C#\nDESCRIPTION: Generic classes for implementing the Relay Connection specification in GraphQL.NET. These types support cursor-based pagination and include connection, edge, and page info types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_195\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConnectionType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType> : GraphQL.Types.Relay.ConnectionType<TNodeType, GraphQL.Types.Relay.EdgeType<TNodeType>>\n    where TNodeType : GraphQL.Types.IGraphType\n{\n    public ConnectionType() { }\n}\n\npublic class ConnectionType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType> : GraphQL.Types.ObjectGraphType<object>\n    where TNodeType : GraphQL.Types.IGraphType\n    where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n{\n    public ConnectionType() { }\n}\n\npublic class EdgeType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType> : GraphQL.Types.ObjectGraphType<object>\n    where TNodeType : GraphQL.Types.IGraphType\n{\n    public EdgeType() { }\n}\n\npublic class PageInfoType : GraphQL.Types.ObjectGraphType<object>\n{\n    public PageInfoType() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolveFieldContextExtensions in GraphQL.NET\nDESCRIPTION: Static extension methods for IResolveFieldContext that provide utilities for working with arguments, directives, and extensions. These methods enable copying contexts, retrieving and setting values, and checking for the existence of arguments and directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ResolveFieldContextExtensions\n{\n    public static GraphQL.IResolveFieldContext<TSourceType> As<TSourceType>(this GraphQL.IResolveFieldContext context) { }\n    public static GraphQL.IResolveFieldContext Copy(this GraphQL.IResolveFieldContext context) { }\n    public static GraphQL.IResolveFieldContext<TSource> Copy<TSource>(this GraphQL.IResolveFieldContext<TSource> context) { }\n    public static object? GetArgument(this GraphQL.IResolveFieldContext context, System.Type argumentType, string name, object? defaultValue = null) { }\n    public static TType GetArgument<TType>(this GraphQL.IResolveFieldContext context, string name, TType defaultValue = default) { }\n    public static GraphQL.Execution.DirectiveInfo? GetDirective(this GraphQL.IResolveFieldContext context, string name) { }\n    public static object? GetInputExtension(this GraphQL.IResolveFieldContext context, string path) { }\n    public static object? GetOutputExtension(this GraphQL.IResolveFieldContext context, string path) { }\n    public static bool HasArgument(this GraphQL.IResolveFieldContext context, string name) { }\n    public static bool HasDirective(this GraphQL.IResolveFieldContext context, string name) { }\n    public static bool HasDirectives(this GraphQL.IResolveFieldContext context) { }\n    public static void SetOutputExtension(this GraphQL.IResolveFieldContext context, string path, object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many DataLoader Implementation\nDESCRIPTION: Example of implementing a DataLoader for one-to-many relationships using GetOrAddCollectionBatchLoader\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserType : ObjectGraphType<User>\n{\n    // Inject the IDataLoaderContextAccessor to access the current DataLoaderContext\n    public UserType(IDataLoaderContextAccessor accessor, IOrdersStore orders)\n    {\n        ...\n\n        Field<ListGraphType<OrderType>, IEnumerable<Order>>()\n            .Name(\"Orders\")\n            .ResolveAsync(ctx =>\n            {\n                // Get or add a collection batch loader with the key \"GetOrdersByUserId\"\n                // The loader will call GetOrdersByUserIdAsync with a batch of keys\n                var ordersLoader = accessor.Context.GetOrAddCollectionBatchLoader<int, Order>(\"GetOrdersByUserId\",\n                    orders.GetOrdersByUserIdAsync);\n\n                // Add this UserId to the pending keys to fetch data for\n                // The execution strategy will trigger the data loader to fetch the data via GetOrdersByUserId() at the\n                //   appropriate time, and the field will be resolved with an instance of IEnumerable<Order> once\n                //   GetOrdersByUserId() returns with the batched results\n                return ordersLoader.LoadAsync(ctx.Source.UserId);\n            });\n    }\n}\n\npublic class OrdersStore : IOrdersStore\n{\n\tpublic async Task<ILookup<int, Order>> GetOrdersByUserIdAsync(IEnumerable<int> userIds)\n\t{\n\t\tvar orders = await ... // load data from database\n\n\t\treturn orders\n\t\t\t.ToLookup(x => x.UserId);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Introspectable Directive in C#\nDESCRIPTION: Example of creating a directive that is explicitly marked as introspectable, making it and all its applications visible through introspection. This is done by overriding the Introspectable property.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyDirective : Directive\n{\n    public MyDirective()\n        : base(\"my\", DirectiveLocation.Field, DirectiveLocation.FragmentSpread, DirectiveLocation.InlineFragment)\n    {\n        Description = \"My super directive\";\n        Arguments = new QueryArguments(new QueryArgument<NonNullGraphType<StringGraphType>>\n        {\n            Name = \"secret\",\n            Description = \"Some secret\"\n        });\n    }\n\n    public override bool? Introspectable => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Information Provider Implementation\nDESCRIPTION: Example of creating a custom IErrorInfoProvider implementation that extends the base ErrorInfoProvider to add a timestamp to error extensions, allowing for customized error response data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyErrorInfoProvider : GraphQL.Execution.ErrorInfoProvider\n{\n    public override ErrorInfo GetInfo(ExecutionError executionError)\n    {\n        var info = base.GetInfo(executionError);\n        info.Extensions[\"timestamp\"] = DateTime.Now.ToString(\"u\");\n        return info;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Activating Service Provider in C#\nDESCRIPTION: Service provider implementation that handles self-activation of services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic class SelfActivatingServiceProvider : System.IServiceProvider\n{\n    public SelfActivatingServiceProvider(System.IServiceProvider serviceProvider) { }\n    public object? GetService(System.Type serviceType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring System.Text.Json DocumentWriter for Custom Naming in GraphQL.NET v3\nDESCRIPTION: Example of configuring the System.Text.Json DocumentWriter to disable camel casing when using custom name converters other than the default CamelCaseNameConverter.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar writer = new GraphQL.SystemTextJson.DocumentWriter(options => {\n    options.PropertyNamingPolicy = null;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Apollo Link and Custom Types\nDESCRIPTION: This snippet defines a GraphQL schema using the Apollo Link directive to import specifications. It includes custom directives, types, and a Query type. The schema uses namespacing for imported types and directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.1.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example/v1.0/\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ComplexGraphType<TSourceType> Abstract Class in C#\nDESCRIPTION: This abstract class provides a base for complex GraphQL types. It includes methods for adding fields, creating connections, and building field definitions. Many methods are marked as obsolete, indicating upcoming changes in the API.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class ComplexGraphType<TSourceType> : GraphQL.Types.GraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    protected ComplexGraphType() { }\n    public GraphQL.Types.TypeFields Fields { get; }\n    public virtual GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType) { }\n    [System.Obsolete(\"Please use the overload that accepts the mandatory name argument. This method will be removed in v9.\")]\n    public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType>()\n        where TNodeType : GraphQL.Types.IGraphType { }\n    public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType { }\n    // ... (more methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Requests from JSON String\nDESCRIPTION: Example of deserializing a GraphQL request from a raw JSON string, using the FromJson extension method to convert directly to a Request object with Inputs for variables.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Other, with the request as a JSON string\nprivate string Execute(string request)\n{\n    var request = requestString.FromJson<Request>();\n    // execute request and return result\n}\n\npublic class Request\n{\n    string Query { get; set; }\n    string OperationName { get; set; }\n    Inputs Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Field Definitions in GraphQL.NET v7\nDESCRIPTION: Shows various examples of how to update field definitions from the deprecated FieldXXX APIs to the new Field() methods returning FieldBuilder. This includes examples for simple fields, async fields, fields with arguments, and subscription fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// GraphQL 5.x\nField<NonNullGraphType<StringGraphType>>(\n  \"name\",\n  \"Argument name\",\n  resolve: context => context.Source!.Name);\n\n// GraphQL 7.x\nField<NonNullGraphType<StringGraphType>>(\"name\")\n  .Description(\"Argument name\")\n  .Resolve(context => context.Source!.Name);\n\n\n\n// GraphQL 5.x\nFieldAsync<CharacterInterface>(\"hero\", resolve: async context => await data.GetDroidByIdAsync(\"3\"));\n\n// GraphQL 7.x\nField<CharacterInterface>(\"hero\").ResolveAsync(async context => await data.GetDroidByIdAsync(\"3\"));\n\n\n\n// GraphQL 5.x\nFieldAsync<HumanType>(\n  \"human\",\n  arguments: new QueryArguments(\n      new QueryArgument<NonNullGraphType<StringGraphType>> { Name = \"id\", Description = \"id of the human\" }\n  ),\n  resolve: async context => await data.GetHumanByIdAsync(context.GetArgument<string>(\"id\"))\n);\n\n// GraphQL 7.x\nField<HumanType>(\"human\")\n  .Argument<NonNullGraphType<StringGraphType>>(\"id\", \"id of the human\")\n  .ResolveAsync(async context => await data.GetHumanByIdAsync(context.GetArgument<string>(\"id\")));\n\n\n\n// GraphQL 5.x\nFunc<IResolveFieldContext<object>, Task<string?>> resolver = context => Task.FromResult(\"abc\");\nFieldAsync<StringGraphType, string>(\"name\", resolve: resolver);\n\n// GraphQL 7.x\nFunc<IResolveFieldContext<object>, Task<string?>> resolver = context => Task.FromResult(\"abc\");\nField<StringGraphType, string>(\"name\").ResolveAsync(resolver);\n\n\n\n// GraphQL 5.x\nFunc<IResolveFieldContext, string, Task<Droid>> func = (context, id) => data.GetDroidByIdAsync(id);\n\nFieldDelegate<DroidType>(\n  \"droid\",\n  arguments: new QueryArguments(\n    new QueryArgument<NonNullGraphType<StringGraphType>> { Name = \"id\", Description = \"id of the droid\" }\n  ),\n  resolve: func\n);\n\n\n\n// GraphQL 7.x\nFunc<IResolveFieldContext, string, Task<Droid>> func = (context, id) => data.GetDroidByIdAsync(id);\n\nField<DroidType, Droid>(\"droid\")\n  .Argument<NonNullGraphType<StringGraphType>>(\"id\", \"id of the droid\")\n  .ResolveDelegate(func);\n\n\n\n// GraphQL 5.x\nIObservable<object> observable = ...;\nFieldSubscribe<MessageGraphType>(\"messages\", subscribe: context => observable);\n\n// GraphQL 7.x\nIObservable<object> observable = ...;\nField<MessageGraphType>(\"messages\").ResolveStream(context => observable);\n\n\n\n// GraphQL 5.x\nTask<IObservable<object>> observable = null!;\nFieldSubscribeAsync<MessageGraphType>(\"messages\", subscribeAsync: context => observable);\n\n\n\n// GraphQL 7.x\nTask<IObservable<object>> observable = null!;\nField<MessageGraphType>(\"messages\").ResolveStreamAsync(context => observable);\n```\n\n----------------------------------------\n\nTITLE: Telemetry Configuration Extensions\nDESCRIPTION: Methods for configuring telemetry providers and options in GraphQL.NET applications.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder UseTelemetry(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Telemetry.GraphQLTelemetryOptions>? configure = null) { }\n\npublic static GraphQL.DI.IGraphQLBuilder UseTelemetry<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, TProvider telemetryProvider)\n    where TProvider : GraphQL.Telemetry.GraphQLTelemetryProvider { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Graph Type Classes\nDESCRIPTION: These classes implement interface types for GraphQL schemas, providing the ability to define interfaces that object types can implement.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_175\n\nLANGUAGE: C#\nCODE:\n```\npublic class InterfaceGraphType : GraphQL.Types.InterfaceGraphType<object>\n{\n    public InterfaceGraphType() { }\n}\npublic class InterfaceGraphType<TSource> : GraphQL.Types.ComplexGraphType<TSource>, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.IInterfaceGraphType<TSource>, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public InterfaceGraphType() { }\n    public GraphQL.Types.Interfaces Interfaces { get; }\n    public GraphQL.Types.PossibleTypes PossibleTypes { get; }\n    public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }\n    public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }\n    public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }\n    public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }\n    public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }\n    public void Interface(System.Type type) { }\n    public void Interface<TInterface>()\n        where TInterface : GraphQL.Types.IInterfaceGraphType { }\n    public void Type(System.Type type) { }\n    public void Type<TType>()\n        where TType : GraphQL.Types.IObjectGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Document Executor Interfaces in C#\nDESCRIPTION: Defines interfaces for executing GraphQL documents/queries. These interfaces are the core entry point for executing GraphQL operations against a schema, with generic support for specific schema types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDocumentExecuter\n{\n    System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options);\n}\n\npublic interface IDocumentExecuter<TSchema> : GraphQL.IDocumentExecuter\n    where TSchema : GraphQL.Types.ISchema { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Store in C#\nDESCRIPTION: This snippet demonstrates a simple in-memory data store implementation in C# for adding new Human entities. It generates a new ID for each added human.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsData\n{\n  private List<Human> _humans = new List<Human>();\n\n  public Human AddHuman(Human human)\n  {\n    human.Id = Guid.NewGuid().ToString();\n    _humans.Add(human);\n    return human;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IInterfaceGraphType Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL interface types. It inherits from several base interfaces to provide comprehensive functionality for interface types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_156\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IInterfaceGraphType : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Batch Loaders for DataLoader Context in C#\nDESCRIPTION: Extension methods to get or add collection batch loaders to a DataLoader context. These methods support batching multiple keys to fetch collections of data efficiently.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, int maxBatchSize = 2147483647)\n            where TKey :  notnull { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, int maxBatchSize = 2147483647)\n            where TKey :  notnull { }\n```\n\n----------------------------------------\n\nTITLE: Creating AutoRegisteringObjectGraphType in C#\nDESCRIPTION: This class automatically registers and configures an ObjectGraphType. It handles field creation, argument attributes, type information retrieval, and member registration for object types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutoRegisteringObjectGraphType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]  TSourceType> : GraphQL.Types.ObjectGraphType<TSourceType>\n{\n    public AutoRegisteringObjectGraphType() { }\n    public AutoRegisteringObjectGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }\n    protected virtual void ApplyArgumentAttributes(System.Reflection.ParameterInfo parameterInfo, GraphQL.Types.QueryArgument queryArgument) { }\n    protected void BuildFieldType(GraphQL.Types.FieldType fieldType, System.Reflection.MemberInfo memberInfo) { }\n    protected virtual System.Linq.Expressions.LambdaExpression BuildMemberInstanceExpression(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual void ConfigureGraph() { }\n    protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual GraphQL.Types.ArgumentInformation GetArgumentInformation<TParameterType>(GraphQL.Types.FieldType fieldType, System.Reflection.ParameterInfo parameterInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.ParameterInfo parameterInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parser Delegate for ID GraphType with Integer Property in GraphQL.NET\nDESCRIPTION: Example of using the Parser delegate to handle ID graph type for a numeric identifier. This validates input during the validation stage rather than execution stage.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// for input object graph type\nField(\"Id\", x => x.Id, type: typeof(NonNullGraphType<IdGraphType>));\n\nclass MyInputObject\n{\n    public int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ExecutionStrategySelector in GraphQL.NET\nDESCRIPTION: Demonstrates how to create a custom IExecutionStrategySelector that can make contextual decisions when selecting an execution strategy for GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyExecutionStrategySelector : IExecutionStrategySelector\n{\n    public virtual IExecutionStrategy Select(ExecutionContext context)\n    {\n        return context.Operation.Operation switch\n        {\n            OperationType.Query => ParallelExecutionStrategy.Instance,\n            OperationType.Mutation => SerialExecutionStrategy.Instance,\n            OperationType.Subscription => SubscriptionExecutionStrategy.Instance,\n            _ => throw new InvalidOperationException()\n        };\n    }\n}\n\n// within Startup.cs\nservcies.AddGraphQL(builder => builder\n    // other configuration here\n    .AddExecutionStrategySelector<MyExecutionStrategySelector>());\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Stream Resolvers in GraphQL.NET\nDESCRIPTION: Generic implementations of ISourceStreamResolver for handling subscription-based GraphQL fields that return observable streams of data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_129\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SourceStreamResolver<TReturnType> : GraphQL.Resolvers.ISourceStreamResolver\n{\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext, System.IObservable<TReturnType?>> sourceStreamResolver) { }\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<System.IObservable<TReturnType?>>> sourceStreamResolver) { }\n    public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n\npublic class SourceStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.ISourceStreamResolver\n{\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.IObservable<TReturnType?>> sourceStreamResolver) { }\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<System.IObservable<TReturnType?>>> sourceStreamResolver) { }\n    public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Execution Options Configuration in C#\nDESCRIPTION: Configuration class for GraphQL execution options including validation rules, timeout settings, user context, and schema information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class ExecutionOptions : GraphQL.Execution.IProvideUserContext\n{\n    public ExecutionOptions() { }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? CachedDocumentValidationRules { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public GraphQLParser.AST.GraphQLDocument? Document { get; set; }\n    public string? DocumentId { get; set; }\n    public bool EnableMetrics { get; set; }\n    public GraphQL.Inputs? Extensions { get; set; }\n    public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }\n    public int? MaxParallelExecutionCount { get; set; }\n    public string? OperationName { get; set; }\n    public string? Query { get; set; }\n    public System.IServiceProvider? RequestServices { get; set; }\n    public object? Root { get; set; }\n    public GraphQL.Types.ISchema? Schema { get; set; }\n    public bool ThrowOnUnhandledException { get; set; }\n    public System.TimeSpan Timeout { get; set; }\n    public GraphQL.Execution.TimeoutAction TimeoutAction { get; set; }\n    public System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; set; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? ValidationRules { get; set; }\n    public GraphQL.Inputs? Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with @include Directive in GraphQL\nDESCRIPTION: This snippet demonstrates the use of the @include directive in a GraphQL query to conditionally include a field based on a boolean variable.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery HeroQuery($id: ID, $withFriends: Boolean!) {\n  hero(id: $id) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Metadata Attribute in C#\nDESCRIPTION: Defines an attribute for configuring GraphQL types with metadata such as names, descriptions and deprecation information. This attribute can be applied to various code elements to control how they appear in the GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic sealed class GraphQLMetadataAttribute : GraphQL.GraphQLAttribute\n{\n    public GraphQLMetadataAttribute() { }\n    public GraphQLMetadataAttribute(string name) { }\n    public string? DeprecationReason { get; set; }\n    public string? Description { get; set; }\n    public System.Type? IsTypeOf { get; set; }\n    public string? Name { get; set; }\n    public GraphQL.ResolverType ResolverType { get; set; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IResolveFieldContext Properties in GraphQL.NET\nDESCRIPTION: Properties of the IResolveFieldContext interface that provide access to the context of a field resolution operation. This includes access to document, errors, field definition, extensions, metrics, and other elements needed during GraphQL field resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\npublic GraphQLParser.AST.GraphQLDocument Document { get; }\npublic GraphQL.ExecutionErrors Errors { get; }\npublic GraphQL.Execution.IExecutionContext ExecutionContext { get; }\npublic GraphQLParser.AST.GraphQLField FieldAst { get; }\npublic GraphQL.Types.FieldType FieldDefinition { get; }\npublic System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }\npublic GraphQL.Instrumentation.Metrics Metrics { get; }\npublic GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }\npublic System.Collections.Generic.IDictionary<string, object?> OutputExtensions { get; }\npublic GraphQL.IResolveFieldContext? Parent { get; }\npublic GraphQL.Types.IObjectGraphType ParentType { get; }\npublic System.Collections.Generic.IEnumerable<object> Path { get; }\npublic System.IServiceProvider? RequestServices { get; }\npublic System.Collections.Generic.IEnumerable<object> ResponsePath { get; }\npublic object? RootValue { get; }\npublic GraphQL.Types.ISchema Schema { get; }\npublic object? Source { get; }\n[System.Runtime.CompilerServices.TupleElementNames(new string[] {\n        \"Field\",\n        \"FieldType\"})]\npublic System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? SubFields { get; }\npublic System.Security.Claims.ClaimsPrincipal? User { get; }\npublic System.Collections.Generic.IDictionary<string, object?> UserContext { get; }\npublic GraphQL.Validation.Variables Variables { get; }\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionBuilder Generic Class for GraphQL.NET\nDESCRIPTION: This class provides a builder pattern API for creating and configuring GraphQL connections. It implements several GraphQL.NET interfaces and contains methods for setting arguments, descriptions, and resolvers for GraphQL connection fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConnectionBuilder<TSourceType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata\n{\n    protected ConnectionBuilder(GraphQL.Types.FieldType fieldType) { }\n    public GraphQL.Types.FieldType FieldType { get; set; }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string? description)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType defaultValue = default)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType defaultValue, System.Action<GraphQL.Types.QueryArgument>? configure)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public GraphQL.Builders.ConnectionBuilder<TSourceType> Bidirectional() { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> DeprecationReason(string? deprecationReason) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Description(string? description) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name, string argumentName, object? argumentValue) { }\n    [System.Obsolete(\"Please configure the connection name by providing the name as an argument to the \" +\n        \"'Connection' method.\")]\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Name(string name) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> PageSize(int pageSize) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, object?> resolver) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<object?>> resolver) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> ReturnAll() { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Returns<TNewReturnType>() { }\n    [System.Obsolete(\"Please use the overload that accepts the mandatory name argument. This method wil\" +\n        \"l be removed in v9.\")]\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType>()\n        where TNodeType : GraphQL.Types.IGraphType { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType { }\n    [System.Obsolete(\"Please use the overload that accepts the mandatory name argument. This method wil\" +\n        \"l be removed in v9.\")]\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType>()\n        where TNodeType : GraphQL.Types.IGraphType\n        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType\n        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }\n    [System.Obsolete(\"Please use the overload that accepts the mandatory name argument. This method wil\" +\n        \"l be removed in v9.\")]\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TConnectionType>()\n        where TNodeType : GraphQL.Types.IGraphType\n        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n        where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TConnectionType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType\n        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n        where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRegisteringObjectGraphType with Property Exclusions\nDESCRIPTION: Shows how to create an AutoRegisteringObjectGraphType instance while excluding specific properties using constructor parameters.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nmyField.ResolvedType = new AutoRegisteringObjectGraphType<SomeClassWithManyProperties>(x => x.Address, x => x.SecretCode);\n```\n\n----------------------------------------\n\nTITLE: Migrating Dependency Injection in GraphQL Schema Constructor\nDESCRIPTION: Changes to the Schema constructor signature, replacing IDependencyResolver with standard IServiceProvider for better integration with .NET dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//public Schema(IDependencyResolver dependencyResolver)\npublic Schema(IServiceProvider serviceProvider)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Apollo Federation Directives\nDESCRIPTION: Complete GraphQL schema definition that implements Apollo Federation v2.3. Includes directive definitions for federation features like @key, @external, @requires, and @provides, along with basic type definitions for Query and Post types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.3.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.3\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__interfaceObject on OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema JSON Definition\nDESCRIPTION: Comprehensive GraphQL schema definition containing type definitions, query fields, and standard directives. Includes detailed specifications for input objects, scalar types, and directive arguments with their descriptions and validation rules.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"defaultValue\": null\n},\n\"interfaces\": null,\n\"enumValues\": null,\n\"possibleTypes\": null,\n\"isOneOf\": true\n},\n{\n  \"kind\": \"OBJECT\",\n  \"name\": \"Query\",\n  \"description\": null,\n  \"fields\": [\n    {\n      \"name\": \"test\",\n      \"description\": null,\n      \"args\": [\n        {\n          \"name\": \"arg\",\n          \"description\": null,\n          \"type\": {\n            \"kind\": \"NON_NULL\",\n            \"name\": null,\n            \"ofType\": {\n              \"kind\": \"INPUT_OBJECT\",\n              \"name\": \"ExampleInputTagged\",\n              \"ofType\": null\n            }\n          },\n          \"defaultValue\": null\n        }\n      ],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    }\n  ],\n  \"inputFields\": null,\n  \"interfaces\": [],\n  \"enumValues\": null,\n  \"possibleTypes\": null,\n  \"isOneOf\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Data Loaders in Dependency Injection Container\nDESCRIPTION: Shows how to register custom data loader classes as scoped services in a dependency injection container for GraphQL .NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddScoped<MyOrderDataLoader>();\nservices.AddScoped<MyOrderItemsDataLoader>();\n```\n\n----------------------------------------\n\nTITLE: Abstract ExecuteNodeTreeAsync Method in ExecutionStrategy\nDESCRIPTION: Defines an abstract method for executing a node tree asynchronously in a GraphQL execution context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode);\n```\n\n----------------------------------------\n\nTITLE: Implementing Relay Connection Data Objects in C#\nDESCRIPTION: Data container classes for Relay connections that represent the actual data structure for connection queries. These classes hold edges, nodes, and pagination information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_196\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Connection<TNode> : GraphQL.Types.Relay.DataObjects.Connection<TNode, GraphQL.Types.Relay.DataObjects.Edge<TNode>>\n{\n    public Connection() { }\n}\n\npublic class Connection<TNode, TEdge>\n    where TEdge : GraphQL.Types.Relay.DataObjects.Edge<TNode>\n{\n    public Connection() { }\n    public System.Collections.Generic.List<TEdge>? Edges { get; set; }\n    public System.Collections.Generic.List<TNode?>? Items { get; }\n    public GraphQL.Types.Relay.DataObjects.PageInfo? PageInfo { get; set; }\n    public int? TotalCount { get; set; }\n}\n\npublic class Edge<TNode>\n{\n    public Edge() { }\n    public string? Cursor { get; set; }\n    public TNode Node { get; set; }\n}\n\npublic class PageInfo\n{\n    public PageInfo() { }\n    public string? EndCursor { get; set; }\n    public bool HasNextPage { get; set; }\n    public bool HasPreviousPage { get; set; }\n    public string? StartCursor { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Core GraphQL Interface Type Interfaces\nDESCRIPTION: These interfaces define the contract for interface types in a GraphQL schema. They extend various base interfaces to provide complete type functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_163\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IInterfaceGraphType : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }\npublic interface IInterfaceGraphType<in TObject> : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }\n```\n\n----------------------------------------\n\nTITLE: Logging GraphQL Complexity Results in C#\nDESCRIPTION: Implementation of a validation delegate that logs query complexity and depth information. This can be used for monitoring query patterns and identifying potentially problematic queries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\ncomplexityConfig.ValidateComplexityDelegate = async (context) =>\n{\n    // RequestServices may be used to access scoped services within the DI container\n    var logger = context.ValidationContext.RequestServices!.GetRequiredService<ILogger<MySchema>>();\n    if (context.Error != null) // failed complexity limits\n        logger.LogWarning($\"Query Complexity: {context.TotalComplexity}, Depth: {context.MaxDepth}\");\n    else\n        logger.LogInformation($\"Query Complexity: {context.TotalComplexity}, Depth: {context.MaxDepth}\");\n};\n```\n\n----------------------------------------\n\nTITLE: Field Resolver Interfaces and Implementations for GraphQL Execution\nDESCRIPTION: Defines interfaces and concrete implementations for field resolvers that extract data during GraphQL query execution. Includes expression-based, function-based, and member-based resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IFieldResolver\n{\n    System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context);\n}\n\npublic interface ISourceStreamResolver\n{\n    System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context);\n}\n\npublic class FuncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver\n{\n    public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, TReturnType?> resolver) { }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n\npublic class FuncFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IFieldResolver\n{\n    public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n\npublic class ExpressionFieldResolver<TSourceType, TProperty> : GraphQL.Resolvers.IFieldResolver\n{\n    public ExpressionFieldResolver(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> property) { }\n}\n\npublic class MemberResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public MemberResolver(System.Reflection.FieldInfo fieldInfo, System.Linq.Expressions.LambdaExpression? instanceExpression) { }\n    public MemberResolver(System.Reflection.PropertyInfo propertyInfo, System.Linq.Expressions.LambdaExpression? instanceExpression) { }\n    public MemberResolver(System.Reflection.MethodInfo methodInfo, System.Linq.Expressions.LambdaExpression? instanceExpression, System.Collections.Generic.IList<System.Linq.Expressions.LambdaExpression> methodArgumentExpressions) { }\n    protected virtual System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<object?>> BuildFieldResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Serializer Interfaces in C#\nDESCRIPTION: Defines interfaces for serializing and deserializing GraphQL data. These interfaces provide methods for reading and writing GraphQL data in both binary and text formats, with support for asynchronous operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IGraphQLSerializer\n{\n    bool IsNativelyAsync { get; }\n    System.Threading.Tasks.ValueTask<T?> ReadAsync<T>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);\n    T? ReadNode<T>(object? value);\n    System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T? value, System.Threading.CancellationToken cancellationToken = default);\n}\n\npublic interface IGraphQLTextSerializer : GraphQL.IGraphQLSerializer\n{\n    T? Deserialize<T>(string? value);\n    string Serialize<T>(T? value);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Database ID Scalar with Null Handling in GraphQL.NET\nDESCRIPTION: Implements a DbIdGraphType custom scalar that translates between database ID conventions and GraphQL values. It converts database ID 0 to GraphQL null, validates that IDs are positive integers, and throws appropriate exceptions for invalid inputs.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DbIdGraphType : ScalarGraphType\n{\n    public DbIdGraphType()\n    {\n        Name = \"DbId\";\n    }\n\n    public override object? ParseLiteral(GraphQLValue value) => value switch\n    {\n        GraphQLStringValue s => int.TryParse(s.Value, out int i) && i > 0 ? i : throw new FormatException($\"'{s.Value}' is not a valid identifier.\"),\n        GraphQLNullValue _ => 0,\n        _ => ThrowLiteralConversionError(value)\n    };\n\n    public override object? ParseValue(object? value) => value switch\n    {\n        string s => int.TryParse(s, out int i) && i > 0 ? i : throw new FormatException($\"'{s}' is not a valid identifier.\"),\n        null => 0,\n        _ => ThrowValueConversionError(value)\n    };\n\n    public override object? Serialize(object? value) => value switch\n    {\n        int i => i > 0 ? i.ToString() : i == 0 ? null : ThrowSerializationError(value),\n        _ => ThrowSerializationError(value)\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic IInterfaceGraphType Interface in GraphQL.NET\nDESCRIPTION: Generic version of the IInterfaceGraphType interface, which is parameterized by the source object type. It enables type-safe interface implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_157\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IInterfaceGraphType<in TObject> : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }\n```\n\n----------------------------------------\n\nTITLE: Fixing Violations of GQL009 Rule in C#\nDESCRIPTION: This code snippet demonstrates how to fix the violations of the GQL009 rule by using async resolvers and properly handling awaitable delegates in a GraphQL.NET ObjectGraphType.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql009.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyGraphType : ObjectGraphType<Person>\n{\n    public MyGraphType()\n    {\n        // 1. no return type defined\n        //    await the delegate\n        Field<StringGraphType>(\"Title\")\n            .ResolveAsync(async ctx => await Task.FromResult(\"developer\"));\n\n        // 2. the method returns ValueTask<T>\n        //    await the delegate\n        Field<StringGraphType>(\"Title\")\n            .ResolveAsync(async ctx => await GetTitleAsync());\n\n        // 3. method group, return type defined in Field method\n        //    await the delegate\n        Field<StringGraphType, object>(\"Title\")\n            .ResolveAsync(async ctx => await ResolveTitleAsync(ctx));\n\n        // 4. field builder created with awaitable return type\n        //    unwrap the return type\n        Field<StringGraphType, string>(\"Title\")\n            .ResolveScopedAsync(ctx => Task.FromResult(\"developer\"));\n\n        // 5. the method returns ValueTask<T>\n        //    await the delegate and defined the return type\n        Field<StringGraphType, string>(\"Title\")\n            .ResolveScopedAsync(async ctx => await GetTitleAsync());\n\n        // 6. object or dynamic is used as return type in Returns method\n        //    await the delegate and define the source type and return type\n        //    on the ResolveScopedAsync method\n        Field<StringGraphType>(\"Title\").Returns<dynamic>()\n            .ResolveScopedAsync<Person, dynamic>(async ctx =>\n                await ResolveTitleAsync(ctx));\n    }\n\n    private ValueTask<string> GetTitleAsync() => ValueTask.FromResult(\"developer\");\n\n    private Task<string> ResolveTitleAsync(IResolveFieldContext<Person> ctx) =>\n        Task.FromResult(\"developer\");\n}\n```\n\n----------------------------------------\n\nTITLE: Union GraphType Implementation in C#\nDESCRIPTION: Definition of a union type that can represent multiple object types in a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_185\n\nLANGUAGE: C#\nCODE:\n```\npublic class UnionGraphType : GraphQL.Types.GraphType, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public UnionGraphType() { }\n    public GraphQL.Types.PossibleTypes PossibleTypes { get; }\n    public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }\n    public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }\n    public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }\n    public void Type(System.Type type) { }\n    public void Type<TType>()\n        where TType : GraphQL.Types.IObjectGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing GraphQL Directives and Arguments\nDESCRIPTION: Demonstrates how to access directives and their argument values that were provided in a GraphQL query request, using similar APIs to those used for field arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"myField\", resolve: context =>\n{\n    var dir = ctx.GetDirective(\"myDirective\");\n    var arg = dir.GetArgument<string>(\"arg\");\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLRequestListJsonConverter for GraphQL.NET\nDESCRIPTION: A Newtonsoft.Json converter for lists of GraphQL requests. It handles the serialization and deserialization of collections of GraphQL request objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLRequestListJsonConverter : Newtonsoft.Json.JsonConverter\n{\n    public GraphQLRequestListJsonConverter() { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public override bool CanConvert(System.Type objectType) { }\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object? value, Newtonsoft.Json.JsonSerializer serializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic InterfaceGraphType in GraphQL.NET\nDESCRIPTION: Generic implementation of interface types in GraphQL. It provides methods for managing possible types and implemented interfaces, including type resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_173\n\nLANGUAGE: C#\nCODE:\n```\npublic class InterfaceGraphType<TSource> : GraphQL.Types.ComplexGraphType<TSource>, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.IInterfaceGraphType<TSource>, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public InterfaceGraphType() { }\n    public GraphQL.Types.Interfaces Interfaces { get; }\n    public GraphQL.Types.PossibleTypes PossibleTypes { get; }\n    public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }\n    public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }\n    public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }\n    public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }\n    public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }\n    public void Interface(System.Type type) { }\n    public void Interface<TInterface>()\n        where TInterface : GraphQL.Types.IInterfaceGraphType { }\n    public void Type(System.Type type) { }\n    public void Type<TType>()\n        where TType : GraphQL.Types.IObjectGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Tracing with Dependency Injection\nDESCRIPTION: Shows how to add Apollo tracing support using dependency injection with the AddGraphQL extension method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<StarWarsSchema>()\n    .AddApolloTracing()\n    .AddSystemTextJson());\n```\n\n----------------------------------------\n\nTITLE: Defining AutoRegisteringInputObjectGraphType in C#\nDESCRIPTION: This class automatically registers and configures an InputObjectGraphType based on the provided source type. It handles field creation, type information retrieval, and member registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_134\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutoRegisteringInputObjectGraphType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]  TSourceType> : GraphQL.Types.InputObjectGraphType<TSourceType>\n{\n    public AutoRegisteringInputObjectGraphType() { }\n    public AutoRegisteringInputObjectGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }\n    protected virtual void ConfigureGraph() { }\n    protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand GraphQL Query Syntax\nDESCRIPTION: Demonstrates the shorthand syntax for a single GraphQL query where the 'query' keyword can be omitted.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/queries.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nhero {\n  id\n  name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Federation Schema with Apollo Directives\nDESCRIPTION: Complete GraphQL Federation schema definition that includes Apollo directive declarations, scalar types, enums, and basic entity types. Sets up federation capabilities with @link directives for Apollo specs and defines Post type as an entity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationSchemaFirst.2.0.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.0\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post @key(fields: \"id\") {\n  title: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service!\n}\n\nscalar _Any\n\nunion _Entity = Post\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Specific Federation Resolver for GraphQL.NET\nDESCRIPTION: Concrete implementation of federation resolver for the same input and output type, providing constructors for various resolver function patterns including DataLoader, Task-based, and synchronous resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_114\n\nLANGUAGE: C#\nCODE:\n```\npublic class FederationResolver<TClrType> : GraphQL.Federation.Resolvers.FederationResolver<TClrType, TClrType>\n{\n    public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, GraphQL.DataLoader.IDataLoaderResult<TClrType?>> resolveFunc) { }\n    public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, System.Threading.Tasks.Task<TClrType?>> resolveFunc) { }\n    public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, TClrType?> resolveFunc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Metrics via HTTP Header\nDESCRIPTION: Extension method implementation for enabling metrics based on HTTP header presence, useful for selective metrics collection in production environments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/metrics.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class GraphQLBuilderMetricsExtensions\n{\n    public static IGraphQLBuilder EnableMetricsByHeader(this IGraphQLBuilder builder, string headerName = \"X-GRAPHQL-METRICS\")\n    {\n        return builder.ConfigureExecution(async (options, next) =>\n        {\n            if (!options.EnableMetrics)\n            {\n                var accessor = options.RequestServices.GetRequiredService<IHttpContextAccessor>();\n                options.EnableMetrics = accessor.HttpContext.Request.Headers.ContainsKey(headerName);\n            }\n            return await next(options).ConfigureAwait(false);\n        });\n    }\n}\n\nservices.AddGraphQL(b => b\n    .AddSchema<StarWarsSchema>()\n    .EnableMetricsByHeader()\n    .AddSystemTextJson());\n```\n\n----------------------------------------\n\nTITLE: Field Definition Methods with Various Parameter Combinations in GraphQL.NET\nDESCRIPTION: Methods for defining fields with different combinations of name, return type, and nullability parameters. These provide flexibility in how fields are defined.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<TReturnType>(string name, bool nullable = false) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }\n```\n\n----------------------------------------\n\nTITLE: Migrating Argument Resolution in GraphQL.NET\nDESCRIPTION: Demonstrates the changes in how arguments are retrieved from field contexts between v7 and v8. The new approach leverages pre-parsed arguments from the validation phase using ExecutionContext.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_60\n\nLANGUAGE: csharp\nCODE:\n```\n// v7\nIResolveFieldContext context;       // parent context\nFieldType fieldDefinition;          // field definition from which to get arguments\nGraphQLField fieldAst;              // field AST from which to get arguments\nvar arguments = ExecutionHelper.GetArguments(fieldDefinition.Arguments, fieldAst.Arguments, context.Variables);\n\n// v8\nIResolveFieldContext context;       // parent context\nFieldType fieldDefinition;          // field definition from which to get arguments\nGraphQLField fieldAst;              // field AST from which to get arguments\nvar arguments = context.ExecutionContext.GetArguments(fieldDefinition, fieldAst);\n```\n\n----------------------------------------\n\nTITLE: Defining IExecutionStrategy Interface for GraphQL Execution Algorithms\nDESCRIPTION: Interface that defines the contract for GraphQL execution strategies, which control how fields are executed and results are assembled. Core to the execution process.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_99\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionStrategy\n    {\n        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context);\n        System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode);\n        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n                \"field\",\n                \"fieldType\"})]\n        System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? GetSubFields(GraphQL.Execution.ExecutionContext executionContext, GraphQL.Execution.ExecutionNode executionNode);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Apollo Federation Directives\nDESCRIPTION: This snippet defines a GraphQL schema using Apollo Federation directives. It includes the @link directive for importing types, custom scalar and enum definitions, and a basic Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.6.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\", {as: \"LinkImport\", name: \"Import\"}], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [LinkImport], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\nscalar LinkImport\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schema with DI-Injected Query Type in GraphQL.NET\nDESCRIPTION: Demonstrates the correct way to implement a schema class in GraphQL.NET by injecting the query graph type from the dependency injection container. This is acceptable since these types are not typically referenced elsewhere.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    // correct implementation for the schema class\n    public MySchema(IServiceProvider serviceProvider, MyQueryGraphType queryGraphType)\n        : base(serviceProvider)\n    {\n        Query = queryGraphType;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Obsolete Field Definition Methods with Multiple Type Parameters in GraphQL.NET\nDESCRIPTION: Obsolete methods that accept both nullable and type parameters. Developers should use overloads that receive only one of these parameters for clarity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use another overload that receives only one of the \\'nullable\\' or \\'type\\' ar\" +\n            \"guments. This method will be removed in v9.\")]\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type? type) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type) { }\n[System.Obsolete(\"Please use another overload that receives only one of the \\'nullable\\' or \\'type\\' ar\" +\n            \"guments. This method will be removed in v9.\")]\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type? type) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Comparer Interface for GraphQL Type Ordering\nDESCRIPTION: Provides an interface for customizing the ordering of GraphQL schema components during introspection. Includes comparers for directives, types, arguments, enum values, and fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISchemaComparer\n{\n    System.Collections.Generic.IComparer<GraphQL.Types.Directive>? DirectiveComparer { get; }\n    System.Collections.Generic.IComparer<GraphQL.Types.IGraphType>? TypeComparer { get; }\n    System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument>? ArgumentComparer(GraphQL.Types.IFieldType field);\n    System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition>? EnumValueComparer(GraphQL.Types.EnumerationGraphType parent);\n    System.Collections.Generic.IComparer<GraphQL.Types.IFieldType>? FieldComparer(GraphQL.Types.IGraphType parent);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Loaders for DataLoader Context in C#\nDESCRIPTION: Extension methods to get or add simple data loaders to a DataLoader context. These methods support loading individual data items asynchronously with optional cancellation token support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoader<T> GetOrAddLoader<T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Threading.Tasks.Task<T>> fetchFunc) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoader<T> GetOrAddLoader<T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<T>> fetchFunc) { }\n```\n\n----------------------------------------\n\nTITLE: Migrating Field Resolvers to ValueTask in GraphQL.NET v5\nDESCRIPTION: Examples showing how to migrate from Task-based field resolvers to ValueTask-based resolvers in v5, including various approaches for converting Task to ValueTask.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// v4\nvar resolver = new AsyncFieldResolver<string>(async context => await GetSomeString());\n\n// v5\nvar resolver = new FuncFieldResolver<string>(async context => await GetSomeString());\n\n\n// v4\nFunc<IResolveFieldContext, Task<string>> func = async context => await GetSomeString();\nvar resolver = new AsyncFieldResolver(func);\n\n// v5 option 1\nFunc<IResolveFieldContext, ValueTask<string>> func = async context => await GetSomeString();\nvar resolver = new FuncFieldResolver(func);\n\n// v5 option 2\nFunc<IResolveFieldContext, Task<string>> func = async context => await GetSomeString();\nvar resolver = new FuncFieldResolver(context => new ValueTask<string>(func(context)));\n\n// v5 option 3\nFunc<IResolveFieldContext, Task<string>> func = async context => await GetSomeString();\nvar resolver = new FuncFieldResolver(async context => await func(context));\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Visitor Implementation in C#\nDESCRIPTION: Sealed class implementing visitor pattern for schema validation, with methods for visiting different GraphQL type definitions\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_206\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class SchemaValidationVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public override void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public override void VisitSchema(GraphQL.Types.ISchema schema) { }\n    public static void Run(GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DefaultAstValue Attribute for Complex Types in GraphQL.NET\nDESCRIPTION: Shows how to use the DefaultAstValue attribute to set default values for complex types in type-first schemas. This is useful when regular DefaultValue can't represent complex objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\n// typical way to set a default value of an input field, which is not possible for complex types\npublic class MyInputObject1\n{\n    [DefaultValue(\"value\")]\n    public required string Field1 { get; set; }\n}\n\n// demonstrates setting a default value for an input field that has a complex type\npublic class MyInputObject2\n{\n    [DefaultAstValue(\"{ field1: \\\"value\\\" }\")]\n    public MyInputObject1 Json { get; set; }\n}\n\n// output type\npublic class MyOutputObject\n{\n    // typical way to set a default value of an output field argument\n    public string Field1(string arg = \"abc\") => arg;\n\n    // demonstrates setting a default value for an output field argument that has a complex type\n    public string Field2([DefaultAstValue(\"{ field1: \\\"sample2\\\" }\")] MyInputObject1 arg) => arg.Field1;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative NoIntrospectionValidationRule using MatchingNodeVisitor\nDESCRIPTION: An alternative implementation of the NoIntrospectionValidationRule using the MatchingNodeVisitor helper class for cleaner code. It performs the same validation by checking for __schema or __type fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NoIntrospectionValidationRule : ValidationRuleBase\n{\n    private static readonly MatchingNodeVisitor<GraphQLField> _visitor = new(\n        (field, context) =>\n        {\n            if (field.Name.Value == \"__schema\" || field.Name.Value == \"__type\")\n                context.ReportError(new NoIntrospectionError(context.Document.Source, field));\n        });\n\n    public override ValueTask<INodeVisitor?> GetPreNodeVisitorAsync(ValidationContext context) => new(_visitor);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Dependency Injection Infrastructure\nDESCRIPTION: Interfaces and classes for dependency injection in GraphQL.NET. Provides a builder pattern for configuring GraphQL services and schema initialization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_65\n\nLANGUAGE: C#\nCODE:\n```\npublic delegate System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecutionDelegate(GraphQL.ExecutionOptions options);\n\npublic abstract class GraphQLBuilderBase : GraphQL.DI.IGraphQLBuilder\n{\n    protected GraphQLBuilderBase() { }\n    public abstract GraphQL.DI.IServiceRegister Services { get; }\n    protected virtual void RegisterDefaultServices() { }\n}\n\npublic interface IConfigureExecution\n{\n    float SortOrder { get; }\n    System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next);\n}\n\npublic interface IConfigureSchema\n{\n    void Configure(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider);\n}\n\npublic interface IGraphQLBuilder\n{\n    GraphQL.DI.IServiceRegister Services { get; }\n}\n\npublic interface IServiceRegister\n{\n    GraphQL.DI.IServiceRegister Configure<TOptions>(System.Action<TOptions, System.IServiceProvider>? action = null)\n        where TOptions :  class, new ();\n    GraphQL.DI.IServiceRegister Register(System.Type serviceType, object implementationInstance, bool replace = false);\n    GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false);\n    GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false);\n    GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, object implementationInstance, GraphQL.DI.RegistrationCompareMode mode = 0);\n    GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0);\n    GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0);\n}\n\npublic enum RegistrationCompareMode\n{\n    ServiceType = 0,\n    ServiceTypeAndImplementationType = 1,\n}\n\npublic enum ServiceLifetime\n{\n    Singleton = 0,\n    Scoped = 1,\n    Transient = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Violations of GQL009 Rule in C#\nDESCRIPTION: This code snippet shows various examples of violating the GQL009 rule by using sync resolvers with awaitable delegates in a GraphQL.NET ObjectGraphType.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql009.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyGraphType : ObjectGraphType<Person>\n{\n    public MyGraphType()\n    {\n        // 1. no return type defined\n        Field<StringGraphType>(\"Title\")\n            .Resolve(ctx => Task.FromResult(\"developer\"));\n\n        // 2. the method returns ValueTask<T>\n        Field<StringGraphType>(\"Title\")\n            .Resolve(ctx => GetTitleAsync());\n\n        // 3. method group, return type defined in Field method\n        Field<StringGraphType, object>(\"Title\")\n            .Resolve(ResolveTitleAsync);\n\n        // 4. field builder created with awaitable return type\n        Field<StringGraphType, Task<string>>(\"Title\")\n            .ResolveScoped(ctx => Task.FromResult(\"developer\"));\n\n        // 5. the method returns ValueTask<T>\n        Field<StringGraphType>(\"Title\")\n            .ResolveScoped(ctx => GetTitleAsync());\n\n        // 6. object or dynamic is used as return type in Returns method\n        Field<StringGraphType>(\"Title\").Returns<dynamic>()\n            .ResolveScoped(ctx => ResolveTitleAsync(ctx));\n    }\n\n    private ValueTask<string> GetTitleAsync() => ValueTask.FromResult(\"developer\");\n\n    private Task<string> ResolveTitleAsync(IResolveFieldContext<Person> ctx) =>\n        Task.FromResult(\"developer\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SteroidsDI in ASP.NET Core Startup\nDESCRIPTION: Code for configuring SteroidsDI in ASP.NET Core by registering Defer<> and IScopeProvider services in the Startup.ConfigureServices method to enable scoped service resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    ...\n\n    // Add SteroidsDI Open Generic Defer<> Factory Class\n    services.AddDefer();\n\n    // Add SteroidsDI IScopeProvider to use the AspNetCoreHttpScopeProvider\n    // which internally uses the IHttpContextAccessor.HttpContext.RequestServices;\n    services.AddHttpScope();\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidationError Class for GraphQL in C#\nDESCRIPTION: This class extends DocumentError to represent validation errors in GraphQL queries. It includes constructors for various error scenarios and properties for error details.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_218\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ValidationError : GraphQL.Execution.DocumentError\n{\n    public ValidationError(string message) { }\n    public ValidationError(string message, System.Exception? innerException) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, GraphQLParser.AST.ASTNode node) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, params GraphQLParser.AST.ASTNode[] nodes) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, System.Exception? innerException, GraphQLParser.AST.ASTNode node) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, System.Exception? innerException, params GraphQLParser.AST.ASTNode[]? nodes) { }\n    public System.Collections.Generic.IEnumerable<GraphQLParser.AST.ASTNode> Nodes { get; }\n    public string? Number { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Entity Resolver with Code-First Widget Type\nDESCRIPTION: Demonstrates how to configure a federation entity resolver using code-first approach with Widget type as representation. Includes key field configuration and reference resolution using dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic class WidgetType : ObjectGraphType<Widget>\n{\n    public WidgetType()\n    {\n        // configure federation key fields\n        this.Key(\"id\");\n\n        // configure federation resolver\n        this.ResolveReference(async (context, widget) =>\n        {\n            // pull the id from the representation\n            var id = widget.Id;\n\n            // resolve the entity reference\n            var widgetData = context.RequestServices!.GetRequiredService<WidgetRepository>();\n            return await widgetData.GetWidgetByIdAsync(id, context.CancellationToken);\n        });\n\n        // configure fields\n        Field(x => x.Id, type: typeof(NonNullGraphType<IdGraphType>));\n        Field(x => x.Name);\n    }\n}\n\npublic class Widget\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with Scoped Services\nDESCRIPTION: Example showing how to execute a GraphQL query while providing scoped services through RequestServices in ASP.NET Core.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await _executer.ExecuteAsync(options =>\n{\n    options.Schema = _schema;\n    options.Query = request.Query;\n    options.Variables = _serializer.Deserialize<Inputs>(request.Variables); // IGraphQLTextSerializer from DI\n    options.RequestServices = context.RequestServices;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic ConnectionBuilder with Return Type Specification for GraphQL.NET\nDESCRIPTION: This specialized ConnectionBuilder class adds a return type parameter TReturnType to allow for strongly-typed resolver methods. It extends the builder pattern API for configuring GraphQL connections with type-specific return values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConnectionBuilder<TSourceType, TReturnType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata\n{\n    protected ConnectionBuilder(GraphQL.Types.FieldType fieldType) { }\n    public GraphQL.Types.FieldType FieldType { get; set; }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType defaultValue = default, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Bidirectional() { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> DeprecationReason(string? deprecationReason) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Description(string? description) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name, string argumentName, object? argumentValue) { }\n    [System.Obsolete(\"Please configure the connection name by providing the name as an argument to the \" +\n        \"'Connection' method. This method will be removed in v9.\")]\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Name(string name) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> PageSize(int? pageSize) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Registering Input Object Graph Type in GraphQL.NET\nDESCRIPTION: Example of using AutoRegisteringInputObjectGraphType to create an input type from a C# class automatically. Demonstrates using it with a mutation field named 'addPerson'.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\nField<StringGraphType>(\"addPerson\")\n    .Arguments<AutoRegisteringInputObjectGraphType<Person>>(\"value\")\n    .Resolve(context => {\n        var person = context.GetArgument<Person>(\"value\");\n        db.Add(person);\n        return \"ok\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering Concrete Types in GraphQL Schema with GraphQL-DotNet\nDESCRIPTION: This snippet demonstrates how to register concrete types that implement interfaces in the GraphQL schema. It uses the RegisterType method to ensure the schema knows about these types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsSchema : Schema\n{\n  public StarWarsSchema()\n  {\n    Query = new StarWarsQuery();\n    RegisterType<DroidType>();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaExtensions in GraphQL.NET\nDESCRIPTION: Static extension methods for ISchema that provide functionality for schema configuration, registration, and manipulation. These methods enable linking schemas, registering types, printing schemas, and executing GraphQL queries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\npublic static class SchemaExtensions\n{\n    public static void AddLinkDirectiveSupport(this GraphQL.Types.ISchema schema, System.Action<GraphQL.Utilities.LinkConfiguration>? configuration = null) { }\n    public static void AutoRegister(this GraphQL.Types.ISchema schema, System.Type clrType, GraphQL.AutoRegisteringMode mode = 3) { }\n    public static void AutoRegister<TClrType>(this GraphQL.Types.ISchema schema, GraphQL.AutoRegisteringMode mode = 3) { }\n    public static TSchema EnableExperimentalIntrospectionFeatures<TSchema>(this TSchema schema, GraphQL.ExperimentalIntrospectionFeaturesMode mode = 0)\n        where TSchema : GraphQL.Types.ISchema { }\n    public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, GraphQL.IGraphQLTextSerializer serializer, System.Action<GraphQL.ExecutionOptions> configure) { }\n    public static System.Collections.Generic.IEnumerable<GraphQL.Utilities.LinkConfiguration> GetLinkedSchemas(this GraphQL.Types.ISchema schema) { }\n    public static void LinkSchema(this GraphQL.Types.ISchema schema, string url, System.Action<GraphQL.Utilities.LinkConfiguration>? configuration = null) { }\n    public static string Print(this GraphQL.Types.ISchema schema, GraphQL.Utilities.PrintOptions? options = null) { }\n    public static System.Threading.Tasks.ValueTask PrintAsync(this GraphQL.Types.ISchema schema, System.IO.TextWriter writer, GraphQL.Utilities.PrintOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { }\n    public static void RegisterType<T>(this GraphQL.Types.ISchema schema)\n        where T : GraphQL.Types.IGraphType { }\n    public static void RegisterTypeMapping<TClrType, TGraphType>(this GraphQL.Types.ISchema schema)\n        where TGraphType : GraphQL.Types.IGraphType { }\n    public static void RegisterTypeMappings(this GraphQL.Types.ISchema schema) { }\n    public static void RegisterTypeMappings(this GraphQL.Types.ISchema schema, System.Reflection.Assembly assembly) { }\n    public static void RegisterTypes<TSchema>(this TSchema schema, params GraphQL.Types.IGraphType[] types)\n        where TSchema : GraphQL.Types.ISchema { }\n    public static TSchema RegisterTypes<TSchema>(this TSchema schema, params System.Type[] types)\n        where TSchema : GraphQL.Types.ISchema { }\n    public static void RegisterVisitor<TVisitor>(this GraphQL.Types.ISchema schema)\n        where TVisitor : GraphQL.Utilities.ISchemaNodeVisitor { }\n    public static TSchema ReplaceScalar<TSchema>(this TSchema schema, GraphQL.Types.ScalarGraphType scalar)\n        where TSchema : GraphQL.Types.ISchema { }\n    public static void Run(this GraphQL.Utilities.ISchemaNodeVisitor visitor, GraphQL.Types.ISchema schema) { }\n    public static GraphQLParser.AST.GraphQLDocument ToAST(this GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous IO for Newtonsoft.Json in ASP.NET Core\nDESCRIPTION: Configuration for ASP.NET Core services to allow synchronous IO operations when using GraphQL.NewtonsoftJson library, which is required because Newtonsoft.Json lacks asynchronous serialization methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    // If using Kestrel:\n    services.Configure<KestrelServerOptions>(options =>\n    {\n        options.AllowSynchronousIO = true;\n    });\n\n    // If using IIS:\n    services.Configure<IISServerOptions>(options =>\n    {\n        options.AllowSynchronousIO = true;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Relay Types in GraphQL.NET\nDESCRIPTION: Shows how to manually register Relay graph types in the DI container when not using the provided builder methods. This is required from version 8 onwards.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_53\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<PageInfoType>();\nservices.AddSingleton(typeof(EdgeType<>));\nservices.AddSingleton(typeof(ConnectionType<>));\nservices.AddSingleton(typeof(ConnectionType<,>));\n```\n\n----------------------------------------\n\nTITLE: Updated Field Method Usage Examples in C#\nDESCRIPTION: Examples showing the correct way to define fields using the new builder pattern API in GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql004.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nField<NonNullGraphType<StringGraphType>>(\"name\")\n    .Description(\"Field description\")\n    .Resolve(context => context.Source!.Name);\n\nField<CharacterInterface>(\"hero\")\n    .ResolveAsync(async context => await data.GetDroidByIdAsync(\"3\"));\n\nField<HumanType>(\"human\")\n    .Argument<NonNullGraphType<StringGraphType>>(\"id\", \"id of the human\")\n    .ResolveAsync(async context => await data.GetHumanByIdAsync(context.GetArgument<string>(\"id\")));\n\n// remove the 'nullable' argument because if was ignored by the obsolete overload\nField(x => Name, typeof(StringGraphType));\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation GraphQL Schema in GraphQL\nDESCRIPTION: A complete GraphQL schema definition using Apollo Federation v2.3 specifications. The schema establishes a review system with three main entity types (Review, Product, User) that are connected through relationships. Federation directives like @key are used to enable distributed graph capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample3Tests.Schema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"]) {\n  query: Query\n}\n\nscalar _Any\n\ntype Query {\n  _service: _Service!\n  _entities(representations: [_Any!]!): [_Entity]!\n}\n\ntype _Service {\n  sdl: String\n}\n\nunion _Entity = Review | Product | User\n\ntype Review @key(fields: \"id\") {\n  id: ID!\n  content: String!\n  product: Product!\n  author: User!\n}\n\ntype Product @key(fields: \"id\") {\n  id: ID!\n  reviews: [Review!]!\n}\n\ntype User @key(fields: \"id\") {\n  id: ID!\n  reviews: [Review!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DataLoader Support to GraphQL Builder in C#\nDESCRIPTION: Extension method for the GraphQL builder to register DataLoader services. This method extends IGraphQLBuilder to add DataLoader capabilities to the dependency injection container.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder AddDataLoader(this GraphQL.DI.IGraphQLBuilder builder) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Timeout in GraphQL.NET\nDESCRIPTION: Demonstrates how to set a timeout for GraphQL query execution. This configuration limits the maximum execution time to prevent long-running queries from consuming too many resources.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\n// via the GraphQL builder\nservices.AddGraphQL(b => b\n    .WithTimeout(TimeSpan.FromSeconds(30))\n);\n\n// or via the options\noptions.Timeout = TimeSpan.FromSeconds(30);\n```\n\n----------------------------------------\n\nTITLE: Defining Obsolete IFederatedResolver Interface\nDESCRIPTION: Defines the deprecated IFederatedResolver interface for implementing federated reference resolvers. Users are advised to use IFederationResolver instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_212\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use IFederationResolver instead. This interface will be removed in v9.\")]\npublic interface IFederatedResolver\n{\n    System.Threading.Tasks.Task<object?> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Federation Resolver for GraphQL.NET\nDESCRIPTION: Generic implementation of federation resolver that allows different input and output types, useful for mapping between representation types and actual entity types in complex federation scenarios.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_115\n\nLANGUAGE: C#\nCODE:\n```\npublic class FederationResolver<TSourceType, TReturnType> : GraphQL.Federation.Resolvers.FederationResolverBase<TSourceType>\n{\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Builder Generic Class Implementation in C#\nDESCRIPTION: Generic class for building GraphQL connections with support for nodes, edges and connection types. Includes methods for configuring arguments, directives, resolvers and pagination.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConnectionBuilder<TSourceType, TReturnType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata\n{\n    protected ConnectionBuilder(GraphQL.Types.FieldType fieldType) { }\n    public GraphQL.Types.FieldType FieldType { get; set; }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Bidirectional() { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> PageSize(int? pageSize) { }\n    public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveDeprecationReasonsVisitor for Schema Cleaning\nDESCRIPTION: Implements a visitor that removes deprecation reasons from a GraphQL AST. It visits directive nodes and removes deprecated directives or their reason arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_216\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class RemoveDeprecationReasonsVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQLParser.Visitors.NullVisitorContext>\n{\n    protected override System.Threading.Tasks.ValueTask VisitDirectiveAsync(GraphQLParser.AST.GraphQLDirective directive, GraphQLParser.Visitors.NullVisitorContext context) { }\n    public static void Visit(GraphQLParser.AST.ASTNode node) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling GraphQL Field Arguments and Type Mapping\nDESCRIPTION: Classes for managing GraphQL field arguments, enumeration case handling, and automatic type registration in GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_133\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ArgumentInformation\n{\n    public ArgumentInformation(System.Reflection.ParameterInfo parameterInfo, System.Type? sourceType, GraphQL.Types.FieldType? fieldType, GraphQL.Types.TypeInformation typeInformation) { }\n    public ArgumentInformation(System.Reflection.ParameterInfo parameterInfo, System.Type? sourceType, GraphQL.Types.FieldType? fieldType, GraphQL.Types.TypeInformation typeInformation, System.Linq.Expressions.LambdaExpression? expression) { }\n    public System.Linq.Expressions.LambdaExpression? Expression { get; set; }\n    public GraphQL.Types.FieldType? FieldType { get; }\n    public System.Reflection.ParameterInfo ParameterInfo { get; }\n    public System.Type? SourceType { get; }\n    public GraphQL.Types.TypeInformation TypeInformation { get; }\n    public virtual void ApplyAttributes() { }\n    [return: System.Runtime.CompilerServices.TupleElementNames(new string?[]?[] {\"QueryArgument\",\"Expression\"})]\n    public virtual System.ValueTuple<GraphQL.Types.QueryArgument?, System.Linq.Expressions.LambdaExpression?> ConstructQueryArgument() { }\n    public void SetDelegate<TParameterType>(System.Func<GraphQL.IResolveFieldContext, TParameterType?> argumentDelegate) { }\n    public void SetDelegateWithCast(System.Func<GraphQL.IResolveFieldContext, object?> argumentDelegate) { }\n}\n\npublic class AsIsCaseAttribute : GraphQL.Types.EnumCaseAttribute\n{\n    public AsIsCaseAttribute() { }\n    public override string ChangeEnumCase(string val) { }\n}\n\npublic class AutoRegisteringGraphTypeMappingProvider : GraphQL.Types.IGraphTypeMappingProvider\n{\n    public AutoRegisteringGraphTypeMappingProvider() { }\n    public AutoRegisteringGraphTypeMappingProvider(bool mapInputTypes, bool mapOutputTypes, bool mapInterfaceTypes = true) { }\n    [System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors, typeof(GraphQL.Types.AutoRegisteringInputObjectGraphType<TSourceType?>?))]\n    [System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors, typeof(GraphQL.Types.AutoRegisteringInterfaceGraphType<TSourceType?>?))]\n    [System.Diagnostics.CodeAnalysis.DynamicDependency(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors, typeof(GraphQL.Types.AutoRegisteringObjectGraphType<TSourceType?>?))]\n}\n```\n\n----------------------------------------\n\nTITLE: Extended Introspection Schema in GraphQL\nDESCRIPTION: The introspection schema with experimental features enabled, highlighting the new fields and types that allow introspection of applied directives. This extends the standard introspection schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n  appliedDirectives: [__AppliedDirective!]!   <----- NEW FIELD\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  interfaces: [__Type!]\n  possibleTypes: [__Type!]\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  inputFields: [__InputValue!]\n  ofType: __Type\n  appliedDirectives: [__AppliedDirective!]!   <----- NEW FIELD\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n  appliedDirectives: [__AppliedDirective!]!   <----- NEW FIELD\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n  appliedDirectives: [__AppliedDirective!]!   <----- NEW FIELD\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n  appliedDirectives: [__AppliedDirective!]!   <----- NEW FIELD\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!                      <----- NEW FIELD (FROM THE WORKING DRAFT)\n  appliedDirectives: [__AppliedDirective!]!   <----- NEW FIELD\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n\ntype __AppliedDirective {                     <--- NEW INTROSPECTION TYPE\n  name: String!\n  args: [__DirectiveArgument!]!\n}\n\ntype __DirectiveArgument {                    <--- NEW INTROSPECTION TYPE\n  name: String!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Directive Attribute for Pattern Matching\nDESCRIPTION: Shows how to apply directives using attributes in type-first graph types and fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class Query\n{\n    public static string Hello(\n        [Directive(\"pattern\", \"regex\", \"[A-Z]+\")] // uppercase only\n        string arg)\n        => arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Graph Type Interface\nDESCRIPTION: This interface defines the contract for object graph types, extending various base interfaces and adding type checking capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_166\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    System.Func<object, bool>? IsTypeOf { get; set; }\n    bool SkipTypeCheck { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLRequestJsonConverter for GraphQL.NET\nDESCRIPTION: A Newtonsoft.Json converter for GraphQL request objects. It handles the serialization and deserialization of individual GraphQL requests.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLRequestJsonConverter : Newtonsoft.Json.JsonConverter\n{\n    public GraphQLRequestJsonConverter() { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public override bool CanConvert(System.Type objectType) { }\n    public override object? ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object? value, Newtonsoft.Json.JsonSerializer serializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ValidateArguments Attribute for Custom Validation\nDESCRIPTION: Demonstrates using the ValidateArguments attribute to define a custom argument validator for a method. Validates input parameters using a separate validation method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OutputClass3\n{\n    public static string Hello1(string str1, string str2) => str1 + str2;\n\n    [ValidateArguments(nameof(ValidateHelloArguments))]\n    public static string Hello2(string str1, string str2) => str1 + str2;\n\n    private static ValueTask ValidateHelloArguments(FieldArgumentsValidationContext context)\n    {\n        var str1 = context.GetArgument<string>(\"str1\");\n        var str2 = context.GetArgument<string>(\"str2\");\n        if (str1 == null && str2 == null)\n            context.ReportError(\"Must provide str1 or str2\");\n        return default;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphType Initialization Changes in GraphQL.NET\nDESCRIPTION: Shows the updated approach for initializing fields in GraphTypes. Fields must now be added with resolved types since initialization occurs after schema setup is complete.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_61\n\nLANGUAGE: csharp\nCODE:\n```\n// v7\npublic class MyGraphType : ObjectGraphType\n{\n    public override void Initialize(ISchema schema)\n    {\n        AddField(new FieldType {\n            Name = \"Field\",\n            Type = typeof(StringGraphType)\n        });\n    }\n}\n\n// v8\npublic class MyGraphType : ObjectGraphType\n{\n    public override void Initialize(ISchema schema)\n    {\n        AddField(new FieldType {\n            Name = \"field\", // name converter is not applied here, so the name must be exactly as desired\n            ResolvedType = new StringGraphType()\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Registration Extensions for GraphQL.NET\nDESCRIPTION: Extension methods for registering services with different lifetimes and implementation strategies in GraphQL.NET's dependency injection system.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IServiceRegister Register<TService>(this GraphQL.DI.IServiceRegister services, TService implementationInstance, bool replace = false)\n    where TService : class { }\n\npublic static GraphQL.DI.IServiceRegister Register<TService>(this GraphQL.DI.IServiceRegister services, System.Func<System.IServiceProvider, TService> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false)\n    where TService : class { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Entity Resolver with Custom Representation Type\nDESCRIPTION: Shows how to implement a federation entity resolver using a custom representation type in code-first approach, separating the representation model from the entity model.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic class WidgetType : ObjectGraphType<Widget>\n{\n    public WidgetType()\n    {\n        // configure federation key fields\n        this.Key(\"id\");\n\n        // configure federation resolver\n        this.ResolveReference<WidgetRepresentation, Widget>(async (context, widget) =>\n        {\n            // pull the id from the representation\n            var id = widget.Id;\n\n            // resolve the entity reference\n            var widgetData = context.RequestServices!.GetRequiredService<WidgetRepository>();\n            return await widgetData.GetWidgetByIdAsync(id, context.CancellationToken);\n        });\n\n        // configure fields\n        Field(x => x.Id, type: typeof(NonNullGraphType<IdGraphType>));\n        Field(x => x.Name);\n    }\n}\n\npublic class Widget\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class WidgetRepresentation\n{\n    public string Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query Structure\nDESCRIPTION: Example GraphQL query demonstrating a nested data request for orders and associated user information\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n\torders(date: \"2017-01-01\") {\n\t\torderId\n\t\tdate\n\t\tuser {\n\t\t\tuserId\n\t\t\tfirstName\n\t\t\tlastName\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StarWars GraphQL Schema Root Types\nDESCRIPTION: Defines the root schema types including Query and Mutation entry points.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Query\n  mutation: Mutation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataLoaderContext Class in GraphQL.NET\nDESCRIPTION: Provides a context for managing data loaders in a GraphQL request. It allows getting or adding data loaders by key to ensure a single instance per request.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataLoaderContext\n{\n    public DataLoaderContext() { }\n    public TDataLoader GetOrAdd<TDataLoader>(string loaderKey, System.Func<TDataLoader> dataLoaderFactory)\n        where TDataLoader : GraphQL.DataLoader.IDataLoader { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolverBuilder<TSourceType, TReturnType, T1> in C#\nDESCRIPTION: Generic resolver builder class that injects one dependency from Microsoft DI. Provides methods for defining synchronous and asynchronous field resolvers with the injected dependency.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType, T1>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1> WithScope() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2> WithService<T2>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema-First Enumeration Types in GraphQL.NET\nDESCRIPTION: Demonstrates three ways to configure schema-first enumeration types to use C# enumeration backing types rather than the default string values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = Schema.For(definitions, c =>\n{\n    // example 1: define the \"Animal\" schema enumeration type to use the C# type Animal\n    c.Types.Include<Animal>();\n\n    // example 2: define the \"AnimalType\" schema enumeration type to use the C# type Animal\n    c.Types.Include<Animal>(\"AnimalType\");\n\n    // example 3: define the \"Animal\" schema enumeration type to use the C# type Animal\n    c.Types.For(\"Animal\").Type = typeof(Animal);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Tracing with DocumentExecutor in C#\nDESCRIPTION: Demonstrates how to enable metrics and Apollo tracing using DocumentExecutor. Shows basic setup with EnableMetrics flag and InstrumentFieldsMiddleware integration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar start = DateTime.UtcNow;\n\nvar executor = new DocumentExecutor();\nExecutionResult result = executor.ExecuteAsync(_ =>\n{\n  _.Schema = schema;\n  _.Query = \"...\";\n  _.EnableMetrics = true;\n  _.FieldMiddleware.Use<InstrumentFieldsMiddleware>();\n});\n\nresult.EnrichWithApolloTracing(start);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout to Throw Exception in GraphQL.NET\nDESCRIPTION: Shows how to configure the timeout to throw a TimeoutException instead of returning an error response. This option allows for different error handling mechanisms in the application.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n// via the GraphQL builder\nservices.AddGraphQL(b => b\n    .WithTimeout(TimeSpan.FromSeconds(30), TimeoutAction.ThrowTimeoutException)\n);\n\n// or via the options\noptions.Timeout = TimeSpan.FromSeconds(30);\noptions.TimeoutAction = TimeoutAction.ThrowTimeoutException;\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Document Validation in C#\nDESCRIPTION: Method implementation for validating a GraphQL document against a schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_237\n\nLANGUAGE: C#\nCODE:\n```\npublic void Validate(GraphQLParser.AST.GraphQLDocument document, GraphQL.Types.ISchema schema) { }\n```\n\n----------------------------------------\n\nTITLE: Registering List Converter Factory Mapping\nDESCRIPTION: Demonstrates how to register a simple mapping between interface and concrete list types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nValueConverter.RegisterListConverterFactory(typeof(IList<>), typeof(List<>)); // default mapping is T[]\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoaderContextExtensions for Convenience Methods in GraphQL.NET\nDESCRIPTION: Provides extension methods for DataLoaderContext to simplify creation of different types of data loaders with various configurations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DataLoaderContextExtensions\n{\n    public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, T defaultValue = default, int maxBatchSize = 2147483647)\n        where TKey :  notnull { }\n    public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, T defaultValue = default, int maxBatchSize = 2147483647)\n        where TKey :  notnull { }\n    public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, T defaultValue = default, int maxBatchSize = 2147483647)\n        where TKey :  notnull { }\n    public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, T defaultValue = default, int maxBatchSize = 2147483647)\n        where TKey :  notnull { }\n    public static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, int maxBatchSize = 2147483647)\n        where TKey :  notnull { }\n    public static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, int maxBatchSize = 2147483647)\n        where TKey :  notnull { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Implementations in GraphQL Schema-First\nDESCRIPTION: Example of defining GraphQL interfaces that implement other interfaces using schema-first approach. This shows how to create interface hierarchies in GraphQL schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n\ninterface Character implements Node {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Object Impact for GraphQL Complexity Analysis in C#\nDESCRIPTION: Code showing how to set a default impact value for all object fields. This is useful when most object fields require similar database operations with consistent performance characteristics.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Set default for object fields (assumed to need to load from a database)\ncomplexityConfig.DefaultObjectImpact = 20;\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Impact for Complex GraphQL Resolvers in C#\nDESCRIPTION: Examples showing how to configure the complexity impact for specific fields in both code-first and schema-first approaches. This helps accurately estimate database processing time for fields that require more computational resources.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Set higher impact for field resolvers that require more processing time\n\n// Code-first\nusersField.WithComplexityImpact(fieldImpact: 50);\n\n// Schema-first / type-first:\n[Complexity(fieldImpact: 50)]\npublic static IEnumerable<User> Users([FromServices] IUserService userService) => userService.GetUsers();\n```\n\n----------------------------------------\n\nTITLE: AuthorizeAttribute for GraphQL.NET Field Authorization\nDESCRIPTION: Defines an attribute that requires authorization for accessing GraphQL fields, methods, or properties. Supports policy and role-based authorization and modifies various GraphQL type elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class AuthorizeAttribute : GraphQL.GraphQLAttribute\n{\n    public AuthorizeAttribute() { }\n    public AuthorizeAttribute(string policy) { }\n    public string? Policy { get; set; }\n    public string? Roles { get; set; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Schema Using Generic Schema.For Method\nDESCRIPTION: Generic version of the Schema.For method that allows specifying a custom SchemaBuilder type. This provides more flexibility when creating schemas from SDL strings by letting you use a custom builder that may have additional functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_188\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphQL.Types.Schema For<TSchemaBuilder>(string typeDefinitions, System.Action<TSchemaBuilder>? configure = null)\n            where TSchemaBuilder : GraphQL.Utilities.SchemaBuilder, new () { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Key Selection in GraphQL.NET\nDESCRIPTION: Example showing how to customize the cache key selection for multi-schema environments using the AdditionalCacheKeySelector delegate. This allows unique identification of cached documents when using multiple schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .UseMemoryCache(options =>\n    {\n        options.AdditionalCacheKeySelector = execOptions =>\n        {\n            if (execOptions.UserContext is IDictionary<string, object> context &&\n                context.TryGetValue(\"CustomHeader\", out var header))\n            {\n                return header;\n            }\n            return null;\n        };\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: AutoRegisteringMode Enumeration for GraphQL.NET Type Registration\nDESCRIPTION: Defines a flags enumeration that specifies the auto-registration mode for GraphQL types. Supports Input, Output, or Both modes for type registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[System.Flags]\npublic enum AutoRegisteringMode\n{\n    Input = 1,\n    Output = 2,\n    Both = 3,\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request JSON Sample (camelCase)\nDESCRIPTION: Example of a GraphQL request in JSON format using camelCase property names, which works with both System.Text.Json and Newtonsoft.Json libraries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"query\": \"query ($arg: Int!) { field1(arg: $arg) { childField } }\",\n    \"variables\": {\n        \"arg\": 55\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Scalar Type Implementation\nDESCRIPTION: Implementation of various scalar types including DateTime, DateTimeOffset, Decimal, and Complex scalar types with parsing and serialization logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\npublic class ComplexScalarGraphType : GraphQL.Types.ScalarGraphType\n{\n    public ComplexScalarGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Resolver Builder with Generic Services\nDESCRIPTION: Base connection resolver builder class that supports dependency injection of services. Provides methods for resolving both synchronous and asynchronous connection queries with optional service injection and scoping.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConnectionResolverBuilder<TSourceType, TReturnType>\n{\n    public ConnectionResolverBuilder(GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n    public GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType> WithScope() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1> WithService<T1>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2> WithServices<T1, T2>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2, T3> WithServices<T1, T2, T3>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4> WithServices<T1, T2, T3, T4>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> WithServices<T1, T2, T3, T4, T5>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Inputs Class and Extensions in C#\nDESCRIPTION: Defines a read-only dictionary for GraphQL input values and extension methods to work with inputs. This class provides a standardized way to handle input arguments in GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Inputs : System.Collections.ObjectModel.ReadOnlyDictionary<string, object?>\n{\n    public static readonly GraphQL.Inputs Empty;\n    public Inputs(System.Collections.Generic.IDictionary<string, object?> dictionary) { }\n}\n\npublic static class InputsExtensions\n{\n    public static GraphQL.Inputs ToInputs(this System.Collections.Generic.Dictionary<string, object?> dictionary) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Non-Cancellable Functions for DataLoader in C#\nDESCRIPTION: Utility methods to wrap non-cancellable functions with cancellation token support. These helpers make it easier to use regular functions with methods requiring cancellation token overloads.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.Func<System.Threading.CancellationToken, TResult> WrapNonCancellableFunc<TResult>(System.Func<TResult> func) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static System.Func<T, System.Threading.CancellationToken, TResult> WrapNonCancellableFunc<T, TResult>(System.Func<T, TResult> func) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring StarWarsSchema with Service Provider\nDESCRIPTION: Implementation of StarWarsSchema class showing how to manually resolve dependencies using IServiceProvider when using SelfActivatingServiceProvider.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsSchema : Schema\n{\n    public StarWarsSchema(IServiceProvider serviceProvider) : base(serviceProvider)\n    {\n        Query = serviceProvider.GetRequiredService<StarWarsQuery>();\n        Mutation = serviceProvider.GetRequiredService<StarWarsMutation>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionResultJsonConverter for GraphQL.NET\nDESCRIPTION: A Newtonsoft.Json converter for GraphQL execution results. It supports custom naming strategies and handles the serialization of GraphQL execution result objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ExecutionResultJsonConverter : Newtonsoft.Json.JsonConverter\n{\n    public ExecutionResultJsonConverter() { }\n    public ExecutionResultJsonConverter(Newtonsoft.Json.Serialization.NamingStrategy? namingStrategy) { }\n    public override bool CanRead { get; }\n    public override bool CanConvert(System.Type objectType) { }\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object? value, Newtonsoft.Json.JsonSerializer serializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Document Executor in C#\nDESCRIPTION: Core DocumentExecuter class that implements IDocumentExecuter interface. Handles building and executing GraphQL documents with validation and execution strategy selection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class DocumentExecuter : GraphQL.IDocumentExecuter\n{\n    public DocumentExecuter() { }\n    public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator) { }\n    public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Execution.IExecutionStrategySelector executionStrategySelector, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureExecution> configurations) { }\n    protected virtual GraphQL.Execution.ExecutionContext BuildExecutionContext(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.GraphQLOperationDefinition operation, GraphQL.Validation.IValidationResult validationResult, GraphQL.Instrumentation.Metrics metrics) { }\n    public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options) { }\n    protected virtual GraphQLParser.AST.GraphQLOperationDefinition GetOperation(string? operationName, GraphQLParser.AST.GraphQLDocument document) { }\n    protected virtual GraphQL.Execution.IExecutionStrategy SelectExecutionStrategy(GraphQL.Execution.ExecutionContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Animal Types\nDESCRIPTION: Complete GraphQL schema definition that includes Query type with various animal-related fields, Cat and Dog type definitions with their properties, and a Pet union type. The schema includes documentation strings and a deprecated field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.NoReasons.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n\"Animals - cats and dogs\"\nschema {\n  query: Query\n}\n\ntype Query {\n  animal: Pet\n  allAnimalsCount: [Int!] @deprecated\n  catsGroups: [[Cat!]!]!\n}\n\n\" A cat\"\ntype Cat {\n  \" cat's name\"\n  name: String!\n  weight(\n    \"comment on argument\"\n    inPounds: Boolean): Float!\n}\n\n\" A dog\"\ntype Dog {\n  \" dog's age\"\n  age: Int!\n}\n\n\"Cats with dogs\"\nunion Pet = Cat | Dog\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Authorization Requirements with IMetadataWriter\nDESCRIPTION: Demonstrates how to create an extension method using IMetadataWriter to require admin privileges for a GraphQL field. The example shows how to check existing roles and add authorization requirements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataBuilder RequireAdmin<TMetadataBuilder>(this TMetadataBuilder builder)\n    where TMetadataBuilder : IMetadataWriter\n{\n    if (builder.MetadataReader.GetRoles?.Contains(\"Guests\"))\n        throw new InvalidOperationException(\"Cannot require admin and guest access at the same time.\");\n    return builder.AuthorizeWithRoles(\"Administrators\");\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Parser for URI Type in GraphQL.NET\nDESCRIPTION: Example of defining a custom parser to convert a string input value to a URI object. This applies the conversion during validation rather than execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// for input object graph type\nField<StringGraphType>(\"website\") // match by property name, perhaps for a constructor argument\n    .ParseValue(value => new Uri((string)value));\n\nclass MyInputObject\n{\n    public Uri? Website { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Scalar Types via Dependency Injection\nDESCRIPTION: Demonstrates how to override built-in GraphQL.NET scalar types by registering derived implementations through dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<BooleanGraphType, MyBooleanGraphType>();\n```\n\n----------------------------------------\n\nTITLE: Updating Data Loaders in GraphQL-DotNet 3.0\nDESCRIPTION: Demonstrates how to modify data loader implementations to return IDataLoaderResult<T> instead of Task<T>. Shows changes to field resolver signatures that use data loaders.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderType : ObjectGraphType<Order>\n{\n    private readonly IDataLoaderContextAccessor _accessor;\n    private readonly IUsersStore _users;\n\n    // Inject the IDataLoaderContextAccessor to access the current DataLoaderContext\n    public OrderType(IDataLoaderContextAccessor accessor, IUsersStore users)\n    {\n        _accessor = accessor;\n        _users = users;\n\n        ...\n\n        Field<UserType, User>()\n            .Name(\"User\")\n            .ResolveAsync(ResolveUser);\n    }\n\n    //public Task<User> ResolveUser(IResolveFieldContext context)\n    public IDataLoaderResult<User> ResolveUser(IResolveFieldContext context)\n    {\n        // Get or add a batch loader with the key \"GetUsersById\"\n        // The loader will call GetUsersByIdAsync for each batch of keys\n        var loader = _accessor.Context.GetOrAddBatchLoader<int, User>(\"GetUsersById\", users.GetUsersByIdAsync);\n\n        // Add this UserId to the pending keys to fetch\n        // The task will complete once the GetUsersByIdAsync() returns with the batched results\n        return loader.LoadAsync(context.Source.UserId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Headers to GraphiQL\nDESCRIPTION: Configures GraphiQL with custom HTTP headers, such as authorization tokens, that will be included with every request.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/graphiql.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar graphiQLOptions = new GraphiQLOptions\n{\n    Headers = new Dictionary<string, string>\n    {\n        {\"Authorization\", \"Bearer <your-jwt-token>\"}\n    }\n};\n\napp.UseGraphQLGraphiQL(options: graphiQLOptions);\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics in GraphQL Execution Options in C#\nDESCRIPTION: This code demonstrates how to enable metrics when executing a GraphQL query. In GraphQL.NET v4, metrics are disabled by default and must be explicitly enabled.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await schema.ExecuteAsync(options =>\n{\n    options.Query = \"{ hero { id name } }\";\n    options.EnableMetrics = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Fixed Implementation of InputObjectGraphType in C#\nDESCRIPTION: Example showing how to fix the GQL007 violations by making all source type fields and properties properly settable - with public properties having public setters and fields that are neither readonly nor static.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql007.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<MySourceType>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"FirstName\");\n        Field<StringGraphType>(\"LastName\");\n        Field<StringGraphType>(\"Title\");\n        Field<IntGraphType>(\"Age\");\n    }\n}\n\npublic class MySourceType\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string Title;\n    public string Age;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Validator Class\nDESCRIPTION: Core document validator class implementing IDocumentValidator interface with support for validation rules and async validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_223\n\nLANGUAGE: C#\nCODE:\n```\npublic class DocumentValidator : GraphQL.Validation.IDocumentValidator\n{\n    public static readonly System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> CoreRules;\n    public DocumentValidator() { }\n    public System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(in GraphQL.Validation.ValidationOptions options) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Info Provider in C#\nDESCRIPTION: Demonstrates how to configure the ErrorInfoProvider to expose exception data in the GraphQL response. This is used to revert to the pre-v7 behavior of including the Data property in error serialization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    // add schema, serializer, etc\n    .AddErrorInfoProvider(o => o.ExposeData = true));\n```\n\n----------------------------------------\n\nTITLE: Handling Flag Enumerations in GraphQL.NET\nDESCRIPTION: Extension methods for working with flag enumerations (enums with FlagsAttribute), enabling conversion between flag enum values and lists of individual enum values for GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class EnumExtensions\n{\n    public static IEnumerable<T> FromFlags<T>(this T value) where T : struct, Enum\n        => Enum.GetValues(typeof(T)).Cast<T>().Distinct().Where(x => value.HasFlag(x));\n\n    public static IEnumerable<T> FromFlags<T>(this T? value) where T : struct, Enum\n        => value.HasValue ? value.Value.FromFlags() : null;\n\n    public static T CombineFlags<T>(this IEnumerable<T> values) where T : struct, Enum\n    {\n        if (values == null)\n            throw new ArgumentNullException(nameof(values));\n        var enumType = typeof(T).GetEnumUnderlyingType();\n        if (enumType == typeof(int))\n            return (T)Enum.ToObject(typeof(T), values.Cast<int>().Aggregate((a, b) => a | b));\n        // add support for uint/long/etc here\n        throw new NotSupportedException(\"Enum type not supported\");\n    }\n}\n\n[Flags]\nenum MyFlags\n{\n    Grumpy = 1,\n    Happy = 2,\n    Sleepy = 4,\n}\n\n// this returns the list [\"GRUMPY\", \"HAPPY\"]\nField<ListGraphType<EnumerationGraphType<MyFlags>>>(\"getFlagEnum\")\n    .Resolve(ctx => {\n        var myFlags = MyFlags.Grumpy | MyFlags.Happy;\n        return myFlags.FromFlags()\n    });\n\n// when calling convertEnumListToString(arg: [GRUMPY, HAPPY]), it returns the string \"Grumpy, Happy\"\nField<StringGraphType>(\"convertEnumListToString\")\n    .Argument<ListGraphType<EnumerationGraphType<MyFlags>>>(\"arg\")\n    .Resolve(ctx => ctx.GetArgument<IEnumerable<MyFlags>>(\"arg\").CombineFlags().ToString());\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Execution Pipeline\nDESCRIPTION: Methods for configuring the execution pipeline, including execution options, middleware, and error handling. Supports both synchronous and asynchronous configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder ConfigureExecution(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, GraphQL.DI.ExecutionDelegate, System.Threading.Tasks.Task<GraphQL.ExecutionResult>> action) { }\n```\n\n----------------------------------------\n\nTITLE: Finding GraphQL Type from AST Type Using TypeExtensions\nDESCRIPTION: Extension method to convert an AST GraphQLType to a concrete IGraphType from the schema. This is used during schema validation and execution to resolve type references in the GraphQL document to actual type implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_191\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphQL.Types.IGraphType? GraphTypeFromType(this GraphQLParser.AST.GraphQLType type, GraphQL.Types.ISchema schema) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Scalar Types in C#\nDESCRIPTION: Implementations of various scalar types including DateTime, DateTimeOffset, Decimal, and Complex scalar types. Each type implements parsing, serialization, and validation logic specific to its data type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\npublic class DateTimeGraphType : GraphQL.Types.ScalarGraphType\n{\n    public DateTimeGraphType() { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Character Interface in GraphQL Schema\nDESCRIPTION: The Character interface defines common fields that both Human and Droid types implement, including ID, name, episode appearances, and friend connections.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  \"Which movie they appear in.\"\n  appearsIn: [Episode]\n  friends: [Character]\n  friendsConnection: CharacterInterfaceConnection\n  \"The id of the character.\"\n  id: String!\n  \"The name of the character.\"\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Field Resolver for GraphQL Execution\nDESCRIPTION: Protected virtual method that determines the appropriate field resolver for a given execution node and context. Core to the field resolution process.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_85\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual GraphQL.Resolvers.IFieldResolver SelectResolver(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Validation Errors in C#\nDESCRIPTION: Defines various validation error classes that inherit from GraphQL.Validation.ValidationError to handle specific validation scenarios like unique names and variable types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_231\n\nLANGUAGE: C#\nCODE:\n```\npublic class UniqueFragmentNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node, GraphQLParser.AST.GraphQLFragmentDefinition altNode) { }\n}\n\n[System.Serializable]\npublic class UniqueInputFieldNamesError : GraphQL.Validation.ValidationError\n{\n    public UniqueInputFieldNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLValue node, GraphQLParser.AST.GraphQLObjectField altNode) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pattern Matching Directive in GraphQL.NET\nDESCRIPTION: Shows how to configure and register the pattern matching directive for input validation. Includes service configuration and directive registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MyQuery>()\n    .ConfigureSchema(s =>\n    {\n        // add the directive to the schema\n        s.Directives.Register(new PatternMatchingDirective());\n\n        // add the visitor to the schema, which will apply validation rules to all field\n        // arguments and input fields that have the @pattern directive applied\n        s.RegisterVisitor(new PatternMatchingVisitor());\n    }));\n```\n\n----------------------------------------\n\nTITLE: Defining IInputObjectGraphType Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL input object types. It provides methods for validating and parsing input values, and converting them to AST representations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_155\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IInputObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    bool IsOneOf { get; set; }\n    bool IsValidDefault(object value);\n    object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value);\n    GraphQLParser.AST.GraphQLValue ToAST(object value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionErrorJsonConverter for GraphQL.NET\nDESCRIPTION: A JSON converter for GraphQL execution errors using Newtonsoft.Json. It handles serialization of execution error objects with the help of an IErrorInfoProvider.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ExecutionErrorJsonConverter : Newtonsoft.Json.JsonConverter\n{\n    public ExecutionErrorJsonConverter(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    public override bool CanRead { get; }\n    public override bool CanConvert(System.Type objectType) { }\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object? value, Newtonsoft.Json.JsonSerializer serializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectionBuilder Methods in C#\nDESCRIPTION: This snippet shows the implementation of various methods in the ConnectionBuilder class. It includes methods for resolving connections asynchronously, changing return types, and creating connections with different type configurations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\npublic virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }\npublic static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType>(string name = \"default\")\n    where TNodeType : GraphQL.Types.IGraphType { }\npublic static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType>(string name = \"default\")\n    where TNodeType : GraphQL.Types.IGraphType\n    where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }\npublic static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TConnectionType>(string name = \"default\")\n    where TNodeType : GraphQL.Types.IGraphType\n    where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n    where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }\n```\n\n----------------------------------------\n\nTITLE: Obsolete Field Definition Method without Name Parameter in GraphQL.NET\nDESCRIPTION: An obsolete method for defining fields without explicitly providing a name. Developers should use the named overload Field<TGraphType>(string name) instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please call Field<TGraphType>(string name) instead. This method will be removed i\" +\n            \"n v9.\")]\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TGraphType>()\n            where TGraphType : GraphQL.Types.IGraphType { }\n```\n\n----------------------------------------\n\nTITLE: Creating abstract base class for Automatic Persisted Queries execution in C#\nDESCRIPTION: Abstract base class for implementing automatic persisted queries functionality. Provides methods for hash validation, query retrieval and storage, and execution handling. Implements IConfigureExecution for integration with GraphQL.NET pipeline.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class AutomaticPersistedQueriesExecutionBase : GraphQL.DI.IConfigureExecution\n{\n    public const string SUPPORTED_VERSION = \"1\";\n    protected AutomaticPersistedQueriesExecutionBase() { }\n    public virtual float SortOrder { get; }\n    protected virtual bool CheckHash(string hash, string query) { }\n    protected virtual GraphQL.ExecutionResult CreateExecutionResult(GraphQL.ExecutionError error) { }\n    public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }\n    [return: System.Runtime.CompilerServices.TupleElementNames(new string?[]?[] {\n            \"Hash\",\n            \"Version\",\n            \"Enabled\"})]\n    protected virtual System.ValueTuple<string?, string?, bool> GetAPQProperties(GraphQL.Inputs? extensions) { }\n    protected abstract System.Threading.Tasks.ValueTask<string?> GetQueryAsync(string hash);\n    protected abstract System.Threading.Tasks.Task SetQueryAsync(string hash, string query);\n}\n```\n\n----------------------------------------\n\nTITLE: Field Definition Methods with Explicit Type Parameters in GraphQL.NET\nDESCRIPTION: Methods for defining fields with explicitly provided types. These methods allow creating fields with specific GraphQL types or .NET types specified directly.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field(string name, GraphQL.Types.IGraphType type) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field(string name, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Types in C#\nDESCRIPTION: Implements various GraphQL types specific to federation, such as AnyScalarGraphType, EntityGraphType, and ServiceGraphType. These types are essential for building federated GraphQL schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_120\n\nLANGUAGE: C#\nCODE:\n```\npublic class AnyScalarGraphType : GraphQL.Types.ComplexScalarGraphType\n{\n    public AnyScalarGraphType() { }\n}\n\npublic class EntityGraphType : GraphQL.Types.UnionGraphType\n{\n    public EntityGraphType() { }\n}\n\npublic class ServiceGraphType : GraphQL.Types.ObjectGraphType\n{\n    public ServiceGraphType(GraphQL.Federation.Types.FederationPrintOptions printOptions) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Requests in ASP.NET Core with JSON Body\nDESCRIPTION: ASP.NET Core controller action that handles GraphQL requests sent via JSON in the request body, using model binding to deserialize into a Request class with JsonElement for variables.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// ASP.NET Core action with json encoding\n[HttpPost(\"graphql\")]\npublic IActionResult GraphQL([FromBody] Request request)\n{\n    // execute request and return result\n}\n\npublic class Request\n{\n    string Query { get; set; }\n    string OperationName { get; set; }\n    JsonElement Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing GraphQL Literals for Vector3 Custom Scalar in C#\nDESCRIPTION: Implements the ParseLiteral method for Vector3Type to accept both string literals and structured object literals, converting them to Vector3 objects. The method handles GraphQLStringValue and GraphQLObjectValue types, extracting the x, y, and z components.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// In Vector3Type\n\npublic override object? ParseLiteral(GraphQLValue value)\n{\n    if (value is GraphQLNullValue)\n        return null;\n\n    if (value is GraphQLStringValue stringValue)\n        return ParseValue((string)stringValue.Value);\n\n    if (value is GraphQLObjectValue objectValue)\n    {\n        var entries = objectValue.Fields.ToDictionary(x => x.Name.Value, x => _floatScalar.ParseLiteral(x.Value));\n        if (entries.Count != 3)\n            return ThrowLiteralConversionError(value);\n        var x = (double)entries[\"x\"];\n        var y = (double)entries[\"y\"];\n        var z = (double)entries[\"z\"];\n        return new Vector3((float)x, (float)y, (float)z);\n    }\n\n    return ThrowLiteralConversionError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AllowAnonymousAttribute for GraphQL.NET\nDESCRIPTION: Defines an attribute that allows anonymous access to GraphQL fields, methods, or properties. This attribute inherits from GraphQLAttribute and overrides Modify methods to apply the anonymous access metadata.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]\npublic class AllowAnonymousAttribute : GraphQL.GraphQLAttribute\n{\n    public AllowAnonymousAttribute() { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Value Converter in Schema Static Constructor\nDESCRIPTION: Shows how to properly register a custom value converter within a schema's static constructor, ensuring the conversion is registered only once during application startup.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    static MySchema()\n    {\n        ValueConverter.Register<Vector3, string>(v => $\"{v.X},{v.Y},{v.Z}\");\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDocumentExecutionListener Interface for Execution Pipeline Hooks\nDESCRIPTION: Interface that provides lifecycle hooks for GraphQL document execution. Allows for implementing listeners that can run code before/after execution and validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_95\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDocumentExecutionListener\n    {\n        System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context);\n        System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult);\n        System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Droid Type in GraphQL\nDESCRIPTION: Defines the Droid type implementing the Character interface with additional droid-specific fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n\"A mechanical creature in the Star Wars universe.\"\ntype Droid implements Character {\n  \"Which movie they appear in.\"\n  appearsIn: [Episode]\n  friends: [Character]\n  \"A list of a character's friends.\"\n  friendsConnection(\n    \"Only return edges after the specified cursor.\"\n    after: String,\n    \"Only return edges prior to the specified cursor.\"\n    before: String,\n    \"Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified.\"\n    first: Int,\n    \"Specifies the maximum number of edges to return, starting prior to the cursor specified by 'before', or the last number of edges if 'before' is not specified.\"\n    last: Int): CharacterInterfaceConnection\n  \"The id of the droid.\"\n  id: String!\n  \"The name of the droid.\"\n  name: String\n  \"The primary function of the droid.\"\n  primaryFunction: String\n}\n```\n\n----------------------------------------\n\nTITLE: Violation Example in GraphQL.NET\nDESCRIPTION: Demonstrates code that violates the GQL015 rule by using a string interpolation expression which cannot be used for field name inference.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql015.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonGraphType : ObjectGraphType<Person>\n{\n    public PersonGraphType()\n    {\n        Field(p => $\"{p.FirstName} {p.LastName}\");\n    }\n}\n\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SourceFieldResolver for GraphQL.NET\nDESCRIPTION: This sealed class implements a field resolver that resolves the source field. It provides a singleton instance and an asynchronous resolve method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_129\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class SourceFieldResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public static GraphQL.Resolvers.SourceFieldResolver Instance { get; }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Human Class in C#\nDESCRIPTION: This snippet defines a C# class representing a Human entity with properties for Name and HomePlanet.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Human\n{\n    public string Name { get; set; }\n    public string HomePlanet { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Interface Implementation Interfaces in C#\nDESCRIPTION: Defines interfaces related to GraphQL schema type implementations, including IHaveDefaultValue, IImplementInterfaces, and IInputObjectGraphType. These interfaces define the contracts for types that implement interfaces and input object types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_162\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IHaveDefaultValue : GraphQL.Types.IProvideResolvedType\n{\n    object? DefaultValue { get; }\n}\n\npublic interface IImplementInterfaces : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.Interfaces Interfaces { get; }\n    GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }\n    void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType);\n}\n\npublic interface IInputObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    bool IsOneOf { get; set; }\n    bool IsValidDefault(object value);\n    object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value);\n    GraphQLParser.AST.GraphQLValue ToAST(object value);\n}\n```\n\n----------------------------------------\n\nTITLE: ValidationError Class Implementation in C#\nDESCRIPTION: Serializable validation error class that extends DocumentError. Handles validation error messages with support for original queries, error numbers, and affected AST nodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_226\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ValidationError : GraphQL.Execution.DocumentError\n{\n    public ValidationError(string message) { }\n    public ValidationError(string message, System.Exception? innerException) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, GraphQLParser.AST.ASTNode node) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, params GraphQLParser.AST.ASTNode[] nodes) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, System.Exception? innerException, GraphQLParser.AST.ASTNode node) { }\n    public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, System.Exception? innerException, params GraphQLParser.AST.ASTNode[]? nodes) { }\n    public System.Collections.Generic.IEnumerable<GraphQLParser.AST.ASTNode> Nodes { get; }\n    public string? Number { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Character Interface in GraphQL\nDESCRIPTION: Defines the Character interface with common fields for both Human and Droid types including ID, name, movie appearances, and friend connections.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  \"Which movie they appear in.\"\n  appearsIn: [Episode]\n  friends: [Character]\n  friendsConnection: CharacterInterfaceConnection\n  \"The id of the character.\"\n  id: String!\n  \"The name of the character.\"\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Using Input and Output Type Attributes for Type Mapping in GraphQL.NET\nDESCRIPTION: Shows how to use the InputType and OutputType attributes on a data model class to specify which GraphQL types should be used when the class is referenced in a schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n[InputType(typeof(WidgetInputGraphType))]\n[OutputType(typeof(WidgetGraphType))]\npublic class Widget\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLTypeReference class for GraphQL.NET\nDESCRIPTION: Defines the GraphQLTypeReference class that represents type references in GraphQL schemas. It allows for referencing types by name and includes type checking capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_150\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class GraphQLTypeReference : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public GraphQLTypeReference(string typeName) { }\n    public System.Func<object, bool>? IsTypeOf { get; set; }\n    public bool SkipTypeCheck { get; set; }\n    public string TypeName { get; }\n    public override bool Equals(object? obj) { }\n    public override int GetHashCode() { }\n}\n```\n\n----------------------------------------\n\nTITLE: ComplexityOptions Class Definition in C#\nDESCRIPTION: Configuration class for GraphQL query complexity validation. Defines default impact values and delegates for complexity calculation and validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_227\n\nLANGUAGE: C#\nCODE:\n```\npublic class ComplexityOptions\n{\n    public ComplexityOptions() { }\n    public System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult> DefaultComplexityImpactDelegate { get; set; }\n    public double DefaultListImpactMultiplier { get; set; }\n    public double DefaultObjectImpact { get; set; }\n    public double DefaultScalarImpact { get; set; }\n    public int? MaxComplexity { get; set; }\n    public int? MaxDepth { get; set; }\n    public System.Func<GraphQL.Validation.Complexity.ComplexityValidationContext, System.Threading.Tasks.Task>? ValidateComplexityDelegate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET JSON Deserialization Extension Methods\nDESCRIPTION: Extension methods provided by GraphQL.NET libraries for deserializing JSON data, including methods for both System.Text.Json and Newtonsoft.Json implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Inputs ToInputs(this string json);\npublic static Inputs ToInputs(this JsonElement obj);\npublic static T FromJson<T>(this string json);\n// GraphQL.SystemTextJson only:\npublic static ValueTask<T> FromJsonAsync<T>(this System.IO.Stream stream, CancellationToken cancellationToken = default);\n// GraphQL.NewtonsoftJson only:\npublic static T FromJson<T>(this System.IO.Stream stream);\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware Using a Delegate in C#\nDESCRIPTION: Alternative approach to register middleware using a delegate function instead of a class implementation. This allows for simpler inline middleware definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nschema.FieldMiddleware.Use(next =>\n{\n  return context =>\n  {\n    // your code here\n    var result = next(context);\n    // your code here\n    return result;\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ISchema Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL schemas. It provides properties and methods for managing types, directives, and middleware in a schema, as well as schema initialization and type registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_166\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISchema : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }\n    System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }\n    GraphQL.Types.SchemaTypes AllTypes { get; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"clrType\",\n            \"graphType\"})]\n    System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> BuiltInTypeMappings { get; }\n    GraphQL.Introspection.ISchemaComparer Comparer { get; set; }\n    GraphQL.Types.SchemaDirectives Directives { get; }\n    GraphQL.ExperimentalFeatures Features { get; set; }\n    GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }\n    GraphQL.Introspection.ISchemaFilter Filter { get; set; }\n    bool Initialized { get; }\n    GraphQL.Types.IObjectGraphType? Mutation { get; set; }\n    GraphQL.Conversion.INameConverter NameConverter { get; }\n    GraphQL.Types.IObjectGraphType Query { get; set; }\n    GraphQL.Types.FieldType SchemaMetaFieldType { get; }\n    GraphQL.Types.IObjectGraphType? Subscription { get; set; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"clrType\",\n            \"graphType\"})]\n    System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> TypeMappings { get; }\n    GraphQL.Types.FieldType TypeMetaFieldType { get; }\n    GraphQL.Types.FieldType TypeNameMetaFieldType { get; }\n    void Initialize();\n    void RegisterType(GraphQL.Types.IGraphType type);\n    void RegisterType(System.Type type);\n    void RegisterTypeMapping(System.Type clrType, System.Type graphType);\n    void RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor visitor);\n    void RegisterVisitor(System.Type type);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HalfGraphType Scalar in C#\nDESCRIPTION: Defines the HalfGraphType class that represents a Half-precision floating-point scalar type in GraphQL. It provides methods for parsing and serializing Half values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_158\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HalfGraphType : GraphQL.Types.ScalarGraphType\n{\n    public HalfGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnionGraphType in C#\nDESCRIPTION: Implements a GraphQL union type that can resolve to multiple possible object types. It allows setting possible types and provides a type resolver function.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_193\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UnionGraphType : GraphQL.Types.GraphType, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public UnionGraphType() { }\n    public GraphQL.Types.PossibleTypes PossibleTypes { get; }\n    public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }\n    public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }\n    public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }\n    public void Type(System.Type type) { }\n    public void Type<TType>()\n        where TType : GraphQL.Types.IObjectGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Middleware in GraphQL-DotNet 3.0\nDESCRIPTION: Shows how to update field middleware classes to implement IFieldMiddleware interface and modify the Resolve method to accept IResolveFieldContext. Field middleware must now be registered in the dependency injection container.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n//class MyMiddleware\nclass MyMiddleware : IFieldMiddleware\n{\n    //public async Task<object> Resolve(ResolveFieldContext context, FieldMiddlewareDelegate next)\n    public async Task<object> Resolve(IResolveFieldContext context, FieldMiddlewareDelegate next)\n    {\n        // your code here\n        var ret = await next(context);\n        // your code here\n        return ret;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NonNullGraphType in C#\nDESCRIPTION: Implements a NonNullGraphType class that wraps another GraphType to make it non-nullable.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_181\n\nLANGUAGE: C#\nCODE:\n```\npublic class NonNullGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType\n{\n    public NonNullGraphType(GraphQL.Types.IGraphType type) { }\n    public GraphQL.Types.IGraphType? ResolvedType { get; set; }\n    public virtual System.Type? Type { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AutoRegisteringObjectGraphType in C#\nDESCRIPTION: A custom implementation of AutoRegisteringObjectGraphType that overrides the ProvideFields method to exclude properties of a specific type from being automatically registered as fields in the GraphQL type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate class CustomAutoObjectType<T> : AutoRegisteringObjectGraphType<T>\n{\n    protected override IEnumerable<FieldType> ProvideFields()\n    {\n        var props = GetRegisteredProperties();\n        foreach (var prop in props)\n        {\n            if (prop.PropertyType != typeof(MyType))\n                yield return CreateField(prop);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core for Newtonsoft.Json in GraphQL.NET v3\nDESCRIPTION: Configuration required in ASP.NET Core 3.0+ to allow synchronous IO operations when using the Newtonsoft.Json serializer with GraphQL.NET v3.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// kestrel\nservices.Configure<KestrelServerOptions>(options =>\n{\n    options.AllowSynchronousIO = true;\n});\n\n// IIS\nservices.Configure<IISServerOptions>(options =>\n{\n    options.AllowSynchronousIO = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Persisted Document Request Example\nDESCRIPTION: Example of a GraphQL request using a persisted document identifier instead of including the query in the request body.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"documentId\": \"sha256:0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\",\n  \"variables\": {\n    \"id\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectionLimitValidationRule in GraphQL.NET\nDESCRIPTION: A validation rule that limits connection result sets to 1000 rows. It implements INodeVisitor and IVariableVisitorProvider interfaces to check arguments named 'first' or 'last' on connection fields and validates their values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema>()\n    .AddValidationRule<NoConnectionOver1000ValidationRule>());\n\npublic class NoConnectionOver1000ValidationRule : ValidationRuleBase, IVariableVisitorProvider, INodeVisitor\n{\n    public override ValueTask<INodeVisitor?> GetPostNodeVisitorAsync(ValidationContext context)\n        => context.ArgumentValues != null ? new(this) : default;\n\n    ValueTask INodeVisitor.EnterAsync(ASTNode node, ValidationContext context)\n    {\n        if (node is not GraphQLField fieldNode)\n            return default;\n\n        var fieldDef = context.TypeInfo.GetFieldDef();\n        if (fieldDef == null || fieldDef.ResolvedType?.GetNamedType() is not IObjectGraphType connectionType || !connectionType.Name.EndsWith(\"Connection\"))\n            return default;\n\n        if (!(context.ArgumentValues?.TryGetValue(fieldNode, out var args) ?? false))\n            return default;\n\n        ArgumentValue lastArg = default;\n        if (!args.TryGetValue(\"first\", out var firstArg) && !args.TryGetValue(\"last\", out lastArg))\n            return default;\n\n        var rows = (int?)firstArg.Value ?? (int?)lastArg.Value ?? 0;\n        if (rows > 1000)\n            context.ReportError(new ValidationError(\"Cannot return more than 1000 rows\"));\n\n        return default;\n    }\n\n    ValueTask INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context) => default;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Type System Interfaces in C#\nDESCRIPTION: Defines several core interfaces for the GraphQL type system including IFieldType, IGraphType, IGraphTypeFactory, IGraphTypeMappingProvider, and others, which define the contracts for different components of a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_161\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFieldMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata { }\n\npublic interface IFieldType : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType\n{\n    GraphQL.Types.QueryArguments? Arguments { get; set; }\n    bool IsPrivate { get; set; }\n    string Name { get; set; }\n}\n\npublic interface IGraphType : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    bool IsPrivate { get; set; }\n    void Initialize(GraphQL.Types.ISchema schema);\n}\n\npublic interface IGraphTypeFactory<out TGraphType>\n    where out TGraphType : GraphQL.Types.IGraphType\n{\n    TGraphType Create();\n}\n\npublic interface IGraphTypeMappingProvider\n{\n    System.Type? GetGraphTypeFromClrType(System.Type clrType, bool isInputType, System.Type? preferredGraphType);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Include Directive\nDESCRIPTION: The IncludeDirective class implements the @include directive for GraphQL, which allows including a field based on a condition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\npublic class IncludeDirective : GraphQL.Types.Directive\n{\n    public IncludeDirective() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing GraphQL Response to String\nDESCRIPTION: Example of writing a GraphQL execution result to a string using the WriteToStringAsync extension method provided by the DocumentWriter.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar resultText = await _documentWriter.WriteToStringAsync(result);\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Connections in GraphQL.NET with C#\nDESCRIPTION: Method signatures for creating relay connections with specified node, edge, and connection types. These methods establish the necessary type relationships for GraphQL relay pagination patterns.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_138\n\nLANGUAGE: C#\nCODE:\n```\npublic GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TConnectionType>()\n            where TNodeType : GraphQL.Types.IGraphType\n            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }\npublic GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TNodeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TEdgeType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TConnectionType>(string name)\n            where TNodeType : GraphQL.Types.IGraphType\n            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeExtensions in GraphQL.NET\nDESCRIPTION: Static extension methods for reflection classes that provide access to GraphQL-specific metadata. These methods help retrieve default values, descriptions, and GraphQL attributes from member and parameter information using reflection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TypeExtensions\n{\n    public static object? DefaultValue(this System.Reflection.MemberInfo memberInfo) { }\n    public static string? Description(this System.Reflection.MemberInfo memberInfo) { }\n    public static string? Description(this System.Reflection.ParameterInfo parameterInfo) { }\n    public static System.Collections.Generic.IEnumerable<GraphQL.GraphQLAttribute> GetGraphQLAttributes(this System.Reflection.MemberInfo memberInfo) { }\n    public static System.Collections.Generic.IEnumerable<GraphQL.GraphQLAttribute> GetGraphQLAttributes(this System.Reflection.ParameterInfo parameterInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Full GraphQL Schema with Imports\nDESCRIPTION: This snippet defines a complete GraphQL schema including imported directives, custom types, and a query structure. It uses the @link directive for importing specifications and defines custom directives and types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.8.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing GQL006 by Renaming Source Property\nDESCRIPTION: Alternative solution to the GQL006 violation by renaming the source type property to match the input field. This approach maintains the GraphQL schema while adapting the C# model.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql006.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<MySourceType>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"FirstName\");\n    }\n}\n\npublic class MySourceType\n{\n    public string FirstName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AuthorDirective Class in C#\nDESCRIPTION: Defines a directive class to provide author information for fields. The directive includes arguments for name and email, which can be used for introspection by clients.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AuthorDirective : Directive\n{\n    public AuthorDirective()\n        : base(\"author\", DirectiveLocation.FieldDefinition)\n    {\n        Description = \"Provides information about the author of the field\";\n        Arguments = new QueryArguments(\n            new QueryArgument<StringGraphType>\n            {\n                Name = \"name\",\n                Description = \"Author's name\"\n            },\n            new QueryArgument<NonNullGraphType<StringGraphType>>\n            {\n                Name = \"email\",\n               Description = \"Email where you can ask your question\"\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition for Vector3\nDESCRIPTION: Defines the GraphQL schema with Vector3 scalar type, including query and mutation operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Vector3\n\nschema {\n    query: {\n        getVector: Vector3!\n    }\n    mutation: {\n        addVector(vector3: Vector3!): Vector3\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Middleware in C#\nDESCRIPTION: Defines interfaces and classes for implementing field middleware in GraphQL.NET. This allows for custom processing of field resolutions, such as logging or authorization checks.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_122\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IFieldMiddleware\n{\n    System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next);\n}\n\npublic class InstrumentFieldsMiddleware : GraphQL.Instrumentation.IFieldMiddleware\n{\n    public InstrumentFieldsMiddleware() { }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Human Type and Input in GraphQL\nDESCRIPTION: Defines the Human type implementing Character interface and an input type for creating new humans.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Human implements Character {\n  \"Which movie they appear in.\"\n  appearsIn: [Episode]\n  friends: [Character]\n  \"A list of a character's friends.\"\n  friendsConnection(\n    \"Only return edges after the specified cursor.\"\n    after: String,\n    \"Only return edges prior to the specified cursor.\"\n    before: String,\n    \"Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified.\"\n    first: Int,\n    \"Specifies the maximum number of edges to return, starting prior to the cursor specified by 'before', or the last number of edges if 'before' is not specified.\"\n    last: Int): CharacterInterfaceConnection\n  \"The home planet of the human.\"\n  homePlanet: String\n  \"The id of the human.\"\n  id: String!\n  \"The name of the human.\"\n  name: String\n}\n\ninput HumanInput {\n  homePlanet: String\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Vector3 to GraphQL AST for Variable Usage\nDESCRIPTION: Implements the ToAST method for Vector3Type to create a GraphQL Abstract Syntax Tree representation of Vector3 objects. This is necessary when a custom scalar's serialized form differs from its AST representation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// In Vector3Type\n\npublic override GraphQLValue ToAST(object? value)\n{\n    if (value == null)\n        return new GraphQLNullValue();\n\n    if (value is Vector3 vector3)\n    {\n        return new GraphQLObjectValue\n        {\n            Fields = new List<GraphQLObjectField>\n            {\n                new GraphQLObjectField\n                {\n                    Name = new GraphQLName(\"x\"),\n                    Value = new GraphQLFloatValue(vector3.X))\n                },\n                new GraphQLObjectField\n                {\n                    Name = new GraphQLName(\"y\"),\n                    Value = new GraphQLFloatValue(vector3.Y))\n                },\n                new GraphQLObjectField\n                {\n                    Name = new GraphQLName(\"z\"),\n                    Value = new GraphQLFloatValue(vector3.Z))\n                }\n            }\n        };\n    }\n\n    return ThrowASTConversionError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ListGraphType in C#\nDESCRIPTION: Generic implementation of a GraphQL list type that wraps another GraphQL type. Includes an obsolete default constructor and type property override.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_177\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class ListGraphType<T> : GraphQL.Types.ListGraphType\n    where T : GraphQL.Types.IGraphType\n{\n    [System.Obsolete(\"This constructor is for internal use only; use ListGraphType(IGraphType type) instead.\")]\n    public ListGraphType() { }\n    public override System.Type Type { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GraphQL Type Name Using TypeExtensions\nDESCRIPTION: Extension method to retrieve the name of a GraphQL type. This method extracts just the name portion from a GraphQL type AST node, which is useful for type resolution and validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_189\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string Name(this GraphQLParser.AST.GraphQLType type) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing ScopedConnectionBuilderExtensions in C#\nDESCRIPTION: Extension methods for ConnectionBuilder to enable scoped dependency resolution for GraphQL connections. Provides both synchronous and asynchronous connection resolver methods with DI support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ScopedConnectionBuilderExtensions\n{\n    public static GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, object> Resolve<TSourceType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder) { }\n    public static GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType> Resolve<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> ResolveScoped<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveScoped<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> ResolveScopedAsync<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveScopedAsync<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Builder for GraphQL Schemas\nDESCRIPTION: Class for building GraphQL schemas from type definitions. It provides methods to convert AST nodes to GraphQL types and supports configurations for handling unknown fields, types, and other schema-building options.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_194\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SchemaBuilder\n{\n    protected readonly System.Collections.Generic.Dictionary<string, GraphQL.Types.IGraphType> _types;\n    public SchemaBuilder() { }\n    public bool AllowUnknownFields { get; set; }\n    public bool AllowUnknownTypes { get; set; }\n    public bool IgnoreComments { get; set; }\n    public bool IgnoreLocations { get; set; }\n    public bool RunConfigurations { get; set; }\n    public System.IServiceProvider ServiceProvider { get; set; }\n    public GraphQL.Utilities.TypeSettings Types { get; }\n    public virtual GraphQL.Types.Schema Build(string typeDefinitions) { }\n    protected virtual GraphQL.Types.Schema CreateSchema() { }\n    protected virtual GraphQL.Types.IGraphType? GetType(string name) { }\n    protected virtual void PreConfigure(GraphQL.Types.Schema schema) { }\n    protected virtual GraphQL.Types.QueryArgument ToArgument(GraphQL.Utilities.ArgumentConfig argumentConfig, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }\n    protected virtual GraphQL.Types.Directive ToDirective(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDef) { }\n    protected virtual GraphQL.Types.EnumerationGraphType ToEnumerationType(GraphQLParser.AST.GraphQLEnumTypeDefinition enumDef) { }\n    protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }\n    protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }\n    protected virtual GraphQL.Types.InputObjectGraphType ToInputObjectType(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputDef) { }\n    protected virtual GraphQL.Types.InterfaceGraphType ToInterfaceType(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceDef) { }\n    protected virtual GraphQL.Types.IObjectGraphType ToObjectGraphType(GraphQLParser.AST.GraphQLObjectTypeDefinition astType, bool isExtensionType = false) { }\n    protected virtual GraphQL.Types.FieldType ToSubscriptionFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }\n    protected virtual GraphQL.Types.UnionGraphType ToUnionType(GraphQLParser.AST.GraphQLUnionTypeDefinition unionDef) { }\n    protected virtual void Validate(GraphQLParser.AST.GraphQLDocument document) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Integer Scalar Type for GraphQL\nDESCRIPTION: The IntGraphType class implements the GraphQL Int scalar type, providing parsing and serialization functions for integer values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_174\n\nLANGUAGE: C#\nCODE:\n```\npublic class IntGraphType : GraphQL.Types.ScalarGraphType\n{\n    public IntGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Schemas in GraphQL.NET using LinkSchema Method\nDESCRIPTION: Demonstrates how to link another schema with customized namespace and directive imports using the LinkSchema method in a schema constructor or ConfigureSchema call.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nschema.LinkSchema(\"https://specs.apollo.dev/federation/v2.3\", o =>\n{\n    // override the default namespace of 'federation' with the alias 'fed'\n    o.Namespace = \"fed\";\n\n    // import the '@key' directive without an alias\n    o.Imports.Add(\"@key\", \"@key\");\n\n    // import the '@shareable' directive with an alias of '@share'\n    o.Imports.Add(\"@shareable\", \"@share\");\n\n    // other directives such as '@requires' would be implicitly imported\n    // into the 'fed' namespace, so '@requires' becomes '@fed__requires'\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IntGraphType Scalar in GraphQL.NET\nDESCRIPTION: Implementation of the Int scalar type in GraphQL. It provides methods for parsing and validating integer values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_171\n\nLANGUAGE: C#\nCODE:\n```\npublic class IntGraphType : GraphQL.Types.ScalarGraphType\n{\n    public IntGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Metadata Interfaces\nDESCRIPTION: These interfaces define how metadata is read and written for GraphQL types, allowing for extension and customization of the type system.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_164\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMetadataReader : GraphQL.Types.IProvideMetadata { }\npublic interface IMetadataWriter : GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.IMetadataReader MetadataReader { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Connection Builder Extensions for GraphQL .NET\nDESCRIPTION: This snippet defines extension methods for ConnectionBuilder to support scoped resolvers. It provides methods for both synchronous and asynchronous resolution of connections, with and without specific return types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ScopedConnectionBuilderExtensions\n{\n    public static GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, object> Resolve<TSourceType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder) { }\n    public static GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType> Resolve<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> ResolveScoped<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveScoped<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> ResolveScopedAsync<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveScopedAsync<TSourceType, TReturnType>(this GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector3 ScalarGraphType Base Implementation\nDESCRIPTION: Initial scaffold of the Vector3Type class inheriting from ScalarGraphType with required method declarations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing GraphQL;\nusing GraphQL.Types;\nusing GraphQLParser.AST;\n\npublic class Vector3Type : ScalarGraphType\n{\n    public Vector3Type()\n    {\n        Name = \"Vector3\";\n    }\n\n    public override object? ParseLiteral(GraphQLValue value)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override object? ParseValue(object? value)\n    {\n        throw new NotImplementedException();\n    }\n\n    public override object? Serialize(object? value)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Parser Method Example in C#\nDESCRIPTION: Fixed example showing correct usage where Parser attribute correctly references the existing ParseValue method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql017.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [Parser(typeof(Parsers), \"ParseValue\")]\n    public string Hello { get; set; }\n}\n\npublic static class Parsers\n{\n    public static object ParseValue(object value) => value;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Auto Schema Configuration Interface in C#\nDESCRIPTION: Defines an interface for configuring automatic schema generation in GraphQL.NET. This interface provides access to the GraphQL builder and schema type for auto-schema configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IConfigureAutoSchema\n{\n    GraphQL.DI.IGraphQLBuilder Builder { get; }\n    System.Type SchemaType { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Enum Case Attribute in GraphQL.NET\nDESCRIPTION: Shows how to use an enum case attribute to control the case formatting of enum values in GraphQL without creating a custom converter.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[CamelCase]\npublic enum CamelCaseEnum\n{\n    FirstValue,\n    SecondValue\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Builder Extensions for System.Text.Json\nDESCRIPTION: Extension methods for configuring System.Text.Json integration in the GraphQL.NET dependency injection system. Allows customization of JsonSerializerOptions during setup.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.SystemTextJson.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class SystemTextJsonGraphQLBuilderExtensions\n{\n    public static GraphQL.DI.IGraphQLBuilder AddSystemTextJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<System.Text.Json.JsonSerializerOptions>? action = null) { }\n    public static GraphQL.DI.IGraphQLBuilder AddSystemTextJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<System.Text.Json.JsonSerializerOptions, System.IServiceProvider>? action) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Builder with Microsoft DI Integration\nDESCRIPTION: Main builder class that integrates with Microsoft's dependency injection container. Implements multiple interfaces to provide service registration and configuration capabilities for GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLBuilder : GraphQL.DI.GraphQLBuilderBase, GraphQL.DI.IServiceRegister, Microsoft.Extensions.DependencyInjection.IServiceCollection\n{\n    public GraphQLBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<GraphQL.DI.IGraphQLBuilder>? configure) { }\n    public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; }\n    public override GraphQL.DI.IServiceRegister Services { get; }\n    public GraphQL.DI.IServiceRegister Configure<TOptions>(System.Action<TOptions, System.IServiceProvider>? action = null)\n        where TOptions :  class, new () { }\n    public GraphQL.DI.IServiceRegister Register(System.Type serviceType, object implementationInstance, bool replace = false) { }\n    public GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false) { }\n    protected override void RegisterDefaultServices() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Extension Methods Implementation\nDESCRIPTION: Collection of extension methods for ISchema interface providing functionality for schema configuration, type registration, and execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\npublic static class SchemaExtensions {\n    public static void AddLinkDirectiveSupport(this GraphQL.Types.ISchema schema, System.Action<GraphQL.Utilities.LinkConfiguration>? configuration = null) { }\n    public static void AutoRegister<TClrType>(this GraphQL.Types.ISchema schema, GraphQL.AutoRegisteringMode mode = 3) { }\n    public static TSchema EnableExperimentalIntrospectionFeatures<TSchema>(this TSchema schema, GraphQL.ExperimentalIntrospectionFeaturesMode mode = 0)\n        where TSchema : GraphQL.Types.ISchema { }\n    // ... additional methods\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Apollo Federation and Custom Types\nDESCRIPTION: This snippet defines a GraphQL schema using Apollo Federation link directives, custom directives, scalar and enum definitions, and type definitions. It includes both imported and local types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.3.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example/\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Type-First Federation Entity Resolver with Static Method\nDESCRIPTION: Implements a federation entity resolver using type-first approach with a static method and method arguments for representation. Uses attributes for configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n// configure federation key fields\n[Key(\"id\")]\npublic class Widget\n{\n    // configure fields\n    [Id]\n    public string Id { get; set; }\n    public string Name { get; set; }\n\n    // configure federation resolver\n    [FederationResolver]\n    public static async Task<Widget> ResolveReference([FromServices] WidgetRepository widgetData, [Id] string id, CancellationToken token)\n    {\n        // resolve the entity reference\n        return await widgetData.GetWidgetByIdAsync(id, token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Federation-Enabled GraphQL Schema with Apollo Federation v2.2\nDESCRIPTION: A complete GraphQL schema definition using Apollo Federation v2.2. It imports federation directives via @link, defines federation-specific directives, scalars, and enums, and includes basic type definitions for Query and Post.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.2.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.2\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request Class Definition\nDESCRIPTION: C# class definition for deserializing GraphQL requests from JSON, containing properties for the query string, operation name, and variables.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Request\n{\n    public string Query { get; set; }\n    public string OperationName { get; set; }\n    public Inputs Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INodeVisitor Interface in C#\nDESCRIPTION: Specifies the INodeVisitor interface with methods for entering and leaving AST nodes during validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_213\n\nLANGUAGE: C#\nCODE:\n```\npublic interface INodeVisitor\n{\n    System.Threading.Tasks.ValueTask EnterAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context);\n    System.Threading.Tasks.ValueTask LeaveAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectionLimit using SchemaNodeVisitor in GraphQL.NET\nDESCRIPTION: An alternative approach to limit connection results using a schema node visitor. This method adds validation rules during schema building, only evaluating at runtime when applicable fields are requested, providing better performance.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema>()\n    .AddSchemaVisitor<NoConnectionOver1000Visitor>());\n    \npublic class NoConnectionOver1000Visitor : BaseSchemaNodeVisitor\n{\n    public override void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema)\n        => argument.Validator += GetValidator(argument, field);\n\n    public override void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema)\n        => field.Validator += GetValidator(argument, field);\n\n    private static Action<object?>? GetValidator(QueryArgument argument, FieldType field)\n    {\n        // identify fields that return a connection type\n        if (!field.ResolvedType!.GetNamedType().Name.EndsWith(\"Connection\"))\n            return null;\n\n        // identify the first and last arguments\n        if (argument.Name != \"first\" && argument.Name != \"last\")\n            return null;\n\n        // apply the validation rule\n        return value =>\n        {\n            if (value is int intValue && intValue > 1000)\n                throw new ArgumentException(\"Cannot return more than 1000 rows.\");\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLTypeReference in C#\nDESCRIPTION: Defines the GraphQLTypeReference class that represents a reference to another GraphQL type. It allows for creating circular type references in GraphQL schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_155\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class GraphQLTypeReference : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public GraphQLTypeReference(string typeName) { }\n    public System.Func<object, bool>? IsTypeOf { get; set; }\n    public bool SkipTypeCheck { get; set; }\n    public string TypeName { get; }\n    public override bool Equals(object? obj) { }\n    public override int GetHashCode() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware in DI Container in C#\nDESCRIPTION: Shows how to register a Field Middleware implementation in the dependency injection container so it can be injected where needed.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<InstrumentFieldsMiddleware>();\n```\n\n----------------------------------------\n\nTITLE: Using Schema Visitor Without a Directive in C#\nDESCRIPTION: Demonstrates how to use a schema visitor independently of directives by directly running it on a schema. This approach allows for schema traversal and modification outside of directive processing.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = new MySchema();\nvar visitor = new MyVisitor();\nvisitor.Run(schema);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL __Field Object Type in JSON Schema\nDESCRIPTION: JSON representation of the __Field object type that describes fields on GraphQL Object and Interface types. Includes properties like name, description, arguments, return type, and deprecation information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"OBJECT\",\n  \"name\": \"__Field\",\n  \"description\": \"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.\",\n  \"fields\": [\n    {\n      \"name\": \"name\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"String\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"description\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"args\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"LIST\",\n          \"name\": null,\n          \"ofType\": {\n            \"kind\": \"NON_NULL\",\n            \"name\": null,\n            \"ofType\": {\n              \"kind\": \"OBJECT\",\n              \"name\": \"__InputValue\",\n              \"ofType\": null\n            }\n          }\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"type\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"OBJECT\",\n          \"name\": \"__Type\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"isDeprecated\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"Boolean\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"deprecationReason\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    }\n  ],\n  \"inputFields\": null,\n  \"interfaces\": [],\n  \"enumValues\": null,\n  \"possibleTypes\": null,\n  \"isOneOf\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GraphQL Type Full Name Using TypeExtensions\nDESCRIPTION: Extension method to retrieve the full name of a GraphQL type including any wrapping types like lists or non-null markers. This provides the complete type representation as it would appear in GraphQL schema syntax.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_190\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string FullName(this GraphQLParser.AST.GraphQLType type) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Name Converters in GraphQL.NET v3.0\nDESCRIPTION: Demonstrates how to migrate a custom field name converter from GraphQL.NET v2.4.x to v3.0. The implementation changes from IFieldNameConverter to INameConverter interface, which requires implementing two methods instead of one and no longer needs to handle introspection types explicitly.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// version 2.4.x\npublic class MyConverter : IFieldNameConverter\n{\n    private static readonly Type[] IntrospectionTypes = { typeof(SchemaIntrospection) };\n\n    public string NameFor(string field, Type parentType) => isIntrospectionType(parentType) ? field.ToCamelCase() : field.ToPascalCase();\n\n    private bool isIntrospectionType(Type type) => IntrospectionTypes.Contains(type);\n}\n\n// version 3.0\npublic class MyConverter : INameConverter\n{\n    public string NameForField(string fieldName, IComplexGraphType graphType) => fieldName.ToPascalCase();\n\n    public string NameForArgument(string argumentName, IComplexGraphType graphType, FieldType field) => argumentName.ToPascalCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Boolean GraphType Implementation\nDESCRIPTION: Shows how to create a custom BooleanGraphType that restores v3.x behavior for boolean value parsing and conversion. Includes registration steps for both code-first and schema-first approaches.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyBooleanGraphType : BooleanGraphType\n{\n    public MyBooleanGraphType()\n    {\n        Name = \"Boolean\";\n    }\n\n    public override object ParseValue(object value) => value switch\n    {\n        null => null,\n        _ => ValueConverter.ConvertTo(value, typeof(bool)) ?? ThrowValueConversionException(value)\n    };\n\n    public override bool CanParseValue(object value)\n    {\n        try\n        {\n            _ = ParseValue(value);\n            return true;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\n// Code-first: add the following line of code to your schema's constructor\nRegisterType(new MyBooleanGraphType());\n\n// Schema-first: add the following line of code after your schema is built, before it is initialized\nschema.RegisterType(new MyBooleanGraphType());\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Apollo Federation @link Directive\nDESCRIPTION: A complete GraphQL schema definition that uses the Apollo Federation @link directive to import specifications from specs.apollo.dev. It defines a schema with Query type, the @link directive, LinkPurpose enum, link__Import scalar, and a basic Query type with a dummy field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.5.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\", {as: \"LinkPurpose\", name: \"Purpose\"}], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [link__Import], purpose: LinkPurpose, url: String!) repeatable on SCHEMA\n\nenum LinkPurpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\nscalar link__Import\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ExecutionStrategy in GraphQL.NET v4 and v5\nDESCRIPTION: Shows how to configure execution strategies for GraphQL operations, comparing v4's approach using a custom DocumentExecuter class with v5's simplified configuration through IGraphQLBuilder.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// === GraphQL.NET v4 ===\npublic class SerialDocumentExecuter : DocumentExecuter\n{\n    public SerialDocumentExecuter(IDocumentBuilder documentBuilder, IDocumentValidator documentValidator, IComplexityAnalyzer complexityAnalyzer, IDocumentCache documentCache, IEnumerable<IConfigureExecutionOptions> configurations)\n        : base(documentBuilder, documentValidator, complexityAnalyzer, documentCache, configurations)\n    {\n    }\n\n    protected override IExecutionStrategy SelectExecutionStrategy(ExecutionContext context)\n    {\n        return context.Operation.Operation switch\n        {\n            OperationType.Query => SerialExecutionStrategy.Instance,\n            _ => base.SelectExecutionStrategy(context)\n        };\n    }\n}\n\n// within Startup.cs\nservices.AddGraphQL()\n    .AddSystemTextJson()\n    .AddSchema<StarWarsSchema>()\n    .AddDocumentExecuter<SerialDocumentExecuter>();\n\n\n// === GraphQL.NET v5 ===\n\n// within Startup.cs\nservices.AddGraphQL(builder => builder\n    .AddSystemTextJson()\n    .AddSchema<StarWarsSchema>()\n    .AddExecutionStrategy<SerialExecutionStrategy>(OperationType.Query));\n```\n\n----------------------------------------\n\nTITLE: Defining a .NET Model Class for GraphQL Object\nDESCRIPTION: Shows the C# class that serves as the data model for the Droid GraphQL type. This class contains the actual properties that will be exposed through the GraphQL API.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Name { get; set; }\n  public List<Episode> AppearsIn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDataLoader Interfaces in GraphQL.NET\nDESCRIPTION: Defines interfaces for different types of data loaders, providing a common contract for dispatching and loading data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDataLoader\n{\n    System.Threading.Tasks.Task DispatchAsync(System.Threading.CancellationToken cancellationToken = default);\n}\npublic interface IDataLoaderContextAccessor\n{\n    GraphQL.DataLoader.DataLoaderContext Context { get; set; }\n}\npublic interface IDataLoader<T>\n{\n    GraphQL.DataLoader.IDataLoaderResult<T> LoadAsync();\n}\npublic interface IDataLoader<TKey, T>\n{\n    GraphQL.DataLoader.IDataLoaderResult<T> LoadAsync(TKey key);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft DI GraphQL Builder Extensions in C#\nDESCRIPTION: Extension methods for configuring GraphQL services with Microsoft Dependency Injection. Includes methods for adding GraphQL services and configuring schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MicrosoftDIGraphQLBuilderExtensions\n{\n    public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<GraphQL.DI.IGraphQLBuilder>? configure) { }\n    public static GraphQL.DI.IGraphQLBuilder AddScopedSubscriptionExecutionStrategy(this GraphQL.DI.IGraphQLBuilder builder, bool serialExecution = true) { }\n    public static GraphQL.DI.IGraphQLBuilder AddSelfActivatingSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n        where TSchema :  class, GraphQL.Types.ISchema { }\n    public static GraphQL.DI.IGraphQLBuilder ValidateServices(this GraphQL.DI.IGraphQLBuilder builder, bool enabled = true) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Execution Error Implementation in C#\nDESCRIPTION: Defines the ExecutionError class for handling GraphQL execution errors with support for error codes, extensions, locations and paths.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ExecutionError : System.Exception\n{\n    public ExecutionError(string message) { }\n    public ExecutionError(string message, System.Collections.IDictionary data) { }\n    public ExecutionError(string message, System.Exception? innerException) { }\n    public string? Code { get; set; }\n    public System.Collections.Generic.Dictionary<string, object?>? Extensions { get; set; }\n    public System.Collections.Generic.List<GraphQLParser.Location>? Locations { get; }\n    public System.Collections.Generic.IEnumerable<object>? Path { get; set; }\n    public void AddLocation(GraphQLParser.Location location) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Value Converter Static Class Implementation in C#\nDESCRIPTION: Provides type conversion functionality for GraphQL values. Includes methods for registering custom converters and handling list conversions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ValueConverter\n{\n    public static GraphQL.Conversion.IListConverterFactory? DefaultListConverterFactory { get; set; }\n    public static object? ConvertTo(object? value, System.Type targetType) { }\n    public static T? ConvertTo<T>(object? value) { }\n    public static System.Func<object, object>? GetConversion(System.Type valueType, System.Type targetType) { }\n    public static GraphQL.Conversion.IListConverter GetListConverter(System.Type listType) { }\n    public static GraphQL.Conversion.IListConverterFactory GetListConverterFactory(System.Type listType) { }\n    public static void Register(System.Type valueType, System.Type targetType, System.Func<object, object>? conversion) { }\n    public static void Register<TTarget>(System.Func<System.Collections.Generic.IDictionary<string, object>, TTarget>? conversion)\n        where TTarget :  class { }\n    public static void Register<TSource, TTarget>(System.Func<TSource, TTarget>? conversion) { }\n    public static void RegisterListConverter<TListType, TElementType>(System.Func<System.Collections.Generic.IEnumerable<TElementType>, TListType>? conversion)\n        where TListType : System.Collections.Generic.IEnumerable<TElementType> { }\n    public static void RegisterListConverterFactory(System.Type listType, GraphQL.Conversion.IListConverterFactory? converter) { }\n    public static void RegisterListConverterFactory(System.Type listType, System.Type implementationType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to a GraphQL Type\nDESCRIPTION: Example of implementing metadata in a custom ObjectGraphType class. This demonstrates how to add a key-value pair to the Metadata dictionary in a class constructor.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphType : ObjectGraphType\n{\n  public MyGraphType()\n  {\n    Metadata[\"rule\"] = \"value\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic ResolveFieldContext in GraphQL.NET\nDESCRIPTION: A generic version of ResolveFieldContext that adds strong typing for the source object. It inherits from ResolveFieldContext and implements IResolveFieldContext<TSource> for type-safe source access.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolveFieldContext<TSource> : GraphQL.ResolveFieldContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<TSource>\n{\n    public ResolveFieldContext() { }\n    public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }\n    public new TSource Source { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware on a Schema in C#\nDESCRIPTION: Example showing how to register a Field Middleware instance on a GraphQL schema. This attaches the middleware to all fields in the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = new Schema();\nschema.Query = new MyQuery();\nschema.FieldMiddleware.Use(new InstrumentFieldsMiddleware());\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic EnumerationGraphType for Enum Types in C#\nDESCRIPTION: Defines a generic version of EnumerationGraphType that works with specific .NET Enum types. It provides specialized parsing and value creation methods for working with enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_152\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EnumerationGraphType<TEnum> : GraphQL.Types.EnumerationGraphType\n    where TEnum : System.Enum\n{\n    public EnumerationGraphType() { }\n    public override bool CanParseValue(object? value) { }\n    protected virtual string ChangeEnumCase(string val) { }\n    protected override GraphQL.Types.EnumValuesBase CreateValues() { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IExecutionContext Interface with Execution State Properties\nDESCRIPTION: Comprehensive interface that defines the execution context for GraphQL operations. Contains all the state needed throughout execution including schema, variables, and user context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_98\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionContext : GraphQL.Execution.IProvideUserContext\n    {\n        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; }\n        System.Threading.CancellationToken CancellationToken { get; }\n        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; }\n        GraphQLParser.AST.GraphQLDocument Document { get; }\n        GraphQL.ExecutionErrors Errors { get; }\n        GraphQL.ExecutionOptions ExecutionOptions { get; }\n        GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; }\n        System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }\n        System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }\n        int? MaxParallelExecutionCount { get; }\n        GraphQL.Instrumentation.Metrics Metrics { get; }\n        GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }\n        System.Collections.Generic.Dictionary<string, object?> OutputExtensions { get; }\n        System.IServiceProvider? RequestServices { get; }\n        object? RootValue { get; }\n        GraphQL.Types.ISchema Schema { get; }\n        bool ThrowOnUnhandledException { get; }\n        System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; }\n        System.Security.Claims.ClaimsPrincipal? User { get; }\n        GraphQL.Validation.Variables Variables { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Execution Error Implementation in C#\nDESCRIPTION: Defines the execution error class for handling GraphQL errors with support for error locations, extensions, and path information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ExecutionError : System.Exception\n{\n    public ExecutionError(string message) { }\n    public ExecutionError(string message, System.Collections.IDictionary data) { }\n    public ExecutionError(string message, System.Exception? innerException) { }\n    public string? Code { get; set; }\n    public System.Collections.Generic.Dictionary<string, object?>? Extensions { get; set; }\n    public System.Collections.Generic.List<GraphQLParser.Location>? Locations { get; }\n    public System.Collections.Generic.IEnumerable<object>? Path { get; set; }\n    public void AddLocation(GraphQLParser.Location location) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DocumentWriter in Dependency Injection\nDESCRIPTION: Examples of instantiating a DocumentWriter for GraphQL response serialization, both manually and through dependency injection with Microsoft's DI container.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Manually construct an instance\nvar documentWriter = new DocumentWriter();\n\n// Or register it within your DI framework (Microsoft DI sample below)\nservices.AddSingleton<IDocumentWriter, DocumentWriter>();\n```\n\n----------------------------------------\n\nTITLE: Query example for grouped structure in GraphQL\nDESCRIPTION: Example of a GraphQL query using the grouped structure, where 'products' must be accessed through the 'retail' field on the Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-organization.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  retail {\n    products {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Field Method Usage Examples in C#\nDESCRIPTION: Examples showing the deprecated ways of defining fields in GraphQL.NET that will trigger the GQL004 warning.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql004.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nField<NonNullGraphType<StringGraphType>>(\n    \"name\",\n    \"Field description\",\n    resolve: context => context.Source!.Name);\n\nFieldAsync<CharacterInterface>(\n    \"hero\",\n    resolve: async context => await data.GetDroidByIdAsync(\"3\"));\n\nFieldAsync<HumanType>(\n    \"human\",\n    arguments: new QueryArguments(new QueryArgument<NonNullGraphType<StringGraphType>>\n    {\n        Name = \"id\",\n        Description = \"id of the human\"\n    }),\n    resolve: async context => await data.GetHumanByIdAsync(context.GetArgument<string>(\"id\"))\n);\n\nField(x => Name, true, typeof(StringGraphType));\n```\n\n----------------------------------------\n\nTITLE: Resolving Integer-based Enumerations in GraphQL.NET\nDESCRIPTION: Shows a model class and object graph type for resolving GraphQL enumerations using integer values in the data model.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HumanInt\n{\n    //i.e. 4, 5, 6\n    public int[] AppearsIn { get; set; }\n}\n\npublic class HumanIntType: ObjectGraphType<HumanInt>\n{\n    public HumanIntType()\n    {\n        Name = \"HumanInt\";\n        Field<ListGraphType<EpisodeEnum>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Middleware Interface Definition in C#\nDESCRIPTION: The interface definition for implementing Field Middleware in GraphQL .NET. Shows the required method that must be implemented by middleware classes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/field-middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFieldMiddleware\n{\n  ValueTask<object?> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Interface\nDESCRIPTION: This interface defines the contract for a GraphQL schema, which includes type registration, type mapping, and schema initialization methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_170\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISchema : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }\n    System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }\n    GraphQL.Types.SchemaTypes AllTypes { get; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"clrType\",\n            \"graphType\"})]\n    System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> BuiltInTypeMappings { get; }\n    GraphQL.Introspection.ISchemaComparer Comparer { get; set; }\n    GraphQL.Types.SchemaDirectives Directives { get; }\n    GraphQL.ExperimentalFeatures Features { get; set; }\n    GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }\n    GraphQL.Introspection.ISchemaFilter Filter { get; set; }\n    bool Initialized { get; }\n    GraphQL.Types.IObjectGraphType? Mutation { get; set; }\n    GraphQL.Conversion.INameConverter NameConverter { get; }\n    GraphQL.Types.IObjectGraphType Query { get; set; }\n    GraphQL.Types.FieldType SchemaMetaFieldType { get; }\n    GraphQL.Types.IObjectGraphType? Subscription { get; set; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"clrType\",\n            \"graphType\"})]\n    System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> TypeMappings { get; }\n    GraphQL.Types.FieldType TypeMetaFieldType { get; }\n    GraphQL.Types.FieldType TypeNameMetaFieldType { get; }\n    void Initialize();\n    void RegisterType(GraphQL.Types.IGraphType type);\n    void RegisterType([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type);\n    void RegisterTypeMapping(System.Type clrType, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type graphType);\n    void RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor visitor);\n    void RegisterVisitor(System.Type type);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unhandled Exception Handler in C#\nDESCRIPTION: Shows how to configure unhandled exception handling in GraphQL execution configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MyQuery>()\n    .AddUnhandledExceptionHandler(context =>\n    {\n        // this now runs when the below exception is thrown\n    })\n    .ConfigureExecution(async (options, next) => {\n        // sample exception thrown while logging the query being executed to a database\n        throw new Exception(\"Database exception occurred\");\n\n        return await next(options);\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema Without Imported Types\nDESCRIPTION: This snippet shows a simplified version of the schema without imported types. It includes the schema definition, a custom directive, and the Query type with fields using various directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamed.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@importedA\"], url: \"https://spec.example.com/exampleA\") @link(import: [\"@importedB\"], url: \"https://spec.example.com/exampleB/v1.0\") @link(as: \"customC\", import: [{as: \"@aliasC\", name: \"@importedC\"}], url: \"https://spec.example.com/exampleC\") {\n  query: Query\n}\n\ndirective @failB on FIELD_DEFINITION\n\ntype Query {\n  field1: String @importedA\n  field10: String @aliasC\n  field11: String @customC__testC\n  field2: String @exampleA__testA\n  field3: String @failB\n  field4: String @importedB\n  field5: String @exampleB__testB\n  field6: String @failB\n  field7: String @importedB\n  field8: String @exampleB__testB\n  field9: String @failB\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inaccessible Attribute for GraphQL.NET Federation\nDESCRIPTION: Attribute for marking GraphQL types or fields as inaccessible in a federation context, preventing them from being exposed in the combined schema. Can be applied to various GraphQL elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_103\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class InaccessibleAttribute : GraphQL.GraphQLAttribute\n{\n    public InaccessibleAttribute() { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NameAttribute in GraphQL.NET\nDESCRIPTION: Attribute for specifying custom names in GraphQL schemas. Can be applied to various C# elements to override their default naming in GraphQL schemas for both input and output types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class NameAttribute : GraphQL.GraphQLAttribute\n{\n    public NameAttribute(string name) { }\n    public string Name { get; set; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Execution Strategy in C#\nDESCRIPTION: This code snippet shows how to override the SelectExecutionStrategy method to use SubscriptionExecutionStrategy for subscription operations. This is necessary after subscriptions were moved to a separate project.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override IExecutionStrategy SelectExecutionStrategy(ExecutionContext context)\n{\n    return context.Operation.OperationType switch\n    {\n        OperationType.Subscription => SubscriptionExecutionStrategy.Instance,\n        _ => base.SelectExecutionStrategy(context)\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Complete GraphQL Schema with Apollo Federation Links\nDESCRIPTION: A complete GraphQL schema definition that uses Apollo Federation link directives. It includes imported link types, custom directives, scalar definitions, and various object types. The schema demonstrates federation capabilities with directive imports and namespaced types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.5.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/v1.0\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Interface for Character in GraphQL\nDESCRIPTION: This snippet shows the GraphQL schema definition for a Character interface in the StarWars universe. It specifies the required fields that any implementing type must include.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Complexity Analysis in GraphQL.NET\nDESCRIPTION: Shows how to configure complexity analysis using the validation rule approach in GraphQL.NET v7.x compared to v5.x. Demonstrates both builder and manual configuration methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\n// GraphQL 5.x or 7.x\nbuilder.AddComplexityAnalyzer(complexityConfig => {\n    // set configuration here\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\n// GraphQL 5.x\noptions.ComplexityConfiguration = complexityConfig;\n\n// GraphQL 7.x\noptions.ValidationRules = GraphQL.Validation.DocumentValidator.CoreRules.Append(new ComplexityValidationRule(complexityConfig));\n```\n\n----------------------------------------\n\nTITLE: Customizing InputObjectGraphType IsValidDefault Behavior\nDESCRIPTION: Shows how to revert the IsValidDefault method behavior to v4 by overriding it to only check if the value is of the expected source type without performing deeper validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool IsValidDefault(object value) => value is TSourceType;\n```\n\n----------------------------------------\n\nTITLE: Implementing UriGraphType Scalar in C#\nDESCRIPTION: Custom scalar type for handling URI values in GraphQL schemas. Provides methods for parsing GraphQL literals and values into URI objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_194\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UriGraphType : GraphQL.Types.ScalarGraphType\n{\n    public UriGraphType() { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query with Fragment Demonstrating Depth\nDESCRIPTION: An example GraphQL query with a fragment that has a total depth of 2. This illustrates how query depth is calculated, including how fragments are factored into the total depth calculation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/malicious-queries.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  Product {  # This query has a depth of 2 which loosely translates to two distinct queries\n  \t\t\t # to the datasource, first one to return the list of products and second\n             # one (which will be executed once for each returned product) to grab\n             # the product's first 3 locations.\n    Title\n    ...X  # The depth of this fragment is calculated first and added to the total.\n  }\n}\n\nfragment X on Product { # This fragment has a depth of only 1.\n  Location(first: 3) {\n    lat\n    long\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Validation Error Response Format in JSON\nDESCRIPTION: Example of a GraphQL validation error response when input validation fails. Shows the structure with error message, location information, and error codes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Invalid value for argument 'firstName' of field 'testMe'. Length must be less than 10 characters.\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 14\n        }\n      ],\n      \"extensions\": {\n        \"code\": \"INVALID_VALUE\",\n        \"codes\": [\n          \"INVALID_VALUE\",\n          \"ARGUMENT\"\n        ],\n        \"number\": \"5.6\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Builder Extension Methods\nDESCRIPTION: Extension methods for IGraphQLBuilder to configure various aspects of GraphQL.NET including document execution, error handling, complexity analysis and schema setup.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphQLBuilderExtensions\n{\n    public static GraphQL.DI.IGraphQLBuilder AddAutoClrMappings(this GraphQL.DI.IGraphQLBuilder builder, bool mapInputTypes = true, bool mapOutputTypes = true) { }\n    public static GraphQL.DI.IGraphQLBuilder AddAutoSchema<TQueryClrType>(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.IConfigureAutoSchema>? configure = null) { }\n    public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder) { }\n    public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder, System.Reflection.Assembly assembly) { }\n    // Additional extension methods omitted for brevity...\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating GraphQL Service Configuration\nDESCRIPTION: Shows the migration path from v4 to v5 for configuring GraphQL services in the dependency injection container. The new approach uses a configuration delegate pattern.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// v4\nservices.AddGraphQL()\n    .AddSystemTextJson()\n    .AddSchema<StarWarsSchema>();\n\n// v5\nservices.AddGraphQL(builder => builder\n    .AddSystemTextJson()\n    .AddSchema<StarWarsSchema>());\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Configuration Classes in C#\nDESCRIPTION: Configuration classes for GraphQL schema elements such as arguments and node visitors. Provides base implementations for schema traversal and metadata handling.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_199\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ArgumentConfig : GraphQL.Utilities.MetadataProvider\n{\n    public ArgumentConfig(string name) { }\n    public object? DefaultValue { get; set; }\n    public string? Description { get; set; }\n    public string Name { get; }\n}\n\npublic abstract class BaseSchemaNodeVisitor : GraphQL.Utilities.ISchemaNodeVisitor\n{\n    protected BaseSchemaNodeVisitor() { }\n    public virtual void PostVisitSchema(GraphQL.Types.ISchema schema) { }\n    public virtual void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public virtual void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n```\n\n----------------------------------------\n\nTITLE: DataLoader Document Listener Configuration\nDESCRIPTION: Setup code for adding the DataLoader document listener to the GraphQL execution pipeline\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar listener = Services.GetRequiredService<DataLoaderDocumentListener>();\n\nvar executer = new DocumentExecuter();\nvar result = executer.ExecuteAsync(opts => {\n\n\t...\n\n\topts.Listeners.Add(listener);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding GraphQL Middleware Components\nDESCRIPTION: Extension methods for adding middleware to the GraphQL execution pipeline. Includes support for Apollo tracing and custom field middleware with conditional installation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder UseMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, bool install = true, GraphQL.DI.ServiceLifetime serviceLifetime = 2)\n    where TMiddleware : class, GraphQL.Instrumentation.IFieldMiddleware { }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Transport Classes\nDESCRIPTION: Classes that represent the transport objects used for GraphQL requests and responses, including GraphQLRequest and OperationMessage.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_131\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GraphQLRequest\n{\n    public GraphQLRequest() { }\n    public string? DocumentId { get; set; }\n    public GraphQL.Inputs? Extensions { get; set; }\n    public string? OperationName { get; set; }\n    public string? Query { get; set; }\n    public GraphQL.Inputs? Variables { get; set; }\n}\n\npublic class OperationMessage\n{\n    public OperationMessage() { }\n    public string? Id { get; set; }\n    public object? Payload { get; set; }\n    public string? Type { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NRT-based Field Nullability in GraphQL.NET\nDESCRIPTION: Demonstrates how nullability annotations in C# classes affect GraphQL schema generation when using NRT inference. Shows the difference in output schema between enabled and disabled NRT inference settings.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\npublic class Person\n{\n    public string FullName { get; set; }\n    public string? SpouseName { get; set; }\n    public IList<string>? Children { get; set; }\n}\n\npublic class PersonGraphType : ObjectGraphType<Person>\n{\n    public PersonGraphType()\n    {\n        Field(p => p.FullName);\n        Field(p => p.SpouseName);\n        Field(p => p.Children);\n    }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person {\n  fullName: String!\n  spouseName: String!\n  children: [String]!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person {\n  fullName: String!\n  spouseName: String\n  children: [String!]\n}\n```\n\n----------------------------------------\n\nTITLE: DI Registration for Vector3Type\nDESCRIPTION: Registers the Vector3Type scalar with the dependency injection container in ASP.NET Core.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<Vector3Type>();\n\n    // Other schema registrations...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Altair GraphQL Client in ASP.NET Core Startup\nDESCRIPTION: This code snippet demonstrates how to add Altair GraphQL Client to the ASP.NET Core pipeline in the Configure method of Startup.cs. It uses the UseGraphQLAltair() extension method to set up Altair, which by default will run on the '/ui/altair' endpoint and send requests to the '/graphql' API endpoint.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/altair-graphql.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    app.UseGraphQLAltair();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Class in C#\nDESCRIPTION: Implements a Schema class for GraphQL.NET with various constructors and properties for managing schema types and configurations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_186\n\nLANGUAGE: C#\nCODE:\n```\n[System.Diagnostics.DebuggerTypeProxy(typeof(GraphQL.Types.Schema.SchemaDebugView))]\npublic class Schema : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.ISchema, System.IDisposable, System.IServiceProvider\n{\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"This class uses Activator.CreateInstance which requires access to the target type's constructor.\")]\n    public Schema() { }\n    public Schema(System.IServiceProvider services) { }\n    public Schema(System.IServiceProvider services, bool runConfigurations = true) { }\n    public Schema(System.IServiceProvider services, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureSchema> configurations) { }\n    public System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }\n    public System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }\n    public GraphQL.Types.SchemaTypes AllTypes { get; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"clrType\",\n            \"graphType\"})]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Imported Types\nDESCRIPTION: This snippet defines a GraphQL schema with imported directives, custom types, and a basic query structure. It includes directives for linking to external specifications and custom field definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.7.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of IGraphType in InterfaceGraphType<TSource>\nDESCRIPTION: This example demonstrates an incorrect implementation where PersonGraphType (which implements IGraphType) is used as the type argument for InterfaceGraphType<TSource>.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql011.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInterfaceGraphType : InterfaceGraphType<PersonGraphType>\n{\n}\n\npublic class PersonGraphType : ObjectGraphType<Person>\n{\n}\n\npublic class Person { }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query Type in C#\nDESCRIPTION: Shows how to implement a Query type class that inherits from ObjectGraphType and defines a field resolver for the hero query.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/queries.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsQuery : ObjectGraphType\n{\n  public StarWarsQuery()\n  {\n    Field<DroidType>(\"hero\")\n      .Resolve(context => new Droid { Id = \"1\", Name = \"R2-D2\" });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Fields from GraphQL Selection Sets in C#\nDESCRIPTION: Protected method in ExecutionStrategy that collects fields from a GraphQL selection set, handling field merging and type-specific field resolution. Returns a dictionary mapping field names to field and field type tuples.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\n[return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n                \"field\",\n                \"fieldType\"})]\n        protected virtual System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>> CollectFieldsFrom(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IGraphType specificType, GraphQLParser.AST.GraphQLSelectionSet selectionSet, [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n                \"field\",\n                \"fieldType\"})] System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? fields) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL JSON Converters with System.Text.Json\nDESCRIPTION: Collection of JsonConverter implementations for GraphQL.NET types including ApolloTrace, ExecutionError, ExecutionResult, and GraphQLRequest. These converters handle serialization and deserialization of GraphQL-specific data structures.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.SystemTextJson.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApolloTraceJsonConverter : System.Text.Json.Serialization.JsonConverter<GraphQL.Instrumentation.ApolloTrace>\n{\n    public ApolloTraceJsonConverter() { }\n    public override GraphQL.Instrumentation.ApolloTrace Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { }\n    public override void Write(System.Text.Json.Utf8JsonWriter writer, GraphQL.Instrumentation.ApolloTrace value, System.Text.Json.JsonSerializerOptions options) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking FieldType Service Dependencies in GraphQL.NET\nDESCRIPTION: Shows how to manually mark a FieldType as requiring a service using the DependsOn<T>() method. This ensures service dependencies are properly tracked and validated.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_49\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"myField\")\n    .DependsOn<IMyService>()\n    .Resolve(context =>\n    {\n        var service = context.RequestServices!.GetRequiredService<IMyService>();\n        return service.GetMyValue();\n    });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products with Categories in GraphQL .NET JSON Response\nDESCRIPTION: A sample JSON response from a GraphQL query that fetches a list of products with their IDs, names, and associated category IDs. The response shows products organized in an array under the data.products path, with each product containing its own properties and a nested category object.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample2Tests.Products.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"products\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Product 1\",\n        \"category\": {\n          \"id\": \"1\"\n        }\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Product 2\",\n        \"category\": {\n          \"id\": \"1\"\n        }\n      },\n      {\n        \"id\": \"3\",\n        \"name\": \"Product 3\",\n        \"category\": {\n          \"id\": \"2\"\n        }\n      },\n      {\n        \"id\": \"4\",\n        \"name\": \"Product 4\",\n        \"category\": {\n          \"id\": \"2\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScopedFieldBuilderExtensions in C#\nDESCRIPTION: Extension methods for FieldBuilder to enable scoped dependency resolution for GraphQL fields. Provides entry point for creating resolver builders with Microsoft DI support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ScopedFieldBuilderExtensions\n{\n    public static GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType> Resolve<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder) { }\n\n```\n\n----------------------------------------\n\nTITLE: Combined Approach for AutoRegisteringObjectGraphType Configuration\nDESCRIPTION: Shows how to combine property exclusion and custom type implementation by using both constructor parameters and inheritance.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyAutoType : AutoRegisteringObjectGraphType<SomeClassWithManyProperties>\n{\n    public MyAutoType() : base(x => x.Address, x => x.SecretCode) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Type for Character Retrieval\nDESCRIPTION: The Query type provides entry points to fetch Droid and Human characters by ID, as well as a generic hero field returning a Character.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  droid(\n    \"id of the droid\"\n    id: String!): Droid\n  hero: Character\n  human(\n    \"id of the human\"\n    id: String!): Human\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simplified GraphQL Schema without Imports\nDESCRIPTION: This snippet presents a simplified version of the GraphQL schema without imported types. It includes the basic structure with custom directives, types, and a query definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.8.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ntype example__Type1 {\n  field1: String\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoaderDocumentListener for GraphQL Execution in GraphQL.NET\nDESCRIPTION: Implements IDocumentExecutionListener to integrate data loaders with GraphQL execution. It manages the dispatch of data loaders during different phases of GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataLoaderDocumentListener : GraphQL.Execution.IDocumentExecutionListener\n{\n    public DataLoaderDocumentListener(GraphQL.DataLoader.IDataLoaderContextAccessor accessor) { }\n    public System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context) { }\n    public System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult) { }\n    public System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IExecutionStrategySelector Interface for Strategy Selection\nDESCRIPTION: Interface that defines how execution strategies are selected based on the execution context. Allows for dynamic strategy selection per operation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_100\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionStrategySelector\n    {\n        GraphQL.Execution.IExecutionStrategy Select(GraphQL.Execution.ExecutionContext context);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveImportedTypesVisitor for Schema Cleaning\nDESCRIPTION: Implements a visitor that removes imported types from a GraphQL schema. It processes document nodes to identify and remove types that are imported from other schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_219\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class RemoveImportedTypesVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Utilities.Visitors.RemoveImportedTypesVisitor.Context>\n{\n    protected override System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, GraphQL.Utilities.Visitors.RemoveImportedTypesVisitor.Context context) { }\n    public static void Visit(GraphQLParser.AST.ASTNode node, GraphQL.Types.ISchema schema) { }\n    public struct Context : GraphQLParser.Visitors.IASTVisitorContext\n    {\n        public System.Threading.CancellationToken CancellationToken { get; }\n        public System.Collections.Generic.List<string>? ImportedNamespaces { get; set; }\n        public System.Collections.Generic.HashSet<string>? ImportedTypes { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoaderContextAccessor for Dependency Injection in GraphQL.NET\nDESCRIPTION: Provides access to the DataLoaderContext through dependency injection. It implements the IDataLoaderContextAccessor interface.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataLoaderContextAccessor : GraphQL.DataLoader.IDataLoaderContextAccessor\n{\n    public DataLoaderContextAccessor() { }\n    public GraphQL.DataLoader.DataLoaderContext Context { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Validation Rules in GraphQL.NET\nDESCRIPTION: Extension methods for adding custom validation rules to the GraphQL execution pipeline. Supports different service lifetimes and cached document validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, bool useForCachedDocuments = false, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n    where TValidationRule : class, GraphQL.Validation.IValidationRule { }\n```\n\n----------------------------------------\n\nTITLE: Field Builder Method Declarations for GraphQL.NET in C#\nDESCRIPTION: Defines virtual methods for the FieldBuilder class that allow configuring GraphQL fields through a fluent API. Methods include setting field names, resolvers, return types, validation, and more.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Name(string name) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ParseValue(System.Func<object, object> parseValue) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(GraphQL.Resolvers.IFieldResolver? resolver) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolve) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolve) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveDelegate(System.Delegate? resolve) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveStream(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.IObservable<TReturnType?>> sourceStreamResolver) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveStreamAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType?>>> sourceStreamResolver) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Type(GraphQL.Types.IGraphType type) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Validate(System.Action<object> validation) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ValidateArguments(System.Action<GraphQL.Validation.FieldArgumentsValidationContext> validation) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ValidateArguments(System.Func<GraphQL.Validation.FieldArgumentsValidationContext, System.Threading.Tasks.ValueTask> validation) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldArgumentsAreValidRule Validation Rule in C#\nDESCRIPTION: Defines the FieldArgumentsAreValidRule validation rule class. It implements both ValidationRuleBase and INodeVisitor interfaces. The class includes a constant key, a static instance property, and overrides the GetPostNodeVisitorAsync method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_225\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class FieldArgumentsAreValidRule : GraphQL.Validation.ValidationRuleBase, GraphQL.Validation.INodeVisitor\n{\n    public const string HAS_FIELD_ARGUMENT_VALIDATION_KEY = \"__GraphQL_Has_Field_Argument_Validation__\";\n    public static GraphQL.Validation.Rules.FieldArgumentsAreValidRule Instance { get; }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeConfig Class Declaration\nDESCRIPTION: Provides configuration for GraphQL types, extending MetadataProvider. Includes properties for type metadata such as name, description, and deprecation reason, as well as methods for field configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_201\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TypeConfig : GraphQL.Utilities.MetadataProvider\n{\n    public TypeConfig(string name) { }\n    public string? DeprecationReason { get; set; }\n    public string? Description { get; set; }\n    public System.Func<object, bool>? IsTypeOfFunc { get; set; }\n    public string Name { get; }\n    public System.Func<object, GraphQL.Types.IObjectGraphType>? ResolveType { get; set; }\n    public System.Type? Type { get; set; }\n    public GraphQL.Utilities.FieldConfig FieldFor(string fieldName) { }\n    public void IsTypeOf<T>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InputsExtensions in GraphQL.NET\nDESCRIPTION: Extension methods for working with GraphQL inputs. Provides conversion utilities to transform standard dictionaries into GraphQL input collections.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\npublic static class InputsExtensions\n{\n    public static GraphQL.Inputs ToInputs(this System.Collections.Generic.Dictionary<string, object?> dictionary) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Federated GraphQL Schema with Product and Category Types\nDESCRIPTION: This GraphQL schema definition implements Federation directives to create a service boundary. It extends an existing Category type, defines a new Product type with relation to Category, and extends the Query type with a products field that returns a list of products.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample2Tests.Schema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Category @key(fields: \"id\") {\n  id: ID! @external\n  products: [Product!]!\n}\n\ntype Product @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  category: Category!\n}\n\nextend type Query {\n  products: [Product!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Metadata Access in C#\nDESCRIPTION: This code snippet shows how to safely access and modify metadata on a field in a thread-safe manner. It's necessary because IProvideMetadata.Metadata is no longer thread-safe in GraphQL.NET v4.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nlock (field)\n{\n    int value;\n    if (field.Metadata.TryGetValue(\"counter\", out var valueObject)) value = (int)valueObject;\n    field.Metadata[\"counter\"] = value + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Name Converters for Case Transformation\nDESCRIPTION: Name converter implementations that transform field and argument names between different casing styles (camel case, pascal case, default). Used to control the GraphQL schema naming conventions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_63\n\nLANGUAGE: C#\nCODE:\n```\npublic class CamelCaseNameConverter : GraphQL.Conversion.INameConverter\n{\n    public static readonly GraphQL.Conversion.CamelCaseNameConverter Instance;\n    public CamelCaseNameConverter() { }\n    public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }\n    public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }\n}\n\npublic class DefaultNameConverter : GraphQL.Conversion.INameConverter\n{\n    public static readonly GraphQL.Conversion.DefaultNameConverter Instance;\n    public DefaultNameConverter() { }\n    public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }\n    public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }\n}\n\npublic class PascalCaseNameConverter : GraphQL.Conversion.INameConverter\n{\n    public static readonly GraphQL.Conversion.PascalCaseNameConverter Instance;\n    public PascalCaseNameConverter() { }\n    public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }\n    public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RenameImportedDirectivesVisitor for Schema Manipulation\nDESCRIPTION: Implements a visitor that renames imported directives in a GraphQL schema. It provides methods to visit different schema elements and rename directives based on link configurations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_220\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class RenameImportedDirectivesVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public RenameImportedDirectivesVisitor(System.Collections.Generic.List<GraphQL.Utilities.LinkConfiguration> linkConfigurations) { }\n    public override void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitSchema(GraphQL.Types.ISchema schema) { }\n    public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }\n    public static void Run(GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ID Scalar Type for GraphQL\nDESCRIPTION: The IdGraphType class implements the GraphQL ID scalar type, providing parsing and serialization functions for ID values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_171\n\nLANGUAGE: C#\nCODE:\n```\npublic class IdGraphType : GraphQL.Types.ScalarGraphType\n{\n    public IdGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL011 Warnings\nDESCRIPTION: This snippet demonstrates how to suppress GQL011 warnings using preprocessor directives in C#.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql011.md#2025-04-21_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL011\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL011\n```\n\n----------------------------------------\n\nTITLE: Correcting Parser Method Signatures in C#\nDESCRIPTION: This snippet demonstrates how to fix violations of the GQL018 rule by correcting the parser method signatures to match the required pattern.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql018.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [Parser(nameof(Parse))]\n    public string Hello1 { get; set; }\n\n    [Parser(typeof(Parsers), nameof(Parsers.ParseValue))]\n    public string Hello2 { get; set; }\n\n    private static object Parse(object value) => Convert.ToInt32(value);\n}\n\npublic class Parsers\n{\n    public static object ParseValue(object value) => Convert.ToInt32(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chained DataLoaders in GraphQL .NET User Type\nDESCRIPTION: Implementation of two chained DataLoaders to batch requests together. This example includes asynchronous authentication before data loaders execute, retrieval of orders by user ID, and then items by order ID with post-processing to flatten results.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserType : ObjectGraphType<User>\n{\n    // Inject the IDataLoaderContextAccessor to access the current DataLoaderContext\n    public UserType(IDataLoaderContextAccessor accessor, IUsersStore users, IOrdersStore orders, IItemsStore items)\n    {\n        ...\n\n        Field<ListGraphType<ItemType>, IEnumerable<Item>>()\n            .Name(\"OrderedItems\")\n            .ResolveAsync(async context =>\n            {\n                // Asynchronously authenticate\n                var valid = await users.CanViewOrders(context.Source.UserId);\n                if (!valid) return null;\n\n                // Get or add a collection batch loader with the key \"GetOrdersByUserId\"\n                // The loader will call GetOrdersByUserIdAsync with a batch of keys\n                var ordersLoader = accessor.Context.GetOrAddCollectionBatchLoader<int, Order>(\"GetOrdersByUserId\",\n                    orders.GetOrdersByUserIdAsync);\n\n                var ordersResult = ordersLoader.LoadAsync(context.Source.UserId);\n\n                // Once the orders have been retrieved by the first data loader, feed the order IDs into\n                //   the second data loader\n                return ordersResult.Then((orders, cancellationToken) =>\n                {\n                    // Collect all of the order IDs\n                    var orderIds = orders.Select(o => o.Id);\n\n                    // Get or add a collection batch loader with the key \"GetItemsByOrderId\"\n                    // The loader will call GetItemsByOrderId with a batch of keys\n                    var itemsLoader = accessor.Context.GetOrAddCollectionBatchLoader<int, Item>(\"GetItemsByOrderId\",\n                        items.GetItemsByOrderIdAsync);\n\n                    var itemsResults = itemsLoader.LoadAsync(orderIds);\n\n                    // itemsResults is of type IDataLoaderResult<IEnumerable<Item>[]> so the array needs to be flattened\n                    //   before returning it back to the query\n                    return itemsResults.Then(itemResultSet =>\n                    {\n                        // Flatten the results after the second dataloader has finished\n                        return flattenedResults = itemResultSet.SelectMany(x => x);\n                    });\n                });\n            });\n    }\n}\n\npublic interface IUsersStore\n{\n    // This will be called for each call to OrderedItems, prior to any data loader execution\n    Task<bool> CanViewOrders(int userId);\n}\npublic interface IOrdersStore\n{\n    // This will be called by the \"order\" loader for all pending keys\n    // Note that fetch delegates can accept a CancellationToken parameter or not\n    Task<ILookup<int, Order>> GetOrdersByUserIdAsync(IEnumerable<int> userIds, CancellationToken cancellationToken);\n}\npublic interface IItemsStore\n{\n    // This will be called by the \"item\" loader for all pending keys\n    // Note that fetch delegates can accept a CancellationToken parameter or not\n    Task<ILookup<int, Item>> GetItemsByOrderIdAsync(IEnumerable<int> orderIds, CancellationToken cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple GraphType Instances Error in GraphQL.NET\nDESCRIPTION: Examples of code patterns that cause the 'multiple instances of same graph type' error in GraphQL.NET v7, along with their solutions. This shows incorrect ways of instantiating graph types and how to properly reference them instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// sample 1: manually creating instances without providing the same instance for each use\npublic class MyGraphType : ObjectGraphType\n{\n    public MyGraphType()\n    {\n        // creates an instance of WidgetGraphType\n        Field(\"field1\", new WidgetGraphType());\n        // creates another instance of the same class\n        Field(\"field2\", new WidgetGraphType());\n\n        // solution:\n        Field<WidgetGraphType>(\"field1\");\n        Field<WidgetGraphType>(\"field2\");\n    }\n}\n\n// sample 2: adding an instance to a union graph type\npublic class MyUnionGraphType : UnionGraphType\n{\n    public MyUnionGraphType()\n    {\n        // creates an instance, which will be different than the one used elsewhere\n        AddPossibleType(new WidgetGraphType());\n\n        // solution:\n        Type<WidgetGraphType>();\n    }\n}\n\n// sample 3: pulling an instance from DI\npublic class MyUnionGraphType : UnionGraphType\n{\n    public MyUnionGraphType(WidgetGraphType widgetType)\n    {\n        // Since graph types are typically registered as transients, this reference to\n        // WidgetGraphType will be different than other instances throughout the schema\n        // and the following code does not work.\n        AddPossibleType(widgetType);\n        ResolveType = obj => obj switch\n        {\n            string => widgetType,\n            _ => null,\n        };\n\n        // solution 1: register WidgetGraphType as a singleton manually within the DI provider\n\n        // solution 2: remove WidgetGraphType from the constructor and use the following code:\n        Type<WidgetGraphType>();\n        ResolveType = obj => obj switch\n        {\n            string => new GraphQLTypeReference(\"Widget\"), // reference by name (newing each time is not nessessary)\n            _ => null,\n        };\n\n        // solution 3: remove ResolveType and rely on IObjectGraphType.IsTypeOf of each union member type\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Class in C#\nDESCRIPTION: Core schema implementation that manages type registration, configuration and service resolution for a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_180\n\nLANGUAGE: C#\nCODE:\n```\n[System.Diagnostics.DebuggerTypeProxy(typeof(GraphQL.Types.Schema.SchemaDebugView))]\npublic class Schema : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.ISchema, System.IDisposable, System.IServiceProvider\n{\n    public Schema() { }\n    public Schema(System.IServiceProvider services) { }\n    public Schema(System.IServiceProvider services, bool runConfigurations = true) { }\n    public Schema(System.IServiceProvider services, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureSchema> configurations) { }\n    public System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }\n    public System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }\n    public GraphQL.Types.SchemaTypes AllTypes { get; }\n    public GraphQL.Introspection.ISchemaComparer Comparer { get; set; }\n    public string? Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Validation Error Classes in C#\nDESCRIPTION: Implements custom validation error classes for handling complexity limits and introspection restrictions in GraphQL queries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_232\n\nLANGUAGE: C#\nCODE:\n```\nnamespace GraphQL.Validation.Errors.Custom\n{\n    public class ComplexityError : GraphQL.Validation.ValidationError\n    {\n        public ComplexityError(string message) { }\n    }\n    public class NoIntrospectionError : GraphQL.Validation.ValidationError\n    {\n        public NoIntrospectionError(GraphQLParser.ROM source, GraphQLParser.AST.ASTNode node) { }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Timeout Configuration Extensions\nDESCRIPTION: Methods for configuring execution timeouts and timeout handling behavior in GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder WithTimeout(this GraphQL.DI.IGraphQLBuilder builder, System.TimeSpan timeout) { }\n\npublic static GraphQL.DI.IGraphQLBuilder WithTimeout(this GraphQL.DI.IGraphQLBuilder builder, System.TimeSpan timeout, System.Func<GraphQL.ExecutionOptions, System.Threading.Tasks.Task<GraphQL.ExecutionResult>> timeoutDelegate) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLContractResolver for Newtonsoft.Json\nDESCRIPTION: A custom contract resolver for Newtonsoft.Json that handles GraphQL-specific serialization needs. It uses an IErrorInfoProvider to properly format error information in the serialized output.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLContractResolver : Newtonsoft.Json.Serialization.DefaultContractResolver\n{\n    public GraphQLContractResolver(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }\n    protected override Newtonsoft.Json.Serialization.JsonProperty CreateProperty(System.Reflection.MemberInfo member, Newtonsoft.Json.MemberSerialization memberSerialization) { }\n    protected override Newtonsoft.Json.JsonConverter? ResolveContractConverter(System.Type objectType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FloatGraphType class for GraphQL.NET\nDESCRIPTION: Defines the FloatGraphType class that represents float values in GraphQL schemas. It provides methods for parsing and serializing float values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\npublic class FloatGraphType : GraphQL.Types.ScalarGraphType\n{\n    public FloatGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NameFieldResolver for GraphQL.NET\nDESCRIPTION: This class implements a simple field resolver that resolves the 'name' field. It provides a singleton instance and an asynchronous resolve method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_128\n\nLANGUAGE: C#\nCODE:\n```\npublic class NameFieldResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public static GraphQL.Resolvers.NameFieldResolver Instance { get; }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OneOfAttribute in GraphQL.NET\nDESCRIPTION: Attribute that marks a GraphQL input type as a OneOf type. When applied to a class, it indicates that the class represents a GraphQL Input Object that should accept exactly one of its fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class)]\npublic class OneOfAttribute : GraphQL.GraphQLAttribute\n{\n    public OneOfAttribute() { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: DirectiveAttribute for Applying GraphQL Directives\nDESCRIPTION: Defines an attribute for applying GraphQL directives to various schema elements. Supports directives with multiple arguments and applies them to types, fields, enum values, and arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter, AllowMultiple=true)]\npublic class DirectiveAttribute : GraphQL.GraphQLAttribute\n{\n    public System.Collections.Generic.Dictionary<string, object?> Arguments;\n    public DirectiveAttribute(string name) { }\n    public DirectiveAttribute(string name, params object?[] argsAndValues) { }\n    public DirectiveAttribute(string name, string argumentName, object? argumentValue) { }\n    public DirectiveAttribute(string name, string argumentName1, object? argumentValue1, string argumentName2, object? argumentValue2) { }\n    public DirectiveAttribute(string name, string argumentName1, object? argumentValue1, string argumentName2, object? argumentValue2, string argumentName3, object? argumentValue3) { }\n    public string Name { get; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Entity Resolution Implementation\nDESCRIPTION: Core implementation of federation entity resolution including representation parsing and async resolution handling.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_118\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class EntityResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public static GraphQL.Federation.Resolvers.EntityResolver Instance { get; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Federation.Resolvers.Representation> ConvertRepresentations(GraphQL.Types.ISchema schema, System.Collections.IList representations) { }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Directives in GraphQL Schema\nDESCRIPTION: Defines standard federation directives used in GraphQL service composition. These directives enable features like type extension, field exposure, entity identification, and dependency management across services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.1.0.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @provides(fields: FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: FieldSet!) on FIELD_DEFINITION\n\nscalar FieldSet\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldsOnCorrectType Validation Rule in C#\nDESCRIPTION: Defines the FieldsOnCorrectType validation rule class. It includes a static instance and an obsolete constructor. The class overrides the GetPreNodeVisitorAsync method to provide custom validation logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_226\n\nLANGUAGE: C#\nCODE:\n```\npublic class FieldsOnCorrectType : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.FieldsOnCorrectType Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor \" +\n        \"will be removed in v9.\")]\n    public FieldsOnCorrectType() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Resolvers in GraphQL.NET\nDESCRIPTION: C# classes implementing IFieldResolver interface for resolving GraphQL fields with different strategies including name-based, source-based, and stream-based resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_128\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NameFieldResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public static GraphQL.Resolvers.NameFieldResolver Instance { get; }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n\npublic sealed class SourceFieldResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public static GraphQL.Resolvers.SourceFieldResolver Instance { get; }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n\npublic class SourceStreamMethodResolver : GraphQL.Resolvers.MemberResolver, GraphQL.Resolvers.ISourceStreamResolver\n{\n    public SourceStreamMethodResolver(System.Reflection.MethodInfo methodInfo, System.Linq.Expressions.LambdaExpression instanceExpression, System.Collections.Generic.IList<System.Linq.Expressions.LambdaExpression> methodArgumentExpressions) { }\n    protected override System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<object?>> BuildFieldResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }\n    protected virtual System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<System.IObservable<object?>>> BuildSourceStreamResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }\n    public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveStreamAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Scalar and Union Types\nDESCRIPTION: Declares a custom scalar '_Any' and a union type '_Entity' for federation purposes. The '_Entity' union includes all types that use the @key directive, specifically Category and Product in this schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation2Schema.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nscalar _Any\n\n\"A union of all types that use the @key directive\"\nunion _Entity = Category | Product\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Field Resolver with Source and Return Types\nDESCRIPTION: Generic field resolver class that supports both synchronous and asynchronous resolution of GraphQL fields with scoped lifetime. Handles two type parameters for source and return values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScopedFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.FuncFieldResolver<TReturnType>\n{\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Execution Options Configuration in C#\nDESCRIPTION: Defines execution options for GraphQL queries including timeout settings, validation rules, user context, and various execution configurations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic class ExecutionOptions : GraphQL.Execution.IProvideUserContext\n{\n    public ExecutionOptions() { }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? CachedDocumentValidationRules { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public GraphQLParser.AST.GraphQLDocument? Document { get; set; }\n    public string? DocumentId { get; set; }\n    public bool EnableMetrics { get; set; }\n    public GraphQL.Inputs? Extensions { get; set; }\n    public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }\n    public int? MaxParallelExecutionCount { get; set; }\n    public string? OperationName { get; set; }\n    public string? Query { get; set; }\n    public System.IServiceProvider? RequestServices { get; set; }\n    public object? Root { get; set; }\n    public GraphQL.Types.ISchema? Schema { get; set; }\n    public bool ThrowOnUnhandledException { get; set; }\n    public System.TimeSpan Timeout { get; set; }\n    public GraphQL.Execution.TimeoutAction TimeoutAction { get; set; }\n    public System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; set; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? ValidationRules { get; set; }\n    public GraphQL.Inputs? Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Validator Property Attribute in C#\nDESCRIPTION: Defines an attribute for property-level validation in GraphQL types. Supports multiple validators per property with custom validation methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=true)]\npublic sealed class ValidatorAttribute : GraphQL.GraphQLAttribute\n{\n    public ValidatorAttribute(string validatorMethodName) { }\n    public ValidatorAttribute(System.Type validatorType) { }\n    public ValidatorAttribute(System.Type validatorType, string validatorMethodName) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDocumentBuilder Interface for GraphQL Parsing\nDESCRIPTION: Interface that defines the contract for building GraphQL document ASTs from query strings. Essential for the initial parsing phase of GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_94\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDocumentBuilder\n    {\n        GraphQLParser.AST.GraphQLDocument Build(string body);\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Input Type Attributes in C#\nDESCRIPTION: Defines attributes for specifying the input type for GraphQL fields or arguments. These attributes allow customizing the GraphQL type to use for input fields, with both non-generic and generic variants.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class InputTypeAttribute : GraphQL.GraphQLAttribute\n{\n    public InputTypeAttribute(System.Type graphType) { }\n    public System.Type InputType { get; set; }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n\npublic class InputTypeAttribute<TGraphType> : GraphQL.InputTypeAttribute\n    where TGraphType : GraphQL.Types.IGraphType\n{\n    public InputTypeAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL013 Rule Severity\nDESCRIPTION: Configuration example showing how to disable the GQL013 rule at the file level using configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql013.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL013.severity = none\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionBatchDataLoader Class for Multiple Items in GraphQL.NET\nDESCRIPTION: Implements a data loader that fetches collections of items in batches by key. It provides constructors for fetching data using either an ILookup or a collection with a key selector function.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CollectionBatchDataLoader<TKey, T> : GraphQL.DataLoader.DataLoaderBase<TKey, System.Collections.Generic.IEnumerable<T>>\n    where TKey :  notnull\n{\n    public CollectionBatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>>> fetchDelegate, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, int maxBatchSize = 2147483647) { }\n    public CollectionBatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchDelegate, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey>? keyComparer = null, int maxBatchSize = 2147483647) { }\n    protected override System.Threading.Tasks.Task FetchAsync(System.Collections.Generic.IEnumerable<GraphQL.DataLoader.DataLoaderPair<TKey, System.Collections.Generic.IEnumerable<T>>> list, System.Threading.CancellationToken cancellationToken) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Requests in ASP.NET Core with Form Data\nDESCRIPTION: ASP.NET Core controller action that handles GraphQL requests sent via multipart/form-data or application/x-www-form-urlencoded, deserializing variables using the ToInputs extension method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// ASP.NET Core action with multipart/form-data or application/x-www-form-urlencoded encoding\n[HttpPost(\"graphql\")]\npublic IActionResult GraphQL(string query, string operationName, string variables)\n{\n    var inputs = variables?.ToInputs();\n    // execute request and return result\n}\n```\n\n----------------------------------------\n\nTITLE: Using Validator Attribute in Type-First Schemas in GraphQL.NET\nDESCRIPTION: Examples of using the [Validator] attribute to define custom validators in type-first schemas for both arguments and input fields. Shows different ways to reference validator methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// sample for argument validation\npublic class OutputClass2\n{\n    // use local private static method\n    public static string Hello1([Validator(nameof(ValidateHelloArgument))] string value) => value;\n\n    // use public static method from another class -- looks for ValidatorClass.Validate\n    public static string Hello2([Validator(typeof(ValidatorClass))] string value) => value;\n\n    // use public static method from another class with a specific name\n    public static string Hello3([Validator(typeof(HelperClass), nameof(HelperClass.ValidateHelloArgument))] string value) => value;\n\n    // example custom validator\n    private static void ValidateHelloArgument(object value)\n    {\n        if ((string)value != \"hello\")\n            throw new ArgumentException(\"Value must be 'hello'.\");\n    }\n}\n\n// sample for input field validation\npublic class InputClass2\n{\n    [Validator(nameof(ValidateHelloArgument))]\n    public string? Field1 { get; set; }\n\n    private static void ValidateHelloArgument(object value)\n    {\n        if ((string)value != \"hello\")\n            throw new ArgumentException(\"Value must be 'hello'.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Multiplier\nDESCRIPTION: Example of setting a global default multiplier for list fields in the complexity analyzer configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\ncomplexityConfig.DefaultListImpactMultiplier = 7; // Assume that other list fields return 7 items on average\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation Schema with Federation v2.0 Directives\nDESCRIPTION: A complete GraphQL schema that implements Apollo Federation v2.0 directives and types. It includes the required federation directives (@key, @external, etc.), federation-specific scalars, and the minimal structure needed for a federated service including the _Service type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.0.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.0\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQLRequest and OperationMessage for GraphQL.NET\nDESCRIPTION: These classes define the structure for GraphQL requests and operation messages. They include properties for various request parameters and message components.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_132\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLRequest\n{\n    public GraphQLRequest() { }\n    public string? DocumentId { get; set; }\n    public GraphQL.Inputs? Extensions { get; set; }\n    public string? OperationName { get; set; }\n    public string? Query { get; set; }\n    public GraphQL.Inputs? Variables { get; set; }\n}\n\npublic class OperationMessage\n{\n    public OperationMessage() { }\n    public string? Id { get; set; }\n    public object? Payload { get; set; }\n    public string? Type { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoRegisteringInputObjectGraphType for GraphQL.NET\nDESCRIPTION: This generic class extends InputObjectGraphType to automatically register fields based on the source type. It includes methods for configuring the graph, creating fields, and providing field information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_133\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutoRegisteringInputObjectGraphType<TSourceType> : GraphQL.Types.InputObjectGraphType<TSourceType>\n{\n    public AutoRegisteringInputObjectGraphType() { }\n    public AutoRegisteringInputObjectGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }\n    protected virtual void ConfigureGraph() { }\n    protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Directive Implementation\nDESCRIPTION: Implementation of GraphQL directives including deprecated directive and base directive class with validation support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_141\n\nLANGUAGE: C#\nCODE:\n```\npublic class Directive : GraphQL.Utilities.MetadataProvider, GraphQL.Types.INamedType, GraphQL.Types.IProvideDescription\n{\n    public Directive(string name, params GraphQLParser.AST.DirectiveLocation[] locations) { }\n    public Directive(string name, System.Collections.Generic.IEnumerable<GraphQLParser.AST.DirectiveLocation> locations) { }\n    public GraphQL.Types.QueryArguments? Arguments { get; set; }\n    public string? Description { get; set; }\n    public virtual bool? Introspectable { get; }\n    public System.Collections.Generic.List<GraphQLParser.AST.DirectiveLocation> Locations { get; }\n    public string Name { get; set; }\n    public bool Repeatable { get; set; }\n    public override string ToString() { }\n    public virtual void Validate(GraphQL.Types.AppliedDirective applied) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Tracing in GraphQL.NET with Builder Method\nDESCRIPTION: Example of using the UseApolloTracing builder method to add the InstrumentFieldsMiddleware to the schema and conditionally enable metrics during execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    // other builder methods here\n    .ConfigureExecution(async (options, next) => {\n        var timer = Stopwatch.StartNew();\n        var result = await next(options);\n        result.Extensions ??= new Dictionary<string, object?>();\n        result.Extensions[\"elapsedMs\"] = timer.ElapsedMilliseconds;\n        return result;\n    }));\n```\n\n----------------------------------------\n\nTITLE: Implementing Requires Attribute for GraphQL.NET Federation\nDESCRIPTION: Attribute for specifying fields required by a service to resolve a particular field, declaring dependencies on external fields from other services in the federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_108\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]\npublic class RequiresAttribute : GraphQL.GraphQLAttribute\n{\n    public RequiresAttribute(string fields) { }\n    public RequiresAttribute(params string[] fields) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisted Document Interfaces and Error Types\nDESCRIPTION: Defines interfaces and error types for handling persisted documents in GraphQL. Includes loader interface for retrieving documents and specific error types for different failure scenarios.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IPersistedDocumentLoader\n{\n    System.Threading.Tasks.ValueTask<string?> GetQueryAsync(string? documentIdPrefix, string documentIdPayload, System.Threading.CancellationToken cancellationToken);\n}\n\npublic class DocumentIdInvalidError : GraphQL.Execution.RequestError\n{\n    public DocumentIdInvalidError() { }\n}\n\npublic class DocumentIdMissingError : GraphQL.Execution.RequestError\n{\n    public DocumentIdMissingError() { }\n}\n\npublic class DocumentNotFoundError : GraphQL.Execution.RequestError\n{\n    public DocumentNotFoundError() { }\n}\n\npublic class InvalidRequestError : GraphQL.Execution.RequestError\n{\n    public InvalidRequestError() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Resolver Implementations\nDESCRIPTION: Implements field resolvers for GraphQL fields using expressions and functions. Includes generic implementations for different return and source types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_126\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IFieldResolver\n{\n    System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context);\n}\n\npublic class FuncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver\n{\n    public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, TReturnType?> resolver) { }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InputFieldsAndArgumentsOfCorrectLength Validation Rule in C#\nDESCRIPTION: Defines the InputFieldsAndArgumentsOfCorrectLength validation rule class. It includes a static instance and an obsolete constructor. The class overrides both GetPreNodeVisitorAsync and GetVariableVisitorAsync methods to provide custom validation logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_228\n\nLANGUAGE: C#\nCODE:\n```\npublic class InputFieldsAndArgumentsOfCorrectLength : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor \" +\n        \"will be removed in v9.\")]\n    public InputFieldsAndArgumentsOfCorrectLength() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces Collection in GraphQL.NET\nDESCRIPTION: Collection class for storing and managing interface types in GraphQL.NET. It provides methods for adding and checking interfaces, with support for both type and generic parameters.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_174\n\nLANGUAGE: C#\nCODE:\n```\npublic class Interfaces : System.Collections.Generic.IEnumerable<System.Type>, System.Collections.IEnumerable\n{\n    public Interfaces() { }\n    public int Count { get; }\n    public void Add(System.Type type) { }\n    public void Add<TInterface>()\n        where TInterface : GraphQL.Types.IInterfaceGraphType { }\n    public bool Contains(System.Type type) { }\n    public System.Collections.Generic.IEnumerator<System.Type> GetEnumerator() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Keys with DataLoader in C#\nDESCRIPTION: Extension methods for loading multiple keys at once with a DataLoader. These methods return DataLoaderResult objects representing the asynchronous operation with the loaded data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<T[]> LoadAsync<TKey, T>(this GraphQL.DataLoader.IDataLoader<TKey, T> dataLoader, System.Collections.Generic.IEnumerable<TKey> keys) { }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DataLoader.IDataLoaderResult<T[]> LoadAsync<TKey, T>(this GraphQL.DataLoader.IDataLoader<TKey, T> dataLoader, params TKey[] keys) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Input Object Deserializer in C#\nDESCRIPTION: Example showing how to create a custom input object deserializer by overriding ParseDictionary method in an InputObjectGraphType. Demonstrates field value manipulation and default value handling.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HumanInputType : InputObjectGraphType\n{\n    public HumanInputType()\n    {\n        Name = \"HumanInput\";\n        Field<NonNullGraphType<StringGraphType>>(\"name\");\n        Field<StringGraphType>(\"homePlanet\");\n    }\n\n    public override object ParseDictionary(IDictionary<string, object> value)\n    {\n        return new Human\n        {\n            Name = ((string)value[\"name\"]).ToUpper(),\n            HomePlanet = value.TryGetValue(\"homePlanet\", out var homePlanet) ? (string)homePlanet : \"Unknown\",\n            Id = null,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ParallelExecutionStrategy Class\nDESCRIPTION: Execution strategy that executes GraphQL queries with parallel execution of fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_91\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParallelExecutionStrategy : GraphQL.Execution.ExecutionStrategy\n    {\n        public ParallelExecutionStrategy() { }\n        public static GraphQL.Execution.ParallelExecutionStrategy Instance { get; }\n        public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Apollo Link Imports\nDESCRIPTION: A complete GraphQL schema definition that uses Apollo link directives to import federation capabilities. It defines the schema structure, link directive, Import scalar, link__Purpose enum, and a simple Query type with a dummy field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.4.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\", \"Import\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\nscalar Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeInfo Validation Class\nDESCRIPTION: Implementation of a type information visitor that tracks schema type information during validation traversal.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_224\n\nLANGUAGE: C#\nCODE:\n```\npublic class TypeInfo : GraphQL.Validation.INodeVisitor\n{\n    public TypeInfo(GraphQL.Types.ISchema schema) { }\n    public void Clear() { }\n    public System.Threading.Tasks.ValueTask EnterAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }\n    public GraphQLParser.AST.ASTNode? GetAncestor(int index) { }\n    public GraphQL.Types.QueryArgument? GetArgument() { }\n    public GraphQL.Types.Directive? GetDirective() { }\n    public GraphQL.Types.FieldType? GetFieldDef(int index = 0) { }\n    public GraphQL.Types.IGraphType? GetInputType(int index = 0) { }\n    public GraphQL.Types.IGraphType? GetLastType(int index = 0) { }\n    public GraphQL.Types.IGraphType? GetParentType(int index = 0) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IdGraphType Scalar in GraphQL.NET\nDESCRIPTION: Implementation of the ID scalar type in GraphQL. It provides methods for parsing and serializing ID values, with support for various input formats.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_167\n\nLANGUAGE: C#\nCODE:\n```\npublic class IdGraphType : GraphQL.Types.ScalarGraphType\n{\n    public IdGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Execution Strategy in C#\nDESCRIPTION: Implementation of subscription execution strategy for GraphQL.NET with methods for handling execution flow and error processing. Includes base class implementation and core subscription handling logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_97\n\nLANGUAGE: C#\nCODE:\n```\npublic class SubscriptionExecutionStrategy : GraphQL.Execution.ExecutionStrategy\n{\n    public SubscriptionExecutionStrategy() { }\n    public SubscriptionExecutionStrategy(GraphQL.Execution.IExecutionStrategy baseExecutionStrategy) { }\n    public static GraphQL.Execution.SubscriptionExecutionStrategy Instance { get; }\n    protected GraphQL.Execution.ExecutionNode BuildSubscriptionExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }\n    protected virtual GraphQL.Execution.ExecutionContext CloneExecutionContext(GraphQL.Execution.ExecutionContext context, System.Threading.CancellationToken token) { }\n    public override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }\n    public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }\n    protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> HandleExceptionAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception exception, string defaultMessage) { }\n    protected virtual System.Threading.Tasks.ValueTask<GraphQL.ExecutionResult> ProcessDataAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, object? value) { }\n    protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> ProcessErrorAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception exception) { }\n    protected virtual System.Threading.Tasks.Task<System.IObservable<GraphQL.ExecutionResult>?> ResolveResponseStreamAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL020 Warnings in C#\nDESCRIPTION: Example showing how to suppress GQL020 warnings using preprocessor directives in C#.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql020.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL020\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL020\n```\n\n----------------------------------------\n\nTITLE: Validator Delegates for Input Validation in GraphQL.NET\nDESCRIPTION: Examples of using Validator delegates to validate input values during the validation phase. Shows validation for string length, age minimum, and password complexity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// for an input object graph type\nField(x => x.FirstName)\n    .Validate(value =>\n    {\n        if (((string)value).Length >= 10)\n            throw new ArgumentException(\"Length must be less than 10 characters.\");\n    });\nField(x => x.Age)\n    .Validate(value =>\n    {\n        if ((int)value < 18)\n            throw new ArgumentException(\"Age must be 18 or older.\");\n    });\nField(x => x.Password)\n    .Validate(value =>\n    {\n        VerifyPasswordComplexity((string)value);\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Argument Validation in GraphQL.NET Field Definition\nDESCRIPTION: Shows how to add custom argument validation to a field using the ValidateArguments delegate. Validates that at least one of two string arguments is provided.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nField<string>(\"example\")\n    .Argument<string>(\"str1\", true)\n    .Argument<string>(\"str2\", true)\n    .ValidateArguments(ctx =>\n    {\n        var str1 = ctx.GetArgument<string>(\"str1\");\n        var str2 = ctx.GetArgument<string>(\"str2\");\n        if (str1 == null && str2 == null)\n            throw new ValidationError(\"Must provide str1 or str2\");\n    });\n```\n\n----------------------------------------\n\nTITLE: GraphQL Validation Attributes Implementation in C#\nDESCRIPTION: Implements validation attributes for GraphQL fields and arguments. Allows specifying validation methods and types for runtime validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method)]\npublic sealed class ValidateArgumentsAttribute : GraphQL.GraphQLAttribute\n{\n    public ValidateArgumentsAttribute(string validationMethodName) { }\n    public ValidateArgumentsAttribute(System.Type validationType) { }\n    public ValidateArgumentsAttribute(System.Type validationType, string validationMethodName) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadonlyResolveFieldContext in GraphQL.NET\nDESCRIPTION: A read-only implementation of IResolveFieldContext for field resolution in GraphQL. Provides access to execution context, arguments, and other information needed during field resolution without allowing modifications.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReadonlyResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object?>\n{\n    public ReadonlyResolveFieldContext(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }\n    public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }\n    public System.Threading.CancellationToken CancellationToken { get; }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resolved Type Provider Interface\nDESCRIPTION: This interface defines how GraphQL types can provide their resolved type information for the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_169\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideResolvedType\n{\n    GraphQL.Types.IGraphType? ResolvedType { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Print Options for GraphQL Schema Generation\nDESCRIPTION: Class extending SDL printer options to configure how GraphQL schemas are printed. Controls inclusion of deprecation reasons, descriptions, federation types, and imported definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_192\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PrintOptions : GraphQLParser.Visitors.SDLPrinterOptions\n{\n    public PrintOptions() { }\n    public bool IncludeDeprecationReasons { get; set; }\n    public bool IncludeDescriptions { get; set; }\n    public bool IncludeFederationTypes { get; set; }\n    public bool IncludeImportedDefinitions { get; set; }\n    public System.StringComparison? StringComparison { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Autofac Container Configuration\nDESCRIPTION: Configuration example for Autofac container showing registration of FuncServiceProvider for GraphQL.NET schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void Load(ContainerBuilder builder)\n{\n    builder\n      .Register(c => new FuncServiceProvider(c.Resolve<IComponentContext>().Resolve))\n      .As<IServiceProvider>()\n      .InstancePerDependency();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Override Attribute for GraphQL.NET Federation\nDESCRIPTION: Attribute for marking fields that override fields from another service in a federation setup, specifying the source service the field is overriding from.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_106\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]\npublic class OverrideAttribute : GraphQL.GraphQLAttribute\n{\n    public OverrideAttribute(string from) { }\n    public string From { get; }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field<TReturnType> with Inferred Graph Types\nDESCRIPTION: Examples of using the new Field<TReturnType> method overloads which automatically infer the graph type from the CLR type, simplifying field definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nField<int>(\"test\")        // by default assumes not-null\n    .Resolve(_ => 123);\n\n// or\n\nField<int>(\"test\", true)  // specify true or false to indicate nullability\n    .Resolve(_ => 123);\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Tracing in C#\nDESCRIPTION: Defines classes and extensions for Apollo tracing, which provides detailed timing information for GraphQL query execution. This includes trace data for parsing, validation, and resolution of fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\npublic class ApolloTrace\n{\n    public ApolloTrace(System.DateTime start, double durationMs) { }\n    public long Duration { get; }\n    public System.DateTime EndTime { get; }\n    public GraphQL.Instrumentation.ApolloTrace.ExecutionTrace Execution { get; }\n    public GraphQL.Instrumentation.ApolloTrace.OperationTrace Parsing { get; }\n    public System.DateTime StartTime { get; }\n    public GraphQL.Instrumentation.ApolloTrace.OperationTrace Validation { get; }\n    public int Version { get; }\n    // ... nested classes omitted for brevity\n}\n\npublic static class ApolloTracingExtensions\n{\n    public static GraphQL.Instrumentation.ApolloTrace CreateTrace(GraphQL.Instrumentation.PerfRecord[] perf, System.DateTime start) { }\n    public static void EnrichWithApolloTracing(this GraphQL.ExecutionResult result, System.DateTime start) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation GraphQL Schema with Entity Support\nDESCRIPTION: This GraphQL schema definition implements Apollo Federation v2.0 specifications. It sets up federation directives through @link imports, defines a basic Post entity type with a federation key, and includes the required federation infrastructure types (_entities, _Any, _Entity, _Service).\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.ResolvableEntitiesIdentifiesAliasedKey.NoImported.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.0\") {\n  query: Query\n}\n\ntype Post @federation__key(fields: \"id\") {\n  id: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service!\n}\n\nscalar _Any\n\nunion _Entity = Post\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnumValues class for GraphQL.NET\nDESCRIPTION: Defines the EnumValues class that inherits from EnumValuesBase. It provides methods for managing and querying enum value definitions in a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\npublic class EnumValues : GraphQL.Types.EnumValuesBase\n{\n    public EnumValues() { }\n    public override int Count { get; }\n    public override void Add(GraphQL.Types.EnumValueDefinition value) { }\n    public override GraphQL.Types.EnumValueDefinition? FindByName(GraphQLParser.ROM name) { }\n    public override GraphQL.Types.EnumValueDefinition? FindByValue(object? value) { }\n    public override System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnumerationGraphType Class in C#\nDESCRIPTION: Defines an EnumerationGraphType that extends ScalarGraphType to represent GraphQL enum types. It provides methods for parsing, serializing, and managing enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_151\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EnumerationGraphType : GraphQL.Types.ScalarGraphType\n{\n    public EnumerationGraphType() { }\n    public GraphQL.Types.EnumValuesBase Values { get; }\n    public void Add(GraphQL.Types.EnumValueDefinition value) { }\n    public void Add(string name, object? value, string? description = null, string? deprecationReason = null) { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    protected virtual GraphQL.Types.EnumValuesBase CreateValues() { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutoRegisteringObjectGraphType<TSourceType> Class in C#\nDESCRIPTION: This class extends ObjectGraphType<TSourceType> and provides methods for automatically registering fields and configuring the graph. It includes methods for creating fields, building field types, and retrieving type information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutoRegisteringObjectGraphType<TSourceType> : GraphQL.Types.ObjectGraphType<TSourceType>\n{\n    public AutoRegisteringObjectGraphType() { }\n    public AutoRegisteringObjectGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }\n    protected virtual void ApplyArgumentAttributes(System.Reflection.ParameterInfo parameterInfo, GraphQL.Types.QueryArgument queryArgument) { }\n    protected void BuildFieldType(GraphQL.Types.FieldType fieldType, System.Reflection.MemberInfo memberInfo) { }\n    protected virtual System.Linq.Expressions.LambdaExpression BuildMemberInstanceExpression(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual void ConfigureGraph() { }\n    protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual GraphQL.Types.ArgumentInformation GetArgumentInformation<TParameterType>(GraphQL.Types.FieldType fieldType, System.Reflection.ParameterInfo parameterInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.ParameterInfo parameterInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveDescriptionsVisitor for Schema Cleaning\nDESCRIPTION: Implements a visitor that removes descriptions from a GraphQL AST. It overrides the VisitAsync method to remove description fields from schema definition nodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_217\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class RemoveDescriptionsVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQLParser.Visitors.NullVisitorContext>\n{\n    public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, GraphQLParser.Visitors.NullVisitorContext context) { }\n    public static void Visit(GraphQLParser.AST.ASTNode node) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectExecutionNode Class for Object Types\nDESCRIPTION: Execution node class that represents an object in the GraphQL result. Implements IParentExecutionNode to support child nodes for fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_108\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ObjectExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode\n    {\n        public ObjectExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }\n        public virtual GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; }\n        public GraphQL.Execution.ExecutionNode[]? SubFields { get; set; }\n        public void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }\n        public GraphQL.Types.IObjectGraphType? GetObjectGraphType(GraphQL.Types.ISchema schema) { }\n        public override bool PropagateNull() { }\n        public override object? ToValue() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Impact Calculation\nDESCRIPTION: A sample GraphQL query with nested objects demonstrating how complexity is calculated across multiple levels of depth. Includes a breakdown of impact, multiplier, and total impact calculations at each level.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nquery {            #  impact   multiplier   total impact   child multiplier   depth\n  users {          #    50          1            50                 20          1\n    id             #     1         20            70                             2\n    posts {        #    20         20           470                 20          2\n      id           #     1        400           870                             3\n      comments {   #    20        400          8870                 20          3\n        id         #     1       8000         16870                             4\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Comparison and Filtering in C#\nDESCRIPTION: Implements schema comparison and filtering functionality for GraphQL introspection with support for customizable ordering.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_119\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DefaultSchemaFilter : GraphQL.Introspection.ISchemaFilter\n{\n    protected static readonly System.Threading.Tasks.Task<bool> Allowed;\n    protected static readonly System.Threading.Tasks.Task<bool> Forbidden;\n    public DefaultSchemaFilter() { }\n    public virtual System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument) { }\n    public virtual System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.Directive directive) { }\n    public virtual System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Argument<TArgumentClrType> with Inferred Graph Types\nDESCRIPTION: Examples of using the new Argument<TArgumentClrType> method overloads to define arguments by specifying only the CLR type, with the graph type being inferred.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nField<int>(\"test\")\n    .Argument<string>(\"name\")              // required\n    .Argument<string>(\"description\", true) // optional\n    .Resolve(ctx => {\n        var name = ctx.GetArgument<string>(\"name\");\n        var desc = ctx.GetArgument<string>(\"description\");\n        return 123;\n    });\n```\n\n----------------------------------------\n\nTITLE: Using IDocumentExecuter<> for Schema-Specific Execution in GraphQL.NET\nDESCRIPTION: Shows how to use the new IDocumentExecuter<> interface to execute GraphQL requests against a specific schema without needing to specify the schema in ExecutionOptions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// sample that executes a request against MySchema\nvar executer = serviceProvider.GetRequiredService<IDocumentExecuter<MySchema>>();\nvar options = new ExecutionOptions\n{\n    Query = \"{hero}\",\n    RequestServices = serviceProvider,\n};\nvar result = await executer.ExecuteAsync(options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Metadata Extensions for GraphQL.NET\nDESCRIPTION: Generic extension method for marking any GraphQL type as inaccessible in a federation context, allowing services to hide types from the combined schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_100\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FederationMetadataExtensions\n{\n    public static TMetadataWriter Inaccessible<TMetadataWriter>(this TMetadataWriter graphType)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LongGraphType in C#\nDESCRIPTION: Defines a LongGraphType class that inherits from ScalarGraphType and implements methods for parsing and serializing long values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_180\n\nLANGUAGE: C#\nCODE:\n```\npublic class LongGraphType : GraphQL.Types.ScalarGraphType\n{\n    public LongGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: SerialExecutionStrategy Class\nDESCRIPTION: Execution strategy that executes GraphQL queries with serial (non-parallel) execution of fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_95\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SerialExecutionStrategy : GraphQL.Execution.ExecutionStrategy\n    {\n        public SerialExecutionStrategy() { }\n        public static GraphQL.Execution.SerialExecutionStrategy Instance { get; }\n        public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Fixed Validator Method Implementation in C#\nDESCRIPTION: This code snippet shows the correct implementation of validator methods that satisfy the GQL019 rule requirements with proper static modifiers and access levels.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql019.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [Validator(nameof(Validate))]\n    public string Hello1 { get; set; }\n\n    [Validator(typeof(Validators), nameof(Validators.ValidateValue))]\n    public string Hello2 { get; set; }\n\n    // must be static\n    private static void Validate(object value) => _ = Convert.ToInt32(value);\n}\n\npublic class Validators\n{\n    public static void ValidateValue(object value) => _ = Convert.ToInt32(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Arguments in C#\nDESCRIPTION: Static method in ExecutionHelper that extracts and processes arguments from a GraphQL query, converting them to a dictionary of ArgumentValue objects with proper variable resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\npublic static System.Collections.Generic.Dictionary<string, GraphQL.Execution.ArgumentValue>? GetArguments(GraphQL.Types.QueryArguments? definitionArguments, GraphQLParser.AST.GraphQLArguments? astArguments, GraphQL.Validation.Variables? variables, GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.ASTNode fieldOrFragmentSpread, GraphQLParser.AST.GraphQLDirective? directive) { }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Configuration Extensions in C#\nDESCRIPTION: Extension methods for configuring GraphQL schema including mutations, subscriptions, and timeout settings. Provides methods to set execution timeouts and handle timeout scenarios.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.IConfigureAutoSchema WithMutation<TMutationClrType>(this GraphQL.IConfigureAutoSchema builder) { }\npublic static GraphQL.IConfigureAutoSchema WithSubscription<TSubscriptionClrType>(this GraphQL.IConfigureAutoSchema builder) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing generic EnumerationGraphType<TEnum> class for GraphQL.NET\nDESCRIPTION: Defines a generic implementation of EnumerationGraphType for strongly-typed enum handling in GraphQL schemas. It provides type-safe enum operations for specific enum types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_146\n\nLANGUAGE: C#\nCODE:\n```\npublic class EnumerationGraphType<TEnum> : GraphQL.Types.EnumerationGraphType\n    where TEnum : System.Enum\n{\n    public EnumerationGraphType() { }\n    public override bool CanParseValue(object? value) { }\n    protected virtual string ChangeEnumCase(string val) { }\n    protected override GraphQL.Types.EnumValuesBase CreateValues() { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryArgumentExtensions in GraphQL.NET\nDESCRIPTION: Extension methods for QueryArgument to provide value parsing and validation capabilities. Allows for configuring custom parsing and validation logic for GraphQL query arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic static class QueryArgumentExtensions\n{\n    public static GraphQL.Types.QueryArgument ParseValue(this GraphQL.Types.QueryArgument argument, System.Func<object, object> parseValue) { }\n    public static GraphQL.Types.QueryArgument Validate(this GraphQL.Types.QueryArgument argument, System.Action<object> validator) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Obsolete FederatedSchemaBuilder Class\nDESCRIPTION: Defines the deprecated FederatedSchemaBuilder class that extends SchemaBuilder with federation capabilities. Users are advised to use SchemaBuilder with graphQlBuilder.AddFederation() instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_209\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use SchemaBuilder with graphQlBuilder.AddFederation() instead. This class \" +\n    \"will be removed in v9.\")]\npublic class FederatedSchemaBuilder : GraphQL.Utilities.SchemaBuilder\n{\n    public FederatedSchemaBuilder() { }\n    public override GraphQL.Types.Schema Build(string typeDefinitions) { }\n    protected override void PreConfigure(GraphQL.Types.Schema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectExtensions in C#\nDESCRIPTION: ObjectExtensions is a static class that provides extension methods for object manipulation and conversion in the context of GraphQL types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ObjectExtensions\n{\n    public static System.Func<System.Collections.Generic.IDictionary<string, object?>, object> CompileToObject([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)] System.Type sourceType, GraphQL.Types.IInputObjectGraphType graphType) { }\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"Recursively converts propertyValue to fieldType.\")]\n    public static object? GetPropertyValue(this object? propertyValue, System.Type fieldType, GraphQL.Types.IGraphType mappedType) { }\n    public static bool IsDefinedEnumValue(System.Type type, object? value) { }\n    public static object ToObject(this System.Collections.Generic.IDictionary<string, object?> source, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)] System.Type type, GraphQL.Types.IGraphType mappedType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SelfActivatingServiceProvider in ASP.NET Core\nDESCRIPTION: Shows how to use the SelfActivatingServiceProvider from GraphQL.MicrosoftDI package to automatically register graph types without manual registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton<ISchema, StarWarsSchema>(services => new StarWarsSchema(new SelfActivatingServiceProvider(services)));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing INode Interface for AST in C#\nDESCRIPTION: Shows the core interface that defines nodes in the GraphQL Abstract Syntax Tree. INode provides access to child nodes, source location information, and node comparison capability.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/v0_8_0.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface INode\n{\n    IEnumerable<INode> Children { get; }\n\n    SourceLocation SourceLocation { get; }\n\n    bool IsEqualTo(INode node);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IErrorInfoProvider Interface for Error Formatting\nDESCRIPTION: Interface that defines how execution errors should be formatted and what information should be included in the GraphQL response.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_96\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IErrorInfoProvider\n    {\n        GraphQL.Execution.ErrorInfo GetInfo(GraphQL.ExecutionError executionError);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Directives in GraphQL Schema\nDESCRIPTION: Core federation directives for implementing GraphQL Federation architecture. Includes directives for extending interfaces/objects, marking external fields, defining entity keys, and specifying field dependencies.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationTypeFirst.1.0.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @provides(fields: FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: FieldSet!) on FIELD_DEFINITION\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation GraphQL Schema Definition\nDESCRIPTION: A GraphQL schema definition using Apollo Federation v2.7. It imports Federation directives and defines a schema with Post and Query types. The schema includes the required _service field for Federation compatibility.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.7.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.7\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__interfaceObject on OBJECT\n\ndirective @federation__policy(policies: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__requiresScopes(scopes: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!, label: String) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQLClrInputTypeReference<T> and GraphQLClrOutputTypeReference<T> for GraphQL.NET\nDESCRIPTION: Defines sealed classes for input and output type references in GraphQL.NET. These classes are used to create type-safe references to CLR types in GraphQL schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_149\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class GraphQLClrInputTypeReference<T> : GraphQL.Types.InputObjectGraphType { }\n\npublic sealed class GraphQLClrOutputTypeReference<T> : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }\n```\n\n----------------------------------------\n\nTITLE: IProvideMetadata Interface Definition in C#\nDESCRIPTION: Definition of the IProvideMetadata interface that allows adding arbitrary metadata to GraphQL objects. It provides methods to get, set and check for metadata using string keys.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IProvideMetadata\n{\n  Dictionary<string, object> Metadata { get; }\n  TType GetMetadata<TType>(string key, TType defaultValue = default);\n  TType GetMetadata<TType>(string key, Func<TType> defaultValueFactory);\n  bool HasMetadata(string key);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootExecutionNode Class for Query Root\nDESCRIPTION: Execution node class that represents the root of the query execution. Extends ObjectExecutionNode to serve as the starting point for execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_112\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RootExecutionNode : GraphQL.Execution.ObjectExecutionNode\n    {\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic InputObjectGraphType in GraphQL.NET\nDESCRIPTION: Generic implementation of input object types in GraphQL. It provides methods for parsing and validating input values, with support for OneOf input objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_170\n\nLANGUAGE: C#\nCODE:\n```\npublic class InputObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInputObjectGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public InputObjectGraphType() { }\n    public bool IsOneOf { get; set; }\n    public override void Initialize(GraphQL.Types.ISchema schema) { }\n    public virtual bool IsValidDefault(object value) { }\n    public virtual object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value) { }\n    public virtual GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing GQL008 Violations in C#\nDESCRIPTION: These code snippets show how to correct the GQL008 violations by using the recommended 'Argument' method overload with a single type parameter and an action to configure the argument.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql008.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"Text\").Argument<StringGraphType>(\n    \"arg\",\n    \"description\",\n    argument => argument.DefaultValue = \"MyDefault\");\n\nField<StringGraphType>(\"Text\").Argument<StringGraphType>(\n    \"arg\",\n    \"description\",\n    argument =>\n    {\n        argument.DeprecationReason = \"Deprecation Reason\";\n        argument.DefaultValue = \"MyDefault\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining AutomaticPersistedQueriesCacheOptions class for GraphQL caching in C#\nDESCRIPTION: Defines a class that inherits from MemoryCacheOptions to configure caching for automatic persisted queries. It adds a SlidingExpiration property to control cache entry expiration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutomaticPersistedQueriesCacheOptions : Microsoft.Extensions.Caching.Memory.MemoryCacheOptions, Microsoft.Extensions.Options.IOptions<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions>\n{\n    public AutomaticPersistedQueriesCacheOptions() { }\n    public System.TimeSpan? SlidingExpiration { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Middleware Configuration Extensions\nDESCRIPTION: Methods for configuring Apollo tracing and custom field middleware in GraphQL.NET execution pipeline.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder UseApolloTracing(this GraphQL.DI.IGraphQLBuilder builder, bool enableMetrics = true) { }\n\npublic static GraphQL.DI.IGraphQLBuilder UseMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, bool install = true, GraphQL.DI.ServiceLifetime serviceLifetime = 2)\n    where TMiddleware : class, GraphQL.Instrumentation.IFieldMiddleware { }\n```\n\n----------------------------------------\n\nTITLE: Customizing AutoRegisteringObjectGraphType Without Methods\nDESCRIPTION: Implementation of a custom AutoRegisteringObjectGraphType that excludes methods from registration, reverting to v4 behavior by filtering registered members.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AutoRegisteringObjectGraphTypeWithoutMethods<T> : AutoRegisteringObjectGraphType<T>\n{\n    public AutoRegisteringObjectGraphTypeWithoutMethods() : base() { }\n    public AutoRegisteringObjectGraphTypeWithoutMethods(params Expression<Func<T, object?>>[]? excludedProperties) : base(excludedProperties) { }\n    protected override IEnumerable<MemberInfo> GetRegisteredMembers() => base.GetRegisteredMembers().Where(x => x is PropertyInfo);\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddTransient(typeof(AutoRegisteringObjectGraphType<>), typeof(AutoRegisteringObjectGraphTypeWithoutMethods<>));\n```\n\n----------------------------------------\n\nTITLE: Directive Application Extensions\nDESCRIPTION: Extensions for applying and managing GraphQL directives. Provides methods to apply directives with various argument configurations and find applied directives on GraphQL types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectivesExtensions\n{\n    public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static GraphQL.Types.AppliedDirective? FindAppliedDirective(this GraphQL.Types.IMetadataReader provider, string name) { }\n    // Additional methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlappingFieldsCanBeMerged Validation Rule in C#\nDESCRIPTION: Class that validates that fields can be merged without conflicts in a GraphQL query. Includes nested classes for tracking conflicts and conflict reasons.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_234\n\nLANGUAGE: C#\nCODE:\n```\npublic class OverlappingFieldsCanBeMerged : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor will be removed in v9.\")]\n    public OverlappingFieldsCanBeMerged() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    public class Conflict\n    {\n        public Conflict() { }\n        public System.Collections.Generic.List<GraphQLParser.AST.ISelectionNode> FieldsLeft { get; set; }\n        public System.Collections.Generic.List<GraphQLParser.AST.ISelectionNode> FieldsRight { get; set; }\n        public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason Reason { get; set; }\n    }\n    public class ConflictReason\n    {\n        public ConflictReason() { }\n        public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message Message { get; set; }\n        public string Name { get; set; }\n    }\n    public class Message\n    {\n        public Message() { }\n        public string? Msg { get; set; }\n        public System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason>? Msgs { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL012 Rule Severity in .editorconfig\nDESCRIPTION: This snippet demonstrates how to disable the GQL012 rule for a file, folder, or project by setting its severity to 'none' in the configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql012.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL012.severity = none\n```\n\n----------------------------------------\n\nTITLE: Implementing MemberResolver for GraphQL.NET\nDESCRIPTION: This class implements the MemberResolver which is used to resolve fields based on property or method information. It includes methods for building field resolvers and asynchronously resolving fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\npublic class MemberResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public MemberResolver(System.Reflection.PropertyInfo propertyInfo, System.Linq.Expressions.LambdaExpression? instanceExpression) { }\n    public MemberResolver(System.Reflection.MethodInfo methodInfo, System.Linq.Expressions.LambdaExpression? instanceExpression, System.Collections.Generic.IList<System.Linq.Expressions.LambdaExpression> methodArgumentExpressions) { }\n    protected virtual System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<object?>> BuildFieldResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }\n    public virtual System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Constructor Attribute in C#\nDESCRIPTION: Defines an attribute that can be applied to constructors to mark them for use with GraphQL. This attribute helps GraphQL.NET identify which constructor to use when instantiating types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Constructor, AllowMultiple=false)]\npublic class GraphQLConstructorAttribute : System.Attribute\n{\n    public GraphQLConstructorAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry in GraphQL.NET\nDESCRIPTION: Classes for configuring and providing telemetry functionality in GraphQL.NET applications, allowing for tracing and monitoring of GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_130\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GraphQLTelemetryOptions\n{\n    public GraphQLTelemetryOptions() { }\n    public System.Action<System.Diagnostics.Activity, GraphQL.ExecutionOptions, GraphQL.Types.ISchema, GraphQLParser.AST.GraphQLDocument, GraphQLParser.AST.GraphQLOperationDefinition> EnrichWithDocument { get; set; }\n    public System.Action<System.Diagnostics.Activity, System.Exception> EnrichWithException { get; set; }\n    public System.Action<System.Diagnostics.Activity, GraphQL.ExecutionOptions> EnrichWithExecutionOptions { get; set; }\n    public System.Action<System.Diagnostics.Activity, GraphQL.ExecutionOptions, GraphQL.ExecutionResult> EnrichWithExecutionResult { get; set; }\n    public System.Func<GraphQL.ExecutionOptions, bool> Filter { get; set; }\n    public bool RecordDocument { get; set; }\n    public bool RecordException { get; set; }\n    public System.Func<GraphQL.ExecutionOptions, string?> SanitizeDocument { get; set; }\n}\n\npublic class GraphQLTelemetryProvider : GraphQL.DI.IConfigureExecution\n{\n    public GraphQLTelemetryProvider(GraphQL.Telemetry.GraphQLTelemetryOptions options) { }\n    public virtual float SortOrder { get; }\n    protected static System.Diagnostics.ActivitySource ActivitySource { get; }\n    public static string SourceName { get; }\n    public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }\n    protected virtual System.Threading.Tasks.Task OnExceptionAsync(System.Diagnostics.Activity activity, System.Exception ex) { }\n    protected virtual System.Threading.Tasks.Task SetInitialTagsAsync(System.Diagnostics.Activity activity, GraphQL.ExecutionOptions options) { }\n    protected virtual System.Threading.Tasks.Task SetOperationTagsAsync(System.Diagnostics.Activity activity, GraphQL.ExecutionOptions options, GraphQL.Types.ISchema schema, GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.GraphQLOperationDefinition operation) { }\n    protected virtual System.Threading.Tasks.Task SetResultTagsAsync(System.Diagnostics.Activity activity, GraphQL.ExecutionOptions executionOptions, GraphQL.ExecutionResult result) { }\n    protected virtual System.Diagnostics.Activity? StartActivity(GraphQL.ExecutionOptions options) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Null Reference Type Behavior in C#\nDESCRIPTION: Shows how to disable automatic field nullability inference from Null Reference Types annotations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_57\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalSwitches.InferFieldNullabilityFromNRTAnnotations = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Service Provider in C#\nDESCRIPTION: Default implementation of IServiceProvider that uses Activator.CreateInstance to resolve types. This implementation requires objects to have public parameterless constructors.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class DefaultServiceProvider : IServiceProvider\n{\n    public object GetService(Type serviceType)\n    {\n        if (serviceType == null)\n            throw new ArgumentNullException(nameof(serviceType));\n\n        try\n        {\n            return Activator.CreateInstance(serviceType);\n        }\n        catch (Exception exception)\n        {\n            throw new Exception($\"Failed to call Activator.CreateInstance. Type: {serviceType.FullName}\", exception);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDocumentValidator Interface in C#\nDESCRIPTION: Specifies the IDocumentValidator interface with a single method for asynchronous document validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_212\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDocumentValidator\n{\n    System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(in GraphQL.Validation.ValidationOptions options);\n}\n```\n\n----------------------------------------\n\nTITLE: IExecutionStrategySelector Interface\nDESCRIPTION: Interface for selecting the appropriate execution strategy for a given execution context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_82\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionStrategySelector\n    {\n        GraphQL.Execution.IExecutionStrategy Select(GraphQL.Execution.ExecutionContext context);\n    }\n```\n\n----------------------------------------\n\nTITLE: Schema Verification Testing in GraphQL.NET\nDESCRIPTION: Provides an example of how to implement schema verification testing to ensure schema consistency during migration using Shouldly for assertions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_62\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void VerifyIntrospection()\n{\n    var services = new ServiceCollection();\n    var startup = new Startup(new ConfigurationBuilder().Build());\n    startup.ConfigureServices(services);\n    var provider = services.BuildServiceProvider();\n\n    var schema = provider.GetRequiredService<ISchema>();\n    schema.Initialize();\n    var sdl = schema.Print(new() { StringComparison = StringComparison.OrdinalIgnoreCase });\n\n    sdl.ShouldMatchApproved(o => o.NoDiff().WithFileExtension(\"graphql\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SourceStreamMethodResolver for GraphQL.NET\nDESCRIPTION: This class extends MemberResolver and implements ISourceStreamResolver. It provides methods for building field resolvers and source stream resolvers, as well as resolving streams asynchronously.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_130\n\nLANGUAGE: C#\nCODE:\n```\npublic class SourceStreamMethodResolver : GraphQL.Resolvers.MemberResolver, GraphQL.Resolvers.ISourceStreamResolver\n{\n    public SourceStreamMethodResolver(System.Reflection.MethodInfo methodInfo, System.Linq.Expressions.LambdaExpression instanceExpression, System.Collections.Generic.IList<System.Linq.Expressions.LambdaExpression> methodArgumentExpressions) { }\n    protected override System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<object?>> BuildFieldResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }\n    protected virtual System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<System.IObservable<object?>>> BuildSourceStreamResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }\n    public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveStreamAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Vector3 to Structured Object in GraphQL.NET\nDESCRIPTION: Implements the Serialize method for Vector3Type to convert Vector3 instances into structured objects with x, y, and z properties. This allows returning structured JSON data in GraphQL responses.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// In Vector3Type\n\npublic override object? Serialize(object? value)\n{\n    if (value == null)\n        return null;\n\n    if (value is Vector3 vector3)\n    {\n        return new\n        {\n            x = vector3.X,\n            y = vector3.Y,\n            z = vector3.Z\n        };\n    }\n\n    return ThrowSerializationError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Resolver Base Class for GraphQL.NET\nDESCRIPTION: Abstract base class for federation resolvers that provides common functionality for parsing entity representations and matching entity keys. Enables custom entity resolution logic in federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_112\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class FederationResolverBase : GraphQL.Federation.Resolvers.IFederationResolver\n{\n    protected FederationResolverBase() { }\n    public abstract System.Type SourceType { get; }\n    public virtual bool MatchKeys(System.Collections.Generic.IDictionary<string, object?> representation) { }\n    public object ParseRepresentation(GraphQL.Types.IComplexGraphType graphType, System.Collections.Generic.IDictionary<string, object?> representation) { }\n    public abstract System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IComplexGraphType graphType, object parsedRepresentation);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pet Union Type in GraphQL Schema\nDESCRIPTION: This snippet defines a union type Pet that can be either a Cat or a Dog, allowing for polymorphic queries on animals.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.Defaults.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"Cats with dogs\"\nunion Pet = Cat | Dog\n```\n\n----------------------------------------\n\nTITLE: Implementing GuidGraphType class for GraphQL.NET\nDESCRIPTION: Defines the GuidGraphType class that represents GUID values in GraphQL schemas. It provides methods for parsing, serializing, and validating GUID values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_152\n\nLANGUAGE: C#\nCODE:\n```\npublic class GuidGraphType : GraphQL.Types.ScalarGraphType\n{\n    public GuidGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IValidationResult Interface in C#\nDESCRIPTION: Specifies the IValidationResult interface with properties for argument values, directive values, errors, validity status, and variables.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_214\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IValidationResult\n{\n    System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; }\n    System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; }\n    GraphQL.ExecutionErrors Errors { get; }\n    bool IsValid { get; }\n    GraphQL.Validation.Variables? Variables { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Element Enum for GraphQL Elements\nDESCRIPTION: Enum identifying different types of named elements in a GraphQL schema, used for validation and other operations that need to distinguish between element types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_191\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum NamedElement\n{\n    Field = 0,\n    Type = 1,\n    Argument = 2,\n    EnumValue = 3,\n    Directive = 4,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Federation Support with AddFederation Method\nDESCRIPTION: Shows how to set up federation support in a GraphQL schema using the AddFederation method, which configures necessary types and directives for GraphQL Federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema>()\n    .AddFederation(\"2.3\")\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CharacterInterfaceConnection Type for Pagination\nDESCRIPTION: A connection type that supports cursor-based pagination for Character collections, including edges, items, and pagination metadata.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"A connection from an object to a list of objects of type `CharacterInterface`.\"\ntype CharacterInterfaceConnection {\n  \"A list of all of the edges returned in the connection.\"\n  edges: [CharacterInterfaceEdge]\n  \"A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \\\"{ edges { node } }\\\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \\\"{ edges { node } } \\\" version should be used instead.\"\n  items: [Character]\n  \"Information to aid in pagination.\"\n  pageInfo: PageInfo!\n  \"A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \\\"5\\\" as the argument to `first`, then fetch the total count so it could display \\\"5 of 83\\\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`.\"\n  totalCount: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Graph Types in GraphQL.NET\nDESCRIPTION: Example of defining an interface graph type with possible implementing types using the Type<T>() method. This demonstrates the new unified API between unions and interfaces.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_50\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyInterfaceGraphType : InterfaceGraphType\n{\n    public MyInterfaceGraphType()\n    {\n        Type<MyObjectGraphType>();\n        Field<string>(\"Name\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ParseLinkVisitor for Schema Parsing\nDESCRIPTION: Implements a visitor class for parsing link directives in a GraphQL schema. It is used to process '@link' directives for schema stitching and federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_214\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class ParseLinkVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public static GraphQL.Utilities.Visitors.ParseLinkVisitor Instance { get; }\n    public void Run(GraphQL.Types.ISchema schema) { }\n    public override void VisitSchema(GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InterfaceGraphType in GraphQL.NET\nDESCRIPTION: Non-generic implementation of the InterfaceGraphType class. It inherits from the generic version with object as the source type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_172\n\nLANGUAGE: C#\nCODE:\n```\npublic class InterfaceGraphType : GraphQL.Types.InterfaceGraphType<object>\n{\n    public InterfaceGraphType() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from FieldNameConverter to NameConverter in GraphQL.NET v3.0\nDESCRIPTION: Shows how to replace the deprecated ExecutionOptions.FieldNameConverter property with the new NameConverter property. The example demonstrates updating from PascalCaseFieldNameConverter to PascalCaseNameConverter.Instance.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar executer = new DocumentExecuter();\nvar result = executer.ExecuteAsync(options => {\n\n\t...\n\n  //options.FieldNameConverter = new PascalCaseFieldNameConverter();\n  options.NameConverter = PascalCaseNameConverter.Instance;\n});\n```\n\n----------------------------------------\n\nTITLE: Reflection Accessor Interface for GraphQL Property Resolution\nDESCRIPTION: Defines an interface for accessing field, property, and method information via reflection. This is used internally by resolvers to extract values from source objects during GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_127\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IAccessor\n{\n    System.Type DeclaringType { get; }\n    string FieldName { get; }\n    System.Reflection.MethodInfo MethodInfo { get; }\n    System.Reflection.ParameterInfo[]? Parameters { get; }\n    System.Type ReturnType { get; }\n    System.Collections.Generic.IEnumerable<T> GetAttributes<T>()\n        where T : System.Attribute;\n    object? GetValue(object target, object?[]? arguments);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Type with Federation Key\nDESCRIPTION: Defines the Product type with a federation key on the 'id' field. This type includes category, id, and name fields, representing core product information in the catalog.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation2Schema.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Product @key(fields: \"id\") {\n  category: Category!\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining abstract GraphType class for GraphQL.NET\nDESCRIPTION: Creates an abstract base class for graph types in GraphQL.NET. It provides common properties and methods for all graph types, including name, description, and deprecation reason.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_151\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class GraphType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    protected GraphType() { }\n    public string? DeprecationReason { get; set; }\n    public string? Description { get; set; }\n    public bool IsPrivate { get; set; }\n    public string Name { get; set; }\n    protected bool Equals(GraphQL.Types.IGraphType other) { }\n    public override bool Equals(object? obj) { }\n    public override int GetHashCode() { }\n    public virtual void Initialize(GraphQL.Types.ISchema schema) { }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQLAttribute Abstract Class in C#\nDESCRIPTION: Abstract base class for GraphQL attributes that can modify various aspects of GraphQL schemas. It provides methods to modify arguments, enum values, graph types, queries, and field configurations with a specified priority.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=true)]\npublic abstract class GraphQLAttribute : System.Attribute\n{\n    protected GraphQLAttribute() { }\n    public virtual float Priority { get; }\n    public virtual void Modify(GraphQL.Types.ArgumentInformation argumentInformation) { }\n    public virtual void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public virtual void Modify(GraphQL.Types.IGraphType graphType) { }\n    public virtual void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public virtual void Modify(GraphQL.Types.TypeInformation typeInformation) { }\n    public virtual void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public virtual void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public virtual void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n    public virtual void Modify(GraphQL.Types.IGraphType graphType, System.Type sourceType) { }\n    public virtual void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }\n    public virtual void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n    public virtual void Modify<TParameterType>(GraphQL.Types.ArgumentInformation argumentInformation) { }\n    public virtual bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Field Resolution in GraphQL.NET v4 and v5\nDESCRIPTION: Shows the evolution of field resolution in GraphQL.NET from v4 to v5, highlighting the new attribute-based approach that supports dependency injection scoping and better performance.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// v4\n[GraphQLMetadata(\"Droid\")]\nclass DroidType\n{\n    // DI-injected services are always pulled from the root DI provider, so scoped services are not supported\n    private readonly Repository _repo;\n    public DroidType(Repository repo)\n    {\n        _repo = repo;\n    }\n\n    public int Id(Droid source) => source.Id;\n\n    public IEnumerable<Droid> Friends(Droid source) => _repo.FriendsOf(source.Id);\n}\n\n// v5\n[GraphQLMetadata(\"Droid\")]\nclass DroidType\n{\n    // scoped services are supported, so long as ExecutionOptions.RequestServices is set\n    private readonly Repository _repo;\n    public DroidType(Repository repo)\n    {\n        _repo = repo;\n    }\n\n    // requires use of [FromSource]\n    public int Id([FromSource] Droid source) => source.Id;\n\n    public IEnumerable<Droid> Friends([FromSource] Droid source) => _repo.FriendsOf(source.Id);\n}\n\n// v5 alternate\n[GraphQLMetadata(\"Droid\")]\nclass DroidType\n{\n    public int Id([FromSource] Droid source) => source.Id;\n\n    // only inject Repository where needed\n    public IEnumerable<Droid> Friends([FromSource] Droid source, [FromServices] Repository repo) => repo.FriendsOf(source.Id);\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Properties and Methods Implementation in C#\nDESCRIPTION: Core schema class implementation containing properties for query, mutation, subscription and other schema configuration elements. Includes methods for type registration and schema initialization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_181\n\nLANGUAGE: C#\nCODE:\n```\npublic GraphQL.Types.SchemaDirectives Directives { get; }\npublic GraphQL.ExperimentalFeatures Features { get; set; }\npublic GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }\npublic GraphQL.Introspection.ISchemaFilter Filter { get; set; }\npublic bool Initialized { get; }\npublic GraphQL.Types.IObjectGraphType? Mutation { get; set; }\npublic GraphQL.Conversion.INameConverter NameConverter { get; set; }\npublic GraphQL.Types.IObjectGraphType Query { get; set; }\n```\n\n----------------------------------------\n\nTITLE: IDocumentBuilder Interface\nDESCRIPTION: Interface for building GraphQL documents from string input.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_76\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDocumentBuilder\n    {\n        GraphQLParser.AST.GraphQLDocument Build(string body);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ListGraphType in GraphQL.NET\nDESCRIPTION: Implementation of list types in GraphQL. It wraps another GraphQL type to represent a list of that type, with support for type resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_176\n\nLANGUAGE: C#\nCODE:\n```\npublic class ListGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType\n{\n    public ListGraphType(GraphQL.Types.IGraphType type) { }\n    public GraphQL.Types.IGraphType? ResolvedType { get; set; }\n    public virtual System.Type? Type { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Metrics Collection in C#\nDESCRIPTION: Defines a Metrics class for collecting performance metrics during GraphQL query execution. It provides methods for starting, stopping, and recording various performance measurements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_123\n\nLANGUAGE: C#\nCODE:\n```\npublic class Metrics\n{\n    public Metrics(bool enabled = true) { }\n    public bool Enabled { get; }\n    public static GraphQL.Instrumentation.Metrics None { get; }\n    public GraphQL.Instrumentation.PerfRecord[]? Finish() { }\n    public GraphQL.Instrumentation.Metrics SetOperationName(GraphQLParser.ROM name) { }\n    public GraphQL.Instrumentation.Metrics Start(string? operationName) { }\n    public GraphQL.Instrumentation.Metrics.Marker Subject(string category, string? subject, System.Collections.Generic.Dictionary<string, object?>? metadata = null) { }\n    // ... Marker struct omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing with Newtonsoft.Json in GraphQL.NET v3\nDESCRIPTION: Example of executing a GraphQL request using Newtonsoft.Json for JSON serialization and deserialization in v3. This approach requires allowing synchronous IO in ASP.NET Core 3.0+.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Newtonsoft.Json;\n\nprivate static async Task ExecuteAsync(HttpContext context, ISchema schema)\n{\n    GraphQLRequest request;\n    using (var reader = new StreamReader(context.Request.Body))\n    using (var jsonReader = new JsonTextReader(reader))\n    {\n        var ser = new JsonSerializer();\n        request = ser.Deserialize<GraphQLRequest>(jsonReader);\n    }\n\n    var executer = new DocumentExecuter();\n    var result = await executer.ExecuteAsync(options =>\n    {\n        options.Schema = schema;\n        options.Query = request.Query;\n        options.OperationName = request.OperationName;\n        options.Inputs = request.Variables.ToInputs();\n    });\n\n    context.Response.ContentType = \"application/json\";\n    context.Response.StatusCode = result.Errors?.Any() == true ? (int)HttpStatusCode.BadRequest : (int)HttpStatusCode.OK;\n\n    var writer = new GraphQL.NewtonsoftJson.DocumentWriter();\n    await writer.WriteAsync(context.Response.Body, result);\n}\n\npublic class GraphQLRequest\n{\n    public string OperationName { get; set; }\n    public string Query { get; set; }\n    public Newtonsoft.Json.Linq.JObject Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SourceStreamResolver for GraphQL.NET\nDESCRIPTION: These generic classes implement ISourceStreamResolver for different return types. They provide constructors for synchronous and asynchronous stream resolvers and methods for resolving streams asynchronously.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_131\n\nLANGUAGE: C#\nCODE:\n```\npublic class SourceStreamResolver<TReturnType> : GraphQL.Resolvers.ISourceStreamResolver\n{\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext, System.IObservable<TReturnType?>> sourceStreamResolver) { }\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<System.IObservable<TReturnType?>>> sourceStreamResolver) { }\n    public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n\npublic class SourceStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.ISourceStreamResolver\n{\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.IObservable<TReturnType?>> sourceStreamResolver) { }\n    public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<System.IObservable<TReturnType?>>> sourceStreamResolver) { }\n    public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NameAttribute in C#\nDESCRIPTION: NameAttribute is a class that inherits from GraphQLAttribute and is used to specify custom names for GraphQL elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class NameAttribute : GraphQL.GraphQLAttribute\n{\n    public NameAttribute(string name) { }\n    public string Name { get; set; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Resolver Attribute for GraphQL.NET\nDESCRIPTION: Attribute for marking methods as federation resolvers, enabling entity resolution in a federated graph. Used to customize how reference resolution works for entity types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_102\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method)]\npublic class FederationResolverAttribute : GraphQL.GraphQLAttribute\n{\n    public FederationResolverAttribute() { }\n    public override void Modify(GraphQL.Types.TypeInformation typeInformation) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n    public override bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Request with ExecuteAsync Method\nDESCRIPTION: Virtual method to execute a GraphQL operation and produce an execution result. Acts as a high-level entry point for GraphQL query execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_78\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Array Execution Node Definition in C#\nDESCRIPTION: Defines execution node structure for handling array types in GraphQL queries\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\npublic class ArrayExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode\n{\n    public ArrayExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }\n    public System.Collections.Generic.List<GraphQL.Execution.ExecutionNode>? Items { get; set; }\n    public System.Collections.IEnumerable? SerializedResult { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: StringUtils Utility Class\nDESCRIPTION: Provides string manipulation utilities for GraphQL schema operations, including methods for calculating string distances, creating quoted lists, and generating suggestion lists for similar strings.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_199\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class StringUtils\n{\n    public static int DamerauLevenshteinDistance(string source, string target, int threshold) { }\n    public static string QuotedOrList(System.Collections.Generic.IEnumerable<string> items, int maxLength = 5) { }\n    public static string[] SuggestionList(string input, System.Collections.Generic.IEnumerable<string>? options) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Resolver Implementation in C#\nDESCRIPTION: Defines federation resolver classes and interfaces for handling GraphQL federation including type resolution and representation parsing.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_116\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFederationResolver\n{\n    bool MatchKeys(System.Collections.Generic.IDictionary<string, object?> representation);\n    object ParseRepresentation(GraphQL.Types.IComplexGraphType graphType, System.Collections.Generic.IDictionary<string, object?> representation);\n    System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IComplexGraphType graphType, object parsedRepresentation);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriptions with GraphQL.NET Federation\nDESCRIPTION: Implementation of federation field metadata extensions for GraphQL.NET that add federation-specific directives to fields. These extensions provide methods to mark fields as external, override fields from other services, specify field requirements, and configure shared fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_113\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter External<TMetadataWriter>(this TMetadataWriter fieldType)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Override<TMetadataWriter>(this TMetadataWriter fieldType, string from)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Provides<TMetadataWriter>(this TMetadataWriter fieldType, string[] fields)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Provides<TMetadataWriter>(this TMetadataWriter fieldType, string fields)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string[] fields)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string fields)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Shareable<TMetadataWriter>(this TMetadataWriter graphType)\n    where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationContext Class in C#\nDESCRIPTION: Defines the ValidationContext class which implements IProvideUserContext. It contains various properties and methods for managing the validation context, including document, schema, and error information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_217\n\nLANGUAGE: C#\nCODE:\n```\npublic class ValidationContext : GraphQL.Execution.IProvideUserContext\n{\n    public ValidationContext() { }\n    public System.Collections.Generic.Dictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public System.Collections.Generic.Dictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; set; }\n    public GraphQLParser.AST.GraphQLDocument Document { get; set; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> Errors { get; }\n    public GraphQL.Inputs Extensions { get; set; }\n    public bool HasErrors { get; }\n    public GraphQL.Instrumentation.Metrics Metrics { get; set; }\n    public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }\n    public System.IServiceProvider? RequestServices { get; set; }\n    public GraphQL.Types.ISchema Schema { get; set; }\n    public GraphQL.Validation.TypeInfo TypeInfo { get; set; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }\n    public GraphQL.Inputs Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Implementations in GraphQL Type-First\nDESCRIPTION: Demonstrates how to define GraphQL interfaces that implement other interfaces using the type-first approach. This uses C# interfaces with attributes to define the GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface Node\n{\n    string Id { get; }\n}\n[Implements(typeof(Node))]\npublic interface Character : Node\n{\n    string Name { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Illegal Resolver Usage in GraphQL-dotnet\nDESCRIPTION: Corrected implementation of graph types that previously violated the GQL005 rule, showing how to properly define fields without using resolver methods in non-output graph types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql005.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<User>\n{\n    public MyInputGraphType() =>\n        Field<StringGraphType>(\"Name\");\n}\n\npublic class MyInterfaceGraphType : InterfaceGraphType<Person>\n{\n    public MyInterfaceGraphType(IStore store) =>\n        Field<ListGraphType<NonNullGraphType<PersonGraphType>>>(\"Children\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Cache for Persisted Documents in GraphQL.NET\nDESCRIPTION: Shows how to use the memory cache feature with persisted documents. The UseMemoryCache method from the GraphQL.MemoryCache package enables in-memory caching for document loading.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .UseMemoryCache()\n    .UsePeristedDocuments<MyLoader>(GraphQL.DI.ServiceLifetime.Scoped)\n);\n```\n\n----------------------------------------\n\nTITLE: Type Configuration Classes in C#\nDESCRIPTION: Classes for configuring GraphQL types with metadata, field configurations and type settings\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_207\n\nLANGUAGE: C#\nCODE:\n```\npublic class TypeConfig : GraphQL.Utilities.MetadataProvider\n{\n    public TypeConfig(string name) { }\n    public string Name { get; }\n    public string? Description { get; set; }\n    public GraphQL.Utilities.FieldConfig FieldFor(string fieldName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CharacterConnection Types for Pagination\nDESCRIPTION: Defines connection types for paginated character relationships, including edges, nodes, and page information.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"A connection from an object to a list of objects of type `CharacterInterface`.\"\ntype CharacterInterfaceConnection {\n  \"A list of all of the edges returned in the connection.\"\n  edges: [CharacterInterfaceEdge]\n  \"A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \\\"{ edges { node } }\\\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \\\"{ edges { node } } \\\" version should be used instead.\"\n  items: [Character]\n  \"Information to aid in pagination.\"\n  pageInfo: PageInfo!\n  \"A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \\\"5\\\" as the argument to `first`, then fetch the total count so it could display \\\"5 of 83\\\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`.\"\n  totalCount: Int\n}\n\n\"An edge in a connection from an object to another object of type `CharacterInterface`.\"\ntype CharacterInterfaceEdge {\n  \"A cursor for use in pagination\"\n  cursor: String!\n  \"The item at the end of the edge\"\n  node: Character\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SchemaExtensions for GraphQL.NET\nDESCRIPTION: Extension methods for ISchema to simplify executing GraphQL operations with Newtonsoft.Json serialization. It provides convenient methods for executing GraphQL queries and returning JSON results.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static class SchemaExtensions\n{\n    public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, System.Action<GraphQL.ExecutionOptions> configure) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Attribute in Type-First Schemas in GraphQL.NET\nDESCRIPTION: Example of creating a custom attribute for validation in type-first schemas. Demonstrates implementing a MaxLength validator for string arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// for AutoRegisteringObjectGraphType<MyClass>\n\npublic class MyClass\n{\n    public static string TestMe([MyMaxLength(5)] string value) => value;\n}\n\nprivate class MyMaxLength : GraphQLAttribute\n{\n    private readonly int _maxLength;\n    public MyMaxLength(int maxLength)\n    {\n        _maxLength = maxLength;\n    }\n\n    public override void Modify(ArgumentInformation argumentInformation)\n    {\n        if (argumentInformation.TypeInformation.Type != typeof(string))\n        {\n            throw new InvalidOperationException(\"MyMaxLength can only be used on string arguments.\");\n        }\n    }\n\n    public override void Modify(QueryArgument queryArgument)\n    {\n        queryArgument.Validate(value =>\n        {\n            if (((string)value).Length > _maxLength)\n            {\n                throw new ArgumentException($\"Value is too long. Max length is {_maxLength}.\");\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphiQL Path Configuration\nDESCRIPTION: Configures GraphiQL to be served at a custom URL path instead of the default /ui/graphiql path.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/graphiql.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseGraphQLGraphiQL(\"/my/own/path/to/graphiql\");\n```\n\n----------------------------------------\n\nTITLE: Implementing FieldType class for GraphQL.NET\nDESCRIPTION: Defines the FieldType class that represents fields in GraphQL types. It includes properties for arguments, default values, deprecation reasons, and resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\npublic class FieldType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IFieldType, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType\n{\n    public FieldType() { }\n    public GraphQL.Types.QueryArguments? Arguments { get; set; }\n    public object? DefaultValue { get; set; }\n    public string? DeprecationReason { get; set; }\n    public string? Description { get; set; }\n    public bool IsPrivate { get; set; }\n    public string Name { get; set; }\n    public System.Func<object, object>? Parser { get; set; }\n    public GraphQL.Types.IGraphType? ResolvedType { get; set; }\n    public GraphQL.Resolvers.IFieldResolver? Resolver { get; set; }\n    public GraphQL.Resolvers.ISourceStreamResolver? StreamResolver { get; set; }\n    public System.Type? Type { get; set; }\n    public System.Func<GraphQL.Validation.FieldArgumentsValidationContext, System.Threading.Tasks.ValueTask>? ValidateArguments { get; set; }\n    public System.Action<object>? Validator { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GetFieldDefinition Method in Execution Strategy\nDESCRIPTION: Protected method for retrieving field definitions from a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_63\n\nLANGUAGE: csharp\nCODE:\n```\nprotected GraphQL.Types.FieldType? GetFieldDefinition(GraphQL.Types.ISchema schema, GraphQL.Types.IComplexGraphType parentType, GraphQLParser.AST.GraphQLField field) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing StringExtensions in GraphQL.NET\nDESCRIPTION: Static extension methods for string manipulation in the context of GraphQL naming conventions. These methods provide utilities for converting strings between different case conventions (camel case, pascal case, constant case) and trimming GraphQL type annotations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\npublic static class StringExtensions\n{\n    public static string ToCamelCase(this string s) { }\n    public static string ToConstantCase(this string value) { }\n    public static string ToPascalCase(this string s) { }\n    public static string TrimGraphQLTypes(this string name) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Federated Category Type and Query Extension in GraphQL\nDESCRIPTION: Defines a Category type with ID and name fields, using the Federation @key directive for distributed graph support. Extends the Query type to expose a categories field that returns an array of Category objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample1Tests.Schema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Category @key(fields: \"id\") {\n  id: ID!\n  name: String!\n}\n\nextend type Query {\n  categories: [Category!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Attribute for GraphQL.NET Federation\nDESCRIPTION: Attribute for marking GraphQL types with federation keys, allowing for entity resolution across services. Supports multiple keys per type and configurable resolvability.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_105\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=true)]\npublic class KeyAttribute : GraphQL.GraphQLAttribute\n{\n    public KeyAttribute(string fields) { }\n    public KeyAttribute(params string[] fields) { }\n    public bool Resolvable { get; set; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Reference Resolution Extensions\nDESCRIPTION: Extension methods for resolving references in GraphQL.NET federation using various resolver patterns including data loader, task-based, and direct resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_115\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.ObjectGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TReturnType?>> resolver) { }\npublic static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.ObjectGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\npublic static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.ObjectGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, TReturnType?> resolver) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Attribute in C#\nDESCRIPTION: Attribute class for marking GraphQL fields as scoped. Modifies field types during schema configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method)]\npublic class ScopedAttribute : GraphQL.GraphQLAttribute\n{\n    public ScopedAttribute() { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Correct Field Naming\nDESCRIPTION: Examples of correct field naming patterns that comply with GQL001 by providing names directly in the constructor methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql001.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nField<StringGraphType>(\"Name\");\nConnection<StringGraphType>(\"Name\");\nConnectionBuilder<string>.Create<StringGraphType>(\"Name\");\nConnectionBuilder.Create<StringGraphType, string>(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: Complexity Analysis Extensions\nDESCRIPTION: Extension methods for managing query complexity analysis in GraphQL operations. Provides functionality to set and retrieve complexity impact values and analyze field complexity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ComplexityAnalayzerMetadataExtensions\n{\n    public static System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult>? GetComplexityImpactDelegate(this GraphQL.Types.FieldType provider) { }\n    public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, double impact)\n        where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }\n    // Additional methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Node Result in GraphQL Execution\nDESCRIPTION: Protected virtual method for validating the result of a node's execution. Verifies that the resolved value meets required constraints.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_90\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void ValidateNodeResult(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: ExposeExceptionDetailsMode Enum Definition\nDESCRIPTION: Enum that defines how exception details should be exposed in GraphQL responses.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum ExposeExceptionDetailsMode\n    {\n        Message = 0,\n        Extensions = 1,\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Name Converter Implementation in C#\nDESCRIPTION: Implements name converters for GraphQL fields and arguments with different casing conventions\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\npublic class CamelCaseNameConverter : GraphQL.Conversion.INameConverter\n{\n    public static readonly GraphQL.Conversion.CamelCaseNameConverter Instance;\n    public CamelCaseNameConverter() { }\n    public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }\n    public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Generated Interface Graph Types from CLR Types\nDESCRIPTION: Complete example showing how to set up automatic generation of interface graph types from CLR interface types, including proper implementation of interfaces and type relationships.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddAutoSchema<SampleQuery>()\n    .AddSystemTextJson());\n\npublic class SampleQuery\n{\n    public static IAnimal Find(AnimalType type) => type switch\n    {\n        AnimalType.Cat => Cat(),\n        AnimalType.Dog => Dog(),\n        _ => throw new ArgumentOutOfRangeException(nameof(type)),\n    };\n\n    public static Cat Cat() => new Cat() { Name = \"Fluffy\", Lives = 9 };\n    public static Dog Dog() => new Dog() { Name = \"Shadow\", IsLarge = true };\n}\n\npublic interface IObject\n{\n    [Id] int Id { get; }\n}\n\npublic interface IAnimal : IObject\n{\n    AnimalType Type { get; }\n    string Name { get; }\n}\n\npublic enum AnimalType { Cat, Dog }\n\n[Implements(typeof(IAnimal))]\npublic class Cat : IAnimal\n{\n    [Id] public int Id => 10;\n    public AnimalType Type => AnimalType.Cat;\n    public string Name { get; set; } = null!;\n    public int Lives { get; set; }\n}\n\n[Implements(typeof(IAnimal))]\npublic class Dog : IAnimal\n{\n    [Id] public int Id => 20;\n    public AnimalType Type => AnimalType.Dog;\n    public string Name { get; set; } = null!;\n    public bool IsLarge { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IObjectGraphType Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL object types. It includes properties for type checking and implements interfaces for metadata, naming, and interface implementation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_161\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    System.Func<object, bool>? IsTypeOf { get; set; }\n    bool SkipTypeCheck { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct ValidateArguments Method Implementation Example in C#\nDESCRIPTION: Example showing proper implementation of ValidateArguments methods with correct access modifiers and parameter types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql020.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [ValidateArguments(nameof(Validate))]\n    public string Hello1(string name) => $\"Hello {name}\";\n\n    [ValidateArguments(typeof(Validators), nameof(Validators.ValidateArgs))]\n    public string Hello2(string name) => $\"Greeting {name}\";\n\n    private static ValueTask Validate(FieldArgumentsValidationContext context) => ValueTask.CompletedTask;\n}\n\npublic class Validators\n{\n    public static ValueTask ValidateArgs(FieldArgumentsValidationContext context) => ValueTask.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Type with Custom Directives\nDESCRIPTION: This snippet defines the Query type with multiple fields, each using different imported or custom directives. It demonstrates the usage of the previously defined directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamed.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  field1: String @importedA\n  field10: String @aliasC\n  field11: String @customC__testC\n  field2: String @exampleA__testA\n  field3: String @failB\n  field4: String @importedB\n  field5: String @exampleB__testB\n  field6: String @failB\n  field7: String @importedB\n  field8: String @exampleB__testB\n  field9: String @failB\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing List Coercion for HashSet\nDESCRIPTION: Example of registering custom list coercion providers for HashSet<string> with case-insensitive comparison.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// register for HashSet<string>\nValueConverter.RegisterListConverter<HashSet<string>, string>(\n    values => new HashSet<string>(values, StringComparer.OrdinalIgnoreCase));\n\n// also register for ISet<string>\nValueConverter.RegisterListConverter<ISet<string>, string>(\n    values => new HashSet<string>(values, StringComparer.OrdinalIgnoreCase));\n```\n\n----------------------------------------\n\nTITLE: Defining IValidationRule Interface in C#\nDESCRIPTION: Specifies the IValidationRule interface with methods for getting pre-node, post-node, and variable visitors for validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_215\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IValidationRule\n{\n    System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context);\n    System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context);\n    System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryArgumentExtensions in C#\nDESCRIPTION: QueryArgumentExtensions is a static class that provides extension methods for QueryArgument to add parsing and validation functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\npublic static class QueryArgumentExtensions\n{\n    public static GraphQL.Types.QueryArgument ParseValue(this GraphQL.Types.QueryArgument argument, System.Func<object, object> parseValue) { }\n    public static GraphQL.Types.QueryArgument Validate(this GraphQL.Types.QueryArgument argument, System.Action<object> validator) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema without Imported Types\nDESCRIPTION: Simplified version of the GraphQL schema excluding imported types and related definitions. Contains only the basic schema structure with Apollo Federation link, a custom directive, and essential type definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.4.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FixPrecisionConverter for GraphQL.NET\nDESCRIPTION: A Newtonsoft.Json converter for handling precision in numeric values. It can be configured to handle decimal, double, and float types with specific precision requirements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class FixPrecisionConverter : Newtonsoft.Json.JsonConverter\n{\n    public FixPrecisionConverter(bool forDecimal, bool forDouble, bool forFloat) { }\n    public override bool CanRead { get; }\n    public override bool CanConvert(System.Type objType) { }\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter jWriter, object? value, Newtonsoft.Json.JsonSerializer jSerializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Name Validation for GraphQL Elements\nDESCRIPTION: Static utility class providing methods to validate names of GraphQL elements like fields, types, and directives. It ensures that names conform to the GraphQL specification rules.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_190\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class NameValidator\n{\n    public static void ValidateDefault(string name, GraphQL.Utilities.NamedElement type) { }\n    public static void ValidateName(string name, GraphQL.Utilities.NamedElement type) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Kind Enumeration\nDESCRIPTION: Defines the possible kinds of types in a GraphQL schema including scalar, object, interface, union, enum, input object, list and non-null types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\npublic enum TypeKind\n{\n    [System.ComponentModel.Description(\"Indicates this type is a scalar.\")]\n    SCALAR = 0,\n    [System.ComponentModel.Description(\"Indicates this type is an object. `fields` and `possibleTypes` are valid fields.\")]\n    OBJECT = 1,\n    [System.ComponentModel.Description(\"Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.\")]\n    INTERFACE = 2,\n    [System.ComponentModel.Description(\"Indicates this type is a union. `possibleTypes` is a valid field.\")]\n    UNION = 3,\n    [System.ComponentModel.Description(\"Indicates this type is an enum. `enumValues` is a valid field.\")]\n    ENUM = 4,\n    [System.ComponentModel.Description(\"Indicates this type is an input object. `inputFields` is a valid field.\")]\n    INPUT_OBJECT = 5,\n    [System.ComponentModel.Description(\"Indicates this type is a list. `ofType` is a valid field.\")]\n    LIST = 6,\n    [System.ComponentModel.Description(\"Indicates this type is a non-null. `ofType` is a valid field.\")]\n    NON_NULL = 7\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectGraphType in C#\nDESCRIPTION: Base implementation of GraphQL object types with support for interfaces, type resolution, and field definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_179\n\nLANGUAGE: C#\nCODE:\n```\npublic class ObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public ObjectGraphType() { }\n    public GraphQL.Types.Interfaces Interfaces { get; }\n    public System.Func<object, bool>? IsTypeOf { get; set; }\n    public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }\n    public bool SkipTypeCheck { get; set; }\n    public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }\n    public void Interface(System.Type type) { }\n    public void Interface<TInterface>()\n        where TInterface : GraphQL.Types.IInterfaceGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: DirectivesExtensions for Programmatically Applying GraphQL Directives\nDESCRIPTION: Provides extension methods for programmatically applying, retrieving, and removing GraphQL directives on schema elements. Supports configuring directives with various arguments and querying applied directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class DirectivesExtensions\n{\n    public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, System.Action<GraphQL.Types.AppliedDirective> configure)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, string argumentName, object? argumentValue)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, string argument1Name, object? argument1Value, string argument2Name, object? argument2Value)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static GraphQL.Types.AppliedDirective? FindAppliedDirective(this GraphQL.Types.IMetadataReader provider, string name) { }\n    public static GraphQL.Types.AppliedDirectives? GetAppliedDirectives(this GraphQL.Types.IMetadataReader provider) { }\n    public static bool HasAppliedDirectives(this GraphQL.Types.IMetadataReader provider) { }\n    public static TMetadataProvider RemoveAppliedDirective<TMetadataProvider>(this TMetadataProvider provider, string name)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Imported Directives\nDESCRIPTION: This snippet defines the schema with imported directives using the @link directive. It imports from multiple sources and aliases some imports.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamed.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@importedA\"], url: \"https://spec.example.com/exampleA\") @link(import: [\"@importedB\"], url: \"https://spec.example.com/exampleB/v1.0\") @link(as: \"customC\", import: [{as: \"@aliasC\", name: \"@importedC\"}], url: \"https://spec.example.com/exampleC\") {\n  query: Query\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provides Attribute for GraphQL.NET Federation\nDESCRIPTION: Attribute for specifying fields that a service can provide as part of entity references, optimizing data fetching by indicating which fields are locally resolvable.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_107\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]\npublic class ProvidesAttribute : GraphQL.GraphQLAttribute\n{\n    public ProvidesAttribute(string fields) { }\n    public ProvidesAttribute(params string[] fields) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Types in Schema-First Approach\nDESCRIPTION: Demonstrates different ways to configure enumeration types in a schema-first approach, mapping schema enum types to C# enum types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = Schema.For(definitions, c => {\n    // example 1: define the \"Animal\" schema enumeration type to use the C# type Animal\n    c.Types.Include<Animal>();\n\n    // example 2: define the \"AnimalType\" schema enumeration type to use the C# type Animal\n    c.Types.Include<Animal>(\"AnimalType\");\n\n    // example 3: define the \"Animal\" schema enumeration type to use the C# type Animal\n    c.Types.For(\"Animal\").Type = typeof(Animal);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LightweightCache in C#\nDESCRIPTION: LightweightCache is a generic class that provides caching functionality with various constructors and methods for managing cached items.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\npublic LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }\npublic LightweightCache(System.Func<TKey, TValue> onMissing) { }\npublic LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Func<TKey, TValue> onMissing) { }\npublic int Count { get; }\npublic TValue this[TKey key] { get; set; }\npublic System.Collections.Generic.IEnumerable<TKey> Keys { get; }\npublic System.Func<TKey, TValue> OnMissing { set; }\npublic void Clear() { }\npublic void ClearAll() { }\npublic void Each(System.Action<TValue> action) { }\npublic void Each(System.Action<TKey, TValue> action) { }\npublic bool Exists(System.Predicate<TValue> predicate) { }\npublic void Fill(TKey key, TValue value) { }\npublic void FillDefault(TKey key) { }\npublic TValue? Find(System.Predicate<TValue> predicate) { }\npublic TValue[] GetAll() { }\npublic System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { }\npublic bool Has(TKey key) { }\npublic void Remove(TKey key) { }\npublic bool TryRetrieve(TKey key, out TValue? value) { }\npublic void WithValue(TKey key, System.Action<TValue> action) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom List Converter Factory\nDESCRIPTION: Shows how to implement and register a custom list converter factory for IImmutableList<T>.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ImmutableListConverterFactory : ListConverterFactoryBase\n{\n    public override Func<object?[], object> Create<T>()\n        => list => ImmutableList.CreateRange(list.Cast<T>());\n}\n\nValueConverter.RegisterListConverterFactory(typeof(IImmutableList<>), new ImmutableListConverterFactory());\n```\n\n----------------------------------------\n\nTITLE: Implementing DocumentValidator Class in C#\nDESCRIPTION: Defines the DocumentValidator class which implements the IDocumentValidator interface. It provides a method for asynchronous document validation and includes a static collection of core validation rules.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_210\n\nLANGUAGE: C#\nCODE:\n```\npublic class DocumentValidator : GraphQL.Validation.IDocumentValidator\n{\n    public static readonly System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> CoreRules;\n    public DocumentValidator() { }\n    public System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(in GraphQL.Validation.ValidationOptions options) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HumanInput Type for Mutations\nDESCRIPTION: An input type for creating new Human characters, requiring a name and optionally specifying a home planet.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ninput HumanInput {\n  homePlanet: String\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: ExecutionStrategyRegistration Class Declaration\nDESCRIPTION: A class that registers execution strategies for specific operation types with IEquatable implementation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_73\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExecutionStrategyRegistration : System.IEquatable<GraphQL.Execution.ExecutionStrategyRegistration>\n    {\n        public ExecutionStrategyRegistration(GraphQL.Execution.IExecutionStrategy Strategy, GraphQLParser.AST.OperationType Operation) { }\n        public GraphQLParser.AST.OperationType Operation { get; init; }\n        public GraphQL.Execution.IExecutionStrategy Strategy { get; init; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation Schema Definition with Directives\nDESCRIPTION: Complete GraphQL schema definition incorporating Apollo Federation v2.5 features. Includes schema composition directives, federation-specific scalars, and basic type definitions for Post and Query types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.5.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.5\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__interfaceObject on OBJECT\n\ndirective @federation__requiresScopes(scopes: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INamedType Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL types that have a name. It provides a required Name property for named types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_160\n\nLANGUAGE: C#\nCODE:\n```\npublic interface INamedType\n{\n    string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Updated Scalar Type in C#\nDESCRIPTION: Demonstrates the new pattern for implementing scalar types in GraphQL.NET v0.8.0, using FloatGraphType as an example with ParseValue, ParseLiteral, and Serialize methods replacing the former Coerce method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/v0_8_0.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FloatGraphType : ScalarGraphType\n{\n    public FloatGraphType()\n    {\n        Name = \"Float\";\n    }\n\n    public override object Serialize(object value)\n    {\n        return ParseValue(value);\n    }\n\n    public override object ParseValue(object value)\n    {\n        double result;\n        if (double.TryParse(value?.ToString() ?? string.Empty, out result))\n        {\n            return result;\n        }\n        return null;\n    }\n\n    public override object ParseLiteral(IValue value)\n    {\n        var floatVal = value as FloatValue;\n        return floatVal?.Value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Configuration Properties\nDESCRIPTION: Static configuration properties for GraphQL.NET including root query type requirements, type naming conventions and tracking settings.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool RequireRootQueryType { get; set; }\npublic static bool TrackGraphTypeInitialization { get; set; }\npublic static bool UseDeclaringTypeNames { get; set; }\npublic static bool UseLegacyTypeNaming { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectExtensions in GraphQL.NET\nDESCRIPTION: Extension methods for object handling and conversion in GraphQL.NET. Provides utilities for converting between GraphQL and .NET objects, accessing properties, and validating enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ObjectExtensions\n{\n    public static System.Func<System.Collections.Generic.IDictionary<string, object?>, object> CompileToObject(System.Type sourceType, GraphQL.Types.IInputObjectGraphType graphType) { }\n    public static object? GetPropertyValue(this object? propertyValue, System.Type fieldType, GraphQL.Types.IGraphType mappedType) { }\n    public static bool IsDefinedEnumValue(System.Type type, object? value) { }\n    public static object ToObject(this System.Collections.Generic.IDictionary<string, object?> source, System.Type type, GraphQL.Types.IGraphType mappedType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IProvideResolvedType Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL types that provide resolved type information. It includes a ResolvedType property for type resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_165\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideResolvedType\n{\n    GraphQL.Types.IGraphType? ResolvedType { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Preferred Field Builder Creation Methods in GraphQL.NET\nDESCRIPTION: Protected methods for creating field builders with name and type parameters. These are the preferred methods for creating field builders as they provide more context through the required name parameter.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_140\n\nLANGUAGE: C#\nCODE:\n```\nprotected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(string name, GraphQL.Types.IGraphType type) { }\nprotected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(string name, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing InputsJsonConverter for GraphQL.NET\nDESCRIPTION: A Newtonsoft.Json converter for GraphQL input objects. It handles the serialization and deserialization of inputs to GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class InputsJsonConverter : Newtonsoft.Json.JsonConverter\n{\n    public InputsJsonConverter() { }\n    public override bool CanWrite { get; }\n    public override bool CanConvert(System.Type objectType) { }\n    public override object? ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object? value, Newtonsoft.Json.JsonSerializer serializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: ShouldIncludeNode Generic Method\nDESCRIPTION: Protected virtual method that determines if a node should be included based on directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_71\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual bool ShouldIncludeNode<TASTNode>(GraphQL.Execution.ExecutionContext context, TASTNode node)\n            where TASTNode : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode { }\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataAttribute in GraphQL.NET\nDESCRIPTION: Attribute for attaching metadata to GraphQL types, fields, and arguments. Can be applied to various C# elements to add key-value metadata that affects schema generation and behavior.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter, AllowMultiple=true)]\npublic class MetadataAttribute : GraphQL.GraphQLAttribute\n{\n    public MetadataAttribute(string key, object? value) { }\n    public string Key { get; set; }\n    public object? Value { get; set; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Author Directive Definition in GraphQL SDL\nDESCRIPTION: The SDL representation of the AuthorDirective class, showing how it would appear in a GraphQL schema definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @author(name: String, email: String!) on FIELD_DEFINITION\n```\n\n----------------------------------------\n\nTITLE: Field Middleware Implementation in C#\nDESCRIPTION: Defines the field middleware infrastructure for processing GraphQL field resolutions with support for middleware chaining.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_118\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFieldMiddleware\n{\n    System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EnumerationGraphType class for GraphQL.NET\nDESCRIPTION: Defines the EnumerationGraphType class that represents enum types in GraphQL schemas. It provides methods for adding, parsing, and serializing enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_145\n\nLANGUAGE: C#\nCODE:\n```\npublic class EnumerationGraphType : GraphQL.Types.ScalarGraphType\n{\n    public EnumerationGraphType() { }\n    public GraphQL.Types.EnumValuesBase Values { get; }\n    public void Add(GraphQL.Types.EnumValueDefinition value) { }\n    public void Add(string name, object? value, string? description = null, string? deprecationReason = null) { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    protected virtual GraphQL.Types.EnumValuesBase CreateValues() { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n    public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft DI GraphQL Builder Extensions\nDESCRIPTION: Extension methods for configuring GraphQL services in Microsoft Dependency Injection container, including subscription strategies and schema registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MicrosoftDIGraphQLBuilderExtensions\n{\n    public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddGraphQL(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<GraphQL.DI.IGraphQLBuilder>? configure) { }\n    public static GraphQL.DI.IGraphQLBuilder AddScopedSubscriptionExecutionStrategy(this GraphQL.DI.IGraphQLBuilder builder, bool serialExecution = true) { }\n    public static GraphQL.DI.IGraphQLBuilder AddSelfActivatingSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n        where TSchema :  class, GraphQL.Types.ISchema { }\n    public static GraphQL.DI.IGraphQLBuilder ValidateServices(this GraphQL.DI.IGraphQLBuilder builder, bool enabled = true) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Field Methods in C#\nDESCRIPTION: Collection of field-related methods for GraphQL type definitions, including async field resolution, subscription handling, and field querying capabilities. Contains several deprecated methods that will be removed in v9.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_148\n\nLANGUAGE: C#\nCODE:\n```\npublic GraphQL.Types.FieldType FieldAsync<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object?>>? resolve = null, string? deprecationReason = null)\n    where TGraphType : GraphQL.Types.IGraphType { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Shareable Attribute for GraphQL.NET Federation\nDESCRIPTION: Attribute for marking fields or types as shareable across services in a federation, allowing multiple services to define the same fields while indicating they can be merged safely.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_109\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=true)]\npublic class ShareableAttribute : GraphQL.GraphQLAttribute\n{\n    public ShareableAttribute() { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL ID Attribute in C#\nDESCRIPTION: Defines an attribute for marking fields or properties as GraphQL ID types. This attribute modifies the type information to use the GraphQL ID scalar type for the annotated member.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]\npublic class IdAttribute : GraphQL.GraphQLAttribute\n{\n    public IdAttribute() { }\n    public override void Modify(GraphQL.Types.TypeInformation typeInformation) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL __InputValue Object Type in JSON Schema\nDESCRIPTION: JSON representation of the __InputValue object type that describes input values for arguments and input object fields. Includes properties for name, description, type, and default value.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"OBJECT\",\n  \"name\": \"__InputValue\",\n  \"description\": \"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.\",\n  \"fields\": [\n    {\n      \"name\": \"name\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"String\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"description\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"type\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"OBJECT\",\n          \"name\": \"__Type\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"defaultValue\",\n      \"description\": \"A GraphQL-formatted string representing the default value for this input value.\",\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    }\n  ],\n  \"inputFields\": null,\n  \"interfaces\": [],\n  \"enumValues\": null,\n  \"possibleTypes\": null,\n  \"isOneOf\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Attribute in C#\nDESCRIPTION: Defines AllowAnonymousAttribute class that extends GraphQLAttribute to handle anonymous access in GraphQL operations. Provides methods to modify field configurations and field types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]\npublic class AllowAnonymousAttribute : GraphQL.GraphQLAttribute\n{\n    public AllowAnonymousAttribute() { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> in C#\nDESCRIPTION: Generic resolver builder class that injects five dependencies from Microsoft DI. Provides methods for defining field resolvers using five injected services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> WithScope() { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Implements Attribute in C#\nDESCRIPTION: Defines an attribute for specifying that a class implements a GraphQL interface. This attribute allows multiple interfaces to be specified for a single class and configures the GraphQL type system accordingly.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Interface, AllowMultiple=true)]\npublic class ImplementsAttribute : GraphQL.GraphQLAttribute\n{\n    public ImplementsAttribute(System.Type type) { }\n    public System.Type InterfaceGraphType { get; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Class with GraphQL Validation Support\nDESCRIPTION: Defines a Message class with properties for storing validation messages and conflict reasons in GraphQL.NET validation system.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_229\n\nLANGUAGE: C#\nCODE:\n```\npublic class Message\n{\n    public Message() { }\n    public string? Msg { get; set; }\n    public System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason>? Msgs { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Precision Converter for Decimal Serialization in GraphQL.NET\nDESCRIPTION: Workaround for the Newtonsoft.Json decimal serialization issue in GraphQL.NET by adding a custom FixPrecisionConverter to the DocumentWriter settings.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nnew NewtonsoftJson.DocumentWriter(settings =>\n{\n    settings.Converters.Add(new NewtonsoftJson.FixPrecisionConverter(true, true, true));\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Filter Interface in C#\nDESCRIPTION: Defines the ISchemaFilter interface for controlling access to GraphQL schema components. Includes methods for filtering types, fields, directives, arguments and enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_124\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISchemaFilter\n{\n    System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument);\n    System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.Directive directive);\n    System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue);\n    System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field);\n    System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQLDocumentBuilder Class Implementation\nDESCRIPTION: A class that implements IDocumentBuilder to build GraphQL documents from string input with configuration options.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_75\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GraphQLDocumentBuilder : GraphQL.Execution.IDocumentBuilder\n    {\n        public GraphQLDocumentBuilder() { }\n        public bool IgnoreComments { get; set; }\n        public bool IgnoreLocations { get; set; }\n        public int? MaxDepth { get; set; }\n        public GraphQLParser.AST.GraphQLDocument Build(string body) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining PossibleTypeAttribute in GraphQL.NET\nDESCRIPTION: Attribute for specifying possible implementation types for a GraphQL interface. Can be applied to interfaces to indicate which object types might implement this interface in the GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple=true)]\npublic class PossibleTypeAttribute : GraphQL.GraphQLAttribute\n{\n    public PossibleTypeAttribute(System.Type type) { }\n    public System.Type ObjectGraphType { get; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Field Resolver with Generic Return Type\nDESCRIPTION: Generic field resolver class that supports both synchronous and asynchronous resolution of GraphQL fields with scoped lifetime. Handles single type parameter for return value.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScopedFieldResolver<TReturnType> : GraphQL.Resolvers.FuncFieldResolver<TReturnType>\n{\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext, TReturnType?> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExposeExceptionDetailsMode Enum for Error Handling\nDESCRIPTION: An enumeration defining how exception details should be exposed in GraphQL responses. Options include showing in the message or extensions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_92\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum ExposeExceptionDetailsMode\n    {\n        Message = 0,\n        Extensions = 1,\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Inputs Class in GraphQL.NET\nDESCRIPTION: A class representing a read-only dictionary of input values for GraphQL operations. Extends ReadOnlyDictionary to provide a strongly-typed container for input values received in GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\npublic class Inputs : System.Collections.ObjectModel.ReadOnlyDictionary<string, object?>\n{\n    public static readonly GraphQL.Inputs Empty;\n    public Inputs(System.Collections.Generic.IDictionary<string, object?> dictionary) { }\n}\n```\n\n----------------------------------------\n\nTITLE: String Extension Methods for GraphQL Type Handling\nDESCRIPTION: Collection of string manipulation methods for working with GraphQL types, including case conversion and type name trimming\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\npublic static class StringExtensions\n{\n    public static string ToCamelCase(this string s) { }\n    public static string ToConstantCase(this string value) { }\n    public static string ToPascalCase(this string s) { }\n    public static string TrimGraphQLTypes(this string name) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParserAttribute in GraphQL.NET\nDESCRIPTION: Attribute for specifying custom parsing logic for GraphQL input values. Can be applied to properties, fields, or parameters to define custom conversion from GraphQL scalar values to .NET types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]\npublic sealed class ParserAttribute : GraphQL.GraphQLAttribute\n{\n    public ParserAttribute(string parserMethodName) { }\n    public ParserAttribute(System.Type parserType) { }\n    public ParserAttribute(System.Type parserType, string parserMethodName) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n}\n```\n\n----------------------------------------\n\nTITLE: NoOperationError Class\nDESCRIPTION: Serializable error class for when no GraphQL operation is provided.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_87\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class NoOperationError : GraphQL.Execution.DocumentError\n    {\n        public NoOperationError() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Input Name Attribute in C#\nDESCRIPTION: Defines an attribute for specifying custom names for input types and fields in GraphQL. This attribute allows customizing the schema naming for input-related elements without changing the underlying code structure.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class InputNameAttribute : GraphQL.GraphQLAttribute\n{\n    public InputNameAttribute(string name) { }\n    public string Name { get; set; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Episode Enum in GraphQL\nDESCRIPTION: Defines an enumeration of Star Wars trilogy episodes with release dates.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"One of the films in the Star Wars Trilogy.\"\nenum Episode {\n  \"Released in 1980.\"\n  EMPIRE\n  \"Released in 1983.\"\n  JEDI\n  \"Released in 1977.\"\n  NEWHOPE\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Enumeration in .NET\nDESCRIPTION: Shows how to define a C# enum that corresponds to the GraphQL Episode enum. Note that the .NET enum uses specific integer values for each member.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum Episodes\n{\n    NEWHOPE = 4,\n    EMPIRE = 5,\n    JEDI = 6\n}\n```\n\n----------------------------------------\n\nTITLE: Obsolete Field Builder Creation Methods in GraphQL.NET\nDESCRIPTION: Obsolete protected methods for creating field builders with different type parameters. These methods will be removed in version 9 and developers are encouraged to use the overloads that accept name as the first argument.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_139\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the overload that accepts the name as the first argument. This method \" +\n            \"will be removed in v9.\")]\nprotected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(GraphQL.Types.IGraphType type) { }\n[System.Obsolete(\"Please use the overload that accepts the name as the first argument. This method \" +\n            \"will be removed in v9.\")]\nprotected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolverBuilder<TSourceType, TReturnType, T1, T2> in C#\nDESCRIPTION: Generic resolver builder class that injects two dependencies from Microsoft DI. Provides methods for constructing field resolvers using two injected services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType, T1, T2>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2> WithScope() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3> WithService<T3>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL __TypeKind Enum in JSON Schema\nDESCRIPTION: JSON representation of the __TypeKind enum which describes the different kinds of types in the GraphQL type system. It defines values like SCALAR, OBJECT, INTERFACE, etc. that categorize GraphQL types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ENUM\",\n  \"name\": \"__TypeKind\",\n  \"description\": \"An enum describing what kind of type a given __Type is.\",\n  \"fields\": null,\n  \"inputFields\": null,\n  \"interfaces\": null,\n  \"enumValues\": [\n    {\n      \"name\": \"SCALAR\",\n      \"description\": \"Indicates this type is a scalar.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"OBJECT\",\n      \"description\": \"Indicates this type is an object. `fields` and `possibleTypes` are valid fields.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"INTERFACE\",\n      \"description\": \"Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"UNION\",\n      \"description\": \"Indicates this type is a union. `possibleTypes` is a valid field.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"ENUM\",\n      \"description\": \"Indicates this type is an enum. `enumValues` is a valid field.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"INPUT_OBJECT\",\n      \"description\": \"Indicates this type is an input object. `inputFields` is a valid field.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"LIST\",\n      \"description\": \"Indicates this type is a list. `ofType` is a valid field.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"NON_NULL\",\n      \"description\": \"Indicates this type is a non-null. `ofType` is a valid field.\",\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    }\n  ],\n  \"possibleTypes\": null,\n  \"isOneOf\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Enumeration Case Converter in GraphQL.NET\nDESCRIPTION: Shows how to create a custom enumeration graph type that converts enum values to camelCase instead of the default CONSTANT_CASE.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CamelCaseEnumerationGraphType<T> : EnumerationGraphType<T> where T : Enum\n{\n    protected override string ChangeEnumCase(string val) => val.ToCamelCase();\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Directive Definition\nDESCRIPTION: Defines the structure of GraphQL directives including name, description, locations, and arguments. Includes deprecated fields for operation, fragment and field locations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"OBJECT\",\n  \"name\": \"__Directive\",\n  \"description\": \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\",\n  \"fields\": [\n    {\n      \"name\": \"name\",\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"ofType\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"String\"\n        }\n      }\n    }\n    // Additional fields omitted for brevity\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Mapping Enum Definition in C#\nDESCRIPTION: Defines enum values for controlling how types are mapped in GraphQL.NET. Specifies modes for built-in scalar mappings, input types, and output types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\npublic enum TypeMappingMode\n{\n    UseBuiltInScalarMappings = 0,\n    InputType = 1,\n    OutputType = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolveFieldContext Class in C#\nDESCRIPTION: Base implementation of the field context class used during GraphQL query resolution. Contains properties for tracking execution state, field information, and context data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object?> {\n    public ResolveFieldContext() { }\n    public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; set; }\n    public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; set; }\n    // ... additional properties\n}\n```\n\n----------------------------------------\n\nTITLE: Printing GraphQL Schema without Imported Definitions\nDESCRIPTION: Shows how to print a schema without including imported definitions by setting the IncludeImportedDefinitions option to false when printing.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nvar sdl = schema.Print(new() { IncludeImportedDefinitions = false });\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Auto-Registering Object Graph Type in GraphQL.NET\nDESCRIPTION: Example of extending AutoRegisteringObjectGraphType to create a custom graph type for a Product class, excluding the LastUpdated field and adding a description to the Name field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclass Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public DateTime LastUpdated { get; set; }\n}\n\nclass ProductGraphType : AutoRegisteringObjectGraphType<Product>\n{\n    public ProductGraphType()\n        : base(x => x.LastUpdated)\n    {\n        GetField(\"Name\").Description = \"A short name of the product\";\n    }\n}\n\nField<ListGraphType<ProductGraphType>>(\"products\").Resolve(_ => db.Products);\n```\n\n----------------------------------------\n\nTITLE: Updating Field Resolver Signatures in GraphQL-DotNet 3.0\nDESCRIPTION: Demonstrates how to modify field resolver method signatures to use IResolveFieldContext instead of ResolveFieldContext. Shows both inline resolvers and separately defined methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyGraphType : ObjectGraphType\n{\n    public MyGraphType()\n    {\n        Field(\"Name\", resolve: x => \"John Doe\");\n        Field(\"Children\", resolve: GetChildren);\n    }\n\n    //public IEnumerable<string> GetChildren(ResolveFieldContext context)\n    public IEnumerable<string> GetChildren(IResolveFieldContext context)\n    {\n        return new [] { \"Jack\", \"Jill\" };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Document Management Extensions in C#\nDESCRIPTION: Extension methods for configuring persisted documents in GraphQL.NET. Provides various overloads for document loader configuration with different service lifetimes and options.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions, System.IServiceProvider>? action) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Federated GraphQL Schema with User Type\nDESCRIPTION: Defines a GraphQL schema with Apollo Federation v2.3 support, including a User type with federation key, Query type with _entities and _service fields, and necessary Federation scalars and unions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample4Tests.Schema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"]) {\n  query: Query\n}\n\nscalar _Any\n\ntype Query {\n  users: [User!]!\n  _service: _Service!\n  _entities(representations: [_Any!]!): [_Entity]!\n}\n\ntype User @key(fields: \"id\") {\n  id: ID!\n  username: String!\n}\n\ntype _Service {\n  sdl: String\n}\n\nunion _Entity = User\n```\n\n----------------------------------------\n\nTITLE: Fixing GQL010 Violations in C#\nDESCRIPTION: Examples of how to fix the GQL010 violations by making constructors public or annotating one of multiple constructors with the GraphQLConstructorAttribute.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql010.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// make the constructor public\npublic class MyInput1\n{\n    public MyInput(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n// annotate one of the constructors with a GraphQLConstructorAttribute\npublic class MyInput2\n{\n    [GraphQLConstructor]\n    public MyInput2(string name)\n    {\n        Name = name;\n    }\n\n    public MyInput2(int age)\n    {\n        Age = age;\n    }\n\n    public string? Name { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultServiceProvider Implementation for GraphQL.NET\nDESCRIPTION: Provides a default implementation of IServiceProvider for GraphQL.NET. Used when no custom service provider is specified, with basic service resolution capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class DefaultServiceProvider : System.IServiceProvider\n{\n    public DefaultServiceProvider() { }\n    public object? GetService(System.Type serviceType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: IErrorInfoProvider Interface\nDESCRIPTION: Interface for providing error information for execution errors.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_78\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IErrorInfoProvider\n    {\n        GraphQL.Execution.ErrorInfo GetInfo(GraphQL.ExecutionError executionError);\n    }\n```\n\n----------------------------------------\n\nTITLE: SchemaPrinter Class Declaration with Obsolescence Warning\nDESCRIPTION: Defines the SchemaPrinter class for rendering GraphQL schemas as strings. This class is marked as obsolete with instructions to use the schema.Print() extension method instead, and will be removed in v9.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_196\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Obsolete(\"Please use the schema.Print() extension method instead. This class will be remove\" +\n    \"d in v9.\")]\npublic class SchemaPrinter\n{\n    public SchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions? options = null) { }\n    protected GraphQL.Utilities.SchemaPrinterOptions Options { get; }\n    protected GraphQL.Types.ISchema Schema { get; set; }\n    public string[] BreakLine(string line, int len) { }\n    public string FormatDefaultValue(object? value, GraphQL.Types.IGraphType graphType) { }\n    protected string FormatDescription(string? description, string indentation = \"\") { }\n    protected virtual bool IsDefinedDirective(string directiveName) { }\n    protected virtual bool IsDefinedType(string typeName) { }\n    public bool IsSchemaOfCommonNames(GraphQL.Types.ISchema schema) { }\n    public string Print() { }\n    public virtual string PrintArgs(GraphQL.Types.FieldType field) { }\n    public virtual string PrintComment(string? comment, string indentation = \"\", bool firstInBlock = true) { }\n    public string PrintDeprecation(string? reason) { }\n    public string PrintDescription(string? description, string indentation = \"\", bool firstInBlock = true) { }\n    public string PrintDirective(GraphQL.Types.Directive directive) { }\n    public virtual string PrintEnum(GraphQL.Types.EnumerationGraphType type) { }\n    public virtual string PrintFields(GraphQL.Types.IComplexGraphType type) { }\n    public string PrintFilteredSchema(System.Func<string, bool> directiveFilter, System.Func<string, bool> typeFilter) { }\n    public virtual string PrintInputObject(GraphQL.Types.IInputObjectGraphType type) { }\n    public string PrintInputValue(GraphQL.Types.FieldType field) { }\n    public string PrintInputValue(GraphQL.Types.QueryArgument argument) { }\n    public virtual string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }\n    public string PrintIntrospectionSchema() { }\n    public virtual string PrintObject(GraphQL.Types.IObjectGraphType type) { }\n    public virtual string PrintScalar(GraphQL.Types.ScalarGraphType type) { }\n    public string? PrintSchemaDefinition(GraphQL.Types.ISchema schema) { }\n    public string PrintType(GraphQL.Types.IGraphType type) { }\n    public virtual string PrintUnion(GraphQL.Types.UnionGraphType type) { }\n    protected static bool IsBuiltInDirective(string directiveName) { }\n    protected static bool IsBuiltInScalar(string typeName) { }\n    protected static bool IsIntrospectionType(string typeName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Individual GraphQL Node\nDESCRIPTION: Protected virtual method to execute a single node in the execution tree. Handles the processing of an individual field's resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_79\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task ExecuteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: Code Fix Result in C#\nDESCRIPTION: The result of applying the automatic code fix to the deprecated field definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql004.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"name\").Description(\"description\")\n    .Resolve(context => \"text\");\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoRegisteringGraphTypeMappingProvider in C#\nDESCRIPTION: Shows how to configure the AutoRegisteringGraphTypeMappingProvider to generate object graph types for interface CLR types, reverting to pre-v7 behavior.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddGraphTypeMappingProvider(new AutoRegisteringGraphTypeMappingProvider(true, true, false))\n    // other calls\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing GQL006 by Renaming Input Field\nDESCRIPTION: Solution to the GQL006 violation by renaming the input field to match the source type property. This ensures proper mapping between the GraphQL input field and the C# property.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql006.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<MySourceType>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"Name\");\n    }\n}\n\npublic class MySourceType\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: IExecutionStrategy Interface\nDESCRIPTION: Interface defining the core execution strategy methods for GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_81\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionStrategy\n    {\n        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context);\n        System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode);\n        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n                \"field\",\n                \"fieldType\"})]\n        System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? GetSubFields(GraphQL.Execution.ExecutionContext executionContext, GraphQL.Execution.ExecutionNode executionNode);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining IAbstractGraphType Interface in C#\nDESCRIPTION: Defines the IAbstractGraphType interface that represents abstract GraphQL types like interfaces and unions. It includes methods for resolving concrete types and managing possible type implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_159\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IAbstractGraphType : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.PossibleTypes PossibleTypes { get; }\n    System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }\n    void AddPossibleType(GraphQL.Types.IObjectGraphType type);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PossibleTypeAttribute in C#\nDESCRIPTION: PossibleTypeAttribute is a class that inherits from GraphQLAttribute and is used to specify possible types for interfaces in GraphQL.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple=true)]\npublic class PossibleTypeAttribute : GraphQL.GraphQLAttribute\n{\n    public PossibleTypeAttribute(System.Type type) { }\n    public System.Type ObjectGraphType { get; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Entity Query Response Structure\nDESCRIPTION: Shows the format of a GraphQL response containing an _entities array with User type objects. Each user entity includes a typename, ID, and username field. This structure is typical for federated GraphQL queries that resolve multiple entities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample4Tests.Entities.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"_entities\": [\n      {\n        \"__typename\": \"User\",\n        \"id\": \"1\",\n        \"username\": \"Username 1\"\n      },\n      {\n        \"__typename\": \"User\",\n        \"id\": \"2\",\n        \"username\": \"Username 2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Builder Generic Class Implementation in C#\nDESCRIPTION: Generic class for building GraphQL fields with strongly-typed source and return types. Provides methods for configuring arguments, descriptions, deprecation reasons, and field resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_59\n\nLANGUAGE: csharp\nCODE:\n```\npublic class FieldBuilder<TSourceType, TReturnType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata\n{\n    protected FieldBuilder(GraphQL.Types.FieldType fieldType) { }\n    public GraphQL.Types.FieldType FieldType { get; }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name)\n        where TArgumentGraphType : GraphQL.Types.IGraphType { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Description(string? description) { }\n    public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DeprecationReason(string? deprecationReason) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Definition Methods Using Expression-Based Property Access in GraphQL.NET\nDESCRIPTION: Methods for defining fields based on property expressions. These methods automatically derive field names and types from the property expressions provided.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TGraphType>(string name)\n            where TGraphType : GraphQL.Types.IGraphType { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable) { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, [System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Star Wars GraphQL Schema with Query and Mutation Types\nDESCRIPTION: The root schema definition specifying Query and Mutation as the entry points for the API.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Query\n  mutation: Mutation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataAttribute in C#\nDESCRIPTION: MetadataAttribute is a class that inherits from GraphQLAttribute and is used to add metadata to various GraphQL elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter, AllowMultiple=true)]\npublic class MetadataAttribute : GraphQL.GraphQLAttribute\n{\n    public MetadataAttribute(string key, object? value) { }\n    public string Key { get; set; }\n    public object? Value { get; set; }\n    public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IParentExecutionNode Interface for Node Traversal\nDESCRIPTION: Interface for execution nodes that can have child nodes. Provides methods for traversing and manipulating child nodes during execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_101\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IParentExecutionNode\n    {\n        void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false);\n        System.Collections.Generic.IEnumerable<GraphQL.Execution.ExecutionNode> GetChildNodes();\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionStrategy in C#\nDESCRIPTION: Defines an abstract ExecutionStrategy class that implements IExecutionStrategy. It includes methods for building execution nodes, collecting fields, and executing nodes asynchronously.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class ExecutionStrategy : GraphQL.Execution.IExecutionStrategy\n{\n    protected ExecutionStrategy() { }\n    protected virtual GraphQL.Execution.ExecutionNode BuildExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode = default) { }\n    protected virtual GraphQL.Execution.RootExecutionNode BuildExecutionRootNode(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IObjectGraphType rootType) { }\n    [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"field\",\n            \"fieldType\"})]\n    protected virtual System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>> CollectFieldsFrom(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IGraphType specificType, GraphQLParser.AST.GraphQLSelectionSet selectionSet, [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"field\",\n            \"fieldType\"})] System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? fields) { }\n    protected virtual System.Threading.Tasks.Task CompleteDataLoaderNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n    protected virtual System.Threading.Tasks.Task CompleteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n    protected bool DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext context, GraphQLParser.ROM fragmentName, GraphQL.Types.IGraphType type) { }\n    public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }\n    protected virtual System.Threading.Tasks.Task ExecuteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Schema Comparer in C#\nDESCRIPTION: This code defines a LegacyV3SchemaComparer class that implements the old behavior of sorting fields by their names within the enclosing type. It's used to maintain backwards compatibility with GraphQL.NET v3.x.x.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class LegacyV3SchemaComparer : DefaultSchemaComparer\n{\n    private static readonly FieldByNameComparer _instance = new FieldByNameComparer();\n\n    private sealed class FieldByNameComparer : IComparer<IFieldType>\n    {\n        public int Compare(IFieldType x, IFieldType y) => x.Name.CompareTo(y.Name);\n    }\n    /// <inheritdoc/>\n    public override IComparer<IFieldType> FieldComparer(IGraphType parent) => _instance;\n}\n\nschema.Comparer = new LegacyV3SchemaComparer();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Timeout Response Example\nDESCRIPTION: Example of the JSON response returned when a GraphQL query execution exceeds the configured timeout. The error includes a message and extensions with a TIMEOUT code.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"errors\":[\n        {\n            \"message\": \"The operation has timed out.\",\n            \"extensions\": { \"code\": \"TIMEOUT\", \"codes\": [ \"TIMEOUT\" ] }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Query Type with Product and Federation Fields\nDESCRIPTION: Extends the Query type with fields for querying products and federation-specific operations. It includes 'products' for retrieving all products, '_entities' for federation entity resolution, and '_service' for exposing the service SDL.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation2Schema.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nextend type Query {\n  products: [Product!]!\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InputTypeAttribute in GraphQL.NET\nDESCRIPTION: Attribute for explicitly specifying the input GraphQL type for a property or field. It can be applied to classes, structs, properties, fields, interfaces, or parameters to define their GraphQL type representation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class InputTypeAttribute : GraphQL.GraphQLAttribute\n{\n    public InputTypeAttribute(System.Type graphType) { }\n    public System.Type InputType { get; set; }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types and Query in GraphQL Schema\nDESCRIPTION: Schema definitions for Post type, Query type with getPost operation, and federation-specific _Service and _Any types. Includes the main query fields and federation service SDL field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationTypeFirst.1.0.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nscalar FieldSet\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  getPost: Post!\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Input Object Type Parameter Access in C#\nDESCRIPTION: Shows the method signature for accessing input object type parameters using GetArgument<T>. This method behavior may require ParseDictionary override for type coercion.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nGetArgument<T>\n```\n\n----------------------------------------\n\nTITLE: Example of Disabling a GraphQL.NET Analyzer Rule\nDESCRIPTION: Demonstrates how to disable a specific analyzer rule (GQL001) by setting its severity to 'none' in the .editorconfig file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndotnet_diagnostic.GQL001.severity = none\n```\n\n----------------------------------------\n\nTITLE: Correct GraphQL.NET Field and Connection Declarations\nDESCRIPTION: Fixed examples showing the correct way to declare fields and connections without redundant Name method calls.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql002.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nField<StringGraphType>(\"Name\");\nConnection<StringGraphType>(\"Name\");\nConnectionBuilder<string>.Create<StringGraphType>(\"Name\");\nConnectionBuilder.Create<StringGraphType, string>(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Complexity Validation Rules\nDESCRIPTION: Custom validation rules for managing query complexity in GraphQL.NET, including both modern and legacy implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_231\n\nLANGUAGE: C#\nCODE:\n```\npublic class ComplexityValidationRule : GraphQL.Validation.ValidationRuleBase\n{\n    public ComplexityValidationRule(GraphQL.Validation.Complexity.ComplexityOptions options) { }\n    protected GraphQL.Validation.Complexity.ComplexityOptions Options { get; }\n    protected virtual System.Threading.Tasks.ValueTask<System.ValueTuple<double, int>> CalculateComplexityAsync(GraphQL.Validation.ValidationContext context) { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    protected virtual System.Threading.Tasks.ValueTask ValidateComplexityAsync(GraphQL.Validation.ValidationContext context, double totalComplexity, int maxDepth) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InputObjectGraphType in GraphQL.NET\nDESCRIPTION: Non-generic implementation of the InputObjectGraphType class. It inherits from the generic version with object as the source type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_169\n\nLANGUAGE: C#\nCODE:\n```\npublic class InputObjectGraphType : GraphQL.Types.InputObjectGraphType<object>\n{\n    public InputObjectGraphType() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing GraphQL .NET Documentation\nDESCRIPTION: Command to deploy the documentation to the GitHub Pages repository. Requires write access to graphql-dotnet.github.io and Node.js v10.22.0.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn deploy\n```\n\n----------------------------------------\n\nTITLE: Migrating Async Field Resolvers in GraphQL.NET v5\nDESCRIPTION: Examples showing how to migrate from v4 to v5 async field resolver syntax. Demonstrates proper typing and async field builder usage.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// works in v4, not in v5 (throws in runtime)\nField<CharacterInterface>(\"hero\", resolve: context => data.GetDroidByIdAsync(\"3\"));\n\n// works in v4 or v5\nFieldAsync<CharacterInterface>(\"hero\", resolve: async context => await data.GetDroidByIdAsync(\"3\"));\n\n\n// works in v4, not in v5\nAddField(new FieldType\n{\n    Name = \"hero\",\n    Resolver = new FuncFieldResolver<Task<Droid>>(context => data.GetDroidByIdAsync(\"3\")),\n});\n\n// works in v4 or v5\nAddField(new FieldType\n{\n    Name = \"hero\",\n    Resolver = new AsyncFieldResolver<Droid>(context => data.GetDroidByIdAsync(\"3\")),\n});\n\n\n// works in v4, not in v5\nFunc<IResolveFieldContext, string, object> func = (context, id) => data.GetDroidByIdAsync(id);\nFieldDelegate<DroidType>(\n    \"droid\",\n    arguments: new QueryArguments(\n        new QueryArgument<NonNullGraphType<StringGraphType>> { Name = \"id\", Description = \"id of the droid\" }\n    ),\n    resolve: func\n);\n\n// works in v4 or v5\nFunc<IResolveFieldContext, string, Task<Droid>> func = (context, id) => data.GetDroidByIdAsync(id);\nFieldDelegate<DroidType>(\n    \"droid\",\n    arguments: new QueryArguments(\n        new QueryArgument<NonNullGraphType<StringGraphType>> { Name = \"id\", Description = \"id of the droid\" }\n    ),\n    resolve: func\n);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Apollo Federation Directives\nDESCRIPTION: Complete GraphQL schema definition that incorporates Apollo Federation v2.1 directives and types. This schema establishes the federation capabilities needed for distributed GraphQL services, including service metadata types and various federation directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.1.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.1\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Metadata Provider for GraphQL Types\nDESCRIPTION: Class that provides metadata reading and writing capabilities for GraphQL types. It implements multiple interfaces to manage metadata operations including getting, setting, and checking for metadata by key.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_189\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MetadataProvider : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata\n{\n    public MetadataProvider() { }\n    public System.Collections.Generic.Dictionary<string, object?> Metadata { get; }\n    public void CopyMetadataTo(GraphQL.Types.IMetadataWriter target) { }\n    public TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory) { }\n    public TType GetMetadata<TType>(string key, TType defaultValue = default) { }\n    public bool HasMetadata(string key) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation GraphQL Schema\nDESCRIPTION: Complete GraphQL schema definition implementing Apollo Federation v2.4. The schema includes federation directives, custom scalar types, enumerations, and basic type definitions for a service with posts.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.4.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.4\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__interfaceObject on OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EnumValuesBase abstract class for GraphQL.NET\nDESCRIPTION: Creates an abstract base class for enum value collections in GraphQL.NET. It defines the core interface for managing enum values, including adding, finding, and enumerating them.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_143\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class EnumValuesBase : System.Collections.Generic.IEnumerable<GraphQL.Types.EnumValueDefinition>, System.Collections.IEnumerable\n{\n    protected EnumValuesBase() { }\n    public abstract int Count { get; }\n    public GraphQL.Types.EnumValueDefinition? this[string name] { get; }\n    public abstract void Add(GraphQL.Types.EnumValueDefinition value);\n    public abstract GraphQL.Types.EnumValueDefinition? FindByName(GraphQLParser.ROM name);\n    public abstract GraphQL.Types.EnumValueDefinition? FindByValue(object? value);\n    public abstract System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator();\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Connection Context Interfaces and Implementation\nDESCRIPTION: Defines interfaces and implementation for connection contexts used in GraphQL pagination. Includes properties for cursor-based pagination like After, Before, First, and Last.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_62\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IResolveConnectionContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext\n{\n    string? After { get; }\n    string? Before { get; }\n    int? First { get; }\n    bool IsUnidirectional { get; }\n    int? Last { get; }\n    int? PageSize { get; }\n}\n\npublic interface IResolveConnectionContext<out T> : GraphQL.Builders.IResolveConnectionContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T> { }\n\npublic class ResolveConnectionContext<T> : GraphQL.ResolveFieldContext<T>, GraphQL.Builders.IResolveConnectionContext, GraphQL.Builders.IResolveConnectionContext<T>, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T>\n{\n    public ResolveConnectionContext(GraphQL.IResolveFieldContext context, bool isUnidirectional, int? defaultPageSize) { }\n    public string? After { get; }\n    public string? Before { get; }\n    public int? First { get; }\n    public bool IsUnidirectional { get; }\n    public int? Last { get; }\n    public int? PageSize { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving String-based Enumerations in GraphQL.NET\nDESCRIPTION: Shows a model class and object graph type for resolving GraphQL enumerations using string values in the data model.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HumanString\n{\n    //i.e. \"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    public string[] AppearsIn { get; set; }\n}\n\npublic class HumanStringType: ObjectGraphType<HumanString>\n{\n    public HumanStringType()\n    {\n        Name = \"HumanString\";\n        Field<ListGraphType<EpisodeEnum>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Type for Creating Characters\nDESCRIPTION: The Mutation type provides an operation to create a new Human character using the HumanInput type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createHuman(human: HumanInput!): Human\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LengthDirective in GraphQL.NET\nDESCRIPTION: Implementation of the 'length' directive in GraphQL. It validates the length of string values, with configurable introspection behavior.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_175\n\nLANGUAGE: C#\nCODE:\n```\npublic class LengthDirective : GraphQL.Types.Directive\n{\n    public LengthDirective() { }\n    public override bool? Introspectable { get; }\n    public override void Validate(GraphQL.Types.AppliedDirective applied) { }\n}\n```\n\n----------------------------------------\n\nTITLE: ValidateNodeResult Method\nDESCRIPTION: Protected virtual method for validating the result of a node execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_72\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void ValidateNodeResult(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with _entities Field in JSON\nDESCRIPTION: A JSON response from a GraphQL API showing a federated query result. The response contains _entities with Category and Product types, demonstrating relationships between them through nested objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample2Tests.Entities.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"_entities\": [\n      {\n        \"__typename\": \"Category\",\n        \"id\": \"1\",\n        \"products\": [\n          {\n            \"id\": \"1\",\n            \"name\": \"Product 1\"\n          },\n          {\n            \"id\": \"2\",\n            \"name\": \"Product 2\"\n          }\n        ]\n      },\n      {\n        \"__typename\": \"Product\",\n        \"id\": \"1\",\n        \"name\": \"Product 1\",\n        \"category\": {\n          \"id\": \"1\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Federation Entity Query Example\nDESCRIPTION: Demonstrates the required __typename field in GraphQL Federation entity queries after removal of automatic typename injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_56\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  _entities(representations: [{ __typename: \"User\", id: \"1\" }]) {\n    __typename\n    ... on User {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Serialization for Development Environment\nDESCRIPTION: Conditional configuration for DocumentWriter that exposes exception stack traces in development mode but uses default settings in production, demonstrating error info provider customization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n#if DEBUG\n    var documentWriter = new DocumentWriter(true, new ErrorInfoProvider(options => options.ExposeExceptionStackTrace = true));\n#else\n    var documentWriter = new DocumentWriter();\n#endif\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema Example\nDESCRIPTION: Shows the resulting GraphQL schema generated from the auto-registering object type implementation with custom field and argument configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Person {\n  id: ID!\n  name: String!\n  orders(sort: SortOrder! = DATE): [Order!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Node Inclusion Based on Directives\nDESCRIPTION: Protected virtual generic method that checks if a node should be included in the result based on directives like @include and @skip.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_89\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual bool ShouldIncludeNode<TASTNode>(GraphQL.Execution.ExecutionContext context, TASTNode node)\n            where TASTNode : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode { }\n```\n\n----------------------------------------\n\nTITLE: Creating Global GraphQL Attribute for DbContext Injection\nDESCRIPTION: Example of implementing a global GraphQL attribute at the assembly level to automatically convert query arguments of type DbContext to pull from services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[AttributeUsage(AttributeTargets.Assembly)]\npublic class DbContextFromServicesAttribute : GraphQLAttribute\n{\n    public override void Modify<TParameterType>(ArgumentInformation argumentInformation)\n    {\n        if (typeof(TParameterType) == typeof(DbContext))\n            argumentInformation.SetDelegate(context => (context.RequestServices ?? throw new MissingRequestServicesException())\n                .GetRequiredService<TParameterType>());\n    }\n}\n\n// in AssemblyInfo.cs or whereever in your code at assembly level\n[assembly: DbContextFromServices]\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Type Name in Code-First Approach\nDESCRIPTION: Example showing the correct way to set GraphQL type name in code-first graph definitions by setting the Name property in the constructor instead of using GraphQLMetadata attribute.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n//[GraphQLMetadata(\"Person\")] //previously supported\npublic class HumanType : ObjectGraphType<Human>\n{\n    public HumanType()\n    {\n        Name = \"Person\"; //correct implementation\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Error Response in GraphQL.NET\nDESCRIPTION: Example of the JSON error response when a validation error occurs during the validation stage. Shows the format of validation error messages.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Invalid value for argument 'firstName' of field 'testMe'. Length must be less than 10 characters.\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 14\n        }\n      ],\n      \"extensions\": {\n        \"code\": \"INVALID_VALUE\",\n        \"codes\": [\n          \"INVALID_VALUE\",\n          \"ARGUMENT\"\n        ],\n        \"number\": \"5.6\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IProvideMetadata Interface in GraphQL.NET\nDESCRIPTION: Interface for objects that provide metadata. It includes methods for getting, setting, and checking metadata values with strong typing support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_164\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideMetadata\n{\n    System.Collections.Generic.Dictionary<string, object?> Metadata { get; }\n    TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory);\n    TType GetMetadata<TType>(string key, TType defaultValue = default);\n    bool HasMetadata(string key);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Exporter for GraphQL Schemas\nDESCRIPTION: Class for exporting GraphQL schemas to AST representation. Provides methods to convert various schema components like directives, arguments, and type definitions to their corresponding AST nodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_195\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SchemaExporter\n{\n    public SchemaExporter(GraphQL.Types.ISchema schema) { }\n    protected GraphQL.Types.ISchema Schema { get; }\n    protected virtual T ApplyDescription<T>(T node, GraphQL.Types.IProvideDescription obj)\n        where T : GraphQLParser.AST.IHasDescriptionNode { }\n    protected virtual T ApplyDirectives<T>(T node, GraphQL.Types.IMetadataReader obj)\n        where T : GraphQLParser.AST.IHasDirectivesNode { }\n    protected virtual GraphQLParser.AST.ASTNode ApplyExtend(GraphQLParser.AST.ASTNode node, GraphQL.Types.IMetadataReader graphType) { }\n    public virtual GraphQLParser.AST.GraphQLDocument Export() { }\n    protected virtual GraphQLParser.AST.GraphQLDirective ExportAppliedDirective(GraphQL.Types.AppliedDirective appliedDirective) { }\n    protected virtual GraphQLParser.AST.GraphQLArgument ExportAppliedDirectiveArgument(GraphQL.Types.Directive directive, GraphQL.Types.DirectiveArgument argument) { }\n    protected virtual GraphQLParser.AST.GraphQLArgumentDefinition ExportArgumentDefinition(GraphQL.Types.QueryArgument argument) { }\n    protected virtual GraphQLParser.AST.GraphQLDirectiveDefinition ExportDirectiveDefinition(GraphQL.Types.Directive directive) { }\n    protected virtual GraphQLParser.AST.GraphQLEnumTypeDefinition ExportEnumTypeDefinition(GraphQL.Types.EnumerationGraphType enumType) { }\n    protected virtual GraphQLParser.AST.GraphQLFieldDefinition ExportFieldDefinition(GraphQL.Types.FieldType fieldType) { }\n    protected virtual GraphQLParser.AST.GraphQLInputFieldDefinition ExportInputFieldDefinition(GraphQL.Types.FieldType fieldType) { }\n    protected virtual GraphQLParser.AST.GraphQLInputObjectTypeDefinition ExportInputObjectTypeDefinition(GraphQL.Types.IInputObjectGraphType graphType) { }\n    protected virtual GraphQLParser.AST.GraphQLInterfaceTypeDefinition ExportInterfaceTypeDefinition(GraphQL.Types.IInterfaceGraphType graphType) { }\n    protected virtual GraphQLParser.AST.GraphQLObjectTypeDefinition ExportObjectTypeDefinition(GraphQL.Types.IObjectGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ResolverType Enum in GraphQL.NET\nDESCRIPTION: An enumeration that defines the types of resolvers available in GraphQL.NET. It distinguishes between standard resolvers and stream resolvers for handling different resolution patterns.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\npublic enum ResolverType\n{\n    Resolver = 0,\n    StreamResolver = 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AutomaticPersistedQueriesExecution for GraphQL query caching in C#\nDESCRIPTION: A concrete implementation of the AutomaticPersistedQueriesExecutionBase that handles caching and retrieving GraphQL queries by hash. Implements IDisposable to clean up resources.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutomaticPersistedQueriesExecution : GraphQL.Caching.AutomaticPersistedQueriesExecutionBase, System.IDisposable\n{\n    public AutomaticPersistedQueriesExecution() { }\n    public AutomaticPersistedQueriesExecution(Microsoft.Extensions.Options.IOptions<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions> options) { }\n    public void Dispose() { }\n    protected override System.Threading.Tasks.ValueTask<string?> GetQueryAsync(string hash) { }\n    protected override System.Threading.Tasks.Task SetQueryAsync(string hash, string query) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Validation Visitor in C#\nDESCRIPTION: A visitor class that validates applied directives throughout a GraphQL schema. Implements ISchemaNodeVisitor interface to traverse all schema elements for validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_198\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class AppliedDirectivesValidationVisitor : GraphQL.Utilities.ISchemaNodeVisitor\n{\n    public void PostVisitSchema(GraphQL.Types.ISchema schema) { }\n    public void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }\n    public void VisitSchema(GraphQL.Types.ISchema schema) { }\n    public void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }\n    public static void Run(GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: IDocumentExecutionListener Interface\nDESCRIPTION: Interface for listener hooks during GraphQL document execution lifecycle.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_77\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IDocumentExecutionListener\n    {\n        System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context);\n        System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult);\n        System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context);\n    }\n```\n\n----------------------------------------\n\nTITLE: Example of GQL007 Violation in C#\nDESCRIPTION: Example showing an InputObjectGraphType with fields that can't be properly mapped to the source type due to various issues: private property, property with private setter, static field, and readonly field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql007.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<MySourceType>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"FirstName\");\n        Field<StringGraphType>(\"LastName\");\n        Field<StringGraphType>(\"Title\");\n        Field<IntGraphType>(\"Age\");\n    }\n}\n\npublic class MySourceType\n{\n    private string FirstName { get; set; }\n    public string LastName { get; private set; }\n    public static string Title;\n    public readonly string Age;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing generic EnumValues<TEnum> class for GraphQL.NET\nDESCRIPTION: Defines a generic implementation of EnumValuesBase for strongly-typed enum handling in GraphQL.NET. It provides type-safe enum value management for specific enum types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_144\n\nLANGUAGE: C#\nCODE:\n```\npublic class EnumValues<TEnum> : GraphQL.Types.EnumValuesBase\n    where TEnum : System.Enum\n{\n    public EnumValues() { }\n    public override int Count { get; }\n    public override void Add(GraphQL.Types.EnumValueDefinition value) { }\n    public override GraphQL.Types.EnumValueDefinition? FindByName(GraphQLParser.ROM name) { }\n    public override GraphQL.Types.EnumValueDefinition? FindByValue(object? value) { }\n    public override System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator() { }\n}\n```\n\n----------------------------------------\n\nTITLE: TransitiveInterfaceVisitor Class Declaration\nDESCRIPTION: Defines a visitor for handling transitive interfaces in GraphQL schemas. This class visits interface and object types to establish transitive interface relationships.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_200\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class TransitiveInterfaceVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public static GraphQL.Utilities.TransitiveInterfaceVisitor Instance { get; }\n    public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQLDocumentBuilder Class\nDESCRIPTION: A class that implements IDocumentBuilder to parse GraphQL query strings into GraphQL document ASTs. Includes configuration options for parsing behavior.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_93\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GraphQLDocumentBuilder : GraphQL.Execution.IDocumentBuilder\n    {\n        public GraphQLDocumentBuilder() { }\n        public bool IgnoreComments { get; set; }\n        public bool IgnoreLocations { get; set; }\n        public int? MaxDepth { get; set; }\n        public GraphQLParser.AST.GraphQLDocument Build(string body) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Vector3 Variable Example\nDESCRIPTION: Example of a GraphQL mutation that uses the Vector3 custom scalar type as an input variable. Shows how structured data is passed in the variables section with x, y, and z components.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddVector($vector3: Vector3!) {\n    addVector(vector3: $vector3)\n}\n\n//variables\n{\n    \"vector3\": {\n        \"x\":\"23\",\n        \"y\":\"43\",\n        \"z\":\"66\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation Schema with Directives\nDESCRIPTION: Complete GraphQL schema definition for Apollo Federation v2.6. It includes schema directive imports, federation directives, scalar definitions, enums, and basic types. This schema provides the foundation for creating a federated GraphQL service.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.6.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.6\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__interfaceObject on OBJECT\n\ndirective @federation__policy(policies: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__requiresScopes(scopes: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComplexityOptions Class for GraphQL in C#\nDESCRIPTION: This class defines options for complexity analysis in GraphQL queries, including default impact values, maximum complexity, and depth limits.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_220\n\nLANGUAGE: C#\nCODE:\n```\npublic class ComplexityOptions\n{\n    public ComplexityOptions() { }\n    public System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult> DefaultComplexityImpactDelegate { get; set; }\n    public double DefaultListImpactMultiplier { get; set; }\n    public double DefaultObjectImpact { get; set; }\n    public double DefaultScalarImpact { get; set; }\n    public int? MaxComplexity { get; set; }\n    public int? MaxDepth { get; set; }\n    public System.Func<GraphQL.Validation.Complexity.ComplexityValidationContext, System.Threading.Tasks.Task>? ValidateComplexityDelegate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisted Document Request with GUID Identifier\nDESCRIPTION: Example of a GraphQL request using a GUID as the persisted document identifier instead of a SHA-256 hash.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"documentId\": \"01234567-89ab-cdef-0123-456789abcdef\",\n  \"variables\": {\n    \"id\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IExecutionContext Interface\nDESCRIPTION: Comprehensive interface defining the execution context for GraphQL operations with all necessary dependencies and state.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_80\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionContext : GraphQL.Execution.IProvideUserContext\n    {\n        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; }\n        System.Threading.CancellationToken CancellationToken { get; }\n        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; }\n        GraphQLParser.AST.GraphQLDocument Document { get; }\n        GraphQL.ExecutionErrors Errors { get; }\n        GraphQL.ExecutionOptions ExecutionOptions { get; }\n        GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; }\n        System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }\n        System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }\n        int? MaxParallelExecutionCount { get; }\n        GraphQL.Instrumentation.Metrics Metrics { get; }\n        GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }\n        System.Collections.Generic.Dictionary<string, object?> OutputExtensions { get; }\n        System.IServiceProvider? RequestServices { get; }\n        object? RootValue { get; }\n        GraphQL.Types.ISchema Schema { get; }\n        bool ThrowOnUnhandledException { get; }\n        System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; }\n        System.Security.Claims.ClaimsPrincipal? User { get; }\n        GraphQL.Validation.Variables Variables { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL __EnumValue Object Type in JSON Schema\nDESCRIPTION: JSON representation of the __EnumValue object type that describes possible values for enum types. Includes properties for name, description, and deprecation information of enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"OBJECT\",\n  \"name\": \"__EnumValue\",\n  \"description\": \"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.\",\n  \"fields\": [\n    {\n      \"name\": \"name\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"String\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"description\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"isDeprecated\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"NON_NULL\",\n        \"name\": null,\n        \"ofType\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"Boolean\",\n          \"ofType\": null\n        }\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    },\n    {\n      \"name\": \"deprecationReason\",\n      \"description\": null,\n      \"args\": [],\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\",\n        \"ofType\": null\n      },\n      \"isDeprecated\": false,\n      \"deprecationReason\": null\n    }\n  ],\n  \"inputFields\": null,\n  \"interfaces\": [],\n  \"enumValues\": null,\n  \"possibleTypes\": null,\n  \"isOneOf\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Imported Directives with FromSchemaUrl Property\nDESCRIPTION: Demonstrates how to apply imported directives to a schema using the FromSchemaUrl property, specifying either a general schema URL or a version-specific URL.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\ngraphType.ApplyDirective(\"shareable\", s => s.FromSchemaUrl = \"https://specs.apollo.dev/federation/\"); // applies to any version\n// or\ngraphType.ApplyDirective(\"shareable\", s => s.FromSchemaUrl = \"https://specs.apollo.dev/federation/v2.3\"); // only version 2.3\n```\n\n----------------------------------------\n\nTITLE: Defining IImplementInterfaces Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL types that can implement other interfaces. It provides properties to access implemented interfaces and methods to add resolved interfaces.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_154\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IImplementInterfaces : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.Interfaces Interfaces { get; }\n    GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }\n    void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation GraphQL Schema with Imports\nDESCRIPTION: This snippet defines a complete GraphQL schema for Apollo Federation, including the @link directive, custom scalars, and enums. It sets up the schema structure and defines a basic Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.7.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], purpose: SECURITY, url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Operation Root Type in GraphQL Execution\nDESCRIPTION: Protected virtual method that determines the root object type based on the operation type (query, mutation, subscription) in the execution context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_82\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual GraphQL.Types.IObjectGraphType GetOperationRootType(GraphQL.Execution.ExecutionContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Schema Configuration Extensions\nDESCRIPTION: Extension methods for configuring GraphQL schema mutations and subscriptions using auto-schema generation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.IConfigureAutoSchema WithMutation<TMutationClrType>(this GraphQL.IConfigureAutoSchema builder) { }\n\npublic static GraphQL.IConfigureAutoSchema WithSubscription<TSubscriptionClrType>(this GraphQL.IConfigureAutoSchema builder) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Query Type in GraphQL\nDESCRIPTION: Defines the root query type with fields to fetch individual characters and the hero.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  droid(\n    \"id of the droid\"\n    id: String!): Droid\n  hero: Character\n  human(\n    \"id of the human\"\n    id: String!): Human\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type implementing an Interface in GraphQL\nDESCRIPTION: This snippet shows the GraphQL schema definition for a Droid type that implements the Character interface. It includes all required fields from the interface plus an additional field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/interfaces.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Droid implements Character {\n  id: ID!\n  name: String!\n  friends: [Character]\n  primaryFunction: String\n}\n```\n\n----------------------------------------\n\nTITLE: Scalar Type Implementations in C#\nDESCRIPTION: Implementation of various scalar types including Short, String, TimeSpan, UInt, and ULong. Each type includes parsing and serialization logic for GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_183\n\nLANGUAGE: C#\nCODE:\n```\npublic class StringGraphType : GraphQL.Types.ScalarGraphType\n{\n    public StringGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanParseValue(object? value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Object Metadata Extensions\nDESCRIPTION: Extensions for object types in federation including external field marking, key management, and shareability configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_117\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter External<TMetadataWriter>(this TMetadataWriter fieldType)\n    where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\npublic static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string[] fields, bool resolvable = true)\n    where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\npublic static TMetadataWriter Shareable<TMetadataWriter>(this TMetadataWriter graphType)\n    where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\n```\n\n----------------------------------------\n\nTITLE: Defining CharacterInterfaceEdge Type for Connection Edges\nDESCRIPTION: An edge type for the CharacterInterfaceConnection, containing a cursor for pagination and the Character node.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n\"An edge in a connection from an object to another object of type `CharacterInterface`.\"\ntype CharacterInterfaceEdge {\n  \"A cursor for use in pagination\"\n  cursor: String!\n  \"The item at the end of the edge\"\n  node: Character\n}\n```\n\n----------------------------------------\n\nTITLE: Defining error classes for Persisted Query issues in GraphQL.NET\nDESCRIPTION: A set of error classes for various persisted query failure scenarios, including bad hash, query not found, and unsupported version errors. These extend the RequestError class from GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class PersistedQueryBadHashError : GraphQL.Execution.RequestError\n{\n    public PersistedQueryBadHashError(string hash) { }\n}\n\npublic class PersistedQueryNotFoundError : GraphQL.Execution.RequestError\n{\n    public PersistedQueryNotFoundError(string hash) { }\n}\n\npublic class PersistedQueryUnsupportedVersionError : GraphQL.Execution.RequestError\n{\n    public PersistedQueryUnsupportedVersionError(string? version) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Printer Class Implementation in C#\nDESCRIPTION: Class responsible for printing GraphQL schema definitions with various formatting options and type-specific printing methods\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_205\n\nLANGUAGE: C#\nCODE:\n```\npublic class SchemaPrinter\n{\n    public SchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions? options = null) { }\n    protected GraphQL.Utilities.SchemaPrinterOptions Options { get; }\n    protected GraphQL.Types.ISchema Schema { get; set; }\n    public string Print() { }\n    public string PrintType(GraphQL.Types.IGraphType type) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query with Complexity Analysis\nDESCRIPTION: Example GraphQL query demonstrating complexity calculation with comments showing impact, multiplier, and depth values at each level.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {                #  impact   multiplier   total impact   child multiplier   depth\n  users(first: 10) {   #     1          1             1                 10          1\n    id                 #     1         10            11                             2\n    posts {            #     1         10            21                 20          2\n      id               #     1        200           221                             3\n      comments {       #     1        200           421                 20          3\n        id             #     1       4000          4421                             4\n      }                #\n    }                  #\n  }                    #\n  products(id: \"5\") {  #     1          1          4422                  1          1\n    id                 #     1          1          4423                             2\n    name               #     1          1          4424                             2\n    photos {           #     1          1          4425                 20          2\n      id               #     1         20          4445                             3\n      name             #     1         20          4465                             3\n    }                  #\n    category {         #     1          1          4466                  1          2\n      id               #     1          1          4467                             3\n      name             #     1          1          4468                             3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Visitor with Type-Specific Matching in C#\nDESCRIPTION: Shows how to implement an INodeVisitor that uses a predicate function to match specific node types and perform actions only on those nodes during AST traversal.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/v0_8_0.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnew NodeVisitorMatchFuncListener<Field>(\n    n => n is Field,\n    field =>\n    {\n      // do something with the field\n    }\n);\n\npublic class NodeVisitorMatchFuncListener<T> : INodeVisitor\n    where T : INode\n{\n    private readonly Func<INode, bool> _match;\n    private readonly Action<T> _action;\n\n    public NodeVisitorMatchFuncListener(Func<INode, bool> match, Action<T> action)\n    {\n        _match = match;\n        _action = action;\n    }\n\n    public void Enter(INode node)\n    {\n        if (_match(node))\n        {\n            _action((T) node);\n        }\n    }\n\n    public void Leave(INode node)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISchemaNodeVisitor Interface for GraphQL Schema Traversal in C#\nDESCRIPTION: The ISchemaNodeVisitor interface defines methods for visiting different parts of a GraphQL schema. It allows for custom logic to be applied during schema traversal.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_202\n\nLANGUAGE: C#\nCODE:\n```\npublic interface ISchemaNodeVisitor\n{\n    void PostVisitSchema(GraphQL.Types.ISchema schema);\n    void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema);\n    void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema);\n    void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);\n    void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);\n    void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema);\n    void VisitSchema(GraphQL.Types.ISchema schema);\n    void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema);\n}\n```\n\n----------------------------------------\n\nTITLE: BoolBox Utility for Optimized Boolean Boxing in GraphQL.NET\nDESCRIPTION: Provides utility methods for optimized boolean value boxing. Includes pre-boxed True and False values to reduce garbage collection overhead when boxing boolean values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BoolBox\n{\n    public static readonly object False;\n    public static readonly object True;\n    public static object Boxed(this bool value) { }\n    public static object? Boxed(this bool? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionStrategyRegistration Class for GraphQL\nDESCRIPTION: A class that pairs an execution strategy with an operation type. Includes IEquatable implementation for comparison.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_91\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExecutionStrategyRegistration : System.IEquatable<GraphQL.Execution.ExecutionStrategyRegistration>\n    {\n        public ExecutionStrategyRegistration(GraphQL.Execution.IExecutionStrategy Strategy, GraphQLParser.AST.OperationType Operation) { }\n        public GraphQLParser.AST.OperationType Operation { get; init; }\n        public GraphQL.Execution.IExecutionStrategy Strategy { get; init; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Schema with Imported Directives\nDESCRIPTION: A complete GraphQL schema definition that uses the @link directive to import features from external specifications. It imports the @link directive itself and other directives like @key and @shareable from different URLs.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AllowsDoubleConfiguration.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", {as: \"@share\", name: \"@shareable\"}], url: \"https://spec.example.com/example\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Vector3 Structured Response Format in GraphQL JSON\nDESCRIPTION: Example of a JSON response format when using the Vector3 custom scalar. Shows how the vector is returned as a structured object with x, y, and z properties in the response data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"getVector\": {\n            \"x\":\"23\",\n            \"y\":\"43\",\n            \"z\":\"66\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Setup with IoC\nDESCRIPTION: Code showing how to set up a GraphQL schema with dependency injection support\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    public MySchema(IServiceProvider services) : base(services)\n    {\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<MySchema>();\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Interface Metadata Extensions for GraphQL.NET\nDESCRIPTION: Extension methods for interface graph types to set federation key metadata, allowing fields to be marked as keys for entity resolution with optional resolvability configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_99\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FederationInterfaceMetadataExtensions\n{\n    public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string[] fields, bool resolvable = true)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IInterfaceGraphType { }\n    public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string fields, bool resolvable = true)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IInterfaceGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IVariableVisitor Interface in C#\nDESCRIPTION: Specifies the IVariableVisitor interface with methods for visiting different types of variables during validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_216\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IVariableVisitor\n{\n    System.Threading.Tasks.ValueTask VisitFieldAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.FieldType field, object? variableValue, object? parsedValue);\n    System.Threading.Tasks.ValueTask VisitListAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ListGraphType type, object? variableValue, System.Collections.Generic.IList<object?>? parsedValue);\n    System.Threading.Tasks.ValueTask VisitObjectAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, object? variableValue, object? parsedValue);\n    System.Threading.Tasks.ValueTask VisitScalarAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ScalarGraphType type, object? variableValue, object? parsedValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Validator Method Violations in C#\nDESCRIPTION: This code snippet demonstrates common violations of the GQL019 rule with non-static and internal validator methods that fail to meet the requirements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql019.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [Validator(nameof(Validate))]\n    public string Hello1 { get; set; }\n\n    [Validator(typeof(Validators), nameof(Validators.ValidateValue))]\n    public string Hello2 { get; set; }\n\n    // must be static\n    private void Validate(object value) => _ = Convert.ToInt32(value);\n}\n\npublic class Validators\n{\n    // must be public\n    internal static void ValidateValue(object value) => _ = Convert.ToInt32(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MemoryDocumentCacheOptions for GraphQL document caching in C#\nDESCRIPTION: Options class for configuring the memory-based document cache. Extends MemoryCacheOptions and adds properties for controlling cache key generation and expiration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class MemoryDocumentCacheOptions : Microsoft.Extensions.Caching.Memory.MemoryCacheOptions, Microsoft.Extensions.Options.IOptions<GraphQL.Caching.MemoryDocumentCacheOptions>\n{\n    public MemoryDocumentCacheOptions() { }\n    public System.Func<GraphQL.ExecutionOptions, object?>? AdditionalCacheKeySelector { get; set; }\n    public System.TimeSpan? SlidingExpiration { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Episode Enum for Star Wars Films\nDESCRIPTION: An enumeration of the original Star Wars trilogy films with their release years in comments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n\"One of the films in the Star Wars Trilogy.\"\nenum Episode {\n  \"Released in 1980.\"\n  EMPIRE\n  \"Released in 1983.\"\n  JEDI\n  \"Released in 1977.\"\n  NEWHOPE\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Enumeration Type in GraphQL Schema Language\nDESCRIPTION: Shows how to define the Episode enumeration in GraphQL schema language. This enum represents the first three Star Wars films.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Ignore Attribute in C#\nDESCRIPTION: Defines an attribute for excluding fields or properties from GraphQL schema generation. When applied to a member, it indicates that the member should not be included in the generated GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]\npublic class IgnoreAttribute : GraphQL.GraphQLAttribute\n{\n    public IgnoreAttribute() { }\n    public override bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic OutputTypeAttribute in GraphQL.NET\nDESCRIPTION: Generic version of OutputTypeAttribute that allows for strongly-typed GraphQL output type specification. It inherits from OutputTypeAttribute and constrains the type parameter to IGraphType.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\npublic class OutputTypeAttribute<TGraphType> : GraphQL.OutputTypeAttribute\n    where TGraphType : GraphQL.Types.IGraphType\n{\n    public OutputTypeAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL User Query Response in JSON\nDESCRIPTION: A JSON response from a GraphQL API that returns a collection of users. The response follows the standard GraphQL response format with data contained in a 'data' root object. Each user has an ID and username field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample4Tests.Users.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"1\",\n        \"username\": \"Username 1\"\n      },\n      {\n        \"id\": \"2\",\n        \"username\": \"Username 2\"\n      },\n      {\n        \"id\": \"3\",\n        \"username\": \"Username 3\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Argument Source Enum and Value Structure\nDESCRIPTION: Enum and structure for tracking the source of argument values in GraphQL queries. Used to distinguish between literals, variables, and default values during query execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_67\n\nLANGUAGE: C#\nCODE:\n```\npublic enum ArgumentSource\n{\n    FieldDefault = 0,\n    Literal = 1,\n    Variable = 2,\n    VariableDefault = 3,\n}\n\npublic readonly struct ArgumentValue\n{\n    public ArgumentValue(object? value, GraphQL.Execution.ArgumentSource source) { }\n    public GraphQL.Execution.ArgumentSource Source { get; }\n    public object? Value { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protected CompleteNodeAsync Method in Execution Strategy\nDESCRIPTION: Defines a virtual protected method for completing node execution in the GraphQL execution process. Takes execution context and node parameters.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_76\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task CompleteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoRegisteringInterfaceGraphType in C#\nDESCRIPTION: This class automatically registers and configures an InterfaceGraphType. It handles field creation, argument attributes, type information retrieval, and member registration for interface types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_135\n\nLANGUAGE: C#\nCODE:\n```\npublic class AutoRegisteringInterfaceGraphType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]  TSourceType> : GraphQL.Types.InterfaceGraphType<TSourceType>\n{\n    public AutoRegisteringInterfaceGraphType() { }\n    public AutoRegisteringInterfaceGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }\n    protected virtual void ApplyArgumentAttributes(System.Reflection.ParameterInfo parameterInfo, GraphQL.Types.QueryArgument queryArgument) { }\n    protected void BuildFieldType(GraphQL.Types.FieldType fieldType, System.Reflection.MemberInfo memberInfo) { }\n    protected virtual void ConfigureGraph() { }\n    protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual GraphQL.Types.ArgumentInformation GetArgumentInformation<TParameterType>(GraphQL.Types.FieldType fieldType, System.Reflection.ParameterInfo parameterInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }\n    protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.ParameterInfo parameterInfo) { }\n    protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Field Builder Extensions for GraphQL .NET\nDESCRIPTION: This snippet defines extension methods for FieldBuilder to support scoped resolvers. It provides methods for both synchronous and asynchronous resolution of fields, with support for dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ScopedFieldBuilderExtensions\n{\n    public static GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType> Resolve<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder) { }\n    public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveScoped<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\n    public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveScopedAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Complexity Analysis Extensions for GraphQL.NET\nDESCRIPTION: Provides extension methods for specifying and retrieving complexity impact of GraphQL fields. Supports both simple numeric complexity values and delegate-based complexity analysis.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ComplexityAnalayzerMetadataExtensions\n{\n    [System.Obsolete(\"Please use GetComplexityImpactDelegate instead. This method will be removed in v9\" +\n        \".\")]\n    public static double? GetComplexityImpact(this GraphQL.Types.IMetadataReader provider) { }\n    public static System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult>? GetComplexityImpactDelegate(this GraphQL.Types.FieldType provider) { }\n    public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, double impact)\n        where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult> func)\n        where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }\n    public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, double fieldImpact, double childImpactMultiplier)\n        where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }\n    public static TSchema WithIntrospectionComplexityImpact<TSchema>(this TSchema schema, double impact)\n        where TSchema : GraphQL.Types.ISchema { }\n}\n```\n\n----------------------------------------\n\nTITLE: SchemaDirectives Class Implementation in C#\nDESCRIPTION: Implementation of schema directives collection that manages @deprecated, @include, and @skip directives. Provides methods for registering and finding directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_182\n\nLANGUAGE: C#\nCODE:\n```\npublic class SchemaDirectives : System.Collections.Generic.IEnumerable<GraphQL.Types.Directive>, System.Collections.IEnumerable\n{\n    public SchemaDirectives() { }\n    public int Count { get; }\n    public virtual GraphQL.Types.DeprecatedDirective Deprecated { get; }\n    public virtual GraphQL.Types.IncludeDirective Include { get; }\n    public virtual GraphQL.Types.SkipDirective Skip { get; }\n    public GraphQL.Types.Directive? Find(GraphQLParser.ROM name) { }\n    public System.Collections.Generic.IEnumerator<GraphQL.Types.Directive> GetEnumerator() { }\n    public void Register(GraphQL.Types.Directive directive) { }\n    public void Register(params GraphQL.Types.Directive[] directives) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Boolean Type via Dependency Injection\nDESCRIPTION: Example of registering the custom Boolean type using dependency injection in the services configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<BooleanGraphType, MyBooleanGraphType>();\n```\n\n----------------------------------------\n\nTITLE: Extension methods for configuring GraphQL.NET caching in C#\nDESCRIPTION: Extension methods for IGraphQLBuilder to enable automatic persisted queries and memory caching. Provides fluent API configuration methods with optional setup actions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.MemoryCache.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MemoryCacheGraphQLBuilderExtensions\n{\n    public static GraphQL.DI.IGraphQLBuilder UseAutomaticPersistedQueries(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions>? action = null) { }\n    public static GraphQL.DI.IGraphQLBuilder UseAutomaticPersistedQueries(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions, System.IServiceProvider>? action) { }\n    public static GraphQL.DI.IGraphQLBuilder UseMemoryCache(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.MemoryDocumentCacheOptions>? action = null) { }\n    public static GraphQL.DI.IGraphQLBuilder UseMemoryCache(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.MemoryDocumentCacheOptions, System.IServiceProvider>? action) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector3 Serialize Implementation\nDESCRIPTION: Implements serialization of Vector3 objects to string format for client response.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic override object? Serialize(object? value)\n{\n    if (value == null)\n        return null;\n\n    if (value is Vector3 vector3)\n    {\n        return $\"{vector3.X},{vector3.Y},{vector3.Z}\";\n    }\n\n    return ThrowSerializationError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OneOfAttribute in C#\nDESCRIPTION: OneOfAttribute is a class that inherits from GraphQLAttribute and is used to mark a class as a OneOf type in GraphQL.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class)]\npublic class OneOfAttribute : GraphQL.GraphQLAttribute\n{\n    public OneOfAttribute() { }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Apollo Federation Schema Definition\nDESCRIPTION: Defines a complete GraphQL schema with Apollo Federation v2.8 directives and types. Includes schema definition, federation directives, scalar types, enums, and basic query structure with a Post type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationCodeFirst.2.8.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.8\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__authenticated on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__composeDirective(name: String!) repeatable on SCHEMA\n\ndirective @federation__context(name: String!) on INTERFACE | OBJECT | UNION\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__fromContext(field: federation__ContextFieldValue) on ARGUMENT_DEFINITION\n\ndirective @federation__interfaceObject on OBJECT\n\ndirective @federation__policy(policies: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @federation__requiresScopes(scopes: [String!]!) on ENUM | FIELD_DEFINITION | INTERFACE | OBJECT | SCALAR\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!, label: String) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable repeatable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__ContextFieldValue\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Nancy TinyIoC Container Configuration\nDESCRIPTION: Configuration example for Nancy's TinyIoCContainer using FuncServiceProvider for GraphQL.NET schema registration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void ConfigureApplicationContainer(TinyIoCContainer container)\n{\n    base.ConfigureApplicationContainer(container);\n\n    container.Register((c, overloads) =>\n    {\n        return new StarWarsSchema(new FuncServiceProvider(c.Resolve));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Imported Types\nDESCRIPTION: Complete GraphQL schema definition showing Apollo Federation link directive with imported types, including custom scalar and enum definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.2.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(as: \"ns\", import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [ns__Import], purpose: ns__Purpose, url: String!) repeatable on SCHEMA\n\nscalar ns__Import\n\nenum ns__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PatternMatchingVisitor for Schema Field Matching\nDESCRIPTION: Implements a visitor class that facilitates pattern matching on different field and argument definitions in a GraphQL schema. It provides override methods for various elements like input object fields and arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_215\n\nLANGUAGE: C#\nCODE:\n```\npublic class PatternMatchingVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public PatternMatchingVisitor() { }\n    public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Config Extensions for GraphQL.NET Federation\nDESCRIPTION: Extension methods for TypeConfig that configure entity reference resolution in federation, supporting various resolver patterns including synchronous, task-based, and DataLoader-based resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_110\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TypeConfigExtensions\n{\n    public static void ResolveReference(this GraphQL.Utilities.TypeConfig config, GraphQL.Federation.Resolvers.IFederationResolver resolver) { }\n    public static void ResolveReference<TSourceType>(this GraphQL.Utilities.TypeConfig typeConfig, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TSourceType?>> resolver) { }\n    public static void ResolveReference<TSourceType>(this GraphQL.Utilities.TypeConfig typeConfig, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TSourceType?>> resolver) { }\n    public static void ResolveReference<TSourceType>(this GraphQL.Utilities.TypeConfig typeConfig, System.Func<GraphQL.IResolveFieldContext, TSourceType, TSourceType?> resolver) { }\n    public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TReturnType?>> resolver) { }\n    public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.IResolveFieldContext, TSourceType, TReturnType?> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectGraphType in C#\nDESCRIPTION: Implements an ObjectGraphType class that inherits from ObjectGraphType<object?>.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_183\n\nLANGUAGE: C#\nCODE:\n```\npublic class ObjectGraphType : GraphQL.Types.ObjectGraphType<object?>\n{\n    public ObjectGraphType() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL018 Warnings with Preprocessor Directives in C#\nDESCRIPTION: This snippet shows how to use preprocessor directives to suppress a single violation of the GQL018 rule in C# code.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql018.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL018\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL018\n```\n\n----------------------------------------\n\nTITLE: Implementing NonNullGraphType in C#\nDESCRIPTION: Implementation of a non-null type wrapper that ensures values cannot be null. Includes constructor and type resolution properties.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_178\n\nLANGUAGE: C#\nCODE:\n```\npublic class NonNullGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType\n{\n    public NonNullGraphType(GraphQL.Types.IGraphType type) { }\n    public GraphQL.Types.IGraphType? ResolvedType { get; set; }\n    public virtual System.Type? Type { get; }\n    public override string ToString() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetErrorCode Generic Method in C#\nDESCRIPTION: A generic method in the ErrorInfoProvider class that returns the error code for a specific exception type. This method uses type constraints to ensure that the provided type is an Exception.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\npublic static string GetErrorCode<T>()\n            where T : System.Exception { }\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Static Properties in C#\nDESCRIPTION: Static properties for configuring GraphQL behavior including attribute reading, reflection caching, and type naming. Some properties are marked as obsolete and will be removed in future versions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool EnableReadDefaultValueFromAttributes { get; set; }\npublic static bool EnableReadDeprecationReasonFromAttributes { get; set; }\npublic static bool EnableReadDescriptionFromAttributes { get; set; }\npublic static bool EnableReadDescriptionFromXmlDocumentation { get; set; }\npublic static bool EnableReflectionCaching { get; set; }\npublic static bool InferFieldNullabilityFromNRTAnnotations { get; set; }\n[System.Obsolete(\"The query root operation type must be provided and must be an Object type. See ht\" +\n    \"tps://spec.graphql.org/October2021/#sec-Root-Operation-Types. This property will\" +\n    \" be removed in v9.\")]\npublic static bool RequireRootQueryType { get; set; }\npublic static bool TrackGraphTypeInitialization { get; set; }\npublic static bool UseDeclaringTypeNames { get; set; }\n[System.Obsolete(\"This property will be removed in v9.\")]\npublic static bool UseLegacyTypeNaming { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Provider Interface\nDESCRIPTION: This interface defines how types provide metadata through a dictionary and helper methods for retrieving specific metadata values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_168\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideMetadata\n{\n    System.Collections.Generic.Dictionary<string, object?> Metadata { get; }\n    TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory);\n    TType GetMetadata<TType>(string key, TType defaultValue = default);\n    bool HasMetadata(string key);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Attribute Declarations in C#\nDESCRIPTION: Custom attributes for GraphQL type and field configuration, including metadata, constructor, and interface implementation attributes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Constructor, AllowMultiple=false)]\npublic class GraphQLConstructorAttribute : System.Attribute\n{\n    public GraphQLConstructorAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapAutoClrTypeAttribute in GraphQL.NET\nDESCRIPTION: Attribute that marks a GraphQL type for automatic CLR type mapping. When applied to a class, it indicates that the class should be automatically mapped to a CLR type during schema generation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)]\npublic sealed class MapAutoClrTypeAttribute : System.Attribute\n{\n    public MapAutoClrTypeAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Attribute Definition\nDESCRIPTION: Abstract base class for GraphQL attributes that can modify various aspects of the GraphQL schema including types, fields, arguments and enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class GraphQLAttribute : System.Attribute\n{\n    protected GraphQLAttribute() { }\n    public virtual float Priority { get; }\n    public virtual void Modify(GraphQL.Types.ArgumentInformation argumentInformation) { }\n    public virtual void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }\n    public virtual void Modify(GraphQL.Types.IGraphType graphType) { }\n    public virtual void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public virtual void Modify(GraphQL.Types.TypeInformation typeInformation) { }\n    public virtual void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public virtual void Modify(GraphQL.Utilities.TypeConfig type) { }\n    public virtual void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n    public virtual void Modify(GraphQL.Types.IGraphType graphType, System.Type sourceType) { }\n    public virtual void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }\n    public virtual void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n    public virtual void Modify<TParameterType>(GraphQL.Types.ArgumentInformation argumentInformation) { }\n    public virtual bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic NonNullGraphType in C#\nDESCRIPTION: Defines a generic version of NonNullGraphType with a type constraint and an obsolete constructor.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_182\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class NonNullGraphType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  T> : GraphQL.Types.NonNullGraphType\n    where T : GraphQL.Types.IGraphType\n{\n    [System.Obsolete(\"This constructor is for internal use only; use NonNullGraphType(IGraphType type) instead.\")]\n    public NonNullGraphType() { }\n    public override System.Type Type { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Object Type in C#\nDESCRIPTION: This snippet shows how to define an InputObjectGraphType in C# for the HumanInput type, specifying the fields that can be provided when creating a new human.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/mutations.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HumanInputType : InputObjectGraphType\n{\n  public HumanInputType()\n  {\n    Name = \"HumanInput\";\n    Field<NonNullGraphType<StringGraphType>>(\"name\");\n    Field<StringGraphType>(\"homePlanet\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageInfo Type in GraphQL\nDESCRIPTION: Defines pagination information type with cursor-based navigation details.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n\"Information about pagination in a connection.\"\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LightweightCache in GraphQL.NET\nDESCRIPTION: A lightweight caching implementation for GraphQL.NET that provides key-value storage with various access patterns. Includes methods for managing, retrieving, and iterating through cached values with custom miss handling.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\npublic class LightweightCache<TKey, TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable\n    where TKey :  notnull\n{\n    public LightweightCache() { }\n    public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }\n    public LightweightCache(System.Func<TKey, TValue> onMissing) { }\n    public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Func<TKey, TValue> onMissing) { }\n    public int Count { get; }\n    public TValue this[TKey key] { get; set; }\n    public System.Collections.Generic.IEnumerable<TKey> Keys { get; }\n    public System.Func<TKey, TValue> OnMissing { set; }\n    public void Clear() { }\n    public void ClearAll() { }\n    public void Each(System.Action<TValue> action) { }\n    public void Each(System.Action<TKey, TValue> action) { }\n    public bool Exists(System.Predicate<TValue> predicate) { }\n    public void Fill(TKey key, TValue value) { }\n    public void FillDefault(TKey key) { }\n    public TValue? Find(System.Predicate<TValue> predicate) { }\n    public TValue[] GetAll() { }\n    public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { }\n    public bool Has(TKey key) { }\n    public void Remove(TKey key) { }\n    public bool TryRetrieve(TKey key, out TValue? value) { }\n    public void WithValue(TKey key, System.Action<TValue> action) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Introspection Impact\nDESCRIPTION: Examples of configuring complexity impact for introspection queries using extension methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Code-first:\nschema.WithIntrospectionComplexityImpact(0); // Ignore introspection fields\n// or\nschema.WithIntrospectionComplexityImpact(0.1); // Reduce impact to 10%\n\n// During DI setup:\nservices.AddGraphQL(b => b\n    .ConfigureSchema(schema => schema.WithIntrospectionComplexityImpact(0))\n);\n```\n\n----------------------------------------\n\nTITLE: RequestError Class\nDESCRIPTION: Base class for GraphQL request-related errors.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_93\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequestError : GraphQL.ExecutionError\n    {\n        public RequestError(string message) { }\n        public RequestError(string message, System.Exception? innerException) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Visitor Class\nDESCRIPTION: Implements a basic AST visitor class for GraphQL validation with support for multiple node visitors and state management.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_222\n\nLANGUAGE: C#\nCODE:\n```\npublic class BasicVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Validation.BasicVisitor.State>\n{\n    public BasicVisitor(params GraphQL.Validation.INodeVisitor[] visitors) { }\n    public BasicVisitor(System.Collections.Generic.IList<GraphQL.Validation.INodeVisitor> visitors) { }\n    public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, GraphQL.Validation.BasicVisitor.State context) { }\n    public readonly struct State : GraphQLParser.Visitors.IASTVisitorContext\n    {\n        public State(GraphQL.Validation.ValidationContext context) { }\n        public System.Threading.CancellationToken CancellationToken { get; }\n        public GraphQL.Validation.ValidationContext Context { get; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Type Description Interfaces\nDESCRIPTION: These interfaces define how GraphQL types can provide metadata like deprecation reason and description text.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_167\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideDeprecationReason\n{\n    string? DeprecationReason { get; set; }\n}\npublic interface IProvideDescription\n{\n    string? Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SchemaValidationVisitor Class Declaration\nDESCRIPTION: Defines a visitor for validating GraphQL schemas. This class overrides various visit methods from the base class to perform validation on different schema components.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_198\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class SchemaValidationVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public override void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public override void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public override void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitSchema(GraphQL.Types.ISchema schema) { }\n    public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }\n    public static void Run(GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: SimpleContainer Configuration\nDESCRIPTION: Example of configuring SimpleContainer for GraphQL.NET schema using FuncServiceProvider.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar container = new SimpleContainer();\ncontainer.Singleton(new StarWarsSchema(new FuncServiceProvider(container.Get)));\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Subscription Execution Strategy in C#\nDESCRIPTION: Class implementing subscription execution strategy with dependency injection support. Handles execution context cloning and processing of data and errors.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScopedSubscriptionExecutionStrategy : GraphQL.Execution.SubscriptionExecutionStrategy\n{\n    public ScopedSubscriptionExecutionStrategy(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory) { }\n    public ScopedSubscriptionExecutionStrategy(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.Execution.IExecutionStrategy executionStrategy) { }\n    protected override GraphQL.Execution.ExecutionContext CloneExecutionContext(GraphQL.Execution.ExecutionContext context, System.Threading.CancellationToken token) { }\n    protected override System.Threading.Tasks.ValueTask<GraphQL.ExecutionResult> ProcessDataAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, object? value) { }\n    protected override System.Threading.Tasks.Task<GraphQL.ExecutionError> ProcessErrorAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception exception) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Federation Resolver Base for GraphQL.NET\nDESCRIPTION: Generic version of federation resolver base that enforces type safety for parsed representations, simplifying implementation of type-specific entity resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_113\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class FederationResolverBase<TParsedType> : GraphQL.Federation.Resolvers.FederationResolverBase\n{\n    protected FederationResolverBase() { }\n    public override System.Type SourceType { get; }\n    public override System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IComplexGraphType graphType, object parsedRepresentation) { }\n    public abstract System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IComplexGraphType graphType, TParsedType parsedRepresentation);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Input Value in GraphQL.NET\nDESCRIPTION: Example of the JSON error response when an invalid string value is provided for an ID field that requires an integer. This error occurs during validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Invalid value for argument 'id' of field 'testMe'. The input string 'abc' was not in a correct format.\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 14\n        }\n      ],\n      \"extensions\": {\n        \"code\": \"INVALID_VALUE\",\n        \"codes\": [\n          \"INVALID_VALUE\",\n          \"FORMAT\"\n        ],\n        \"number\": \"5.6\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration in EditorConfig\nDESCRIPTION: Example showing how to disable the GQL016 rule using EditorConfig configuration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql016.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL016.severity = none\n```\n\n----------------------------------------\n\nTITLE: Implementing BigIntGraphType Scalar in C#\nDESCRIPTION: This class defines a scalar GraphQL type for big integers. It includes methods for parsing literals and values, and for determining if it can serialize lists.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_136\n\nLANGUAGE: C#\nCODE:\n```\npublic class BigIntGraphType : GraphQL.Types.ScalarGraphType\n{\n    public BigIntGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract ExecuteNodeTreeAsync Method Definition\nDESCRIPTION: Abstract method that requires implementation by derived classes to define how a node tree should be executed. Core method for traversing and executing nodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_80\n\nLANGUAGE: csharp\nCODE:\n```\npublic abstract System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode);\n```\n\n----------------------------------------\n\nTITLE: Enabling Synchronous IO in ASP.NET Core for GraphQL.NET with Newtonsoft.Json\nDESCRIPTION: Configuration to enable synchronous IO operations in ASP.NET Core when using GraphQL.NET with Newtonsoft.Json. Shows settings for both Kestrel and IIS server options.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// kestrel\nservices.Configure<KestrelServerOptions>(options =>\n{\n    options.AllowSynchronousIO = true;\n});\n\n// IIS\n services.Configure<IISServerOptions>(options =>\n{\n    options.AllowSynchronousIO = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Introspection Query Example in GraphQL\nDESCRIPTION: A sample introspection query that retrieves schema types and their fields. This query demonstrates how complexity is calculated for introspection queries, with a maximum depth of 4 but a total complexity of 0.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __schema {\n    types {\n      name\n      fields {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NewtonsoftJsonGraphQLBuilderExtensions for GraphQL.NET\nDESCRIPTION: Extension methods for IGraphQLBuilder to add Newtonsoft.Json support to the GraphQL.NET dependency injection system. It provides methods to configure and register Newtonsoft.Json serialization components.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic static class NewtonsoftJsonGraphQLBuilderExtensions\n{\n    public static GraphQL.DI.IGraphQLBuilder AddNewtonsoftJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.NewtonsoftJson.JsonSerializerSettings>? action = null) { }\n    public static GraphQL.DI.IGraphQLBuilder AddNewtonsoftJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.NewtonsoftJson.JsonSerializerSettings, System.IServiceProvider>? action) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OutputNameAttribute in C#\nDESCRIPTION: OutputNameAttribute is a class that inherits from GraphQLAttribute and is used to specify custom output names for GraphQL elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface)]\npublic class OutputNameAttribute : GraphQL.GraphQLAttribute\n{\n    public OutputNameAttribute(string name) { }\n    public string Name { get; set; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic ComplexityAttribute for GraphQL.NET Fields\nDESCRIPTION: Defines a generic attribute for specifying field complexity using a strongly-typed complexity analyzer. The analyzer must implement IFieldComplexityAnalyzer and have a parameterless constructor.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]\npublic class ComplexityAttribute<T> : GraphQL.GraphQLAttribute\n    where T :  class, GraphQL.Validation.Complexity.IFieldComplexityAnalyzer, new ()\n{\n    public ComplexityAttribute() { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: RootExecutionNode Class\nDESCRIPTION: Special execution node for the root of a GraphQL query execution tree.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_94\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RootExecutionNode : GraphQL.Execution.ObjectExecutionNode\n    {\n        public RootExecutionNode(GraphQL.Types.IObjectGraphType graphType, GraphQLParser.AST.GraphQLSelectionSet? selectionSet) { }\n        public override GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Simplified Apollo Federation GraphQL Schema\nDESCRIPTION: This snippet shows a simplified version of the GraphQL schema without imported types. It retains the essential @link directive and Query type definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.7.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], purpose: SECURITY, url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Rules with Dependency Injection in GraphQL.NET\nDESCRIPTION: Example showing how to add custom validation rules to GraphQL.NET using dependency injection. The AddValidationRule<T>() method registers a validation rule with the service collection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n  .AddSchema<MySchema>()\n  .AddSystemTextJson()\n  .AddValidationRule<RequiresAuthValidationRule>());\n```\n\n----------------------------------------\n\nTITLE: Defining FieldArgumentsValidationContext Struct in C#\nDESCRIPTION: Creates a struct for field argument validation context, containing properties for arguments, directives, field information, and methods for argument manipulation and error reporting.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_211\n\nLANGUAGE: C#\nCODE:\n```\npublic struct FieldArgumentsValidationContext\n{\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }\n    public GraphQLParser.AST.GraphQLField FieldAst { get; set; }\n    public GraphQL.Types.FieldType FieldDefinition { get; set; }\n    public GraphQL.Types.IGraphType? ParentType { get; }\n    public System.IServiceProvider? RequestServices { get; }\n    public GraphQL.Validation.ValidationContext ValidationContext { get; set; }\n    public T GetArgument<T>(string name, T defaultValue = default) { }\n    public void ReportError(GraphQL.Validation.ValidationError error) { }\n    public void SetArgument(string name, object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enumerations as Query Arguments in GraphQL\nDESCRIPTION: Shows a GraphQL query that uses an enumeration value as an argument to filter results. The query retrieves humans appearing in a specific Star Wars episode.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nquery HumansAppearingIn($episode: Episode!){\n    humans(appearsIn: $episode){\n        id\n        name\n        appearsIn\n    }\n}\n\n# example query variables:\n# {\n#   \"episode\":\"NEWHOPE\"\n```\n\n----------------------------------------\n\nTITLE: QueryMissingError Class\nDESCRIPTION: Error class for when a required GraphQL query is missing from the request.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_92\n\nLANGUAGE: csharp\nCODE:\n```\npublic class QueryMissingError : GraphQL.Execution.RequestError\n    {\n        public QueryMissingError() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Validation Error Classes in C#\nDESCRIPTION: Defines various validation error classes for handling different types of GraphQL validation errors, including argument validation, type checking, and field validation errors.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_230\n\nLANGUAGE: C#\nCODE:\n```\n[System.Serializable]\npublic class ArgumentsOfCorrectTypeError : GraphQL.Validation.ValidationError\n{\n    public ArgumentsOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, string verboseErrors) { }\n}\n\n[System.Serializable]\npublic class DefaultValuesOfCorrectTypeError : GraphQL.Validation.ValidationError\n{\n    public DefaultValuesOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition varDefAst, GraphQL.Types.IGraphType inputType, string verboseErrors) { }\n}\n\n// Additional validation error classes...\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationNameError Class\nDESCRIPTION: Serializable error class for invalid GraphQL operation names.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_86\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class InvalidOperationNameError : GraphQL.Execution.DocumentError\n    {\n        public InvalidOperationNameError(string operationName) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining IProvideDescription Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL types that can have descriptions. It provides the Description property for documenting types or fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_163\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideDescription\n{\n    string? Description { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SchemaPrinterOptions Class Declaration\nDESCRIPTION: Defines options for controlling the behavior of the SchemaPrinter. Includes properties for controlling inclusion of deprecation reasons and descriptions, and specifying a schema comparer.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_197\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SchemaPrinterOptions\n{\n    public SchemaPrinterOptions() { }\n    public GraphQL.Introspection.ISchemaComparer? Comparer { get; set; }\n    public bool IncludeDeprecationReasons { get; set; }\n    public bool IncludeDescriptions { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SubscriptionArrayExecutionNode Class Declaration\nDESCRIPTION: Execution node class specifically for array nodes in subscription operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_96\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SubscriptionArrayExecutionNode : GraphQL.Execution.ArrayExecutionNode\n    {\n```\n\n----------------------------------------\n\nTITLE: Code Fix Example in C#\nDESCRIPTION: Example showing how the automatic code fix transforms deprecated field definitions into the new builder pattern syntax.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql004.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"name\", \"description\", null,\n    context => \"text\");\n```\n\n----------------------------------------\n\nTITLE: Defining IMetadataReader Interface in GraphQL.NET\nDESCRIPTION: Interface for objects that can read metadata. It inherits from IProvideMetadata, providing access to metadata content.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_158\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMetadataReader : GraphQL.Types.IProvideMetadata { }\n```\n\n----------------------------------------\n\nTITLE: Introspection Types for GraphQL Schema\nDESCRIPTION: Defines special GraphQL types used for introspection queries. These types expose schema metadata including types, fields, directives, and other schema components.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_125\n\nLANGUAGE: C#\nCODE:\n```\npublic class @__Schema : GraphQL.Types.ObjectGraphType<GraphQL.Types.ISchema>\n{\n    public @__Schema(bool allowAppliedDirectives = false) { }\n}\n\npublic class @__Type : GraphQL.Types.ObjectGraphType<GraphQL.Types.IGraphType>\n{\n    public @__Type(bool allowAppliedDirectives = false) { }\n    public @__Type(bool allowAppliedDirectives = false, bool deprecationOfInputValues = false) { }\n}\n\npublic class @__Field : GraphQL.Types.ObjectGraphType<GraphQL.Types.IFieldType>\n{\n    public @__Field(bool allowAppliedDirectives = false) { }\n    public @__Field(bool allowAppliedDirectives = false, bool deprecationOfInputValues = false) { }\n}\n\npublic class @__InputValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.IMetadataReader>\n{\n    public @__InputValue(bool allowAppliedDirectives = false) { }\n    public @__InputValue(bool allowAppliedDirectives = false, bool deprecationOfInputValues = false) { }\n}\n\npublic class @__EnumValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.EnumValueDefinition>\n{\n    public @__EnumValue(bool allowAppliedDirectives = false) { }\n}\n\npublic class @__Directive : GraphQL.Types.ObjectGraphType<GraphQL.Types.Directive>\n{\n    public @__Directive(bool allowAppliedDirectives = false, bool allowRepeatable = false) { }\n}\n\npublic class @__TypeKind : GraphQL.Types.EnumerationGraphType<GraphQL.Introspection.TypeKind>\n{\n    public @__TypeKind() { }\n}\n\npublic class @__DirectiveLocation : GraphQL.Types.EnumerationGraphType<GraphQLParser.AST.DirectiveLocation>\n{\n    public @__DirectiveLocation() { }\n}\n\npublic class @__DirectiveArgument : GraphQL.Types.ObjectGraphType<GraphQL.Types.DirectiveArgument>\n{\n    public @__DirectiveArgument() { }\n}\n\npublic class @__AppliedDirective : GraphQL.Types.ObjectGraphType<GraphQL.Types.AppliedDirective>\n{\n    public @__AppliedDirective() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing OneOf Field Default Value in C# (Code-First)\nDESCRIPTION: This snippet demonstrates how to fix the GQL014 rule violation in a code-first approach by removing the default value from the OneOf input graph type field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql014.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserIdentifierInputGraphType : InputObjectGraphType<UserIdentifier>\n{\n    public UserIdentifierInputGraphType()\n    {\n        IsOneOf = true;\n        Field(x => x.NickName, nullable: true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Remaining Scalar References\nDESCRIPTION: Example of using ReplaceScalar extension method to replace any remaining references to the default Boolean scalar type after schema construction.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = Schema.For(...);\nschema.ReplaceScalar(new MyBooleanGraphType());\n```\n\n----------------------------------------\n\nTITLE: Configuring Persisted Documents with IPersistedDocumentLoader\nDESCRIPTION: Demonstrates how to configure persisted document support using a custom implementation of IPersistedDocumentLoader, which retrieves query strings based on document identifiers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\n// configure the execution to utilize persisted documents\nservices.AddGraphQL(b => b\n    // use default configuration, which disables the 'query' field and only allows SHA-256 hashes\n    .UsePeristedDocuments<MyLoader>(GraphQL.DI.ServiceLifetime.Scoped)\n);\n\n// configure a service to retrieve persisted documents based on their hash\npublic class MyLoader : IPersistedDocumentLoader\n{\n    // pull in dependencies via DI as needed\n\n    public async ValueTask<string?> GetQueryAsync(string? documentIdPrefix, string documentIdPayload, CancellationToken cancellationToken)\n    {\n        return await _db.QueryDocuments\n            .Where(x => x.Hash == documentIdPayload)\n            .Select(x => x.Query)\n            .FirstOrDefaultAsync(cancellationToken);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultAstValueAttribute for GraphQL.NET Fields and Arguments\nDESCRIPTION: Defines an attribute for specifying default AST (Abstract Syntax Tree) values for GraphQL fields, properties, and parameters. Used to provide default values in the schema definition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]\npublic class DefaultAstValueAttribute : GraphQL.GraphQLAttribute\n{\n    public DefaultAstValueAttribute(string astValue) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IValidationRule Interface in C#\nDESCRIPTION: Shows the updated IValidationRule interface structure with new methods GetPreNodeVisitorAsync, GetVariableVisitorAsync, and GetPostNodeVisitorAsync.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_55\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IValidationRule\n{\n    ValueTask<INodeVisitor?> GetPreNodeVisitorAsync(ValidationContext context);\n    ValueTask<IVariableVisitor?> GetVariableVisitorAsync(ValidationContext context);\n    ValueTask<INodeVisitor?> GetPostNodeVisitorAsync(ValidationContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET Field Naming Violations\nDESCRIPTION: Examples of incorrect field naming patterns that violate the GQL001 rule by using the Name method instead of providing names directly in constructor methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql001.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nField<StringGraphType>().Name(\"Name\");\nConnection<StringGraphType>().Name(\"Name\");\nConnectionBuilder<string>.Create<StringGraphType>().Name(\"Name\");\nConnectionBuilder.Create<StringGraphType, string>().Name(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: Parsing Vector3 Values from String or Structured Input in C#\nDESCRIPTION: Implements the ParseValue method for Vector3Type to handle both string and dictionary inputs. String inputs are parsed as comma-separated values, while dictionary inputs are processed by extracting x, y, and z properties.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// In Vector3Type\n\npublic override object? ParseValue(object? value)\n{\n    if (value == null)\n        return null;\n\n    if (value is string vector3InputString)\n    {\n        try\n        {\n            var vector3Parts = vector3InputString.Split(',');\n            var x = float.Parse(vector3Parts[0]);\n            var y = float.Parse(vector3Parts[1]);\n            var z = float.Parse(vector3Parts[2]);\n            return new Vector3(x, y, z);\n        }\n        catch\n        {\n            throw new FormatException($\"Failed to parse {nameof(Vector3)} from input '{vector3InputString}'. Input should be a string of three comma-separated floats in X Y Z order, ex. 1.0,2.0,3.0\");\n        }\n    }\n\n    if (value is IDictionary<string, object> dictionary)\n    {\n        try\n        {\n            var x = Convert.ToSingle(dictionary[\"x\"]);\n            var y = Convert.ToSingle(dictionary[\"y\"]);\n            var z = Convert.ToSingle(dictionary[\"z\"]);\n            if (dictionary.Count > 3)\n                return ThrowValueConversionError(value);\n            return new Vector3(x, y, z);\n        }\n        catch\n        {\n            throw new FormatException($\"Failed to parse {nameof(Vector3)} from object. Input should be an object of three floats named X Y and Z\");\n        }\n    }\n\n    return ThrowValueConversionError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Definition from Schema and Parent Type\nDESCRIPTION: Protected method that finds a field's definition given the schema, parent type, and field AST node. Returns the appropriate FieldType or null.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_81\n\nLANGUAGE: csharp\nCODE:\n```\nprotected GraphQL.Types.FieldType? GetFieldDefinition(GraphQL.Types.ISchema schema, GraphQL.Types.IComplexGraphType parentType, GraphQLParser.AST.GraphQLField field) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Resolver for GraphQL.NET Federation\nDESCRIPTION: Singleton field resolver for handling _entities queries in federation, resolving entity references by converting representations to their appropriate types and resolving them through the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_111\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class EntityResolver : GraphQL.Resolvers.IFieldResolver\n{\n    public static GraphQL.Federation.Resolvers.EntityResolver Instance { get; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Federation.Resolvers.Representation> ConvertRepresentations(GraphQL.Types.ISchema schema, System.Collections.IList representations) { }\n    public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Violating OneOf Field Nullability in Code-First GraphQL\nDESCRIPTION: Example showing incorrect implementation of OneOf input type with non-nullable fields in code-first approach.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql013.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class UserIdentifierInputGraphType : InputObjectGraphType<UserIdentifier>\n{\n    public UserIdentifierInputGraphType()\n    {\n        IsOneOf = true;\n\n        Field<NonNullGraphType<IdGraphType>>(\"id\");\n        Field(x => x.Name); // 'nullable' is false by default\n        Field(x => x.NickName, nullable: false);\n        Field(x => x.FullName, type: typeof(NonNullGraphType<StringGraphType>));\n        // 'nullable' is ignored when 'type' is defined\n        Field(x => x.Email, nullable: true, type: typeof(NonNullGraphType<StringGraphType>));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unhandled Exception Logging Delegate\nDESCRIPTION: Implementation of an unhandled exception delegate that logs errors to a database and returns the log ID with the error message.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar executer = new DocumentExecuter();\nvar result = executer.ExecuteAsync(options =>\n{\n\n    ...\n\n    options.UnhandledExceptionDelegate = async context =>\n    {\n        try\n        {\n            using var db = new MyDatabaseContext();\n            var errorLog = new ErrorLog {\n                DateStamp = DateTime.UtcNow,\n                Message = context.Exception.Message,\n                Details = context.Exception.ToString()\n            };\n            db.ErrorLogs.Add(errorLog);\n            await db.SaveChangesAsync();\n            context.Exception.Data[\"errorLogId\"] = errorLog.Id;\n        }\n        catch\n        {\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Custom AutoRegisteringObjectGraphType with Property Filtering\nDESCRIPTION: Demonstrates how to create a custom AutoRegisteringObjectGraphType class that overrides GetRegisteredProperties to filter properties based on attributes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyAutoType : AutoRegisteringObjectGraphType<SomeClassWithManyProperties>\n{\n    protected override IEnumerable<PropertyInfo> GetRegisteredProperties() => typeof(SomeClassWithManyProperties)\n        .GetProperties(BindingFlags.Public | BindingFlags.Instance).Where(p => Attribute.IsDefined(p, typeof(ForExportAttribute)));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Types for GraphQL Federation\nDESCRIPTION: This snippet defines a Post type marked with the @key directive to make it a federation entity. It also defines the Query type with federation-specific fields _entities and _service that are required for federation to function.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationSchemaFirst.1.0.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Post @key(fields: \"id\") {\n  title: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service!\n}\n\nscalar _Any\n\nunion _Entity = Post\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: InvalidOperationError Class\nDESCRIPTION: Serializable error class for invalid GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_85\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class InvalidOperationError : GraphQL.Execution.DocumentError\n    {\n        public InvalidOperationError(string message) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET List Conversion Interfaces and Implementation\nDESCRIPTION: Interfaces and classes for converting between list types in GraphQL. Provides functionality to convert arrays of objects to specific collection types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_64\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IListConverter\n{\n    System.Type ElementType { get; }\n    object Convert(object?[] list);\n}\n\npublic interface IListConverterFactory\n{\n    GraphQL.Conversion.IListConverter Create(System.Type listType);\n}\n\npublic sealed class ListConverter : GraphQL.Conversion.IListConverter\n{\n    public ListConverter(System.Type elementType, System.Func<object?[], object> converter) { }\n    public System.Type ElementType { get; }\n    public object Convert(object?[] list) { }\n}\n\npublic abstract class ListConverterFactoryBase : GraphQL.Conversion.IListConverterFactory\n{\n    protected ListConverterFactoryBase() { }\n    public virtual GraphQL.Conversion.IListConverter Create(System.Type listType) { }\n    public abstract System.Func<object?[], object> Create<T>();\n    protected virtual System.Type GetElementType(System.Type listType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: IProvideUserContext Interface\nDESCRIPTION: Interface for providing access to the user context dictionary in GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_84\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IProvideUserContext\n    {\n        System.Collections.Generic.IDictionary<string, object?> UserContext { get; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Error on GraphQL Execution Node\nDESCRIPTION: Protected virtual method for attaching an error to an execution node. Used to mark a node as having failed during execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_87\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void SetNodeError(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, GraphQL.ExecutionError error) { }\n```\n\n----------------------------------------\n\nTITLE: Example of GQL008 Violation in C#\nDESCRIPTION: These code snippets demonstrate the use of the obsolete 'Argument' method overload that triggers the GQL008 warning in GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql008.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"Text\").Argument<StringGraphType, string>(\n    \"arg\",\n    \"description\",\n    \"MyDefault\");\n\nField<StringGraphType>(\"Text\").Argument<StringGraphType, string>(\n    \"arg\",\n    \"description\",\n    \"MyDefault\",\n    argument => argument.DeprecationReason = \"Deprecation Reason\");\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing with System.Text.Json in GraphQL.NET v3\nDESCRIPTION: Example of executing a GraphQL request using System.Text.Json for JSON serialization and deserialization, which is newly supported in v3 and recommended for ASP.NET Core 3.0+ applications.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Text.Json;\n\nprivate static async Task ExecuteAsync(HttpContext context, ISchema schema)\n{\n    var request = await JsonSerializer.DeserializeAsync<GraphQLRequest>\n    (\n        context.Request.Body,\n        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }\n    );\n\n    var executer = new DocumentExecuter();\n    var result = await executer.ExecuteAsync(options =>\n    {\n        options.Schema = schema;\n        options.Query = request.Query;\n        options.OperationName = request.OperationName;\n        options.Inputs = request.Variables.ToInputs();\n    });\n\n    context.Response.ContentType = \"application/json\";\n    context.Response.StatusCode = 200; // OK\n\n    var writer = new GraphQL.SystemTextJson.DocumentWriter();\n    await writer.WriteAsync(context.Response.Body, result);\n}\n\npublic class GraphQLRequest\n{\n    public string OperationName { get; set; }\n\n    public string Query { get; set; }\n\n    [JsonConverter(typeof(GraphQL.SystemTextJson.ObjectDictionaryConverter))]\n    public Dictionary<string, object> Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IComplexGraphType Interface in C#\nDESCRIPTION: Defines the IComplexGraphType interface that represents GraphQL types with fields, such as object types, interface types, and input object types. It provides methods for managing fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_160\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IComplexGraphType : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.TypeFields Fields { get; }\n    GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType);\n    GraphQL.Types.FieldType? GetField(GraphQLParser.ROM name);\n    bool HasField(string name);\n}\n```\n\n----------------------------------------\n\nTITLE: Violating OneOf Field Default Value in C# (Code-First)\nDESCRIPTION: This snippet demonstrates a violation of the GQL014 rule in a code-first approach, where a OneOf input graph type field has a default value.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql014.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UserIdentifierInputGraphType : InputObjectGraphType<UserIdentifier>\n{\n    public UserIdentifierInputGraphType()\n    {\n        IsOneOf = true;\n        Field(x => x.NickName, nullable: true).DefaultValue(\"Joe\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeKind Enumeration for GraphQL Type Classification\nDESCRIPTION: Defines the TypeKind enumeration used in GraphQL introspection to classify different kinds of types such as scalar, object, interface, union, enum, input object, list, and non-null.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_121\n\nLANGUAGE: C#\nCODE:\n```\npublic enum TypeKind\n{\n    [System.ComponentModel.Description(\"Indicates this type is a scalar.\")]\n    SCALAR = 0,\n    [System.ComponentModel.Description(\"Indicates this type is an object. `fields` and `possibleTypes` are valid fields.\")]\n    OBJECT = 1,\n    [System.ComponentModel.Description(\"Indicates this type is an interface. `fields` and `possibleTypes` are valid field\" +\n        \"s.\")]\n    INTERFACE = 2,\n    [System.ComponentModel.Description(\"Indicates this type is a union. `possibleTypes` is a valid field.\")]\n    UNION = 3,\n    [System.ComponentModel.Description(\"Indicates this type is an enum. `enumValues` is a valid field.\")]\n    ENUM = 4,\n    [System.ComponentModel.Description(\"Indicates this type is an input object. `inputFields` is a valid field.\")]\n    INPUT_OBJECT = 5,\n    [System.ComponentModel.Description(\"Indicates this type is a list. `ofType` is a valid field.\")]\n    LIST = 6,\n    [System.ComponentModel.Description(\"Indicates this type is a non-null. `ofType` is a valid field.\")]\n    NON_NULL = 7,\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Printing Implementation with GraphQL-Parser\nDESCRIPTION: Code comparison showing migration from AstPrinter to SDLPrinter for GraphQL AST node printing, demonstrating both before and after implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nINode node = ...;\nstring s = AstPrinter.Print(node);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nASTNode node = ...;\nvar writer = new StringWriter();\nvar printer = new SDLPrinter();\nsdlPrinter.PrintAsync(node, writer).GetAwaiter().GetResult(); // actually is sync\nstring s = writer.ToString();\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition with Apollo Link and Custom Directives\nDESCRIPTION: A full GraphQL schema definition that imports directives from Apollo Federation and a custom specification. It includes directive definitions, scalar types, enums, and basic types for a Query interface.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.6.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/vX\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @vX__Directive1 on FIELD_DEFINITION\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n\ntype vX__Type1 {\n  field1: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Parsing Extensions with GraphQL Serializer in C#\nDESCRIPTION: Extension methods providing functionality to parse JSON inputs to GraphQL Inputs type and deserialize JSON data. Uses GraphQLSerializer with System.Text.Json implementation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing GraphQL;\nusing GraphQL.SystemTextJson;\n\npublic static class StringExtensions\n{\n    private static readonly GraphQLSerializer _serializer = new();\n\n    public static Inputs ToInputs(this string json)\n        => json == null ? Inputs.Empty : _serializer.Deserialize<Inputs>(json) ?? Inputs.Empty;\n\n    public static Inputs ToInputs(this System.Text.Json.JsonElement element)\n        => _serializer.ReadNode<Inputs>(element) ?? Inputs.Empty;\n\n    public static T? FromJson<T>(this string json)\n        => _serializer.Deserialize<T>(json);\n\n    public static System.Threading.Tasks.ValueTask<T?> FromJsonAsync<T>(this System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default)\n        => _serializer.ReadAsync<T>(stream, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parser Attribute in Type-First Schemas in GraphQL.NET\nDESCRIPTION: Examples of using the [Parser] attribute to define custom parsers in type-first schemas for both arguments and input fields. Shows different ways to reference parser methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// sample for argument parsing\npublic class OutputClass1\n{\n    // use local private static method\n    public static string Hello1([Parser(nameof(ParseHelloArgument))] string value) => value;\n\n    // use public static method from another class -- looks for ParserClass.Parse\n    public static string Hello2([Parser(typeof(ParserClass))] string value) => value;\n\n    // use public static method from another class with a specific name\n    public static string Hello3([Parser(typeof(HelperClass), nameof(HelperClass.ParseHelloArgument))] string value) => value;\n\n    // example custom parser\n    private static object ParseHelloArgument(object value) => (string)value + \"test1\";\n}\n\n// sample for input field parsing\npublic class InputClass1\n{\n    [Parser(nameof(ParseHelloArgument))]\n    public string? Field1 { get; set; }\n\n    private static object ParseHelloArgument(object value) => (string)value + \"test1\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Type for SDL\nDESCRIPTION: Defines a '_Service' type with an 'sdl' field of type String. This is typically used in federation to expose the service's schema definition language (SDL) for introspection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation2Schema.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BasicVisitor State Struct in C#\nDESCRIPTION: Defines a State struct for the BasicVisitor class, implementing the IASTVisitorContext interface. It encapsulates a ValidationContext and provides access to a CancellationToken.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_209\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct State : GraphQLParser.Visitors.IASTVisitorContext\n{\n    public State(GraphQL.Validation.ValidationContext context) { }\n    public System.Threading.CancellationToken CancellationToken { get; }\n    public GraphQL.Validation.ValidationContext Context { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Resolution for GraphQL Federation\nDESCRIPTION: Extension methods for GraphQL.NET interface and object types to implement entity resolution in federated schemas. These methods allow setting up reference resolvers using different return types and asynchronous patterns including direct returns, Tasks, and DataLoaderResults.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_114\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.IInterfaceGraphType<TSourceType> graphType, GraphQL.Federation.Resolvers.IFederationResolver resolver) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.IInterfaceGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TSourceType?>> resolver)\n    where TSourceType : new() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.IInterfaceGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TSourceType?>> resolver)\n    where TSourceType : new() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.IInterfaceGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, TSourceType?> resolver)\n    where TSourceType : new() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, GraphQL.Federation.Resolvers.IFederationResolver resolver) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TSourceType?>> resolver) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TSourceType?>> resolver) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, TSourceType?> resolver) { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.IInterfaceGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TReturnType?>> resolver)\n    where TSourceType : new() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.IInterfaceGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TReturnType?>> resolver)\n    where TSourceType : new() { }\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.IInterfaceGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, TReturnType?> resolver)\n    where TSourceType : new() { }\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL.NET Core Package\nDESCRIPTION: Command to install the core GraphQL library and execution engine using the .NET CLI.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package GraphQL\n```\n\n----------------------------------------\n\nTITLE: Authorization Extensions for GraphQL.NET\nDESCRIPTION: Provides extension methods for applying authorization rules to GraphQL types. Includes methods for allowing anonymous access, requiring authorization, and applying policy and role-based authorization rules.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class AuthorizationExtensions\n{\n    public const string ANONYMOUS_KEY = \"Authorization__AllowAnonymous\";\n    public const string AUTHORIZE_KEY = \"Authorization__Required\";\n    public const string POLICY_KEY = \"Authorization__Policies\";\n    public const string ROLE_KEY = \"Authorization__Roles\";\n    public static TMetadataProvider AllowAnonymous<TMetadataProvider>(this TMetadataProvider provider)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider Authorize<TMetadataProvider>(this TMetadataProvider provider)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider AuthorizeWithPolicy<TMetadataProvider>(this TMetadataProvider provider, string policy)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider AuthorizeWithRoles<TMetadataProvider>(this TMetadataProvider provider, string roles)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static TMetadataProvider AuthorizeWithRoles<TMetadataProvider>(this TMetadataProvider provider, params string[] roles)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    public static System.Collections.Generic.List<string>? GetPolicies(this GraphQL.Types.IMetadataReader provider) { }\n    public static System.Collections.Generic.List<string>? GetRoles(this GraphQL.Types.IMetadataReader provider) { }\n    public static bool IsAnonymousAllowed(this GraphQL.Types.IMetadataReader provider) { }\n    public static bool IsAuthorizationRequired(this GraphQL.Types.IMetadataReader provider) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Extension Methods in C#\nDESCRIPTION: Utility extension methods for working with GraphQL types, including type validation, metadata handling, and type comparison operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic static bool IsCompositeType(this GraphQL.Types.IGraphType type) { }\npublic static bool IsInputType(this GraphQL.Types.IGraphType type) { }\npublic static bool IsLeafType(this GraphQL.Types.IGraphType type) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Federated GraphQL Schema for Products and Categories\nDESCRIPTION: Defines a Product type as a Federation entity with @key directive, extends Category type, and adds products query. The schema establishes a relationship between products and categories while enabling distributed ownership through Federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation1Schema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product @key(fields: \"id\") {\n  category: Category!\n  id: ID!\n  name: String!\n}\n\nextend type Category @key(fields: \"id\") {\n  id: ID! @external\n  products: [Product!]!\n}\n\nextend type Query {\n  products: [Product!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplyToChildren Method in ArrayExecutionNode in C#\nDESCRIPTION: Method that applies an action to all child execution nodes with optional reverse traversal. This method handles execution node tree traversal for array type results.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }\n```\n\n----------------------------------------\n\nTITLE: ObjectExecutionNode Class\nDESCRIPTION: Execution node class for object types in GraphQL with support for subfields and child nodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_90\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ObjectExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode\n    {\n        public ObjectExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }\n        public virtual GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; }\n        public GraphQL.Execution.ExecutionNode[]? SubFields { get; set; }\n        public void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }\n        public GraphQL.Types.IObjectGraphType? GetObjectGraphType(GraphQL.Types.ISchema schema) { }\n        public override bool PropagateNull() { }\n        public override object? ToValue() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Fields for GraphQL Execution Node\nDESCRIPTION: Virtual method that collects and returns sub-fields for a given execution node. Returns a dictionary mapping field names to field and field type tuples.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_83\n\nLANGUAGE: csharp\nCODE:\n```\n[return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n                \"field\",\n                \"fieldType\"})]\npublic virtual System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? GetSubFields(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration in EditorConfig\nDESCRIPTION: Shows how to configure the severity of the GQL015 rule in an EditorConfig file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql015.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL015.severity = none\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL012 Warnings in C# Code\nDESCRIPTION: This snippet shows how to suppress GQL012 warnings using preprocessor directives in C# code. It demonstrates disabling and re-enabling the rule for a specific code block.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql012.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL012\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL012\n```\n\n----------------------------------------\n\nTITLE: Configuring Analyzer Rule Severity in .editorconfig\nDESCRIPTION: Shows how to set the severity level for GraphQL.NET analyzer rules in an .editorconfig file using the dotnet_diagnostic syntax.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndotnet_diagnostic.<rule ID>.severity = <severity>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Object Graph Type Classes\nDESCRIPTION: These classes implement input object types for GraphQL schemas, allowing for complex input arguments to be defined using C# objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_173\n\nLANGUAGE: C#\nCODE:\n```\npublic class InputObjectGraphType : GraphQL.Types.InputObjectGraphType<object>\n{\n    public InputObjectGraphType() { }\n}\npublic class InputObjectGraphType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields | System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties)]  TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInputObjectGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public InputObjectGraphType() { }\n    public bool IsOneOf { get; set; }\n    public override void Initialize(GraphQL.Types.ISchema schema) { }\n    public virtual bool IsValidDefault(object value) { }\n    public virtual object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value) { }\n    public virtual GraphQLParser.AST.GraphQLValue ToAST(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL013 Warning in C#\nDESCRIPTION: Example showing how to suppress the GQL013 rule warning using preprocessor directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql013.md#2025-04-21_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL013\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL013\n```\n\n----------------------------------------\n\nTITLE: Persisted Documents Configuration Extensions\nDESCRIPTION: Extension methods for setting up persisted document loading and configuration in GraphQL.NET.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions>? action) { }\n\npublic static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments<TLoader>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions, System.IServiceProvider>? action)\n    where TLoader : class, GraphQL.PersistedDocuments.IPersistedDocumentLoader { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Scalar GraphQL Types in C#\nDESCRIPTION: Implementation of various scalar GraphQL types including UIntGraphType, ULongGraphType, and UShortGraphType. These types handle parsing and serialization of unsigned integer values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_200\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UIntGraphType : GraphQL.Types.ScalarGraphType\n{\n    public UIntGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n\npublic class ULongGraphType : GraphQL.Types.ScalarGraphType\n{\n    public ULongGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n\npublic class UShortGraphType : GraphQL.Types.ScalarGraphType\n{\n    public UShortGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Violating Field Naming in GraphQL.NET\nDESCRIPTION: Examples of code that violate the GQL003 rule by using different names in Field/Connection declarations and Name method calls.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql003.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"Name1\").Name(\"Name2\");\nConnection<StringGraphType>(\"Name1\").Name(\"Name2\");\nConnectionBuilder<string>.Create<StringGraphType>(\"Name1\").Name(\"Name2\");\nConnectionBuilder.Create<StringGraphType, string>(\"Name1\").Name(\"Name2\");\n```\n\n----------------------------------------\n\nTITLE: Implementing FuncFederatedResolver in C#\nDESCRIPTION: Defines an obsolete FuncFederatedResolver class that implements FederationResolver and IFederatedResolver interfaces. It uses a func to resolve federated queries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_204\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the GraphQL.Federation.FederationResolver class instead. This class will be removed in v9.\")]\npublic class FuncFederatedResolver<TReturn> : GraphQL.Federation.Resolvers.FederationResolver<System.Collections.Generic.Dictionary<string, object?>, TReturn>, GraphQL.Utilities.Federation.IFederatedResolver\n{\n    public FuncFederatedResolver(System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<TReturn?>> func) { }\n    public System.Threading.Tasks.Task<object?> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionNode in C#\nDESCRIPTION: Defines an abstract ExecutionNode class representing a node in the GraphQL execution tree. It includes properties for field, graph type, and result handling.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class ExecutionNode\n{\n    protected ExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }\n    public GraphQLParser.AST.GraphQLField Field { get; }\n    public GraphQL.Types.FieldType FieldDefinition { get; }\n    public GraphQL.Types.IGraphType GraphType { get; }\n    public int? IndexInParentNode { get; }\n    public string? Name { get; }\n    public GraphQL.Execution.ExecutionNode Parent { get; }\n    public System.Collections.Generic.IEnumerable<object> Path { get; }\n    public System.Collections.Generic.IEnumerable<object> ResponsePath { get; }\n    public object? Result { get; set; }\n    public virtual object? Source { get; }\n    public GraphQL.Types.IObjectGraphType? GetParentType(GraphQL.Types.ISchema schema) { }\n    public virtual bool PropagateNull() { }\n    public abstract object? ToValue();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Document Listeners in GraphQL-DotNet 3.0\nDESCRIPTION: Shows how to modify document listeners to implement IDocumentExecutionListener instead of the generic version. Method signatures now accept an IExecutionContext parameter instead of separate userContext and cancellationToken parameters.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n//class MyListener : DocumentExecutionListenerBase<MyContext>\nclass MyListener : DocumentExecutionListenerBase\n{\n    //public virtual Task AfterValidationAsync(MyContext userContext, IValidationResult validationResult, CancellationToken token)\n    public Task AfterValidationAsync(IExecutionContext context, IValidationResult validationResult)\n    {\n        var myContext = (MyContext)context.userContext;\n\n        // log validation error\n\n        return Task.CompletedTask;\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IncludeDirective in GraphQL.NET\nDESCRIPTION: Implementation of the 'include' directive in GraphQL. It conditionally includes a field in the result based on a condition.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_168\n\nLANGUAGE: C#\nCODE:\n```\npublic class IncludeDirective : GraphQL.Types.Directive\n{\n    public IncludeDirective() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing DataLoader Nodes Asynchronously in C#\nDESCRIPTION: Protected method in ExecutionStrategy that completes execution of DataLoader nodes asynchronously, handling the deferred execution pattern used with DataLoader in GraphQL.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_75\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task CompleteDataLoaderNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Structure\nDESCRIPTION: Shows the standard syntax for a GraphQL query that fetches hero data including id and name fields.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/queries.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hero {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Types Removal Visitor\nDESCRIPTION: A visitor implementation that removes private types and fields from a GraphQL schema. It extends the base schema node visitor and overrides specific visit methods to handle removal logic for different schema elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_193\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class RemovePrivateTypesAndFieldsVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public static readonly GraphQL.Utilities.RemovePrivateTypesAndFieldsVisitor Instance;\n    public override void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }\n    public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }\n    public override void VisitSchema(GraphQL.Types.ISchema schema) { }\n    public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Lightweight Cache Implementation in C#\nDESCRIPTION: Defines a lightweight cache implementation for GraphQL.NET. This generic cache allows storing and retrieving values by key, supporting enumeration of stored values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_31\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LightweightCache<TKey, TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable\n    where TKey :  notnull\n{\n    public LightweightCache() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Apollo Federation GraphQL Schema\nDESCRIPTION: Complete GraphQL schema definition that implements Apollo Federation v2.0. It imports federation directives via the @link directive, defines all required federation directives, includes federation-specific scalars, and implements the required _service field on the Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.FederationTypeFirst.2.0.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.0\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  getPost: Post!\n  _service: _Service!\n}\n\nscalar _Any\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL006 Warning with Pragmas in C#\nDESCRIPTION: Example showing how to suppress the GQL006 warning for a specific code section using C# pragma directives. This is useful for intentional violations or special cases.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql006.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL006\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL006\n```\n\n----------------------------------------\n\nTITLE: IParentExecutionNode Interface\nDESCRIPTION: Interface for execution nodes that can have child nodes, providing methods to access and manipulate children.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_83\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IParentExecutionNode\n    {\n        void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false);\n        System.Collections.Generic.IEnumerable<GraphQL.Execution.ExecutionNode> GetChildNodes();\n    }\n```\n\n----------------------------------------\n\nTITLE: Processing Unhandled Exceptions in GraphQL Node Execution\nDESCRIPTION: Protected virtual method for handling exceptions that occur during node execution. Returns a boolean indicating whether the exception was handled.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_84\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task<bool> ProcessNodeUnhandledExceptionAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception ex) { }\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL018 Rule in Configuration File\nDESCRIPTION: This snippet demonstrates how to disable the GQL018 rule for a file, folder, or project by setting its severity to 'none' in the configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql018.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL018.severity = none\n```\n\n----------------------------------------\n\nTITLE: Defining DataLoaderPair Class for Tracking Keys and Results in GraphQL.NET\nDESCRIPTION: Internal class for tracking the relationship between a key and its result in a data loader. It implements IDataLoaderResult to provide access to the result.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class DataLoaderPair<TKey, T> : GraphQL.DataLoader.IDataLoaderResult, GraphQL.DataLoader.IDataLoaderResult<T>\n{\n    public DataLoaderPair(GraphQL.DataLoader.IDataLoader loader, TKey key) { }\n    public bool IsResultSet { get; }\n    public TKey Key { get; }\n    public T Result { get; }\n    public System.Threading.Tasks.Task<T> GetResultAsync(System.Threading.CancellationToken cancellationToken = default) { }\n    public void SetResult(T value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Graph Type Classes for GraphQL\nDESCRIPTION: These classes implement list types for GraphQL schemas, allowing arrays or collections of other types to be represented in the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_178\n\nLANGUAGE: C#\nCODE:\n```\npublic class ListGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType\n{\n    public ListGraphType(GraphQL.Types.IGraphType type) { }\n    public GraphQL.Types.IGraphType? ResolvedType { get; set; }\n    public virtual System.Type? Type { get; }\n    public override string ToString() { }\n}\npublic sealed class ListGraphType<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  T> : GraphQL.Types.ListGraphType\n    where T : GraphQL.Types.IGraphType\n{\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Correct OneOf Field Nullability in Type-First GraphQL\nDESCRIPTION: Example showing proper implementation of OneOf input type with nullable fields in type-first approach.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql013.md#2025-04-21_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\n[OneOf]\npublic class UserIdentifier\n{\n    public int? Id { get; set; }\n\n    // Nullable Reference Types (NRT) are fully supported\n#nullable enable\n    public string? Name { get; set; }\n#nullable restore\n}\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Directives in C#\nDESCRIPTION: Static method in ExecutionHelper that processes directives from a GraphQL node, resolving their arguments and creating DirectiveInfo objects for each directive.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_74\n\nLANGUAGE: csharp\nCODE:\n```\npublic static System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? GetDirectives(GraphQLParser.AST.IHasDirectivesNode node, GraphQL.Validation.Variables? variables, GraphQL.Types.ISchema schema, GraphQLParser.AST.GraphQLDocument document) { }\n```\n\n----------------------------------------\n\nTITLE: Defining OutputNameAttribute in GraphQL.NET\nDESCRIPTION: Attribute for specifying custom output names in GraphQL schemas. Can be applied to classes, structs, methods, properties, fields, or interfaces to override their default naming in GraphQL output types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface)]\npublic class OutputNameAttribute : GraphQL.GraphQLAttribute\n{\n    public OutputNameAttribute(string name) { }\n    public string Name { get; set; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Obsolete FederatedSchemaPrinter Class\nDESCRIPTION: Defines the deprecated FederatedSchemaPrinter class that extends SchemaPrinter with federation-specific functionality. Users are advised to use the schema.Print() extension method instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_210\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the schema.Print() extension method instead. This class will be remove\" +\n    \"d in v9.\")]\npublic class FederatedSchemaPrinter : GraphQL.Utilities.SchemaPrinter\n{\n    public FederatedSchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions? options = null) { }\n    public bool IsFederatedDirective(string directiveName) { }\n    public bool IsFederatedType(string typeName) { }\n    public string PrintAstDirective(GraphQLParser.AST.GraphQLDirective directive) { }\n    public string PrintFederatedDirectives(GraphQL.Types.IGraphType type) { }\n    public string PrintFederatedDirectivesFromAst(GraphQL.Types.IMetadataReader type) { }\n    public string PrintFederatedSchema() { }\n    public override string PrintFields(GraphQL.Types.IComplexGraphType type) { }\n    public override string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }\n    public override string PrintObject(GraphQL.Types.IObjectGraphType type) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OutputTypeAttribute in C#\nDESCRIPTION: OutputTypeAttribute is a class that inherits from GraphQLAttribute and is used to specify custom output types for GraphQL elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface)]\npublic class OutputTypeAttribute : GraphQL.GraphQLAttribute\n{\n    public OutputTypeAttribute(System.Type graphType) { }\n    public System.Type OutputType { get; set; }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n\npublic class OutputTypeAttribute<TGraphType> : GraphQL.OutputTypeAttribute\n    where TGraphType : GraphQL.Types.IGraphType\n{\n    public OutputTypeAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: SetNodeError Method\nDESCRIPTION: Protected virtual method for setting error information on an execution node.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_69\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void SetNodeError(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, GraphQL.ExecutionError error) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces Collection for GraphQL\nDESCRIPTION: The Interfaces class provides a collection for tracking interface implementations in GraphQL types, with methods for adding and checking interfaces.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_176\n\nLANGUAGE: C#\nCODE:\n```\npublic class Interfaces : System.Collections.Generic.IEnumerable<System.Type>, System.Collections.IEnumerable\n{\n    public Interfaces() { }\n    public int Count { get; }\n    public void Add(System.Type type) { }\n    public void Add<TInterface>()\n        where TInterface : GraphQL.Types.IInterfaceGraphType { }\n    public bool Contains(System.Type type) { }\n    public System.Collections.Generic.IEnumerator<System.Type> GetEnumerator() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Registration in GraphQL.NET\nDESCRIPTION: Extension methods for registering and configuring GraphQL schemas with dependency injection. Includes methods for adding schema visitors and configuring schema initialization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TSchema> schemaFactory, GraphQL.DI.ServiceLifetime serviceLifetime = 0)\n    where TSchema : class, GraphQL.Types.ISchema { }\n```\n\n----------------------------------------\n\nTITLE: UShort Scalar Type Implementation in C#\nDESCRIPTION: Implementation of an unsigned short scalar type for GraphQL.NET with parsing and serialization capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_184\n\nLANGUAGE: C#\nCODE:\n```\npublic class UShortGraphType : GraphQL.Types.ScalarGraphType\n{\n    public UShortGraphType() { }\n    public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Complexity Analyzer in GraphQL.NET\nDESCRIPTION: Basic setup for the Complexity Analyzer with configuration for maximum depth and complexity limits using dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema>()\n    .AddComplexityAnalyzer(c => {\n        c.MaxDepth = 10;\n        c.MaxComplexity = 100;\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: DataLoader Service Registration\nDESCRIPTION: Configuration code to register DataLoader services in the dependency injection container\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/dataloader.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddDataLoader()\n    // other configurations\n);\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Animal Queries\nDESCRIPTION: This snippet defines the main schema structure with a Query type. It includes fields for querying animal data, including a deprecated field for counting all animals.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.Defaults.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema {\n  query: Query\n}\n\ntype Query {\n  animal: Pet\n  allAnimalsCount: [Int!] @deprecated(reason: \"do not touch!\")\n  catsGroups: [[Cat!]!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageInfo Type for Pagination Metadata\nDESCRIPTION: A type containing pagination information such as cursors and hasNextPage/hasPreviousPage flags for connection-based pagination.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\n\"Information about pagination in a connection.\"\ntype PageInfo {\n  \"When paginating forwards, the cursor to continue.\"\n  endCursor: String\n  \"When paginating forwards, are there more items?\"\n  hasNextPage: Boolean!\n  \"When paginating backwards, are there more items?\"\n  hasPreviousPage: Boolean!\n  \"When paginating backwards, the cursor to continue.\"\n  startCursor: String\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of IGraphType as Resolver Return Type\nDESCRIPTION: This example shows an incorrect implementation where StringGraphType (which implements IGraphType) is used as the return type of a resolver.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql011.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyGraphType : ObjectGraphType\n{\n    public MyGraphType()\n    {\n        Field<StringGraphType>(\"name\")\n            .Returns<StringGraphType>()\n            .Resolve(context => null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ExecutionResult Data Conversion in C#\nDESCRIPTION: Demonstrates how to convert ExecutionResult.Data to the pre-v7 dictionary format using ToValue() method on ExecutionNode.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n((ExecutionNode)result.Data).ToValue()\n```\n\n----------------------------------------\n\nTITLE: NoIntrospection Validation Rule Implementation in C#\nDESCRIPTION: Implementation of a validation rule to prevent introspection queries. Includes a static instance property and a deprecated constructor. The class extends ValidationRuleBase and implements pre-node visitor functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_238\n\nLANGUAGE: C#\nCODE:\n```\npublic class NoIntrospectionValidationRule : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.Custom.NoIntrospectionValidationRule Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor \" +\n        \"will be removed in v9.\")]\n    public NoIntrospectionValidationRule() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Field Naming Using New Name\nDESCRIPTION: Alternative fix that maintains consistency by using the new name in the Field/Connection declaration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql003.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"Name2\");\nConnection<StringGraphType>(\"Name2\");\nConnectionBuilder<string>.Create<StringGraphType>(\"Name2\");\nConnectionBuilder.Create<StringGraphType, string>(\"Name2\");\n```\n\n----------------------------------------\n\nTITLE: Array Pooling Example in Field Resolution\nDESCRIPTION: Shows how to use array pooling in field resolvers to optimize memory usage when returning lists of data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nresolve: context =>\n{\n    var ints = context.ArrayPool.Rent<int>(1000); // ints.Length >= 1000\n    for (int i=0; i<1000; ++i)\n        ints[i] = i;\n    return ints.Constrained(1000); // extension method to return an array or array-like object of a given length\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Illegal Method Usage in GraphQL.NET FieldBuilder\nDESCRIPTION: This snippet shows examples of illegal method usage in different graph types using FieldBuilder. It includes violations for input, interface, and output graph types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql012.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<User>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"Name\")\n            // Argument is only allowed on output and interface types\n            // but used on input type\n            .Argument<BooleanGraphType>(\"fullName\");\n    }\n}\n\npublic class MyInterfaceGraphType : InputObjectGraphType<User>\n{\n    public MyInterfaceGraphType()\n    {\n        Field<StringGraphType>(\"Name\")\n            // Resolve is only allowed on output types\n            // but used on input type\n            .Resolve(context => context.Source.Name);\n    }\n}\n\npublic class MyOutput : ObjectGraphType<User>\n{\n    public MyOutput()\n    {\n        Field<StringGraphType>(\"Name\")\n            // Validate is only allowed on input types\n            // but used on output type\n            .Validate(name =>\n            {\n                if (((string)name).Length < 20)\n                    throw new InvalidOperationException();\n            })\n            .Resolve(context => context.Source.Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjectGraphType<TSourceType> in C#\nDESCRIPTION: Defines a generic ObjectGraphType class with methods for adding interfaces and resolving types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_184\n\nLANGUAGE: C#\nCODE:\n```\npublic class ObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata\n{\n    public ObjectGraphType() { }\n    public GraphQL.Types.Interfaces Interfaces { get; }\n    public System.Func<object, bool>? IsTypeOf { get; set; }\n    public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }\n    public bool SkipTypeCheck { get; set; }\n    public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }\n    public void Interface(System.Type type) { }\n    public void Interface<TInterface>()\n        where TInterface : GraphQL.Types.IInterfaceGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL007 Rule in EditorConfig\nDESCRIPTION: Configuration example for disabling the GQL007 rule entirely for specific files using the .editorconfig file format.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql007.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL007.severity = none\n```\n\n----------------------------------------\n\nTITLE: Implementing Uppercase Directive Visitor in GraphQL.NET\nDESCRIPTION: This snippet implements a schema visitor for the @upper directive in GraphQL.NET, which modifies the field resolver to convert string values to uppercase.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/directives.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class UppercaseDirectiveVisitor : BaseSchemaNodeVisitor\n{\n    public override void VisitFieldDefinition(FieldType field, IObjectGraphType type, ISchema schema)\n    {\n        var applied = field.FindAppliedDirective(\"upper\");\n        if (applied != null)\n        {\n            var inner = field.Resolver ?? NameFieldResolver.Instance;\n            field.Resolver = new AsyncFieldResolver<object>(async context =>\n            {\n                object result = await inner.ResolveAsync(context);\n\n                return result is string str\n                    ? str.ToUpperInvariant()\n                    : result;\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OutputTypeAttribute in GraphQL.NET\nDESCRIPTION: Attribute for explicitly specifying the output GraphQL type for a property or field. Can be applied to classes, structs, methods, properties, fields, or interfaces to define their GraphQL type representation in outputs.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface)]\npublic class OutputTypeAttribute : GraphQL.GraphQLAttribute\n{\n    public OutputTypeAttribute(System.Type graphType) { }\n    public System.Type OutputType { get; set; }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom GraphQL Directives\nDESCRIPTION: This snippet declares custom directives, including imported and aliased directives. These directives can be used on field definitions in the schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamed.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @aliasC on FIELD_DEFINITION\n\ndirective @customC__testC on FIELD_DEFINITION\n\ndirective @exampleA__testA on FIELD_DEFINITION\n\ndirective @exampleB__testB on FIELD_DEFINITION\n\ndirective @failB on FIELD_DEFINITION\n\ndirective @importedA on FIELD_DEFINITION\n\ndirective @importedB on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema with Apollo Link\nDESCRIPTION: A minimal GraphQL schema definition that uses Apollo link directives but omits the imported types. It only includes the schema definition with link imports and a basic Query type with a dummy field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.4.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\", \"Import\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: GetSubFields Method with Tuple Return\nDESCRIPTION: Virtual method that retrieves subfields for a GraphQL execution node, returning a dictionary with field and field type tuples.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_65\n\nLANGUAGE: csharp\nCODE:\n```\n[return: System.Runtime.CompilerServices.TupleElementNames(new string[] {\n                \"field\",\n                \"fieldType\"})]\npublic virtual System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? GetSubFields(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }\n```\n\n----------------------------------------\n\nTITLE: Non-Null List Type Examples\nDESCRIPTION: JavaScript examples showing valid and invalid values for a Non-Null List of Strings field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/lists-non-null.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyField: null // error\nmyField: [] // valid\nmyField: ['a', 'b'] // valid\nmyField: ['a', null, 'b'] // valid\n```\n\n----------------------------------------\n\nTITLE: Defining NoOperationNameError Class for GraphQL Errors\nDESCRIPTION: Error class for when no operation name is specified but multiple operations exist in the document. Used to indicate that an operation name is required.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_106\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class NoOperationNameError : GraphQL.Execution.DocumentError\n    {\n        public NoOperationNameError() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Fragment Condition Match in GraphQL Execution\nDESCRIPTION: Method that evaluates whether a fragment condition matches a specific GraphQL type. Used during execution to determine if fragments should be included.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_77\n\nLANGUAGE: csharp\nCODE:\n```\nprotected bool DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext context, GraphQLParser.ROM fragmentName, GraphQL.Types.IGraphType type) { }\n```\n\n----------------------------------------\n\nTITLE: GraphQL.NET DataLoader Result Interfaces\nDESCRIPTION: Interfaces for handling data loader results in GraphQL.NET. DataLoader is a pattern for batching and caching database operations to optimize GraphQL query execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_66\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IDataLoaderResult\n{\n    System.Threading.Tasks.Task<object?> GetResultAsync(System.Threading.CancellationToken cancellationToken = default);\n}\n\npublic interface IDataLoaderResult<T> : GraphQL.DataLoader.IDataLoaderResult\n{\n    System.Threading.Tasks.Task<T> GetResultAsync(System.Threading.CancellationToken cancellationToken = default);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Self-Activating Service Provider\nDESCRIPTION: Service provider implementation that wraps another service provider and handles service activation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class SelfActivatingServiceProvider : System.IServiceProvider\n{\n    public SelfActivatingServiceProvider(System.IServiceProvider serviceProvider) { }\n    public object? GetService(System.Type serviceType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Complexity Impact on GraphQL Field\nDESCRIPTION: Example of configuring a field's impact towards the total complexity factor, which allows the complexity analyzer to operate in terms of 'database calls' or similar metrics.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration7.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nField<IntGraphType>(\"id\").WithComplexityImpact(123);\n```\n\n----------------------------------------\n\nTITLE: Invalid Parser Method Example in C#\nDESCRIPTION: Example showing incorrect usage where Parser attribute references a non-existent Parse method instead of the actual ParseValue method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql017.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [Parser(typeof(Parsers), \"Parse\")]\n    public string Hello { get; set; }\n}\n\npublic static class Parsers\n{\n    public static object ParseValue(object value) => value;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeSettings Class Declaration\nDESCRIPTION: Provides methods for configuring GraphQL type settings. Includes methods for including different types and configuring type metadata through TypeConfig objects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_202\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TypeSettings\n{\n    public TypeSettings() { }\n    public GraphQL.Utilities.TypeConfig For(string typeName) { }\n    public GraphQL.Utilities.TypeSettings ForAll(System.Action<GraphQL.Utilities.TypeConfig> configure) { }\n    public void Include(System.Type type) { }\n    public void Include(string name, System.Type type) { }\n    public void Include(System.Type type, System.Type typeOfType) { }\n    public void Include(string name, System.Type type, System.Type typeOfType) { }\n    public void Include<TType>() { }\n    public void Include<TType>(string name) { }\n    public void Include<TType, TTypeOfType>() { }\n    public void Include<TType, TTypeOfType>(string name) { }\n}\n```\n\n----------------------------------------\n\nTITLE: NoOperationNameError Class\nDESCRIPTION: Serializable error class for when no operation name is provided but is required.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_88\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class NoOperationNameError : GraphQL.Execution.DocumentError\n    {\n        public NoOperationNameError() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL011 Rule in Configuration File\nDESCRIPTION: This example shows how to disable the GQL011 rule for a file, folder, or project by setting its severity to 'none' in the configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql011.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL011.severity = none\n```\n\n----------------------------------------\n\nTITLE: Implementing Inject Typename Validation Rule for GraphQL.NET Federation\nDESCRIPTION: Validation rule for federation that checks for __typename field injection. This class will be removed in GraphQL.NET v9 and is marked as obsolete.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_104\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"This class will be removed in GraphQL.NET v9.\")]\npublic class InjectTypenameValidationRule : GraphQL.Validation.INodeVisitor, GraphQL.Validation.IValidationRule\n{\n    public InjectTypenameValidationRule() { }\n    public System.Threading.Tasks.ValueTask EnterAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }\n    public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    public System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n    public System.Threading.Tasks.ValueTask LeaveAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Field Resolvers in C#\nDESCRIPTION: Classes for handling field resolution with generic type parameters. Includes support for both source-typed and non-source-typed resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScopedFieldResolver<TReturnType> : GraphQL.Resolvers.FuncFieldResolver<TReturnType>\n{\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext, TReturnType?> resolver) { }\n}\n\npublic class ScopedFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.FuncFieldResolver<TReturnType>\n{\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }\n    public ScopedFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom GraphQL Directives\nDESCRIPTION: Declares custom directives for GraphQL federation, including @extends, @external, @key, @provides, and @requires. These directives are used to define relationships and behaviors in a federated GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation2Schema.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\ndirective @extends on INTERFACE | OBJECT\n\ndirective @external on FIELD_DEFINITION\n\ndirective @key(fields: String!) on INTERFACE | OBJECT\n\ndirective @provides(fields: String!) on FIELD_DEFINITION\n\ndirective @requires(fields: String!) on FIELD_DEFINITION\n```\n\n----------------------------------------\n\nTITLE: Vector3 ParseValue Implementation\nDESCRIPTION: Implements parsing of Vector3 from variable values, converting string representation to Vector3 object.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic override object? ParseValue(object? value)\n{\n    if (value == null)\n        return null;\n\n    if (value is string vector3InputString)\n    {\n        try\n        {\n            var vector3Parts = vector3InputString.Split(',');\n            var x = float.Parse(vector3Parts[0]);\n            var y = float.Parse(vector3Parts[1]);\n            var z = float.Parse(vector3Parts[2]);\n            return new Vector3(x, y, z);\n        }\n        catch\n        {\n            throw new FormatException($\"Failed to parse {nameof(Vector3)} from input '{vector3InputString}'. Input should be a string of three comma-separated floats in X Y Z order, ex. 1.0,2.0,3.0\");\n        }\n    }\n\n    return ThrowValueConversionError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadonlyResolveFieldContext in C#\nDESCRIPTION: ReadonlyResolveFieldContext is a class that implements various interfaces and provides a read-only context for resolving fields in GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReadonlyResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object?>\n{\n    public ReadonlyResolveFieldContext(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }\n    public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }\n    public System.Threading.CancellationToken CancellationToken { get; }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }\n    public GraphQLParser.AST.GraphQLDocument Document { get; }\n    public GraphQL.ExecutionErrors Errors { get; }\n    public GraphQL.Execution.IExecutionContext ExecutionContext { get; }\n    public GraphQLParser.AST.GraphQLField FieldAst { get; }\n    public GraphQL.Types.FieldType FieldDefinition { get; }\n    public System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }\n    public GraphQL.Instrumentation.Metrics Metrics { get; }\n    public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with @link Directives\nDESCRIPTION: Shows the resulting GraphQL schema structure after applying @link directives, including the schema-level directives and their import syntax.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\nschema\n  @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"])\n  @link(url: \"https://specs.apollo.dev/federation/v2.3\", as: \"fed\", import: [\"@key\", {name:\"@shareable\", as:\"@share\"}]) {\n    # etc\n}\n\ndirective @link(url: String!, as: String, import: [link__Import], purpose: link__Purpose) repeatable on SCHEMA\n\nscalar link__Import\n\nenum link__Purpose {\n  EXECUTION\n  SECURITY\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RequestError Base Class for GraphQL Request Errors\nDESCRIPTION: Base error class for issues with the GraphQL request itself rather than with execution. Provides constructors for message and inner exception.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_111\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequestError : GraphQL.ExecutionError\n    {\n        public RequestError(string message) { }\n        public RequestError(string message, System.Exception? innerException) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining ResolveFieldContext Class in GraphQL.NET\nDESCRIPTION: A class that implements IResolveFieldContext and IResolveFieldContext<object?> interfaces. It provides context for resolving fields in a GraphQL query, including access to arguments, directives, schema, and execution context.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object?>\n{\n    public ResolveFieldContext() { }\n    public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; set; }\n    public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; set; }\n    public System.Threading.CancellationToken CancellationToken { get; set; }\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; set; }\n    public GraphQLParser.AST.GraphQLDocument Document { get; set; }\n    public GraphQL.ExecutionErrors Errors { get; set; }\n    public GraphQL.Execution.IExecutionContext ExecutionContext { get; set; }\n    public GraphQLParser.AST.GraphQLField FieldAst { get; set; }\n    public GraphQL.Types.FieldType FieldDefinition { get; set; }\n    public System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; set; }\n    public GraphQL.Instrumentation.Metrics Metrics { get; set; }\n    public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> OutputExtensions { get; set; }\n    public GraphQL.IResolveFieldContext? Parent { get; set; }\n    public GraphQL.Types.IObjectGraphType ParentType { get; set; }\n    public System.Collections.Generic.IEnumerable<object> Path { get; set; }\n    public System.IServiceProvider? RequestServices { get; set; }\n    public System.Collections.Generic.IEnumerable<object> ResponsePath { get; set; }\n    public object? RootValue { get; set; }\n    public GraphQL.Types.ISchema Schema { get; set; }\n    public object? Source { get; set; }\n    [System.Runtime.CompilerServices.TupleElementNames(new string[] {\n            \"Field\",\n            \"FieldType\"})]\n    public System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? SubFields { get; set; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; set; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }\n    public GraphQL.Validation.Variables Variables { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IProvideDeprecationReason Interface in GraphQL.NET\nDESCRIPTION: Interface for GraphQL types that can be deprecated. It provides the DeprecationReason property for marking types or fields as deprecated.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_162\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IProvideDeprecationReason\n{\n    string? DeprecationReason { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Attribute for GraphQL Fields\nDESCRIPTION: Attribute class for marking GraphQL fields as scoped, modifying field type configuration during schema building.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method)]\npublic class ScopedAttribute : GraphQL.GraphQLAttribute\n{\n    public ScopedAttribute() { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Coercing GraphQL Values to ArgumentValues in C#\nDESCRIPTION: Static method in ExecutionHelper that handles coercion of GraphQL values into typed ArgumentValue objects, supporting variables and default values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_71\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphQL.Execution.ArgumentValue CoerceValue(GraphQL.Types.IGraphType type, GraphQLParser.AST.GraphQLValue? input, GraphQL.Validation.Variables? variables = null, object? fieldDefault = null) { }\n```\n\n----------------------------------------\n\nTITLE: ComplexityAttribute for Specifying GraphQL.NET Field Complexity\nDESCRIPTION: Defines an attribute for specifying the complexity impact of GraphQL fields. Supports fixed complexity values, child impact multipliers, and custom complexity analyzers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]\npublic class ComplexityAttribute : GraphQL.GraphQLAttribute\n{\n    public ComplexityAttribute(double fieldImpact) { }\n    public ComplexityAttribute(System.Type fieldComplexityAnalyzer) { }\n    public ComplexityAttribute(double fieldImpact, double childImpactMultiplier) { }\n    public double? ChildImpactMultiplier { get; }\n    public System.Type? FieldComplexityAnalyzer { get; }\n    public double? FieldImpact { get; }\n    public override void Modify(GraphQL.Utilities.FieldConfig field) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dog Type in GraphQL Schema\nDESCRIPTION: This snippet defines the Dog type with a single field for the dog's age.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.Defaults.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n\" A dog\"\ntype Dog {\n  \" dog's age\"\n  age: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Resolution Extensions in C#\nDESCRIPTION: Extension methods for resolving GraphQL fields with scoped execution context. Includes both synchronous and asynchronous resolution methods.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveScoped<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveScopedAsync<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultValuesOfCorrectType Validation Rule in C#\nDESCRIPTION: Defines the DefaultValuesOfCorrectType validation rule class. It includes a static instance and an obsolete constructor. The class overrides the GetPreNodeVisitorAsync method to provide custom validation logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_224\n\nLANGUAGE: C#\nCODE:\n```\npublic class DefaultValuesOfCorrectType : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.DefaultValuesOfCorrectType Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor \" +\n        \"will be removed in v9.\")]\n    public DefaultValuesOfCorrectType() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Entity Resolution Response in JSON\nDESCRIPTION: A sample GraphQL response showing entity resolution with Products and Users. The _entities field returns a heterogeneous list of resolved entities with their respective types indicated by __typename. Each entity includes associated reviews with bidirectional relationships.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample3Tests.Entities.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"_entities\": [\n      {\n        \"__typename\": \"Product\",\n        \"id\": \"1\",\n        \"reviews\": [\n          {\n            \"id\": \"1\",\n            \"content\": \"Review 1\",\n            \"product\": {\n              \"id\": \"1\"\n            },\n            \"author\": {\n              \"id\": \"1\"\n            }\n          },\n          {\n            \"id\": \"2\",\n            \"content\": \"Review 2\",\n            \"product\": {\n              \"id\": \"1\"\n            },\n            \"author\": {\n              \"id\": \"2\"\n            }\n          }\n        ]\n      },\n      {\n        \"__typename\": \"User\",\n        \"id\": \"1\",\n        \"reviews\": [\n          {\n            \"id\": \"1\",\n            \"content\": \"Review 1\",\n            \"product\": {\n              \"id\": \"1\"\n            },\n            \"author\": {\n              \"id\": \"1\"\n            }\n          },\n          {\n            \"id\": \"3\",\n            \"content\": \"Review 3\",\n            \"product\": {\n              \"id\": \"2\"\n            },\n            \"author\": {\n              \"id\": \"1\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IFederatedResolver Interface in C#\nDESCRIPTION: Declares an obsolete IFederatedResolver interface with a Resolve method for handling federated resolve contexts.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_205\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use IFederationResolver instead. This interface will be removed in v9.\")]\npublic interface IFederatedResolver\n{\n    System.Threading.Tasks.Task<object?> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct OneOf Field Nullability in Code-First GraphQL\nDESCRIPTION: Example showing proper implementation of OneOf input type with nullable fields in code-first approach.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql013.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic class UserIdentifierInputGraphType : InputObjectGraphType<UserIdentifier>\n{\n    public UserIdentifierInputGraphType()\n    {\n        IsOneOf = true;\n\n        Field<IdGraphType>(\"id\");\n        Field(x => x.Name, nullable: true); // 'nullable' is false by default\n        Field(x => x.NickName, nullable: true);\n        Field(x => x.FullName, type: typeof(StringGraphType));\n        // 'nullable' is ignored when 'type' is defined\n        Field(x => x.Email, nullable: true, type: typeof(StringGraphType));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running GraphQL .NET Documentation Locally\nDESCRIPTION: Commands to install dependencies and start the documentation development server locally using Yarn package manager.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn develop\n```\n\n----------------------------------------\n\nTITLE: Setting Sub-Field Nodes for Object Execution\nDESCRIPTION: Protected virtual method that establishes the child nodes for an object execution node. Creates the node structure for fields of an object.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_88\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void SetSubFieldNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode parent) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Connection Resolver Builder with Microsoft DI\nDESCRIPTION: Generic class for building GraphQL connection resolvers with Microsoft DI support. Handles basic resolution with optional service injection and scoping.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ConnectionResolverBuilder<TSourceType, TReturnType>\n{\n    public ConnectionResolverBuilder(GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }\n    public GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType> WithScope() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1> WithService<T1>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2> WithServices<T1, T2>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2, T3> WithServices<T1, T2, T3>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4> WithServices<T1, T2, T3, T4>() { }\n    public GraphQL.MicrosoftDI.ConnectionResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> WithServices<T1, T2, T3, T4, T5>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Type in GraphQL\nDESCRIPTION: Defines available mutations including creating new humans.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.StarWarsSchema.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createHuman(human: HumanInput!): Human\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an EnumerationGraphType from a .NET Enum\nDESCRIPTION: Shows how to create a GraphQL enum type using a .NET enum as its source. This automatically maps the enum values to GraphQL enum values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/schema-types.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EpisodeEnum : EnumerationGraphType<Episodes>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Types\nDESCRIPTION: A simplified version of the GraphQL schema that uses the Apollo Federation @link directive but omits the imported type definitions. This shows the minimal schema structure needed when imports are handled externally.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.5.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\", {as: \"LinkPurpose\", name: \"Purpose\"}], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Input Object Definition\nDESCRIPTION: Defines an input object type 'ExampleInputTagged' with string and integer fields for use in GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"INPUT_OBJECT\",\n  \"name\": \"ExampleInputTagged\",\n  \"inputFields\": [\n    {\n      \"name\": \"a\",\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"String\"\n      }\n    },\n    {\n      \"name\": \"b\",\n      \"type\": {\n        \"kind\": \"SCALAR\",\n        \"name\": \"Int\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of GQL010 Violations in C#\nDESCRIPTION: Examples of input classes that violate the GQL010 rule by having either non-public constructors or multiple public parameterized constructors without a GraphQLConstructorAttribute.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql010.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// no public constructor\npublic class MyInput1\n{\n    internal MyInput1(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n\n// multiple public parametrized constructors\npublic class MyInput2\n{\n    public MyInput2(string name)\n    {\n        Name = name;\n    }\n\n    public MyInput2(int age)\n    {\n        Age = age;\n    }\n\n    public string? Name { get; set; }\n    public int Age { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL Endpoint Configuration\nDESCRIPTION: Sets up a custom GraphQL endpoint URL for GraphiQL to send queries to, instead of the default /graphql endpoint.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/graphiql.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar graphiQLOptions = new GraphiQLOptions { GraphQLEndPoint = \"/my/own/graphql/endpoint\" }\napp.UseGraphQLGraphiQL(options: graphiQLOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Configuration for GraphQL Schemas\nDESCRIPTION: Class for configuring links between GraphQL schemas, providing methods to manage imports, namespaces, and purpose. It includes functionality for resolving names for directives and types across linked schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_188\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class LinkConfiguration\n{\n    public LinkConfiguration(string url) { }\n    public System.Collections.Generic.Dictionary<string, string> Imports { get; }\n    public string? Namespace { get; set; }\n    public GraphQL.Types.Scalars.LinkPurpose? Purpose { get; set; }\n    public string Url { get; }\n    public string NameForDirective(string directiveName) { }\n    public string NameForType(string typeName) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Resolver Builder with DataLoader Support\nDESCRIPTION: Field resolver builder that supports both synchronous and asynchronous resolvers with DataLoader integration. Provides methods for injecting services and managing resolver scope.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType> WithScope() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1> WithService<T1>() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2> WithServices<T1, T2>() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3> WithServices<T1, T2, T3>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Node Visitor Interface in C#\nDESCRIPTION: Interface defining methods for visiting different parts of a GraphQL schema structure. This follows the visitor pattern, allowing operations to be performed on various schema components including directives, enums, objects, interfaces, and scalars.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_187\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ISchemaNodeVisitor\n{\n    void PostVisitSchema(GraphQL.Types.ISchema schema);\n    void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema);\n    void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema);\n    void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);\n    void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);\n    void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);\n    void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);\n    void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema);\n    void VisitSchema(GraphQL.Types.ISchema schema);\n    void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Override\nDESCRIPTION: Example showing how to override the default error message for specific exception types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UnhandledExecutionDelegate = ctx =>\n{\n    if (ctx.Exception is SqlException)\n        ctx.ErrorMessage = \"A database error has occurred.\";\n};\n```\n\n----------------------------------------\n\nTITLE: Violating GraphQL.NET Field and Connection Declarations\nDESCRIPTION: Examples of code that violates the GQL002 rule by having redundant Name method calls after Field, Connection, and ConnectionBuilder declarations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql002.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nField<StringGraphType>(\"Name\").Name(\"Name\");\nConnection<StringGraphType>(\"Name\").Name(\"Name\");\nConnectionBuilder<string>.Create<StringGraphType>(\"Name\").Name(\"Name\");\nConnectionBuilder.Create<StringGraphType, string>(\"Name\").Name(\"Name\");\n```\n\n----------------------------------------\n\nTITLE: Using SteroidsDI with Defer<T> for Scoped Service Resolution\nDESCRIPTION: Example showing how to use SteroidsDI's Defer<T> pattern to safely inject and resolve scoped services in GraphQL field resolvers at runtime using the current scope provider.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsQuery : ObjectGraphType\n{\n  // #1 - Add dependencies using Defer<T>\n  public StarWarsQuery(Defer<IDroidRepo> repoFactory)\n  {\n    Field<DroidType>(\"hero\")\n        // #2 Resolve dependencies using current scope provider\n        .Resolve(context => repoFactory.Value.GetDroid(\"R2-D2\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Interface Metadata Extensions\nDESCRIPTION: Extension methods for adding federation metadata to interface types, particularly for key management with optional resolvability.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_116\n\nLANGUAGE: csharp\nCODE:\n```\npublic static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string[] fields, bool resolvable = true)\n    where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IInterfaceGraphType { }\npublic static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string fields, bool resolvable = true)\n    where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IInterfaceGraphType { }\n```\n\n----------------------------------------\n\nTITLE: Implementing FragmentsOnCompositeTypes Validation Rule in C#\nDESCRIPTION: Defines the FragmentsOnCompositeTypes validation rule class. It includes a static instance and an obsolete constructor. The class overrides the GetPreNodeVisitorAsync method to provide custom validation logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_227\n\nLANGUAGE: C#\nCODE:\n```\npublic class FragmentsOnCompositeTypes : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.FragmentsOnCompositeTypes Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor \" +\n        \"will be removed in v9.\")]\n    public FragmentsOnCompositeTypes() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolverBuilder<TSourceType, TReturnType, T1, T2, T3> in C#\nDESCRIPTION: Generic resolver builder class that injects three dependencies from Microsoft DI. Provides methods for defining resolvers with three injected services.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net50/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType, T1, T2, T3>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3> WithScope() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4> WithService<T4>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NoClrMapping Extension for Custom Input Field Mapping\nDESCRIPTION: Demonstrates the NoClrMapping extension for custom input field mapping in GraphQL.NET. This feature allows excluding fields from automatic CLR mapping and implementing custom mapping logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public string FullName { get; set; } = string.Empty;\n    public int Age { get; set; }\n}\n\npublic class PersonInputType : InputObjectGraphType<Person>\n{\n    public PersonInputType()\n    {\n        Name = \"PersonInput\";\n\n        // Define fields for 'firstName' and 'lastName' that are not automatically mapped.\n        Field<NonNullGraphType<StringGraphType>>(\"firstName\").NoClrMapping();\n        Field<NonNullGraphType<StringGraphType>>(\"lastName\").NoClrMapping();\n\n        // Define the 'age' field which is automatically mapped to Person.Age.\n        Field(x => x.Age);\n    }\n\n    public override object ParseDictionary(IDictionary<string, object?> value)\n    {\n        // Use base.ParseDictionary to handle automatic mapping (e.g., Age).\n        var person = (Person)base.ParseDictionary(value);\n\n        // Manually combine firstName and lastName into FullName.\n        if (value.TryGetValue(\"firstName\", out var firstNameObj) && firstNameObj is string firstName &&\n            value.TryGetValue(\"lastName\", out var lastNameObj) && lastNameObj is string lastName)\n        {\n            person.FullName = $\"{firstName} {lastName}\";\n        }\n\n        return person;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayExecutionNode PropagateNull and ToValue Methods in C#\nDESCRIPTION: Overridden methods in the ArrayExecutionNode class that handle null propagation logic and value conversion for array results in GraphQL execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_69\n\nLANGUAGE: csharp\nCODE:\n```\npublic override bool PropagateNull() { }\npublic override object? ToValue() { }\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Builder with Microsoft DI Integration\nDESCRIPTION: Class that extends GraphQLBuilderBase to provide Microsoft DI integration. Implements service registration and configuration capabilities.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class GraphQLBuilder : GraphQL.DI.GraphQLBuilderBase, GraphQL.DI.IServiceRegister, Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Collections.Generic.ICollection<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>, System.Collections.Generic.IEnumerable<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>, System.Collections.Generic.IList<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>, System.Collections.IEnumerable\n{\n    public GraphQLBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<GraphQL.DI.IGraphQLBuilder>? configure) { }\n    public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; }\n    public override GraphQL.DI.IServiceRegister Services { get; }\n    public GraphQL.DI.IServiceRegister Configure<TOptions>(System.Action<TOptions, System.IServiceProvider>? action = null)\n        where TOptions :  class, new () { }\n    public GraphQL.DI.IServiceRegister Register(System.Type serviceType, object implementationInstance, bool replace = false) { }\n    public GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false) { }\n    public GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false) { }\n    protected override void RegisterDefaultServices() { }\n    public GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, object implementationInstance, GraphQL.DI.RegistrationCompareMode mode = 0) { }\n    public GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0) { }\n    public GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema Without Imported Types\nDESCRIPTION: A simplified version of the GraphQL schema that still imports directives but does not include the full definitions of the imported types. This shows the minimal schema structure needed when using imported directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AllowsDoubleConfiguration.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@key\", {as: \"@share\", name: \"@shareable\"}], url: \"https://spec.example.com/example\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveFederationTypesVisitor for Schema Cleaning\nDESCRIPTION: Implements a visitor that removes federation-specific types from a GraphQL schema. It handles document nodes and object type definitions to clean federation-related elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_218\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class RemoveFederationTypesVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context>\n{\n    protected override System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }\n    protected override System.Threading.Tasks.ValueTask VisitObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }\n    protected override System.Threading.Tasks.ValueTask VisitObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLObjectTypeExtension objectTypeExtension, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }\n    public static void Visit(GraphQLParser.AST.ASTNode node) { }\n    public struct Context : GraphQLParser.Visitors.IASTVisitorContext\n    {\n        public System.Threading.CancellationToken CancellationToken { get; }\n        public GraphQLParser.ROM QueryTypeName { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Without Imported Types\nDESCRIPTION: This snippet shows a simplified version of the GraphQL schema without imported types. It retains the basic structure, custom directives, and type definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.7.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ntype example__Type1 {\n  field1: String\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MapAutoClrTypeAttribute in C#\nDESCRIPTION: MapAutoClrTypeAttribute is a sealed class that inherits from System.Attribute and is used to mark classes for automatic CLR type mapping.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)]\npublic sealed class MapAutoClrTypeAttribute : System.Attribute\n{\n    public MapAutoClrTypeAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Types\nDESCRIPTION: This snippet shows a simplified version of the GraphQL schema without the imported types and directives. It retains the core structure with the Query type and a custom directive.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.1.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example/v1.0/\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Suppression in C#\nDESCRIPTION: Example showing how to suppress the GQL004 warning using preprocessor directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql004.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL004\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL004\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoaderResult for Wrapping Task Results in GraphQL.NET\nDESCRIPTION: Wraps a task or result as an IDataLoaderResult, allowing data loader results to be used in GraphQL field resolvers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class DataLoaderResult<T> : GraphQL.DataLoader.IDataLoaderResult, GraphQL.DataLoader.IDataLoaderResult<T>\n{\n    public DataLoaderResult(System.Threading.Tasks.Task<T> result) { }\n    public DataLoaderResult(T result) { }\n    public System.Threading.Tasks.Task<T> GetResultAsync(System.Threading.CancellationToken cancellationToken = default) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Complexity Analysis Structures in C#\nDESCRIPTION: Defines structures for handling field complexity calculations including FieldComplexityResult and FieldImpactContext. These structures contain properties for tracking field impact and child multipliers in GraphQL queries.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_228\n\nLANGUAGE: C#\nCODE:\n```\npublic struct FieldComplexityResult\n{\n    public FieldComplexityResult(double fieldImpact, double childImpactMultiplier) { }\n    public double ChildImpactMultiplier { get; set; }\n    public double FieldImpact { get; set; }\n}\n\npublic struct FieldImpactContext\n{\n    public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }\n    public GraphQL.Validation.Complexity.ComplexityOptions Configuration { get; }\n    public GraphQLParser.AST.GraphQLField FieldAst { get; set; }\n    public GraphQL.Types.FieldType FieldDefinition { get; set; }\n    public GraphQL.Validation.Complexity.FieldImpactContext? Parent { get; }\n    public GraphQL.Types.IGraphType ParentType { get; set; }\n    public GraphQL.Validation.ValidationContext ValidationContext { get; }\n    public TType GetArgument<TType>(string name, TType defaultValue = default) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Extensions for GraphQL Type Information\nDESCRIPTION: Extension methods for working with .NET Type objects in GraphQL context, including attribute retrieval and type mapping functionality\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TypeExtensions\n{\n    public static object? DefaultValue(this System.Reflection.MemberInfo memberInfo) { }\n    public static string? Description(this System.Reflection.MemberInfo memberInfo) { }\n    public static string? Description(this System.Reflection.ParameterInfo parameterInfo) { }\n    public static System.Collections.Generic.IEnumerable<GraphQL.GraphQLAttribute> GetGraphQLAttributes(this System.Reflection.MemberInfo memberInfo) { }\n    public static System.Collections.Generic.IEnumerable<GraphQL.GraphQLAttribute> GetGraphQLAttributes(this System.Reflection.ParameterInfo parameterInfo) { }\n    public static System.Type GetGraphTypeFromType(this System.Type type, bool isNullable = false, GraphQL.TypeMappingMode mode = 0) { }\n    public static string GraphQLName(this System.Type type) { }\n    public static bool ImplementsGenericType(this System.Type type, System.Type genericType) { }\n    public static bool IsGraphType(this System.Type type) { }\n    public static string? ObsoleteMessage(this System.Reflection.MemberInfo memberInfo) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Schema without Imported Definitions\nDESCRIPTION: Displays the printed schema without imported definitions, showing only the schema-level @link directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\nschema\n  @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"])\n  @link(url: \"https://specs.apollo.dev/federation/v2.3\", as: \"fed\", import: [\"@key\", {name:\"@shareable\", as:\"@share\"}]) {\n    # etc\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic InputTypeAttribute in GraphQL.NET\nDESCRIPTION: Generic version of InputTypeAttribute that allows for strongly-typed GraphQL input type specification. It inherits from InputTypeAttribute and constrains the type parameter to IGraphType.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\npublic class InputTypeAttribute<TGraphType> : GraphQL.InputTypeAttribute\n    where TGraphType : GraphQL.Types.IGraphType\n{\n    public InputTypeAttribute() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Named GraphQL Type from AST Type Using TypeExtensions\nDESCRIPTION: Extension method to find the named IGraphType from an AST GraphQLType. This differs from GraphTypeFromType by specifically returning the named type without any wrappers like NonNull or List types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_192\n\nLANGUAGE: csharp\nCODE:\n```\npublic static GraphQL.Types.IGraphType? NamedGraphTypeFromType(this GraphQLParser.AST.GraphQLType type, GraphQL.Types.ISchema schema) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Obsolete LegacyComplexityResult Class in C#\nDESCRIPTION: Defines an obsolete class for complexity analysis in GraphQL.NET that will be removed in v9. This class tracks query complexity, complexity mapping, and total query depth.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_221\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the new complexity analyzer. This class will be removed in v9.\")]\npublic class LegacyComplexityResult\n{\n    public LegacyComplexityResult() { }\n    public double Complexity { get; set; }\n    public System.Collections.Generic.Dictionary<GraphQLParser.AST.ASTNode, double> ComplexityMap { get; }\n    public int TotalQueryDepth { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Complexity Analyzer in C#\nDESCRIPTION: Example of how to use the legacy complexity analyzer instead of the new v8 implementation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_58\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MyQuery>()\n    .AddLegacyComplexityAnalyzer(c => c.MaxComplexity = 100)\n);\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidOperationNameError Class for GraphQL Errors\nDESCRIPTION: Error class for when an invalid operation name is specified in a GraphQL request. Used when the named operation doesn't exist in the document.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_104\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class InvalidOperationNameError : GraphQL.Execution.DocumentError\n    {\n        public InvalidOperationNameError(string operationName) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Resolver Builder with Microsoft DI\nDESCRIPTION: Generic class for building GraphQL field resolvers with Microsoft DI support. Includes support for async resolution and data loader integration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType> WithScope() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1> WithService<T1>() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2> WithServices<T1, T2>() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3> WithServices<T1, T2, T3>() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4> WithServices<T1, T2, T3, T4>() { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> WithServices<T1, T2, T3, T4, T5>() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Query example for flat structure in GraphQL\nDESCRIPTION: Example of a GraphQL query using the flat structure, directly accessing the 'products' field on the Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-organization.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  products {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a flat Query structure in GraphQL SDL\nDESCRIPTION: This example shows a typical flat Query structure in GraphQL SDL where all fields are defined directly on the Query type. This approach can lead to bloat as the schema grows.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/query-organization.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  customer(id: ID): Customer\n  order(id: ID): Order\n  products: [Product]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation Example in C#\nDESCRIPTION: Example of a class that correctly implements IFieldComplexityAnalyzer interface without any constructor, satisfying the GQL016 rule.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql016.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyComplexityAnalyzer : IFieldComplexityAnalyzer\n{\n    public FieldComplexityResult Analyze(FieldImpactContext context)\n    {\n        return new FieldComplexityResult(10, 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Imported Types\nDESCRIPTION: Complete GraphQL schema definition showing Apollo Federation link directive with imported types, including Purpose enum and link__Import scalar. Defines basic Query type with dummy field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.3.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\", \"Purpose\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [link__Import], purpose: Purpose, url: String!) repeatable on SCHEMA\n\nscalar link__Import\n\nenum Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Member Access Expression Example in C#\nDESCRIPTION: Shows the correct way to define a field using a simple member access expression that allows name inference.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql015.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\np => p.FirstName\n```\n\n----------------------------------------\n\nTITLE: Inferring Field Nullability from NRT Annotations\nDESCRIPTION: Example of how nullability is inferred from Null Reference Types (NRT) annotations when defining fields, which is enabled by default and can be controlled via a global switch.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_32\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Person\n{\n    public string FullName { get; set; }\n    public string? SpouseName { get; set; }\n    public IList<string>? Children { get; set; }\n}\n\npublic class PersonGraphType : ObjectGraphType<Person>\n{\n    public PersonGraphType()\n    {\n        Field(p => p.FullName);\n        Field(p => p.SpouseName);\n        Field(p => p.Children);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing OneOf Field Default Value in C# (Type-First)\nDESCRIPTION: This snippet shows how to fix the GQL014 rule violation in a type-first approach by removing the default value attribute from the OneOf input type field.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql014.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[OneOf]\npublic class UserIdentifier\n{\n    public string? Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Standard Directives Definition\nDESCRIPTION: Definition of standard GraphQL directives including @include, @skip, and @deprecated. Specifies the directive locations, arguments, and their descriptions for schema-level usage.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"directives\": [\n  {\n    \"name\": \"include\",\n    \"description\": \"Directs the executor to include this field or fragment only when the 'if' argument is true.\",\n    \"locations\": [\n      \"FIELD\",\n      \"FRAGMENT_SPREAD\",\n      \"INLINE_FRAGMENT\"\n    ],\n    \"args\": [\n      {\n        \"name\": \"if\",\n        \"description\": \"Included when true.\",\n        \"type\": {\n          \"kind\": \"NON_NULL\",\n          \"name\": null,\n          \"ofType\": {\n            \"kind\": \"SCALAR\",\n            \"name\": \"Boolean\",\n            \"ofType\": null\n          }\n        },\n        \"defaultValue\": null\n      }\n    ]\n  },\n  {\n    \"name\": \"skip\",\n    \"description\": \"Directs the executor to skip this field or fragment when the 'if' argument is true.\",\n    \"locations\": [\n      \"FIELD\",\n      \"FRAGMENT_SPREAD\",\n      \"INLINE_FRAGMENT\"\n    ],\n    \"args\": [\n      {\n        \"name\": \"if\",\n        \"description\": \"Skipped when true.\",\n        \"type\": {\n          \"kind\": \"NON_NULL\",\n          \"name\": null,\n          \"ofType\": {\n            \"kind\": \"SCALAR\",\n            \"name\": \"Boolean\",\n            \"ofType\": null\n          }\n        },\n        \"defaultValue\": null\n      }\n    ]\n  },\n  {\n    \"name\": \"deprecated\",\n    \"description\": \"Marks an element of a GraphQL schema as no longer supported.\",\n    \"locations\": [\n      \"FIELD_DEFINITION\",\n      \"ENUM_VALUE\"\n    ],\n    \"args\": [\n      {\n        \"name\": \"reason\",\n        \"description\": \"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).\",\n        \"type\": {\n          \"kind\": \"SCALAR\",\n          \"name\": \"String\",\n          \"ofType\": null\n        },\n        \"defaultValue\": \"\\\"No longer supported\\\"\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: URI Scalar Type Implementation in C#\nDESCRIPTION: Implementation of a URI scalar type for GraphQL.NET with parsing and serialization support.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_186\n\nLANGUAGE: C#\nCODE:\n```\npublic class UriGraphType : GraphQL.Types.ScalarGraphType\n{\n    public UriGraphType() { }\n    public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }\n    public override object? ParseValue(object? value) { }\n    public override object? Serialize(object? value) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Persisted Documents with Options Class\nDESCRIPTION: Shows how to configure persisted documents with more customization using the options class, including custom document identifier formats and allowing regular queries alongside persisted documents.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\n// configure the execution to utilize persisted documents\nservices.AddGraphQL(b => b\n    .UsePeristedDocuments(options =>\n    {\n        // enable regular queries also\n        options.AllowNonpersistedDocuments = true;\n        // use custom document identifiers and disable sha256 prefixed identifiers\n        options.AllowedPrefixes.Clear()\n        options.AllowedPrefixes.Add(null); // unprefixed document identifiers\n        // configure the service to retrieve persisted documents\n        options.GetQueryDelegate = async (executionOptions, documentIdPrefix, documentIdPayload) =>\n        {\n            if (!Guid.TryParse(documentIdPayload, out var id))\n                return null;\n            var db = executionOptions.RequestServices!.GetRequiredService<MyDbContext>();\n            return await db.QueryDocuments\n                .Where(x => x.Id == id)\n                .Select(x => x.Query)\n                .FirstOrDefaultAsync(executionOptions.CancellationToken);\n        };\n    });\n);\n```\n\n----------------------------------------\n\nTITLE: ExecutionNode Data Propagation in C#\nDESCRIPTION: Demonstrates the required order of operations when working with ExecutionNode, where PropagateNull must be called before ToValue.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nExecutionNode.PropagateNull()\nExecutionNode.ToValue()\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Export Methods in C#\nDESCRIPTION: Collection of protected virtual methods for exporting various GraphQL schema elements like directives, arguments, and type definitions to AST nodes\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_204\n\nLANGUAGE: C#\nCODE:\n```\nprotected virtual GraphQLParser.AST.GraphQLDirective ExportAppliedDirective(GraphQL.Types.AppliedDirective appliedDirective) { }\nprotected virtual GraphQLParser.AST.GraphQLArgument ExportAppliedDirectiveArgument(GraphQL.Types.Directive directive, GraphQL.Types.DirectiveArgument argument) { }\nprotected virtual GraphQLParser.AST.GraphQLArgumentDefinition ExportArgumentDefinition(GraphQL.Types.QueryArgument argument) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Link Scalar and Enum Types in C#\nDESCRIPTION: GraphQL scalar and enum types for Federation link handling. Includes a custom scalar for link imports and an enum for link purposes with security and execution values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_197\n\nLANGUAGE: csharp\nCODE:\n```\npublic class LinkImportGraphType : GraphQL.Federation.Types.AnyScalarGraphType\n{\n    public LinkImportGraphType() { }\n}\n\n[GraphQL.Types.ConstantCase]\npublic enum LinkPurpose\n{\n    [System.ComponentModel.Description(\"`SECURITY` features provide metadata necessary to securely resolve fields.\")]\n    Security = 0,\n    [System.ComponentModel.Description(\"`EXECUTION` features provide metadata necessary for operation execution.\")]\n    Execution = 1,\n}\n\npublic class LinkPurposeGraphType : GraphQL.Types.EnumerationGraphType<GraphQL.Types.Scalars.LinkPurpose>\n{\n    public LinkPurposeGraphType() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema with Apollo Federation Link Directive\nDESCRIPTION: A simplified version of the GraphQL schema that includes only the Apollo Federation @link directive and a basic Query type, without the imported types. This demonstrates the minimal setup required for federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.1.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL008 Rule in Configuration File\nDESCRIPTION: This INI configuration snippet shows how to disable the GQL008 rule for a file, folder, or project by setting its severity to 'none' in the configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql008.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL008.severity = none\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL002 Warnings in C#\nDESCRIPTION: Code showing how to suppress the GQL002 warning using C# preprocessor directives for specific code sections.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql002.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL002\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL002\n```\n\n----------------------------------------\n\nTITLE: GetOperationRootType Method in Execution Strategy\nDESCRIPTION: Protected virtual method that returns the root type for a GraphQL operation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_64\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual GraphQL.Types.IObjectGraphType GetOperationRootType(GraphQL.Execution.ExecutionContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing ResolverBuilder for GraphQL .NET with Multiple Generic Parameters\nDESCRIPTION: This snippet defines ResolverBuilder classes with varying numbers of generic parameters. Each class provides methods for resolving fields synchronously and asynchronously, supporting data loaders and dependency injection.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5>\n{\n    public ResolverBuilder(GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, bool scoped) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, TReturnType?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, GraphQL.DataLoader.IDataLoaderResult<GraphQL.DataLoader.IDataLoaderResult<TReturnType>>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, GraphQL.DataLoader.IDataLoaderResult<TReturnType>?> resolver) { }\n    public GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, T1, T2, T3, T4, T5, System.Threading.Tasks.Task<TReturnType?>> resolver) { }\n    public GraphQL.MicrosoftDI.ResolverBuilder<TSourceType, TReturnType, T1, T2, T3, T4, T5> WithScope() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query with Custom Multipliers\nDESCRIPTION: Example GraphQL query showing complexity calculation with custom multipliers and detailed impact analysis.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {            #  impact   multiplier   total impact   child multiplier   depth\n  users {          #     1          1             1                100          1\n    id             #     1        100           101                             2\n    posts {        #     1        100           201                  7          2\n      id           #     1        700           901                             3\n      comments {   #     1        700          1601                  7          3\n        id         #     1       4900          6501                             4\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Introspection Queries in Complexity Validation with C#\nDESCRIPTION: Custom complexity validation delegate that detects and ignores introspection queries during complexity validation. This allows introspection queries to bypass depth limits that might otherwise block them.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/complexity-analyzer.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ncomplexityConfig.ValidateComplexityDelegate = async (context) =>\n{\n    if (IsIntrospectionRequest(context.ValidationContext))\n    {\n        context.Error = null; // ignore complexity errors\n    }\n\n    static bool IsIntrospectionRequest(ValidationContext validationContext)\n    {\n        return validationContext.Document.Definitions.OfType<GraphQLOperationDefinition>().All(\n            op => op.Operation == OperationType.Query && op.SelectionSet.Selections.All(\n                node => node is GraphQLField field && (field.Name.Value == \"__schema\" || field.Name.Value == \"__type\")));\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating UserContext to Dictionary-Based Implementation in GraphQL.NET v3\nDESCRIPTION: Example showing how to modify a custom UserContext class to inherit from Dictionary<string, object> to comply with v3's IDictionary<string, object> requirement for user contexts.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration3.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n//class MyContext\nclass MyContext : Dictionary<string, object>\n{\n    public DbContext MyDbContext { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NullExecutionNode Class for Null Values\nDESCRIPTION: Execution node class that represents a null value in the GraphQL result. Extends ExecutionNode with null-specific behavior.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_107\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NullExecutionNode : GraphQL.Execution.ExecutionNode\n    {\n        public NullExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }\n        public override object? ToValue() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL001 Warnings in C#\nDESCRIPTION: Code demonstrating how to suppress GQL001 warnings using preprocessor directives in C# code.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql001.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL001\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL001\n```\n\n----------------------------------------\n\nTITLE: GraphQL Request JSON Sample (PascalCase)\nDESCRIPTION: Example of a GraphQL request in JSON format using PascalCase property names, which works with Newtonsoft.Json but fails with System.Text.Json due to its case sensitivity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Query\": \"query ($arg: Int!) { field1(arg: $arg) { childField } }\",\n    \"Variables\": {\n        \"arg\": 55\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Obsolete FederatedSchema Class\nDESCRIPTION: Defines the deprecated FederatedSchema class with static methods to create a federated GraphQL schema from type definitions. Users are advised to use Schema.For with graphQlBuilder.AddFederation() instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_208\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use Schema.For with graphQlBuilder.AddFederation() instead. This class wil\" +\n    \"l be removed in v9.\")]\npublic class FederatedSchema\n{\n    public FederatedSchema() { }\n    public static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.Federation.FederatedSchemaBuilder>? configure = null) { }\n    public static GraphQL.Types.Schema For<TFederatedSchemaBuilder>(string typeDefinitions, System.Action<TFederatedSchemaBuilder>? configure = null)\n        where TFederatedSchemaBuilder : GraphQL.Utilities.Federation.FederatedSchemaBuilder, new () { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Introspection JSON Response\nDESCRIPTION: JSON response from a GraphQL schema introspection query showing the structure of a GraphQL .NET server schema. It defines the schema's query type, types, fields, and their relationships. The response includes detailed type definitions for __Schema, __Type, and other introspection types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"__schema\": {\n      \"description\": null,\n      \"queryType\": {\n        \"name\": \"Query\"\n      },\n      \"mutationType\": null,\n      \"subscriptionType\": null,\n      \"types\": [\n        {\n          \"kind\": \"OBJECT\",\n          \"name\": \"__Schema\",\n          \"description\": \"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.\",\n          \"fields\": [\n            {\n              \"name\": \"description\",\n              \"description\": null,\n              \"args\": [],\n              \"type\": {\n                \"kind\": \"SCALAR\",\n                \"name\": \"String\",\n                \"ofType\": null\n              },\n              \"isDeprecated\": false,\n              \"deprecationReason\": null\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IExecutionArrayPool Interface for Memory Management\nDESCRIPTION: Interface that defines an array pool for reusing arrays during GraphQL execution, potentially reducing memory allocations and garbage collection pressure.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_97\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionArrayPool\n    {\n        TElement[] Rent<TElement>(int minimumLength);\n    }\n```\n\n----------------------------------------\n\nTITLE: Using PossibleType Attribute in GraphQL.NET\nDESCRIPTION: Shows how to use the PossibleType attribute to mark interface CLR types with their implementing object types. This provides a type-first approach to defining interface implementations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_51\n\nLANGUAGE: csharp\nCODE:\n```\n[PossibleType(typeof(MyObject))]\npublic interface IMyInterface\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseVariableVisitor for Variable Validation in C#\nDESCRIPTION: Defines a BaseVariableVisitor class that implements IVariableVisitor interface for validating different types of GraphQL variables.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_208\n\nLANGUAGE: C#\nCODE:\n```\npublic class BaseVariableVisitor : GraphQL.Validation.IVariableVisitor\n{\n    public BaseVariableVisitor() { }\n    public virtual System.Threading.Tasks.ValueTask VisitFieldAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.FieldType field, object? variableValue, object? parsedValue) { }\n    public virtual System.Threading.Tasks.ValueTask VisitListAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ListGraphType type, object? variableValue, System.Collections.Generic.IList<object?>? parsedValue) { }\n    public virtual System.Threading.Tasks.ValueTask VisitObjectAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, object? variableValue, object? parsedValue) { }\n    public virtual System.Threading.Tasks.ValueTask VisitScalarAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ScalarGraphType type, object? variableValue, object? parsedValue) { }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Apollo Federation Link Directive and Imported Types\nDESCRIPTION: A complete GraphQL schema definition using Apollo Federation's @link directive with imported types, directives, and a basic Query type. This demonstrates how to set up federation capabilities in a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.1.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Parser Method Signatures in C#\nDESCRIPTION: This snippet shows examples of parser methods with invalid signatures, violating the GQL018 rule. The methods have incorrect argument types or access modifiers.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql018.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [Parser(nameof(Parse))]\n    public string Hello1 { get; set; }\n\n    [Parser(typeof(Parsers), nameof(Parsers.ParseValue))]\n    public string Hello2 { get; set; }\n\n    // wrong argument type\n    private static object Parse(string value) => Convert.ToInt32(value);\n}\n\npublic class Parsers\n{\n    // must be public\n    internal static object ParseValue(object value) => Convert.ToInt32(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveFederationTypesVisitor for AST Manipulation in C#\nDESCRIPTION: Defines a RemoveFederationTypesVisitor class that extends ASTVisitor to remove federation types from a GraphQL AST.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_207\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class RemoveFederationTypesVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context>\n{\n    protected override System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }\n    protected override System.Threading.Tasks.ValueTask VisitObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }\n    protected override System.Threading.Tasks.ValueTask VisitObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLObjectTypeExtension objectTypeExtension, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }\n    public static void Visit(GraphQLParser.AST.ASTNode node) { }\n    public struct Context : GraphQLParser.Visitors.IASTVisitorContext\n    {\n        public System.Threading.CancellationToken CancellationToken { get; }\n        public GraphQLParser.ROM QueryTypeName { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Illegal Resolver Usage in GraphQL-dotnet\nDESCRIPTION: Examples showing resolver methods incorrectly used on fields defined within input and interface graph types, which violates the GQL005 rule since resolvers are only allowed on output graph types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql005.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<User>\n{\n    public MyInputGraphType() =>\n        Field<StringGraphType>(\"Name\").Resolve(context => context.Source.Name);\n}\n\npublic class MyInterfaceGraphType : InterfaceGraphType<Person>\n{\n    public MyInterfaceGraphType(IStore store) =>\n        Field<ListGraphType<NonNullGraphType<PersonGraphType>>>(\"Children\")\n            .ResolveAsync(async context => await store.GetChildrenAsync(context.Source.Name));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Subscription Execution Strategy\nDESCRIPTION: Subscription execution strategy implementation that handles scoped execution context and processes data and errors within a service scope.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20/GraphQL.MicrosoftDI.approved.txt#2025-04-21_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class ScopedSubscriptionExecutionStrategy : GraphQL.Execution.SubscriptionExecutionStrategy\n{\n    public ScopedSubscriptionExecutionStrategy(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory) { }\n    public ScopedSubscriptionExecutionStrategy(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory, GraphQL.Execution.IExecutionStrategy executionStrategy) { }\n    protected override GraphQL.Execution.ExecutionContext CloneExecutionContext(GraphQL.Execution.ExecutionContext context, System.Threading.CancellationToken token) { }\n    protected override System.Threading.Tasks.ValueTask<GraphQL.ExecutionResult> ProcessDataAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, object? value) { }\n    protected override System.Threading.Tasks.Task<GraphQL.ExecutionError> ProcessErrorAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception exception) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MissingRequestServicesException in GraphQL.NET\nDESCRIPTION: Exception thrown when required request services are missing during GraphQL operations. This exception indicates that dependency injection services required for a GraphQL operation were not properly configured.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\npublic class MissingRequestServicesException : System.InvalidOperationException\n{\n    public MissingRequestServicesException() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ArgumentsOfCorrectType Validation Rule in C#\nDESCRIPTION: Defines the ArgumentsOfCorrectType validation rule class. It includes a static instance and an obsolete constructor. The class overrides the GetPreNodeVisitorAsync method to provide custom validation logic.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_223\n\nLANGUAGE: C#\nCODE:\n```\npublic class ArgumentsOfCorrectType : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.ArgumentsOfCorrectType Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor \" +\n        \"will be removed in v9.\")]\n    public ArgumentsOfCorrectType() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Exception Error Response in GraphQL.NET\nDESCRIPTION: Example of the JSON error response when an input validation error is processed by the unhandled exception handler instead of being caught during validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Error trying to resolve field 'testMe'.\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\n        \"testMe\"\n      ],\n      \"extensions\": {\n        \"code\": \"FORMAT\",\n        \"codes\": [\n          \"FORMAT\"\n        ]\n      }\n    }\n  ],\n  \"data\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Vector3 Type Mapping Registration\nDESCRIPTION: Registers the Vector3 type mapping in the schema for code-first approach.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema\n{\n    public MySchema()\n    {\n        ...\n\n        this.RegisterTypeMapping<Vector3, Vector3Type>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Graph Type Analyzer in EditorConfig\nDESCRIPTION: Configuration example for forcing analysis on specific types even if they override ParseDictionary. This allows developers to enforce the rule on custom base types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql006.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndotnet_diagnostic.input_graph_type_analyzer.force_types_analysis = MyServer.BaseInputObjectGraphType,MyServer.BaseInputObjectGraphType2\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Imported Types\nDESCRIPTION: Complete GraphQL schema including imported types, Apollo Federation link directives, custom directives, and type definitions. Features the @link directive for Apollo spec integration and example types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.4.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Suppression in C#\nDESCRIPTION: Example showing how to suppress the GQL017 warning using preprocessor directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql017.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL017\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL017\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation Schema Definition with Directives and Types\nDESCRIPTION: Complete GraphQL schema definition that implements Apollo Federation v2.0. It includes federation-specific directives like @external, @key, and @shareable, along with type definitions for entity resolution. The schema sets up the foundation for a federated GraphQL service with a Post entity type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.ResolvableEntitiesIdentifiesAliasedKey.WithImported.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [\"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"], url: \"https://specs.apollo.dev/federation/v2.0\") {\n  query: Query\n}\n\ndirective @external on FIELD_DEFINITION | OBJECT\n\ndirective @federation__extends on INTERFACE | OBJECT\n\ndirective @federation__key(fields: federation__FieldSet!, resolvable: Boolean = true) repeatable on OBJECT\n\ndirective @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @override(from: String!) on FIELD_DEFINITION\n\ndirective @provides(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @requires(fields: federation__FieldSet!) on FIELD_DEFINITION\n\ndirective @shareable on FIELD_DEFINITION | OBJECT\n\ndirective @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\nscalar federation__FieldSet\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Post @federation__key(fields: \"id\") {\n  id: String\n}\n\ntype Query {\n  _entities(representations: [_Any!]!): [_Entity]!\n  _service: _Service!\n}\n\nscalar _Any\n\nunion _Entity = Post\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Length Directive for GraphQL\nDESCRIPTION: The LengthDirective class implements a custom directive for validating string length in GraphQL schemas.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_177\n\nLANGUAGE: C#\nCODE:\n```\npublic class LengthDirective : GraphQL.Types.Directive\n{\n    public LengthDirective() { }\n    public override bool? Introspectable { get; }\n    public override void Validate(GraphQL.Types.AppliedDirective applied) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL003 Rule Severity\nDESCRIPTION: Configuration file entry to disable the GQL003 rule at the file, folder, or project level.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql003.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL003.severity = none\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidOperationError Class for GraphQL Errors\nDESCRIPTION: Error class for invalid operation errors in GraphQL execution. Derives from DocumentError to indicate document-level issues.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_103\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class InvalidOperationError : GraphQL.Execution.DocumentError\n    {\n        public InvalidOperationError(string message) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Named Type Interface\nDESCRIPTION: This interface defines the contract for named GraphQL types, requiring a Name property that can be set and retrieved.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_165\n\nLANGUAGE: C#\nCODE:\n```\npublic interface INamedType\n{\n    string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema without Imported Types\nDESCRIPTION: This snippet shows a simplified version of the GraphQL schema without imported types. It retains the Apollo Federation link directives, a custom directive, and basic type definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.3.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example/\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL019 Rule Severity in Configuration File\nDESCRIPTION: This code snippet demonstrates how to disable the GQL019 rule at the file, folder, or project level by setting its severity to 'none' in a configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql019.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL019.severity = none\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationRuleBase Classes for GraphQL.NET\nDESCRIPTION: Collection of validation rule classes that inherit from ValidationRuleBase, each implementing specific GraphQL validation rules. Classes include obsolete constructors being replaced by static instances.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_230\n\nLANGUAGE: C#\nCODE:\n```\npublic class PossibleFragmentSpreads : GraphQL.Validation.ValidationRuleBase\n{\n    public static readonly GraphQL.Validation.Rules.PossibleFragmentSpreads Instance;\n    [System.Obsolete(\"Please use the Instance property to retrieve a static instance. This constructor will be removed in v9.\")]\n    public PossibleFragmentSpreads() { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Violating Implementation Example in C#\nDESCRIPTION: Example of a class that violates the GQL016 rule by not having a parameterless constructor while implementing IFieldComplexityAnalyzer interface.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql016.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyComplexityAnalyzer : IFieldComplexityAnalyzer\n{\n    public MyComplexityAnalyzer(ILogger<MyComplexityAnalyzer> logger)\n    {\n    }\n\n    public FieldComplexityResult Analyze(FieldImpactContext context)\n    {\n        return new FieldComplexityResult(10, 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema\nDESCRIPTION: Minimal GraphQL schema definition with Apollo Federation link directive, showing only essential components without imported types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.3.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\", \"Purpose\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL003 Warnings in C#\nDESCRIPTION: Using pragma directives to suppress GQL003 warnings for specific code sections.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql003.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL003\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL003\n```\n\n----------------------------------------\n\nTITLE: Defining InputNameAttribute in GraphQL.NET\nDESCRIPTION: Attribute for specifying custom input names in GraphQL schemas. It can be applied to classes, structs, properties, fields, interfaces, or parameters to override their default naming in GraphQL inputs.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]\npublic class InputNameAttribute : GraphQL.GraphQLAttribute\n{\n    public InputNameAttribute(string name) { }\n    public string Name { get; set; }\n    public override void Modify(GraphQL.Types.IGraphType graphType) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector3 ParseLiteral Implementation\nDESCRIPTION: Implements parsing of Vector3 from GraphQL literal values, handling string and null inputs.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/custom-scalars.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic override object? ParseLiteral(GraphQLValue value)\n{\n    if (value is GraphQLNullValue)\n        return null;\n\n    if (value is GraphQLStringValue stringValue)\n        return ParseValue((string)stringValue.Value);\n\n    return ThrowLiteralConversionError(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL009 Warning in C#\nDESCRIPTION: This code snippet shows how to suppress the GQL009 warning for a specific line of code using preprocessor directives in C#.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql009.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL009\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL009\n```\n\n----------------------------------------\n\nTITLE: Configuring Analyzer Enforcement in EditorConfig\nDESCRIPTION: Configuration example for forcing type analysis on specific types even if they override ParseDictionary using the .editorconfig file format.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql007.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndotnet_diagnostic.input_graph_type_analyzer.force_types_analysis = MyServer.BaseInputObjectGraphType,MyServer.BaseInputObjectGraphType2\n```\n\n----------------------------------------\n\nTITLE: IExecutionArrayPool Interface\nDESCRIPTION: Interface for array pooling during GraphQL execution to minimize allocations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_79\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IExecutionArrayPool\n    {\n        TElement[] Rent<TElement>(int minimumLength);\n    }\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Types\nDESCRIPTION: Simplified version of the GraphQL schema without imported types and related definitions. Maintains core schema structure with basic link directive and type definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.2.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example/v1.0\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoOperationError Class for GraphQL Errors\nDESCRIPTION: Error class for when a GraphQL document contains no operations. Used when a document is empty or contains only fragments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_105\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Serializable]\n    public class NoOperationError : GraphQL.Execution.DocumentError\n    {\n        public NoOperationError() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Cat Type in GraphQL Schema\nDESCRIPTION: This snippet defines the Cat type with fields for name and weight. The weight field includes an argument for specifying the unit of measurement.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.PetComplex.Defaults.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n\" A cat\"\ntype Cat {\n  \" cat's name\"\n  name: String!\n  weight(\n    \"comment on argument\"\n    inPounds: Boolean): Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Link Types\nDESCRIPTION: A simplified version of the GraphQL schema that omits the imported link types. This version maintains the federation link directives and basic type definitions but removes the scalar, enum, and specific directive implementations needed for federation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.5.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/v1.0\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ntype example__Type1 {\n  field1: String\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Implementation with Explicit Field Name\nDESCRIPTION: Shows the correct implementation by explicitly specifying the field name when using complex expressions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql015.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PersonGraphType : ObjectGraphType<Person>\n{\n    public PersonGraphType()\n    {\n        Field(\"FullName\", p => $\"{p.FirstName} {p.LastName}\");\n    }\n}\n\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SetArrayItemNodesAsync Method\nDESCRIPTION: Protected virtual method for setting array item nodes in array execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_68\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task SetArrayItemNodesAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ArrayExecutionNode parent) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Legacy Complexity Validation in C#\nDESCRIPTION: Deprecated complexity validation rule from v7 that will be removed in v9. Implements the INodeVisitor interface for analyzing query complexity.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_236\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the new complexity analyzer. The v7 complexity analyzer will be removed in v9.\")]\npublic class LegacyComplexityValidationRule : GraphQL.Validation.ValidationRuleBase, GraphQL.Validation.INodeVisitor\n{\n    public LegacyComplexityValidationRule(GraphQL.Validation.Complexity.LegacyComplexityConfiguration complexityConfiguration) { }\n    protected virtual void Analyzed(GraphQLParser.AST.GraphQLDocument document, GraphQL.Validation.Complexity.LegacyComplexityResult complexityResult) { }\n    public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Category Type with Federation Key\nDESCRIPTION: Extends the Category type with a federation key on the 'id' field. It marks the 'id' field as @external and adds a 'products' field returning an array of Product types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/SchemaExporterTests.Federation2Schema.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\nextend type Category @key(fields: \"id\") {\n  id: ID! @external\n  products: [Product!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IMetadataWriter Interface in GraphQL.NET\nDESCRIPTION: Interface for objects that can write metadata. It extends IProvideMetadata and provides access to a metadata reader.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_159\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IMetadataWriter : GraphQL.Types.IProvideMetadata\n{\n    GraphQL.Types.IMetadataReader MetadataReader { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Obsolete FuncFederatedResolver Class\nDESCRIPTION: Defines the deprecated FuncFederatedResolver class for resolving federated references using functions. Users are advised to use the GraphQL.Federation.FederationResolver class instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_211\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the GraphQL.Federation.FederationResolver class instead. This class wi\" +\n    \"ll be removed in v9.\")]\npublic class FuncFederatedResolver<TReturn> : GraphQL.Federation.Resolvers.FederationResolver<System.Collections.Generic.Dictionary<string, object?>, TReturn>, GraphQL.Utilities.Federation.IFederatedResolver\n{\n    public FuncFederatedResolver(System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<TReturn?>> func) { }\n    public System.Threading.Tasks.Task<object?> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL005 Warnings in GraphQL-dotnet\nDESCRIPTION: Examples showing how to suppress the GQL005 rule violation warnings using either preprocessor directives in code or configuration settings in a dotnet configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql005.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL005\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL005\n```\n\n----------------------------------------\n\nTITLE: Implementing OperationMessageJsonConverter for GraphQL.NET\nDESCRIPTION: A Newtonsoft.Json converter for GraphQL operation messages. It handles serialization and deserialization of messages exchanged during GraphQL operations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.NewtonsoftJson.approved.txt#2025-04-21_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class OperationMessageJsonConverter : Newtonsoft.Json.JsonConverter\n{\n    public OperationMessageJsonConverter() { }\n    public override bool CanRead { get; }\n    public override bool CanWrite { get; }\n    public override bool CanConvert(System.Type objectType) { }\n    public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object? existingValue, Newtonsoft.Json.JsonSerializer serializer) { }\n    public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object? value, Newtonsoft.Json.JsonSerializer serializer) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom AutoRegisteringObjectGraphType in DI Container\nDESCRIPTION: Demonstrates how to register a custom implementation of AutoRegisteringObjectGraphType in a dependency injection container to be used instead of the built-in type for automatic type generation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration5.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton(typeof(AutoRegisteringObjectGraphType<>), typeof(CustomAutoObjectType<>));\n```\n\n----------------------------------------\n\nTITLE: SelectResolver Method for Field Resolution\nDESCRIPTION: Protected virtual method that selects the appropriate field resolver for a node.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_67\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual GraphQL.Resolvers.IFieldResolver SelectResolver(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Resolver in C#\nDESCRIPTION: Defines a generic FederationResolver class that implements resolution logic for federated GraphQL schemas. It supports various resolution methods including synchronous, asynchronous, and data loader-based approaches.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_119\n\nLANGUAGE: C#\nCODE:\n```\npublic class FederationResolver<TClrType> : GraphQL.Federation.Resolvers.FederationResolver<TClrType, TClrType>\n{\n    public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, GraphQL.DataLoader.IDataLoaderResult<TClrType?>> resolveFunc) { }\n    public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, System.Threading.Tasks.Task<TClrType?>> resolveFunc) { }\n    public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, TClrType?> resolveFunc) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Suppression in C#\nDESCRIPTION: Example showing how to suppress the GQL016 warning using preprocessor directives in C#.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql016.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\n#pragma warning disable GQL016\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL016\n```\n\n----------------------------------------\n\nTITLE: Defining QueryMissingError Class for GraphQL Errors\nDESCRIPTION: Error class for when a query is missing from a GraphQL request. Used when no query string is provided to the executor.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_110\n\nLANGUAGE: csharp\nCODE:\n```\npublic class QueryMissingError : GraphQL.Execution.RequestError\n    {\n        public QueryMissingError() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationOptions Struct for GraphQL in C#\nDESCRIPTION: This struct defines options for GraphQL validation, including schema, document, rules, and other contextual information needed for validation.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_219\n\nLANGUAGE: C#\nCODE:\n```\npublic readonly struct ValidationOptions\n{\n    public ValidationOptions() { }\n    public ValidationOptions(GraphQL.Types.ISchema schema, GraphQLParser.AST.GraphQLDocument document, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? rules, System.Collections.Generic.IDictionary<string, object?> userContext, GraphQL.Instrumentation.Metrics metrics, GraphQL.Inputs variables, GraphQL.Inputs extensions, GraphQLParser.AST.GraphQLOperationDefinition operation, System.IServiceProvider? requestServices, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) { }\n    public System.Threading.CancellationToken CancellationToken { get; init; }\n    public GraphQLParser.AST.GraphQLDocument Document { get; init; }\n    public GraphQL.Inputs Extensions { get; init; }\n    public GraphQL.Instrumentation.Metrics Metrics { get; init; }\n    public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; init; }\n    public System.IServiceProvider? RequestServices { get; init; }\n    public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? Rules { get; init; }\n    public GraphQL.Types.ISchema Schema { get; init; }\n    public System.Collections.Generic.IDictionary<string, object?> UserContext { get; init; }\n    public System.Security.Claims.ClaimsPrincipal? User { get; init; }\n    public GraphQL.Inputs Variables { get; init; }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Types\nDESCRIPTION: Simplified version of the GraphQL schema without imported link types, focusing on core type definitions and operations for user management functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamedForAllLocations.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [{as: \"@testAlias\", name: \"@test\"}], url: \"https://spec.example.com/example\") @testAlias {\n  query: Query\n  mutation: Mutation\n}\n\n\"The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\"\nscalar Date @testAlias\n\ntype Mutation {\n  createUser(input: UserInput @testAlias): User\n}\n\ninterface Node @testAlias {\n  id: ID!\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  getUser(id: ID @testAlias): User\n}\n\nenum Role @testAlias {\n  ADMIN @testAlias\n  USER\n}\n\nunion SearchResult @testAlias = Post | User\n\ntype User @testAlias {\n  age: Int\n  id: ID! @testAlias\n  name: String @testAlias\n}\n\ninput UserInput @testAlias {\n  age: Int\n  name: String! @testAlias\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Non-IGraphType in InterfaceGraphType<TSource>\nDESCRIPTION: This example demonstrates the correct implementation, using Person (which does not implement IGraphType) as the type argument for InterfaceGraphType<TSource>.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql011.md#2025-04-21_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInterfaceGraphType : InterfaceGraphType<Person>\n{\n}\n\npublic class PersonGraphType : ObjectGraphType<Person>\n{\n}\n\npublic class Person { }\n```\n\n----------------------------------------\n\nTITLE: Implementing MemoryExtensions in C#\nDESCRIPTION: MemoryExtensions is a static class that provides an extension method for constraining arrays.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MemoryExtensions\n{\n    public static System.Collections.Generic.IList<T> Constrained<T>(this T[] array, int count) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Boolean Scalar Type in JSON Schema\nDESCRIPTION: JSON representation of the Boolean scalar type in GraphQL, which represents true or false values. This type is used throughout the schema for boolean flags and properties.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"SCALAR\",\n  \"name\": \"Boolean\",\n  \"description\": null,\n  \"fields\": null,\n  \"inputFields\": null,\n  \"interfaces\": null,\n  \"enumValues\": null,\n  \"possibleTypes\": null,\n  \"isOneOf\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Schema Constructor for Dependency Injection in GraphQL .NET\nDESCRIPTION: Shows the deprecated and current constructors for Schema class, highlighting the change from using a Func-based resolver to the new IDependencyResolver interface. This change supports better dependency injection integration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration2.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Obsolete]\npublic Schema(Func<Type, IGraphType> resolveType)\n    : this(new FuncDependencyResolver(resolveType))\n{\n}\n\npublic Schema(IDependencyResolver dependencyResolver)\n{\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL002 Rule Severity\nDESCRIPTION: Configuration file example showing how to disable the GQL002 rule at the file, folder, or project level.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql002.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL002.severity = none\n```\n\n----------------------------------------\n\nTITLE: Additional Obsolete Field Definition Methods in GraphQL.NET\nDESCRIPTION: More obsolete field definition methods that will be removed in version 9. Developers should use the builder pattern through Field() methods that return FieldBuilder.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_147\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use one of the Field() methods returning FieldBuilder and the methods defi\" +\n            \"ned on it or just use AddField() method directly. This method will be removed in\" +\n            \" v9.\")]\npublic GraphQL.Types.FieldType Field<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, string? deprecationReason = null)\n            where TGraphType : GraphQL.Types.IGraphType { }\n[System.Obsolete(\"Please call Field<TGraphType, TReturnType>(string name) instead. This method will\" +\n            \" be removed in v9.\")]\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TGraphType, TReturnType>()\n            where TGraphType : GraphQL.Types.IGraphType { }\npublic virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]  TGraphType, TReturnType>(string name)\n            where TGraphType : GraphQL.Types.IGraphType { }\n[System.Obsolete(\"Please use one of the Field() methods returning FieldBuilder and the methods defi\" +\n            \"ned on it or just use AddField() method directly. This method will be removed in\" +\n            \" v9.\")]\npublic GraphQL.Types.FieldType FieldAsync([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type, string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object?>>? resolve = null, string? deprecationReason = null) { }\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema Without Imported Types\nDESCRIPTION: A streamlined version of the GraphQL schema that excludes the imported types and directives, showing only the base schema structure with minimal custom types and directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.6.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/vX\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Federation Object Metadata Extensions for GraphQL.NET\nDESCRIPTION: Extension methods for object graph types to set federation metadata like external fields, keys, and shareability flags, supporting Apollo Federation's entity resolution and field sharing.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_101\n\nLANGUAGE: C#\nCODE:\n```\npublic static class FederationObjectMetadataExtensions\n{\n    public static TMetadataWriter External<TMetadataWriter>(this TMetadataWriter fieldType)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\n    public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string[] fields, bool resolvable = true)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\n    public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string fields, bool resolvable = true)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\n    public static TMetadataWriter Shareable<TMetadataWriter>(this TMetadataWriter graphType)\n        where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic ResolveFieldContext Implementation\nDESCRIPTION: Generic version of ResolveFieldContext that allows for strongly-typed source objects. Inherits from base ResolveFieldContext and adds typed Source property.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\npublic class ResolveFieldContext<TSource> : GraphQL.ResolveFieldContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<TSource> {\n    public ResolveFieldContext() { }\n    public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }\n    public new TSource Source { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: ProcessNodeUnhandledExceptionAsync Method\nDESCRIPTION: Protected virtual method for handling exceptions during node execution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_66\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task<bool> ProcessNodeUnhandledExceptionAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception ex) { }\n```\n\n----------------------------------------\n\nTITLE: Implementing ParseLinkVisitor for Schema Parsing in C#\nDESCRIPTION: Defines a ParseLinkVisitor class that extends BaseSchemaNodeVisitor for parsing links in a GraphQL schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_206\n\nLANGUAGE: C#\nCODE:\n```\npublic sealed class ParseLinkVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor\n{\n    public static GraphQL.Utilities.Visitors.ParseLinkVisitor Instance { get; }\n    public void Run(GraphQL.Types.ISchema schema) { }\n    public override void VisitSchema(GraphQL.Types.ISchema schema) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Illegal Method Usage in GraphQL.NET FieldBuilder\nDESCRIPTION: This snippet demonstrates how to fix the illegal method usage violations by removing the inappropriate method calls for each graph type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql012.md#2025-04-21_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<User>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"Name\");\n    }\n}\n\npublic class MyInterfaceGraphType : InputObjectGraphType<User>\n{\n    public MyInterfaceGraphType()\n    {\n        Field<StringGraphType>(\"Name\");\n    }\n}\n\npublic class MyOutput : ObjectGraphType<User>\n{\n    public MyOutput()\n    {\n        Field<StringGraphType>(\"Name\")\n            .Resolve(context => context.Source.Name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL009 Rule in Configuration File\nDESCRIPTION: This code snippet demonstrates how to disable the GQL009 rule for a file, folder, or project by setting its severity to 'none' in the configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql009.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL009.severity = none\n```\n\n----------------------------------------\n\nTITLE: GraphQL Directive Location Enumeration\nDESCRIPTION: Enumerates all possible locations where GraphQL directives can be placed in a schema, including operations, fields, fragments, and type definitions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Introspection/SchemaIntrospectionTests.validate_oneOf_introspection.approved.txt#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ENUM\",\n  \"name\": \"__DirectiveLocation\",\n  \"description\": \"A Directive can be adjacent to many parts of the GraphQL language\",\n  \"enumValues\": [\n    {\n      \"name\": \"QUERY\",\n      \"description\": \"Location adjacent to a query operation.\"\n    },\n    {\n      \"name\": \"MUTATION\",\n      \"description\": \"Location adjacent to a mutation operation.\"\n    }\n    // Additional values omitted for brevity\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Obsolete Field Definition Method with Multiple Parameters in GraphQL.NET\nDESCRIPTION: An obsolete method for defining fields with multiple parameters in a single call. Developers are encouraged to use the builder pattern instead through Field() methods returning FieldBuilder.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_142\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use one of the Field() methods returning FieldBuilder and the methods defi\" +\n            \"ned on it or just use AddField() method directly. This method will be removed in\" +\n            \" v9.\")]\npublic GraphQL.Types.FieldType Field([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)] System.Type type, string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, string? deprecationReason = null) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL020 Rule Severity in .NET Configuration\nDESCRIPTION: Example showing how to configure the severity of the GQL020 rule in a .NET configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql020.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL020.severity = none\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Field Resolution with Microsoft DI\nDESCRIPTION: Demonstrates how to create a field resolver that uses scoped services with parallel execution strategy using Microsoft's dependency injection extensions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration4.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphType : ObjectGraphType<Category>\n{\n    public MyGraphType()\n    {\n        Field(\"Name\", context => context.Source.Name);\n        Field<ListGraphType<ProductGraphType>>().Name(\"Products\")\n            .Resolve()\n            .WithScope()\n            .WithService<MyDbContext>()\n            .ResolveAsync((context, db) => db.Products.Where(x => x.CategoryId == context.Source.Id).ToListAsync());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Required Query Type in GraphQL.NET\nDESCRIPTION: Demonstrates how to bypass the requirement for a root Query type in the schema. This feature will be removed in future versions to comply with GraphQL specification.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_52\n\nLANGUAGE: csharp\nCODE:\n```\nGlobalSwitches.RequireRootQueryType = false;\n```\n\n----------------------------------------\n\nTITLE: Apollo Tracing Metrics Output Example\nDESCRIPTION: Example of the JSON output structure for Apollo tracing metrics, showing timing data for parsing, validation, and field resolution.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/metrics.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke\"\n        },\n        {\n          \"name\": \"C-3PO\"\n        }\n      ]\n    }\n  },\n  \"extensions\": {\n    \"tracing\": {\n      \"version\": 1,\n      \"startTime\": \"2018-07-28T21:39:27.160902Z\",\n      \"endTime\": \"2018-07-28T21:39:27.372902Z\",\n      \"duration\": 212304000,\n      \"parsing\": {\n        \"startOffset\": 57436000,\n        \"duration\": 21985999\n      },\n      \"validation\": {\n        \"startOffset\": 57436000,\n        \"duration\": 21985999\n      },\n      \"execution\": {\n        \"resolvers\": [\n          {\n            \"path\": [\n              \"hero\"\n            ],\n            \"parentType\": \"Query\",\n            \"fieldName\": \"hero\",\n            \"returnType\": \"Character\",\n            \"startOffset\": 147389000,\n            \"duration\": 2756000\n          },\n          {\n            \"path\": [\n              \"hero\",\n              \"name\"\n            ],\n            \"parentType\": \"Droid\",\n            \"fieldName\": \"name\",\n            \"returnType\": \"String\",\n            \"startOffset\": 208043000,\n            \"duration\": 396000\n          },\n          {\n            \"path\": [\n              \"hero\",\n              \"friends\"\n            ],\n            \"parentType\": \"Droid\",\n            \"fieldName\": \"friends\",\n            \"returnType\": \"[Character]\",\n            \"startOffset\": 208533000,\n            \"duration\": 1067999\n          },\n          {\n            \"path\": [\n              \"hero\",\n              \"friends\",\n              0,\n              \"name\"\n            ],\n            \"parentType\": \"Human\",\n            \"fieldName\": \"name\",\n            \"returnType\": \"String\",\n            \"startOffset\": 210501000,\n            \"duration\": 33999\n          },\n          {\n            \"path\": [\n              \"hero\",\n              \"friends\",\n              1,\n              \"name\"\n            ],\n            \"parentType\": \"Droid\",\n            \"fieldName\": \"name\",\n            \"returnType\": \"String\",\n            \"startOffset\": 210542000,\n            \"duration\": 3000\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Array Item Nodes in GraphQL Execution\nDESCRIPTION: Protected virtual method that initializes the child nodes for an array execution node. Handles the creation of collection items in the result.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_86\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual System.Threading.Tasks.Task SetArrayItemNodesAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ArrayExecutionNode parent) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL010 Analyzer with EditorConfig\nDESCRIPTION: EditorConfig configuration to force type analysis for specific types that override ParseDictionary method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql010.md#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndotnet_diagnostic.input_graph_type_analyzer.force_types_analysis = MyServer.BaseInputObjectGraphType,MyServer.BaseInputObjectGraphType2\n```\n\n----------------------------------------\n\nTITLE: Implementing Droid Type with Character Interface\nDESCRIPTION: The Droid type implements the Character interface and adds a primaryFunction field specific to droids. It includes connection fields with pagination arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"A mechanical creature in the Star Wars universe.\"\ntype Droid implements Character {\n  \"Which movie they appear in.\"\n  appearsIn: [Episode]\n  friends: [Character]\n  \"A list of a character's friends.\"\n  friendsConnection(\n    \"Only return edges after the specified cursor.\"\n    after: String,\n    \"Only return edges prior to the specified cursor.\"\n    before: String,\n    \"Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified.\"\n    first: Int,\n    \"Specifies the maximum number of edges to return, starting prior to the cursor specified by 'before', or the last number of edges if 'before' is not specified.\"\n    last: Int): CharacterInterfaceConnection\n  \"The id of the droid.\"\n  id: String!\n  \"The name of the droid.\"\n  name: String\n  \"The primary function of the droid.\"\n  primaryFunction: String\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Field Naming Using Original Name\nDESCRIPTION: Example fix that maintains consistency by using only the original name defined in the Field/Connection declaration.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql003.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nField<StringGraphType>(\"Name1\");\nConnection<StringGraphType>(\"Name1\");\nConnectionBuilder<string>.Create<StringGraphType>(\"Name1\");\nConnectionBuilder.Create<StringGraphType, string>(\"Name1\");\n```\n\n----------------------------------------\n\nTITLE: IValidationRule Interface Definition\nDESCRIPTION: Definition of the IValidationRule interface showing the structure for implementing custom validation rules.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IValidationRule\n{\n    ValueTask<INodeVisitor?> GetPreNodeVisitorAsync(ValidationContext context);\n    ValueTask<IVariableVisitor?> GetVariableVisitorAsync(ValidationContext context);\n    ValueTask<INodeVisitor?> GetPostNodeVisitorAsync(ValidationContext context);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseVariableVisitor for Variable Validation\nDESCRIPTION: Defines a base implementation of the IVariableVisitor interface for validating GraphQL variables. This class serves as a foundation for custom variable visitors.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_221\n\nLANGUAGE: C#\nCODE:\n```\npublic class BaseVariableVisitor : GraphQL.Validation.IVariableVisitor\n{\n    public BaseVariableVisitor() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ParallelExecutionStrategy Class for Concurrent Execution\nDESCRIPTION: Execution strategy that executes fields in parallel. Extends ExecutionStrategy with parallel execution capabilities for better performance.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_109\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ParallelExecutionStrategy : GraphQL.Execution.ExecutionStrategy\n    {\n        public ParallelExecutionStrategy() { }\n        public static GraphQL.Execution.ParallelExecutionStrategy Instance { get; }\n        public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }\n    }\n```\n\n----------------------------------------\n\nTITLE: Connection Builder Factory Methods\nDESCRIPTION: Static factory methods for creating GraphQL connection builders with various type parameters and configurations\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ConnectionBuilder\n{\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TSourceType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TSourceType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType\n        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }\n    public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType, TSourceType>(string name)\n        where TNodeType : GraphQL.Types.IGraphType\n        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>\n        where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MemoryExtensions in GraphQL.NET\nDESCRIPTION: Extension methods for memory-related operations in GraphQL.NET. Provides utilities for working with array constraints and memory optimization.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MemoryExtensions\n{\n    public static System.Collections.Generic.IList<T> Constrained<T>(this T[] array, int count) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GQL006 Violation in C#\nDESCRIPTION: Example showing a violation of the GQL006 rule where an input field name does not match any property in the source type. This causes a mapping issue between GraphQL input and the underlying C# object.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql006.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyInputGraphType : InputObjectGraphType<MySourceType>\n{\n    public MyInputGraphType()\n    {\n        Field<StringGraphType>(\"FirstName\");\n    }\n}\n\npublic class MySourceType\n{\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GQL001 Rule Severity\nDESCRIPTION: Configuration file example showing how to disable the GQL001 rule at the project level using severity settings.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql001.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL001.severity = none\n```\n\n----------------------------------------\n\nTITLE: Defining Federated GraphQL Schema with Apollo Specifications\nDESCRIPTION: Defines a GraphQL schema with Apollo Federation v2.3 directives and specifications. Includes schema linking, query type definition, scalar types, and a product entity type with federation directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Federation/SchemaTests.DoesNotCreateRepresentationsWhenNoResolvableTypes.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(url: \"https://specs.apollo.dev/link/v1.0\", import: [\"@link\"]) @link(url: \"https://specs.apollo.dev/federation/v2.3\", import: [\"@key\", \"@external\", \"@requires\", \"@provides\", \"@shareable\", \"@inaccessible\", \"@override\", \"@tag\"]) {\n  query: MyQuery\n}\n\nscalar _Any\n\ntype MyQuery {\n  favoriteProduct: Product!\n  _service: _Service!\n}\n\ntype Product @key(fields: \"id\", resolvable: false) {\n  id: ID!\n}\n\ntype _Service {\n  sdl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema with Imported Types\nDESCRIPTION: Full GraphQL schema definition including Apollo Federation link directives, custom scalars, enums, types, and directives. Includes imported link types and user management functionality.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamedForAllLocations.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(import: [{as: \"@testAlias\", name: \"@test\"}], url: \"https://spec.example.com/example\") @testAlias {\n  query: Query\n  mutation: Mutation\n}\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ndirective @testAlias on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION\n\n\"The `Date` scalar type represents a year, month and day in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\"\nscalar Date @testAlias\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Mutation {\n  createUser(input: UserInput @testAlias): User\n}\n\ninterface Node @testAlias {\n  id: ID!\n}\n\ntype Post {\n  title: String\n}\n\ntype Query {\n  getUser(id: ID @testAlias): User\n}\n\nenum Role @testAlias {\n  ADMIN @testAlias\n  USER\n}\n\nunion SearchResult @testAlias = Post | User\n\ntype User @testAlias {\n  age: Int\n  id: ID! @testAlias\n  name: String @testAlias\n}\n\ninput UserInput @testAlias {\n  age: Int\n  name: String! @testAlias\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Type Naming in GraphQL.NET\nDESCRIPTION: Shows how to enable legacy type naming behavior for generic graph types. This option is deprecated and will be removed in version 9.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/migration8.md#2025-04-21_snippet_54\n\nLANGUAGE: csharp\nCODE:\n```\nusing GraphQL;\n\nGlobalSwitches.UseLegacyTypeNaming = true;\n```\n\n----------------------------------------\n\nTITLE: Extending TypeConfig with Federation Methods\nDESCRIPTION: Extends TypeConfig with deprecated federation-specific methods for resolving references. Users are advised to use methods from the GraphQL.Federation namespace instead.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_213\n\nLANGUAGE: C#\nCODE:\n```\npublic static class TypeConfigExtensions\n{\n    [System.Obsolete(\"Please use ResolveReference instead, found in the GraphQL.Federation namespace. T\" +\n        \"his method will be removed in v9.\")]\n    public static void ResolveReferenceAsync(this GraphQL.Utilities.TypeConfig config, GraphQL.Utilities.Federation.IFederatedResolver resolver) { }\n    [System.Obsolete(\"Please use another overload instead, found in the GraphQL.Federation namespace. T\" +\n        \"his method will be removed in v9.\")]\n    public static void ResolveReferenceAsync<T>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<T?>> resolver) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid ValidateArguments Method Implementation Example in C#\nDESCRIPTION: Example showing incorrect implementations of ValidateArguments methods with wrong access modifiers and parameter types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql020.md#2025-04-21_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\npublic class TestClass\n{\n    [ValidateArguments(nameof(Validate))]\n    public string Hello1(string name) => $\"Hello {name}\";\n\n    [ValidateArguments(typeof(Validators), nameof(Validators.ValidateArgs))]\n    public string Hello2(string name) => $\"Greeting {name}\";\n\n    // wrong argument type\n    private static ValueTask Validate(object context) => ValueTask.CompletedTask;\n}\n\npublic class Validators\n{\n    // must be public\n    internal static ValueTask ValidateArgs(FieldArgumentsValidationContext context) => ValueTask.CompletedTask;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL008 Warning in C#\nDESCRIPTION: This code snippet demonstrates how to suppress the GQL008 warning for a specific line of code using preprocessor directives in C#.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql008.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL008\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL008\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response Structure with Categories in JSON\nDESCRIPTION: A sample GraphQL response showing data structure with a categories array. Each category has an id and name property, demonstrating the typical nested structure of GraphQL query responses.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample1Tests.Categories.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"categories\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Category 1\"\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Category 2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FieldBuilder Static Factory Methods in C#\nDESCRIPTION: Static factory methods for creating instances of FieldBuilder with different initialization parameters. Includes obsolete methods that will be removed in future versions.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_61\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the overload that accepts the name as the first argument. This method \" +\n    \"will be removed in v9.\")]\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(GraphQL.Types.IGraphType type, string name = \"default\") { }\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(string name, GraphQL.Types.IGraphType type) { }\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(string name, System.Type? type = null) { }\n[System.Obsolete(\"Please use the overload that accepts the name as the first argument. This method \" +\n    \"will be removed in v9.\")]\npublic static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(System.Type? type = null, string name = \"default\") { }\n```\n\n----------------------------------------\n\nTITLE: Violating OneOf Field Default Value in C# (Type-First)\nDESCRIPTION: This snippet shows a violation of the GQL014 rule in a type-first approach, where a OneOf input type field has a default value specified using an attribute.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql014.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[OneOf]\npublic class UserIdentifier\n{\n    [DefaultValue(\"Joe\")]\n    public string? NickName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParserAttribute in C#\nDESCRIPTION: ParserAttribute is a sealed class that inherits from GraphQLAttribute and is used to specify custom parsers for GraphQL elements.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n[System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]\npublic sealed class ParserAttribute : GraphQL.GraphQLAttribute\n{\n    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCode(\"Please ensure the specified method is not trimmed or use an alternative construct\" +\n        \"or.\")]\n    public ParserAttribute(string parserMethodName) { }\n    public ParserAttribute([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods)] System.Type parserType) { }\n    public ParserAttribute([System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods)] System.Type parserType, string parserMethodName) { }\n    public override void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }\n    public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Federation Support Classes with Obsolescence Warnings\nDESCRIPTION: Defines classes for GraphQL Federation support, including FederatedResolveContext, FederatedSchema, and FederatedSchemaBuilder. These classes are marked as obsolete with recommendations for alternative approaches.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/netstandard20+netstandard21/GraphQL.approved.txt#2025-04-21_snippet_203\n\nLANGUAGE: csharp\nCODE:\n```\n[System.Obsolete(\"This class will be removed in v9 as it is not needed with GraphQL.Federation.Reso\" +\n    \"lvers.IFederationResolver.\")]\npublic class FederatedResolveContext\n{\n    public FederatedResolveContext() { }\n    public System.Collections.Generic.Dictionary<string, object?> Arguments { get; set; }\n    public GraphQL.IResolveFieldContext ParentFieldContext { get; set; }\n}\n\n[System.Obsolete(\"Please use Schema.For with graphQlBuilder.AddFederation() instead. This class wil\" +\n    \"l be removed in v9.\")]\npublic class FederatedSchema\n{\n    public FederatedSchema() { }\n    public static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.Federation.FederatedSchemaBuilder>? configure = null) { }\n    public static GraphQL.Types.Schema For<TFederatedSchemaBuilder>(string typeDefinitions, System.Action<TFederatedSchemaBuilder>? configure = null)\n        where TFederatedSchemaBuilder : GraphQL.Utilities.Federation.FederatedSchemaBuilder, new () { }\n}\n\n[System.Obsolete(\"Please use SchemaBuilder with graphQlBuilder.AddFederation() instead. This class \" +\n    \"will be removed in v9.\")]\npublic class FederatedSchemaBuilder : GraphQL.Utilities.SchemaBuilder\n{\n    public FederatedSchemaBuilder() { }\n    public override GraphQL.Types.Schema Build(string typeDefinitions) { }\n    protected override void PreConfigure(GraphQL.Types.Schema schema) { }\n}\n\n[System.Obsolete(\"Please use the schema.Print() extension method instead. This class will be remove\" +\n    \"d in v9.\")]\npublic class FederatedSchemaPrinter : GraphQL.Utilities.SchemaPrinter\n{\n    public FederatedSchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions? options = null) { }\n    public bool IsFederatedDirective(string directiveName) { }\n\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL019 Warnings in C#\nDESCRIPTION: This code snippet shows how to suppress GQL019 warnings in a C# file using pragma directives to disable and re-enable the rule for specific lines of code.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql019.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL019\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL019\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL010 Rule with EditorConfig\nDESCRIPTION: EditorConfig configuration to disable the GQL010 rule for specific files or projects.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql010.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL010.severity = none\n```\n\n----------------------------------------\n\nTITLE: Complete GraphQL Schema with Imported Types\nDESCRIPTION: Full GraphQL schema definition including imported types, link directives, custom directives, and type definitions. Includes Apollo federation link directives and example types.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.NamespaceTests.2.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") @link(url: \"https://spec.example.com/a/b/example/v1.0\") {\n  query: Query\n}\n\ndirective @Directive2 on FIELD_DEFINITION\n\ndirective @example__Directive1 on FIELD_DEFINITION\n\ndirective @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA\n\ntype example__Type1 {\n  field1: String\n}\n\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n\ntype Query {\n  dummy: String\n}\n\ntype Type2 {\n  field2: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ListGraphType in C#\nDESCRIPTION: Defines a ListGraphType class with an obsolete constructor and an override for the Type property.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_179\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"This constructor is for internal use only; use ListGraphType(IGraphType type) instead.\")]\npublic ListGraphType() { }\npublic override System.Type Type { get; }\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL005 Rule in Configuration File\nDESCRIPTION: Example of how to disable the GQL005 rule for a file, folder, or project by setting its severity to 'none' in the dotnet configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql005.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL005.severity = none\n```\n\n----------------------------------------\n\nTITLE: Writing GraphQL Response to HTTP Response Stream\nDESCRIPTION: Example from the Harness sample project showing how to write a GraphQL execution result to an HTTP response using DocumentWriter's WriteAsync method.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/serialization.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task WriteResponseAsync(HttpContext context, ExecutionResult result, CancellationToken cancellationToken)\n{\n    context.Response.ContentType = \"application/json\";\n    context.Response.StatusCode = 200; // OK\n\n    await _documentWriter.WriteAsync(context.Response.Body, result, cancellationToken);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling GQL006 Rule in EditorConfig\nDESCRIPTION: Configuration showing how to disable the GQL006 rule at the file, folder or project level using EditorConfig. This sets the severity to none for all C# files in scope.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql006.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL006.severity = none\n```\n\n----------------------------------------\n\nTITLE: Configuration for Rule Severity in INI\nDESCRIPTION: Configuration example showing how to disable the GQL017 rule using a configuration file.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql017.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL017.severity = none\n```\n\n----------------------------------------\n\nTITLE: NullExecutionNode Class\nDESCRIPTION: Execution node class for representing null values in the execution tree.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_89\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NullExecutionNode : GraphQL.Execution.ExecutionNode\n    {\n        public NullExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }\n        public override object? ToValue() { }\n    }\n```\n\n----------------------------------------\n\nTITLE: SetSubFieldNodes Method\nDESCRIPTION: Protected virtual method for setting subfield nodes on an object execution node.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_70\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void SetSubFieldNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode parent) { }\n```\n\n----------------------------------------\n\nTITLE: Defining MissingRequestServicesException in C#\nDESCRIPTION: MissingRequestServicesException is a custom exception class that inherits from System.InvalidOperationException.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\npublic class MissingRequestServicesException : System.InvalidOperationException\n{\n    public MissingRequestServicesException() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataLoaderBase Abstract Class in GraphQL.NET\nDESCRIPTION: Abstract base class for data loaders that implements common functionality like caching, batch size management, and dispatching. It provides various constructors for configuration options.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/GraphQL.DataLoader.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class DataLoaderBase<TKey, T> : GraphQL.DataLoader.IDataLoader, GraphQL.DataLoader.IDataLoader<TKey, T>\n    where TKey :  notnull\n{\n    protected readonly System.Collections.Generic.IEqualityComparer<TKey> EqualityComparer;\n    protected readonly int MaxBatchSize;\n    public DataLoaderBase() { }\n    public DataLoaderBase(bool caching) { }\n    public DataLoaderBase(System.Collections.Generic.IEqualityComparer<TKey> equalityComparer) { }\n    public DataLoaderBase(bool caching, int maxBatchSize) { }\n    public DataLoaderBase(System.Collections.Generic.IEqualityComparer<TKey>? equalityComparer, int maxBatchSize) { }\n    public DataLoaderBase(bool caching, System.Collections.Generic.IEqualityComparer<TKey>? equalityComparer, int maxBatchSize) { }\n    public System.Threading.Tasks.Task DispatchAsync(System.Threading.CancellationToken cancellationToken = default) { }\n    protected abstract System.Threading.Tasks.Task FetchAsync(System.Collections.Generic.IEnumerable<GraphQL.DataLoader.DataLoaderPair<TKey, T>> list, System.Threading.CancellationToken cancellationToken);\n    public virtual GraphQL.DataLoader.IDataLoaderResult<T> LoadAsync(TKey key) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Types\nDESCRIPTION: Minimal GraphQL schema definition showing only the essential Apollo Federation link directive and basic Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.2.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nschema @link(as: \"ns\", import: [\"@link\"], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Rule Configuration in EditorConfig\nDESCRIPTION: Configuration options for the GQL004 diagnostic rule in .editorconfig files.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql004.md#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[*.cs]\ndotnet_diagnostic.GQL004.reformat = true\n```\n\n----------------------------------------\n\nTITLE: Warning Suppression using Pragma Directives\nDESCRIPTION: Shows how to suppress the GQL015 warning using C# pragma directives for specific code sections.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql015.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL015\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL015\n```\n\n----------------------------------------\n\nTITLE: Implementing Human Type with Character Interface\nDESCRIPTION: The Human type implements the Character interface and adds a homePlanet field specific to humans. It includes connection fields with pagination arguments.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Harness.Tests/IntrospectionTest.VerifyIntrospection.approved.txt#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Human implements Character {\n  \"Which movie they appear in.\"\n  appearsIn: [Episode]\n  friends: [Character]\n  \"A list of a character's friends.\"\n  friendsConnection(\n    \"Only return edges after the specified cursor.\"\n    after: String,\n    \"Only return edges prior to the specified cursor.\"\n    before: String,\n    \"Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified.\"\n    first: Int,\n    \"Specifies the maximum number of edges to return, starting prior to the cursor specified by 'before', or the last number of edges if 'before' is not specified.\"\n    last: Int): CharacterInterfaceConnection\n  \"The home planet of the human.\"\n  homePlanet: String\n  \"The id of the human.\"\n  id: String!\n  \"The name of the human.\"\n  name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Complexity Configuration Classes in C#\nDESCRIPTION: Defines deprecated complexity configuration classes marked for removal in v9. Includes LegacyComplexityConfiguration and LegacyComplexityResult for handling query complexity calculations.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_229\n\nLANGUAGE: C#\nCODE:\n```\n[System.Obsolete(\"Please use the new complexity analyzer. This class will be removed in v9.\")]\npublic class LegacyComplexityConfiguration\n{\n    public LegacyComplexityConfiguration() { }\n    public double? FieldImpact { get; set; }\n    public int? MaxComplexity { get; set; }\n    public int? MaxDepth { get; set; }\n    public int MaxRecursionCount { get; set; }\n}\n\n[System.Obsolete(\"Please use the new complexity analyzer. This class will be removed in v9.\")]\npublic class LegacyComplexityResult\n{\n    public LegacyComplexityResult() { }\n    public double Complexity { get; set; }\n    public System.Collections.Generic.Dictionary<GraphQLParser.AST.ASTNode, double> ComplexityMap { get; }\n    public int TotalQueryDepth { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Roslyn Analyzer Rules Table\nDESCRIPTION: Markdown table template for tracking new analyzer rules with columns for Rule ID, Category, Severity and Notes. The table is currently empty, waiting for rules to be added.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Analyzers/AnalyzerReleases.Unshipped.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRule ID | Category | Severity | Notes\n--------|----------|----------|-------\n```\n\n----------------------------------------\n\nTITLE: AST Traversal with BasicVisitor and DebugNodeVisitor in C#\nDESCRIPTION: Demonstrates how to walk the GraphQL AST using BasicVisitor and a custom implementation of INodeVisitor that logs debug information when entering and leaving nodes.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/migrations/v0_8_0.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void VisitDocument(string operation)\n{\n    var builder = new AntlrDocumentBuilder();\n    var document = builder.Build(operation);\n\n    var debugVisitor = new DebugNodeVisitor();\n    var basicVisitor = new BasicVisitor(new[] {debugVisitor});\n    basicVisitor.Visit(document);\n}\n\npublic class DebugNodeVisitor : INodeVisitor\n{\n    public void Enter(INode node)\n    {\n        Debug.WriteLine($\"Entering {node}\");\n    }\n\n    public void Leave(INode node)\n    {\n        Debug.WriteLine($\"Leaving {node}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ResolveScopedAsync Helper Method with GraphQL.MicrosoftDI\nDESCRIPTION: Example demonstrating the ResolveScopedAsync helper method from the GraphQL.MicrosoftDI package that creates a new scope for database operations in a more concise way.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphType : ObjectGraphType<Category>\n{\n    public MyGraphType()\n    {\n        Field(\"Name\").Resolve(context => context.Source.Name);\n        Field<ListGraphType<ProductGraphType>>(\"Products\")\n            .ResolveScopedAsync(context => {\n                var db = context.RequestServices.GetRequiredService<MyDbContext>();\n                return db.Products.Where(x => x.CategoryId == context.Source.Id).ToListAsync();\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Extensions for GraphQL.NET\nDESCRIPTION: Static class providing extension methods for handling authorization metadata in GraphQL types. Includes methods for allowing anonymous access, requiring authorization, and managing policies and roles.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.ApiTests/net60/GraphQL.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class AuthorizationExtensions\n{\n    public const string ANONYMOUS_KEY = \"Authorization__AllowAnonymous\";\n    public const string AUTHORIZE_KEY = \"Authorization__Required\";\n    public const string POLICY_KEY = \"Authorization__Policies\";\n    public const string ROLE_KEY = \"Authorization__Roles\";\n    public static TMetadataProvider AllowAnonymous<TMetadataProvider>(this TMetadataProvider provider)\n        where TMetadataProvider : GraphQL.Types.IMetadataWriter { }\n    // Additional extension methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL.NET Serializers\nDESCRIPTION: Commands to install serializer implementations for GraphQL.NET. Includes options for System.Text.Json (recommended for .NET Core 3+) and Newtonsoft.Json, with a note that you can implement your own.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package GraphQL.SystemTextJson // recommended for .NET Core 3+\ndotnet add package GraphQL.NewtonsoftJson\n// or bring your own\n```\n\n----------------------------------------\n\nTITLE: Sample Processing Error Response in GraphQL.NET\nDESCRIPTION: Example JSON response showing how a FormatException processing error is formatted in the GraphQL response, including message, location, path and extension data.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Error trying to resolve field 'product'.\",\n      \"locations\": [\n        {\n          \"line\": 3,\n          \"column\": 5\n        }\n      ],\n      \"path\": [\n        \"product\"\n      ],\n      \"extensions\": {\n        \"code\": \"FORMAT\",\n        \"codes\": [\n          \"FORMAT\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified GraphQL Schema without Imported Types\nDESCRIPTION: This snippet shows a simplified version of the GraphQL schema without the imported types. It retains the @link directive for imports and defines a basic Query type.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AddLinkDirectiveSupport.6.approved.txt#2025-04-21_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nschema @link(import: [\"@link\", {as: \"LinkImport\", name: \"Import\"}], url: \"https://specs.apollo.dev/link/v1.0\") {\n  query: Query\n}\n\ntype Query {\n  dummy: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Scalar and Enum Types\nDESCRIPTION: This snippet defines a scalar type 'link__Import' and an enum type 'link__Purpose' used in the @link directive. The enum describes the purposes of link features.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/src/GraphQL.Tests/Utilities/LinkedSchemaTests.AppliedDirectivesAreProperlyRenamed.approved.txt#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nscalar link__Import\n\nenum link__Purpose {\n  \"`EXECUTION` features provide metadata necessary for operation execution.\"\n  EXECUTION\n  \"`SECURITY` features provide metadata necessary to securely resolve fields.\"\n  SECURITY\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enumeration Graph Type in GraphQL.NET\nDESCRIPTION: Example showing how to use EnumerationGraphType<> with a ListGraphType to query an enum field named 'appearsIn' that returns Episodes values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/guides/known-issues.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nField<ListGraphType<EnumerationGraphType<Episodes>>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n```\n\n----------------------------------------\n\nTITLE: GraphQL Federation Response with _entities Field in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a GraphQL Federation response containing resolved entities. The response includes the _entities field that returns the resolved 'Category' entity with its id and name properties.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/samples/GraphQL.Federation.Tests/Sample1Tests.Entities.approved.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"_entities\": [\n      {\n        \"__typename\": \"Category\",\n        \"id\": \"1\",\n        \"name\": \"Category 1\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL014 Warning in C#\nDESCRIPTION: This snippet demonstrates how to suppress the GQL014 warning for a specific line of code using preprocessor directives.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql014.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL014\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL014\n```\n\n----------------------------------------\n\nTITLE: Suppressing GQL007 Warning with Pragmas in C#\nDESCRIPTION: Example showing how to suppress a GQL007 warning using preprocessor directives in C# code for specific lines.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/analyzers/gql007.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#pragma warning disable GQL007\n// The code that's violating the rule is on this line.\n#pragma warning restore GQL007\n```\n\n----------------------------------------\n\nTITLE: Non-Null List Type Definition\nDESCRIPTION: Example of defining a Non-Null List of Strings, where the list cannot be null but can contain null values.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/lists-non-null.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmyField: [String]!\n```\n\n----------------------------------------\n\nTITLE: Castle Windsor Container Configuration\nDESCRIPTION: Example of registering IServiceProvider in Castle Windsor container for GraphQL.NET schema.\nSOURCE: https://github.com/graphql-dotnet/graphql-dotnet/blob/master/docs2/site/docs/getting-started/dependency-injection.md#2025-04-21_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic void Install(IWindsorContainer container, IConfigurationStore store)\n{\n    container.Register(\n      Component\n        .For<IServiceProvider>()\n        .UsingFactoryMethod(k => k.Resolve)\n    );\n}\n```"
  }
]