[
  {
    "owner": "flyteorg",
    "repo": "flyte",
    "content": "TITLE: Defining a Flyte Workflow with Task\nDESCRIPTION: This code defines a Flyte workflow and a task using the `@task` and `@workflow` decorators. The `say_hello` task takes a name as input and returns a greeting. The `hello_world_wf` workflow calls the `say_hello` task with a default name and returns the result. The `if __name__ == \"__main__\"` block demonstrates how to run the workflow locally.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/quickstart_guide.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n\n\n@task\ndef say_hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\n\n@workflow\ndef hello_world_wf(name: str = 'world') -> str:\n    res = say_hello(name=name)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(f\"Running wf() {hello_world_wf(name='passengers')}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Flyte Task in Python\nDESCRIPTION: This code defines a simple Flyte task that returns the string 'Hello, World!'. It demonstrates how to use the @task decorator to create a Flyte task from a Python function.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/hello_world.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef say_hello() -> str:\n    return \"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Flyte Workflow in Python\nDESCRIPTION: This snippet shows how to create a Flyte workflow that uses the previously defined task. It demonstrates how to call a task within a workflow and return its output.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/hello_world.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef hello_world_wf() -> str:\n    res = say_hello()\n    return res\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Import statement for Flyte libraries needed for dynamic workflow implementation\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Flyte Task in Python\nDESCRIPTION: Creates a simple Flyte task for calculating the mean of a list of floating-point values. The task is decorated with @task and includes type annotations for input and output parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom flytekit import task\n\n@task\ndef mean(values: List[float]) -> float:\n    return sum(values) / len(values)\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment for Flyte\nDESCRIPTION: Command to activate a Python virtual environment called 'flyte-example' using conda. This prepares the isolated environment for managing Flyte project dependencies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/creating_a_flyte_project.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda activate flyte-example\n```\n\n----------------------------------------\n\nTITLE: Executing a Remotely Fetched Task in Python\nDESCRIPTION: Fetches a task from the Flyte backend and executes it using the FlyteRemote client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nflyte_task = remote.fetch_task(name=\"workflows.example.say_hello\")\nexecution = remote.execute(flyte_task, inputs={\"name\": \"Kermit\"})\n```\n\n----------------------------------------\n\nTITLE: Running a Flyte Workflow in Python Environment\nDESCRIPTION: Command to run a Flyte workflow using pyflyte in a local Python environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run example.py wf\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Flyte Hello World Workflow in Python\nDESCRIPTION: A simple Flyte workflow that demonstrates basic task and workflow definitions using decorators to create a hello world example.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/environment_setup.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n\n@task\ndef say_hello() -> str:\n    return \"Hello, World!\"\n\n@workflow\ndef hello_world_wf() -> str:\n    res = say_hello()\n    return res\n\nif __name__ == \"__main__\":\n    print(f\"Running hello_world_wf() {hello_world_wf()}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Retries for Error Resilience\nDESCRIPTION: Shows how to implement a task with retry capabilities for handling potential errors, specifying a maximum of 3 retries and using a recoverable exception for demonstration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom flytekit import task\n\n@task(retries=3)\ndef compute_mean(data: List[float]) -> float:\n    if random() < 0.05:\n        raise FlyteRecoverableException(\"Something bad happened 🔥\")\n    return sum(data) / len(data)\n```\n\n----------------------------------------\n\nTITLE: Running a Flyte Workflow Locally\nDESCRIPTION: Commands to navigate to the workflows directory and execute the example workflow in a local Python environment using pyflyte to verify correct project setup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/creating_a_flyte_project.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd workflows\npyflyte run example.py wf\n```\n\n----------------------------------------\n\nTITLE: Dynamic Workflow Trigger\nDESCRIPTION: Workflow that triggers the dynamic character counting workflow\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef dynamic_wf(s1: str, s2: str) -> int:\n    count = count_characters(s1=s1, s2=s2)\n    return count\n```\n\n----------------------------------------\n\nTITLE: FlyteRemote Execution Inspection\nDESCRIPTION: Python code demonstrating how to use FlyteRemote to fetch and inspect execution details, including accessing inputs, outputs, and node executions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/inspecting_executions.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote import FlyteRemote\n\n# FlyteRemote object is the main entrypoint to API\nremote = FlyteRemote(\n    config=Config.for_endpoint(endpoint=\"flyte.example.net\"),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n\nexecution = remote.fetch_execution(\n    name=\"fb22e306a0d91e1c6000\", project=\"flytesnacks\", domain=\"development\"\n)\n\ninput_keys = execution.inputs.keys()\noutput_keys = execution.outputs.keys()\n\n# The inputs and outputs correspond to the top-level execution or the workflow itself.\n# To fetch a specific output, say, a model file:\nmodel_file = execution.outputs[\"model_file\"]\nwith open(model_file) as f:\n    ...\n\n# You can use FlyteRemote.sync() to sync the entity object's state with the remote state during the execution run.\nsynced_execution = remote.sync(execution, sync_nodes=True)\nnode_keys = synced_execution.node_executions.keys()\n\n# node_executions will fetch all the underlying node executions recursively.\n# To fetch output of a specific node execution:\nnode_execution_output = synced_execution.node_executions[\"n1\"].outputs[\"model_file\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Deviation and Scaling Tasks in Python\nDESCRIPTION: Implements two additional Flyte tasks: one to calculate standard deviation of a list of values and another to perform standard scaling (mean centering and dividing by standard deviation).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom math import sqrt\nfrom flytekit import workflow\n\n\n@task\ndef standard_deviation(values: List[float], mu: float) -> float:\n    variance = sum([(x - mu) ** 2 for x in values])\n    return sqrt(variance)\n\n@task\ndef standard_scale(values: List[float], mu: float, sigma: float) -> List[float]:\n    return [(x - mu) / sigma for x in values]\n```\n\n----------------------------------------\n\nTITLE: Configuring a BigQuery Task in Python\nDESCRIPTION: Example of defining a BigQuery task that queries the Dogecoin transaction dataset. The task uses AsyncAgentExecutorMixin to enable local agent execution and specifies input parameters, query template, and output type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_python_environment.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbigquery_doge_coin = BigQueryTask(\n    name=f\"bigquery.doge_coin\",\n    inputs=kwtypes(version=int),\n    query_template=\"SELECT * FROM `bigquery-public-data.crypto_dogecoin.transactions` WHERE version = @version LIMIT 10;\",\n    output_structured_dataset_type=StructuredDataset,\n    task_config=BigQueryConfig(ProjectID=\"flyte-test-340607\")\n)\n```\n\n----------------------------------------\n\nTITLE: Running a Flyte Workflow Locally\nDESCRIPTION: This command runs a Flyte workflow locally using the `pyflyte run` command. It specifies the path to the workflow file and the name of the workflow to run. It also shows how to pass arguments to the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/quickstart_guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run example.py hello_world_wf\n```\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run example.py hello_world_wf --name Ada\n```\n\n----------------------------------------\n\nTITLE: Using Task Output in Complex Flyte Conditional\nDESCRIPTION: This example shows a more complex workflow that uses the output of a task to determine which calculation to perform in a conditional statement.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef coin_toss(seed: int) -> str:\n    random.seed(seed)\n    return random.choice([\"heads\", \"tails\"])\n\n@workflow\ndef consume_task_output(radius: float, seed: int) -> float:\n    coin_result = coin_toss(seed=seed)\n    return (\n        conditional(\"coin_toss_condition\")\n        .if_(coin_result == \"heads\")\n        .then(calculate_circle_circumference(radius=radius))\n        .else_()\n        .then(calculate_circle_area(radius=radius))\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing a Flyte Task in Python\nDESCRIPTION: This snippet demonstrates how to execute a Flyte task like a regular Python function, using keyword arguments to specify parameter values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = slope(x=[-3, 0, 3], y=[7, 4, -2])\nprint(f\"Slope: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Programmatic Task Execution with FlyteRemote\nDESCRIPTION: Python code demonstrating how to execute a task programmatically using FlyteRemote API, including configuration, task fetching, registration, execution, and result inspection\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote import FlyteRemote\nfrom flytekit.configuration import Config, SerializationSettings\n\n# FlyteRemote object is the main entrypoint to API\nremote = FlyteRemote(\n    config=Config.for_endpoint(endpoint=\"flyte.example.net\"),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n\n# Get Task\nflyte_task = remote.fetch_task(name=\"workflows.example.generate_normal_df\", version=\"v1\")\n\nflyte_task = remote.register_task(\n    entity=flyte_task,\n    serialization_settings=SerializationSettings(image_config=None),\n    version=\"v2\",\n)\n\n# Run Task\nexecution = remote.execute(\n     flyte_task, inputs={\"n\": 200, \"mean\": 0.0, \"sigma\": 1.0}, execution_name=\"task-execution\", wait=True\n)\n\n# Or use execution_name_prefix to avoid repeated execution names\nexecution = remote.execute(\n     flyte_task, inputs={\"n\": 200, \"mean\": 0.0, \"sigma\": 1.0}, execution_name_prefix=\"flyte\", wait=True\n)\n\n# Inspecting execution\n# The 'inputs' and 'outputs' correspond to the task execution.\ninput_keys = execution.inputs.keys()\noutput_keys = execution.outputs.keys()\n```\n\n----------------------------------------\n\nTITLE: Consuming Conditional Output in Flyte Workflow\nDESCRIPTION: This example demonstrates how to consume the output returned by a conditional statement in a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef calculate_circle_properties(radius: float) -> float:\n    return (\n        conditional(\"if_fraction\")\n        .if_((radius >= 0) & (radius <= 1))\n        .then(calculate_circle_circumference(radius=radius))\n        .else_()\n        .then(calculate_circle_area(radius=radius))\n    )\n\n@task\ndef print_outputs(t1_output: float) -> float:\n    print(f\"Output of first task: {t1_output}\")\n    return t1_output\n\n@workflow\ndef shape_properties_accept_conditional_output(radius: float) -> float:\n    result = calculate_circle_properties(radius=radius)\n    return print_outputs(t1_output=result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Plugins in YAML\nDESCRIPTION: This snippet demonstrates the configuration of task plugins within a YAML file for Flyte. It includes enabling multiple plugins such as container, sidecar, k8s-array, and dask, and setting them as defaults for specific task types. The configuration is used to override default values during deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - dask\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - dask: dask\n```\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - dask\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          dask: dask\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Sandbox\nDESCRIPTION: This command initiates the Flyte sandbox cluster, setting up a minimal, standalone environment for running Flyte locally within a Docker container. It simplifies the process of deploying a Flyte sandbox for development and testing purposes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl sandbox start\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Regression Line Calculation Subworkflow in Python\nDESCRIPTION: Demonstrates calculation of slope and intercept in one workflow and using it as a subworkflow in another to compute y-values. Shows basic subworkflow pattern with two workflows: slope_intercept_wf and regression_line_wf.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/subworkflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom flytekit import task, workflow\n\n@task\ndef slope(x: typing.List[int], y: typing.List[int]) -> float:\n    x_mean = sum(x) / len(x)\n    y_mean = sum(y) / len(y)\n    num = sum((x[i] - x_mean) * (y[i] - y_mean) for i in range(len(x)))\n    den = sum((x[i] - x_mean) ** 2 for i in range(len(x)))\n    return num / den\n\n@task\ndef intercept(x: typing.List[int], y: typing.List[int], m: float) -> float:\n    return sum(y) / len(y) - m * sum(x) / len(x)\n\n@workflow\ndef slope_intercept_wf(x: typing.List[int], y: typing.List[int]) -> typing.Tuple[float, float]:\n    m = slope(x=x, y=y)\n    b = intercept(x=x, y=y, m=m)\n    return m, b\n\n@task\ndef compute_y(x: typing.List[int], m: float, b: float) -> typing.List[float]:\n    return [m * xi + b for xi in x]\n\n@workflow\ndef regression_line_wf(x: typing.List[int], y: typing.List[int]) -> typing.List[float]:\n    m, b = slope_intercept_wf(x=x, y=y)\n    y_pred = compute_y(x=x, m=m, b=b)\n    return y_pred\n```\n\n----------------------------------------\n\nTITLE: Packaging Multiple Workflow Directories\nDESCRIPTION: Command to package multiple workflow directories into a single Flyte package. Useful for maintaining multiple Flyte projects in a single location.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npyflyte --pkgs <dir1> --pkgs <dir2> package ...\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte Task Module in Python\nDESCRIPTION: This snippet shows how to import the 'task' decorator from the 'flytekit' library, which is essential for creating Flyte tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task\n```\n\n----------------------------------------\n\nTITLE: Python Workflow Execution with Command Line Arguments\nDESCRIPTION: Example code showing how to pass command line arguments to a Flyte workflow using argparse in Python.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    from argparse import ArgumentParser\n\n    parser = ArgumentParser()\n    parser.add_argument(\"--name\", type=str)\n\n    args = parser.parse_args()\n    print(wf(name=args.name))\n```\n\n----------------------------------------\n\nTITLE: Embedding Flyte Launch Plans in Workflows\nDESCRIPTION: This code shows how to embed a launch plan within a workflow function using the '@workflow' decorator. The 'workflow_with_launchplan' function demonstrates computing data using given parameters, then executing the 'standard_scale_launch_plan' with the generated data. This practice increases modularity and separation of concerns by managing workflows as distinct, callable entities within Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n@workflow\ndef workflow_with_launchplan(num_samples: int, seed: int) -> List[float]:\n    data = generate_data(num_samples=num_samples, seed=seed)\n    return standard_scale_launch_plan(values=data)\n\nworkflow_with_launchplan(num_samples=10, seed=3)\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageSpec for Custom Container Images in Python\nDESCRIPTION: Demonstrates how to use ImageSpec to build a custom container image without writing a Dockerfile. This configuration specifies the base image, required packages, and registry for the image.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/flyte_project_components.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbasic_image = ImageSpec(\n   name=\"flytekit\",  # default docker image name.\n   base_image=\"ghcr.io/flyteorg/flytekit:py3.11-1.10.2\",  # the base image that flytekit will use to build your image.\n   packages=[\"pandas\"],  # python packages to install.\n   registry=\"ghcr.io/unionai-oss\", # the registry your image will be pushed to.\n   python_version=\"3.11\"  # Optional if python is installed in the base image.\n)\n```\n\n----------------------------------------\n\nTITLE: Running a workflow remotely with pyflyte run\nDESCRIPTION: This command registers and executes a single workflow script on a remote Flyte cluster. It's ideal for quickly iterating on a single workflow file without packaging the entire project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote workflows/example.py wf --name \"Gilgamesh\"\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte Decorators in Python\nDESCRIPTION: This snippet shows how to import the necessary decorators from the flytekit library to create Flyte tasks and workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/hello_world.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow with Workflow-Level Failure Handling\nDESCRIPTION: Shows how to implement failure handling at the workflow level by setting on_failure to another workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/failure_node.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef wf2(a: int) -> Tuple[int, str]:\n    return will_fail(a=a).with_overrides(on_failure=subwf)\n```\n\n----------------------------------------\n\nTITLE: Executing a Remotely Fetched Workflow in Python\nDESCRIPTION: Fetches a workflow from the Flyte backend and executes it using the FlyteRemote client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflyte_wf = remote.fetch_workflow(name=\"workflows.example.wf\")\nexecution = remote.execute(flyte_wf, inputs={\"name\": \"Kermit\"})\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte Task and Workflow Decorators in Python\nDESCRIPTION: Demonstrates how to import the necessary decorators from flytekit to create tasks and workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Workflow Inputs in Flyte Conditional\nDESCRIPTION: This example demonstrates how to use a boolean input directly in a conditional statement within a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef boolean_input_wf(boolean_input: bool) -> str:\n    return (\n        conditional(\"test\")\n        .if_(boolean_input.is_true())\n        .then(print_value(value=\"boolean_input is True\"))\n        .else_()\n        .then(print_value(value=\"boolean_input is False\"))\n    )\n```\n\n----------------------------------------\n\nTITLE: Complete Workflow State Transitions\nDESCRIPTION: Detailed mermaid flowchart showing all possible workflow state transitions including error handling and abort scenarios.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/state_machine.rst#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n     Queued -->|On system errors more than threshold| Aborted\n     Queued --> Ready\n     Ready--> |Write inputs to workflow| Running\n     Running--> |On system error| Running\n     Running--> |On all Nodes Success| Succeeding\n     Succeeding--> |On successful event send to Admin| Succeeded\n     Succeeding--> |On system error| Succeeding\n     Ready--> |On precondition failure| Failing\n     Running--> |On any Node Failure| Failing\n     Ready--> |On user initiated abort| Aborting\n     Running--> |On user initiated abort| Aborting\n     Succeeding--> |On user initiated abort| Aborting\n     Failing--> |If Failure node exists| HandleFailureNode\n     Failing--> |On user initiated abort| Aborting\n     HandleFailureNode--> |On completing failure node| Failed\n     HandleFailureNode--> |On user initiated abort| Aborting\n     Failing--> |On successful send of Failure node| Failed\n     Aborting--> |On successful event send to Admin| Aborted\n```\n\n----------------------------------------\n\nTITLE: Executing Workflows Using FlyteRemote in Python\nDESCRIPTION: Demonstrates how to use FlyteRemote to execute Flyte workflows remotely. Shows configuration setup, workflow fetching, and execution with different naming options. Includes both basic execution and execution with prefix-based naming.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote import FlyteRemote\nfrom flytekit.configuration import Config\n\n# FlyteRemote object is the main entrypoint to API\nremote = FlyteRemote(\n    config=Config.for_endpoint(endpoint=\"flyte.example.net\"),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n\n# Fetch workflow\nflyte_workflow = remote.fetch_workflow(name=\"workflows.example.wf\", version=\"v1\")\n\n# Execute\nexecution = remote.execute(\n    flyte_workflow, inputs={\"mean\": 1}, execution_name=\"workflow-execution\", wait=True\n)\n\n# Or use execution_name_prefix to avoid repeated execution names\nexecution = remote.execute(\n    flyte_workflow, inputs={\"mean\": 1}, execution_name_prefix=\"flyte\", wait=True\n)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container for Flyte Project\nDESCRIPTION: Uses the docker_build.sh script to build and tag a container for your Flyte project. This script uses the PROJECT_NAME specified in pyflyte init and git sha for versioning by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./docker_build.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Launch Plan with Cron in Python\nDESCRIPTION: Creates a launch plan with a cron schedule to run a workflow at regular intervals, in this case every minute.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import LaunchPlan, CronSchedule\n\nfrom workflows.example import wf\n\n\nlaunch_plan = LaunchPlan.get_or_create(\n    wf,\n    name=\"wf_launchplan\",\n    # run this launchplan every minute\n    schedule=CronSchedule(schedule=\"*/1 * * * *\"),\n    default_inputs={\"name\": \"Elmo\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flyte Project\nDESCRIPTION: This command initializes a new Flyte project with a \"Hello, world!\" template using the `pyflyte init` command. It creates a project directory containing an `example.py` file with the sample code.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/quickstart_guide.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte init --template hello-world hello-world\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Python SDK\nDESCRIPTION: Command to install the Flyte Python SDK using pip package manager\nSOURCE: https://github.com/flyteorg/flyte/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flytekit\n```\n\n----------------------------------------\n\nTITLE: Conditional Approval Flow in Flyte\nDESCRIPTION: Implements a complex workflow combining approval nodes with conditionals to handle both approved and rejected scenarios.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/waiting_for_external_inputs.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef invalid_report(report: str, reason: str) -> str:\n    return f\"INVALID REPORT ({reason}):\\n{report}\"\n\n@workflow\ndef conditional_wf(data: typing.List[float]) -> str:\n    \"\"\"A workflow that creates a report and conditionally processes it based on approval.\"\"\"\n    report = create_report(data=data)\n    approved = approve(\n        \"review-passes\",\n        report,\n        help=\"Review the report and approve if it looks good\",\n    )\n    disapprove_reason = wait_for_input(\n        \"review-fails-reason\",\n        timeout=timedelta(hours=1),\n        expected_type=str,\n        default=\"Report looks invalid\",\n        help=\"Provide a reason for disapproving the report\",\n    )\n    return ( \n        conditional(\"review_passed\")\n        .if_(approved.is_true())\n        .then(reporting_wf(data=data))\n        .else_(invalid_report(report=report, reason=disapprove_reason))\n    )\n```\n\n----------------------------------------\n\nTITLE: Executing a Locally Defined Launch Plan in Python\nDESCRIPTION: Creates and executes a launch plan from a locally defined workflow with default inputs using the FlyteRemote client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom workflows.example import wf\n\nlaunch_plan = LaunchPlan.get_or_create(\n    wf, name=\"launch_plan\", default_inputs={\"name\": \"Elmo\"},\n)\n\nexecution = remote.execute(launch_plan, inputs={})\n```\n\n----------------------------------------\n\nTITLE: Configuring PyTorch Task with Flyte\nDESCRIPTION: This snippet demonstrates how to configure a Flyte task to use the PyTorch plugin for distributed training. It specifies the number of workers, resource requests, limits, and the container image to use.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_8\n\nLANGUAGE: ipython3\nCODE:\n```\nfrom flytekitplugins.kfpytorch import PyTorch\n\n@task(\n    task_config=PyTorch(num_workers=2),\n    requests=Resources(cpu=\"2\", gpu=\"1\", mem=\"8Gi\"),\n    limits=Resources(cpu=\"4\", gpu=\"2\", mem=\"16Gi\"),\n    container_image=\"ghcr.io/flyteorg/flytecookbook:kfpytorch-latest\",\n)\ndef train_model(features: np.ndarray, target: np.ndarray) -> nn.Module:\n    ...  # train a model using gpus\n```\n\n----------------------------------------\n\nTITLE: Creating a FlyteRemote Client in Python\nDESCRIPTION: Initializes a FlyteRemote object to interact with a Flyte cluster, setting up the configuration and default project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.configuration import Config\nfrom flytekit.remote import FlyteRemote\n\nremote = FlyteRemote(\n    config=Config.auto(),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Task with Custom Resource Requirements in Flyte\nDESCRIPTION: Creates a task that counts unique numbers in a dataset with specific CPU, memory, and GPU resource requests and limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    requests=Resources(cpu=\"1\", mem=\"100Mi\"),\n    limits=Resources(cpu=\"2\", mem=\"150Mi\", gpu=\"1\"),\n)\ndef count_unique_numbers(x: typing.List[int]) -> int:\n    \"\"\"Count the number of unique values in the input list of integers.\"\"\"\n    s = set()\n    for i in x:\n        s.add(i)\n    return len(s)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Flyte Workflow Documentation\nDESCRIPTION: This snippet shows the initial imports required for documenting Flyte workflows. It imports the necessary Flyte libraries and tasks from a separate file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/documenting_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import workflow\nfrom flytekit.types.schema import FlyteSchema\nfrom .workflow import slope, intercept\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Tasks for Parallelization\nDESCRIPTION: Shows how to use map_task to parallelize workloads by partitioning data and processing it concurrently, with a workflow that splits data into chunks, processes them in parallel, and combines the results.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport math\nfrom typing import Tuple\n\nfrom flytekit import map_task\n\n\n@task\ndef sum_and_length(data: List[float]) -> List[float]:\n    \"\"\"Return the sum and length of a dataset of numbers.\"\"\"\n    return [sum(data), float(len(data))]\n\n\n@task\ndef prepare_partitions(data: List[float], n_partitions: int) -> List[List[float]]:\n    \"\"\"Create partitions from the full dataset.\"\"\"\n    size = math.ceil(len(data) / n_partitions)\n    return [data[size * i: size * (i + 1)] for i in range(n_partitions)]\n\n@task\ndef reduce(results: List[List[float]]) -> float:\n    \"\"\"Combine results from the map task.\"\"\"\n    total, length = 0.0, 0.0\n    for sub_total, sub_length in results:\n        total += sub_total\n        length += sub_length\n    return total / length\n\n\n@workflow\ndef parallelized_compute_mean(data: List[float], n_partitions: int = 10) -> float:\n    \"\"\"An embarrassingly parallel implementation to compute the mean from data.\"\"\"\n    partitioned_data = prepare_partitions(data=data, n_partitions=n_partitions)\n\n    # use map_task to apply the sum_and_length task to the partitions\n    results = map_task(sum_and_length)(data=partitioned_data)\n    return reduce(results=results)\n\n\nparallelized_compute_mean(data=[float(x) for x in range(10_000)])\n```\n\n----------------------------------------\n\nTITLE: Implementing NumPy Decoder for Structured Datasets in Python\nDESCRIPTION: This code defines a NumpyDecodingHandler class that extends StructuredDatasetDecoder to convert parquet files to numpy.ndarray objects. It implements the decode method that reads the parquet file and returns its content as a NumPy array.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass NumpyDecodingHandler(StructuredDatasetDecoder[np.ndarray]):\n    \"\"\"\n    Implements decoders from Parquet to numpy ndarrays.\n    \"\"\"\n\n    def decode(\n        self,\n        ctx: FlyteContext,\n        flyte_value: StructuredDataset,\n        current_task_metadata: WorkflowExecutionParameters,\n    ) -> np.ndarray:\n        \"\"\"\n        Converts parquet file to numpy array\n        :param ctx: FlyteContext\n        :param flyte_value: StructuredDataset\n        :param current_task_metadata: WorkflowExecutionParameters\n        :return: numpy array\n        \"\"\"\n        local_dir = ctx.file_access.get_random_local_directory()\n        ctx.file_access.get_data(flyte_value.uri, local_dir, is_multipart=True)\n        path = os.path.join(local_dir, \"000000\")\n        df = pd.read_parquet(path)\n        return df.to_numpy()\n```\n\n----------------------------------------\n\nTITLE: Registering workflows with a custom Docker image\nDESCRIPTION: Similar to basic registration but allows specifying a custom Docker image to use for workflow execution. This is useful when you need specific dependencies or runtime environments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyflyte register workflows --image ghcr.io/flyteorg/flytekit:py3.9-latest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Map Task Workflow in Python\nDESCRIPTION: This example demonstrates a basic workflow using map_task to detect anomalies in a list of data points.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef detect_anomalies(data_point: int) -> bool:\n    return data_point > 50\n\n\n@workflow\ndef map_workflow(data: list[int] = [10, 12, 11, 10, 13, 12, 100, 11, 12, 10]) -> list[bool]:\n    return map_task(detect_anomalies)(data_point=data)\n```\n\n----------------------------------------\n\nTITLE: Composing a Flyte Workflow from Multiple Tasks\nDESCRIPTION: Creates a workflow that combines multiple tasks (mean, standard_deviation, and standard_scale) into a cohesive execution graph. The workflow is decorated with @workflow and defines the flow of data between tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef standard_scale_workflow(values: List[float]) -> List[float]:\n    mu = mean(values=values)\n    sigma = standard_deviation(values=values, mu=mu)\n    return standard_scale(values=values, mu=mu, sigma=sigma)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flyte Project\nDESCRIPTION: Command to initialize a new Flyte project named 'my_project' using the pyflyte tool. This creates a project directory with the basic-template-imagespec structure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/creating_a_flyte_project.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte init my_project\n```\n\n----------------------------------------\n\nTITLE: Registering Workflow Using pyflyte CLI\nDESCRIPTION: Command to register a workflow defined in wf.py to the Flyte backend using the pyflyte CLI tool.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte register wf.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries and Spot Instances in Flyte Task\nDESCRIPTION: This snippet demonstrates how to configure a Flyte task to run on spot instances with a specified number of retries.  It uses the `interruptible` flag to enable running on spot instances, and the `retries` parameter to specify the number of retries.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task\n\n@task(\n    retries=3,               # User retry budget\n    interruptible=True       # Enables running on spot instances\n)\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive FlyteRemote Object in Python\nDESCRIPTION: Initializes a FlyteRemote client with interactive mode enabled to register and run workflows on a Flyte cluster from within a Jupyter notebook. The configuration specifies the project, domain, and enables interactive mode.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/jupyter_notebook_interaction.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.configuration import Config\nfrom flytekit.remote import FlyteRemote\n\nremote = FlyteRemote(\n    config=Config.auto(),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n    interactive_mode_enabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Flyte Task for Slope Calculation in Python\nDESCRIPTION: This code defines a Flyte task that computes the slope of a regression line. It demonstrates how to use the @task decorator and type annotations for inputs and outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef slope(x: List[int], y: List[int]) -> float:\n    if len(x) != len(y):\n        raise ValueError(\"Lists x and y must have the same length\")\n    n = len(x)\n    x_mean = sum(x) / n\n    y_mean = sum(y) / n\n    numerator = sum((x[i] - x_mean) * (y[i] - y_mean) for i in range(n))\n    denominator = sum((x[i] - x_mean) ** 2 for i in range(n))\n    return numerator / denominator\n```\n\n----------------------------------------\n\nTITLE: Adding Workflow Inputs\nDESCRIPTION: Adds input parameters to the imperative workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 11-12\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Sandbox with Helm\nDESCRIPTION: Commands to add the Flyte Helm repository and install the Flyte Sandbox chart. This snippet demonstrates how to use Helm to deploy Flyte in a Kubernetes cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyte https://flyteorg.github.io/flyte\nhelm install -n flyte -f values.yaml --create-namespace flyte flyte/flyte\n```\n\n----------------------------------------\n\nTITLE: Implementing Snowflake Query Task Plugin\nDESCRIPTION: Example demonstrating how to create and use a Snowflake query task plugin within a workflow, showing integration with datetime inputs and pandas DataFrame outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/index.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nquery_task = SnowflakeTask(\n    query=\"Select * from x where x.time < {{.inputs.time}}\",\n    inputs=kwtypes(time=datetime),\n    output_schema_type=pandas.DataFrame,\n)\n\n@workflow\ndef my_wf(t: datetime) -> ...:\n    df = query_task(time=t)\n    return process(df=df)\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks and Workflows with FlyteRemote in Python\nDESCRIPTION: Demonstrates how to execute Flyte tasks and workflows using the FlyteRemote client's execute method. The examples show passing inputs to both task and workflow executions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/jupyter_notebook_interaction.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nexecution = remote.execute(my_task, inputs={\"name\": \"Flyte\"})\nexecution = remote.execute(my_wf, inputs={\"name\": \"Flyte\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing a File Sensor in Python\nDESCRIPTION: Example implementation of a custom sensor that extends BaseSensor to monitor file existence in an S3 bucket.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/developing_agents.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.sensor.base_sensor import BaseSensor\nimport s3fs\n\nclass FileSensor(BaseSensor):\n    def __init__(self):\n        super().__init__(task_type=\"file_sensor\")\n\n    def poke(self, path: str) -> bool:\n        fs = s3fs.S3FileSystem()\n        return fs.exists(path)\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte dependencies for raw container tasks\nDESCRIPTION: Imports necessary Flyte modules and types for working with raw containers and workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ContainerTask, kwtypes, task, workflow\nfrom flytekit.types.file import FlyteFile\nfrom flytekit.image_spec import ImageSpec\nfrom flytekit.types.directory import FlyteDirectory\nfrom flytekit.core.base_task import TaskMetadata\n```\n\n----------------------------------------\n\nTITLE: ImageSpec Configuration for Flyte\nDESCRIPTION: Defines a custom image specification for the Flyte environment using ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pydantic_basemodel.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncustom_image = ImageSpec(\n    name=\"custom\",\n    packages=[\"pydantic\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Allocating Resources for Flyte Tasks\nDESCRIPTION: Shows how to specify resource requirements for tasks with different computational needs, using the Resources class to request specific CPU and memory allocations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Resources\n\n\n@task(requests=Resources(cpu=\"2\", mem=\"100Mi\"))\ndef light_task() -> float:\n    ...\n\n\n@task(requests=Resources(cpu=\"16\", mem=\"16Gi\"))\ndef heavy_task() -> float:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Workflow with Kickoff Time Parameter\nDESCRIPTION: Defines a workflow that accepts a kickoff time parameter and creates a launch plan that automatically passes the schedule's trigger time to the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom flytekit import workflow, LaunchPlan, CronSchedule\n\n\n@workflow\ndef process_data_wf(kickoff_time: datetime):\n    # read data and process it based on kickoff_time\n    ...\n\nprocess_data_lp = LaunchPlan.get_or_create(\n    process_data_wf,\n    name=\"process_data_lp\",\n    schedule=CronSchedule(\n        schedule=\"*/1 * * * *\",\n        kickoff_time_input_arg=\"kickoff_time\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Serializing for a Task in Flyte using Python\nDESCRIPTION: This example demonstrates how to implement cache serializing for a task in Flyte. It defines a 'square' function that multiplies a number by itself, using the @task decorator with cache and cache_serialize parameters enabled.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/cache_serializing.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task(cache=True, cache_version=\"1.0\", cache_serialize=True)\ndef square(n: int) -> int:\n    return n * n\n```\n\n----------------------------------------\n\nTITLE: Providing Multiple Lists as Input to Map Tasks in Python\nDESCRIPTION: This example demonstrates how to provide multiple lists as input to a map_task in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef map_workflow_with_lists(\n    quantities: list[int] = [1, 2, 3],\n    prices: list[float] = [10.0, 20.0, 30.0],\n    discounts: list[float] = [0.1, 0.2, 0.3],\n) -> list[float]:\n    return map_task(multi_input_task)(\n        quantity=quantities,\n        price=prices,\n        discount=discounts,\n    )\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Pydantic BaseModel in Flyte\nDESCRIPTION: Imports required packages including pydantic, flytekit, and pandas for working with Pydantic BaseModel in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pydantic_basemodel.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom pathlib import Path\nfrom typing import Dict\n\nfrom flytekit import ImageSpec, task, workflow\nfrom flytekit.types.directory import FlyteDirectory\nfrom flytekit.types.file import FlyteFile\nfrom flytekit.types.structured.structured_dataset import StructuredDataset\nfrom pydantic import BaseModel\n```\n\n----------------------------------------\n\nTITLE: Executing Launch Plan with Default Values\nDESCRIPTION: Running the launch plan using the specified default input values\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlp().execute()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Character Counter Workflow\nDESCRIPTION: Dynamic workflow that counts common characters between two strings by comparing their character frequencies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dynamic\ndef count_characters(s1: str, s2: str) -> int:\n    freq_list1 = [0] * 26\n    freq_list2 = [0] * 26\n\n    for c in s1:\n        index = return_index(c=c)\n        freq_list1 = update_list(freq_list=freq_list1, index=index)\n\n    for c in s2:\n        index = return_index(c=c)\n        freq_list2 = update_list(freq_list=freq_list2, index=index)\n\n    count = derive_count(freq_list1=freq_list1, freq_list2=freq_list2)\n    return count\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Subworkflows in Flyte\nDESCRIPTION: Demonstrates how to embed one workflow inside another as a subworkflow. The outer workflow generates data using a task and then passes it to the subworkflow for processing.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport random\n\n@task\ndef generate_data(num_samples: int, seed: int) -> List[float]:\n    random.seed(seed)\n    return [random.random() for _ in range(num_samples)]\n\n@workflow\ndef workflow_with_subworkflow(num_samples: int, seed: int) -> List[float]:\n    data = generate_data(num_samples=num_samples, seed=seed)\n    return standard_scale_workflow(values=data)\n\nworkflow_with_subworkflow(num_samples=10, seed=3)\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Sandbox Cluster\nDESCRIPTION: This snippet demonstrates how to start a Flyte sandbox cluster using the `flytectl sandbox start` command. It initializes a fully standalone minimal environment for running Flyte locally in a Docker container.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start\"\n```\n\n----------------------------------------\n\nTITLE: Local Execution of Nested Regression Subworkflow in Python\nDESCRIPTION: Shows how to execute the nested regression line workflow locally with sample input data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/subworkflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Output: {nested_regression_line_wf(x=[1, 2, 3], y=[2, 4, 6])}\")  # [2.0, 4.0, 6.0]\n```\n\n----------------------------------------\n\nTITLE: Running a Flyte Workflow in Python\nDESCRIPTION: This code demonstrates how to run a Flyte workflow by calling it like a regular Python function. It prints the result of the workflow execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/hello_world.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(f\"Running hello_world_wf() {hello_world_wf()}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Flyte Workflow in Python\nDESCRIPTION: Demonstrates how to create a simple workflow that combines the 'slope' and 'intercept' tasks to compute a regression line.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef simple_wf(x: List[int], y: List[int]) -> Tuple[float, float]:\n    m = slope(x=x, y=y)\n    b = intercept(x=x, y=y, m=m)\n    return m, b\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flytekit Development Environment\nDESCRIPTION: This snippet demonstrates how to set up a virtual environment for Flytekit development. It includes cloning the repository, creating a virtual environment, and installing the necessary dependencies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/flyteorg/flytekit.git # replace with your own repo\ncd flytekit\nvirtualenv ~/.virtualenvs/flytekit\nsource ~/.virtualenvs/flytekit/bin/activate\nmake setup\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating a Cron-Scheduled Launch Plan in Python\nDESCRIPTION: This snippet demonstrates how to create a launch plan with a cron schedule that runs every hour. It uses the CronSchedule class to define the schedule and associates it with a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/schedules.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncron_lp_every_min_of_hour = LaunchPlan.get_or_create(\n    name=\"my_cron_scheduled_lp\",\n    workflow=date_formatter_wf,\n    schedule=CronSchedule(\n        # Note that kickoff_time_input_arg matches the workflow input we defined above: kickoff_time\n        # But in case you are using the AWS scheme of schedules and not using the native scheduler then switch over the schedule parameter with cron_expression\n        schedule=\"@hourly\", # Following schedule runs every hour at beginning of the hour\n        kickoff_time_input_arg=\"kickoff_time\",\n    ),\n\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Project Dependencies\nDESCRIPTION: Commands to navigate to the project directory and install the required Python packages listed in requirements.txt for the Flyte project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/creating_a_flyte_project.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my_project\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing PCA Plot Task with Deck\nDESCRIPTION: Task implementation that creates a PCA plot using Flyte Decks with Markdown and Plotly visualizations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True, container_image=custom_image, requests=Resources(cpu=\"1\", mem=\"1Gi\"))\ndef pca_plot():\n    from sklearn.datasets import load_iris\n    from sklearn.decomposition import PCA\n    import plotly.express as px\n\n    iris = load_iris()\n    X = pd.DataFrame(iris.data, columns=[\"sepal length\", \"sepal width\", \"petal length\", \"petal width\"])\n    y = pd.DataFrame(iris.target, columns=[\"species\"])\n\n    pca = PCA(n_components=2)\n    components = pca.fit_transform(X)\n    fig = px.scatter(\n        components,\n        x=0,\n        y=1,\n        color=y[\"species\"],\n        title=\"Flyte Deck | PCA of Iris Dataset\",\n        labels={\"0\": \"First Principal Component\", \"1\": \"Second Principal Component\"},\n    )\n\n    md = renderer.MarkdownRenderer()\n    md.append(\"## Principal Component Analysis\")\n    md.append(\n        \"Principal component analysis (PCA) is a popular technique for analyzing large datasets \"\n        \"containing a high number of dimensions/features per observation.\"\n    )\n    plotly = renderer.PlotlyRenderer()\n    plotly.append(fig)\n    md.append(plotly)\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Caching in Flyte\nDESCRIPTION: Demonstrates how to implement caching for expensive tasks using the cache and cache_version parameters. The example shows a task to compute the mean of a list of numbers that gets cached between workflow calls.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom flytekit import task, workflow\n\n\n@task(cache=True, cache_version=\"1\")\ndef compute_mean(data: List[float]) -> float:\n    return sum(data) / len(data)\n\n@workflow\ndef wf(data: List[float]) -> float:\n    return compute_mean(data=data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Task Plugin in Python\nDESCRIPTION: Example showing how to configure a custom task plugin using a task decorator with plugin-specific configuration parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/index.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(task_config=MyContainerExecutionTask(\n    plugin_specific_config_a=...,\n    plugin_specific_config_b=...,\n    ...\n))\ndef foo(...) -> ...:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Sphinx-style Docstring in Flyte Workflow\nDESCRIPTION: This snippet demonstrates how to use a Sphinx-style docstring to document a Flyte workflow. It includes a brief overview, detailed explanation, and parameter/return type descriptions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/documenting_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef sphinx_docstring_wf(dataset: FlyteSchema[kw1:str, kw2:str, x:float, y:float]) -> (float, float):\n    \"\"\"\n    Calculates slope and intercept using linear regression.\n\n    This workflow takes a dataset as input and calculates the slope and\n    intercept using linear regression. It demonstrates the use of\n    Sphinx-style docstrings in Flyte workflows.\n\n    :param dataset: Input dataset containing x and y values\n    :type dataset: FlyteSchema[kw1:str, kw2:str, x:float, y:float]\n    :return: Tuple containing slope and intercept\n    :rtype: (float, float)\n    \"\"\"\n    m = slope(dataset=dataset)\n    b = intercept(dataset=dataset)\n    return m, b\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Branches in Flyte Conditional\nDESCRIPTION: This snippet shows how to create multiple branches in a Flyte conditional statement, with different outcomes based on the input radius.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef shape_properties_with_multiple_branches(radius: float) -> float:\n    return (\n        conditional(\"if_fraction\")\n        .if_((radius >= 0) & (radius <= 1))\n        .then(calculate_circle_circumference(radius=radius))\n        .elif_((radius > 1) & (radius <= 10))\n        .then(calculate_circle_area(radius=radius))\n        .else_()\n        .fail(\"RuntimeError(\\\"radius must be between 0 and 10\\\")\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Image Workflows in Flyte\nDESCRIPTION: Demonstrates how to create workflows with tasks that use different container images, such as one task using a standard image and another requiring GPU support for model training.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport torch.nn as nn\n\n@task(\n    requests=Resources(cpu=\"2\", mem=\"16Gi\"),\n    container_image=\"ghcr.io/flyteorg/flytekit:py3.9-latest\",\n)\ndef get_data() -> Tuple[np.ndarray, np.ndarray]:\n    ...  # get dataset as numpy ndarrays\n\n\n@task(\n    requests=Resources(cpu=\"4\", gpu=\"1\", mem=\"16Gi\"),\n    container_image=\"ghcr.io/flyteorg/flytecookbook:kfpytorch-latest\",\n)\ndef train_model(features: np.ndarray, target: np.ndarray) -> nn.Module:\n    ...  # train a model using gpus\n```\n\n----------------------------------------\n\nTITLE: Mocking Tasks Using task_mock Utility\nDESCRIPTION: Demonstrate how to use the task_mock utility to override the return value of a task that cannot be run locally, enabling workflow testing.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/mocking_tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main_1():\n    with task_mock(sql) as mock:\n        mock.return_value = \"mocked result\"\n        result = my_wf(query=\"test query\")\n        assert result == \"mocked result appended\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow with Mockable Tasks\nDESCRIPTION: Define a workflow that chains together a local task and a mock SQL task, demonstrating how tasks with different execution capabilities can be combined.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/mocking_tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef my_wf(query: str) -> str:\n    result = sql(query=query)\n    return t1(x=result)\n```\n\n----------------------------------------\n\nTITLE: Creating NumPy Renderer for Flyte Deck in Python\nDESCRIPTION: This code implements a NumpyRenderer class that extends TypeRenderer to display NumPy array schemas on the Flyte deck. It renders a representation of the NumPy array's structure including its shape and data type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass NumpyRenderer(TypeRenderer):\n    \"\"\"\n    Renderer for Numpy arrays.\n    \"\"\"\n\n    def to_html(self, df: np.ndarray) -> str:\n        \"\"\"\n        Return numpy array rendering result.\n        :param df: numpy array\n        :return: HTML string\n        \"\"\"\n        return f\"numpy.ndarray(shape={df.shape}, dtype={df.dtype})\"\n```\n\n----------------------------------------\n\nTITLE: Complete Reference Task Implementation Example\nDESCRIPTION: A comprehensive example showing reference task implementation in Flyte. It includes both the reference task declaration and a workflow that uses it. The example demonstrates referencing a task from the same project using a registration version macro.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/reference_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import reference_task, workflow\nfrom flytekit.types.file import FlyteFile\n\n\n@reference_task(\n    project=\"flytesnacks\",\n    domain=\"development\",\n    name=\"core.flyte_basics.files.normalize_columns\",\n    version=\"{{ registration.version }}\",\n)\ndef normalize_columns(\n    csv_url: FlyteFile, column_names: list[str], columns_to_normalize: list[str]\n) -> FlyteFile:\n    \"\"\"Reference to a core task that normalizes columns in a CSV file\"\"\"\n    ...\n\n\n@workflow\ndef reference_task_wf(\n    csv_url: FlyteFile, column_names: list[str], columns_to_normalize: list[str]\n) -> FlyteFile:\n    \"\"\"Normalizes column values from a CSV file.\"\"\"\n    return normalize_columns(\n        csv_url=csv_url,\n        column_names=column_names,\n        columns_to_normalize=columns_to_normalize,\n    )\n\n\nif __name__ == \"__main__\":\n    # Reference tasks cannot be run locally. You can test a workflow that uses a reference task\n    # only by mocking out the reference task.\n    # This means reference tasks are mostly useful when executing on the Flyte cluster.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Promises in Flyte Workflows\nDESCRIPTION: Illustrates how tasks return promises (placeholders for future values) rather than actual values within workflow definitions. The print statement shows the promise object rather than the actual value.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef standard_scale_workflow_with_print(values: List[float]) -> List[float]:\n    mu = mean(values=values)\n    print(mu)  # this is not the actual float value!\n    sigma = standard_deviation(values=values, mu=mu)\n    return standard_scale(values=values, mu=mu, sigma=sigma)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Types in Flyte Tasks\nDESCRIPTION: Shows how to use the custom Coordinate type in Flyte tasks. Includes two example tasks: one that generates coordinates and another that filters coordinates based on x-axis range.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/extending_flyte.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task\n\n@task\ndef generate_coordinates(num: int) -> typing.List[Coordinate]:\n    \"\"\"Generate some coordinates.\"\"\"\n    ...\n\n@task\ndef subset_coordinates(\n    coordinates: typing.List[Coordinate], x_min: float, x_max: float,\n) -> typing.List[Coordinate]:\n    \"\"\"Select coordinates within a certain x-axis range.\"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Conda Packages with ImageSpec in Python\nDESCRIPTION: This code shows how to define an ImageSpec to install packages from a specific conda channel.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimage_spec = ImageSpec(\n  conda_packages=[\"langchain\"],\n  conda_channels=[\"conda-forge\"],  # List of channels to pull packages from.\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing and Retrieving Execution Inputs in Python\nDESCRIPTION: Synchronizes the local execution object with the remote state and prints the inputs that were used for the execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsynced_execution = remote.sync(execution)\nprint(synced_execution.inputs)  # print out the inputs\n```\n\n----------------------------------------\n\nTITLE: Creating New Flyte Project with flytectl\nDESCRIPTION: Creates a new Flyte project with specified identifier, labels, description and name using the flytectl create project command. The project serves as a container for Flyte resources like tasks and workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/creating_a_new_project.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create project --id \"my-flyte-project-name\" --labels \"my-label=my-project-label\"  --description \"my-flyte-project-name\" --name \"my-flyte-project-name\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorated Workflow in Flyte\nDESCRIPTION: This code creates a workflow decorated with the setup_teardown function. It demonstrates how to apply the decorator to a workflow that combines multiple tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@workflow\n@setup_teardown(before=setup, after=teardown)\ndef decorating_workflow(x: float) -> float:\n    y = square(x=x)\n    z = double(x=y)\n    return z\n\nif __name__ == \"__main__\":\n    print(f\"Output: {decorating_workflow(x=10.0)}\")\n```\n\n----------------------------------------\n\nTITLE: Common Character Counter Task\nDESCRIPTION: Task that calculates the number of common characters between two frequency lists\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef derive_count(freq_list1: List[int], freq_list2: List[int]) -> int:\n    count = 0\n    for i in range(26):\n        if freq_list1[i] > 0 and freq_list2[i] > 0:\n            count += 1\n    return count\n```\n\n----------------------------------------\n\nTITLE: Eager Workflow with Exception Handling\nDESCRIPTION: Shows how to implement exception handling in eager workflows using try-except blocks and EagerException.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef raises_exc() -> None:\n    raise TypeError(\"boom\")\n\n@eager\nasync def eager_workflow_with_exception() -> None:\n    try:\n        await raises_exc()\n    except EagerException as e:\n        print(f\"Caught exception: {e}\")\n    \n    # Continue with other tasks\n    await add_one(x=1)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Workflows with Fixed Rate Intervals in Flyte\nDESCRIPTION: Example of creating a launch plan with a fixed rate schedule that runs every 10 minutes. This example also shows how to set fixed input parameters for the scheduled launch plan.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/schedules.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom flytekit import FixedRate, LaunchPlan\n\n# Time unit can be one of the following:\n# - seconds\n# - minutes\n# - hours\n# - days\n# - weeks\n\n# This launch plan will run every 10 minutes\nfixed_rate_lp = LaunchPlan.create(\n    \"my_fixed_rate_scheduled_lp\",\n    date_formatter_wf,\n    schedule=FixedRate(duration=\"10m\"),\n    fixed_inputs={\"kickoff_time\": datetime.datetime(2022, 1, 1)},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Decorator for Flyte Tasks\nDESCRIPTION: Demonstrates how to create a custom Python decorator that executes code before and after a Flyte task. This approach allows extending task behavior without modifying the core task code.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/extending_flyte.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial, wraps\n\ndef decorator(fn):\n\n    @wraps(fn)\n    def wrapper(*args, **kwargs):\n        print(\"do something before\")\n        out = fn(*args, **kwargs)\n        print(\"do something after\")\n        return out\n\n    return wrapper\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Tasks in Flyte using Python\nDESCRIPTION: This snippet demonstrates how to define shell tasks using the ShellTask class. It includes examples of tasks with different inputs and outputs, showing how to specify bash scripts, input parameters, and output locations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/shell_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nt1 = ShellTask(\n    name=\"task_1\",\n    script=\"echo 'Hello World' && echo 'Input was {inputs.x}' && echo {inputs.x} > {outputs.y}\",\n    inputs=kwtypes(x=str),\n    output_locs=kwtypes(y=FlyteFile),\n    debug=True,\n)\n\nt2 = ShellTask(\n    name=\"task_2\",\n    script=\"cat {inputs.a} | wc -l | tr -d '\\n' > {outputs.b} && echo ' lines found.'\",\n    inputs=kwtypes(a=FlyteFile),\n    output_locs=kwtypes(b=FlyteFile),\n    debug=True,\n)\n\nt3 = ShellTask(\n    name=\"task_3\",\n    script=\"\"\"\n    echo 'All inputs: {inputs}'\n    echo 'Input d is a FlyteDirectory. It has the following files:'\n    echo 'Contents:' && ls -R {inputs.d}\n    echo '{inputs.x}' >> {outputs.j}/test.out\n    \"\"\",\n    inputs=kwtypes(d=FlyteDirectory, x=str),\n    output_locs=kwtypes(j=FlyteDirectory),\n    debug=True,\n)\n\nt4 = ShellTask(\n    name=\"task_4\",\n    script=\"\"\"\n    echo \"Processing notebook\"\n    python3 -m nbconvert --to notebook --execute {inputs.notebook} --output {outputs.notebook}\n    \"\"\",\n    inputs=kwtypes(notebook=PythonNotebook),\n    output_locs=kwtypes(notebook=PythonNotebook),\n    resources=Resources(mem=\"1000Mi\"),\n    debug=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Streaming CSV File Processing Using FlyteFile in Python\nDESCRIPTION: This task demonstrates streaming support for FlyteFile, allowing efficient processing of remote files without full download. It removes specified columns from a CSV file and writes the result to a new file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytefile.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef remove_columns(input_file: FlyteFile, columns_to_remove: typing.List[str]) -> FlyteFile:\n    with input_file.open(\"r\") as f:\n        reader = csv.DictReader(f)\n        fieldnames = [col for col in reader.fieldnames if col not in columns_to_remove]\n        output_file = StringIO()\n        writer = csv.DictWriter(output_file, fieldnames=fieldnames)\n        writer.writeheader()\n        for row in reader:\n            writer.writerow({k: row[k] for k in fieldnames})\n    output_file.seek(0)\n    return FlyteFile(output_file.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Installing Python and APT Packages with ImageSpec in Python\nDESCRIPTION: This snippet demonstrates how to create an ImageSpec object to install specific Python and APT packages on top of the default Flyte image.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec\n\nsklearn_image_spec = ImageSpec(\n  packages=[\"scikit-learn\", \"tensorflow==2.5.0\"],\n  apt_packages=[\"curl\", \"wget\"],\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Failure Scenarios in Flyte Workflow\nDESCRIPTION: This workflow demonstrates a failure scenario where attempting to access out-of-range indices or non-existent keys results in workflow failure. It uses WorkflowFailurePolicy to continue execution after errors.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import WorkflowFailurePolicy\n\n\n@task\ndef failed_task() -> (list[str], dict[str, str], Fruit):\n    return [\"apple\", \"banana\"], {\"fruit\": \"banana\"}, Fruit(name=\"banana\")\n\n\n@workflow(\n    # The workflow remains unaffected if one of the nodes encounters an error, as long as other executable nodes are still available\n    failure_policy=WorkflowFailurePolicy.FAIL_AFTER_EXECUTABLE_NODES_COMPLETE\n)\ndef failed_workflow():\n    fruits_list, fruit_dict, fruit_instance = failed_task()\n    print_message(message=fruits_list[100])  # Accessing an index that doesn't exist\n    print_message(message=fruit_dict[\"fruits\"])  # Accessing a non-existent key\n    print_message(message=fruit_instance.fruit)  # Accessing a non-existent param\n```\n\n----------------------------------------\n\nTITLE: Task Implementation with Pydantic BaseModel\nDESCRIPTION: Implements Flyte tasks that use Pydantic BaseModel for input and output handling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pydantic_basemodel.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef return_datum(x: int, y: int) -> Datum:\n    return Datum(\n        x=x,\n        y=y,\n        z=\"hello\",\n        metadata={\"hello\": \"world\"},\n    )\n\n\n@task\ndef consume_datum(d: Datum) -> str:\n    assert d.x == 1\n    assert d.y == 2\n    assert d.z == \"hello\"\n    assert d.metadata[\"hello\"] == \"world\"\n    return \"success\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Flyte Project Directory Structure in Bash\nDESCRIPTION: Shows the basic directory structure of a Flyte project created with 'pyflyte init', including the main folders and files that comprise a standard project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/flyte_project_components.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmy_project\n├── LICENSE\n├── README.md\n├── requirements.txt  # Python dependencies\n└── workflows\n    ├── __init__.py\n    └── example.py    # Example Flyte workflow code\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Decorator to Flyte Task\nDESCRIPTION: Shows how to apply the custom decorator to a Flyte task, ensuring that the @task decorator is the outermost wrapper. This allows for executing the decorator's logic before and after the task execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/extending_flyte.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\n@decorator\ndef add_one(x: int) -> int:\n    return x + 1\n\nadd_one(x=10)\n```\n\n----------------------------------------\n\nTITLE: Defining Airflow Tasks in a Flyte Workflow (Python)\nDESCRIPTION: Example of integrating an Airflow FileSensor task into a Flyte workflow. The code demonstrates how to define a Flyte task, an Airflow task, and combine them in a workflow with dependencies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/migrating_from_airflow_to_flyte.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom airflow.sensors.filesystem import FileSensor\n\n@task\ndef say_hello() -> str:\n    return \"Hello, World!\"\n\n@workflow\ndef airflow_wf():\n    flyte_task = say_hello()\n    airflow_task = FileSensor(task_id=\"sensor\", filepath=\"/\")\n    airflow_task >> flyte_task\n\nif __name__ == \"__main__\":\n    print(f\"Running airflow_wf() {airflow_wf()}\")\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading Flytekit with pip\nDESCRIPTION: Command to install or upgrade Flytekit, which is the Python SDK for interacting with Flyte. The -U flag ensures you get the latest version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/installing_development_tools.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -U flytekit\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Launch Plans in Python\nDESCRIPTION: This code demonstrates how to use the @reference_launch_plan decorator to reference an existing launch plan from another project. The example defines a workflow that uses a referenced launch plan for normalizing CSV files.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/reference_launch_plans.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@reference_launch_plan(\n    project=\"flytesnacks\",\n    domain=\"development\",\n    name=\"core.flyte_basics.files.normalize_csv_file\",\n    version=\"{{ registration.version }}\",\n)\ndef normalize_csv_file(\n    csv_url: str, column_names: List[str], columns_to_normalize: List[str]\n) -> str:\n    pass\n\n\n@workflow\ndef my_workflow(csv_url: str) -> str:\n    \"\"\"\n    Reference a launch plan from another project to use a workflow defined by\n    another team.\n    \"\"\"\n    column_names = [\"Name\", \"Age\", \"Height\"]\n    columns_to_normalize = [\"Height\"]\n    return normalize_csv_file(\n        csv_url=csv_url, column_names=column_names, columns_to_normalize=columns_to_normalize\n    )\n```\n\n----------------------------------------\n\nTITLE: Merge Sort Implementation\nDESCRIPTION: Implementation of merge sort algorithm using dynamic workflows to demonstrate recursion\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef merge_sort(numbers: List[int], numbers_count: int) -> List[int]:\n    if numbers_count <= 1:\n        return numbers\n\n    return merge_sort_remotely(numbers=numbers, numbers_count=numbers_count)\n\n@workflow\ndef merge_sort_wf(numbers: List[int], numbers_count: int) -> List[int]:\n    return merge_sort(numbers=numbers, numbers_count=numbers_count)\n\n@dynamic\ndef merge_sort_remotely(numbers: List[int], numbers_count: int) -> List[int]:\n    if numbers_count <= 1:\n        return numbers\n\n    m = numbers_count // 2\n    left = numbers[:m]\n    right = numbers[m:]\n\n    # Call static version to call dynamic version\n    left_sorted = merge_sort_wf(numbers=left, numbers_count=len(left))\n    right_sorted = merge_sort_wf(numbers=right, numbers_count=len(right))\n\n    return merge(left=left_sorted, right=right_sorted)\n\n@task\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n```\n\n----------------------------------------\n\nTITLE: Advanced Eager Workflow with Multiple Conditions\nDESCRIPTION: Shows how to implement complex conditional logic in eager workflows using Python's native control flow and task outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef gt_100(x: int) -> bool:\n    return x > 100\n\n@eager\nasync def eager_workflow_with_conditionals(x: int) -> int:\n    out = await add_one(x=x)\n    \n    if out < 0:\n        return -1\n    elif await gt_100(x=out):\n        return await double(x=out)\n    else:\n        return out\n```\n\n----------------------------------------\n\nTITLE: Implementing Google-style Docstring in Flyte Workflow\nDESCRIPTION: This snippet illustrates how to use a Google-style docstring to document a Flyte workflow. It includes a one-line summary, detailed description, and parameter/return descriptions with types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/documenting_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef google_docstring_wf(dataset: FlyteSchema[kw1:str, kw2:str, x:float, y:float]) -> (float, float):\n    \"\"\"Calculates slope and intercept using linear regression.\n\n    This workflow takes a dataset as input and calculates the slope and\n    intercept using linear regression. It demonstrates the use of\n    Google-style docstrings in Flyte workflows.\n\n    Args:\n        dataset (FlyteSchema[kw1:str, kw2:str, x:float, y:float]): Input dataset containing x and y values\n\n    Returns:\n        tuple: Tuple containing slope (float) and intercept (float)\n    \"\"\"\n    m = slope(dataset=dataset)\n    b = intercept(dataset=dataset)\n    return m, b\n```\n\n----------------------------------------\n\nTITLE: Defining Task Returning Pandas DataFrame\nDESCRIPTION: Create a task that generates and returns a Pandas DataFrame, which Flytekit automatically converts to StructuredDataset type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef generate_pandas_df() -> pd.DataFrame:\n    df = pd.DataFrame({\"Name\": [\"Alice\", \"Bob\", \"Charlie\"], \"Age\": [25, 30, 35], \"Height\": [1.8, 1.7, 1.9]})\n    print(f\"Generated dataframe: {df}\")\n    return df\n```\n\n----------------------------------------\n\nTITLE: Controlling Memoization Behavior with Annotated Types\nDESCRIPTION: Example of using typing.Annotated to control caching behavior for non-Flyte offloaded objects like pandas dataframes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/caching.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom flytekit import task, workflow\nfrom flytekit.types.schema import FlyteSchema\nfrom flytekit.core.annotation import HashMethod\n\n@task\ndef foo() -> typing.Annotated[pd.DataFrame, HashMethod(lambda df: df.size)]:\n    return pd.DataFrame({\"column1\": [1, 2], \"column2\": [3, 4]})\n\n@task(cache=True, cache_version=\"1.0\")\ndef bar(\n    df: typing.Annotated[pd.DataFrame, HashMethod(lambda df: df.size)]\n) -> pd.DataFrame:\n    return df[df[\"column1\"] > 1]\n\n@workflow\ndef wf() -> pd.DataFrame:\n    return bar(df=foo())\n```\n\n----------------------------------------\n\nTITLE: Using the Unified Cache Configuration Object\nDESCRIPTION: Demonstrates the unified Cache class that groups all caching parameters, including version, serialization settings, ignored inputs, salt, and cache policies for dynamic versioning.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Cache:  \n    version: Optional[str] = None # Replaces `cache_version`  \n    serialize: bool = False      # Replaces `cache_serialize`  \n    ignored_inputs: Union[Tuple[str, ...], str] = ()  # New: Exclude inputs from cache key  \n    salt: str = \"\"           New: Add unique salt to cache key  \n    policies: Optional[Union[List[CachePolicy], CachePolicy]] = None  # New: Dynamic versioning \n```\n\n----------------------------------------\n\nTITLE: Creating Agent Task Classes with Executor Mixins in Python\nDESCRIPTION: Shows how to create BigQuery and ChatGPT task classes that inherit from AsyncAgentExecutorMixin and SyncAgentExecutorMixin respectively. These mixins tell flytekit to use the agent to run the task during local execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_python_environment.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BigQueryTask(AsyncAgentExecutorMixin, SQLTask[BigQueryConfig]):\n    ...\n\nclass ChatGPTTask(SyncAgentExecutorMixin, PythonTask):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sync OpenAI Agent in Python\nDESCRIPTION: Example implementation of a sync agent for OpenAI that extends SyncAgentBase with a do method to handle immediate request/response interactions with the OpenAI API.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/developing_agents.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom flytekit import FlyteContextManager\nfrom flytekit.core.type_engine import TypeEngine\nfrom flyteidl.core.execution_pb2 import TaskExecution\nfrom flytekit.models.literals import LiteralMap\nfrom flytekit.models.task import TaskTemplate\nfrom flytekit.extend.backend.base_agent import SyncAgentBase, AgentRegistry, Resource\n\n\nclass OpenAIAgent(SyncAgentBase):\n    def __init__(self):\n        super().__init__(task_type_name=\"openai\")\n\n    def do(self, task_template: TaskTemplate, inputs: Optional[LiteralMap], **kwargs) -> Resource:\n        # Convert the literal map to python value.\n        ctx = FlyteContextManager.current_context()\n        python_inputs = TypeEngine.literal_map_to_kwargs(ctx, inputs, literal_types=task_template.interface.inputs)\n        response = ask_chatgpt_question(python_inputs)\n        return Resource(phase=TaskExecution.SUCCEEDED, outputs={\"o0\": response})\n\nAgentRegistry.register(OpenAIAgent())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Environment for Flyte Development\nDESCRIPTION: These commands set up the Go environment for Flyte development. It includes installing Go 1.19, setting up necessary environment variables, and installing goimports for fixing lint errors.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:$(go env GOPATH)/bin\ngo install golang.org/dl/go1.19@latest\ngo1.19 download\nexport GOROOT=$(go1.19 env GOROOT)\nexport PATH=\"$GOROOT/bin:$PATH\"\n\ngo install golang.org/x/tools/cmd/goimports@latest\nexport PATH=$(go env GOPATH)/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Node in Flyte Workflow\nDESCRIPTION: Demonstrates how to create a workflow that pauses execution for a specified duration using the sleep node. The workflow adds one to a number after sleeping for 10 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/waiting_for_external_inputs.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef add_one(x: int) -> int:\n    return x + 1\n\n@workflow\ndef sleep_wf(x: int = 42) -> int:\n    \"\"\"A workflow that sleeps before computing.\"\"\"\n    sleeping = sleep(10)\n    result = add_one(x=x)\n    sleeping >> result\n    return result\n```\n\n----------------------------------------\n\nTITLE: Registering NumPy Transformers with Flyte's StructuredDatasetTransformerEngine\nDESCRIPTION: This code registers the custom NumPy encoders, decoders, and renderers with Flyte's transformation engine. It specifies NumPy arrays as the target type and configures the PARQUET format as the byte format for storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTypeEngine.register(NumpyRenderer(name=\"Numpy Array\"))\nStructuredDatasetTransformerEngine.register(NumpyEncodingHandler(), np.ndarray)\nStructuredDatasetTransformerEngine.register_decoder(NumpyDecodingHandler(), np.ndarray, pandas.DataFrame, byte_format=StructuredDatasetType.PARQUET)\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataclass Attributes in Flyte Workflow\nDESCRIPTION: This workflow demonstrates how to directly access attributes of a dataclass output in a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Fruit:\n    name: str\n    color: str\n\n\n@task\ndef dataclass_task() -> Fruit:\n    return Fruit(name=\"apple\", color=\"red\")\n\n\n@workflow\ndef dataclass_workflow():\n    fruit = dataclass_task()\n    print_message(message=fruit.name)\n    print_message(message=fruit.color)\n```\n\n----------------------------------------\n\nTITLE: Creating Flyte Launch Plans using Python\nDESCRIPTION: This snippet demonstrates how to create a Flyte launch plan using the flytekit library. It sets a 'LaunchPlan' with a standard workflow and default inputs. The launch plan facilitates consistent executions by allowing workflows to have fixed input configurations, which are useful for reproducible runs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom flytekit import LaunchPlan\n\nstandard_scale_launch_plan = LaunchPlan.get_or_create(\n    standard_scale_workflow,\n    name=\"standard_scale_lp\",\n    default_inputs={\"values\": [3.0, 4.0, 5.0]}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Eager Workflows and Dependencies with Pyflyte in Bash\nDESCRIPTION: Demonstrates how to use pyflyte to register tasks and subworkflows associated with an eager workflow, specifying project, domain, and image details.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npyflyte --config <path/to/config.yaml> register \\\n --project <project> \\\n --domain <domain> \\\n --image <image> \\\n path/to/eager_workflows.py\n```\n\n----------------------------------------\n\nTITLE: Mocking Tasks Using Python patch Utility\nDESCRIPTION: Show an alternative method of mocking tasks using the traditional Python patch approach, which provides similar functionality to task_mock.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/mocking_tasks.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef main_2():\n    with patch('__main__.sql', return_value=\"patched result\"):\n        result = my_wf(query=\"test query\")\n        assert result == \"patched result appended\"\n```\n\n----------------------------------------\n\nTITLE: Local Execution of External Workflow in Python\nDESCRIPTION: Shows how to execute a workflow containing an external workflow locally with sample input data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/subworkflows.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Output: {nested_regression_line_lp(x=[1, 2, 3], y=[2, 4, 6])}\")  # [2.0, 4.0, 6.0]\n```\n\n----------------------------------------\n\nTITLE: Passing PyTorch Tensors and Modules in Flyte Tasks\nDESCRIPTION: Demonstrates how to use PyTorch tensors and modules as inputs and outputs in Flyte tasks. This snippet shows the creation of a simple neural network, training it, and passing the model and data between tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pytorch_type.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nfrom flytekit import task, workflow\nfrom flytekit.types.pytorch import PyTorchModule, PyTorchTensor\n\n@task\ndef create_model() -> PyTorchModule:\n    model = torch.nn.Sequential(\n        torch.nn.Linear(2, 4),\n        torch.nn.ReLU(),\n        torch.nn.Linear(4, 1),\n    )\n    return model\n\n@task\ndef train_model(model: PyTorchModule, data: PyTorchTensor) -> PyTorchModule:\n    criterion = torch.nn.MSELoss()\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.01)\n\n    for _ in range(100):\n        y_pred = model(data)\n        loss = criterion(y_pred, torch.ones_like(y_pred))\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n    return model\n\n@task\ndef predict(model: PyTorchModule, data: PyTorchTensor) -> PyTorchTensor:\n    return model(data)\n\n@workflow\ndef pytorch_training_wf(data: PyTorchTensor) -> PyTorchTensor:\n    model = create_model()\n    trained_model = train_model(model=model, data=data)\n    return predict(model=trained_model, data=data)\n\nif __name__ == \"__main__\":\n    data = torch.randn(10, 2)\n    print(pytorch_training_wf(data=data))\n```\n\n----------------------------------------\n\nTITLE: Custom Hashing for Offloaded Objects in Cached Tasks\nDESCRIPTION: Demonstrates how to define custom hash functions for non-deterministic objects like pandas DataFrames using Annotated types and HashMethod to ensure caching works for complex data types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef hash_pandas_dataframe(df: pd.DataFrame) -> str:  \n    return str(pd.util.hash_pandas_object(df))  \n\n@task  \ndef data_loader(cache=True, cache_version=\"1.0\",\n) -> Annotated[pd.DataFrame, HashMethod(hash_pandas_dataframe)]:  \n    return pd.DataFrame(...) \n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Auth Settings in Flyte Helm Values\nDESCRIPTION: YAML configuration for the inline section of Flyte's Helm values file. This includes settings for external auth server, third-party client configuration, and user authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ninline:\n  auth:\n    appAuth:\n      authServerType: External\n      externalAuthServer:\n        baseUrl: https://dev-<org-id>.okta.com/oauth2/<auth-server-id>\n        metadataUrl: .well-known/oauth-authorization-server\n      thirdPartyConfig:\n        flyteClient:\n          clientId: <flytectl-client-id>\n          redirectUri: http://localhost:53593/callback\n          scopes:\n          - offline\n          - all\n    userAuth:\n      openId:\n        baseUrl: https://dev-<org-id>.okta.com/oauth2/<auth-server-id>\n        scopes:\n        - profile\n        - openid\n        clientId: <oidc-clientId>\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduled Launch Plan with Fixed Rate in Python\nDESCRIPTION: Creates a launch plan with a fixed rate schedule to run a workflow every minute using timedelta.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nfrom flytekit import FixedRate\n\n\nlaunch_plan = LaunchPlan.get_or_create(\n    wf,\n    name=\"wf_launchplan\",\n    schedule=FixedRate(duration=timedelta(minutes=1)),\n    default_inputs={\"name\": \"Elmo\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Pyflyte Execute Reference Path\nDESCRIPTION: Reference to the execute_task_cmd function in flytekit which serves as the main entrypoint for task execution. This component handles task resolution, input processing, and execution dispatch.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/workflow_lifecycle.rst#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nflytekit.core.python_auto_container.default_task_resolver\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Importing with ImageSpec in Python\nDESCRIPTION: This example demonstrates how to use is_container() to conditionally import modules based on the ImageSpec environment, optimizing module loading time and dependency installation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, task\nimport pandas as pd\n\npandas_image_spec = ImageSpec(\n  packages=[\"pandas\"],\n  registry=\"ghcr.io/flyteorg\",\n)\n\ntensorflow_image_spec = ImageSpec(\n  packages=[\"tensorflow\", \"pandas\"],\n  registry=\"ghcr.io/flyteorg\",\n)\n\n# Return if and only if the task is using the image built from tensorflow_image_spec.\nif tensorflow_image_spec.is_container(): \n  import tensorflow as tf\n\n@task(container_image=pandas_image_spec)\ndef task1() -> pd.DataFrame:\n  return pd.DataFrame({\"Name\": [\"Tom\", \"Joseph\"], \"Age\": [1, 22]})\n\n\n@task(container_image=tensorflow_image_spec)\ndef task2() -> int:\n  num_gpus = len(tf.config.list_physical_devices('GPU'))\n  print(\"Num GPUs Available: \", num_gpus)\n  return num_gpus\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Flytekit Docker Image\nDESCRIPTION: These commands demonstrate how to build a Docker image for Flytekit development, push it to the Flyte cluster, and submit a hello world workflow using the new image.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport FLYTE_INTERNAL_IMAGE=\"localhost:30000/flytekit:demo\" # replace with your own image name and tag\ndocker build --no-cache -t  \"${FLYTE_INTERNAL_IMAGE}\" -f ./Dockerfile .\ndocker push ${FLYTE_INTERNAL_IMAGE}\ncd flytesnacks\npyflyte run --image ${FLYTE_INTERNAL_IMAGE} --remote https://raw.githubusercontent.com/flyteorg/flytesnacks/master/examples/basics/basics/hello_world.py hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Flyte Types Integration with Pydantic BaseModel\nDESCRIPTION: Demonstrates using Flyte-specific types like StructuredDataset, FlyteFile, and FlyteDirectory within Pydantic BaseModel.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pydantic_basemodel.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef return_complex_types() -> Datum2:\n    df = pd.DataFrame({\"x\": [1, 2], \"y\": [3, 4]})\n    Path(\"test.txt\").write_text(\"hello world\")\n    Path(\"test_dir/test.txt\").parent.mkdir(exist_ok=True)\n    Path(\"test_dir/test.txt\").write_text(\"hello world\")\n    return Datum2(\n        x=1,\n        y=2,\n        z=\"hello\",\n        metadata={\"hello\": \"world\"},\n        sd=StructuredDataset(dataframe=df),\n        ff=FlyteFile(path=\"test.txt\"),\n        fd=FlyteDirectory(path=\"test_dir\"),\n    )\n\n\n@task\ndef consume_complex_types(d: Datum2) -> str:\n    print(d.sd.open(pd.DataFrame).all())\n    print(d.ff.download())\n    print(d.fd.download())\n    assert d.x == 1\n    assert d.y == 2\n    assert d.z == \"hello\"\n    assert d.metadata[\"hello\"] == \"world\"\n    return \"success\"\n```\n\n----------------------------------------\n\nTITLE: Chaining Tasks in Flyte using Python\nDESCRIPTION: This snippet demonstrates how to chain tasks in Flyte using the '>>' operator. It defines three tasks (t0, t1, t2) and chains them in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/chaining_flyte_entities.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom flytekit import task, workflow\n\n\n@task\ndef t0():\n    print(\"Running t0\")\n    time.sleep(5)\n\n\n@task\ndef t1():\n    print(\"Running t1\")\n    time.sleep(5)\n\n\n@task\ndef t2():\n    print(\"Running t2\")\n    time.sleep(5)\n\n\n@workflow\ndef chain_tasks_wf():\n    t0() >> t1() >> t2()\n```\n\n----------------------------------------\n\nTITLE: Using Task Output in Flyte Conditional\nDESCRIPTION: This snippet shows how to use the output of a previous task in a conditional statement within a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef random_bool() -> bool:\n    return random.choice([True, False])\n\n@task\ndef print_value(value: str):\n    print(value)\n\n@workflow\ndef boolean_wf() -> str:\n    random_value = random_bool()\n    return (\n        conditional(\"test\")\n        .if_(random_value.is_true())\n        .then(print_value(value=\"True\"))\n        .else_()\n        .then(print_value(value=\"False\"))\n    )\n```\n\n----------------------------------------\n\nTITLE: Running Flyte Workflow Locally\nDESCRIPTION: Command to execute a Flyte workflow locally using the pyflyte CLI tool\nSOURCE: https://github.com/flyteorg/flyte/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run hello_world.py hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Task and Workflow (decorators)\nDESCRIPTION: This code demonstrates the use of `@task` and `@workflow` decorators in Flyte. The `say_hello` function is decorated with `@task`, making it a Flyte task. The `hello_world_wf` function is decorated with `@workflow`, making it a Flyte workflow. The workflow calls the task to produce the final result.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/quickstart_guide.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef say_hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n\n\n@workflow\ndef hello_world_wf(name: str = 'world') -> str:\n    res = say_hello(name=name)\n    return res\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkpointing Task in Flyte\nDESCRIPTION: This task demonstrates how to use checkpointing in Flyte. It iterates for a specified number of times, checkpoints its state, and recovers from simulated failures. The task uses the Checkpoint API to save and restore state.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/intratask_checkpoints.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task(retries=3)\ndef use_checkpoint(n_iterations: int) -> FlyteDirectory:\n    cp = Checkpoint()\n    if cp.exists():\n        starting_iteration = cp.read()\n        print(f\"Resuming from iteration: {starting_iteration}\")\n    else:\n        starting_iteration = 0\n    for i in range(starting_iteration, n_iterations):\n        cp.write(i)\n        if i == 3 and not cp.exists():\n            print(\"Simulating a failure\")\n            raise FlyteRecoverableException(\"Simulated failure\")\n    return cp.get()\n```\n\n----------------------------------------\n\nTITLE: Requesting a Generic GPU in Flyte Task\nDESCRIPTION: Python code example showing how to configure a Flyte task to request a single GPU without device preference. Uses ImageSpec to define container requirements and requests a GPU resource.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, Resources, task\n\nimage = ImageSpec(\n    base_image= \"ghcr.io/flyteorg/flytekit:py3.10-1.10.2\",\n     name=\"pytorch\",\n     python_version=\"3.10\",\n     packages=[\"torch\"],\n     builder=\"default\",\n     registry=\"<YOUR_CONTAINER_REGISTRY>\",\n )\n\n@task(requests=Resources( gpu=\"1\"))\ndef gpu_available() -> bool:\n   return torch.cuda.is_available() # returns True if CUDA (provided by a GPU) is available\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerTask for calculating ellipse area in R\nDESCRIPTION: Creates a ContainerTask that uses an R script to calculate the area of an ellipse. It specifies input/output directories, image, and command to run.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncalculate_ellipse_area_r = ContainerTask(\n    name=\"calculate-ellipse-area-r\",\n    input_data_dir=\"/var/inputs\",\n    output_data_dir=\"/var/outputs\",\n    inputs=kwtypes(radius1=float, radius2=float),\n    outputs=kwtypes(area=float),\n    image=\"ghcr.io/flyteorg/flytecookbook:raw_containers-latest\",\n    command=[\"Rscript\", \"calc.R\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Eager Workflow Implementation in Python\nDESCRIPTION: Demonstrates a simple eager workflow that takes an integer input, adds one to it using a task, and conditionally processes the result. Shows basic usage of the @eager decorator with async/await pattern.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, eager\n\n@task\ndef add_one(x: int) -> int:\n    return x + 1\n\n@task\ndef double(x: int) -> int:\n    return x * 2\n\n@eager\nasync def simple_eager_workflow(x: int) -> int:\n    out = await add_one(x=x)\n    if out < 0:\n        return -1\n    return await double(x=out)\n```\n\n----------------------------------------\n\nTITLE: Simple Approval Node in Flyte Workflow\nDESCRIPTION: Demonstrates a basic implementation of an approval node that blocks workflow execution until explicit approval is received.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/waiting_for_external_inputs.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef approval_wf(data: typing.List[float]) -> str:\n    \"\"\"A workflow that creates a report and waits for approval.\"\"\"\n    final_report = reporting_wf(data=data)\n    approve(\"approve-final-report\", final_report)\n    return final_report\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type and Coffee Maker Task\nDESCRIPTION: Creates a CoffeeType enum and implements a task that processes coffee orders using enum values. The task demonstrates how to use enum types as input parameters and return values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/enum_type.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass CoffeeType(Enum):\n    ESPRESSO = \"espresso\"\n    LATTE = \"latte\"\n    CAPPUCCINO = \"cappuccino\"\n\n\n@task\ndef make_coffee(coffee_type: CoffeeType) -> Tuple[str, CoffeeType]:\n    \"\"\"Make a cup of coffee based on the provided type. Barista interprets enums and makes coffee.\n\n    :param coffee_type: Type of coffee to make\n    :return: Tuple of message and coffee type\n    \"\"\"\n    # The coffee_type will be automatically converted to enum by the system.\n    # The value will be constrained to one of the valid values.\n    if coffee_type == CoffeeType.ESPRESSO:\n        message = \"Making Espresso...☕️\"\n    elif coffee_type == CoffeeType.LATTE:\n        message = \"Making Latte...🥛☕️\"\n    elif coffee_type == CoffeeType.CAPPUCCINO:\n        message = \"Making Cappuccino...🥛☕️\"\n    else:\n        # This condition will never be hit because the input is constrained to valid values\n        message = \"Unknown coffee type\"\n\n    return message, coffee_type\n```\n\n----------------------------------------\n\nTITLE: Creating Subworkflow with Failure Handling\nDESCRIPTION: Implements a subworkflow that includes failure handling and cleanup task execution using the on_failure parameter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/failure_node.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef subwf(a: int) -> Tuple[int, str]:\n    return will_fail(a=a).with_overrides(on_failure=clean_up)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Defining Common Task in Python\nDESCRIPTION: This snippet imports necessary modules from flytekit and defines a common print_message task that will be used in subsequent examples.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom typing import Dict, List\n\nfrom flytekit import task, workflow\n\n\n@task\ndef print_message(message: str) -> str:\n    print(message)\n    return message\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Map Tasks in Python\nDESCRIPTION: This example demonstrates how to use TaskMetadata to set attributes like cache, cache_version, and retries for map tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import TaskMetadata\n\n\n@workflow\ndef map_workflow_with_metadata(data: list[int] = [10, 12, 11, 10, 13, 12, 100, 11, 12, 10]) -> list[bool]:\n    return map_task(detect_anomalies, metadata=TaskMetadata(cache=True, cache_version=\"0.1\", retries=1))(\n        data_point=data\n    )\n```\n\n----------------------------------------\n\nTITLE: Eager Workflow with Loops and Async Tasks\nDESCRIPTION: Demonstrates how to handle multiple task executions in a loop using async tasks within an eager workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\nasync def add_one_async(x: int) -> int:\n    return x + 1\n\n@eager\nasync def eager_workflow_with_loop(x: int) -> list[int]:\n    results = []\n    for i in range(x):\n        out = await add_one_async(x=i)\n        results.append(out)\n    return results\n```\n\n----------------------------------------\n\nTITLE: Using Custom Serialization Format for StructuredDataset\nDESCRIPTION: Demonstrate how to use a custom serialization format (CSV) for StructuredDataset.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCSV = StructuredDatasetFormat.PANDAS_CSV\nStructuredDatasetCSV = typing.Annotated[StructuredDataset, CSV]\n\n@task\ndef csv_serialization(df: pd.DataFrame) -> StructuredDatasetCSV:\n    print(f\"Input dataframe: {df}\")\n    return StructuredDataset(dataframe=df)\n\n@task\ndef csv_deserialization(df: StructuredDatasetCSV) -> pd.DataFrame:\n    print(f\"Input structured dataset: {df}\")\n    df_pandas = df.open(pd.DataFrame).all()\n    print(f\"Read dataframe: {df_pandas}\")\n    return df_pandas\n```\n\n----------------------------------------\n\nTITLE: Invoking Flyte Launch Plans Locally\nDESCRIPTION: This snippet shows how to run a Flyte launch plan using the local Python interpreter. The 'standard_scale_launch_plan' uses the predefined 'default_inputs' when invoked. It also demonstrates how to override these defaults by passing different parameters. This feature is critical for testing and development in local environments before deploying on the cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nstandard_scale_launch_plan()\n```\n\nLANGUAGE: Python\nCODE:\n```\nstandard_scale_launch_plan(values=[float(x) for x in range(20, 30)])\n```\n\n----------------------------------------\n\nTITLE: Normalizing Columns in CSV File Using FlyteFile in Python\nDESCRIPTION: This task accepts a FlyteFile containing CSV data, normalizes specified columns using z-score normalization, and outputs a new CSV file with only the normalized columns.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytefile.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef normalize_columns(\n    csv_url: FlyteFile,\n    column_names: typing.List[str],\n    columns_to_normalize: typing.List[str],\n    output_location: str = \"\",\n) -> CSVFile:\n    local_path = csv_url.download()\n    df = pd.read_csv(local_path)\n\n    # Calculate z-score for specified columns\n    for col in columns_to_normalize:\n        if col in df.columns:\n            mean_val = df[col].mean()\n            std_val = df[col].std()\n            df[col] = (df[col] - mean_val) / std_val\n\n    # Select only the normalized columns\n    df_normalized = df[columns_to_normalize]\n\n    # Write the normalized data to a new CSV file\n    output_file = StringIO()\n    df_normalized.to_csv(output_file, index=False)\n    output_file.seek(0)\n\n    # If an output location is specified, use it; otherwise, Flyte will generate a random path\n    return CSVFile(path=output_location) if output_location else CSVFile(output_file.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Flyte Workflow Composition\nDESCRIPTION: Workflow that combines file processing tasks to perform data transformation operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/data_management.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef wf() -> FlyteFile:\n    existed_file = FlyteFile(\"s3://custom-bucket/data.csv\")\n    shuffled_file = task_read_and_shuffle_file(input_file=existed_file)\n    result_file = task_remove_column(input_file=shuffled_file, column_name=\"County\")\n    return result_file\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow Decorator for Setup-Teardown Pattern in Flyte\nDESCRIPTION: This function defines a decorator that wraps a workflow function, adding setup and teardown tasks. It uses create_node to manage task execution order and ensures proper DAG construction.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef setup_teardown(before: Callable, after: Callable):\n    def decorator(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            ctx = FlyteContext.current_context()\n            before_node = create_node(before)\n            after_node = create_node(after)\n            output = fn(*args, **kwargs)\n            if ctx.compilation_state is not None:\n                # Get first and last nodes\n                first_node = ctx.compilation_state.nodes[1]\n                last_node = ctx.compilation_state.nodes[-2]\n                # Ensure proper execution order\n                before_node >> first_node\n                last_node >> after_node\n            return output\n        return wrapper\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Scheduling Task on Specific Multi-instance GPU Partition in Flyte\nDESCRIPTION: Example showing how to request a specific partition size on an A100 GPU using the partition_1g_5gb option. This provides fine-grained control over GPU memory allocation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.10.6.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.extras.accelerators import A100\n\n\n@task(\n    limits=Resources(gpu=\"1\"),\n    accelerator=A100.partition_1g_5gb,\n)\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Eager Workflow with Static Subworkflow\nDESCRIPTION: Shows how to combine static workflows with eager workflows, demonstrating workflow composition capabilities.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef static_workflow(x: int) -> int:\n    out = add_one(x=x)\n    return double(x=out)\n\n@eager\nasync def eager_workflow_with_subworkflow(x: int) -> int:\n    out = await static_workflow(x=x)\n    return await double(x=out)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js and Development Dependencies\nDESCRIPTION: Series of commands to install Node.js 18, yarn package manager, and set up environment variables for Flyteconsole development.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\\\nsudo apt-get install -y nodejs\n\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update && sudo apt install yarn\n\nexport BASE_URL=/console\nexport ADMIN_API_URL=http://localhost:30080\nexport DISABLE_AUTH=1\nexport ADMIN_API_USE_SSL=\"http\"\n\nmake generate_ssl\n\nyarn install\nyarn build:types\nyarn run build:prod\n\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Opening StructuredDataset with Column Type Specification\nDESCRIPTION: Define a task that opens a StructuredDataset and extracts specific columns based on the defined column types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef read_structured_dataset(df: StructuredDatasetAgeOnly) -> StructuredDatasetAgeOnly:\n    print(f\"Received structured dataset: {df}\")\n    print(f\"Columns: {df.columns()}\")\n    print(f\"Formats: {df.supported_formats}\")\n    df_pandas = df.open(pd.DataFrame).all()\n    print(f\"Read dataframe: {df_pandas}\")\n    df_pandas[\"Age\"] = df_pandas[\"Age\"] + 1\n    return StructuredDataset(dataframe=df_pandas)\n```\n\n----------------------------------------\n\nTITLE: Accessing Secrets in a Flyte Task\nDESCRIPTION: Creating a task that requests a secret and accesses it at runtime using the ExecutionParameters object.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task(secret_requests=[Secret(group=SECRET_GROUP, key=SECRET_NAME)])\ndef secret_task() -> str:\n    # Request the secret value\n    secret_val = current_context().secrets.get(SECRET_GROUP, SECRET_NAME)\n    # WARNING: Never print your secrets. This is just for demonstration purposes.\n    print(f\"Shh, the secret is right here {secret_val}\")\n    return secret_val\n```\n\n----------------------------------------\n\nTITLE: Wait for Input Node Implementation in Flyte\nDESCRIPTION: Shows how to implement a workflow that waits for external input before continuing execution. Creates a report with a custom title that must be provided through the Flyte API.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/waiting_for_external_inputs.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef create_report(data: typing.List[float]) -> str:\n    \"\"\"Simulate creating a report from data.\"\"\"\n    return \"raw report\"\n\n@task\ndef finalize_report(report: str, title: str) -> str:\n    \"\"\"Attach a title to the report.\"\"\"\n    return f\"{title}\\n{report}\"\n\n@workflow\ndef reporting_wf(data: typing.List[float]) -> str:\n    \"\"\"A workflow that creates a report and waits for a title input.\"\"\"\n    report = create_report(data=data)\n    title = wait_for_input(\n        \"title-input\",\n        timeout=timedelta(hours=1),\n        expected_type=str,\n        default=\"My Report\",\n        help=\"Provide a title for the report\",\n    )\n    return finalize_report(report=report, title=title)\n```\n\n----------------------------------------\n\nTITLE: Task Implementation with Dataclass\nDESCRIPTION: Implements tasks that use the Datum dataclass for input and output operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/dataclass.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef generate_input() -> Datum:\n    return Datum(x=10, y=\"hello\", z={\"a\": \"b\"})\n\n@task\ndef add(x: Datum, y: Datum) -> Datum:\n    \"\"\"Add values from two Datum objects.\"\"\"\n    return Datum(\n        x=x.x + y.x,\n        y=x.y + y.y,\n        z={k: v for d in (x.z, y.z) for k, v in d.items()},\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Type\nDESCRIPTION: Example of registering the custom type and using it in tasks and workflows with data generation and consumption.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/custom_types.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nTypeEngine.register(MyDatasetTransformer())\n\n@task\ndef generate_dataset() -> MyDataset:\n    ctx = FlyteContext.current_context()\n    local_path = ctx.file_access.get_random_local_directory()\n    os.makedirs(local_path, exist_ok=True)\n    ds = MyDataset(local_path)\n    ds.write(\"file1.txt\", \"Hello World!\")\n    ds.write(\"file2.txt\", \"Hello World Again!\")\n    return ds\n\n@task\ndef consume_dataset(ds: MyDataset):\n    assert ds.read(\"file1.txt\") == \"Hello World!\"\n    assert ds.read(\"file2.txt\") == \"Hello World Again!\"\n\n@workflow\ndef chain_tasks():\n    ds = generate_dataset()\n    consume_dataset(ds=ds)\n\nif __name__ == \"__main__\":\n    chain_tasks()\n```\n\n----------------------------------------\n\nTITLE: Using TensorFlow Model Transformer in Flyte\nDESCRIPTION: This example demonstrates how to use the TensorFlowModelTransformer to save and load a TensorFlow model in a Flyte workflow. It includes creating a simple model, saving it, and then loading it back.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/tensorflow_type.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef create_model() -> tf.keras.Model:\n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(1, input_shape=(1,))\n    ])\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model\n\n@task\ndef use_model(model: tf.keras.Model):\n    print(f\"Model summary: {model.summary()}\")\n\n@workflow\ndef tensorflow_model_wf() -> None:\n    model = create_model()\n    use_model(model=model)\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow with Checkpointing Task in Flyte\nDESCRIPTION: This workflow invokes the checkpointing task. It demonstrates how the task will automatically undergo retries in case of a FlyteRecoverableException.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/intratask_checkpoints.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef checkpointing_example(n_iterations: int = 10) -> FlyteDirectory:\n    return use_checkpoint(n_iterations=n_iterations)\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow with Secret Tasks\nDESCRIPTION: Creating a workflow that combines multiple tasks that use secrets.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef my_secret_workflow() -> (str, str, str):\n    s1 = secret_task()\n    s2 = multiple_secrets_task()\n    s3 = env_var_secret_task()\n    return s1, s2, s3\n```\n\n----------------------------------------\n\nTITLE: Implementing PodTemplate at Task-Level in Flyte Python SDK\nDESCRIPTION: This snippet demonstrates how to define a PodTemplate as part of a task definition in Flyte. The example shows configuration of a V1PodSpec with containers, resources, environment variables, volumes, and tolerations, allowing fine-grained control over the Kubernetes pod execution environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.4.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    pod_template=PodTemplate(\n        primary_container_name=\"primary\",\n        labels={\"lKeyA\": \"lValA\", \"lKeyB\": \"lValB\"},\n        annotations={\"aKeyA\": \"aValA\", \"aKeyB\": \"aValB\"},\n        pod_spec=V1PodSpec(\n            containers=[\n                V1Container(\n                    name=\"primary\",\n                    image=\"repo/placeholderImage:0.0.0\",\n                    command=\"echo\",\n                    args=[\"wow\"],\n                    resources=V1ResourceRequirements(limits={\"cpu\": \"999\", \"gpu\": \"999\"}),\n                    env=[V1EnvVar(name=\"eKeyC\", value=\"eValC\"), V1EnvVar(name=\"eKeyD\", value=\"eValD\")],\n                ),\n            ],\n            volumes=[V1Volume(name=\"volume\")],\n            tolerations=[\n                V1Toleration(\n                    key=\"num-gpus\",\n                    operator=\"Equal\",\n                    value=1,\n                    effect=\"NoSchedule\",\n                ),\n            ],\n        )\n    )\n)\ndef t1(i: str):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Workflow Node Flow Diagram in Mermaid\nDESCRIPTION: A simple workflow diagram showing the flow between two nodes N1 and N2, with Start and End nodes. This represents the basic structure of a Flyte workflow execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/execution_timeline.rst#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR;\n         Start --> N1;\n         N1 --> N2;\n         N2 --> End;\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Workflow Using the Sensor Plugin\nDESCRIPTION: Example of how to use the WaitForObjectStoreFile sensor plugin in a workflow that waits for an object in storage before proceeding to the next task.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/user_container_task_plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsensor = WaitForObjectStoreFile(metadata=metadata(timeout=\"1H\", retries=10))\n\n@workflow\ndef wait_and_run(path: str) -> int:\n    # To demonstrate how to create outputs, we will also\n    # return the output from the sensor. The output will be the\n    # same as the path\n    path = sensor(path=path)\n    return do_next(path=path)\n```\n\n----------------------------------------\n\nTITLE: Creating Logger for Flyte Task Execution\nDESCRIPTION: This snippet creates a logger to monitor the execution progress of Flyte tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger = logging.getLogger(__name__)\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Workflow with Failure Policy\nDESCRIPTION: Defines the main workflow that incorporates failure policy settings and handles subworkflow failures.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/failure_node.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef wf1(a: int) -> Tuple[int, str]:\n    return (\n        subwf(a=a)\n        .with_failure_policy(FailurePolicy.FAIL_AFTER_EXECUTABLE_NODES_COMPLETE)\n        .with_overrides(on_failure=clean_up)\n    )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Checking in Flyte with Buggy Implementation\nDESCRIPTION: Shows how Flyte's type system catches errors when a task's implementation doesn't match its declared return type. The task returns a float but is declared to return List[float], causing a runtime error.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef buggy_standard_scale(values: List[float], mu: float, sigma: float) -> float:\n    \"\"\"\n    🐞 The implementation and output type of this task is incorrect! It should\n    be List[float] instead of a sum of all the scaled values.\n    \"\"\"\n    return sum([(x - mu) / sigma for x in values])\n\n@workflow\ndef buggy_standard_scale_workflow(values: List[float]) -> List[float]:\n    mu = mean(values=values)\n    sigma = standard_deviation(values=values, mu=mu)\n    return buggy_standard_scale(values=values, mu=mu, sigma=sigma)\n\ntry:\n    buggy_standard_scale_workflow(values=[float(i) for i in range(1, 11)])\nexcept Exception as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Regression Line Subworkflow in Python\nDESCRIPTION: Demonstrates nesting of workflows by creating a workflow that uses the regression line workflow as a subworkflow. Shows how to compose complex workflows from simpler ones.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/subworkflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef nested_regression_line_wf(x: typing.List[int], y: typing.List[int]) -> typing.List[float]:\n    return regression_line_wf(x=x, y=y)\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Input Task in Python\nDESCRIPTION: This snippet defines a task that requires multiple inputs, which will be used in subsequent map task examples.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef multi_input_task(quantity: int, price: float, discount: float = 0.0) -> float:\n    return quantity * price * (1 - discount)\n```\n\n----------------------------------------\n\nTITLE: Accessing AWS Secrets in Flyte Task\nDESCRIPTION: Python code demonstrating how to request and access AWS secrets within a Flyte task using secret group and key.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nSECRET_GROUP = f\"arn:aws:secretsmanager:{region}:{account}:secret\"\nSECRET_KEY = \"secret_key\"\n\n@task(\n    secret_requests=[\n        Secret(group=SECRET_GROUP, key=SECRET_KEY, mount_requirement=Secret.MountType.FILE)\n    ]\n)\ndef get_secret() -> str:\n    ctx = current_context()\n    token = ctx.secrets.get(SECRET_GROUP, SECRET_KEY)\n    return f\"Secret length: {len(token)}\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling Workflows with Cron Schedule in Flyte\nDESCRIPTION: Example of creating a launch plan with a cron schedule that runs at 10:00 AM UTC every day. The kickoff_time_input_arg parameter is used to pass the scheduled time to the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/schedules.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import CronSchedule, LaunchPlan\n\n# Create a launch plan with a schedule\ncron_lp = LaunchPlan.create(\n    \"my_cron_scheduled_lp\",\n    date_formatter_wf,\n    # The schedule is in UTC.\n    # Run at 10:00 AM UTC every day\n    schedule=CronSchedule(\n        schedule=\"0 10 * * *\",\n        kickoff_time_input_arg=\"kickoff_time\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Workflow with Named Outputs\nDESCRIPTION: Workflow implementation that combines multiple tasks with named outputs and returns a NamedTuple containing both slope and intercept values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/named_outputs.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef linear_regression_wf() -> NamedTuple(\"Outputs\", slope=float, intercept=float):\n    slope_value = slope().slope\n    intercept_value = intercept().intercept\n\n    return NamedTuple(\n        \"Outputs\", slope=float, intercept=float\n    )(slope=slope_value, intercept=intercept_value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Outputs in Slope Task\nDESCRIPTION: Task definition that returns a NamedTuple with a custom-named 'slope' output parameter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/named_outputs.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef slope() -> NamedTuple(\"Outputs\", slope=float):\n    \"\"\"Generate a slope for a linear regression\"\"\"\n    # Generate a slope value\n    m = 0.3\n\n    # Return it as a NamedTuple\n    return NamedTuple(\"Outputs\", slope=float)(slope=m)\n```\n\n----------------------------------------\n\nTITLE: Implementing an Async BigQuery Agent in Python\nDESCRIPTION: Example implementation of an async agent for BigQuery that extends AsyncAgentBase with create, get, and delete methods to manage BigQuery jobs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/developing_agents.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nfrom dataclasses import dataclass\nfrom flytekit.models.literals import LiteralMap\nfrom flytekit.models.task import TaskTemplate\nfrom flytekit.extend.backend.base_agent import AsyncAgentBase, AgentRegistry, Resource, ResourceMeta\n\n\n@dataclass\nclass BigQueryMetadata(ResourceMeta):\n    \"\"\"\n    This is the metadata for the job. For example, the id of the job.\n    \"\"\"\n    job_id: str\n\nclass BigQueryAgent(AsyncAgentBase):\n    def __init__(self):\n        super().__init__(task_type_name=\"bigquery\", metadata_type=BigQueryMetadata)\n\n    def create(\n        self,\n        task_template: TaskTemplate,\n        inputs: Optional[LiteralMap] = None,\n        **kwargs,\n    ) -> BigQueryMetadata:\n        job_id = submit_bigquery_job(inputs)\n        return BigQueryMetadata(job_id=job_id)\n\n    def get(self, resource_meta: BigQueryMetadata, **kwargs) -> Resource:\n        phase, outputs = get_job_status(resource_meta.job_id)\n        return Resource(phase=phase, outputs=outputs)\n\n    def delete(self, resource_meta: BigQueryMetadata, **kwargs):\n        cancel_bigquery_job(resource_meta.job_id)\n\n# To register the bigquery agent\nAgentRegistry.register(BigQueryAgent())\n```\n\n----------------------------------------\n\nTITLE: Caching Non-Flyte Offloaded Objects\nDESCRIPTION: Example of caching tasks that use pandas dataframes, which are not natively supported by Flyte's caching mechanism.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/caching.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom flytekit import task, workflow\n\n@task\ndef foo() -> pd.DataFrame:\n    return pd.DataFrame({\"column1\": [1, 2], \"column2\": [3, 4]})\n\n@task(cache=True, cache_version=\"1.0\")\ndef bar(df: pd.DataFrame) -> pd.DataFrame:\n    return df[df[\"column1\"] > 1]\n\n@workflow\ndef wf() -> pd.DataFrame:\n    return bar(df=foo())\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Overrides for Map Tasks in Python\nDESCRIPTION: This snippet shows how to customize resource allocations for individual map tasks using with_overrides.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Resources\n\n\n@workflow\ndef map_workflow_with_resource_overrides(data: list[int] = [10, 12, 11, 10, 13, 12, 100, 11, 12, 10]) -> list[bool]:\n    return map_task(detect_anomalies)(data_point=data).with_overrides(requests=Resources(mem=\"2Gi\"))\n```\n\n----------------------------------------\n\nTITLE: Defining a Cacheable Task with Serialization in Python\nDESCRIPTION: This Python code snippet demonstrates how to define a cacheable task with cache serialization enabled using the `@task` decorator in Flyte. The `cache=True`, `cache_serialize=True`, and `cache_version` parameters are used to configure the task for caching and serialization. This ensures that only one instance of the task runs at a time for the same inputs, improving resource utilization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/1461-cache-serialize-api.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\n@task(cache=True, cache_serialize=True, cache_version=\"1.0\")\ndef long_running_task():\n    # redacted long operation\n    \n@workflow\ndef wf():\n    return long_running_task()\n```\n```\n\n----------------------------------------\n\nTITLE: Programmatic Launch Plan Execution using FlyteRemote\nDESCRIPTION: Python code demonstrating how to programmatically fetch and execute a launch plan using FlyteRemote API, including configuration setup and execution monitoring\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_launch_plans.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote import FlyteRemote\nfrom flytekit.configuration import Config\nfrom flytekit import LaunchPlan\n\n# FlyteRemote object is the main entrypoint to API\nremote = FlyteRemote(\n    config=Config.for_endpoint(endpoint=\"flyte.example.net\"),\n    default_project=\"flytesnacks\",\n    default_domain=\"development\",\n)\n\n# Fetch launch plan\nflyte_lp = remote.fetch_launch_plan(\n    name=\"workflows.example.wf\", version=\"v1\", project=\"flytesnacks\", domain=\"development\"\n)\n\n# Execute\nexecution = remote.execute(\n    flyte_lp, inputs={\"mean\": 1}, execution_name=\"lp-execution\", wait=True\n)\n\n# Or use execution_name_prefix to avoid repeated execution names\nexecution = remote.execute(\n    flyte_lp, inputs={\"mean\": 1}, execution_name_prefix=\"flyte\", wait=True\n)\n```\n\n----------------------------------------\n\nTITLE: Force Pushing an Image in Python Code\nDESCRIPTION: This snippet shows how to force push an image in Python code by calling the force_push() method on an ImageSpec object.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimage = ImageSpec(registry=\"ghcr.io/flyteorg\", packages=[\"pandas\"]).force_push()\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte with Helm - Bash Commands\nDESCRIPTION: Series of bash commands for installing Flyte using Helm, including adding the Flyte repo, downloading values file, and installing the chart.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_simple.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://raw.githubusercontent.com/flyteorg/flyte/master/charts/flyte-binary/eks-starter.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install flyte-backend flyteorg/flyte-binary \\\n    --dry-run --namespace flyte --values eks-starter.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Plugin for Flyte Core\nDESCRIPTION: Extended YAML configuration for enabling the BigQuery plugin in Flyte core implementation. Includes detailed plugin configuration structure with enabled plugins and default task type mappings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/bigquery.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - bigquery\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          bigquery_query_job_task: bigquery\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for FlyteFile Usage in Python\nDESCRIPTION: This snippet shows the necessary imports for working with FlyteFile in a Flyte workflow, including CSV handling and statistical operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytefile.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nimport typing\nfrom io import StringIO\n\nimport pandas as pd\nfrom flytekit import task, workflow\nfrom flytekit.types.file import FlyteFile, CSVFile\nfrom statistics import mean, stdev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Flyte Cluster for Flytekit Development\nDESCRIPTION: These commands set up a local Flyte cluster for Flytekit development. It includes installing flytectl, setting up the necessary environment variables, and starting the Flyte demo cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sL https://ctl.flyte.org/install | bash\nexport PATH=$PATH:/home/ubuntu/bin # replace with your path\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Creating a Failing Task\nDESCRIPTION: Defines a task that intentionally fails during execution to demonstrate failure handling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/failure_node.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef will_fail(a: int) -> Tuple[int, str]:\n    \"\"\"This task will always fail\"\"\"\n    denominator = 0\n    try:\n        return a / denominator, \"Success\"\n    except Exception as e:\n        print(e)\n        raise Exception(\"Task failed\")\n```\n\n----------------------------------------\n\nTITLE: Scheduling Task on a Specific GPU Accelerator in Flyte\nDESCRIPTION: Example of defining a task that requests a specific GPU accelerator type (T4) using the accelerator parameter. This provides more control over hardware allocation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.10.6.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.extras.accelerators import T4\n\n\n@task(\n    limits=Resources(gpu=\"1\"),\n    accelerator=T4,\n)\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Custom Types\nDESCRIPTION: Required imports for implementing custom types in Flyte, including os, typing, and essential Flytekit components.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/custom_types.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom typing import Type, TypeVar\n\nfrom flytekit import FlyteContext\nfrom flytekit.extend import TypeEngine, TypeTransformer\nfrom flytekit.models.literals import Blob, BlobMetadata, Literal\nfrom flytekit.models.types import LiteralType, SimpleType\n```\n\n----------------------------------------\n\nTITLE: Complex Dataclass with Flyte Types\nDESCRIPTION: Demonstrates using Flyte-specific types in a dataclass including StructuredDataset, FlyteFile, and FlyteDirectory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/dataclass.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef complex_task() -> ComplexityOutput:\n    df = pd.DataFrame({\"x\": [1, 2], \"y\": [3, 4]})\n    return ComplexityOutput(\n        dataset=StructuredDataset(dataframe=df),\n        path=FlyteFile(path=\"path/to/file\"),\n        paths=[\n            FlyteFile(path=\"path/to/file1\"),\n            FlyteFile(path=\"path/to/file2\"),\n        ],\n        directory=FlyteDirectory(path=\"path/to/dir\"),\n    )\n```\n\n----------------------------------------\n\nTITLE: Chaining Launch Plans in Flyte using Python\nDESCRIPTION: This snippet demonstrates how to chain launch plans in Flyte. It creates launch plans from the previously defined subworkflows and chains them in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/chaining_flyte_entities.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlp0 = sw0.create_launch_plan()\nlp1 = sw1.create_launch_plan()\n\n@workflow\ndef chain_launchplans_wf():\n    lp0() >> lp1()\n```\n\n----------------------------------------\n\nTITLE: Working with TFRecord Files in Flyte\nDESCRIPTION: This snippet shows how to use the TFRecordFile type in Flyte to read and write TensorFlow record files. It includes tasks for creating and reading TFRecord files within a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/tensorflow_type.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef create_tfrecord() -> TFRecordFile:\n    # Code to create a TFRecord file\n    return TFRecordFile(path=\"/path/to/tfrecord\")\n\n@task\ndef read_tfrecord(tfr: TFRecordFile):\n    dataset = tf.data.TFRecordDataset(tfr.path)\n    # Process the dataset\n\n@workflow\ndef tfrecord_wf() -> None:\n    tfr = create_tfrecord()\n    read_tfrecord(tfr=tfr)\n```\n\n----------------------------------------\n\nTITLE: Composing FlyteDirectory Tasks into a Workflow in Python\nDESCRIPTION: This workflow combines the download and normalization tasks, accepting URLs, column metadata, and columns to normalize as inputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytedirectory.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef download_and_normalize_csv_files(\n    urls: List[str],\n    column_metadata: Dict[str, List[str]],\n    normalize_columns: List[str],\n) -> FlyteDirectory:\n    csv_dir = download_files(urls=urls)\n    return normalize_all_files(\n        csv_dir=csv_dir,\n        column_metadata=column_metadata,\n        normalize_columns=normalize_columns,\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Tag in ImageSpec\nDESCRIPTION: This example shows how to customize the tag of the image by specifying the tag_format in the ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimage_spec = ImageSpec(\n  name=\"my-image\",\n  packages=[\"pandas\"],\n  tag_format=\"{spec_hash}-dev\",\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Secret Keys in a Task\nDESCRIPTION: Creating a task that requests multiple secrets from the same group and accesses them at runtime.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    secret_requests=[\n        Secret(group=SECRET_GROUP_MULTI, key=SKEY) for SKEY in SECRET_KEYS\n    ]\n)\ndef multiple_secrets_task() -> str:\n    # Request the user and password\n    secrets = current_context().secrets\n    username = secrets.get(SECRET_GROUP_MULTI, \"username\")\n    password = secrets.get(SECRET_GROUP_MULTI, \"password\")\n    # WARNING: Never print your secrets. This is just for demonstration purposes.\n    print(f\"Shh, the username is: {username} and password is {password}\")\n    return \"multiple secrets used successfully\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets as Environment Variables in Flyte Tasks\nDESCRIPTION: Shows how to map and mount a Kubernetes secret with an environment variable in a Flyte task using the secret_requests parameter with ENV_VAR mount type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task(secret_requests=[Secret(..., env_var=\"MY_ENVVAR\", mount_requirement=Secret.MountType.ENV_VAR)]\ndef hello():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Quotas for Flyte Projects\nDESCRIPTION: Optional configuration for setting up Kubernetes ResourceQuota enforcement for Flyte projects. Defines CPU and memory quotas for different environments (production, staging, development).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncustomData:\n  - production:\n      - projectQuotaCpu:\n          value: \"5\"\n      - projectQuotaMemory:\n          value: \"4000Mi\"\n  - staging:\n      - projectQuotaCpu:\n          value: \"2\"\n      - projectQuotaMemory:\n          value: \"3000Mi\"\n  - development:\n      - projectQuotaCpu:\n          value: \"4\"\n      - projectQuotaMemory:\n          value: \"3000Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Images in Flyte Tasks - Python\nDESCRIPTION: Demonstrates how to use multiple Docker images in Flyte tasks using the @task decorator with container_image parameter. Shows integration with scikit-learn library in specific tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/multiple_images_in_a_workflow.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nfrom flytekit import task, workflow\nfrom sklearn.datasets import load_wine\n\n\n@task(container_image=\"{{.images.mindmeld}}\")\ndef t1() -> typing.Tuple[typing.List[int], typing.List[str]]:\n    wine = load_wine()\n    return wine.target[:5].tolist(), wine.feature_names[:5]\n\n\n@task(container_image=\"{{.images.borebuster}}\")\ndef t2(targets: typing.List[int], features: typing.List[str]) -> str:\n    targets_str = \", \".join([str(val) for val in targets])\n    features_str = \", \".join(features)\n    return f\"targets: [{targets_str}], features: [{features_str}]\"\n\n\n@workflow\ndef multi_images_wf() -> str:\n    targets, features = t1()\n    return t2(targets=targets, features=features)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Task Execution with Flytectl\nDESCRIPTION: Command to monitor a specific task execution using its execution ID\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution -p flytesnacks -d development <execid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Validation Decorator for Flyte Tasks\nDESCRIPTION: This function defines a decorator that verifies if the output from the decorated function is a positive number. It raises a ValueError if the condition is not met.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef validate_output(min_value):\n    def decorator(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            output = fn(*args, **kwargs)\n            if output < min_value:\n                raise ValueError(f\"Output {output} is less than {min_value}\")\n            return output\n        return wrapper\n    return decorator\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Flyte Learning Resources in Markdown\nDESCRIPTION: This code snippet creates a table in Markdown format listing various Flyte learning resources, including introduction, user guide, tutorials, integrations, and deployment guide. Each resource is described briefly and linked to its respective documentation page.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {doc}`🔤 Introduction to Flyte <user_guide/introduction>`\n  - Get your first workflow running, learn about the Flyte development lifecycle\n    and core use cases.\n* - {doc}`📖 User Guide <user_guide/index>`\n  - A comprehensive view of Flyte's functionality for data and ML practitioners and a deep dive into all of Flyte's concepts, from tasks and workflows to the underlying Flyte scheduler.\n* - {doc}`📚 Tutorials <flytesnacks/tutorials/index>`\n  - End-to-end examples of Flyte for data/feature engineering, machine learning,\n    bioinformatics, and more.\n* - {doc}`🔌 Integrations <flytesnacks/integrations/index>`\n  - Leverage a rich ecosystem of third-party tools and libraries to make your\n    Flyte workflows even more effective.\n* - {ref}`🚀 Deployment Guide <deployment>`\n  - Guides for platform engineers to deploy and maintain a Flyte cluster on your\n    own infrastructure.\n```\n```\n\n----------------------------------------\n\nTITLE: Using PyTorchCheckpoint for Model Serialization in Flyte\nDESCRIPTION: Illustrates the usage of PyTorchCheckpoint for serializing and deserializing PyTorch models in Flyte. This snippet shows how to save and load model state, hyperparameters, and optimizer state using PyTorchCheckpoint.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pytorch_type.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nfrom dataclasses import dataclass\nfrom flytekit import task, workflow\nfrom flytekit.types.pytorch import PyTorchCheckpoint\n\n@dataclass\nclass Hyperparameters:\n    learning_rate: float\n    batch_size: int\n\n@task\ndef train_model(hp: Hyperparameters) -> PyTorchCheckpoint:\n    model = torch.nn.Linear(10, 1)\n    optimizer = torch.optim.Adam(model.parameters(), lr=hp.learning_rate)\n    \n    checkpoint = PyTorchCheckpoint(\n        module=model,\n        optimizer_state=optimizer.state_dict(),\n        hyperparameters=hp,\n    )\n    return checkpoint\n\n@task\ndef use_model(checkpoint: PyTorchCheckpoint) -> float:\n    model = torch.nn.Linear(10, 1)\n    model.load_state_dict(checkpoint[\"module_state_dict\"])\n    optimizer = torch.optim.Adam(model.parameters())\n    optimizer.load_state_dict(checkpoint[\"optimizer_state\"])\n    hp = checkpoint[\"hyperparameters\"]\n    \n    # Use the model and hyperparameters\n    x = torch.randn(hp.batch_size, 10)\n    y = model(x)\n    return y.mean().item()\n\n@workflow\ndef pytorch_checkpoint_wf(learning_rate: float, batch_size: int) -> float:\n    hp = Hyperparameters(learning_rate=learning_rate, batch_size=batch_size)\n    checkpoint = train_model(hp=hp)\n    return use_model(checkpoint=checkpoint)\n\nif __name__ == \"__main__\":\n    print(pytorch_checkpoint_wf(learning_rate=0.01, batch_size=32))\n```\n\n----------------------------------------\n\nTITLE: Implementing NumPy-style Docstring in Flyte Workflow\nDESCRIPTION: This snippet shows how to use a NumPy-style docstring to document a Flyte workflow. It includes a brief summary, detailed description, parameter descriptions with types, and return value description.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/documenting_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef numpy_docstring_wf(dataset: FlyteSchema[kw1:str, kw2:str, x:float, y:float]) -> (float, float):\n    \"\"\"\n    Calculates slope and intercept using linear regression.\n\n    This workflow takes a dataset as input and calculates the slope and\n    intercept using linear regression. It demonstrates the use of\n    NumPy-style docstrings in Flyte workflows.\n\n    Parameters\n    ----------\n    dataset : FlyteSchema[kw1:str, kw2:str, x:float, y:float]\n        Input dataset containing x and y values\n\n    Returns\n    -------\n    tuple\n        Tuple containing slope (float) and intercept (float)\n    \"\"\"\n    m = slope(dataset=dataset)\n    b = intercept(dataset=dataset)\n    return m, b\n```\n\n----------------------------------------\n\nTITLE: Packaging Flyte Project with pyflyte\nDESCRIPTION: Uses pyflyte package command to serialize Flyte workflows into a portable package. Specifies the container image to use and includes workflows from the specified package.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npyflyte --pkgs workflows package --image ghcr.io/flyteorg/flytekit:py3.9-latest\n```\n\n----------------------------------------\n\nTITLE: Importing Workflow Module\nDESCRIPTION: Importing the workflow definition from a separate workflow.py file\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom workflow import hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerTask for calculating ellipse area in Haskell\nDESCRIPTION: Creates a ContainerTask that uses a Haskell script to calculate the area of an ellipse. It specifies input/output directories, image, and command to run.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncalculate_ellipse_area_haskell = ContainerTask(\n    name=\"calculate-ellipse-area-haskell\",\n    input_data_dir=\"/var/inputs\",\n    output_data_dir=\"/var/outputs\",\n    inputs=kwtypes(radius1=float, radius2=float),\n    outputs=kwtypes(area=float),\n    image=\"ghcr.io/flyteorg/flytecookbook:raw_containers-latest\",\n    command=[\"runghc\", \"calc.hs\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Labels and Annotations to Flyte Workflow Executions in Python\nDESCRIPTION: This example shows how to apply labels and annotations when executing a Flyte workflow. These execution-level labels and annotations will override any matching keys defined at the launch plan level.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/workflow_labels_and_annotations.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Labels, Annotations\n\n@workflow\nclass MyWorkflow(object):\n    ...\n\nmy_launch_plan = MyWorkflow.create_launch_plan(...)\n\nmy_launch_plan.execute(\n    labels=Labels({\"myexecutionlabel\": \"bar\", ...}),\n    annotations=Annotations({\"region\": \"SEA\", ...}),\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow with Shell Tasks in Python\nDESCRIPTION: This workflow combines the previously defined shell tasks and the create_entities task. It demonstrates how to chain tasks together, passing outputs from one task as inputs to another.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/shell_tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef shell_task_wf(x: str, a: int) -> (FlyteFile, FlyteFile, FlyteDirectory):\n    f1, d1 = create_entities(a=a)\n    f2 = t1(x=x)\n    f3 = t2(a=f2)\n    d2 = t3(d=d1, x=x)\n    return f1, f3, d2\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Typed Columns in Flyte StructuredDataset\nDESCRIPTION: This extended example demonstrates how to work with nested field structures in StructuredDataset. It includes complex data structures with nested fields, custom encoders and decoders for these structures, and a full workflow implementation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Define nested Python typing in Flyte StructuredDataset\nclass NestedSchema(TypedDict):\n    a: int\n    b: str\n    c: List[int]\n\n\nclass ComplexSchema(TypedDict):\n    x: int\n    y: str\n    z: NestedSchema\n    lst: List[Dict[str, int]]\n\n\n@dataclass\nclass NestedSchemaModel:\n    a: int\n    b: str\n    c: List[int]\n\n\n@dataclass\nclass ComplexSchemaModel:\n    x: int\n    y: str\n    z: NestedSchemaModel\n    lst: List[Dict[str, int]]\n\n\n# Register Decoder for ComplexSchemaModel\nclass ComplexSchemaModelDecodingHandler(StructuredDatasetDecoder[ComplexSchemaModel]):\n    \"\"\"\n    Decoder for ComplexSchemaModel\n    \"\"\"\n\n    def decode(\n        self,\n        ctx: FlyteContext,\n        flyte_value: StructuredDataset,\n        current_task_metadata: WorkflowExecutionParameters,\n    ) -> ComplexSchemaModel:\n        local_dir = ctx.file_access.get_random_local_directory()\n        ctx.file_access.get_data(flyte_value.uri, local_dir, is_multipart=True)\n        path = os.path.join(local_dir, \"000000\")\n        df = pd.read_parquet(path)\n        # Assume that there's only one record in the dataframe\n        row = df.iloc[0]\n        return ComplexSchemaModel(\n            x=row[\"x\"],\n            y=row[\"y\"],\n            z=NestedSchemaModel(\n                a=row[\"z.a\"],\n                b=row[\"z.b\"],\n                c=row[\"z.c\"],\n            ),\n            lst=row[\"lst\"],\n        )\n\n\n# Register Encoder for ComplexSchemaModel\nclass ComplexSchemaModelEncodingHandler(StructuredDatasetEncoder):\n    \"\"\"\n    Encoder for ComplexSchemaModel\n    \"\"\"\n\n    def encode(\n        self,\n        ctx: FlyteContext,\n        structured_dataset: ComplexSchemaModel,\n        structured_dataset_type: StructuredDatasetType,\n        destination: Optional[str] = None,\n    ) -> StructuredDataset:\n        cols = {\n            \"x\": [structured_dataset.x],\n            \"y\": [structured_dataset.y],\n            \"z.a\": [structured_dataset.z.a],\n            \"z.b\": [structured_dataset.z.b],\n            \"z.c\": [structured_dataset.z.c],\n            \"lst\": [structured_dataset.lst],\n        }\n        df = pd.DataFrame(cols)\n\n        # Get a random local directory for the file\n        if destination is None:\n            destination = ctx.file_access.join(\n                ctx.file_access.raw_output_prefix,\n                ctx.file_access.get_random_string(),\n            )\n\n        local_dir = ctx.file_access.get_random_local_directory()\n        filename = os.path.join(local_dir, \"000000\")\n        df.to_parquet(filename)\n        ctx.file_access.put_data(local_dir, destination, is_multipart=True)\n\n        schema = StructuredDatasetType.Schema(columns={})\n        return StructuredDataset(uri=destination, metadata=StructuredDatasetMetadata(structured_dataset_type=structured_dataset_type, schema=schema))\n\n\nclass ComplexSchemaModelRenderer(TypeRenderer):\n    \"\"\"\n    Renderer for ComplexSchemaModel\n    \"\"\"\n\n    def to_html(self, obj: ComplexSchemaModel) -> str:\n        return f\"\"\"<div>\n            <p>x: {obj.x}</p>\n            <p>y: {obj.y}</p>\n            <p>z.a: {obj.z.a}</p>\n            <p>z.b: {obj.z.b}</p>\n            <p>z.c: {obj.z.c}</p>\n            <p>lst: {obj.lst}</p>\n        </div>\"\"\"\n\n\n# Register the encoder, decoder and renderer\nTypeEngine.register(ComplexSchemaModelRenderer(name=\"ComplexSchemaModel\"))\nStructuredDatasetTransformerEngine.register(ComplexSchemaModelEncodingHandler(), ComplexSchemaModel)\nStructuredDatasetTransformerEngine.register_decoder(\n    ComplexSchemaModelDecodingHandler(), ComplexSchemaModel, pandas.DataFrame, byte_format=StructuredDatasetType.PARQUET\n)\n\n\n@task\ndef generate_nested_schema() -> ComplexSchemaModel:\n    return ComplexSchemaModel(\n        x=1,\n        y=\"2\",\n        z=NestedSchemaModel(a=3, b=\"4\", c=[5, 6, 7]),\n        lst=[{\"a\": 8}, {\"b\": 9}],\n    )\n\n\n@task\ndef consume_nested_schema(model: ComplexSchemaModel) -> ComplexSchemaModel:\n    return ComplexSchemaModel(\n        x=model.x + 1,\n        y=model.y + \"_processed\",\n        z=NestedSchemaModel(a=model.z.a + 1, b=model.z.b + \"_processed\", c=[i + 1 for i in model.z.c]),\n        lst=model.lst + [{\"c\": 10}],\n    )\n\n\n@workflow\ndef nested_schema_wf() -> ComplexSchemaModel:\n    model = generate_nested_schema()\n    return consume_nested_schema(model=model)\n```\n\n----------------------------------------\n\nTITLE: Executing a Locally Imported Workflow in Python\nDESCRIPTION: Executes a workflow that is imported directly in the local Python environment using the FlyteRemote client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom workflows.example import wf\n\nexecution = remote.execute(\n    wf,\n    inputs={\"name\": \"Kermit\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Workflow for Scheduling in Flyte\nDESCRIPTION: A simple workflow that formats a given date parameter. This workflow can be scheduled to run automatically, and it can receive the scheduled kickoff time as an input parameter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/schedules.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nfrom flytekit import task, workflow\n\n\n@task\ndef format_date(kickoff_time: datetime.datetime) -> str:\n    return kickoff_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\n@workflow\ndef date_formatter_wf(kickoff_time: datetime.datetime) -> str:\n    formatted_kickoff_time = format_date(kickoff_time=kickoff_time)\n    return formatted_kickoff_time\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Flyte Task with Multiple Input Types\nDESCRIPTION: Example showing a Flyte task definition with different input parameter types including primitive types (int, str) and FlyteFile.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/data_management.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef my_task(m: int, n: str, o: FlyteFile) -> pd.DataFrame:\n   ...\n```\n\n----------------------------------------\n\nTITLE: Running No-op Task in Flyte Conditional\nDESCRIPTION: This snippet demonstrates how to use a no-op task (echo) in a conditional statement to skip execution when a condition is not met.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\necho = ShellTask(\n    name=\"echo\",\n    script=\"echo\",\n)\n\n@workflow\ndef noop_in_conditional(radius: float, seed: int) -> float:\n    coin_result = coin_toss(seed=seed)\n    return (\n        conditional(\"coin_toss_condition\")\n        .if_(coin_result == \"heads\")\n        .then(calculate_circle_circumference(radius=radius))\n        .else_()\n        .then(echo(text=\"Skipping execution\"))\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Coordinate Type in Python\nDESCRIPTION: Demonstrates how to create a custom Flyte type called Coordinate using Python dataclasses, which includes x and y coordinates plus metadata. The class inherits from DataClassJSONMixin to enable serialization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/extending_flyte.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nfrom dataclasses import dataclass\nfrom mashumaro.mixins.json import DataClassJSONMixin\n\n@dataclass\nclass Coordinate(DataClassJSONMixin):\n    \"\"\"A custom type for coordinates with metadata attached.\"\"\"\n    x: float\n    y: float\n    metadata: typing.Dict[str, float]\n```\n\n----------------------------------------\n\nTITLE: Configuring Databricks Plugin in Demo Cluster\nDESCRIPTION: YAML configuration for enabling Databricks plugin in a Flyte demo cluster, including task plugin settings, AWS credentials, and storage configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    default-for-task-types:\n      container: container\n      container_array: k8s-array\n      sidecar: sidecar\n      spark: databricks\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - databricks\nplugins:\n  databricks:\n    entrypointFile: dbfs:///FileStore/tables/entrypoint.py\n    databricksInstance: <DATABRICKS_ACCOUNT>.cloud.databricks.com\n  k8s:\n    default-env-vars:\n      - FLYTE_AWS_ACCESS_KEY_ID: <AWS_ACCESS_KEY_ID>\n      - FLYTE_AWS_SECRET_ACCESS_KEY: <AWS_SECRET_ACCESS_KEY>\n      - AWS_DEFAULT_REGION: <AWS_REGION>\nremoteData:\n  region: <AWS_REGION>\n  scheme: aws\n  signedUrls:\n    durationMinutes: 3\npropeller:\n  rawoutput-prefix: s3://<S3_BUCKET_NAME>/\nstorage:\n  container: \"<S3_BUCKET_NAME>\"\n  type: s3\n  stow:\n    kind: s3\n    config:\n      region: <AWS_REGION>\n      disable_ssl: true\n      v2_signing: false\n      auth_type: accesskey\n      access_key_id: <AWS_ACCESS_KEY_ID>\n      secret_key: <AWS_SECRET_ACCESS_KEY>\n  signedURL:\n    stowConfigOverride:\n      endpoint: \"\"\n```\n\n----------------------------------------\n\nTITLE: Requesting a Specific GPU Device in Flyte Task\nDESCRIPTION: Python code example showing how to configure a Flyte task to request a specific GPU device type (NVIDIA Tesla V100). Uses the accelerator parameter to specify the exact GPU model.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, Resources, task\nfrom flytekit.extras.accelerators import V100\n\nimage = ImageSpec(\n    base_image= \"ghcr.io/flyteorg/flytekit:py3.10-1.10.2\",\n     name=\"pytorch\",\n     python_version=\"3.10\",\n     packages=[\"torch\"],\n     builder=\"default\",\n     registry=\"<YOUR_CONTAINER_REGISTRY>\",\n )\n\n@task(requests=Resources( gpu=\"1\"),\n              accelerator=V100, \n              ) #NVIDIA Tesla V100\ndef gpu_available() -> bool:\n   return torch.cuda.is_available()\n```\n\n----------------------------------------\n\nTITLE: Building and Running Flyte Single Binary\nDESCRIPTION: These commands demonstrate how to build and run the Flyte single binary after making modifications to the source code. It includes steps for tidying Go modules, compiling the binary, and starting Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake go-tidy\nmake compile\nPOD_NAMESPACE=flyte flyte start --config flyte-single-binary-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Downloading Files to FlyteDirectory in Python\nDESCRIPTION: This task downloads a list of URLs pointing to CSV files and returns the folder path as a FlyteDirectory object.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytedirectory.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef download_files(urls: List[str]) -> FlyteDirectory:\n    downloaded_directory = FlyteDirectory(\"downloaded_csvs\")\n    for idx, url in enumerate(urls):\n        file_location = os.path.join(downloaded_directory.name, f\"file_{idx}.csv\")\n        FlyteFile(url).download(file_location)\n    return downloaded_directory\n```\n\n----------------------------------------\n\nTITLE: Implementing MyDataset TypeTransformer\nDESCRIPTION: Custom TypeTransformer implementation for MyDataset that handles conversion between local and remote data representations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/custom_types.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\n\nclass MyDatasetTransformer(TypeTransformer[MyDataset]):\n    def __init__(self):\n        super().__init__(name=\"MyDataset\")\n\n    def get_literal_type(self, t: Type[T]) -> LiteralType:\n        return LiteralType(simple=SimpleType.BLOB)\n\n    def to_literal(self, ctx: FlyteContext, python_val: MyDataset, python_type: Type[MyDataset], expected: LiteralType) -> Literal:\n        local_path = python_val.path\n        random_dir = ctx.file_access.get_random_local_directory()\n        local_path = os.path.join(random_dir, os.path.basename(local_path))\n        os.makedirs(local_path, exist_ok=True)\n        remote_path = ctx.file_access.get_random_remote_directory()\n        ctx.file_access.put_data(local_path, remote_path, is_multipart=True)\n        return Literal(scalar=Blob(uri=remote_path, metadata=BlobMetadata(type=SimpleType.BLOB)))\n\n    def to_python_value(self, ctx: FlyteContext, lv: Literal, expected_python_type: Type[MyDataset]) -> MyDataset:\n        local_path = ctx.file_access.get_random_local_directory()\n        ctx.file_access.get_data(lv.scalar.uri, local_path, is_multipart=True)\n        return MyDataset(local_path)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Shell Tasks in Python\nDESCRIPTION: This snippet shows the necessary imports for working with shell tasks in Flyte. It includes imports from flytekit for task definition, workflow creation, and shell task functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/shell_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow, kwtypes\nfrom flytekit.types.file import FlyteFile\nfrom flytekit.types.directory import FlyteDirectory\nfrom flytekit.extras.tasks.shell import ShellTask\n\nimport typing\nfrom flytekit import Resources\nfrom flytekit.types.file import PythonNotebook\n```\n\n----------------------------------------\n\nTITLE: Executing a Flyte Workflow Locally\nDESCRIPTION: Demonstrates how to execute a workflow with resource-customized tasks in a local environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(my_workflow(x=[1, 2, 3, 4, 5, 2, 3], y=10))\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Flyte Decks\nDESCRIPTION: Basic imports required for using Flyte Decks functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom flytekit import Resources, task\nfrom flytekit.image_spec import ImageSpec\nfrom flytekitplugins.deck import renderer\n```\n\n----------------------------------------\n\nTITLE: Installing Flytekit from GitHub in ImageSpec\nDESCRIPTION: This snippet demonstrates how to install Flytekit from a specific GitHub commit hash using ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnew_flytekit = \"git+https://github.com/flyteorg/flytekit@90a4455c2cc2b3e171dfff69f605f47d48ea1ff1\"\nnew_spark_plugins = f\"git+https://github.com/flyteorg/flytekit.git@90a4455c2cc2b3e171dfff69f605f47d48ea1ff1#subdirectory=plugins/flytekit-spark\"\n\nimage_spec = ImageSpec(\n  apt_packages=[\"git\"],\n  packages=[new_flytekit, new_spark_plugins],\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flyte Task with Multiple Stacked Decorators\nDESCRIPTION: This snippet defines a Flyte task 't2' that uses both the logging and validator decorators. It demonstrates stacking multiple decorators on a Flyte task.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@task\n@log_io\n@validate_output(min_value=0)\ndef t2(x: int) -> int:\n    return x - 2\n```\n\n----------------------------------------\n\nTITLE: Registering multiple workflows with pyflyte register\nDESCRIPTION: This command registers all workflows and tasks in a specified directory to a Flyte cluster. It uses fast registration to package and deploy code without rebuilding the container image.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte register workflows\n```\n\n----------------------------------------\n\nTITLE: Configuring PyTorch Plugin for Flyte Core\nDESCRIPTION: YAML configuration for enabling the PyTorch plugin in Flyte core deployment. This sets up the necessary task plugins and default task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - pytorch\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          pytorch: pytorch\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Flytekit Development\nDESCRIPTION: This Dockerfile sets up an environment for Flytekit development. It includes the necessary dependencies and configurations to run Flytekit tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9-slim-buster\nUSER root\nWORKDIR /root\nENV PYTHONPATH /root\nRUN apt-get update && apt-get install build-essential -y\nRUN apt-get install git -y\nRUN pip install -U git+https://github.com/Yicheng-Lu-llll/flytekit.git@demo # replace with your own repo and branch\nENV FLYTE_INTERNAL_IMAGE \"localhost:30000/flytekit:demo\" # replace with your own image name and tag\n```\n\n----------------------------------------\n\nTITLE: Creating Workflow with Enum Input\nDESCRIPTION: Implements a workflow that accepts an enum input and calls the coffee maker task. Shows how enum types are handled at the workflow level.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/enum_type.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef coffee_maker_enum(coffee_enum: CoffeeType = CoffeeType.ESPRESSO) -> Tuple[str, CoffeeType]:\n    \"\"\"A workflow that makes coffee based on enum input. Default is espresso.\n\n    :param coffee_enum: Type of coffee to make\n    :return: Tuple of message and coffee type\n    \"\"\"\n    return make_coffee(coffee_type=coffee_enum)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Flyte Project\nDESCRIPTION: Command to initialize a git repository in the Flyte project directory for version control, which is recommended for tracking changes and required for Dockerfile-based projects.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/creating_a_flyte_project.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: GPU-Specific Pod Configuration in Kubernetes\nDESCRIPTION: YAML showing the pod spec configuration for a specific GPU device on GKE. Includes nodeAffinity for GPU type selection and tolerations for scheduling on GPU-enabled nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: cloud.google.com/gke-accelerator\n            operator: In\n            values:\n            - nvidia-tesla-v100\n  containers:\n  - resources:\n      limits:\n        nvidia.com/gpu: 1\n  tolerations:\n  - key: nvidia.com/gpu  # auto\n    operator: Equal\n    value: present\n    effect: NoSchedule\n  - key: cloud.google.com/gke-accelerator\n    operator: Equal\n    value: nvidia-tesla-v100\n    effect: NoSchedule\n```\n\n----------------------------------------\n\nTITLE: Creating Imperative Workflow Instance\nDESCRIPTION: Initializes a new imperative workflow instance.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 7\n```\n\n----------------------------------------\n\nTITLE: Mapping a Task with Multiple Inputs Using Partial in Python\nDESCRIPTION: This example demonstrates how to use functools.partial to map a task with multiple inputs, keeping some inputs constant.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\n\n\n@workflow\ndef multiple_inputs_map_workflow(quantities: list[int]) -> list[float]:\n    return map_task(partial(multi_input_task, price=100.0, discount=0.2))(quantity=quantities)\n```\n\n----------------------------------------\n\nTITLE: Creating a Project on a Flyte Cluster\nDESCRIPTION: Command to create a new project on a Flyte cluster with specified ID, labels, description, and name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create project \\\n      --id \"my-project\" \\\n      --labels \"my-label=my-project\" \\\n      --description \"My Flyte project\" \\\n      --name \"My project\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow for CSV File Normalization in Python\nDESCRIPTION: This workflow defines the process of normalizing CSV files. It takes input parameters for the CSV file URL, column names, columns to normalize, and an optional output location.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytefile.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef normalize_csv_file(\n    csv_url: FlyteFile,\n    column_names: typing.List[str],\n    columns_to_normalize: typing.List[str],\n    output_location: str = \"\",\n) -> CSVFile:\n    return normalize_columns(\n        csv_url=csv_url,\n        column_names=column_names,\n        columns_to_normalize=columns_to_normalize,\n        output_location=output_location,\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Dynamic Workflows in Flyte\nDESCRIPTION: Demonstrates a three-level workflow hierarchy using dynamic workflows to process lists in parallel. Includes core workflow tasks, intermediate level dynamic workflows, and a top-level workflow orchestrator.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/nested_parallelization.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\nA core workflow parallelized as six items with a chunk size of two will be structured as follows:\\n\\nmulti_wf -> level1 -> level2 -> core_wf -> step1 -> step2\\n                             -> core_wf -> step1 -> step2\\n                      level2 -> core_wf -> step1 -> step2\\n                             -> core_wf -> step1 -> step2\\n                      level2 -> core_wf -> step1 -> step2\\n                             -> core_wf -> step1 -> step2\\n\"\"\"\\n\\nimport typing\\nfrom flytekit import task, workflow, dynamic, LaunchPlan\\n\\n\\n@task\\ndef step1(a: int) -> int:\\n    return a + 1\\n\\n\\n@task\\ndef step2(a: int) -> int:\\n    return a + 2\\n\\n\\n@workflow\\ndef core_wf(a: int) -> int:\\n    return step2(a=step1(a=a))\\n\\n\\ncore_wf_lp = LaunchPlan.get_or_create(core_wf)\\n\\n\\n@dynamic\\ndef level2(l: typing.List[int]) -> typing.List[int]:\\n    return [core_wf_lp(a=a) for a in l]\\n\\n\\n@task\\ndef reduce(l: typing.List[typing.List[int]]) -> typing.List[int]:\\n    f = []\\n    for i in l:\\n        f.extend(i)\\n    return f\\n\\n\\n@dynamic\\ndef level1(l: typing.List[int], chunk: int) -> typing.List[int]:\\n    v = []\\n    for i in range(0, len(l), chunk):\\n        v.append(level2(l=l[i:i + chunk]))\\n    return reduce(l=v)\\n\\n\\n@workflow\\ndef multi_wf(l: typing.List[int], chunk: int) -> typing.List[int]:\\n    return level1(l=l, chunk=chunk)\n```\n\n----------------------------------------\n\nTITLE: Mixed Parallelism with Map Tasks in Flyte\nDESCRIPTION: Demonstrates combining dynamic workflows with map tasks for parallel processing, offering a different approach to nested parallelization with fewer layers.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/nested_parallelization.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\\nA core workflow parallelized as six items with a chunk size of two will be structured as follows:\\n\\nmulti_wf -> level1 -> level2 -> mappable\\n                             -> mappable\\n                      level2 -> mappable\\n                             -> mappable\\n                      level2 -> mappable\\n                             -> mappable\\n\"\"\"\\nimport typing\\nfrom flytekit import task, workflow, dynamic, map_task\\n\\n\\n@task\\ndef mappable(a: int) -> int:\\n    return a + 2\\n\\n\\n@workflow\\ndef level2(l: typing.List[int]) -> typing.List[int]:\\n    return map_task(mappable)(a=l)\\n\\n\\n@task\\ndef reduce(l: typing.List[typing.List[int]]) -> typing.List[int]:\\n    f = []\\n    for i in l:\\n        f.extend(i)\\n    return f\\n\\n\\n@dynamic\\ndef level1(l: typing.List[int], chunk: int) -> typing.List[int]:\\n    v = []\\n    for i in range(0, len(l), chunk):\\n        v.append(level2(l=l[i : i + chunk]))\\n    return reduce(l=v)\\n\\n\\n@workflow\\ndef multi_wf(l: typing.List[int], chunk: int) -> typing.List[int]:\\n    return level1(l=l, chunk=chunk)\n```\n\n----------------------------------------\n\nTITLE: Configuring Simplified Retry Behavior in Flyte Task\nDESCRIPTION: This snippet demonstrates how to configure a Flyte task to use the simplified retry model where both system and user retries count towards a single budget. This requires setting `configmap.core.propeller.node-config.ignore-retry-cause=true` in platform config.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    retries=5,               # Total retry budget for both system and user errors\n    interruptible=True\n)\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Approval Node with Promise in Flyte Workflow\nDESCRIPTION: Shows how to use the output of an approve node as a promise in subsequent tasks within a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/waiting_for_external_inputs.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef approval_as_promise_wf(data: typing.List[float]) -> str:\n    report = create_report(data=data)\n    approved = approve(\n        \"report-review\",\n        report,\n        help=\"Review the report and approve if it looks good\",\n    )\n    title = wait_for_input(\n        \"title-input\",\n        timeout=timedelta(hours=1),\n        expected_type=str,\n        default=\"My Report\",\n        help=\"Provide a title for the report\",\n    )\n    return finalize_report(report=approved, title=title)\n```\n\n----------------------------------------\n\nTITLE: Defining an Interruptible Task in Flyte with Python\nDESCRIPTION: This snippet shows how to define a Python task in Flyte with the interruptible flag set to True and retries configured to handle potential preemption of spot instances.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/spot_instances.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(cache_version='1', interruptible=True, retries=1)\ndef add_one_and_print(value_to_print: int) -> int:\n    return value_to_print + 1\n```\n\n----------------------------------------\n\nTITLE: Initial OAuth2 Configuration YAML\nDESCRIPTION: Basic YAML configuration for setting up OAuth2 authentication with identity providers like Okta, Google, or Azure AD.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenabled: true\noidc:\n  baseUrl: https://dev-<org-id>.okta.com/oauth2/default\n  clientId: <client_ID>\n  clientSecret: <client_secret>\ninternal:\n  clientSecret: '<your-random-password>'\n  clientSecretHash: <your-hashed-password>\nauthorizedUris:\n- https://<your-flyte-deployment-URL>\n```\n\n----------------------------------------\n\nTITLE: Generating Flyte Console URL for Execution\nDESCRIPTION: Generates and prints the Flyte console URL for a specific execution to monitor it in the web UI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Execution url: {remote.generate_console_url(execution)}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Reference Task in Flyte\nDESCRIPTION: This code demonstrates how to create a reference to an existing Flyte task using the reference_task decorator. The example shows how to specify project, domain, name, and version parameters to identify the task being referenced.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/reference_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@reference_task(\n     project=\"flytesnacks\",\n     domain=\"development\",\n     name=\"core.flyte_basics.files.normalize_columns\",\n     version=\"d06cebcfbeabc02b545eefa13a01c6ca992940c8\", # If using GIT for versioning OR 0.16.0, if semver\n )\n def normalize_columns(...):\n     ...\n```\n\n----------------------------------------\n\nTITLE: Implementing the Unified Cache Object in a Task\nDESCRIPTION: Shows how to use the new Cache object with various configuration options in a task decorator, which is the recommended approach instead of using the deprecated legacy parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@task(cache=Cache(version=\"1.0\", serialize=True, ignored_inputs=(\"debug_mode\",)))  \ndef my_task(...) -> ...: \n```\n\n----------------------------------------\n\nTITLE: Implementing Cleanup Task\nDESCRIPTION: Defines a cleanup task that executes when workflow failures occur, handling error messages and performing cleanup operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/failure_node.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef clean_up(a: int, err: TaskExecution.ErrorMessage) -> Tuple[int, str]:\n    print(f\"Cleaning up after failure: {err}\")\n    return -1, \"Cleaned up\"\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Launch Plan Schedule with flytectl CLI\nDESCRIPTION: Uses the flytectl command-line tool to deactivate (archive) a launch plan schedule for a specific project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan -p flyteexamples -d development \\\n process_data_lp --version <VERSION> --archive\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow with Resource-Customized Tasks in Flyte\nDESCRIPTION: Defines a workflow that uses tasks with custom resource requirements, demonstrating how they can be used like regular tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef my_workflow(x: typing.List[int], y: int) -> typing.Tuple[int, int]:\n    \"\"\"Workflow using tasks with resource constraints.\"\"\"\n    count = count_unique_numbers(x=x)\n    square_val = square(x=y)\n    return count, square_val\n```\n\n----------------------------------------\n\nTITLE: Creating ResourceQuota Template for Flyte Projects\nDESCRIPTION: Template for automating the creation of Kubernetes ResourceQuota objects for Flyte projects. Uses templated values to set CPU and memory limits based on project configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntemplates:\n  - key: ab_project_resource_quota\n    value: |\n      apiVersion: v1\n      kind: ResourceQuota\n      metadata:\n        name: project-quota\n        namespace: {{ namespace }}\n      spec:\n        hard:\n          limits.cpu: {{ projectQuotaCpu }}\n          limits.memory: {{ projectQuotaMemory }}\n```\n\n----------------------------------------\n\nTITLE: Handling TFRecord Directories in Flyte\nDESCRIPTION: This example demonstrates how to work with directories containing multiple TFRecord files using the TFRecordsDirectory type in Flyte. It includes tasks for creating and reading TFRecord directories within a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/tensorflow_type.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef create_tfrecords_dir() -> TFRecordsDirectory:\n    # Code to create multiple TFRecord files in a directory\n    return TFRecordsDirectory(path=\"/path/to/tfrecords_dir\")\n\n@task\ndef read_tfrecords_dir(tfr_dir: TFRecordsDirectory):\n    dataset = tf.data.TFRecordDataset(tf.data.Dataset.list_files(f\"{tfr_dir.path}/*.tfrecord\"))\n    # Process the dataset\n\n@workflow\ndef tfrecords_dir_wf() -> None:\n    tfr_dir = create_tfrecords_dir()\n    read_tfrecords_dir(tfr_dir=tfr_dir)\n```\n\n----------------------------------------\n\nTITLE: Measuring Cache Performance with Timeit\nDESCRIPTION: Uses IPython's timeit magic command to demonstrate the performance improvement when a cached task is executed a second time.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%timeit -n 1 -r 1 wf(data=[float(x) for x in range(100_000)])\n```\n\n----------------------------------------\n\nTITLE: Configuring Images in Flyte Config File - YAML\nDESCRIPTION: Shows how to configure Docker images in the Flyte configuration file. Demonstrates setting up image mappings with fully qualified names and tags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/multiple_images_in_a_workflow.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  # For GRPC endpoints you might want to use dns:///flyte.myexample.com\n  endpoint: localhost:30080\n  authType: Pkce\n  insecure: true\nimages:\n  mindmeld: ghcr.io/flyteorg/flytecookbook:core-latest\n  borebuster: ghcr.io/flyteorg/flytekit:py3.9-latest\nconsole:\n  endpoint: http://localhost:30080\nlogger:\n  show-source: true\n  level: 0\n```\n\n----------------------------------------\n\nTITLE: Overriding Launch Plan Defaults\nDESCRIPTION: Executing launch plan with overridden input values\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlp(name=\"override\").execute()\n```\n\n----------------------------------------\n\nTITLE: Secrets Configuration YAML\nDESCRIPTION: YAML configuration for OAuth2 client credentials secrets in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  adminOauthClientCredentials:\n    enabled: true\n    clientSecret: \"<your-random-password>\"\n    clientId: flytepropeller\n```\n\n----------------------------------------\n\nTITLE: Column Removal Task Implementation\nDESCRIPTION: Task that processes a FlyteFile by removing a specified column from the DataFrame and saving the result.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/data_management.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task()\ndef task_remove_column(input_file: FlyteFile, column_name: str) -> FlyteFile:\n    \"\"\"\n    Reads the input file as a DataFrame, removes a specified column, and outputs it as a new file.\n    \"\"\"\n    input_file.download()\n    df = pd.read_csv(input_file.path)\n\n    # remove column\n    if column_name in df.columns:\n        df = df.drop(columns=[column_name])\n\n    output_file_path = \"data_finished.csv\"\n    df.to_csv(output_file_path, index=False)\n\n    return FlyteFile(output_file_path)\n```\n\n----------------------------------------\n\nTITLE: Generating Launch Plan Execution Spec using flytectl\nDESCRIPTION: Command to generate an execution specification file for a launch plan using flytectl CLI tool\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_launch_plans.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development myapp.workflows.example.my_wf  --execFile exec_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Column Types for StructuredDataset\nDESCRIPTION: Define column types to extract specific columns from the StructuredDataset for type validation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCOLUMN_TYPES = typing.TypedDict(\"COLUMN_TYPES\", {\"Age\": int})\nStructuredDatasetAgeOnly = StructuredDatasetType[COLUMN_TYPES]\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Backend Plugin Server\nDESCRIPTION: FastAPI server implementation for handling plugin operations including create, poll and delete resources. Defines REST endpoints for plugin management with proper error handling and status codes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-exteranl-plugin-service.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nfrom flytekit.backend.plugins import TaskInfo, IO, PollResultSuccess,\n               PollResultFailure, OperationInProgress, PollResult\n\napp = FastAPI()\n\n@app.put(\"/plugins/v1/{task_type}/{version}\")\ndef create(task_info: TaskInfo) -> ResourceInfo:\n    \"\"\"\n    Creates resource.\n    \n    return job_id, error code, message\n    200 Job was created.\n    401 The request was unauthorized.\n    500 The request was not handled correctly due to a server error.\n    \"\"\"\n    return {\"job_id\": job_id, \"error_code\": error_code, \"message\": message}\n\n@app.get(\"/plugins/v1/{task_type}/{version}\")\nasync def poll(resource_id: int, task_info: TaskInfo, io: IO, resource_info: ResourceInfo) -> PollResult:\n    \"\"\"\n    Retrieves resource and returns the current observable status\n    \n    return job_spec, job_state (succeed, failed, running), error core, message.\n    200 Job was retrieved successfully.\n    400 The request was malformed. See JSON response for error details.\n    401 The request was unauthorized.\n    500 The request was not handled correctly due to a server error.\n    \"\"\"\n    if resp.state == \"success\":\n       state = succeed\n    elif resp.state == \"failure\":\n       state = failed\n    elif resp.state == \"running\":\n        state = running\n    return {\"job_spec\": job_spec, \"job_state\": state, \"error_code\": error_code, \"message\": message}\n\n@app.delete(\"/plugins/v1/{task_type}/{version}\")\nasync def delete_res(resource_id: str):\n    \"\"\"\n    Delete the resource\n    \n    return job_id, error core, message.\n    200 Job was deleted successfully.\n    400 The request was malformed. See JSON response for error details.\n    401 The request was unauthorized.\n    500 The request was not handled correctly due to a server error.\n    \"\"\"\n    return {\"job_id\": job_id, \"error_code\": error_code, \"message\": message}\n```\n\n----------------------------------------\n\nTITLE: Implementing Input/Output Logging Decorator for Flyte Tasks\nDESCRIPTION: This function defines a decorator that logs the input and output details for a decorated Flyte task. It uses functools.wraps to preserve task metadata.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef log_io(fn):\n    @wraps(fn)\n    def wrapper(*args, **kwargs):\n        logger.info(f\"Inputs: args={args}, kwargs={kwargs}\")\n        output = fn(*args, **kwargs)\n        logger.info(f\"Output: {output}\")\n        return output\n    return wrapper\n```\n\n----------------------------------------\n\nTITLE: Installing Flytectl with Curl\nDESCRIPTION: Command to install flytectl on macOS, Linux, or Windows (via WSL) using curl to download and install the binary.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://ctl.flyte.org/install | sudo bash -s -- -b /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Implementing MyDataset Custom Type\nDESCRIPTION: Definition of a custom MyDataset class that represents a collection of files on disk, with methods for file operations and path management.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/custom_types.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyDataset:\n    def __init__(self, path: str):\n        self._path = path\n\n    @property\n    def path(self) -> str:\n        return self._path\n\n    def write(self, file_name: str, contents: str):\n        with open(os.path.join(self._path, file_name), \"w\") as fh:\n            fh.write(contents)\n\n    def read(self, file_name: str) -> str:\n        with open(os.path.join(self._path, file_name), \"r\") as fh:\n            return fh.read()\n```\n\n----------------------------------------\n\nTITLE: Waiting for Execution Completion and Retrieving Outputs\nDESCRIPTION: Waits for the execution to complete and then retrieves and prints the outputs from the execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncompleted_execution = remote.wait(execution)\nprint(completed_execution.outputs)  # print out the outputs\n```\n\n----------------------------------------\n\nTITLE: Creating a Flyte Workflow with @workflow Decorator\nDESCRIPTION: Demonstrates how to define a Flyte workflow using the @workflow decorator. This workflow composes tasks together, showing data flow between them and returning multiple values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/flyte_project_components.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef wf(name: str = \"world\") -> typing.Tuple[str, int]:\n    greeting = say_hello(name=name)\n    greeting_len = greeting_length(greeting=greeting)\n    return greeting, greeting_len\n```\n\n----------------------------------------\n\nTITLE: Setting LaunchPlan Max Parallelism in Python\nDESCRIPTION: This Python code snippet demonstrates how to set the max_parallelism parameter when creating or retrieving a LaunchPlan, which affects the maximum number of nodes that can be evaluated simultaneously in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLaunchPlan.get_or_create(\n  name=\"my_cron_scheduled_lp\",\n  workflow=date_formatter_wf,\n  max_parallelism=30,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Task Timeouts in Flyte\nDESCRIPTION: Demonstrates how to configure a timeout for a task to prevent it from running indefinitely, using a Python timedelta object to specify a maximum runtime of one hour.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\n\n@task(timeout=timedelta(hours=1))\ndef compute_mean(data: List[float]) -> float:\n    return sum(data) / len(data)\n```\n\n----------------------------------------\n\nTITLE: Get Workflows\nDESCRIPTION: Retrieves all workflows within the specified project and domain using the `flytectl get workflow` command.  The `-p` flag specifies the project, and the `-d` flag specifies the domain. No workflow name is provided, so all workflows are returned.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Flyte Dependencies\nDESCRIPTION: Imports necessary Flyte decorators and types for implementing failure node functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/failure_node.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom flytekit.core.workflow import FailurePolicy\nfrom flyteidl.admin.task_execution_pb2 import TaskExecution\nfrom flytekitplugins.pod import Pod\nfrom kubernetes.client import V1Container, V1PodSpec\nfrom typing import Tuple\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Conditional Branch in Flyte Workflow\nDESCRIPTION: This example demonstrates a simple conditional branch in a Flyte workflow, choosing between calculating circle circumference or area based on input.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef calculate_circle_circumference(radius: float) -> float:\n    return 2 * 3.14159 * radius\n\n@task\ndef calculate_circle_area(radius: float) -> float:\n    return 3.14159 * radius * radius\n\n@workflow\ndef shape_properties(radius: float) -> float:\n    return (\n        conditional(\"if_fraction\")\n        .if_((radius >= 0) & (radius <= 1))\n        .then(calculate_circle_circumference(radius=radius))\n        .else_()  # type: ignore\n        .then(calculate_circle_area(radius=radius))\n    )\n```\n\n----------------------------------------\n\nTITLE: Additional GPU Resource Tolerations in Flyte-Binary\nDESCRIPTION: YAML configuration for flyte-binary Helm chart to add custom tolerations for GPU resources. Used when your infrastructure requires additional tolerations for GPU scheduling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    plugins:\n      k8s:\n        resource-tolerations:\n        - nvidia.com/gpu: \n          - key: \"mykey\"\n            operator: \"Equal\"\n            value: \"myvalue\"\n            effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DataFrame Summary Renderer\nDESCRIPTION: Defines a custom renderer class that summarizes pandas DataFrames instead of showing raw values. The renderer implements a to_html method that returns the HTML representation of the DataFrame's summary statistics.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/visualizing_task_input_and_output.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass DataFrameSummaryRenderer:\n\n    def to_html(self, df: pd.DataFrame) -> str:\n        assert isinstance(df, pd.DataFrame)\n        return df.describe().to_html()\n```\n\n----------------------------------------\n\nTITLE: Updating Task Signature to Invalidate Cache\nDESCRIPTION: Example of modifying a task's signature to automatically invalidate the cache.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/caching.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task(cache=True, cache_version=\"1.0\")\ndef square(n: int) -> Tuple[int, int]:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Packaging with Source Path Specification\nDESCRIPTION: Command to package Flyte workflows with specified source paths to resolve ModuleNotFoundError. The --source flag indicates where to find the source code.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npyflyte --pkgs <dir1> package --source ./src -f\n```\n\n----------------------------------------\n\nTITLE: Defining a Spark Task in Python using Flyte\nDESCRIPTION: This snippet demonstrates how to define a Spark task in Flyte using Python. It showcases the use of the @task decorator with Spark configuration settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/workflow_lifecycle.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    task_config=Spark(\n        spark_conf={\n            \"spark.driver.memory\": \"1000M\",\n            \"spark.executor.instances\": \"2\",\n            \"spark.driver.cores\": \"1\",\n        }\n    )\n)\ndef hello_spark(i: int) -> float:\n ...\n ...\n```\n\n----------------------------------------\n\nTITLE: Using NumPy with Flyte StructuredDataset for Data Processing\nDESCRIPTION: This code demonstrates how to use numpy.ndarray with Flyte tasks to deserialize parquet files and serialize NumPy arrays. It defines a workflow with two tasks: one to generate a NumPy array and another to process it.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef generate_numpy_array() -> np.ndarray:\n    \"\"\"\n    Generate a numpy array that will be converted to a parquet file.\n    \"\"\"\n    return np.array([i for i in range(100)]).reshape(10, 10)\n\n\n@task\ndef consume_numpy_array(array: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Parquet -> NumPy -> computation -> NumPy -> Parquet\n    \"\"\"\n    return array + 1\n```\n\n----------------------------------------\n\nTITLE: Implementing In-line Decks with Custom Renderers\nDESCRIPTION: Shows how to add custom content to the default deck using current_context(). This example adds markdown content and a boxplot visualization to provide more context about the task's operation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/visualizing_task_input_and_output.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport flytekit\nfrom flytekitplugins.deck.renderer import MarkdownRenderer, BoxRenderer\n\n@task(enable_deck=True)\ndef iris_data(\n    sample_frac: Optional[float] = None,\n    random_state: Optional[int] = None,\n) -> pd.DataFrame:\n    data = px.data.iris()\n    if sample_frac is not None:\n        data = data.sample(frac=sample_frac, random_state=random_state)\n\n    md_text = (\n        \"# Iris Dataset\\n\"\n        \"This task loads the iris dataset using the  `plotly` package.\"\n    )\n    flytekit.current_context().default_deck.append(MarkdownRenderer().to_html(md_text))\n    flytekit.Deck(\"box plot\", BoxRenderer(\"sepal_length\").to_html(data))\n    return data\n```\n\n----------------------------------------\n\nTITLE: Creating a Pipeline with Resource Overrides in Flyte\nDESCRIPTION: Defines a workflow that demonstrates how to override resource requirements dynamically using the with_overrides method.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef my_pipeline(x: typing.List[int], y: int) -> typing.Tuple[int, int]:\n    \"\"\"Workflow demonstrating resource overrides.\"\"\"\n    count = count_unique_numbers(x=x)\n    \n    # Override the resource requirements\n    square_1_with_new_resources = square_1.with_overrides(\n        requests=Resources(cpu=\"3\", mem=\"400Mi\"),\n        limits=Resources(cpu=\"6\", mem=\"500Mi\"),\n    )\n    \n    square_val = square_1_with_new_resources(x=y)\n    return count, square_val\n```\n\n----------------------------------------\n\nTITLE: Unpartitioned A100 GPU Task Definition\nDESCRIPTION: Python task definition requesting an entire unpartitioned A100 GPU resource using Flytekit.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, Resources, task\nfrom flytekit.extras.accelerators import A100\n\nimage = ImageSpec(\n    base_image= \"ghcr.io/flyteorg/flytekit:py3.10-1.10.2\",\n     name=\"pytorch\",\n     python_version=\"3.10\",\n     packages=[\"torch\"],\n     builder=\"default\",\n     registry=\"<YOUR_CONTAINER_REGISTRY>\",\n )\n\n@task(requests=Resources( gpu=\"1\"),\n              accelerator=A100.unpartitioned, \n              ) # request the entire A100 device\ndef gpu_available() -> bool:\n   return torch.cuda.is_available()\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerTask for calculating ellipse area in Shell\nDESCRIPTION: Creates a ContainerTask that uses a Shell script to calculate the area of an ellipse. It specifies input/output directories, image, and command to run.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncalculate_ellipse_area_shell = ContainerTask(\n    name=\"calculate-ellipse-area-shell\",\n    input_data_dir=\"/var/inputs\",\n    output_data_dir=\"/var/outputs\",\n    inputs=kwtypes(radius1=float, radius2=float),\n    outputs=kwtypes(area=float),\n    image=\"ghcr.io/flyteorg/flytecookbook:raw_containers-latest\",\n    command=[\"/bin/sh\", \"-c\", \"calc.sh\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for User Container Plugin\nDESCRIPTION: The necessary imports for creating a user container task plugin in Flytekit, including core modules for task definitions and execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/user_container_task_plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom typing import Any, Callable, Dict, Optional, Type, TypeVar, cast\n\nfrom flytekit.core import context_manager\nfrom flytekit.core.python_function_task import PythonFunctionTask\nfrom flytekit.core.task import TaskMetadata\n```\n\n----------------------------------------\n\nTITLE: Defining a Cached Task in Flyte\nDESCRIPTION: Example of defining a simple task with caching enabled using the @task decorator.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/caching.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task(cache=True, cache_version=\"1.0\")\ndef square(n: int) -> int:\n    return n * n\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Control Plane for Multiple Data Planes\nDESCRIPTION: YAML configuration for Flyte's values-override.yaml that defines multiple data plane clusters and label-based routing. This configuration enables workload distribution across different clusters based on project, domain, and label.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n... #all the above content remains the same\n   configmap:\n   clusters:\n   labelClusterMap:\n      label1:\n      - id: dataplane_1\n         weight: 1\n      label2:\n      - id: dataplane_2\n         weight: 1\n   clusterConfigs:\n   - name: \"dataplane_1\"\n      endpoint: https://<DATAPLANE-1-K8S-API-ENDPOINT>.com:443\n      enabled: true\n      auth:\n         type: \"file_path\"\n         tokenPath: \"/var/run/credentials/dataplane_1_token\"\n         certPath: \"/var/run/credentials/dataplane_1_cacert\"\n   - name: \"dataplane_2\"\n      endpoint: https://<DATAPLANE-1-K8S-API-ENDPOINT>:443\n      enabled: true\n      auth:\n         type: \"file_path\"\n         tokenPath: \"/var/run/credentials/dataplane_2_token\"\n         certPath: \"/var/run/credentials/dataplane_2_cacert\"\n```\n\n----------------------------------------\n\nTITLE: R script for calculating ellipse area\nDESCRIPTION: Defines an R script that reads input radii, calculates the area of an ellipse, and writes the result to an output file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_9\n\nLANGUAGE: r\nCODE:\n```\n# Read inputs\nradius1 <- as.numeric(readLines(\"/var/inputs/radius1\"))\nradius2 <- as.numeric(readLines(\"/var/inputs/radius2\"))\n\n# Calculate area\narea <- pi * radius1 * radius2\n\n# Write output\nwriteLines(as.character(area), \"/var/outputs/area\")\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayNode Message Structure in Protobuf\nDESCRIPTION: Protobuf message definition for the new ArrayNode type that includes subtask definition, parallelism settings, size configuration, and success criteria options. This structure will be implemented in flyteidl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3346-array-node.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ArrayNode {\n    Node  subtask     = 1;\n    int64 parallelism = 2;\n    int64 size        = 3;\n    oneof success_criteria {\n        int64 min_successes     = 4;\n        float min_success_ratio = 5;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Workflow with Launch Plan in Python\nDESCRIPTION: Demonstrates how to create and use external workflows using launch plans in Flyte, showing the distinction between subworkflows and launch plans.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/subworkflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import LaunchPlan\n\nregression_line_lp = LaunchPlan.create(\"regression_line_lp\", regression_line_wf)\n\n@workflow\ndef nested_regression_line_lp(x: typing.List[int], y: typing.List[int]) -> typing.List[float]:\n    return regression_line_lp(x=x, y=y)\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Conda Environment for Flyte\nDESCRIPTION: Commands to create a new conda virtual environment named 'flyte-example' with Python 3.10 and activate it. This isolates your Flyte dependencies from other Python projects.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/installing_development_tools.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n flyte-example python=3.10 -y\nconda activate flyte-example\n```\n\n----------------------------------------\n\nTITLE: Node Affinity Configuration for A100 GPU\nDESCRIPTION: YAML configuration for node affinity settings to match nodes with A100 GPU devices using a default 2g.10gb partition size.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: nvidia.com/gpu.accelerator\n            operator: In\n            values:\n            - nvidia-tesla-a100\n```\n\n----------------------------------------\n\nTITLE: Setting Task Resource Limits in Python\nDESCRIPTION: This Python code snippet demonstrates how to override default container resource limits for a specific Flyte task.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Resources, task\n@task(limits=Resources(mem=\"256Mi\")    \ndef your_task(...\n```\n\n----------------------------------------\n\nTITLE: Python script for calculating ellipse area\nDESCRIPTION: Defines a Python script that reads input radii, calculates the area of an ellipse, and writes the result to an output file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport math\nimport os\n\n# Read inputs\nwith open('/var/inputs/radius1', 'r') as f:\n    radius1 = float(f.read().strip())\nwith open('/var/inputs/radius2', 'r') as f:\n    radius2 = float(f.read().strip())\n\n# Calculate area\narea = math.pi * radius1 * radius2\n\n# Write output\nwith open('/var/outputs/area', 'w') as f:\n    f.write(str(area))\n```\n\n----------------------------------------\n\nTITLE: Configuring Kube Client for Flyte Propeller\nDESCRIPTION: YAML configuration for customizing the Kubernetes client settings in FlytePropeller, including QPS (queries per second), burst rate, and timeout parameters. These settings control API request throttling when interacting with the Kubernetes API server.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npropeller:\n  kube-client-config:\n    qps: 100 # Refers to max rate of requests (queries per second) to kube-apiserver\n    burst: 120 # refers to max burst rate. \n    timeout: 30s # Refers to timeout when talking with the kube-apiserver\n```\n\n----------------------------------------\n\nTITLE: Enabling Task Output Caching with Deterministic Inputs\nDESCRIPTION: Shows how to enable task-level caching by setting cache=True in the task decorator, which ensures tasks with identical inputs reuse previously computed outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task(cache=True, cache_version=\"1.0\")  \ndef square(n: int) -> int:  \n    return n * n \n```\n\n----------------------------------------\n\nTITLE: Retrieve latest task version\nDESCRIPTION: Retrieves the latest version of a specified task by name within a Flyte project and domain. The `--latest` flag ensures that the most recent version is returned.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development  core.basic.lp.greet --latest\"\n```\n\n----------------------------------------\n\nTITLE: Log Processing and Deck Filtering for Jupyter Notebook\nDESCRIPTION: Utility code for capturing and filtering logs to extract deck file paths. This helper code is used to display the generated HTML decks directly in a Jupyter notebook environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/visualizing_task_input_and_output.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# this is an unrendered cell, used to capture the logs in order to render the\n# Flyte Decks directly in the docs.\nimport datetime\nimport logging\nimport os\nimport re\nimport shutil\nfrom pythonjsonlogger import jsonlogger\nfrom IPython.display import HTML\nfrom pathlib import Path\n\n\nclass DeckFilter(logging.Filter):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.formatter = jsonlogger.JsonFormatter(\n            fmt=\"%(asctime)s %(name)s %(levelname)s %(message)s\"\n        )\n        self.logs = []\n        self.deck_files = {}\n\n    def filter(self, record):\n        patt = \"(.+) task creates flyte deck html to (.+/deck.html)\"\n        msg = record.getMessage()\n        matches = re.match(patt, msg)\n\n        if msg == \"Connection error. Skip stats collection.\":\n            return False\n\n        if matches:\n            task, filepath = matches.group(1), matches.group(2)\n            self.logs.append(self.formatter.format(record))\n            self.deck_files[task] = re.sub(\"^file://\", \"\", filepath)\n        return False\n\ndef cp_deck(src):\n    src = Path(src)\n    target = Path.cwd() / \"_flyte_decks\" / src.parent.name\n    target.mkdir(parents=True, exist_ok=True)\n    shutil.copy(src, target)\n    return target / \"deck.html\"\n\n\nlogger = logging.getLogger(\"flytekit\")\nlogger.setLevel(20)\n\ndeck_filter = DeckFilter()\nlogger.addFilter(deck_filter)\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatGPT Agent in Flyte Core YAML\nDESCRIPTION: YAML configuration for enabling the ChatGPT agent in Flyte core. It specifies the agent-service plugin, sets the default agent for ChatGPT tasks, and configures timeouts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    # -- Tasks specific configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#GetConfig)\n    tasks:\n      # -- Plugins configuration, [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#TaskPluginConfig)\n      task-plugins:\n        # -- [Enabled Plugins](https://pkg.go.dev/github.com/flyteorg/flyteplugins/go/tasks/config#Config). Enable sagemaker*, athena if you install the backend\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          chatgpt: agent-service\n    plugins:\n      agent-service:\n        # Configuring the timeout is optional.\n        # Tasks like using ChatGPT with a large model might require a longer time, \n        # so we have the option to adjust the timeout setting here.\n        defaultAgent:\n          timeouts:\n            ExecuteTaskSync: 10s\n```\n\n----------------------------------------\n\nTITLE: Running the Shell Task Workflow Locally in Python\nDESCRIPTION: This snippet shows how to execute the defined workflow locally with specific input parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/shell_tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(f\"Running {__file__} main...\")\n    print(f\"Running shell_task_wf(x='hello', a=3) {shell_task_wf(x='hello', a=3)}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring imagePullSecrets in Flyte\nDESCRIPTION: Demonstrates two methods for configuring imagePullSecrets in Flyte: using a Service Account or Custom Pod Template. The code snippet shows the tab-based documentation structure for these configuration options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/private_images.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs::\n\n   .. tab:: Service Account\n\n      You can use the default or new service account for this option:\n\n      1. Add your ``imagePullSecrets`` configuration to the\n         `service account <https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-image-pull-secret-to-service-account>`__.\n      2. Use this service account to log into the private registry and pull the image.\n      3. When you create a task/workflow execution this service account should\n         be specified to access the private image.\n\n   .. tab:: Custom Pod Template\n\n      This option uses a `custom pod template <https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/>`__\n      to create a pod. This template is automatically added to every ``pod`` that\n      Flyte creates.\n\n      1. Add your ``imagePullSecrets`` configuration to this custom pod template.\n      2. Update `FlytePropeller <https://github.com/flyteorg/flyteplugins/blob/e2971efbefd9126aca0290ddc931663605dec348/go/tasks/pluginmachinery/flytek8s/config/config.go#L157>`__ about the pod created in the previous step.\n      3. FlytePropeller adds ``imagePullSecrets``, along with other customization for the pod,\n         to the PodSpec, which should look similar to this\n         `manifest <https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-pod-that-uses-your-secret>`__.\n      4. The pods with their keys can log in and access the images in the private registry.\n         Once you set up the token to authenticate with the private registry, you can pull images from them.\n```\n\n----------------------------------------\n\nTITLE: Running Flyte Workflows Locally\nDESCRIPTION: This snippet demonstrates how to run all the defined workflows locally for testing and verification purposes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(f\"\\nlist_workflow: {list_workflow()}\")\n    print(f\"\\ndict_workflow: {dict_workflow()}\")\n    print(f\"\\ndataclass_workflow: {dataclass_workflow()}\")\n    print(f\"\\ncomplex_workflow: {complex_workflow()}\")\n```\n\n----------------------------------------\n\nTITLE: Overwriting Cache via Command Line\nDESCRIPTION: Example of using the overwrite-cache flag with pyflyte run command to invalidate cache.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/caching.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pyflyte run --remote  --overwrite-cache example.py wf\n```\n\n----------------------------------------\n\nTITLE: Implementing Human-in-the-loop Workflow\nDESCRIPTION: Example of creating a workflow with gate nodes for human interaction, including wait_for_input, approve, and sleep operations. Shows how to implement approval steps and timeouts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import wait_for_input, approve, sleep\n\n@workflow\ndef mainwf(a: int):\n    x = t1(a=a)\n    s1 = wait_for_input(\"signal-name\", timeout=timedelta(hours=1), expected_type=bool)\n    s2 = wait_for_input(\"signal name 2\", timeout=timedelta(hours=2), expected_type=int)\n    z = t1(a=5)\n    zzz = sleep(timedelta(seconds=10))\n    y = t2(a=s2)\n    q = t2(a=approve(y, \"approvalfory\", timeout=timedelta(hours=2)))\n    x >> s1\n    s1 >> z\n    z >> zzz\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Task with Basic GPU Resource Request in Flyte\nDESCRIPTION: Example of defining a task with a simple GPU resource request without specifying a particular GPU accelerator type. This uses the Resources class to request one GPU unit.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.10.6.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(limits=Resources(gpu=\"1\"))\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Flyte Execution\nDESCRIPTION: This snippet demonstrates how to terminate a single Flyte execution using its name with flytectl. It includes the domain and project flags to specify the Flyte environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nflytectl delete execution c6a51x2l9e  -d development  -p flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Testing with Mock Secrets\nDESCRIPTION: Using helper methods to mock secrets for testing by exporting them as environment variables.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # When testing locally, you can export the secret as an environment variable\n    # before calling the workflow:\n    import os\n\n    os.environ[Secret(SECRET_GROUP, SECRET_NAME).env_var] = \"local-secret-value\"\n    os.environ[Secret(SECRET_GROUP_MULTI, \"username\").env_var] = \"local-username\"\n    os.environ[Secret(SECRET_GROUP_MULTI, \"password\").env_var] = \"local-password\"\n\n    print(f\"Running {__file__} main...\")\n    print(f\"Running my_secret_workflow() = {my_secret_workflow()}\")\n\n```\n\n----------------------------------------\n\nTITLE: Running Flyte StructuredDataset with NumPy Locally\nDESCRIPTION: This code shows how to execute the Flyte workflow with NumPy arrays locally. It creates a workflow that chains the generate and consume tasks, then executes the workflow using Flyte's local execution engine.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef numpy_wf() -> np.ndarray:\n    array = generate_numpy_array()\n    return consume_numpy_array(array=array)\n\n\nif __name__ == \"__main__\":\n    print(f\"Running {__file__} main...\")\n    print(numpy_wf())\n```\n\n----------------------------------------\n\nTITLE: Configuring Resources in YAML for Flyte Agent\nDESCRIPTION: This YAML snippet shows the default resource configuration for the Flyte agent deployment. It specifies CPU, memory, and ephemeral storage limits and requests.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyteagent/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: \"500m\"\n    ephemeral-storage: \"200Mi\"\n    memory: \"300Mi\"\n  requests:\n    cpu: \"500m\"\n    ephemeral-storage: \"200Mi\"\n    memory: \"200Mi\"\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Launch Plan Schedule with FlyteRemote\nDESCRIPTION: Uses the FlyteRemote client to deactivate a previously activated launch plan schedule.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlaunchplan_id = remote.fetch_launch_plan(name=\"process_data_lp\").id\nremote.client.update_launch_plan(launchplan_id, \"INACTIVE\")\n```\n\n----------------------------------------\n\nTITLE: Character Frequency List Update Task\nDESCRIPTION: Task that updates a list tracking character frequencies in a string\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef update_list(freq_list: List[int], index: int) -> List[int]:\n    if index != -1:\n        freq_list[index] += 1\n    return freq_list\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Workflows Implementation\nDESCRIPTION: Demonstrates how to nest eager workflows within other eager workflows for complex execution patterns.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@eager\nasync def eager_subworkflow(x: int) -> int:\n    return await add_one(x=x)\n\n@eager\nasync def eager_workflow_with_subworkflow(x: int) -> int:\n    return await eager_subworkflow(x=x)\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular Map Tasks in Python with Flytekit\nDESCRIPTION: Example of implementing regular map tasks in Flyte using the standard map_task import from flytekit. This shows how to create a workflow that applies a task to each element in a list.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.9.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom flytekit import map_task, task, workflow\n\n@task\ndef t(a: int) -> int:\n    ...\n\n@workflow\ndef wf(xs: List[int]) -> List[int]:\n    return map_task(t)(a=xs)\n```\n\n----------------------------------------\n\nTITLE: Character Index Calculator Task\nDESCRIPTION: Task that calculates the index of a character where A-Z/a-z corresponds to 0-25\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/dynamic_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef return_index(c: str) -> int:\n    if c.isalpha():\n        return ord(c.lower()) - ord('a')\n    return -1\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks to Workflow\nDESCRIPTION: Adds and configures tasks to be executed within the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 16-19\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Conditionals in Flyte Workflow\nDESCRIPTION: This snippet demonstrates how to nest conditional sections within other conditional sections in a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef nested_conditions(radius: float) -> float:\n    return (\n        conditional(\"outer\")\n        .if_((radius >= 0) & (radius <= 1))\n        .then(\n            conditional(\"inner\")\n            .if_(radius < 0.5)\n            .then(calculate_circle_circumference(radius=radius))\n            .else_()\n            .then(calculate_circle_area(radius=radius))\n        )\n        .else_()\n        .then(calculate_circle_area(radius=radius))\n    )\n```\n\n----------------------------------------\n\nTITLE: Visualizing Service Authentication using OAuth2 with FlyteAdmin's Authorization Server\nDESCRIPTION: This Mermaid sequence diagram shows the OAuth2 authentication flow for services like Propeller authenticating with FlyteAdmin's built-in Authorization Server. It demonstrates the process of obtaining and using an access token for service-to-service communication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_appendix.rst#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n%%{config: { 'fontFamily': 'Menlo', 'fontSize': 10, 'fontWeight': 100} }%%\n    autonumber\n    Propeller->>+Admin: /token?client_creds&scope=https://admin/\n    Admin->>-Propeller: access_token\n    Propeller->>+Admin: /list_projects?token=access_token\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Log Links in YAML\nDESCRIPTION: Example showing how to configure dynamic log links in flytepropeller that can use template variables provided during task registration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  task_logs:\n    plugins:\n      logs:\n        dynamic-log-links:\n        - log_link_a:  # Name of the dynamic log link\n            displayName: Custom dynamic log link A\n            templateUris: 'https://some-service.com/{{ .taskConfig.custom_param }}'\n```\n\n----------------------------------------\n\nTITLE: Building Custom Image with ImageSpec\nDESCRIPTION: Creates a custom image specification for Flyte execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/dataclass.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncustom_image = ImageSpec(\n    name=\"custom-image\",\n    packages=[\"pandas\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Struct with Pflag Tags in Go\nDESCRIPTION: Example showing how to define a struct with pflag tags to customize the generated CLI flags. The tags allow specifying default values and usage strings for each field.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytestdlib/cli/pflags/readme.rst#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype TestType struct {\n    StringValue   string         `json:\"str\" pflag:\"\\\"hello world\\\",\\\"life is short\\\"\"`\n    BoolValue     bool           `json:\"bl\" pflag:\",This is a bool value that will default to false.\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WaitForObjectStoreFile Task Plugin Class\nDESCRIPTION: Complete implementation of the WaitForObjectStoreFile class that extends PythonFunctionTask to create a sensor plugin that waits for files in object storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/user_container_task_plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass WaitForObjectStoreFile(PythonFunctionTask):\n    \"\"\"\n    This is a class that demonstrates how to create a task that actually uses the python function\n    to execute arbitrary python code before returning something. This can be quite powerful because it\n    can do user-defined things without a formal plugin. Obviously more complicated use cases should create\n    a new plugin, but in this case we have a simple \"wait for file\" use case\n    \"\"\"\n\n    def __init__(self, name: str = None, task_config: Optional[Any] = None, task_function: Optional[Callable] = None, **kwargs):\n        task_function = task_function or (lambda path: path)\n        super(WaitForObjectStoreFile, self).__init__(\n            task_type=\"wait-for-file\",\n            name=name,\n            task_config=task_config,\n            task_function=task_function,\n            **kwargs,\n        )\n\n    def execute(self, **kwargs) -> Any:\n        \"\"\"\n        This function is called from the users process. In flyte backward compatibility mode - this is also\n        called from the container\n        \"\"\"\n        ctx = context_manager.FlyteContext.current_context()\n        # Function to check if a given path exists\n        def check_file(path: str) -> bool:\n            return ctx.file_access.exists(path)\n\n        # Get the path from the kwargs\n        p = kwargs[\"path\"]\n\n        # Check if file exists - if not raise an exception which will cause a retry, else return\n        if not check_file(p):\n            raise Exception(f\"File not found {p}!\")\n        # Return the same path\n        return p\n```\n\n----------------------------------------\n\nTITLE: Executing a Flyte Pipeline with Resource Overrides Locally\nDESCRIPTION: Shows how to execute a workflow that uses dynamically overridden resource requirements in a local environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(my_pipeline(x=[1, 2, 3, 4, 5, 2, 3], y=10))\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Registry\nDESCRIPTION: Commands to login to a container registry (Github in this example) and push the built Docker image. Required to make the container accessible to Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker login ghcr.io\ndocker push <tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Task Type Mappings in YAML\nDESCRIPTION: Configuration for mapping task types to their default plugin implementations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_201\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency and Success Ratio for Map Tasks in Python\nDESCRIPTION: This snippet shows how to set concurrency and minimum success ratio for map tasks, which affects parallel execution and failure tolerance.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef map_workflow_with_additional_params(data: list[int] = [10, 12, 11, 10, 13, 12, 100, 11, 12, 10]) -> list[typing.Optional[bool]]:\n    return map_task(detect_anomalies, concurrency=1, min_success_ratio=0.75)(data_point=data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Executions for a Specific Node using Flytectl CLI\nDESCRIPTION: This command fetches task execution details for a specific node in a Flyte execution with the '--nodeID' flag. It relies on Flyte environment setup and uses node IDs from node details. Outputs task execution information, supporting YAML or JSON formats.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development oeh94k9r2r --nodeID n0 -o yaml\n```\n\n----------------------------------------\n\nTITLE: Formatting Execution Output in JSON using Flytectl CLI\nDESCRIPTION: This command retrieves executions formatted in JSON using Flytectl CLI, providing a machine-readable output format with the '-o json' flag. Dependencies include Flyte project and domain configurations. Outputs execution details structured in JSON.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development -o json\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-backed ResourceManager in YAML\nDESCRIPTION: YAML configuration for enabling a Redis-backed ResourceManager in Flyte. This setup allows for external tracking and management of resource pool allocation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/resource_manager.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresourcemanager:\n   type: redis\n   resourceMaxQuota: 100\n   redis:\n     hostPaths:\n       - foo\n     hostKey: bar\n     maxRetries: 0\n```\n\n----------------------------------------\n\nTITLE: Overriding Pod Template and Resources with with_overrides Method\nDESCRIPTION: Demonstrates how to override both resource limits and pod template configuration for a task when it's invoked in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef say_hello() -> str:\n    return \"Hello, World!\"\n\n@workflow\ndef hello_world_wf() -> str:\n    res = say_hello().with_overrides(limits=Resources(cpu=\"2\", mem=\"600Mi\"),pod_template=PodTemplate(\n        primary_container_name=\"primary-nelson\",\n        labels={\"lKeyA\": \"lValA\", \"lKeyB\": \"lValB\"},\n        annotations={\"aKeyA\": \"aValA\", \"aKeyB\": \"aValB\"},\n        pod_spec=V1PodSpec(\n            containers=[\n                V1Container(\n                    name=\"primary-nelson\",\n                    image=\"arbaobao/flyte-test-images:pythonpath5\",\n                    env=[V1EnvVar(name=\"eKeyC\", value=\"eValC\"), V1EnvVar(name=\"eKeyD\", value=\"eValD\")],\n                ),\n                V1Container(\n                    name=\"primary-nelson2\",\n                    image=\"arbaobao/flyte-test-images:pythonpath5\",\n                    env=[V1EnvVar(name=\"eKeyC\", value=\"eValC\"), V1EnvVar(name=\"eKeyD\", value=\"eValD\")],\n                ),\n            ],\n        )\n    ))\n    return res\n```\n\n----------------------------------------\n\nTITLE: Defining TaskExecutionEvent Message in Protobuf\nDESCRIPTION: Defines a message type for task execution events, including task identifiers, phases, timestamps, logs, and various metadata fields related to the task execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskExecutionEvent {\n  flyteidl.core.Identifier task_id = 1;\n  flyteidl.core.NodeExecutionIdentifier parent_node_execution_id = 2;\n  uint32 retry_attempt = 3;\n  flyteidl.core.TaskExecution.Phase phase = 4;\n  string producer_id = 5;\n  repeated flyteidl.core.TaskLog logs = 6;\n  google.protobuf.Timestamp occurred_at = 7;\n  string input_uri = 8;\n  string output_uri = 9;\n  flyteidl.core.ExecutionError error = 10;\n  flyteidl.core.LiteralMap output_data = 11;\n  google.protobuf.Struct custom_info = 12;\n  uint32 phase_version = 13;\n  string reason = 14;\n  string task_type = 15;\n  flyteidl.event.TaskExecutionMetadata metadata = 16;\n  int32 event_version = 17;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for FlyteDirectory Usage in Python\nDESCRIPTION: This snippet shows the necessary imports for working with FlyteDirectory and related Flyte functionalities.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytedirectory.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nimport os\nimport typing\n\nfrom flytekit import task, workflow, kwtypes\nfrom flytekit.types.directory import FlyteDirectory\nfrom flytekit.types.file import FlyteFile\nfrom typing import List, Dict\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Configuration for Databricks Plugin\nDESCRIPTION: YAML configuration for enabling Databricks plugin in Flyte helm chart\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/databricks.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - databricks: agent-service\n```\n\n----------------------------------------\n\nTITLE: Executing a Flyte Workflow Locally\nDESCRIPTION: Shows how to call a Flyte workflow locally with sample data, passing a list of floating-point values from 1 to 10 as input.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstandard_scale_workflow(values=[float(i) for i in range(1, 11)])\n```\n\n----------------------------------------\n\nTITLE: Binding Task Outputs to Partials in Map Tasks in Python\nDESCRIPTION: This snippet shows how to bind the outputs of a task to partials in a map task workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef get_price_and_discount() -> (float, float):\n    return 100.0, 0.2\n\n\n@workflow\ndef map_workflow_partial_with_task_output(quantities: list[int]) -> list[float]:\n    price, discount = get_price_and_discount()\n    return map_task(partial(multi_input_task, price=price, discount=discount))(quantity=quantities)\n```\n\n----------------------------------------\n\nTITLE: Streaming File Copy using FlyteFile in Python\nDESCRIPTION: Demonstrates how to use the new fsspec streaming capabilities in Flytekit to copy a file. This feature is marked as experimental.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.5.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef copy_file(ff: FlyteFile) -> FlyteFile:\n    new_file = FlyteFile.new_remote_file(ff.remote_path)\n    with ff.open(\"r\", cache_type=\"simplecache\", cache_options={}) as r:\n        with new_file.open(\"w\") as w:\n            w.write(r.read())\n    return new_file\n```\n\n----------------------------------------\n\nTITLE: Creating Task Execution with Flytectl\nDESCRIPTION: Command to create a task execution using the specification file\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create execution -p flytesnacks -d development --execFile exec_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Setup and Teardown Tasks in Flyte\nDESCRIPTION: This code defines two tasks for setup and teardown operations, using MagicMock to simulate an external service. It demonstrates accessing the execution_id from Flytekit's context.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom unittest.mock import MagicMock\n\nexternal_service = MagicMock()\n\n@task\ndef setup() -> None:\n    ctx = FlyteContext.current_context()\n    external_service.initialize(execution_id=ctx.execution_id)\n    print(\"Setup complete\")\n\n@task\ndef teardown() -> None:\n    external_service.finish()\n    print(\"Teardown complete\")\n```\n\n----------------------------------------\n\nTITLE: Creating Launch Plan with Fixed Inputs\nDESCRIPTION: Defining a launch plan with locked input values that cannot be overridden\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfixed_lp = LaunchPlan.create(\n    \"fixed_lp\", hello_world_wf, fixed_inputs={\"name\": \"flyte\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Sorting and Limiting Execution Results in Flytectl CLI\nDESCRIPTION: This command retrieves executions with specified sorting and limiting options using Flytectl CLI. Prerequisites include a Flyte project and domain. Important parameters are '--filter.sortBy' for sorting field, '--filter.limit' for result limits. It returns executions sorted by 'created_at'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development --filter.sortBy=created_at --filter.limit=1 --filter.asc\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Templates in YAML\nDESCRIPTION: Example YAML configuration showing how to set up log templates with customizable display names and template URIs that link to AWS CloudWatch logs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntask_logs:\n  plugins:\n    logs:\n      templates:\n        - displayName: <name-to-show>\n          templateUris:\n            - \"https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logEventViewer:group=/flyte-production/kubernetes;stream=var.log.containers.{{.podName}}_{{.namespace}}_{{.containerName}}-{{.containerId}}.log\"\n            - \"https://some-other-source/home?region=us-east-1#logEventViewer:group=/flyte-production/kubernetes;stream=var.log.containers.{{.podName}}_{{.namespace}}_{{.containerName}}-{{.containerId}}.log\"\n          messageFormat: 0 # this parameter is optional, but use 0 for \"unknown\", 1 for \"csv\", or 2 for \"json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Executions Across Pages in Flytectl CLI\nDESCRIPTION: This command retrieves a specific page of executions using Flytectl CLI. Dependencies are properly set Flyte project and domain. Key parameters are '--filter.limit' for page size and '--filter.page' for the page number. It allows pagination through execution results.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get -p flytesnacks -d development execution --filter.limit=10 --filter.page=2\n```\n\n----------------------------------------\n\nTITLE: Typical Reference Launch Plan Implementation in Python\nDESCRIPTION: This code shows a more typical implementation of a reference launch plan where a specific version is used instead of a version placeholder. It references a launch plan with a concrete Git hash or semantic version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/reference_launch_plans.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@reference_launch_plan(\n    project=\"flytesnacks\",\n    domain=\"development\",\n    name=\"core.flyte_basics.files.normalize_csv_file\",\n    version=\"d06cebcfbeabc02b545eefa13a01c6ca992940c8\", # If using GIT for versioning OR 0.16.0, if semver\n)\ndef normalize_csv_file(...):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Composing Flyte Workflow with Decorated Tasks\nDESCRIPTION: This snippet defines a Flyte workflow that calls both t1 and t2 tasks, demonstrating the use of decorated tasks within a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef decorating_task_wf(x: int) -> int:\n    t1_out = t1(x=x)\n    t2_out = t2(x=t1_out)\n    return t2_out\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Settings in YAML\nDESCRIPTION: Defines queue configuration for workflow processing in Flyte propeller, including batch size, intervals, and rate limiting.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_162\n\nLANGUAGE: yaml\nCODE:\n```\nbatch-size: -1\nbatching-interval: 1s\nqueue:\n  base-delay: 0s\n  capacity: 10000\n  max-delay: 1m0s\n  rate: 1000\n  type: maxof\nsub-queue:\n  base-delay: 0s\n  capacity: 10000\n  max-delay: 0s\n  rate: 1000\n  type: bucket\ntype: batch\n```\n\n----------------------------------------\n\nTITLE: Running the Sensor Plugin Workflow Locally\nDESCRIPTION: Demonstrates how to execute the workflow with the custom sensor plugin in a local environment for testing.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/user_container_task_plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # Fly a local workflow execution.\n    # If the path exists, the execute will return immediately\n    # If the path does not exist, then the execute will raises exceptions until it times out\n    wait_and_run(path=\"s3://my-bucket/file.txt\")\n```\n\n----------------------------------------\n\nTITLE: Executing a Locally Imported Task in Python\nDESCRIPTION: Executes a task that is imported directly in the local Python environment using the FlyteRemote client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom workflows.example import say_hello\n\nexecution = remote.execute(say_hello, inputs={\"name\": \"Kermit\"})\n```\n\n----------------------------------------\n\nTITLE: Data Shuffling Task Implementation\nDESCRIPTION: Task that reads a file from object store, shuffles the data using pandas, and saves it back as a FlyteFile.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/data_management.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task()\ndef task_read_and_shuffle_file(input_file: FlyteFile) -> FlyteFile:\n    \"\"\"\n    Reads the input file as a DataFrame, shuffles the rows, and writes the shuffled DataFrame to a new file.\n    \"\"\"\n    input_file.download()\n    df = pd.read_csv(input_file.path)\n\n    # Shuffle the DataFrame rows\n    shuffled_df = df.sample(frac=1).reset_index(drop=True)\n\n    output_file_path = \"data_shuffle.csv\"\n    shuffled_df.to_csv(output_file_path, index=False)\n\n    return FlyteFile(output_file_path)\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Types in Flyte Workflow\nDESCRIPTION: This workflow showcases how to work with combinations of lists, dictionaries, and dataclasses in a Flyte workflow, demonstrating nested attribute access.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ComplexType:\n    fruits: List[str]\n    details: Dict[str, str]\n    favorite: Fruit\n\n\n@task\ndef complex_task() -> ComplexType:\n    return ComplexType(\n        fruits=[\"apple\", \"banana\", \"cherry\"],\n        details={\"origin\": \"tropical\", \"taste\": \"sweet\"},\n        favorite=Fruit(name=\"mango\", color=\"yellow\"),\n    )\n\n\n@workflow\ndef complex_workflow():\n    complex_output = complex_task()\n    print_message(message=complex_output.fruits[1])\n    print_message(message=complex_output.details[\"origin\"])\n    print_message(message=complex_output.favorite.name)\n```\n\n----------------------------------------\n\nTITLE: Workflow Using Dataclass Tasks\nDESCRIPTION: Defines a workflow that combines multiple tasks using dataclasses for data transfer.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/dataclass.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef dataclass_wf() -> (Datum, ComplexityOutput):\n    x = generate_input()\n    y = generate_input()\n    d = add(x=x, y=y)\n    c = complex_task()\n    return d, c\n```\n\n----------------------------------------\n\nTITLE: Configuring FlyteAdmin for AWS Batch Job Queues in YAML\nDESCRIPTION: This YAML configuration informs FlyteAdmin about AWS Batch job queues and how to distribute load among them. It defines execution queues and workflow configs for matching tasks to queues.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/batch.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflyteadmin:\n  roleNameKey: \"eks.amazonaws.com/role-arn\"\nqueues:\n  executionQueues:\n    - dynamic: \"tutorial\"\n      attributes:\n        - default\n  workflowConfigs:\n    - tags:\n        - default\n```\n\n----------------------------------------\n\nTITLE: Building Image without Registering Workflow using pyflyte\nDESCRIPTION: This command shows how to build an image using pyflyte without registering the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npyflyte build --remote image_spec.py wf\n```\n\n----------------------------------------\n\nTITLE: Workflow Definition with Pydantic BaseModel\nDESCRIPTION: Defines a Flyte workflow that orchestrates tasks using Pydantic BaseModel for data handling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pydantic_basemodel.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef basemodel_wf(x: int, y: int) -> str:\n    d = return_datum(x=x, y=y)\n    s1 = consume_datum(d=d)\n    d2 = return_complex_types()\n    s2 = consume_complex_types(d=d2)\n    return s2\n```\n\n----------------------------------------\n\nTITLE: Chaining Subworkflows in Flyte using Python\nDESCRIPTION: This snippet shows how to chain subworkflows in Flyte. It defines two subworkflows (sw0, sw1) and chains them in a main workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/chaining_flyte_entities.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef sw0():\n    t0() >> t1()\n\n\n@workflow\ndef sw1():\n    t1() >> t2()\n\n\n@workflow\ndef chain_workflows_wf():\n    sw0() >> sw1()\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret with Multiple Keys\nDESCRIPTION: Command to create a Kubernetes secret with multiple key-value pairs under the same secret group.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic user-info \\\n    --from-literal=user_secret=mysecret \\\n    --from-literal=username=my_username \\\n    --from-literal=password=my_password\n```\n\n----------------------------------------\n\nTITLE: Task Configuration Override Example in Python\nDESCRIPTION: Demonstrates how to register tasks with runtime override capabilities, allowing specific task nodes to be configurable at runtime using `.with_runtime_override()`\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3553-config-override.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef t1():\n  ...\n\n@task\ndef t2():\n  ...\n\n@workflow\ndef wf():\n  t1() # this task node cannot be overridden\n  t1().with_runtime_override(\"task-yee\") # can be overridden under the name \"task-yee\"\n  t2().with_runtime_override(\"task-ketan\") # can be overridden under the name \"task-ketan\"\n  t3() # this task node cannot be overridden\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayNode Map Tasks in Python with Flytekit Experimental\nDESCRIPTION: Example of using the experimental ArrayNode map tasks as a drop-in replacement for regular map tasks. The only difference is importing map_task from flytekit.experimental instead of flytekit.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.9.0.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom flytekit import task, workflow\nfrom flytekit.experimental import map_task\n\n@task\ndef t(a: int) -> int:\n    ...\n\n@workflow\ndef wf(xs: List[int]) -> List[int]:\n    return map_task(t)(a=xs)\n```\n\n----------------------------------------\n\nTITLE: Creating Launch Plan with Default Inputs\nDESCRIPTION: Defining a launch plan with specified default input values\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlp = LaunchPlan.create(\n    \"my_custom_lp\", hello_world_wf, default_inputs={\"name\": \"flyte\"}\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Remotely Fetched Launch Plan in Python\nDESCRIPTION: Fetches a launch plan from the Flyte backend and executes it using the FlyteRemote client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nflyte_launchplan = remote.fetch_launch_plan(name=\"workflows.example.launch_plan\")\nexecution = remote.execute(flyte_launchplan, inputs={})\n```\n\n----------------------------------------\n\nTITLE: Workflow Success Path State Diagram\nDESCRIPTION: Mermaid flowchart showing the basic state transitions from Ready to Success for a workflow with a single task and node.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/state_machine.rst#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n     id1(( ))\n     id1 --> Ready\n     Ready --> Running\n     subgraph Running\n     id2(( ))\n     id2 --> NodeQueued\n     NodeQueued --> NodeRunning\n     subgraph NodeRunning\n     id3(( ))\n     id3 --> TaskQueued\n     TaskQueued --> TaskRunning\n     TaskRunning --> TaskSuccess\n     end\n     TaskSuccess --> NodeSuccess\n     end\n     NodeSuccess --> Success\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow Execution Config with flytectl\nDESCRIPTION: Command to update workflow execution configuration using flytectl. This can be defined at project-domain or project-domain-workflow levels.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update workflow-execution-config\n```\n\n----------------------------------------\n\nTITLE: Streaming Decks Example\nDESCRIPTION: Example of using streaming decks to visualize deck updates in real-time.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.deck import Deck\n\n@task(enable_deck=True)\ndef t_deck():\n    Deck.publish()\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Project Updates in YAML\nDESCRIPTION: This YAML file defines updates for a Flyte project, including its ID, name, labels, and description.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nid: \"my-project-id\"\nname: \"my-project-name\"\nlabels:\n   values:\n     app: my-app\ndescription: \"A wonderful project\"\n```\n\n----------------------------------------\n\nTITLE: New Top-Level Model Imports in FlyteKit\nDESCRIPTION: This code block lists the new models that have been added to the top-level of the flytekit package. These classes can now be imported directly from flytekit, improving import consistency and safety.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.18.1.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n- Annotations, AuthRole, Labels\n- WorkflowExecutionPhase\n- Literal, LiteralType, Scalar, BlobType, Blob, BlobMetadata\n```\n\n----------------------------------------\n\nTITLE: Get Workflows in JSON Format\nDESCRIPTION: Retrieves all workflows within the specified project and domain and outputs them in JSON format. The `-o json` flag specifies the output format. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development -o json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Resource Attributes with flytectl\nDESCRIPTION: Command to fetch and verify individual project-domain task resource attributes using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get task-resource-attribute -p flyteexamples -d development\n```\n\n----------------------------------------\n\nTITLE: Adding Labels and Annotations to Flyte Launch Plans in Python\nDESCRIPTION: This example demonstrates how to create a Flyte launch plan with custom labels and annotations. Labels are used as identifying attributes (like 'myexecutionlabel'), while annotations provide non-identifying metadata (like 'region').\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/workflow_labels_and_annotations.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Labels, Annotations\n\n@workflow\nclass MyWorkflow(object):\n    ...\n\nmy_launch_plan = MyWorkflow.create_launch_plan(\n    labels=Labels({\"myexecutionlabel\": \"bar\", ...}),\n    annotations=Annotations({\"region\": \"SEA\", ...}),\n    ...\n)\n\nmy_launch_plan.execute(...)\n```\n\n----------------------------------------\n\nTITLE: Register files with custom SourceUploadPath\nDESCRIPTION: Registers files and uploads source code to a specified S3 path, overriding the default location.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks  --version v2 --SourceUploadPath=\\\"s3://dummy/fast\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Execution Inspection with Flytectl\nDESCRIPTION: Retrieves basic execution details for a specific execution ID in Flyte using Flytectl CLI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/inspecting_executions.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution -p flytesnacks -d development <execid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Athena Plugin in Flyte Core YAML\nDESCRIPTION: YAML configuration for enabling the Athena plugin in Flyte core. It specifies the enabled plugins and default task types within a configmap structure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/athena.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - athena\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          athena: athena\n```\n\n----------------------------------------\n\nTITLE: Enabling Flyte Decks with the @task Decorator\nDESCRIPTION: Basic example showing how to enable Flyte decks by setting enable_deck=True in the @task decorator. This allows the task to render HTML reports for its inputs and outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/visualizing_task_input_and_output.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom flytekit import task, workflow\n\n\n@task(enable_deck=True)\ndef iris_data() -> pd.DataFrame:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Partial Functions for Default Arguments in Flyte Tasks\nDESCRIPTION: Demonstrates how to use functools.partial to provide default or constant values to task parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\n\n@task\ndef linear(x: float, m: float, b: float) -> float:\n    return m * x + b\n\npartial_linear = partial(linear, m=2.0, b=1.0)\n\n@workflow\ndef partial_wf(x: float) -> float:\n    return partial_linear(x=x)\n```\n\n----------------------------------------\n\nTITLE: Updating Execution Queue Attributes with flytectl\nDESCRIPTION: Use flytectl to update execution queue attributes for customizing execution placement.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-queue-attribute\n```\n\n----------------------------------------\n\nTITLE: Flytectl CLI Options\nDESCRIPTION: Command line interface options for Flytectl, including configurations for console, files, logging, telemetry, storage, and output formatting. These options allow users to customize the behavior of Flytectl when interacting with Flyte resources.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--console.endpoint string                      Endpoint of console,  if different than flyte admin\n-d, --domain string                                Specifies the Flyte project's domain.\n--files.archive                                Pass in archive file either an http link or local path.\n--files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n--files.continueOnError                        Continue on error when registering files.\n--files.destinationDirectory string            Location of source code in container.\n--files.dryRun                                 Execute command without making any modifications.\n--files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n--files.force                                  Force use of version number on entities registered with flyte.\n--files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n--files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n--files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n--files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n--files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n-i, --interactive                                  Set this flag to use an interactive CLI\n--logger.formatter.type string                 Sets logging format type. (default \"json\")\n--logger.level int                             Sets the minimum logging level. (default 3)\n--logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n--logger.show-source                           Includes source code location in logs.\n--otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n--otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n--otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n--otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n--otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n--otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n-p, --project string                               Specifies the Flyte project.\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Launch Plan Overrides for Dynamic Workflow Caching\nDESCRIPTION: Shows how to use launch plan overrides to add caching to dynamically spawned workflow executions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/nested_parallelization.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\\ndef increment(num: int) -> int:\\n    return num + 1\\n\\n@workflow\\ndef child(num: int) -> int:\\n    return increment(num=num)\\n\\nchild_lp = LaunchPlan.get_or_create(child)\\n\\n@dynamic\\ndef spawn(n: int) -> List[int]: \\n    l = []\\n    for i in [1,2,3,4,5]:\\n        l.append(child_lp(num=i).with_overrides(cache=True, cache_version=\\\"1.0.0\\\"))\\n    # you can also pass l to another task if you want\\n    return l\n```\n\n----------------------------------------\n\nTITLE: Partial Task with Fixed Parameter in Python\nDESCRIPTION: Illustrates how to use functools.partial to 'freeze' some task arguments, allowing for partial task execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.5.0.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef t1(a: int, b: str) -> str:\n    return f\"{a} -> {b}\"\n\nt1_fixed_b = functools.partial(t1, b=\"hello\")\n\n@workflow\ndef wf(a: int) -> str:\n    return t1_fixed_b(a=a)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Plugin for Flyte Binary\nDESCRIPTION: YAML configuration for enabling the Ray plugin in Flyte binary deployment. This sets up the necessary task plugins, default task types, and Ray-specific settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - ray\n        default-for-task-types:\n          - container: container\n          - container_array: k8s-array\n          - ray: ray\n    plugins:\n     ray:\n       // Shutdown Ray cluster after 1 hour of inactivity\n       ttlSecondsAfterFinished: 3600\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks in JSON format\nDESCRIPTION: Retrieves all tasks within a Flyte project and domain and outputs them in JSON format.  The `-o json` flag sets the output format to JSON.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development -o json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks within project and domain\nDESCRIPTION: Retrieves all tasks within a specified Flyte project and domain using the `flytectl get task` command. This is a basic usage example to fetch all tasks in a given environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development\"\n```\n\n----------------------------------------\n\nTITLE: Defining Python Types Dataclass\nDESCRIPTION: Creates a dataclass 'Datum' with basic Python types including integer, string, and dictionary.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/dataclass.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Datum:\n    \"\"\"A sample dataclass with Python native types.\"\"\"\n    x: int\n    y: str\n    z: Dict[str, str]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Sampler in Flyte\nDESCRIPTION: Default configuration for the OpenTelemetry sampler used for the tracer. Sets the parent sampler to 'always' and uses a trace ID ratio of 0.01.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nparentSampler: always\ntraceIdRatio: 0.01\n```\n\n----------------------------------------\n\nTITLE: Visualizing CLI Authentication with FlyteAdmin's Authorization Server using OAuth2-PKCE\nDESCRIPTION: This Mermaid sequence diagram demonstrates the OAuth2-PKCE authentication flow for CLI users with FlyteAdmin's built-in Authorization Server. It shows the process of obtaining client configuration, initiating the authorization flow, and exchanging the authorization code for an access token.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_appendix.rst#2025-04-16_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n%%{config: { 'fontFamily': 'Menlo', 'fontSize': 10, 'fontWeight': 100} }%%\n    autonumber\n    User->>+Cli: flytectl list-projects\n    Cli->>+Admin: admin/client-config\n    Admin->>-Cli: Client_id=<abc>, ...\n    Cli->>+Browser: /oauth2/authorize?pkce&code_challenge,client_id,scope\n    Browser->>+Admin: /oauth2/authorize?pkce...\n    Admin->>-Browser: 302 idp.com/login\n    Note over Browser,Admin: The prior OpenID Connect flow\n    Browser->>+Admin: admin/logged_in\n    Note over Browser,Admin: Potentially show custom consent screen\n    Admin->>-Browser: localhost/?authCode=<abc>\n    Browser->>+Cli: localhost/authCode=<abc>\n    Cli->>+Admin: /token?code,code_verifier\n    Admin->>-Cli: access_token\n    Cli->>+Admin: /projects/ + access_token\n    Admin->>-Cli: project1, project2\n```\n\n----------------------------------------\n\nTITLE: Importing TensorFlow and Flyte Libraries for TensorFlow Types\nDESCRIPTION: This snippet shows the necessary imports for working with TensorFlow types in Flyte, including TensorFlow, Flyte core components, and specific TensorFlow-related Flyte types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/tensorflow_type.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tensorflow as tf\nfrom flytekit import task, workflow\nfrom flytekit.types.file import TFRecordFile\nfrom flytekit.types.directory import TFRecordsDirectory\nfrom flytekit.experimental import TensorFlowModelTransformer\nfrom flytekit.models.literals import BlobType\nfrom flytekit.types.schema import FlyteSchema\nfrom dataclasses_json import DataClassJsonMixin\nfrom dataclasses import dataclass\nfrom typing import Optional\n```\n\n----------------------------------------\n\nTITLE: Defining a Secret for Vault in Python\nDESCRIPTION: This code snippet shows how to define a Secret object in Python, specifying the group (Vault path), key (secret key in KV engine or arbitrary name for database engine), and group version (KV engine version or \"db\" for database). The Secret object is used to retrieve secrets from a Vault backend within Flyte workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsecret = Secret(\n    group=\"<Vault path>\",\n    key=\"<Secret key for KV engine>\",\n    group_version=\"<kv1|kv2|db>\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Flyte Project using flytectl\nDESCRIPTION: This snippet demonstrates how to create a Flyte project using the `flytectl create project` command and a project.yaml file. The command parses the project.yaml file and creates the project based on the configurations specified in the file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n flytectl create project --file project.yaml \n\n```\n\n----------------------------------------\n\nTITLE: Building Databricks Agent Docker Image\nDESCRIPTION: Dockerfile configuration for building a Databricks agent image with Python 3.9 and required dependencies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9-slim-bookworm\n\nRUN apt-get update && apt-get install build-essential git -y\nRUN pip install prometheus-client grpcio-health-checking\nRUN pip install --no-cache-dir -U flytekit \\\n    git+https://github.com/flyteorg/flytekit.git@<gitsha>#subdirectory=plugins/flytekit-spark \\\n    && apt-get clean autoclean \\\n    && apt-get autoremove --yes \\\n    && rm -rf /var/lib/{apt,dpkg,cache,log}/ \\\n    && :\n\nCMD pyflyte serve agent --port 8000\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks for Workflow Composition in Flyte\nDESCRIPTION: This snippet defines two simple tasks that will be used in the workflow. One task squares a number, and the other multiplies two numbers.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef square(x: float) -> float:\n    return x * x\n\n@task\ndef double(x: float) -> float:\n    return 2 * x\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom StructuredDataset Plugin for NumPy\nDESCRIPTION: Define a custom encoder for NumPy arrays to be used with StructuredDataset.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass NumpyEncodingHandler(StructuredDatasetEncoder):\n    def __init__(self):\n        super().__init__(np.ndarray, None, None)\n\n    def encode(self, df: np.ndarray, dest: str) -> str:\n        df_pd = pd.DataFrame(df)\n        dest = os.path.join(dest, \"numpy.parquet\")\n        df_pd.to_parquet(dest)\n        return dest\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Flyte Version in Sandbox\nDESCRIPTION: This snippet shows how to run a specific version of Flyte in the sandbox using the `--version` flag. Flytectl sandbox only supports Flyte versions available in the Github release.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start  --version=v0.14.0\"\n```\n\n----------------------------------------\n\nTITLE: Executing Named Outputs Workflow\nDESCRIPTION: Example of running the workflow locally to demonstrate the named outputs functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/named_outputs.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(f\"Running linear_regression_wf() {linear_regression_wf()}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Mocking Utilities in Flytekit\nDESCRIPTION: Import necessary modules for task mocking and workflow creation in Flytekit. These imports provide tools for creating mock tasks and workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/mocking_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom flytekit.testing import task_mock, patch\n```\n\n----------------------------------------\n\nTITLE: Complex PodTemplate Example with K8s Config\nDESCRIPTION: Python task definition with more complex PodTemplate configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    pod_template=PodTemplate(\n        primary_container_name=\"primary\",\n        labels={\n          \"label_1\": \"value-compile\",\n          \"label_2\": \"value-compile\",\n        },\n        annotations={\n          \"annotation_1\": \"value-compile\",\n          \"annotation_2\": \"value-compile\",\n        },\n        pod_spec=V1PodSpec(\n            containers=[\n                V1Container(\n                    name=\"primary\",\n                    image=\"a.b.c/image:v1\",\n                    command=\"cmd\",\n                    args=[],\n                ),\n            ],\n            host_network=True,\n        )\n    )\n)\ndef t1() -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Task Retries in Python\nDESCRIPTION: Example showing how to define user retries for a Flyte task using the @task decorator. The retries parameter specifies how many times the task should be retried on application-level failures.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/tasks.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(retries=3)  # Sets user retry budget to 3\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Get Workflows in YAML Format\nDESCRIPTION: Retrieves all workflows within the specified project and domain and outputs them in YAML format. The `-o yaml` flag specifies the output format. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development -o yaml\"\n```\n\n----------------------------------------\n\nTITLE: Setting Databricks Entrypoint File in Flyte\nDESCRIPTION: Configures the URL of the entrypoint file for Databricks tasks. Supports DBFS and cloud storage locations like S3, GCS, ADLS.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_125\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining workflow to execute ContainerTasks\nDESCRIPTION: Creates a workflow that executes the ContainerTasks for each language, calculating the area of an ellipse and returning the results.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef wf(radius1: float = 2.0, radius2: float = 3.0):\n    area_shell = calculate_ellipse_area_shell(radius1=radius1, radius2=radius2)\n    area_python = calculate_ellipse_area_python(radius1=radius1, radius2=radius2)\n    area_r = calculate_ellipse_area_r(radius1=radius1, radius2=radius2)\n    area_haskell = calculate_ellipse_area_haskell(radius1=radius1, radius2=radius2)\n    area_julia = calculate_ellipse_area_julia(radius1=radius1, radius2=radius2)\n    return (\n        area_shell,\n        area_python,\n        area_r,\n        area_haskell,\n        area_julia,\n    )\n```\n\n----------------------------------------\n\nTITLE: Visualize Workflow Graph in DOT Format\nDESCRIPTION: Retrieves a specific workflow and outputs its graph in DOT format. The workflow name is provided as a command-line argument, the `--latest` flag retrieves the latest version, and the `-o dot` flag specifies the DOT output format. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development  core.flyte_basics.basic_workflow.my_wf --latest -o dot\"\n```\n\n----------------------------------------\n\nTITLE: Updating Flyte Project Characteristics Using Command-Line Flags\nDESCRIPTION: This command updates a Flyte project's description and labels using command-line flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project -p my-project-id --description \"A wonderful project\"  --labels app=my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Service in Flyte YAML Configuration\nDESCRIPTION: YAML configuration for setting up the agent service with endpoint, security settings, and timeout configurations for different task operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_development_cluster.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  # Registered Task Types\n  agent-service:\n    defaultAgent:\n      endpoint: \"localhost:8000\" # your grpc agent server port\n      insecure: true\n      timeouts:\n        # CreateTask, GetTask and DeleteTask are for async agents.\n        # ExecuteTaskSync is for sync agents.\n        CreateTask: 5s\n        GetTask: 5s\n        DeleteTask: 5s\n        ExecuteTaskSync: 10s\n      defaultTimeout: 10s\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Flyte Task Caching\nDESCRIPTION: Import statements for the necessary libraries to use task caching in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/caching.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom typing import Tuple\n\nfrom flytekit import task\n```\n\n----------------------------------------\n\nTITLE: Activating a Launch Plan in Flyte using flytectl\nDESCRIPTION: This command activates a launch plan, which activates the scheduled job associated with it. It specifies the project, domain, launch plan name, and version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan -p flytesnacks -d development core.control_flow.merge_sort.merge_sort --version v1 --activate\n```\n\n----------------------------------------\n\nTITLE: FlytePropeller Configuration for Agent Deployment\nDESCRIPTION: YAML configuration for FlytePropeller to route task requests to the appropriate agent services, including canary deployments and timeouts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/developing_agents.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  agent-service:\n    # By default, all requests will be sent to the default agent.\n    defaultAgent:\n      endpoint: \"k8s://flyteagent.flyte:8000\"\n      insecure: true\n      timeouts:\n        # CreateTask, GetTask and DeleteTask are for async agents.\n        # ExecuteTaskSync is for sync agents.\n        CreateTask: 5s\n        GetTask: 5s\n        DeleteTask: 5s\n        ExecuteTaskSync: 10s\n      defaultTimeout: 10s\n    agents:\n      custom_agent:\n        endpoint: \"dns:///custom-flyteagent.flyte.svc.cluster.local:8000\"\n        insecure: false\n        defaultServiceConfig: '{\"loadBalancingConfig\": [{\"round_robin\":{}}]}'\n        timeouts:\n          GetTask: 5s\n        defaultTimeout: 10s\n    agentForTaskTypes:\n      # It will override the default agent for custom_task, which means propeller will send the request to this agent.\n      - custom_task: custom_agent\n```\n\n----------------------------------------\n\nTITLE: MMCloud Agent Service Configuration\nDESCRIPTION: YAML configuration for MMCloud agent service settings including endpoint and task type mappings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  agent-service:\n    agents:\n      mmcloud-agent:\n        endpoint: <AGENT_ENDPOINT>\n        insecure: true\n    agentForTaskTypes:\n    - mmcloud_task: mmcloud-agent\n```\n\n----------------------------------------\n\nTITLE: Running Checkpointing Example Locally in Flyte\nDESCRIPTION: This snippet demonstrates how to run the checkpointing example locally. Note that the local checkpoint is not utilized here because retries are not supported in local execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/intratask_checkpoints.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(f\"Running {__file__} main...\")\n    print(f\"Running checkpointing_example(n_iterations=10)\")\n    checkpointing_example(n_iterations=10)\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Plugin for Flyte Binary\nDESCRIPTION: YAML configuration for enabling the BigQuery plugin in Flyte binary implementation. Specifies the enabled plugins list and default task types, including the BigQuery query job task.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/bigquery.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - bigquery\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - bigquery_query_job_task: bigquery\n```\n\n----------------------------------------\n\nTITLE: Get Workflows with Filters\nDESCRIPTION: Retrieves all workflows that match the specified filter. The `--filter.fieldSelector` flag is used to specify the filter expression. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development  --filter.fieldSelector=\\\"workflow.name=k8s_spark.dataframe_passing.my_smart_schema\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version in ImageSpec\nDESCRIPTION: This snippet shows how to specify a different Python version when building the image using ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimage_spec = ImageSpec(\n  packages=[\"pandas\"],\n  python_version=\"3.9\",\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Outputs in Intercept Task\nDESCRIPTION: Task definition that returns a NamedTuple with a custom-named 'intercept' output parameter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/named_outputs.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef intercept() -> NamedTuple(\"Outputs\", intercept=float):\n    \"\"\"Generate an intercept for a linear regression\"\"\"\n    # Generate an intercept value\n    b = 0.1\n\n    # Return it as a NamedTuple\n    return NamedTuple(\"Outputs\", intercept=float)(intercept=b)\n```\n\n----------------------------------------\n\nTITLE: Using the WaitForObjectStoreFile Plugin in a Workflow\nDESCRIPTION: Example workflow that uses the WaitForObjectStoreFile sensor plugin to wait for a file and then performs additional operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/user_container_task_plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef do_next(path: str) -> int:\n    return len(path)\n\n\n# Create the sensor\nsensor = WaitForObjectStoreFile(metadata=TaskMetadata(retries=10))\n\n\n@workflow\ndef wait_and_run(path: str) -> int:\n    # To demonstrate how to create outputs, we will also\n    # return the output from the sensor. The output will be the\n    # same as the path\n    path = sensor(path=path)\n    return do_next(path=path)\n```\n\n----------------------------------------\n\nTITLE: Specifying Generic Data Types - YAML\nDESCRIPTION: This snippet shows how to specify generic data types within an execution spec YAML when creating or running an execution in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: \"\"\ninputs:\n  \"x\": {}\n  \"y\": {}\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntask: core.type_system.custom_objects.add\nversion: v3\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workflow Execution Config Using Flytectl\nDESCRIPTION: This Flytectl command outputs the workflow execution configuration for a specified project and domain. Key parameters include the project name and domain. This command is useful for fetching configuration details in JSON format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow-execution-config.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"project\": \"flytesnacks\",\n\t\"domain\": \"development\",\n\t\"max_parallelism\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Values in Flyte Workflow\nDESCRIPTION: This workflow shows how to access values from a dictionary output by specifying the key in a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef dict_task() -> Dict[str, str]:\n    return {\"fruit\": \"banana\", \"vegetable\": \"carrot\"}\n\n\n@workflow\ndef dict_workflow():\n    food = dict_task()\n    print_message(message=food[\"fruit\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Log Template URI in Flyte\nDESCRIPTION: Sets the template URI used when building Kubernetes log links for Flyte tasks, supporting variable substitution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_154\n\nLANGUAGE: yaml\nCODE:\n```\nhttp://localhost:30082/#!/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace\n  }}\n```\n\n----------------------------------------\n\nTITLE: Importing New Models in FlyteKit\nDESCRIPTION: This snippet demonstrates the new top-level imports for various models in FlyteKit. These imports are now available directly from the flytekit package, providing a safer and more consistent way to access these models.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.18.1.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Labels, Annotations\n```\n\n----------------------------------------\n\nTITLE: Setting Workflow Output\nDESCRIPTION: Defines the workflow output configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 23\n```\n\n----------------------------------------\n\nTITLE: Running a Databricks Task Locally with S3 Storage Config\nDESCRIPTION: Command to execute a Databricks agent task locally using pyflyte. It specifies a raw-output-data-prefix pointing to S3 storage, which is required for the Spark job to access input data from the designated bucket.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_python_environment.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --raw-output-data-prefix s3://my-s3-bucket/databricks databricks_task.py hello_spark\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets as Files in Flyte Tasks\nDESCRIPTION: Demonstrates how to mount Kubernetes secrets as files in a Flyte task using the secret_requests parameter with FILE mount type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task(secret_requests=[Secret(..., env_var=\"MY_TOKEN_PATH\", mount_requirement=Secret.MountType.FILE)]\ndef hello():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring External Auth in Flyte Helm Values (flyte-binary)\nDESCRIPTION: YAML configuration for enabling external authentication in Flyte's Helm values file. This snippet includes settings for OIDC, internal client credentials, and authorized URIs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  enabled: true\n  oidc:\n    baseUrl: https://dev-<org-id>.okta.com/oauth2/<auth-server-id>\n    clientId: <oidc-clientId>\n    clientSecret: <oidc-clientSecret>\n  internal:\n    clientId: <flytepropeller-client-id>\n    clientSecret: '<flytepropeller-client-secret-non-encoded>'\n    clientSecretHash: <-flytepropeller-secret-bcrypt-hash>\n  authorizedUris:\n  - https://<your-flyte-deployment-URL>\n```\n\n----------------------------------------\n\nTITLE: Creating a Project with Command Line Arguments in Flytectl\nDESCRIPTION: This command creates a project in Flyte using specified parameters such as name, id, description, and labels. It supports command line arguments to set these values directly.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create project --name flytesnacks --id flytesnacks --description \"flytesnacks description\" --labels app=flyte\n```\n\n----------------------------------------\n\nTITLE: Using Annotated Types with Custom Renderers\nDESCRIPTION: Shows how to use the Annotated type to override the default renderer for pandas.DataFrame. This example applies the custom DataFrameSummaryRenderer to display statistical summaries instead of raw data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/visualizing_task_input_and_output.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from typing import Annotated\nexcept ImportError:\n    from typing_extensions import Annotated\n\n\n@task(enable_deck=True)\ndef iris_data(\n    sample_frac: Optional[float] = None,\n    random_state: Optional[int] = None,\n) -> Annotated[pd.DataFrame, DataFrameSummaryRenderer()]:\n    data = px.data.iris()\n    if sample_frac is not None:\n        data = data.sample(frac=sample_frac, random_state=random_state)\n\n    md_text = (\n        \"# Iris Dataset\\n\"\n        \"This task loads the iris dataset using the  `plotly` package.\"\n    )\n    flytekit.current_context().default_deck.append(MarkdownRenderer().to_html(md_text))\n    flytekit.Deck(\"box plot\", BoxRenderer(\"sepal_length\").to_html(data))\n    return data\n```\n\n----------------------------------------\n\nTITLE: Dataset Structure Definition for Task Instance in Flyte\nDESCRIPTION: Defines the structure of a Dataset object that represents a task instance in Flyte's DataCatalog. The Dataset contains project details, domain, task name, and versioning information.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/catalog.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nDataset {\n       project: Flyte project the task was registered in\n       domain: Flyte domain for the task execution\n       name: flyte_task-<taskName>\n       version: <cache_version>-<hash(input params)>-<hash(output params)>\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieve a specific task with filters\nDESCRIPTION: Retrieves a specific task using filters, targeting a task by name and further refining the selection based on version and creation timestamp using `--filter.fieldSelector`.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development k8s_spark.pyspark_pi.print_every_time --filter.fieldSelector=\\\"task.version=v1,created_at>=2021-05-24T21:43:12.325335Z\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Running a Flyte Workflow on a Remote Cluster\nDESCRIPTION: Command to run a Flyte workflow on a remote cluster, specifying the project, domain, and optional parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote -p my-project -d development example.py wf --name Ada\n```\n\n----------------------------------------\n\nTITLE: Normalizing All Files in FlyteDirectory using Python\nDESCRIPTION: This task accepts a FlyteDirectory, metadata about column names, and columns to normalize, then processes all files in the directory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytedirectory.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef normalize_all_files(\n    csv_dir: FlyteDirectory,\n    column_metadata: Dict[str, List[str]],\n    normalize_columns: List[str],\n) -> FlyteDirectory:\n    for file_name in os.listdir(csv_dir.name):\n        file_path = os.path.join(csv_dir.name, file_name)\n        normalize_columns(file_path, column_metadata[file_name], normalize_columns)\n    return csv_dir\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerTask for calculating ellipse area in Julia\nDESCRIPTION: Creates a ContainerTask that uses a Julia script to calculate the area of an ellipse. It specifies input/output directories, image, and command to run.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncalculate_ellipse_area_julia = ContainerTask(\n    name=\"calculate-ellipse-area-julia\",\n    input_data_dir=\"/var/inputs\",\n    output_data_dir=\"/var/outputs\",\n    inputs=kwtypes(radius1=float, radius2=float),\n    outputs=kwtypes(area=float),\n    image=\"ghcr.io/flyteorg/flytecookbook:raw_containers-latest\",\n    command=[\"julia\", \"calc.jl\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Idempotent Executions - Command\nDESCRIPTION: This command demonstrates how to create an idempotent execution by specifying a custom name, ensuring that the execution ID remains unique within the specified project domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nflytectl create execution --recover ffb31066a0f8b4d52b77 -p flytesnacks -d development custom_name\n```\n\n----------------------------------------\n\nTITLE: Executing Workflow Locally\nDESCRIPTION: Demonstrates how to execute the workflow in a local environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 27-28\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding of Duration Type in Protocol Buffers\nDESCRIPTION: Explains how the Duration type is encoded in JSON format, using seconds and fractional seconds. It provides examples for different durations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n\"3s\"\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"3.000000001s\"\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"3.000001s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Client - YAML Configuration\nDESCRIPTION: Sample YAML configuration file for the Flyte client showing admin endpoints and logger settings. This configuration is generated using flytectl and stored in ~/.flyte/config.yaml.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_simple.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  # For GRPC endpoints you might want to use dns:///flyte.myexample.com\n  endpoint: dns:///localhost:8088\n  authType: Pkce\n  insecure: true\nlogger:\n  show-source: true\n  level: 0\n```\n\n----------------------------------------\n\nTITLE: Activating Workflow in Flyte CLI\nDESCRIPTION: This command activates a previously archived workflow in Flyte. It specifies the project, domain, and workflow name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-meta.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update workflow-meta -p flytesnacks -d development core.control_flow.merge_sort.merge_sort --activate\n```\n\n----------------------------------------\n\nTITLE: Visualizing Service Authentication using OAuth2 with External Authorization Server\nDESCRIPTION: This Mermaid sequence diagram illustrates the OAuth2 authentication flow for services like Propeller authenticating with an external Authorization Server. It shows the process of obtaining an access token from the external server and using it with FlyteAdmin.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_appendix.rst#2025-04-16_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n%%{config: { 'fontFamily': 'Menlo', 'fontSize': 10, 'fontWeight': 100} }%%\n    autonumber\n    Propeller->>+External Authorization Server: /token?client_creds&scope=https://admin/\n    External Authorization Server->>-Propeller: access_token\n    Propeller->>+Admin: /list_projects?token=access_token\n```\n\n----------------------------------------\n\nTITLE: Configuring Databricks Task in Flyte\nDESCRIPTION: Example of configuring a Databricks task using the Spark plugin. Shows how to set Spark and Databricks-specific configurations including memory, cores, cluster settings and AWS attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekitplugins.spark import Databricks\n@task(\n    task_config=Databricks(\n        spark_conf={\n            \"spark.driver.memory\": \"1000M\",\n            \"spark.executor.memory\": \"1000M\",\n            \"spark.executor.cores\": \"1\",\n            \"spark.executor.instances\": \"2\",\n            \"spark.driver.cores\": \"1\",\n        },\n        databricks_conf={\n            \"run_name\": \"flytekit databricks plugin example\",\n            \"new_cluster\": {\n                \"spark_version\": \"11.0.x-scala2.12\",\n                \"node_type_id\": \"r3.xlarge\",\n                \"aws_attributes\": {\n                    \"availability\": \"ON_DEMAND\",\n                    \"instance_profile_arn\": \"arn:aws:iam::1237657460:instance-profile/databricks-s3-role\",\n                },\n                \"num_workers\": 4,\n            },\n            \"timeout_seconds\": 3600,\n            \"max_retries\": 1,\n        }\n    ))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution Cluster Labels using flytectl - JSON Output\nDESCRIPTION: This example demonstrates how to retrieve the execution cluster label for a given project and domain using the flytectl get execution-cluster-label command. The command outputs the label in JSON format, showcasing the project, domain, and label value. flytectl must be installed and configured to connect to the appropriate Flyte server.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-cluster-label.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"value\":\"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Launch Plan Input Specification\nDESCRIPTION: Example YAML configuration showing how to specify input parameters for the workflow execution\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_launch_plans.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n....\ninputs:\n    name: \"adam\"\n....\n```\n\n----------------------------------------\n\nTITLE: Configuring Slurm Agent in Flyte Helm Chart\nDESCRIPTION: This YAML configuration enables the Slurm agent in the Flyte Helm chart. It should be added to the relevant YAML file used for Helm chart configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - slurm_fn: agent-service\n      - slurm: agent-service\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic BaseModel with Python Types\nDESCRIPTION: Creates a Pydantic BaseModel class named Datum with integer, string, and dictionary data types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pydantic_basemodel.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Datum(BaseModel):\n    x: int\n    y: int\n    z: str\n    metadata: Dict[str, str]\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Plugin for Flyte Core\nDESCRIPTION: YAML configuration for enabling the MPI plugin in Flyte core deployment. This sets up the necessary task plugins and default task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - mpi\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          mpi: mpi\n```\n\n----------------------------------------\n\nTITLE: Fetching Cluster Resource Attributes with JSON Output in Flytectl\nDESCRIPTION: This snippet demonstrates how to fetch cluster resource attributes using `flytectl` for a specified project and domain, with the output format in JSON. No additional dependencies are required other than having `flytectl` installed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_cluster-resource-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"attributes\":{\"buzz\":\"lightyear\",\"foo\":\"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Another Square Function Task in Flyte\nDESCRIPTION: Creates another task that computes the square of a number, with specific CPU and memory resource requests and limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    requests=Resources(cpu=\"1\", mem=\"200Mi\"),\n    limits=Resources(cpu=\"2\", mem=\"350Mi\"),\n)\ndef square_1(x: int) -> int:\n    \"\"\"Computes the square of the given integer with resource constraints.\"\"\"\n    return x * x\n```\n\n----------------------------------------\n\nTITLE: Starting a Flyte Agent gRPC Server\nDESCRIPTION: Command to start the Flyte agent gRPC server using pyflyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_development_cluster.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte serve agent\n```\n\n----------------------------------------\n\nTITLE: Adding Databricks Access Token to FlytePropeller\nDESCRIPTION: YAML configuration for adding Databricks access token as an environment variable in the Flyte deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n- name: POD_NAME\n  valueFrom:\n  fieldRef:\n    apiVersion: v1\n    fieldPath: metadata.name\n- name: POD_NAMESPACE\n  valueFrom:\n  fieldRef:\n    apiVersion: v1\n    fieldPath: metadata.namespace\n- name: FLYTE_SECRET_FLYTE_DATABRICKS_API_TOKEN\n  value: <ACCESS_TOKEN>\nimage: flyte-binary:sandbox\n```\n\n----------------------------------------\n\nTITLE: Managing Flyte Tasks with Flytectl\nDESCRIPTION: Demonstrates various commands for managing Flyte tasks, including retrieving task information and generating execution templates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl get tasks [task-name] [-o yaml | -o json | default -o table] [--filters...] [--sort-by...] [--selectors...]\n$ flytectl get task task-name --execution-template -o YAML\n```\n\n----------------------------------------\n\nTITLE: Writing Workflow Execution Config to a YAML File Using Flytectl\nDESCRIPTION: This command extracts workflow execution configuration data and writes it to a specified YAML file. The example demonstrates creating a YAML file named 'wec.yaml' containing the project's domain and parallelism settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow-execution-config.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nmax_parallelism: 5\n\n```\n\n----------------------------------------\n\nTITLE: Defining ContainerTask for calculating ellipse area in Python\nDESCRIPTION: Creates a ContainerTask that uses a Python script to calculate the area of an ellipse. It specifies input/output directories, image, and command to run.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncalculate_ellipse_area_python = ContainerTask(\n    name=\"calculate-ellipse-area-python\",\n    input_data_dir=\"/var/inputs\",\n    output_data_dir=\"/var/outputs\",\n    inputs=kwtypes(radius1=float, radius2=float),\n    outputs=kwtypes(area=float),\n    image=\"ghcr.io/flyteorg/flytecookbook:raw_containers-latest\",\n    command=[\"python3\", \"calc.py\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Type in Protocol Buffers\nDESCRIPTION: Defines a Duration message type representing a signed fixed-length time span in seconds and nanoseconds. Includes JSON mapping rules and example usage patterns.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Duration {\n  int64 seconds = 1;\n  int32 nanos = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Execution Retrieval using Flytectl CLI\nDESCRIPTION: This command retrieves executions with specified filters for phase and duration using Flytectl CLI. Requires a Flyte setup with execution data. Parameters include '--filter.fieldSelector' for filter expressions. The result is a filtered list of executions in table format by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development --filter.fieldSelector=\\\"execution.phase in (FAILED;SUCCEEDED),execution.duration<200\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic SQL Task for Mocking\nDESCRIPTION: Define a generic SQL task that is not connected to any datastore and must be mocked. This task cannot run locally and requires mocking for testing purposes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/mocking_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef sql(query: str) -> str:\n    return 'select from table'\n```\n\n----------------------------------------\n\nTITLE: Initializing Flytectl Config for Remote Cluster with Secure Connection\nDESCRIPTION: This command initializes a Flytectl configuration file for a remote Flyte cluster, ensuring a secure connection to the specified host. It is essential for users looking to connect to a remote Flyte instance for deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_init.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl config init --host=flyte.myexample.com\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Flyte Dataclass Usage\nDESCRIPTION: Required imports for working with dataclasses in Flyte, including typing utilities and Flyte-specific imports.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/dataclass.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom typing import Dict\n\nfrom flytekit import ImageSpec, task, workflow\nfrom flytekit.types.directory import FlyteDirectory\nfrom flytekit.types.file import FlyteFile\nfrom flytekit.types.structured import StructuredDataset\nfrom pandas import DataFrame\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Executing a Flyte Workflow in Python\nDESCRIPTION: Shows how to run a Flyte workflow by calling it as a Python function with the necessary inputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/workflows.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = simple_wf(x=[-3, 0, 3], y=[7, 4, -2])\nprint(f\"Slope: {result[0]}\\nIntercept: {result[1]}\")\n```\n\n----------------------------------------\n\nTITLE: Full AdminServer OAuth2 Configuration\nDESCRIPTION: Complete YAML configuration for Flyte admin server including OAuth2 settings, client configurations, and security parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  adminServer:\n    server:\n      httpPort: 8088\n      grpc:\n        port: 8089\n      security:\n        secure: false\n        useAuth: true\n        allowCors: true\n        allowedOrigins:\n          - \"*\"\n        allowedHeaders:\n          - \"Content-Type\"\n    auth:\n      appAuth:\n        thirdPartyConfig:\n          flyteClient:\n            clientId: flytectl\n            redirectUri: http://localhost:53593/callback\n            scopes:\n              - offline\n              - all\n        selfAuthServer:\n          staticClients:\n            flyte-cli:\n              id: flyte-cli\n              redirect_uris:\n              - http://localhost:53593/callback\n              - http://localhost:12345/callback\n              grant_types:\n                - refresh_token\n                - authorization_code\n              response_types:\n                - code\n                - token\n              scopes:\n                - all\n                - offline\n                - access_token\n              public: true\n            flytectl:\n              id: flytectl\n              redirect_uris:\n                - http://localhost:53593/callback\n                - http://localhost:12345/callback\n              grant_types:\n                - refresh_token\n                - authorization_code\n              response_types:\n                - code\n                - token\n              scopes:\n                - all\n                - offline\n                - access_token\n              public: true\n            flytepropeller:\n              id: flytepropeller\n              client_secret: \"<bcrypt-hash>\"\n              redirect_uris:\n                - http://localhost:3846/callback\n              grant_types:\n                - refresh_token\n                - client_credentials\n              response_types:\n                - token\n              scopes:\n                - all\n                - offline\n                - access_token\n              public: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Project from a Definition File in Flytectl\nDESCRIPTION: This command allows the user to create a project by referencing a YAML definition file, which contains project-specific metadata like id, name, and labels. The YAML structure is predefined and must adhere to the specifications of Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create project --file project.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\nid: \"project-unique-id\"\nname: \"Name\"\nlabels:\n   values:\n     app: flyte\ndescription: \"Some description for the project.\"\n```\n\n----------------------------------------\n\nTITLE: Streaming FlyteDirectory in Python\nDESCRIPTION: This example demonstrates how to stream a FlyteDirectory input, walk through its contents, and copy files to another FlyteDirectory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytedirectory.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef stream_directory(\n    input_directory: Annotated[FlyteDirectory, Stream.stream],\n    output_directory: Annotated[FlyteDirectory, Stream.stream],\n) -> int:\n    files_copied = 0\n    for root, _, files in os.walk(input_directory.remote_source):\n        for file in files:\n            source_path = os.path.join(root, file)\n            dest_path = os.path.join(output_directory.remote_source, file)\n            output_directory.remote_source.fs.copy(source_path, dest_path)\n            files_copied += 1\n    return files_copied\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Shard Strategy in YAML for Flyte Workflows\nDESCRIPTION: This YAML configuration shows how to set up the 'Domain' shard strategy for Flyte workflows. It defines a shard for the 'production' domain and a wildcard shard for all other domains.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  core:\n    # a configuration example using the \"domain\" shard type\n    manager:\n      # pod and scanning configuration redacted\n      # ...\n      shard:\n        type: Domain        # use the \"Domain\" shard strategy\n        per-shard-mapping:  # a list of per shard mappings - one shard is created for each element\n          - ids:            # the list of ids to be managed by the first shard\n            - production\n          - ids:            # the list of ids to be managed by the second shard\n            - \"*\"           # use the wildcard to manage all ids not managed by other shards\n```\n\n----------------------------------------\n\nTITLE: ArtifactTag Structure for Caching in Flyte\nDESCRIPTION: Defines the structure of ArtifactTag used to associate cached executions with their input values. The tag contains a unique hash of the input values for task execution lookup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/catalog.rst#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nArtifactTag {\n       Name: flyte_cached-<unique hash of the input values>\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow-Specific Execution Queue Attributes\nDESCRIPTION: Command to update execution queue attributes for a specific workflow using the flytectl CLI tool. It uses the era.yaml file containing workflow-specific attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-queue-attribute.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-queue-attribute --attrFile era.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Launch Plan Activation Status in Flyte\nDESCRIPTION: Command to check if a launch plan was successfully activated by listing all launch plans in a specific project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/schedules.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Defining Task Resource Attributes in YAML\nDESCRIPTION: Example YAML file (tra.yaml) for customizing task resource attributes for a project-domain combination. Specifies CPU and memory defaults and limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject: flyteexamples\ndomain: development\ndefaults:\n    cpu: \"1\"\n    memory: 150Mi\nlimits:\n    cpu: \"2\"\n    memory: 450Mi\n```\n\n----------------------------------------\n\nTITLE: Flytekit CI Environment Configuration\nDESCRIPTION: Bash environment variable configuration for Flytekit authentication in CI environments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport FLYTE_CREDENTIALS_CLIENT_ID=<client_id>\nexport FLYTE_CREDENTIALS_CLIENT_SECRET=<client_secret>\nexport FLYTE_CREDENTIALS_AUTH_MODE=basic\nexport FLYTE_CREDENTIALS_AUTHORIZATION_METADATA_KEY=<header name>\nexport FLYTE_CREDENTIALS_OAUTH_SCOPES=<idp defined scopes>\nexport FLYTE_PLATFORM_AUTH=True\n```\n\n----------------------------------------\n\nTITLE: Top-Frame Renderer Example\nDESCRIPTION: Example of using Top-frame renderer to display DataFrame as an HTML table.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True)\ndef top_frame_renderer():\n    from sklearn.datasets import load_iris\n    iris = load_iris()\n    df = pd.DataFrame(iris.data, columns=[\"sepal length\", \"sepal width\", \"petal length\", \"petal width\"])\n    top_frame = renderer.TopFrameRenderer()\n    top_frame.append(df)\n    return df\n```\n\n----------------------------------------\n\nTITLE: Compute Duration from datetime.timedelta in Python\nDESCRIPTION: This Python code uses a timedelta object to compute a Duration, converting the days and minutes into the appropriate Duration equivalent.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ntd = datetime.timedelta(days=3, minutes=10)\nduration = Duration()\nduration.FromTimedelta(td)\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC Role for K8s Service Agent\nDESCRIPTION: YAML configuration for the RBAC role that grants necessary permissions to the K8s service agent\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: flyte-flyteagent-role\n  namespace: flyte\n  labels:\n    app.kubernetes.io/name: flyteagent\n    app.kubernetes.io/instance: flyte\nrules:\n- apiGroups:\n      - apps\n  resources:\n    - statefulsets\n    - statefulsets/status\n    - statefulsets/scale\n    - statefulsets/finalizers\n  verbs:\n    - get\n    - list\n    - watch\n    - create\n    - update\n    - delete\n    - patch\n- apiGroups:\n  - \"\"\n  resources:\n  - pods\n  - configmaps\n  - serviceaccounts\n  - secrets\n  - pods/exec\n  - pods/log\n  - pods/status\n  - services\n  verbs:\n  - '*'\n```\n\n----------------------------------------\n\nTITLE: Activating a Flyte Execution using flytectl\nDESCRIPTION: This command activates a Flyte execution, making it visible in the CLI and UI. It requires specifying the project, domain, and execution ID.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution -p flytesnacks -d development  oeh94k9r2r --activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte BigQuery Plugin\nDESCRIPTION: Default configuration for the Flyte BigQuery plugin. Includes settings for Google token source, resource constraints, and web API configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\ngoogleTokenSource:\n  gke-task-workload-identity:\n    remoteClusterConfig:\n      auth:\n        caCertPath: \"\"\n        tokenPath: \"\"\n      enabled: false\n      endpoint: \"\"\n      name: \"\"\n  type: default\nresourceConstraints:\n  NamespaceScopeResourceConstraint:\n    Value: 50\n  ProjectScopeResourceConstraint:\n    Value: 100\nwebApi:\n  caching:\n    maxSystemFailures: 5\n    resyncInterval: 30s\n    size: 500000\n    workers: 10\n  readRateLimiter:\n    burst: 100\n    qps: 10\n  resourceMeta: null\n  resourceQuotas:\n    default: 1000\n  writeRateLimiter:\n    burst: 100\n    qps: 10\n```\n\n----------------------------------------\n\nTITLE: Azure AD Authentication Configuration for Flyte Core\nDESCRIPTION: YAML configuration for setting up Azure AD authentication in Flyte Core, including client credentials, admin endpoints, and OpenID Connect settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  adminOauthClientCredentials:\n    enabled: true\n    clientSecret: <client secret>\n    clientId: <client id>\n---\nconfigmap:\n  admin:\n    admin:\n      endpoint: <admin endpoint>\n      insecure: true\n      clientId: <client id>\n      clientSecretLocation: /etc/secrets/client_secret\n      scopes:\n      - api://<client id>/.default\n      useAudienceFromAdmin: true\n---\nconfigmap:\n  adminServer:\n    auth:\n      appAuth:\n        authServerType: External\n        externalAuthServer:\n          baseUrl: https://login.microsoftonline.com/<tenant id>/v2.0/\n          metadataUrl: .well-known/openid-configuration\n          AllowedAudience:\n          - api://<client id>\n        thirdPartyConfig:\n          flyteClient:\n            clientId: <client id>\n            redirectUri: http://localhost:53593/callback\n            scopes:\n            - api://<client id>/<custom-scope>\n      userAuth:\n        openId:\n        baseUrl: https://login.microsoftonline.com/<tenant id>/v2.0\n        scopes:\n        - openid\n        - profile\n        clientId: <client id>\n```\n\n----------------------------------------\n\nTITLE: Archiving Flyte Project Using YAML File\nDESCRIPTION: This command archives a Flyte project using a YAML file and the --archive flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project --file update.yaml --archive\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Multiple Secret Keys\nDESCRIPTION: Declaring constants for multiple secret keys that are grouped under the same secret in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nSECRET_GROUP_MULTI = \"user-info\"\nSECRET_KEYS = [\"username\", \"password\"]\n```\n\n----------------------------------------\n\nTITLE: Editing Flyte Sandbox Config for Airflow Agent (YAML)\nDESCRIPTION: This YAML snippet shows the configuration changes needed to enable the Airflow agent in the Flyte sandbox config. It adds the 'agent-service' plugin and sets it as the default for Airflow tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/airflow.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - airflow: agent-service\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Kafka Cloud Events in YAML\nDESCRIPTION: YAML configuration for enabling cloud events with Apache Kafka in FlyteAdmin. Specifies broker address, event types, and topic name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/cloud_event.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncloud_events.yaml: |\n  cloudEvents:\n    enable: true\n    kafka:\n      brokers: 127.0.0.1:9092\n    eventsPublisher:\n      eventTypes:\n      - all\n      topicName: myTopic\n    type: kafka\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Plan Concurrency in Python\nDESCRIPTION: Example showing how to create a launch plan with concurrency controls using the LaunchPlan.get_or_create method. Allows specifying maximum concurrent executions and concurrency policy.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/RFC-5659-execution-concurrency.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_lp = LaunchPlan.get_or_create(\n    name=\"my_serial_lp\",\n    workflow=my_wf,\n    ...\n    concurrency=Concurrency(\n        max=1,  # defines how many executions with this launch plan can run in parallel\n        policy=ConcurrencyPolicy.WAIT  # defines the policy to apply when the max concurrency is reached\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release (Bash)\nDESCRIPTION: This Bash command upgrades the Flyte core Helm release with the new configuration for the Airflow agent. It uses the 'values-override.yaml' file to apply the configuration changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/airflow.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Register files and continue on error\nDESCRIPTION: Registers files and continues execution even if errors occur during registration, including version conflicts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError\"\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Resource Attributes in YAML\nDESCRIPTION: Example YAML file (cra.yaml) for customizing cluster resource attributes for a project-domain combination. Specifies CPU quota and memory quota.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flyteexamples\nattributes:\n    projectQuotaCpu: \"1000\"\n    projectQuotaMemory: 5Ti\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Override Using flytectl Command\nDESCRIPTION: Command to update plugin overrides using the flytectl CLI tool and a YAML configuration file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_plugin-override.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update plugin-override --attrFile po.yaml\n```\n\n----------------------------------------\n\nTITLE: Overriding Task Resources with with_overrides Method\nDESCRIPTION: Shows how to dynamically override resource defaults for a task when it's invoked in a workflow using the with_overrides method.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef my_pipeline(x: typing.List[int]) -> int:\n    return square_1(x=count_unique_numbers_1(x=x)).with_overrides(limits=Resources(cpu=\"6\", mem=\"500Mi\"))\n```\n\n----------------------------------------\n\nTITLE: Running Eager Workflows with Pyflyte in Bash\nDESCRIPTION: Shows the command to execute an eager workflow using pyflyte, including project and domain specifications, and passing arguments to the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npyflyte --config <path/to/config.yaml> run \\\n --project <project> \\\n --domain <domain> \\\n --image <image> \\\n path/to/eager_workflows.py simple_eager_workflow --x 10\n```\n\n----------------------------------------\n\nTITLE: Creating Flyte Projects with Flytectl\nDESCRIPTION: Shows how to create a Flyte project using Flytectl, either by providing parameters directly or using a YAML file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl create projects --name \"Human readable Name of project\" --id project-id --labels key=value --labels key=value --description \"long string\"\nAlternatively\n$ flytectl create project -f project.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Resource Attributes with flytectl\nDESCRIPTION: Command to update cluster resource attributes for a project-domain combination using flytectl and the cra.yaml file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update cluster-resource-attribute --attrFile cra.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Task and Workflow with Enabled Decks\nDESCRIPTION: Demonstrates creating a task with Flyte decks enabled to process the Iris dataset. The task accepts parameters to sample the dataset, and is called by a simple workflow function.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/visualizing_task_input_and_output.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\nfrom typing import Optional\n\nfrom flytekit import task, workflow\n\n\n@task(enable_deck=True)\ndef iris_data(\n    sample_frac: Optional[float] = None,\n    random_state: Optional[int] = None,\n) -> pd.DataFrame:\n    data = px.data.iris()\n    if sample_frac is not None:\n        data = data.sample(frac=sample_frac, random_state=random_state)\n    return data\n\n\n@workflow\ndef wf(\n    sample_frac: Optional[float] = None,\n    random_state: Optional[int] = None,\n):\n    iris_data(sample_frac=sample_frac, random_state=random_state)\n```\n\n----------------------------------------\n\nTITLE: Defining SystemMetadata Fields\nDESCRIPTION: This snippet describes fields associated with the SystemMetadata which provides system-level metadata about an execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: SystemMetadata type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"execution_cluster\", \":ref:`ref_string`\", \"\", \"Which execution cluster this execution ran on.\"\n```\n\n----------------------------------------\n\nTITLE: Starting Sandbox with Environment Variables\nDESCRIPTION: This snippet demonstrates how to start the sandbox cluster and pass environment variables using the `--env` flag. This can be used to pass docker specific env variables or flyte specific env variables.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start --env FLYTE_TIMEOUT=700\"\n```\n\n----------------------------------------\n\nTITLE: Importing Flytekit for Task Cache Serializing in Python\nDESCRIPTION: This snippet shows the required import for using task cache serializing in Flyte. It imports the 'task' function from the flytekit module.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/cache_serializing.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task\n```\n\n----------------------------------------\n\nTITLE: Enabling Ingress for Flyte-binary on EKS using NGINX\nDESCRIPTION: YAML configuration to enable ingress for a Flyte-binary deployment on Amazon EKS using NGINX ingress controller. It specifies the ingress class and annotations for SSL redirect.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_production.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  create: true\n  host: flyte.example.com\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n  tls:\n    - secretName: flyte-tls\n      hosts:\n        - flyte.example.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Execution and Node Information in Flytectl CLI\nDESCRIPTION: This command fetches detailed execution information, including nodes and tasks, in a Flyte project and domain. Requires Flyte configurations. Use '--details' for in-depth information. The output defaults to a tree view format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development oeh94k9r2r --details\n```\n\n----------------------------------------\n\nTITLE: Executing a Flyte Task Locally with Sample Data\nDESCRIPTION: Demonstrates how to call a Flyte task like a regular Python function with keyword arguments, generating a sample list of floats from 1 to 10.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/tasks_workflows_and_launch_plans.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmean(values=[float(i) for i in range(1, 11)])\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Pub/Sub Cloud Events in YAML\nDESCRIPTION: YAML configuration for enabling cloud events with GCP Pub/Sub in FlyteAdmin. Specifies project ID, event types, and topic name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/cloud_event.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncloud_events.yaml: |\n  cloudEvents:\n    enable: true\n    gcp:\n      projectId: my-project-id\n    eventsPublisher:\n      eventTypes:\n      - all # or node, task, workflow\n      topicName: my-topic\n    type: gcp\n```\n\n----------------------------------------\n\nTITLE: WebAPI Plugin Configuration\nDESCRIPTION: Configuration settings for WebAPI plugin including resource quotas, rate limiters and caching parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\ndefault: 1000\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nburst: 100\nqps: 10\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nmaxSystemFailures: 5\nresyncInterval: 30s\nsize: 500000\nworkers: 10\n\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Sandbox Environment\nDESCRIPTION: Command to initialize a local Flyte sandbox environment for development and testing purposes using FlyteCTL.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl sandbox start\n```\n\n----------------------------------------\n\nTITLE: Installing FlyteCTL with Homebrew\nDESCRIPTION: Command to install FlyteCTL using Homebrew package manager. This is the recommended installation method for macOS users.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install flyteorg/homebrew-tap/flytectl\n```\n\n----------------------------------------\n\nTITLE: Running Flyte Workflow with Airflow Tasks Locally (Bash)\nDESCRIPTION: Command to execute a Flyte workflow that contains Airflow tasks in local environment. It sets the AIRFLOW_CONN_FS_DEFAULT environment variable for the FileSensor operator and uses pyflyte to run the workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/migrating_from_airflow_to_flyte.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAIRFLOW_CONN_FS_DEFAULT=\"/\" pyflyte run workflows.py airflow_wf\n```\n\n----------------------------------------\n\nTITLE: Executing Flyte Workflow with Airflow Tasks in Production (Bash)\nDESCRIPTION: Command to run a Flyte workflow containing Airflow tasks on a remote Flyte cluster. The --remote flag instructs pyflyte to execute the workflow on the configured Flyte backend instead of locally.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/migrating_from_airflow_to_flyte.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote workflows.py airflow_wf\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow-Specific Execution Cluster Label in YAML\nDESCRIPTION: Example YAML configuration for updating an execution cluster label for a specific workflow within a project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-cluster-label.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nworkflow: core.control_flow.merge_sort.merge_sort\nvalue: foo\n```\n\n----------------------------------------\n\nTITLE: Register files and override Destination dir\nDESCRIPTION: Registers files, continues on error, specifies a version, and overrides the destination directory for source code in the container.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError --version v2 --destinationDirectory \\\"/root\\\" \"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Superhero Class for Pickle Serialization\nDESCRIPTION: This code defines a custom 'Superhero' class that can be serialized to a pickle file by Flytekit. It demonstrates how user-defined complex types can be transferred between tasks as both input and output data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pickle_type.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Superhero:\n    def __init__(self, name: str, power: str):\n        self.name = name\n        self.power = power\n\n    def __repr__(self):\n        return f\"Superhero(name={self.name}, power={self.power})\"\n\n@task\ndef create_superhero(name: str, power: str) -> Superhero:\n    return Superhero(name=name, power=power)\n\n@task\ndef introduce_superhero(hero: Superhero) -> str:\n    return f\"Introducing {hero.name} with {hero.power} power!\"\n\n@workflow\ndef superhero_workflow(name: str, power: str) -> str:\n    hero = create_superhero(name=name, power=power)\n    return introduce_superhero(hero=hero)\n```\n\n----------------------------------------\n\nTITLE: Registering Flyte Package with flytectl\nDESCRIPTION: Uses flytectl to register the packaged workflows with a Flyte cluster. Specifies project, domain, archive file, and version information for the registration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflytectl register files \\\n    --project flytesnacks \\\n    --domain development \\\n    --archive flyte-package.tgz \\\n    --version \"$(git rev-parse HEAD)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Athena Plugin in Flyte Binary YAML\nDESCRIPTION: YAML configuration for enabling the Athena plugin in Flyte binary. It specifies the enabled plugins and default task types, including the Athena plugin.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/athena.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - athena\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - athena: athena\n```\n\n----------------------------------------\n\nTITLE: Executing Default Launch Plan\nDESCRIPTION: Running the default launch plan in local environment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndefault_lp(name=\"union\").execute()\n```\n\n----------------------------------------\n\nTITLE: Installing Flytectl on OSX\nDESCRIPTION: Commands for installing and upgrading Flytectl on OSX using Homebrew\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/overview.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install flyteorg/homebrew-tap/flytectl\n\nflytectl upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IAM Service Account for Data Plane\nDESCRIPTION: Bash command to create an IAM service account for the Flyte data plane using eksctl, associating it with a data plane EKS cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neksctl create iamserviceaccount --cluster=<dataplane1-cluster-name> --name=flytepropeller --role-only --role-name=flyte-dataplane-role --attach-policy-arn <ARN-of-your-IAM-policy> --approve --region <AWS-REGION-CODE> --namespace flyte\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow-Specific Execution Config with YAML in Flyte\nDESCRIPTION: This snippet demonstrates how to update a workflow execution config for a specific workflow within a project and domain. It includes settings for max parallelism, security context, and raw output data configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-execution-config.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nworkflow: core.control_flow.merge_sort.merge_sort\nmax_parallelism: 5\nsecurity_context:\n  run_as:\n    k8s_service_account: mergesortsa\nraw_output_data_config:\n    output_location_prefix: s3://example-data\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Log Links in Flyte\nDESCRIPTION: Configures log link settings for Kubernetes array jobs, including templates and service endpoints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_137\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  cloudwatch-enabled: false\n  cloudwatch-log-group: \"\"\n  cloudwatch-region: \"\"\n  cloudwatch-template-uri: \"\"\n  dynamic-log-links: null\n  gcp-project: \"\"\n  kubernetes-enabled: true\n  kubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName\n    }}/pod?namespace={{ .namespace }}\n  kubernetes-url: \"\"\n  stackdriver-enabled: false\n  stackdriver-logresourcename: \"\"\n  stackdriver-template-uri: \"\"\n  templates: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Agent in Flyte Core\nDESCRIPTION: YAML configuration to enable the sensor agent in Flyte core installation. This configuration adds the agent-service plugin and sets it as the default for sensor tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          sensor: agent-service\n```\n\n----------------------------------------\n\nTITLE: Deleting a Flyte Execution with flytectl\nDESCRIPTION: This snippet demonstrates how to delete a Flyte execution using the `flytectl delete` command.  It requires specifying the execution ID, domain, and project.  The command interacts with the Flyte admin service to terminate the specified execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl delete execution kxd1i72850  -d development  -p flytesnacks\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flytectl on macOS with Homebrew\nDESCRIPTION: Command to install flytectl on macOS using Homebrew package manager.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install flyteorg/homebrew-tap/flytectl\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminServer Authentication in YAML\nDESCRIPTION: Defines authentication settings for the FlyteAdmin server, including app authentication, authorized URIs, and user authentication with OpenID.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap.adminServer.auth:\n  appAuth:\n    thirdPartyConfig:\n      flyteClient:\n        clientId: \"flytectl\"\n        redirectUri: \"http://localhost:53593/callback\"\n        scopes: [\"offline\", \"all\"]\n  authorizedUris:\n    - \"https://localhost:30081\"\n    - \"http://flyteadmin:80\"\n    - \"http://flyteadmin.flyte.svc.cluster.local:80\"\n  userAuth:\n    openId:\n      baseUrl: \"https://accounts.google.com\"\n      clientId: \"657465813211-6eog7ek7li5k7i7fvgv2921075063hpe.apps.googleusercontent.com\"\n      scopes: [\"profile\", \"openid\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Plugin for Flyte Core\nDESCRIPTION: YAML configuration for enabling the Ray plugin in Flyte core deployment. This sets up the necessary task plugins, default task types, and Ray-specific settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - ray\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          ray: ray\n    plugins:\n      ray:\n        // Shutdown Ray cluster after 1 hour of inactivity\n        ttlSecondsAfterFinished: 3600\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Log Links in Python with ClassDecorator\nDESCRIPTION: Python implementation showing how to create a custom ClassDecorator that enables dynamic log links configured in the backend and passes custom parameters to the log link templates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.core.utils import ClassDecorator\n\n\nclass configure_log_links(ClassDecorator):\n    \"\"\"\n    Task function decorator to configure dynamic log links.\n    \"\"\"\n    def __init__(\n        self,\n        task_function: Optional[Callable] = None,\n        enable_log_link_a: Optional[bool] = False,\n        custom_param: Optional[str] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Configure dynamic log links for a task.\n\n        Args:\n            task_function (function, optional): The user function to be decorated. If the decorator is called\n                with arguments, task_function will be None. If the decorator is called without arguments,\n                task_function will be function to be decorated.\n            enable_log_link_a (bool, optional): Activate dynamic log link `log_link_a` configured in the backend.\n            custom_param (str, optional): Custom parameter for log link templates configured in the backend.\n        \"\"\"\n        self.enable_log_link_a = enable_log_link_a\n        self.custom_param = custom_param\n\n        super().__init__(\n            task_function,\n            enable_log_link_a=enable_log_link_a,\n            custom_param=custom_param,\n            **kwargs,\n        )\n\n    def execute(self, *args, **kwargs):\n        output = self.task_function(*args, **kwargs)\n        return output\n\n    def get_extra_config(self) -> dict[str, str]:\n        \"\"\"Return extra config for dynamic log links.\"\"\"\n        extra_config = {}\n\n        log_link_types = []\n        if self.enable_log_link_a:\n            log_link_types.append(\"log_link_a\")\n\n        if self.custom_param:\n            extra_config[\"custom_param\"] = self.custom_param\n        # Activate other dynamic log links as needed\n\n        extra_config[self.LINK_TYPE_KEY] = \",\".join(log_link_types)\n        return extra_config\n\n\n@task\n@configure_log_links(\n    enable_log_link_a=True,\n    custom_param=\"test-value\",\n)\ndef my_task():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Flyte Chart Repository to Helm\nDESCRIPTION: Command to add the Flyte chart repository to Helm for installation via Helm charts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage CLI Options in Flyte\nDESCRIPTION: Command line flags for configuring storage settings including authentication type, connection parameters, container settings, and storage backend type. Options cover SSL settings, timeout configuration, region specification, and storage limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_plugin-override.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Creating a LaunchPlan with Email Notifications in Python\nDESCRIPTION: This snippet demonstrates how to create a LaunchPlan that triggers email notifications when a workflow execution reaches the SUCCEEDED phase.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/notifications.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Email, LaunchPlan\nfrom flytekit.models.core.execution import WorkflowExecutionPhase\n\n# This launch plan triggers email notifications when the workflow execution it triggered reaches the phase `SUCCEEDED`.\nmy_notifiying_lp = LaunchPlan.create(\n    \"my_notifiying_lp\",\n    my_workflow_definition,\n    default_inputs={\"a\": 4},\n    notifications=[\n        Email(\n            phases=[WorkflowExecutionPhase.SUCCEEDED],\n            recipients_email=[\"admin@example.com\"],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Flyte Executions\nDESCRIPTION: This snippet illustrates how to terminate multiple Flyte executions by providing a list of their names. The domain and project flags are used to specify the Flyte environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nflytectl delete execution eeam9s8sny p4wv4hwgc4  -d development  -p flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks and generate execution spec file\nDESCRIPTION: Retrieves a task for a specific version and generates an execution specification file in YAML format.  This file can be used for launching the execution using the create execution command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get tasks -d development -p flytesnacks core.control_flow.merge_sort.merge --execFile execution_spec.yaml --version v2\"\n```\n\n----------------------------------------\n\nTITLE: Activating a Launch Plan Schedule with flytectl CLI\nDESCRIPTION: Uses the flytectl command-line tool to activate a launch plan schedule for a specific project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan -p flyteexamples -d development \\\n process_data_lp --version <VERSION> --activate\n```\n\n----------------------------------------\n\nTITLE: YAML Format Execution Details with Flytectl\nDESCRIPTION: Retrieves detailed execution information in YAML format using output formatting option.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/inspecting_executions.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution -p flytesnacks -d development <execid> --details -o yaml\n```\n\n----------------------------------------\n\nTITLE: Monitoring Launch Plan Execution\nDESCRIPTION: Command to retrieve and monitor the status of a specific execution using its ID\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_launch_plans.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution -p flytesnacks -d development <execid>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Deployment with Helm\nDESCRIPTION: This snippet provides the command to upgrade a Flyte deployment using Helm. It requires the release name and namespace as parameters, which need to be specified according to your environment. The command applies the values from the 'values-override.yaml' file to the deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieve projects in YAML format\nDESCRIPTION: This command retrieves all projects and outputs them in YAML format. It uses the `-o yaml` flag to specify the output format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project -o yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Shared Memory Size in Task Definition\nDESCRIPTION: Demonstrates how to specify a custom size for shared memory in a Flyte task by providing a string value to the shared_memory parameter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom flytekit import task\n\n@task(shared_memory=\"10Gi\")\ndef t1() -> bool:\n    # /dev/shm of size 10Gi is available in the task\n    ...\n```\n\n----------------------------------------\n\nTITLE: Ray Cluster Protocol\nDESCRIPTION: Protocol definitions for Ray distributed computing clusters with head and worker group specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage HeadGroupSpec {\n  map<string, string> ray_start_params = 1;\n}\n\nmessage RayCluster {\n  HeadGroupSpec head_group_spec = 1;\n  repeated WorkerGroupSpec worker_group_spec = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Compile-time PodTemplate in Python Task\nDESCRIPTION: This snippet demonstrates how to define a compile-time PodTemplate as part of a Flyte task definition, including container specifications, resource requirements, and tolerations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    pod_template=PodTemplate(\n        primary_container_name=\"primary\",\n        labels={\"lKeyA\": \"lValA\", \"lKeyB\": \"lValB\"},\n        annotations={\"aKeyA\": \"aValA\", \"aKeyB\": \"aValB\"},\n        pod_spec=V1PodSpec(\n            containers=[\n                V1Container(\n                    name=\"primary\",\n                    image=\"repo/placeholderImage:0.0.0\",\n                    command=\"echo\",\n                    args=[\"wow\"],\n                    resources=V1ResourceRequirements(limits={\"cpu\": \"999\", \"gpu\": \"999\"}),\n                    env=[V1EnvVar(name=\"eKeyC\", value=\"eValC\"), V1EnvVar(name=\"eKeyD\", value=\"eValD\")],\n                ),\n            ],\n            volumes=[V1Volume(name=\"volume\")],\n            tolerations=[\n                V1Toleration(\n                    key=\"num-gpus\",\n                    operator=\"Equal\",\n                    value=1,\n                    effect=\"NoSchedule\",\n                ),\n            ],\n        )\n    )\n)\ndef t1() -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Fixed Rate Launch Plan in Python\nDESCRIPTION: This snippet shows how to create a launch plan with a fixed rate schedule that runs daily. It uses the FixedRate class to define the schedule and associates it with a workflow, specifying a fixed input.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/schedules.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfixed_rate_lp_days = LaunchPlan.get_or_create(\n    name=\"my_fixed_rate_lp_days\",\n    workflow=positive_wf,\n    # Note that the above workflow doesn't accept any kickoff time arguments.\n    # We omit the ``kickoff_time_input_arg`` from the FixedRate schedule invocation\n    schedule=FixedRate(duration=timedelta(days=1)),\n    fixed_inputs={\"name\": \"you\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Example Workflow with DataFrame Caching Issue\nDESCRIPTION: Demonstrates the current limitation where DataFrame inputs to cached tasks are never cached due to reference-based representation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef foo(a: int, b: str) -> pd.DataFrame:\n    df = pd.Dataframe(...)\n    ...\n    return df\n\n@task(cached=True, version=\"1.0\")\ndef bar(df: pd.Dataframe) -> int:\n    ...\n\n@workflow\ndef wf(a: int, b: str):\n    df = foo(a=a, b=b)\n    v = bar(df=df)\n```\n\n----------------------------------------\n\nTITLE: Archiving Workflow in Flyte CLI\nDESCRIPTION: This command archives a workflow in Flyte, which will cause it to disappear from the Flyte console UI. It specifies the project, domain, and workflow name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-meta.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update workflow-meta -p flytesnacks -d development core.control_flow.merge_sort.merge_sort --archive\n```\n\n----------------------------------------\n\nTITLE: Initializing Flyte Projects with Archetypes\nDESCRIPTION: Commands to initialize new Flyte projects using predefined archetypes like tensorflow, spark, and xgboost. Each archetype provides a template with dockerfile and folder setup including flytekit configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl init project --archetype tensorflow-2.0\n$ flytectl init project --archetype spark-3.0\n$ flytectl init project --archetype xgboost\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Ports and Service Monitor for Flyte Components\nDESCRIPTION: YAML configuration that sets up metrics ports and prefixes for Flyte components (propeller, scheduler, flyteadmin) and defines a TCP service port for metrics collection. Enables Prometheus service discovery with default scrape timeout of 30s and interval of 60s.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/monitoring.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninline:\n  propeller:\n    prof-port: 10254\n    metrics-prefix: \"flyte:\"\n  scheduler:\n    profilerPort: 10254\n    metricsScope: \"flyte:\"\n  flyteadmin:\n    profilerPort: 10254\nservice:\n  extraPorts:\n  - name: http-metrics\n    protocol: TCP\n    port: 10254\n```\n\n----------------------------------------\n\nTITLE: Updating Launch Plan Description with flytectl\nDESCRIPTION: This command updates the description of a launch plan named 'core.advanced.merge_sort.merge_sort' in the 'flytesnacks' project and 'development' domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan-meta.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan-meta -p flytesnacks -d development  core.advanced.merge_sort.merge_sort --description \"Mergesort example\"\n```\n\n----------------------------------------\n\nTITLE: Starting Sandbox with Multiple Environment Variables\nDESCRIPTION: This snippet demonstrates how to pass multiple environment variables when starting the sandbox cluster using the `--env` flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start --env USER=foo --env PASSWORD=bar\"\n```\n\n----------------------------------------\n\nTITLE: Register archive file from HTTP\nDESCRIPTION: Registers a .tgz or .tar archive file served over HTTP/HTTPS.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register files http://localhost:8080/_pb_output.tar -d development  -p flytesnacks --archive\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flyte Task Execution Entrypoint in Python\nDESCRIPTION: Python script that serves as an entrypoint for executing Flyte tasks in Databricks. It handles both fast and regular task execution modes, with support for dynamic distribution downloads.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\nfrom typing import List\n\nimport click\nimport pandas\nfrom flytekit.bin.entrypoint import fast_execute_task_cmd as _fast_execute_task_cmd\nfrom flytekit.bin.entrypoint import execute_task_cmd as _execute_task_cmd\nfrom flytekit.exceptions.user import FlyteUserException\nfrom flytekit.tools.fast_registration import download_distribution\n\n\ndef fast_execute_task_cmd(additional_distribution: str, dest_dir: str, task_execute_cmd: List[str]):\n    if additional_distribution is not None:\n        if not dest_dir:\n            dest_dir = os.getcwd()\n        download_distribution(additional_distribution, dest_dir)\n\n    # Insert the call to fast before the unbounded resolver args\n    cmd = []\n    for arg in task_execute_cmd:\n        if arg == \"--resolver\":\n            cmd.extend([\"--dynamic-addl-distro\", additional_distribution, \"--dynamic-dest-dir\", dest_dir])\n        cmd.append(arg)\n\n    click_ctx = click.Context(click.Command(\"dummy\"))\n    parser = _execute_task_cmd.make_parser(click_ctx)\n    args, _, _ = parser.parse_args(cmd[1:])\n    _execute_task_cmd.callback(test=False, **args)\n\n\ndef main():\n\n    args = sys.argv\n\n    click_ctx = click.Context(click.Command(\"dummy\"))\n    if args[1] == \"pyflyte-fast-execute\":\n        parser = _fast_execute_task_cmd.make_parser(click_ctx)\n        args, _, _ = parser.parse_args(args[2:])\n        fast_execute_task_cmd(**args)\n    elif args[1] == \"pyflyte-execute\":\n        parser = _execute_task_cmd.make_parser(click_ctx)\n        args, _, _ = parser.parse_args(args[2:])\n        _execute_task_cmd.callback(test=False, dynamic_addl_distro=None, dynamic_dest_dir=None, **args)\n    else:\n        raise FlyteUserException(f\"Unrecognized command: {args[1:]}\")\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Registering Example Workflows in Flyte\nDESCRIPTION: Command to register core workflow examples to the Flyte sandbox. This registers them to the 'development' domain and 'flytesnacks' project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl register examples -d development -p flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Installing Flyteagent Pod with Helm\nDESCRIPTION: These commands add the Flyte Helm repository and install the flyteagent pod in the flyte namespace using Helm.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\nhelm install flyteagent flyteorg/flyteagent --namespace flyte\n```\n\n----------------------------------------\n\nTITLE: Installing CUDA Packages from Extra Index in ImageSpec\nDESCRIPTION: This example demonstrates how to install CUDA by specifying an extra index URL in the ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimage_spec = ImageSpec(\n  name=\"pytorch-mnist\",\n  packages=[\"torch\", \"torchvision\", \"flytekitplugins-kfpytorch\"],\n  pip_extra_index_url=[\"https://download.pytorch.org/whl/cu118\"],\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Get Execution Queue Attribute (JSON)\nDESCRIPTION: This JSON snippet shows an example output from the `flytectl get execution-queue-attribute` command when retrieving execution queue attributes for a specific project and domain. It includes the project, domain, and a list of tags associated with the execution queue attribute.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-queue-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"tags\":[\"foo\", \"bar\"]}\n```\n\n----------------------------------------\n\nTITLE: Basic Version Command\nDESCRIPTION: Simple command to fetch Flytectl version information\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_version.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl version\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Authentication in Flyte\nDESCRIPTION: Sets authentication details for connecting to Kubernetes clusters, including certificate and token paths.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_140\n\nLANGUAGE: yaml\nCODE:\n```\ncertPath: \"\"\ntokenPath: \"\"\ntype: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SNS Events in FlyteAdmin\nDESCRIPTION: YAML configuration for enabling AWS SNS event publishing in FlyteAdmin. Specifies the AWS region, event types to publish, and SNS topic ARN.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/eventing.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncloud_events.yaml: |\n  cloudEvents:\n    enable: true\n    aws:\n      region: us-east-2\n    eventsPublisher:\n      eventTypes:\n      - all # or node, task, workflow\n      topicName: arn:aws:sns:us-east-2:123456:123-my-topic\n    type: aws\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Task Types and AWS Spark Settings\nDESCRIPTION: Configuration for task plugins in Flyte with AWS-specific Spark settings. Defines default task types, cluster resources with IAM roles for different environments, and Spark configuration parameters for S3 integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-for-task-types:\n  - container: container\n  - container_array: k8s-array\n  - spark: spark\ncluster_resources:\n  - production:\n    - defaultIamRole:\n        value: <FLYTE_IAM_USER_ARN>\n  - staging:\n    - defaultIamRole:\n        value: <FLYTE_IAM_USER_ARN>\n  - development:\n    - defaultIamRole:\n        value: <FLYTE_IAM_USER_ARN>\nplugins:\n  spark:\n  # Edit the Spark configuration as you see fit\n    spark-config-default:\n      - spark.driver.cores: \"1\"\n      - spark.hadoop.fs.s3a.aws.credentials.provider: \"com.amazonaws.auth.DefaultAWSCredentialsProviderChain\"\n      - spark.kubernetes.allocation.batch.size: \"50\"\n      - spark.hadoop.fs.s3a.acl.default: \"BucketOwnerFullControl\"\n      - spark.hadoop.fs.s3n.impl: \"org.apache.hadoop.fs.s3a.S3AFileSystem\"\n      - spark.hadoop.fs.AbstractFileSystem.s3n.impl: \"org.apache.hadoop.fs.s3a.S3A\"\n      - spark.hadoop.fs.s3.impl: \"org.apache.hadoop.fs.s3a.S3AFileSystem\"\n      - spark.hadoop.fs.AbstractFileSystem.s3.impl: \"org.apache.hadoop.fs.s3a.S3A\"\n      - spark.hadoop.fs.s3a.impl: \"org.apache.hadoop.fs.s3a.S3AFileSystem\"\n      - spark.hadoop.fs.AbstractFileSystem.s3a.impl: \"org.apache.hadoop.fs.s3a.S3A\"\n      - spark.network.timeout: 600s\n      - spark.executorEnv.KUBERNETES_REQUEST_TIMEOUT: 100000\n      - spark.executor.heartbeatInterval: 60s\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Build Parameters\nDESCRIPTION: Overrides default values for the docker_build.sh script with flags for project name, registry, and version. Allows customization of the container build process.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/registering_workflows.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./docker_build.sh -p <PROJECT_NAME> -r <REGISTRY> -v <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Resource Defaults in YAML\nDESCRIPTION: Sets default resource allocations and limits for tasks, including CPU, memory, and GPU specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap.task_resource_defaults:\n  task_resources:\n    defaults:\n      cpu: \"100m\"\n      memory: \"500Mi\"\n    limits:\n      cpu: 2\n      gpu: 1\n      memory: \"1Gi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Plugin for Flyte Core\nDESCRIPTION: YAML configuration for enabling Snowflake plugin in Flyte core deployment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - snowflake\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          snowflake: snowflake\n```\n\n----------------------------------------\n\nTITLE: Mounting Source Code in Flyte Sandbox\nDESCRIPTION: This snippet demonstrates how to mount a source code repository inside the Flyte sandbox using the `--source` flag. It allows running Flyte with local source code modifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start --source=$HOME/flyteorg/flytesnacks\"\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Token\nDESCRIPTION: Command to set the OpenAI API token as a base64 encoded secret in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSECRET_VALUE=$(echo -n \"<OPENAI_API_TOKEN>\" | base64) && \\\nkubectl patch secret flyteagent -n flyte --patch \"{\\\"data\\\":{\\\"flyte_openai_api_key\\\":\\\"$SECRET_VALUE\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Plugin Override with Workflow Name\nDESCRIPTION: This snippet demonstrates how to delete a plugin override for a specific workflow using the `flytectl delete plugin-override` command. It includes the project, domain, and the full workflow name as arguments. This allows for targeted deletion of overrides associated with a particular workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl delete plugin-override -p flytesnacks -d development core.control_flow.merge_sort.merge_sort\"\n```\n\n----------------------------------------\n\nTITLE: Table Renderer Example\nDESCRIPTION: Example of using Table renderer to convert DataFrame to HTML table.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True)\ndef table_renderer():\n    import random\n    df = pd.DataFrame(\n        [[random.random() for _ in range(5)] for _ in range(5)],\n        columns=[f\"Col {i}\" for i in range(5)],\n    )\n    table = renderer.TableRenderer()\n    table.append(df)\n    return df\n```\n\n----------------------------------------\n\nTITLE: Relaunching Execution - Command\nDESCRIPTION: This command allows users to relaunch a previous execution by passing the specific execution ID, thereby re-executing the task in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nflytectl create execution --relaunch ffb31066a0f8b4d52b77 -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Example Execution Spec File in YAML\nDESCRIPTION: This is an example of a generated execution spec file in YAML format, which can be used to launch execution using flytectl. It contains fields like 'iamRoleARN', 'inputs', and 'workflow', outlining the configuration for launching a specific workflow execution in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_launchplan.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: \"\"\ninputs:\n  numbers:\n  - 0\n  numbers_count: 0\n  run_local_at_count: 10\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\nversion: v3\nworkflow: core.control_flow.merge_sort.merge_sort\n```\n\n----------------------------------------\n\nTITLE: Frame Renderer Example\nDESCRIPTION: Example of using Frame renderer to create a profile report from a Pandas DataFrame.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True)\ndef frame_renderer():\n    from sklearn.datasets import load_iris\n    iris = load_iris()\n    df = pd.DataFrame(iris.data, columns=[\"sepal length\", \"sepal width\", \"petal length\", \"petal width\"])\n    frame = renderer.FrameRenderer()\n    frame.append(df)\n    return df\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: Starts the Flyte demo cluster without any source code. This command initializes a standalone environment for running Flyte demo.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Updating a Flyte Project\nDESCRIPTION: This command activates a specified Flyte project. It is a part of the flytectl update command used to manage Flyte resources. The command requires the project name as a parameter and can include other options for additional configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflytectl update project -p flytesnacks --activate\n```\n\n----------------------------------------\n\nTITLE: Detailed Execution Inspection with Flytectl\nDESCRIPTION: Retrieves detailed execution information including node and task executions using the --details flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/inspecting_executions.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution -p flytesnacks -d development <execid> --details\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Environment Variables\nDESCRIPTION: Allows users to pass multiple environment variables to the demo container by repeating the --env flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --env USER=foo --env PASSWORD=bar\n```\n\n----------------------------------------\n\nTITLE: Register files with continue on error and output format\nDESCRIPTION: Registers files, continues on error, and specifies the output format (yaml), though the output format doesn't have an effect on registration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError -o yaml\"\n```\n\n----------------------------------------\n\nTITLE: Using Type Annotations Example in Python\nDESCRIPTION: Example showing how to use type annotations to specify parameter metadata for form presentation\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1855-type-metadata.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\namplicon_min_alignment_score: Optional[\n        List[\n            Annotated[\n                int,\n                FlyteMetadata(\n                    {\n                        \"appearance\": {\n                            \"multiselect\": {\n                                \"options\": [50, 60, 70, 80, 90, 100],\n                                \"allow_custom\": True,\n                            }\n                        }\n                    }\n                ),\n            ]\n        ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: MPI Distributed Training Protocol\nDESCRIPTION: Protocol definition for MPI-based distributed training tasks using Kubeflow MPI operator.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DistributedMPITrainingTask {\n  int32 num_workers = 1;\n  int32 num_launcher_replicas = 2;\n  int32 slots = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Flyte Task Execution Command\nDESCRIPTION: Command used by Flyte to execute prebuilt container tasks, showing how inputs, outputs, and task template paths are handled.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/prebuilt_container_task_plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npyflyte-execute --inputs s3://inputs.pb --output-prefix s3://outputs --raw-output-data-prefix s3://user-data --resolver flytekit.core.python_customized_container_task.default_task_template_resolver -- {{.taskTemplatePath}} path.to.your.executor.subclass\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Tasks for Slope and Intercept Calculation in Python\nDESCRIPTION: Shows the implementation of two tasks: 'slope' and 'intercept', which compute the slope and intercept of a regression line respectively.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef slope(x: List[int], y: List[int]) -> float:\n    x_mean = sum(x) / len(x)\n    y_mean = sum(y) / len(y)\n    numerator = sum((xi - x_mean) * (yi - y_mean) for xi, yi in zip(x, y))\n    denominator = sum((xi - x_mean) ** 2 for xi in x)\n    return numerator / denominator\n\n@task\ndef intercept(x: List[int], y: List[int], m: float) -> float:\n    x_mean = sum(x) / len(x)\n    y_mean = sum(y) / len(y)\n    return y_mean - m * x_mean\n```\n\n----------------------------------------\n\nTITLE: Using pyflyte to Register Workflow with ImageSpec YAML\nDESCRIPTION: This command demonstrates how to use pyflyte to register a workflow using an ImageSpec defined in a YAML file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Use pyflyte to register the workflow\npyflyte run --remote --image image.yaml image_spec.py wf\n```\n\n----------------------------------------\n\nTITLE: Backend Plugin Base Class Implementation\nDESCRIPTION: Abstract base class defining the interface for backend plugins with core methods for create, poll and delete operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-exteranl-plugin-service.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass BackendPluginBase:\n\n    def __init__(self, task_type: str, version: str = \"v1\"):\n        self._task_type = task_type\n        self._version = version\n\n    @property\n    def task_type(self) -> str:\n        return self._task_type\n\n    @property\n    def version(self) -> str:\n        return self._version\n\n    @abstractmethod\n    async def create(self):\n        pass\n\n    @abstractmethod\n    async def poll(self):\n        pass\n    \n    @abstractmethod\n    async def delete(self):\n        pass\n    \nBackendPluginRegistry.register(BQPlugin())\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Plan Concurrency in Python\nDESCRIPTION: Example of how to configure concurrency settings when creating a launch plan in Python SDK. The code sets a maximum concurrency of 1 and a wait policy when the limit is reached.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/RFC-5659-execution-concurrency.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_lp = LaunchPlan.get_or_create(\n    name=\"my_serial_lp\",\n    workflow=my_wf,\n    ...\n    concurrency=Concurrency(\n        max=1,  # defines how many executions with this launch plan can run in parallel\n        policy=ConcurrencyPolicy.WAIT  # defines the policy to apply when the max concurrency is reached\n        precision=ConcurrencyPrecision.LAUNCH_PLAN_VERSION\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Concurrency Control Protobuf Messages\nDESCRIPTION: Protobuf definitions for scheduler policy, concurrency policy enum, and updates to Schedule and ExecutionStateChangeDetails messages to support concurrency control.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/RFC-5659-execution-concurrency.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SchedulerPolicy {\n  uint32 max = 1;\n  ConcurrencyPolicy policy = 2;\n}\n\nenum ConcurrencyPolicy {\n  UNSPECIFIED = 0;\n  WAIT = 1;\n  ABORT = 2;\n  REPLACE = 3;\n}\n\nmessage Schedule {\n  ...\n  SchedulerPolicy scheduler_policy = X; \n}\n\nmessage ExecutionStateChangeDetails  {\n  ...\n  string description = X;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Secrets to Flyte Agents using kubectl\nDESCRIPTION: Command to add a base64-encoded secret value to the Flyte agent's Kubernetes secret. The secret is patched in the 'flyte' namespace with the name 'flyteagent'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/how_secret_works_in_agent.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSECRET_VALUE=$(<YOUR_SECRET_VALUE> | base64) && kubectl patch secret flyteagent -n flyte --patch \"{\\\"data\\\":{\\\"your_agent_secret_name\\\":\\\"$SECRET_VALUE\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Connection Options\nDESCRIPTION: These options configure the connection to the storage backend.  `--storage.connection.access-key` and `--storage.connection.secret-key` are used when `--storage.connection.auth-type` is set to `accesskey`. `--storage.connection.auth-type` specifies the authentication type (iam or accesskey). `--storage.connection.disable-ssl` disables SSL for development purposes. `--storage.connection.endpoint` defines the storage endpoint URL. `--storage.connection.region` sets the region (default us-east-1).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\"\n      \"--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \\\"iam\\\")\"\n      \"--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\"\n      \"--storage.connection.endpoint string           URL for storage client to connect to.\"\n      \"--storage.connection.region string             Region to connect to. (default \\\"us-east-1\\\")\"\n      \"--storage.connection.secret-key string         Secret to use when accesskey is set.\"\n```\n\n----------------------------------------\n\nTITLE: Registering Flytesnacks Examples with Flytectl CLI\nDESCRIPTION: This shell command registers all latest Flytesnacks examples using the Flytectl CLI in the 'development' domain and 'flytesnacks' project. The use of '-d' specifies the domain and '-p' specifies the project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_examples.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl register examples  -d development  -p flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Local Execution of Basic Regression Subworkflow in Python\nDESCRIPTION: Shows how to execute the regression line workflow locally with sample input data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/subworkflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Output: {regression_line_wf(x=[1, 2, 3], y=[2, 4, 6])}\")  # [2.0, 4.0, 6.0]\n```\n\n----------------------------------------\n\nTITLE: Configuring K8s Service Agent Plugin\nDESCRIPTION: YAML configuration for the K8s service agent plugin including endpoint and task type mappings\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  agent-service:\n    agents:\n      k8sservice-agent:\n        endpoint: <AGENT_ENDPOINT>\n        insecure: true\n    agentForTaskTypes:\n    - dataservicetask: k8sservice-agent\n    - sensor: k8sservice-agent\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Command to upgrade Flyte core installation using Helm with custom values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options in Flytectl\nDESCRIPTION: These options configure various storage-related settings for Flytectl, including cache size, garbage collection, authentication, connection details, and storage type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Flyte Conditionals\nDESCRIPTION: This snippet shows the necessary imports for working with conditionals in Flyte workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/conditionals.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport random\nfrom flytekit import task, workflow, conditional\nfrom flytekit.extras.tasks.shell import ShellTask\n```\n\n----------------------------------------\n\nTITLE: Allocating Resources in Go\nDESCRIPTION: Example Go code showing how a Flyte plugin (Qubole in this case) allocates resources using the ResourceManager. It demonstrates the use of the AllocateResource function with specific parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/resource_manager.rst#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstatus, err := AllocateResource(ctx, \"default_cluster\", \"flkgiwd13-akjdoe-0\", ResourceConstraintsSpec{})\n```\n\n----------------------------------------\n\nTITLE: Flytectl Global Options\nDESCRIPTION: These options are inherited from parent commands and provide configurations for interacting with the Flyte admin service, configuring storage, and setting up logging and telemetry. They are used to customize the behavior of flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n\n```\n\n----------------------------------------\n\nTITLE: Literal Offloading Configuration\nDESCRIPTION: Configuration for handling large literals including size thresholds and SDK version support.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_174\n\nLANGUAGE: yaml\nCODE:\n```\nEnabled: \"false\"\nsupported-sdk-versions:\n  FLYTE_SDK: 1.13.14\nmin-size-in-mb-for-offloading: \"10\"\nmax-size-in-mb-for-offloading: \"1000\"\n```\n\n----------------------------------------\n\nTITLE: Register files and override IamRole\nDESCRIPTION: Registers files, continues on error, specifies a version, and overrides the default IAM role.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError --version v2 --assumableIamRole \\\"arn:aws:iam::123456789:role/dummy\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gang Scheduler for Apache Yunikorn\nDESCRIPTION: YAML configuration for setting up a gang scheduler using Apache Yunikorn. This is an alternative option for gang scheduling in distributed training jobs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\n  metadata:\n    annotations:\n      yunikorn.apache.org/task-group-name: \"\"\n      yunikorn.apache.org/task-groups: \"\"\n      yunikorn.apache.org/schedulingPolicyParameters: \"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Target Execution Cluster - YAML\nDESCRIPTION: This snippet shows how to specify a target execution cluster within the execution specification YAML before running the execution in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: \"\"\ninputs:\nsorted_list1:\n- 0\nsorted_list2:\n- 0\nenvs:\n  foo: bar\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntargetExecutionCluster: \"\"\ntask: core.control_flow.merge_sort.merge\nversion: \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Kubernetes Integration\nDESCRIPTION: This YAML snippet defines the configuration for Flyte's Kubernetes integration, including default resource allocations and environment variables.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.k8s:\n  plugins:\n    k8s:\n      default-cpus: \"100m\"\n      default-env-from-configmaps: []\n      default-env-from-secrets: []\n      default-env-vars:\n        - FLYTE_AWS_ENDPOINT: \"http://minio.flyte:9000\"\n        - FLYTE_AWS_ACCESS_KEY_ID: \"minio\"\n        - FLYTE_AWS_SECRET_ACCESS_KEY: \"miniostorage\"\n      default-memory: \"200Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor in flyte-core\nDESCRIPTION: YAML configuration for enabling Prometheus ServiceMonitor to scrape metrics from flyteadmin and flytepropeller components.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/monitoring.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflyteadmin:\n  serviceMonitor:\n  enabled: true\n  labels:\n    release: kube-prometheus-stack\n  selectorLabels:\n    - app.kubernetes.io/name: flyteadmin\nflytepropeller:\n  serviceMonitor:\n    enabled: true\n    labels:\n      release: kube-prometheus-stack\n    selectorLabels:\n      - app.kubernetes.io/name: flytepropeller\n  service:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes YAML from Helm Chart\nDESCRIPTION: Command to generate raw Kubernetes YAML from the Helm chart. This is useful for users who prefer to deploy using kubectl or want to inspect the generated manifests.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm template --name-template=flyte-sandbox . -n flyte -f values-sandbox.yaml > flyte_generated_sandbox.yaml\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Sandbox Deployment for Demo Cluster\nDESCRIPTION: Bash command to restart the flyte-sandbox deployment in the Flyte namespace using kubectl rollout restart.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyte-sandbox -n flyte\n```\n\n----------------------------------------\n\nTITLE: Activating Launch Plan with flytectl (No-op)\nDESCRIPTION: This command attempts to activate a launch plan, which is a no-op operation and will not have any effect.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan-meta.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan-meta -p flytesnacks -d development  core.advanced.merge_sort.merge_sort --activate\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Resource Customization in Flyte\nDESCRIPTION: Imports the necessary modules from flytekit to define tasks and customize their resource requirements.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport numpy as np\nfrom flytekit import task, workflow, Resources\n```\n\n----------------------------------------\n\nTITLE: Recovering Execution - Command\nDESCRIPTION: This command is used to recover a previously failed execution by specifying the execution ID, allowing the user to recreate from the last known failure point.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflytectl create execution --recover ffb31066a0f8b4d52b77 -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Environment in Bash\nDESCRIPTION: This command starts the Flyte demo environment, which sets up a sandbox and provides access to the Flyte UI and API documentation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/swagger.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Flyte Remote Access in Bash\nDESCRIPTION: Configures the necessary environment variables for basic setup of remote Flyte cluster access, including platform URL and client credentials.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/eager_workflows.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nFLYTE_PLATFORM_URL\nFLYTE_CREDENTIALS_CLIENT_ID\nFLYTE_CREDENTIALS_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for Execution - YAML\nDESCRIPTION: This code snippet demonstrates how to add environment variables to the execution specification YAML file for a task execution in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: \"\"\ninputs:\nsorted_list1:\n- 0\nsorted_list2:\n- 0\nenvs:\n  foo: bar\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntask: core.control_flow.merge_sort.merge\nversion: \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Activating a Launch Plan Schedule with FlyteRemote\nDESCRIPTION: Uses the FlyteRemote client to activate a previously registered launch plan schedule.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/running_and_scheduling_workflows.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlaunchplan_id = remote.fetch_launch_plan(name=\"process_data_lp\").id\nremote.client.update_launch_plan(launchplan_id, \"ACTIVE\")\n```\n\n----------------------------------------\n\nTITLE: Activating a Flyte Project Using Command-Line Flag\nDESCRIPTION: This command activates (unarchives) a Flyte project by specifying the project ID with the -p flag and using the --activate flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project -p my-project-id --activate\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building Flyte Agent Image\nDESCRIPTION: Sample Dockerfile for building a Docker image that runs a Flyte agent, installing necessary dependencies and setting up the environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/developing_agents.md#2025-04-16_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.10-slim-bookworm\n\nMAINTAINER Flyte Team <users@flyte.org>\nLABEL org.opencontainers.image.source=https://github.com/flyteorg/flytekit\n\n# additional dependencies for running in k8s\nRUN pip install prometheus-client grpcio-health-checking\n# flytekit will autoload the agent if package is installed.\nRUN pip install flytekitplugins-bigquery\nCMD pyflyte serve agent --port 8000\n```\n\n----------------------------------------\n\nTITLE: Map Task with Partial Function in Python\nDESCRIPTION: Shows how to use partial functions with Map Tasks, demonstrating limited support for this feature.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.5.0.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow, partial, map_task\n\n@task\ndef t1(x: int, y: float) -> float:\n    return x + y\n\n@workflow\ndef wf(y: List[float]):\n   partial_t1 = partial(t1, x=5)\n   return map_task(partial_t1)(y=y)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Job with Custom Node Configurations in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a RayJob with custom configurations for head, worker, and submitter nodes. It showcases the new flexibility in specifying resources and pod templates for different node types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.14.0.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nray_config = RayJobConfig(\n    head_node_config=HeadNodeConfig(\n        requests=Resources(mem=\"64Gi\", cpu=\"4\"),\n        limits=Resources(mem=\"64Gi\", cpu=\"4\")\n        pod_template_name = \"ray_head_nodeÄ\n    ),\n    worker_node_config=[\n        WorkerNodeConfig(\n            group_name=\"V100-group\",\n            replicas=4,\n            requests=Resources(mem=\"256Gi\", cpu=\"64\",  gpu=\"1\"),\n            limits=Resources(mem=\"256Gi\", cpu=\"64\",  gpu=\"1\"),\n            pod_template = V1PodSpec(node_selector={\"node_group\": \"V100\"}),\n        ),\n        WorkerNodeConfig(\n            group_name=\"A100-group\",\n            replicas=2,\n            requests=Resources(mem=\"480Gi\", cpu=\"60\", gpu=\"2\"),\n            limits=Resources(mem=\"480Gi\", cpu=\"60\", gpu=\"2\")\n            pod_template = V1PodSpec(node_selector={\"node_group\": \"A100\"}),\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Running a BigQuery Task Locally with pyflyte\nDESCRIPTION: Command to execute a BigQuery agent task locally using pyflyte. This runs the task with a specified version parameter to test the agent functionality without deploying to a Flyte cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_python_environment.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run bigquery_task.py bigquery_doge_coin --version 10\n```\n\n----------------------------------------\n\nTITLE: Creating FlyteFile and FlyteDirectory in Python\nDESCRIPTION: This task demonstrates how to create FlyteFile and FlyteDirectory objects. It writes content to a file and creates a .gitkeep file in a directory to ensure its existence.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/shell_tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef create_entities(a: int) -> (FlyteFile, FlyteDirectory):\n    import os\n\n    # Create a file\n    with open(\"test.txt\", \"w\") as file:\n        file.write(f\"Contents: {a}\")\n\n    # Create a directory and add a .gitkeep file\n    os.makedirs(\"test_dir\", exist_ok=True)\n    with open(\"test_dir/.gitkeep\", \"w\") as file:\n        pass\n\n    return FlyteFile(\"test.txt\"), FlyteDirectory(\"test_dir\")\n```\n\n----------------------------------------\n\nTITLE: Requesting Unpartitioned Multi-instance GPU in Flyte\nDESCRIPTION: Example showing how to explicitly request an unpartitioned A100 GPU, ensuring the task gets access to the entire GPU without MIG partitioning. This is useful for workloads that need the full GPU capacity.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.10.6.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.extras.accelerators import A100\n\n\n@task(\n    limits=Resources(gpu=\"1\"),\n    accelerator=A100.unpartitioned,\n)\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Command to upgrade a Flyte binary Helm release with new configuration values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Plugin Settings for SageMaker Integration\nDESCRIPTION: YAML configuration for enabling SageMaker plugins in Flyte. Specifies the enabled task plugins including container, sidecar, k8s-array, and SageMaker-specific plugins.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/sagemaker.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - sagemaker_training\n          - sagemaker_hyperparameter_tuning\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime PodTemplate in Python Task\nDESCRIPTION: This snippet shows how to specify a runtime PodTemplate name in a Flyte task definition, which will be applied during execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    pod_template_name=\"a_pod_template\",\n)\ndef t1() -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Unpartitioned GPU Node Selector Configuration\nDESCRIPTION: YAML configuration for node selector expressions to match unpartitioned GPU nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: nvidia.com/gpu.accelerator\n            operator: In\n            values:\n            - nvidia-tesla-a100\n          - key: nvidia.com/gpu.partition-size\n            operator: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Flyte Binary GPU Configuration\nDESCRIPTION: YAML configuration for Flyte Binary to control GPU node selection and tolerations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    plugins:\n      k8s:\n        gpu-unpartitioned-node-selector-requirement:\n          key: cloud.google.com/gke-gpu-partition-size #change to match your node label configuration\n          operator: Equal\n          value: DoesNotExist\n```\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    plugins:\n      k8s:\n        gpu-unpartitioned-toleration:\n          effect: NoSchedule\n          key: cloud.google.com/gke-gpu-partition-size\n          operator: Equal\n          value: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Initializing Flytectl Config with Flags\nDESCRIPTION: This command demonstrates the general syntax for initializing the Flytectl config with optional flags. The command can accept various flags to customize the configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_init.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflytectl config init [flags]\n```\n\n----------------------------------------\n\nTITLE: Get Workflow by Name\nDESCRIPTION: Retrieves all versions of a workflow with a specific name within the project and domain.  The workflow name is `core.basic.lp.go_greet`. It requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development  core.basic.lp.go_greet\"\n```\n\n----------------------------------------\n\nTITLE: Registering Flyte Examples using flytectl\nDESCRIPTION: Command to register pre-serialized Flyte examples from cookbook, plugins, or custom paths. Requires serialized protobuf files in a specific archive structure with tasks and workflows directories.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl examples register-all [cookbook|plugins|--custom-path=remote-path] [--semver semantic-version-of-flytesnacks-examples] --target-project --target-domain\n```\n\n----------------------------------------\n\nTITLE: Register Specific Release of Flytesnacks Examples\nDESCRIPTION: This shell command registers a specific release of Flytesnacks examples, utilizing the '--version' flag to specify the release version. It's executed in the 'development' domain and 'flytesnacks' project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_examples.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflytectl register examples  -d development  -p flytesnacks --version v0.2.176\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Resource Attribute for Project and Domain\nDESCRIPTION: Fetch task resource attributes for a specific project and domain using Flytectl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task-resource-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get task-resource-attribute -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Binary Task Plugins\nDESCRIPTION: YAML configuration for enabling agent-service and setting default task types in Flyte binary setup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - snowflake: agent-service\n```\n\n----------------------------------------\n\nTITLE: Configuring Default PodTemplate in FlytePropeller YAML\nDESCRIPTION: This YAML configuration sets the default PodTemplate name in FlytePropeller's configuration, enabling runtime PodTemplates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  k8s:\n    co-pilot:\n      name: \"flyte-copilot-\"\n      image: \"cr.flyte.org/flyteorg/flytecopilot:v0.0.15\"\n      start-timeout: \"30s\"\n    default-pod-template-name: <your_template_name>\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Node Selector in Flyte\nDESCRIPTION: Configures node selectors to control which nodes can be used for pod scheduling in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_132\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Formatting Execution Output in YAML with Flytectl CLI\nDESCRIPTION: This command retrieves executions formatted in YAML using Flytectl CLI. It requires a Flyte setup and supports outputs in YAML by using the '-o yaml' flag. It provides execution details structured in YAML format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development -o yaml\n```\n\n----------------------------------------\n\nTITLE: Fish completion setup for flytectl\nDESCRIPTION: This snippet provides instructions for setting up Fish shell completion for flytectl. It explains how to load the completion script for the current session using `flytectl completion fish | source`, and how to configure it for each new session by saving the output to `~/.config/fish/completions/flytectl.fish`.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_completion.rst#2025-04-16_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\"$ flytectl completion fish | source\"\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"$ flytectl completion fish > ~/.config/fish/completions/flytectl.fish\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks in YAML format\nDESCRIPTION: Retrieves all tasks within a Flyte project and domain and outputs them in YAML format. The `-o yaml` flag specifies the output format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development -o yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminServer Authentication in Flyte\nDESCRIPTION: This YAML snippet defines authentication settings for the Flyte AdminServer, including app authentication, authorized URIs, and user authentication with OpenID.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.adminServer.auth:\n  appAuth:\n    thirdPartyConfig:\n      flyteClient:\n        clientId: \"flytectl\"\n        redirectUri: \"http://localhost:53593/callback\"\n        scopes: [\"offline\", \"all\"]\n  authorizedUris:\n    - \"https://localhost:30081\"\n    - \"http://flyteadmin:80\"\n    - \"http://flyteadmin.flyte.svc.cluster.local:80\"\n  userAuth:\n    openId:\n      baseUrl: \"https://accounts.google.com\"\n      clientId: \"657465813211-6eog7ek7li5k7i7fvgv2921075063hpe.apps.googleusercontent.com\"\n      scopes: [\"profile\", \"openid\"]\n```\n\n----------------------------------------\n\nTITLE: Starting a Flyte Demo Cluster\nDESCRIPTION: Command to start a demo Flyte cluster using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Specifying a Flyte Sandbox Image Pull Policy\nDESCRIPTION: This snippet demonstrates how to specify a Flyte Sandbox image pull policy using the `--imagePullPolicy` flag. Possible values are Always, IfNotPresent, or Never.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start  --image docker.io/my-override:latest --imagePullPolicy Always\"\n```\n\n----------------------------------------\n\nTITLE: Adding Databricks API Token to Flyte Secret Auth YAML\nDESCRIPTION: YAML configuration for adding the Databricks API token to the flyte-secret-auth secret. The access token should be added to the FLYTE_DATABRICKS_API_TOKEN field.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\ndata:\n  FLYTE_DATABRICKS_API_TOKEN: <ACCESS_TOKEN>\n  client_secret: Zm9vYmFy\nkind: Secret\n...\n```\n\n----------------------------------------\n\nTITLE: Options for Deleting Cluster Resource Attributes - Flyte CLI (yaml)\nDESCRIPTION: This snippet outlines the various options available for the delete command, including attribute file specification and dry run options. These allow for custom command executions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_cluster-resource-attribute.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n--attrFile string   attribute file name to be used for delete attribute for the resource type.\n--dryRun            execute command without making any modifications.\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Retries for Flyte Checkpointing\nDESCRIPTION: This snippet imports necessary libraries from flytekit and sets the number of task retries to 3 for the checkpointing example.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/intratask_checkpoints.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom flytekit.core.checkpointer import Checkpoint\nfrom flytekit.exceptions import FlyteRecoverableException\nfrom flytekit.types.directory import FlyteDirectory\n```\n\n----------------------------------------\n\nTITLE: Getting Sandbox Status - Flytectl Shell Command\nDESCRIPTION: Retrieves the status of the Flyte sandbox environment that runs as a local Docker container. The command can be customized with various flags to modify its behavior.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_status.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl sandbox status\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl sandbox status [flags]\n```\n\n----------------------------------------\n\nTITLE: Teardown Command with Flags - Shell\nDESCRIPTION: This snippet illustrates how to execute the teardown command with optional flags. The '-h' flag provides help information, and the '-v' flag allows the user to clean up associated Docker volumes, which results in permanent data loss. It is important to use this flag with caution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_teardown.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflytectl demo teardown [flags]\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Flyte Sandbox\nDESCRIPTION: This command removes the Flyte sandbox cluster, cleaning up the Docker container and associated resources. It provides a convenient way to shut down the sandbox environment when it is no longer needed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl sandbox teardown\"\n```\n\n----------------------------------------\n\nTITLE: Executing Workflow with Tags in Flyte CLI\nDESCRIPTION: Command to run a workflow remotely with specified tags using the pyflyte CLI. Demonstrates how to attach tags during execution creation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0001-flyte-execution-tags.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote --tags '[\"hello\", \"world\"]' test.py wf --input1=10\n```\n\n----------------------------------------\n\nTITLE: Running Flytekit Hello World Example Locally\nDESCRIPTION: This command demonstrates how to run a hello world example locally using Flytekit.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\npyflyte run https://raw.githubusercontent.com/flyteorg/flytesnacks/master/examples/basics/basics/hello_world.py hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Multi-Container Configuration\nDESCRIPTION: This flag enables automatic connection opening to new containers/buckets as they are encountered. When enabled, the container argument is ignored.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\n\"--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image\nDESCRIPTION: Commands to build and push the agent Docker image to the local registry.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build -t localhost:30000/flyteagent:example -f Dockerfile.agent . --load\ndocker push localhost:30000/flyteagent:example\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Output in Local Storage\nDESCRIPTION: JavaScript commands to enable debug output in the browser console using localStorage. This allows for debugging specific modules or all Flyte-related output.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/console.rst#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = 'flyte:*' // Enable all Flyte debug output\nlocalStorage.debug = 'flyte:adminEntity' // Enable specific module debug output\n```\n\n----------------------------------------\n\nTITLE: Creating Spark Service Account with GCP Integration\nDESCRIPTION: YAML configuration for creating a dedicated Spark service account with GCP service account annotation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: spark\n  namespace: \"{{ namespace }}\"\n  annotations:\n    iam.gke.io/gcp-service-account: {{ gsa }}\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow Description in Flyte CLI\nDESCRIPTION: This command updates the description of a workflow in Flyte. It specifies the project, domain, and workflow name, along with the new description.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-meta.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update workflow-meta -p flytesnacks -d development core.control_flow.merge_sort.merge_sort --description \"Mergesort workflow example\"\n```\n\n----------------------------------------\n\nTITLE: Installing Kuberay Operator for Ray\nDESCRIPTION: Bash commands to add the Kuberay Helm repo and install the Kuberay operator. This is required for Ray integration in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add kuberay https://ray-project.github.io/kuberay-helm/\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install kuberay-operator kuberay/kuberay-operator --namespace ray-system --version 1.1.0 --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Compile-time PodTemplate Task Definition\nDESCRIPTION: Python task definition with Compile-time PodTemplate configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    pod_template=PodTemplate(\n        primary_container_name=\"primary\",\n        labels={\n          \"label_1\": \"value-1\",\n          \"label_2\": \"value-2\",\n        },\n        annotations={\n          \"annotation_1\": \"value-1\",\n          \"annotation_2\": \"value-2\",\n        },\n        pod_spec=V1PodSpec(\n            containers=[\n                V1Container(\n                    name=\"primary\",\n                    image=\"a.b.c/image:v1\",\n                    command=\"cmd\",\n                    args=[],\n                ),\n            ],\n        )\n    )\n)\ndef t1() -> int:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Slurm Agent with pip\nDESCRIPTION: This command installs the Slurm agent plugin for Flyte using pip. It should be run on both the local machine (Flyte client) and the Slurm cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npip install flytekitplugins-slurm\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorFlow Plugin for Flyte Core\nDESCRIPTION: YAML configuration for enabling the TensorFlow plugin in Flyte core deployment. This sets up the necessary task plugins and default task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - tensorflow\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          tensorflow: tensorflow\n```\n\n----------------------------------------\n\nTITLE: Managing Signals with FlyteRemote\nDESCRIPTION: Example of using FlyteRemote to interact with workflow signals, including listing and setting signal values in remote executions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.remote.remote import FlyteRemote\nfrom flytekit.configuration import Config\nr = FlyteRemote(\n    Config.auto(config_file=\"/Users/ytong/.flyte/dev.yaml\"),\n   default_project=\"flytesnacks\",\n   default_domain=\"development\",\n)\nr.list_signals(\"atc526g94gmlg4w65dth\")\nr.set_signal(\"signal-name\", \"execidabc123\", True)\n```\n\n----------------------------------------\n\nTITLE: Usage Syntax for flytectl update launchplan\nDESCRIPTION: This shows the basic usage syntax for the 'flytectl update launchplan' command. It indicates that the command can take additional flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Core with Helm\nDESCRIPTION: This snippet demonstrates how to add the Flyte Helm repository and install the Flyte core chart using Helm. It specifies the namespace, values file, and chart name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyte https://flyteorg.github.io/flyte\nhelm install -n flyte -f values-eks.yaml --create-namespace flyte flyte/flyte-core\n```\n\n----------------------------------------\n\nTITLE: Working with List Inputs and Outputs\nDESCRIPTION: Example showing how to handle list inputs and outputs in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwf_input_y = imperative_wf.add_workflow_input(\"y\", list[str])\\nnode_t3 = wf.add_entity(some_task, a=[wf.inputs[\"x\"], wf_input_y])\n```\n\nLANGUAGE: python\nCODE:\n```\nwf.add_workflow_output(\\n    \"list_of_outputs\",\\n    [node_t1.outputs[\"o0\"], node_t2.outputs[\"o0\"]],\\n    python_type=list[str],\\n)\n```\n\n----------------------------------------\n\nTITLE: GPU Partition Node Label Configuration in Flyte-Core\nDESCRIPTION: YAML configuration for flyte-core Helm chart to specify the node label key used for GPU partition size. This must match the labels on your Kubernetes worker nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  k8s:\n    plugins:\n      k8s:\n        gpu-partition-size-node-label: \"nvidia.com/gpu.partition-size\" #change to match your node's config\n```\n\n----------------------------------------\n\nTITLE: Running a Workflow on a Specific Cluster\nDESCRIPTION: Command to execute a Flyte workflow remotely, targeting the \"team1\" project in the \"production\" domain. Based on the label configuration, this will run on the second data plane cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote --project team1 --domain production example.py \\\n    training_workflow --hyperparameters '{\"C\": 0.1}'\n```\n\n----------------------------------------\n\nTITLE: Storage Configuration CLI Arguments\nDESCRIPTION: Command line arguments for configuring storage settings in Flyte. Includes options for specifying storage container, HTTP client timeout, multicontainer support, download limits, and storage backend configuration using Stow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-resource-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Creating Default Launch Plan\nDESCRIPTION: Creating a default launch plan with no input specifications\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndefault_lp = LaunchPlan.get_default_launch_plan()\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secret Manager in YAML\nDESCRIPTION: Sets configuration parameters for AWS Secret Manager integration, including sidecar image and resource requirements.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_210\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: 200m\n    memory: 500Mi\n  requests:\n    cpu: 200m\n    memory: 500Mi\nsidecarImage: docker.io/amazon/aws-secrets-manager-secret-sidecar:v0.1.4\n```\n\n----------------------------------------\n\nTITLE: Configuring FlytePropeller Manager with Hash Sharding\nDESCRIPTION: This YAML configuration sets up FlytePropeller Manager with a hash-based sharding strategy, allowing for horizontal scaling of FlytePropeller instances. It specifies the shard type as 'Hash' and sets the number of shards to 4.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  core:\n    # a configuration example using the \"hash\" shard type\n    manager:\n      # pod and scanning configuration redacted\n      # ...\n      shard:\n        type: Hash     # use the \"hash\" shard strategy\n        shard-count: 4 # the total number of shards\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Authentication Type in Flyte\nDESCRIPTION: Specifies the authentication type to use when connecting to Kubernetes clusters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_142\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte CLI Options\nDESCRIPTION: This snippet shows the available command-line options for configuring the Flyte CLI. It includes settings for OpenTelemetry exporters, output formatting, storage backends, and connection parameters. The options cover various aspects such as telemetry endpoints, sampling, storage types, and authentication methods.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_launchplan.rst#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n  --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n  --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n  --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n  --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n  --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n  --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n-p, --project string                               Specifies the Flyte project.\n  --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n  --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n  --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n  --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n  --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n  --storage.connection.endpoint string           URL for storage client to connect to.\n  --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n  --storage.connection.secret-key string         Secret to use when accesskey is set.\n  --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n  --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n  --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n  --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n  --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n  --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n  --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Flytectl Delete Execution Queue Attribute with Config File\nDESCRIPTION: This command deletes execution queue attributes using a configuration file (era.yaml). The file contains information such as domain and project, which are used to identify the attributes to be deleted. The value field in the file is optional during deletion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution-queue-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\n flytectl delete execution-queue-attribute --attrFile era.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Flyte Demo Cluster\nDESCRIPTION: This command removes the Flyte demo cluster, cleaning up the environment. It requires flytectl to be installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl demo teardown\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Resource Limits in Flyte\nDESCRIPTION: Sets resource configuration for Kubernetes clusters including limits and primary label.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_130\n\nLANGUAGE: yaml\nCODE:\n```\nlimit: 0\nprimaryLabel: \"\"\n```\n\n----------------------------------------\n\nTITLE: GPU Partition Node Selector Configuration\nDESCRIPTION: YAML showing the node selector configuration for GPU partitioning. Includes matchExpressions for both the GPU accelerator type and partition size.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: nvidia.com/gpu.accelerator\n            operator: In\n            values:\n            - nvidia-tesla-a100\n          - key: nvidia.com/gpu.partition-size\n            operator: In\n            values:\n            - 2g.10gb\n```\n\n----------------------------------------\n\nTITLE: Reviewing Helm Chart Value Changes\nDESCRIPTION: Commands to install the Helm diff plugin and use it to review changes made to the values file. This helps in understanding the differences between the default and custom configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install https://github.com/databus23/helm-diff\nhelm diff upgrade -f values-sandbox.yaml flyte .\n```\n\n----------------------------------------\n\nTITLE: GPU Resource Toleration in Kubernetes Pod Spec\nDESCRIPTION: YAML configuration showing the toleration that flytepropeller injects into the Kubernetes pod spec when requesting GPU resources. This allows the pod to be scheduled on nodes with matching taints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:    nvidia.com/gpu:NoSchedule op=Exists\n```\n\n----------------------------------------\n\nTITLE: Running Specific Flyte Version\nDESCRIPTION: Runs a specific version of Flyte that is available in the GitHub release. This command ensures the correct version is being used.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --version=v0.14.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Plugins for K8s Service Agent\nDESCRIPTION: YAML configuration to enable the K8s service agent plugin and set it as default for specific task types\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - agent-service\n    default-for-task-types:\n      - dataservicetask: agent-service\n```\n\n----------------------------------------\n\nTITLE: DataCatalog Service Definition\nDESCRIPTION: Core service definition specifying the main operations available in the DataCatalog service including creating/getting datasets and creating artifacts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nservice DataCatalog {\n  rpc CreateDataset(CreateDatasetRequest) returns (CreateDatasetResponse);\n  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse);\n  rpc CreateArtifact(CreateArtifactRequest) returns (CreateArtifactResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Delete workflow execution config by project and domain\nDESCRIPTION: This command deletes the workflow execution configuration for a given project and domain combination. Replace 'flytesnacks' and 'development' with the desired project and domain values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_workflow-execution-config.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl delete workflow-execution-config -p flytesnacks -d development\"\n```\n\n----------------------------------------\n\nTITLE: Python to Flyte Type Mapping Reference Table\nDESCRIPTION: RST-formatted table showing the mapping between Python types and corresponding Flyte types, including conversion methods and additional comments for each type mapping. The table covers primitive types, collections, file types, and specialized data structures.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/index.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n    :widths: auto\n    :header-rows: 1\n\n    * - Python Type\n      - Flyte Type\n      - Conversion\n      - Comment\n    * - ``int``\n      - ``Integer``\n      - Automatic\n      - Use Python 3 type hints.\n    * - ``float``\n      - ``Float``\n      - Automatic\n      - Use Python 3 type hints.\n    * - ``str``\n      - ``String``\n      - Automatic\n      - Use Python 3 type hints.\n    * - ``bool``\n      - ``Boolean``\n      - Automatic\n      - Use Python 3 type hints.\n    * - ``bytes``/``bytearray``\n      - ``Binary``\n      - Not Supported\n      - You have the option to employ your own custom type transformer.\n    * - ``complex``\n      - NA\n      - Not Supported\n      - You have the option to employ your own custom type transformer.\n    * - ``datetime.timedelta``\n      - ``Duration``\n      - Automatic\n      - Use Python 3 type hints.\n    * - ``datetime.datetime``\n      - ``Datetime``\n      - Automatic\n      - Use Python 3 type hints.\n    * - ``datetime.date``\n      - ``Datetime``\n      - Automatic\n      - Use Python 3 type hints.\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Flyte Imperative Workflow\nDESCRIPTION: Imports required dependencies for creating an imperative workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 1\n```\n\n----------------------------------------\n\nTITLE: flytectl delete workflow-execution-config command usage\nDESCRIPTION: Shows the general usage of the flytectl delete workflow-execution-config command with available flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_workflow-execution-config.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl delete workflow-execution-config [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Demo Status Usage\nDESCRIPTION: Demonstrates the basic usage of the `flytectl demo status` command. This command retrieves the status of the demo environment, which usually runs as a local Docker container. No specific dependencies are required beyond having `flytectl` installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_status.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl demo status\"\n```\n\n----------------------------------------\n\nTITLE: Suboptimal Map Task Implementation in Python\nDESCRIPTION: This example shows a suboptimal map task implementation that calls other tasks, which may not provide full performance advantages in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef suboptimal_mappable_task(data_point: int) -> bool:\n    return detect_anomalies(data_point=data_point)\n\n\n@workflow\ndef suboptimal_map_workflow(data: list[int] = [10, 12, 11, 10, 13, 12, 100, 11, 12, 10]) -> list[bool]:\n    return map_task(suboptimal_mappable_task)(data_point=data)\n```\n\n----------------------------------------\n\nTITLE: Normalizing CSV Columns in Python\nDESCRIPTION: This helper function normalizes the columns of a CSV file in-place.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/flytedirectory.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef normalize_columns(file_path: str, column_names: List[str], normalize_columns: List[str]):\n    with open(file_path, \"r\") as file:\n        reader = csv.DictReader(file)\n        rows = list(reader)\n\n    for row in rows:\n        for col in normalize_columns:\n            if col in row:\n                row[col] = row[col].upper()\n\n    with open(file_path, \"w\", newline=\"\") as file:\n        writer = csv.DictWriter(file, fieldnames=column_names)\n        writer.writeheader()\n        writer.writerows(rows)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution by Name in Flytectl CLI\nDESCRIPTION: This command fetches specific execution details by name within a project and domain using Flytectl CLI. Dependencies include a setup Flyte environment. Parameters include '-p' for project, '-d' for domain, and the execution name. The output provides detailed execution information in the default table view format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development oeh94k9r2r\n```\n\n----------------------------------------\n\nTITLE: Defining a Databricks Task in Python\nDESCRIPTION: Example of creating a Spark task that calculates Pi using the Databricks task configuration. This task accesses the Spark session through the flytekit context to run distributed computations on Databricks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_python_environment.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task(task_config=Databricks(...))\ndef hello_spark(partitions: int) -> float:\n    print(\"Starting Spark with Partitions: {}\".format(partitions))\n\n    n = 100000 * partitions\n    sess = flytekit.current_context().spark_session\n    count = (\n        sess.sparkContext.parallelize(range(1, n + 1), partitions).map(f).reduce(add)\n    )\n    pi_val = 4.0 * count / n\n    print(\"Pi val is :{}\".format(pi_val))\n    return pi_val\n```\n\n----------------------------------------\n\nTITLE: Cloud Events JSON Specification Format\nDESCRIPTION: Example JSON structure showing the CloudEvents specification format used by Flyte, including version, type, source, and other required fields.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/cloud_event.rst#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"specversion\" : \"1.0\",\n    \"type\" : \"com.flyte.resource.workflow\",\n    \"source\" : \"https://github.com/flyteorg/flyteadmin\",\n    \"id\" : \"D234-1234-1234\",\n    \"time\" : \"2018-04-05T17:31:00Z\",\n    \"jsonschemaurl\": \"https://github.com/flyteorg/flyteidl/blob/master/jsonschema/workflow_execution.json\",\n    \"data\" : \"workflow execution event\"\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Flyte Binary Configuration\nDESCRIPTION: YAML configuration for enabling the OpenAI Batch agent in Flyte binary deployment, specifying the agent-service plugin and task type mappings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - openai-batch: agent-service\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Flyte Sandbox\nDESCRIPTION: This command allows users to execute commands directly inside the Flyte sandbox container. It facilitates interaction with the sandbox environment for tasks such as debugging, testing, and configuration management.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl sandbox exec -- pwd\\t\"\n```\n\n----------------------------------------\n\nTITLE: Running a Hello World Workflow in Flyte\nDESCRIPTION: This snippet shows how to run a hello world workflow in Flyte. It includes steps for installing Flytekit and executing a remote workflow file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npip install flytekit && export PATH=$PATH:/home/ubuntu/.local/bin\n\npyflyte run --remote https://raw.githubusercontent.com/flyteorg/flytesnacks/master/examples/basics/basics/hello_world.py  hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Configuring Spark Plugin for Flyte Binary on AWS\nDESCRIPTION: YAML configuration for enabling the Spark plugin in Flyte binary deployment on AWS. This sets up the necessary task plugins and default task types for Spark.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - spark\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for flytectl Compile Command\nDESCRIPTION: This section details inherited options from parent commands, including various admin configurations and storage options relevant for authenticating and managing Flyte operations. Each option provides information on usage within the Flyte ecosystem.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_compile.rst#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--admin.authType string                        Type of OAuth2 flow used for communicating with admin.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--admin.authorizationHeader string             Custom metadata header to pass JWT\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--admin.authorizationServerUrl string          This is the URL to your IdP's authorization server.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--admin.clientId string                        Client ID (default \"flytepropeller\")\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--storage.connection.access-key string         Access key to use.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow].\n```\n\n----------------------------------------\n\nTITLE: Using Helm Diff Plugin for Reviewing Changes\nDESCRIPTION: These commands show how to install the Helm diff plugin and use it to review changes made to the values file before applying them to the Flyte installation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install https://github.com/databus23/helm-diff\nhelm diff upgrade -f values-eks.yaml flyte flyte/flyte-core\n```\n\n----------------------------------------\n\nTITLE: Configuring MPI Plugin for Flyte Binary\nDESCRIPTION: YAML configuration for enabling the MPI plugin in Flyte binary deployment. This sets up the necessary task plugins and default task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - mpi\n        default-for-task-types:\n          - container: container\n          - container_array: k8s-array\n          - mpi: mpi\n```\n\n----------------------------------------\n\nTITLE: Artifact and ArtifactData Structure Definition in Flyte\nDESCRIPTION: Defines the structure of Artifact and ArtifactData objects that represent task executions and their outputs in DataCatalog. Includes execution metadata and storage locations for output data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/catalog.rst#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nArtifact {\n       id: uuid\n       Metadata: [executionName, executionVersion]\n       ArtifactData: [List of ArtifactData]\n    }\n\n\n    ArtifactData {\n       Name: <output-name>\n       value: <offloaded storage location of the literal>\n    }\n```\n\n----------------------------------------\n\nTITLE: Usage of flytectl update workflow-meta Command\nDESCRIPTION: This shows the basic usage syntax for the 'flytectl update workflow-meta' command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-meta.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update workflow-meta [flags]\n```\n\n----------------------------------------\n\nTITLE: Assigning Execution to Cluster Pool - Command\nDESCRIPTION: This command shows how to create an execution and assign it to a specific cluster pool while initiating the task execution in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nflytectl create execution --execFile execution_spec.yaml -p flytesnacks -d development --clusterPool my-gpu-cluster\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Multiple Data Plane Credentials\nDESCRIPTION: YAML configuration for a Kubernetes Secret containing authentication tokens and certificates for multiple data plane clusters. These credentials are used by the control plane to communicate with the data planes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\nname: cluster-credentials\nnamespace: flyte\ntype: Opaque\ndata:\ndataplane_1_token: <your-dataplane1-token>\ndataplane_1_cacert: <your-dataplane1-token-certificate>\ndataplane_2_token: <your-dataplane2-token>\ndataplane_2_cacert:  <your-dataplane2-token-certificate>\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Notifications in YAML\nDESCRIPTION: This YAML configuration sets up GCP-based notifications in Flyte, including Pub/Sub topic, subscriber, and SendGrid email settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/notifications.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nworkflow_notifications:\n  enabled: true\n  config:\n    notifications:\n      type: gcp\n      gcp:\n        projectId: \"{{ YOUR PROJECT ID }}\"\n      publisher:\n        topicName: \"{{ YOUR PUB/SUB TOPIC NAME }}\"\n      processor:\n        queueName: \"{{ YOUR PUB/SUB SUBSCRIBER NAME }}\"\n      emailer:\n        emailServerConfig:\n          serviceName: sendgrid\n          apiKeyFilePath: /sendgrid/key\n        subject: \"Flyte execution \\\"{{ name }}\\\" has {{ phase }} in \\\"{{ project }}\\\".\"\n        sender: \"{{ YOUR SENDGRID SENDER EMAIL }}\"\n        body: View details at <a href=https://{{ YOUR FLYTE HOST }}/console/projects/{{ project }}/domains/{{ domain }}/executions/{{ name }}>https://{{ YOUR FLYTE HOST }}/console/projects/{{ project }}/domains/{{ domain }}/executions/{{ name }}</a>\n```\n\n----------------------------------------\n\nTITLE: Setting CloudWatch Template URI in Flyte\nDESCRIPTION: Configures the template URI used when building CloudWatch log links for Flyte tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_151\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Options for flytectl update launchplan\nDESCRIPTION: This snippet lists the specific options available for the 'flytectl update launchplan' command, including flags for activation, deactivation, dry run, and version specification.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --activate         activate launchplan.\n      --archive          (Deprecated) disable the launch plan schedule (if it has an active schedule associated with it).\n      --deactivate       disable the launch plan schedule (if it has an active schedule associated with it).\n      --dryRun           execute command without making any modifications.\n      --force            do not ask for an acknowledgement during updates.\n  -h, --help             help for launchplan\n      --version string   version of the launchplan to be fetched.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution Cluster Labels with flytectl\nDESCRIPTION: Fetch and verify individual project-domain attributes for execution cluster labels using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution-cluster-label -p flyteexamples -d development\n```\n\n----------------------------------------\n\nTITLE: Storage Connection Configuration in Flytectl\nDESCRIPTION: Options for configuring storage connection parameters including authentication, endpoints, and regional settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--storage.connection.access-key string\n--storage.connection.auth-type string\n--storage.connection.disable-ssl\n--storage.connection.endpoint string\n--storage.connection.region string\n--storage.connection.secret-key string\n```\n\n----------------------------------------\n\nTITLE: Configuring ShardingStrategy in YAML\nDESCRIPTION: YAML configuration structure for defining the sharding strategy type and its specific configuration parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1483-flytepropeller-horizontal-scaling.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nShardingStrategy:\n     Type: <name of strategy>\n     Strategy: <strategy specific configuration>\n```\n\n----------------------------------------\n\nTITLE: GPU Partition Node Label Configuration in Flyte-Binary\nDESCRIPTION: YAML configuration for flyte-binary Helm chart to specify the node label key used for GPU partition size. This must match the labels on your Kubernetes worker nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    plugins:\n      k8s:\n       gpu-partition-size-node-label: \"nvidia.com/gpu.partition-size\" #change to match your node's config\n```\n\n----------------------------------------\n\nTITLE: Stow Backend Configuration in Flytectl\nDESCRIPTION: Settings for configuring Stow storage backend type and configuration parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n--storage.stow.config stringToString\n--storage.stow.kind string\n--storage.type string\n```\n\n----------------------------------------\n\nTITLE: Setting Flytectl Configuration Environment Variable\nDESCRIPTION: Command to export the FLYTECTL_CONFIG environment variable for use with a local Flyte cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport FLYTECTL_CONFIG=~/.flyte/config-sandbox.yaml\n```\n\n----------------------------------------\n\nTITLE: Storage Container and Client Settings in Flytectl\nDESCRIPTION: Configuration options for storage containers, HTTP client timeout, and multi-container support.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n--storage.container string\n--storage.defaultHttpClient.timeout string\n--storage.enable-multicontainer\n--storage.limits.maxDownloadMBs int\n```\n\n----------------------------------------\n\nTITLE: Installing Spark Operator\nDESCRIPTION: Bash commands to add the Spark Helm repo and install the Spark operator. This is required for Spark integration in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add spark-operator https://kubeflow.github.io/spark-operator\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install spark-operator spark-operator/spark-operator --namespace spark-operator --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Defining Dataset Message in Protocol Buffers\nDESCRIPTION: Defines the Dataset message which represents a dataset in the data catalog. It contains fields for ID, metadata, and partition keys.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Dataset {\n  DatasetID id = 1;\n  Metadata metadata = 2;\n  repeated string partitionKeys = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flyte Task with Single Logging Decorator\nDESCRIPTION: This snippet defines a Flyte task 't1' that is decorated with the log_io decorator. It demonstrates the use of a single decorator with a Flyte task.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task\n@log_io\ndef t1(x: int) -> int:\n    return x + 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Flytectl Authentication Options\nDESCRIPTION: Command-line options for configuring OAuth2 authentication with FlyteAdmin service, supporting various authentication types and flow configurations\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--admin.authType string\n--admin.clientId string\n--admin.clientSecretEnvVar string\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core Task Plugins\nDESCRIPTION: YAML configuration for values-override.yaml defining enabled plugins and default task types in Flyte core setup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          snowflake: agent-service\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 Task Parameters\nDESCRIPTION: Example configuration parameters for setting up a SQLite3 prebuilt container task, showing the container image, executor type, and task type specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/prebuilt_container_task_plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncontainer_image=\"ghcr.io/flyteorg/flytekit:py38-v0.19.0b7\",\nexecutor_type=SQLite3TaskExecutor,\ntask_type=\"sqlite\",\n```\n\n----------------------------------------\n\nTITLE: Note About Service Integration\nDESCRIPTION: RST note directive explaining the recommendation for starting with flytekit extensions before migrating to backend implementations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/backend_plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\nTalking to a new service can be done using flytekit extensions and usually is the better way to get started. But, once matured, most of these extensions are better to be migrated to the backend. For the rest of the cases, it is possible to extend flytekit to achieve these scenarios, but this is less desirable, because of the associated overhead of first launching a container that launches these jobs downstream.\n```\n\n----------------------------------------\n\nTITLE: Version Command with Flags\nDESCRIPTION: Version command with optional flags support\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_version.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl version [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Workflow with Tags and Description\nDESCRIPTION: Command to execute a workflow with both tags and a text description. Shows how to add metadata during workflow execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0001-flyte-execution-tags.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote --tags '[\"key1\", \"key2\"]' --description \"........\" test.py wf --input1=10\n```\n\n----------------------------------------\n\nTITLE: Implementing Gate Operations with Variable Operations in Python\nDESCRIPTION: Example workflows showing gate implementation using variable operations. Demonstrates three different gate types: approve, wait, and sleep gates using flyte operation functions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-runtime-workflow-control-using-signalling.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef calclulate_expense(v: int) -> int:\n    return v * 2\n\ndef pay(expense: int) -> bool:\n    ...\n    return true\n\n# approve example\n@workflow\ndef my_approve_wf(a: int) -> bool:\n    e = calculate_expense(v=a)\n    ae = flyte.approve(e)\n    return pay(expense=ae)\n   \n# wait example\n@workflow\ndef my_wait_wf(a: int) -> bool:\n    b = flyte.wait()\n    e = calculate_expense(v=b)\n    return pay(expense=e)\n\n# sleep example\n@workflow\ndef my_sleep_wf(a: int) -> bool:\n    sa = flyte.sleep(duration=\"2d\", a)\n    e = calculate_expense(v=sa)\n    return pay(expense=e)\n```\n\n----------------------------------------\n\nTITLE: Node Configuration Default Values\nDESCRIPTION: Default settings for node execution including deadlines, retries, and debug options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_175\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-deadlines:\n  node-active-deadline: 0s\n  node-execution-deadline: 0s\n  workflow-active-deadline: 0s\nmax-node-retries-system-failures: \"3\"\ninterruptible-failure-threshold: \"-1\"\ndefault-max-attempts: \"1\"\nignore-retry-cause: \"false\"\nenable-cr-debug-metadata: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Archiving a Flyte Project Using Command-Line Flag\nDESCRIPTION: This command archives a Flyte project by specifying the project ID with the -p flag and using the --archive flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project -p my-project-id --archive\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements in Flyte Workflow\nDESCRIPTION: This workflow demonstrates how to access elements of a list output using index notation in a Flyte workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/accessing_attributes.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef list_task() -> List[str]:\n    return [\"apple\", \"banana\", \"cherry\"]\n\n\n@workflow\ndef list_workflow():\n    fruits = list_task()\n    print_message(message=fruits[0])\n    print_message(message=fruits[1])\n```\n\n----------------------------------------\n\nTITLE: Testing a Flyte Agent Task Remotely\nDESCRIPTION: Command to test an agent task by running it remotely using pyflyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_development_cluster.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote agent_workflow.py agent_task\n```\n\n----------------------------------------\n\nTITLE: Running Execution from YAML Specification - Command\nDESCRIPTION: This command illustrates how to initiate execution using the generated YAML execution spec file. It specifies the project and domain for the execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflytectl create execution --execFile execution_spec.yaml -p flytesnacks -d staging --targetProject flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Trust Relationship for Data Plane\nDESCRIPTION: JSON configuration for the IAM Trust Relationship of the data plane role, allowing access for flytepropeller and default service accounts in all namespaces.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n         \"Federated\": \"arn:aws:iam::<AWS-ACCOUNT-ID>:oidc-provider/oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE1-OIDC-PROVIDER>\"\n      },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n         \"StringLike\": {\n            \"oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE1-OIDC-PROVIDER>.:aud\": \"sts.amazonaws.com\",\n            \"oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE1-OIDC-PROVIDER>.:sub\": [\n                  \"system:serviceaccount:flyte:flytepropeller\",\n                  \"system:serviceaccount:*:default\"\n            ]\n         }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core with Updated Values\nDESCRIPTION: This command demonstrates how to upgrade an existing Flyte core installation with updated values using Helm.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -f values-eks.yaml flyte flyte/flyte-core\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow Execution Config with YAML in Flyte\nDESCRIPTION: This snippet shows how to update a workflow execution config using a YAML file. It includes settings for max parallelism, security context, and raw output data configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-execution-config.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nmax_parallelism: 5\nsecurity_context:\n  run_as:\n    k8s_service_account: demo\nraw_output_data_config:\n    output_location_prefix: s3://example-data\n```\n\n----------------------------------------\n\nTITLE: Setting Output and Project Options in Flytectl\nDESCRIPTION: Options for specifying output format (TABLE, JSON, YAML, DOT, DOTURL) and project configuration in Flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-o, --output string\n-p, --project string\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Command to upgrade the Flyte core Helm release with the values override file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Final Combined Pod Configuration\nDESCRIPTION: Final Pod configuration after merging all three sources: Runtime PodTemplate, Compile-time PodTemplate, and K8s Plugin Configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  namespace: flytesnacks-development\n  labels:\n    label_1: value-plugin\n    label_2: value-compile\n  annotations:\n    annotation_1: value-plugin\n    annotation_2: value-compile\n    foo: value-runtime\n    bar: value-runtime\n    baz: value-plugin\nspec:\n  containers:\n    - name: default\n      image: docker.io/rwgrim/docker-noop\n      terminationMessagePath: \"/dev/foo\"\n    - name: primary\n      image: a.b.c/image:v1\n      command: cmd\n      args: []\n      # remaining container configuration omitted\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Access in Workflows with Dataclass\nDESCRIPTION: Example demonstrating attribute access in Flyte workflows using dataclasses. The workflow t1 returns a dataclass object, and t2 accesses its attribute 'a' directly in the workflow definition.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\nfrom dataclasses import dataclass\n\n@dataclass\nclass DC:\n    a: int\n\n@task\ndef t1() -> DC:\n    return DC(a=1)\n\n@task\ndef t2(x: int):\n    print(\"x:\", x)\n    return\n\n@workflow\ndef wf():\n  o = t1()\n  t2(x=o.a)\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow-Specific Plugin Override Using flytectl Command\nDESCRIPTION: Command to update plugin overrides for a specific workflow using the flytectl CLI tool and a YAML configuration file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_plugin-override.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update plugin-override --attrFile po.yaml\n```\n\n----------------------------------------\n\nTITLE: Flyte Core GPU Configuration\nDESCRIPTION: YAML configuration for Flyte Core to control GPU node selection and tolerations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  k8s:\n    plugins:\n      k8s:\n        gpu-unpartitioned-node-selector-requirement :\n          key: cloud.google.com/gke-gpu-partition-size #change to match your node label configuration\n          operator: Equal\n          value: DoesNotExist\n```\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  k8s:\n    plugins:\n      k8s:\n        gpu-unpartitioned-toleration:\n          effect: NoSchedule\n          key: cloud.google.com/gke-gpu-partition-size\n          operator: Equal\n          value: DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Flytectl Demo Help\nDESCRIPTION: Displays the help message for the `flytectl demo` command, outlining available subcommands and options. It requires flytectl to be installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"-h, --help   help for demo\"\n```\n\n----------------------------------------\n\nTITLE: Activating Flyte Project Using YAML File\nDESCRIPTION: This command activates a Flyte project using a YAML file and the --archive flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project --file update.yaml --archive\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Chart\nDESCRIPTION: Bash command to upgrade the Flyte core Helm chart. It requires specifying the release name, namespace, and values override file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Transactions Per Second in YAML\nDESCRIPTION: Sets the maximum number of transactions per second to Flyte admin from this client.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_177\n\nLANGUAGE: yaml\nCODE:\n```\n\"100\"\n```\n\n----------------------------------------\n\nTITLE: Python MessagePack Implementation\nDESCRIPTION: Python implementation for encoding and decoding values using MessagePack library, showing conversion between Python values and binary format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport msgpack\n\n# Encode\ndef to_literal():\n  msgpack_bytes = msgpack.dumps(python_val)\n  return Literal(scalar=Scalar(binary=Binary(value=b'msgpack_bytes', tag=\"msgpack\")))\n\n# Decode\ndef to_python_value():\n    # lv: literal value\n    if lv.scalar.binary.tag == \"msgpack\":\n        msgpack_bytes = lv.scalar.binary.value\n    else:\n        raise ValueError(f\"{tag} is not supported to decode this Binary Literal: {lv.scalar.binary}.\")\n    return msgpack.loads(msgpack_bytes)\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake Private Key Secret\nDESCRIPTION: Creates a Kubernetes secret containing the Snowflake private key for authentication in the flytesnacks-development namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic private-key --from-file=snowflake=<YOUR PRIVATE KEY FILE> --namespace=flytesnacks-development\n```\n\n----------------------------------------\n\nTITLE: Defining AdminService gRPC Interface\nDESCRIPTION: Comprehensive gRPC service definition for Flyte's admin API that handles task, workflow, launch plan, execution and project management. The service is also exposed over HTTP via grpc-gateway with standard response codes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/service/service.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nservice AdminService {\n  // Task Operations\n  rpc CreateTask(TaskCreateRequest) returns (TaskCreateResponse);\n  rpc GetTask(ObjectGetRequest) returns (Task);\n  rpc ListTaskIds(NamedEntityIdentifierListRequest) returns (NamedEntityIdentifierList);\n  rpc ListTasks(ResourceListRequest) returns (TaskList);\n\n  // Workflow Operations\n  rpc CreateWorkflow(WorkflowCreateRequest) returns (WorkflowCreateResponse);\n  rpc GetWorkflow(ObjectGetRequest) returns (Workflow);\n  rpc ListWorkflowIds(NamedEntityIdentifierListRequest) returns (NamedEntityIdentifierList);\n  rpc ListWorkflows(ResourceListRequest) returns (WorkflowList);\n\n  // Launch Plan Operations\n  rpc CreateLaunchPlan(LaunchPlanCreateRequest) returns (LaunchPlanCreateResponse);\n  rpc GetLaunchPlan(ObjectGetRequest) returns (LaunchPlan);\n  rpc GetActiveLaunchPlan(ActiveLaunchPlanRequest) returns (LaunchPlan);\n  rpc ListActiveLaunchPlans(ActiveLaunchPlanListRequest) returns (LaunchPlanList);\n  rpc ListLaunchPlanIds(NamedEntityIdentifierListRequest) returns (NamedEntityIdentifierList);\n  rpc ListLaunchPlans(ResourceListRequest) returns (LaunchPlanList);\n  rpc UpdateLaunchPlan(LaunchPlanUpdateRequest) returns (LaunchPlanUpdateResponse);\n\n  // Execution Operations\n  rpc CreateExecution(ExecutionCreateRequest) returns (ExecutionCreateResponse);\n  rpc RelaunchExecution(ExecutionRelaunchRequest) returns (ExecutionCreateResponse);\n  rpc RecoverExecution(ExecutionRecoverRequest) returns (ExecutionCreateResponse);\n  rpc GetExecution(WorkflowExecutionGetRequest) returns (Execution);\n  rpc UpdateExecution(ExecutionUpdateRequest) returns (ExecutionUpdateResponse);\n  rpc GetExecutionData(WorkflowExecutionGetDataRequest) returns (WorkflowExecutionGetDataResponse);\n  rpc ListExecutions(ResourceListRequest) returns (ExecutionList);\n  rpc TerminateExecution(ExecutionTerminateRequest) returns (ExecutionTerminateResponse);\n\n  // Project Operations\n  rpc RegisterProject(ProjectRegisterRequest) returns (ProjectRegisterResponse);\n  rpc UpdateProject(Project) returns (ProjectUpdateResponse);\n  rpc ListProjects(ProjectListRequest) returns (Projects);\n\n  // Additional Operations...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Trust Relationship for Control Plane\nDESCRIPTION: JSON configuration for the IAM Trust Relationship of the control plane role, allowing access for flyteadmin and datacatalog service accounts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n      {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n               \"Federated\": \"arn:aws:iam::<ACCOUNT-ID>:oidc-provider/oidc.eks.<REGION>.amazonaws.com/id/<CONTROLPLANE-OIDC-PROVIDER>\"\n            },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n         \"StringEquals\": {\n            \"oidc.eks.<REGION>.amazonaws.com/id/<CONTROLPLANE-OIDC-PROVIDER>:aud\": \"sts.amazonaws.com\",\n            \"oidc.eks.<REGION>.amazonaws.com/id/<CONTROLPLANE-OIDC-PROVIDER>:sub\": [\n                  \"system:serviceaccount:flyte:flyteadmin\",\n                  \"system:serviceaccount:flyte:datacatalog\"\n                  ]\n               }\n            }\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Cache Settings in Flytectl\nDESCRIPTION: Parameters for configuring in-memory blob store cache size and garbage collection behavior.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--storage.cache.max_size_mbs int\n--storage.cache.target_gc_percent int\n```\n\n----------------------------------------\n\nTITLE: Bash completion setup for flytectl\nDESCRIPTION: This snippet shows how to load bash completion for flytectl in the current session and how to set it up for each new session on Linux and macOS. It uses the `source` command and redirects the output of `flytectl completion bash` to the appropriate completion directories.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_completion.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ source <(flytectl completion bash)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"$ flytectl completion bash > /etc/bash_completion.d/flytectl\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"$ flytectl completion bash > /usr/local/etc/bash_completion.d/flytectl\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Runtime PodTemplate Resource in YAML\nDESCRIPTION: This YAML defines a Kubernetes PodTemplate resource that can be used as a runtime PodTemplate in Flyte, specifying labels, annotations, and container configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PodTemplate\nmetadata:\n  name: flyte-template\n  namespace: flyte\ntemplate:\n  metadata:\n    labels:\n      foo: from-pod-template\n    annotations:\n      foo: initial-value\n      bar: initial-value\n  spec:\n    containers:\n      - name: default\n        image: docker.io/rwgrim/docker-noop\n        terminationMessagePath: \"/dev/foo\"\n    hostNetwork: false\n```\n\n----------------------------------------\n\nTITLE: Runtime PodTemplate Definition\nDESCRIPTION: Example of a Runtime PodTemplate defined in the execution namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PodTemplate\nmetadata:\n  name: flyte-template\n  namespace: flytesnacks-development\ntemplate:\n  metadata:\n    annotations:\n      annotation_1: initial-value\n      bar: initial-value\n  spec:\n    containers:\n      - name: default\n        image: docker.io/rwgrim/docker-noop\n        terminationMessagePath: \"/dev/foo\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Enum Type Usage\nDESCRIPTION: Basic imports required for using Enum types in Flyte, including the Enum class from the enum module and Flytekit decorators.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/enum_type.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nfrom flytekit import task, workflow\nfrom typing import Tuple\n```\n\n----------------------------------------\n\nTITLE: Updating Inputs for Execution - YAML\nDESCRIPTION: This snippet illustrates how to modify the inputs of the generated execution specification YAML file. Users can change the values of the inputs before execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: 'arn:aws:iam::12345678:role/defaultrole'\ninputs:\nsorted_list1:\n- 2\n- 4\n- 6\nsorted_list2:\n- 1\n- 3\n- 5\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntask: core.control_flow.merge_sort.merge\nversion: \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gang Scheduler for K8s Scheduler Plugins\nDESCRIPTION: YAML configuration for setting up a gang scheduler using Kubernetes scheduler plugins with co-scheduling. This is optional for distributed training jobs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate:\n  spec:\n    schedulerName: \"scheduler-plugins-scheduler\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte on GCP with Spark Integration\nDESCRIPTION: Configuration for deploying Flyte on Google Cloud Platform with Spark integration. Includes task plugin settings, Google service account configuration, and GCS-specific Spark settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n inline:\n   tasks:\n     task-plugins:\n       enabled-plugins:\n         - container\n         - sidecar\n         - k8s-array\n         - spark\n       default-for-task-types:\n         - container: container\n         - container_array: k8s-array\n         - spark: spark\n   cluster_resources:\n     - production:\n       - gsa:\n           value: <GoogleServiceAccount-EMAIL>\n     - staging:\n       - gsa:\n           value: <GoogleServiceAccount-EMAIL>\n     - development:\n       - gsa:\n           value: <GoogleServiceAccount-EMAIL>\n   plugins:\n     spark:\n     # Edit the Spark configuration as you see fit\n       spark-config-default:\n         - spark.eventLog.enabled: \"true\"\n         - spark.eventLog.dir: \"{{ .Values.userSettings.bucketName }}/spark-events\"\n         - spark.driver.cores: \"1\"\n         - spark.executorEnv.HTTP2_DISABLE: \"true\"\n         - spark.hadoop.fs.AbstractFileSystem.gs.impl: com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS\n         - spark.kubernetes.allocation.batch.size: \"50\"\n         - spark.kubernetes.driverEnv.HTTP2_DISABLE: \"true\"\n         - spark.network.timeout: 600s\n         - spark.executorEnv.KUBERNETES_REQUEST_TIMEOUT: 100000\n         - spark.executor.heartbeatInterval: 60s\n\nclusterResourceTemplates:\n inline:\n   #This section automates the creation of the project-domain namespaces\n   - key: aa_namespace\n```\n\n----------------------------------------\n\nTITLE: Starting Development Cluster\nDESCRIPTION: Runs a development cluster, which only has MinIO and PostgreSQL pods. This is a simplified setup for development purposes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --dev\n```\n\n----------------------------------------\n\nTITLE: Executing Teardown Command - Shell\nDESCRIPTION: This code snippet demonstrates the basic command to execute the teardown operation for the demo environment. It requires no special prerequisites beyond having flytectl installed and configured to access the Flyte environment. The command removes the demo cluster and all associated configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_teardown.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl demo teardown\n```\n\n----------------------------------------\n\nTITLE: Default Environment Variables Configuration in YAML\nDESCRIPTION: Default null value for environment variables.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_90\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Workflow Spec JSON Example\nDESCRIPTION: JSON representation of a workflow specification showing node connections in the DAG structure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/component_architecture/flytepropeller_architecture.rst#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"spec\": {\n    \"connections\": {\n        \"n0\": [\n            \"n1\"\n        ],\n        \"n1\": [\n            \"n2\"\n        ],\n        \"n2\": [\n            \"end-node\"\n        ],\n        \"start-node\": [\n            \"n0\",\n            \"n2\"\n        ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Ray Configuration\nDESCRIPTION: Configuration for Ray including dashboard settings, node configurations, and logging settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\ndashboardHost: 0.0.0.0\ndashboardURLTemplate: null\ndefaults:\n  headNode:\n    ipAddress: $MY_POD_IP\n    startParameters:\n      disable-usage-stats: \"true\"\n  workerNode:\n    ipAddress: $MY_POD_IP\n    startParameters:\n      disable-usage-stats: \"true\"\nenableUsageStats: false\nincludeDashboard: true\nlogs:\n  cloudwatch-enabled: false\n  cloudwatch-log-group: \"\"\n  cloudwatch-region: \"\"\n  cloudwatch-template-uri: \"\"\n  dynamic-log-links: null\n  gcp-project: \"\"\n  kubernetes-enabled: false\n  kubernetes-template-uri: \"\"\n  kubernetes-url: \"\"\n  stackdriver-enabled: false\n  stackdriver-logresourcename: \"\"\n  stackdriver-template-uri: \"\"\n  templates: null\nlogsSidecar: null\nremoteClusterConfig:\n  auth:\n    caCertPath: \"\"\n    tokenPath: \"\"\n  enabled: false\n  endpoint: \"\"\n  name: \"\"\nserviceAccount: \"\"\nserviceType: NodePort\nshutdownAfterJobFinishes: true\nttlSecondsAfterFinished: 3600\n```\n\n----------------------------------------\n\nTITLE: Running Latest Pre-release of Flyte\nDESCRIPTION: Starts the demo with the latest pre-release version of Flyte. This is useful for testing new features before they are officially released.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --pre\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Scheduled Launch Plan in Flyte\nDESCRIPTION: Command to deactivate (archive) a specific version of a launch plan using flytectl, which will stop the schedule from running.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/schedules.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan -p flyteexamples -d development {{ name_of_lp }} --version <foo> --archive\n```\n\n----------------------------------------\n\nTITLE: Creating Launch Plan Execution\nDESCRIPTION: Command to create an execution instance using the prepared specification file\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_launch_plans.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create execution -p flytesnacks -d development --execFile exec_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Binary Helm Chart\nDESCRIPTION: Helm chart configuration for single cluster Flyte deployment option\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../charts/flyte-binary/Chart.yaml\n   :language: yaml\n   :caption: charts/flyte-binary/Chart.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Data Plane Values\nDESCRIPTION: YAML configuration for the Flyte data plane, specifying the admin endpoint and catalog cache settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  admin:\n    admin:\n      endpoint: <your-Ingress-FQDN>:443 #indicate the URL you're using to connect to Flyte\n      insecure: false #enables secure communication over SSL. Requires a signed certificate\n  catalog:\n    catalog-cache:\n      endpoint: <your-datacatalog-address>\n      insecure: false \n```\n\n----------------------------------------\n\nTITLE: Setting up K3s Cluster with Minio and Postgres for Flyte Development\nDESCRIPTION: Commands to start a K3s cluster and create pods for Postgres and Minio, which are used for storage in Flyte. Also includes steps to verify the cluster setup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Step 1: Start k3s cluster, create Pods for postgres and minio.\nflytectl demo start --dev\n\n# Step 2: Export FLYTECTL_CONFIG as the previous log indicated.\nFLYTECTL_CONFIG=/home/ubuntu/.flyte/config-sandbox.yaml\n\n# Step 3: Check that we can access the K3s cluster. Verify that postgres and minio are running.\nkubectl get pod -n flyte\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core Propeller\nDESCRIPTION: This YAML snippet defines the configuration for Flyte Core Propeller, including leader election, workflow management, and queue settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.core.propeller:\n  downstream-eval-duration: \"30s\"\n  enable-admin-launcher: true\n  leader-election:\n    enabled: true\n    lease-duration: \"15s\"\n    lock-config-map:\n      name: \"propeller-leader\"\n      namespace: \"flyte\"\n    renew-deadline: \"10s\"\n    retry-period: \"2s\"\n  limit-namespace: \"all\"\n  max-workflow-retries: 30\n  metadata-prefix: \"metadata/propeller\"\n  metrics-prefix: \"flyte\"\n  prof-port: 10254\n  queue:\n    batch-size: -1\n    batching-interval: \"2s\"\n    queue:\n      base-delay: \"5s\"\n      capacity: 1000\n      max-delay: \"120s\"\n      rate: 100\n      type: \"maxof\"\n    sub-queue:\n      capacity: 100\n      rate: 10\n      type: \"bucket\"\n    type: \"batch\"\n  rawoutput-prefix: \"s3://my-s3-bucket/\"\n  workers: 4\n  workflow-reeval-duration: \"30s\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Stow Backend Configuration Options\nDESCRIPTION: Configures the Stow backend for storage. `--storage.stow.config` provides configuration key-value pairs. `--storage.stow.kind` specifies the kind of Stow backend to use. Refer to github/flyteorg/stow for details.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\"\n      \"--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release for BigQuery Agent\nDESCRIPTION: This Bash command upgrades the Flyte binary Helm release with the new configuration for the BigQuery agent. It requires specifying the release name, namespace, and the YAML file with the updated configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/bigquery.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for StructuredDataset Example\nDESCRIPTION: Import statements for using StructuredDataset with pandas and other required libraries.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/structureddataset.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport os\nimport typing\n\nimport pandas as pd\nimport pyarrow as pa\nfrom flytekit import task, workflow\nfrom flytekit.configuration import Config\nfrom flytekit.types.structured import (StructuredDataset,\n                                        StructuredDatasetFormat,\n                                        StructuredDatasetType)\nfrom flytekit.types.structured.structured_dataset import (\n    PARQUET,\n    StructuredDatasetDecoder,\n    StructuredDatasetEncoder,\n    StructuredDatasetTransformerEngine,\n)\nimport numpy as np\nfrom typing import Any, Dict, Optional, Type\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Admin Configuration for Overrides\nDESCRIPTION: Configuration sample for FlyteAdmin to use either the database or a ConfigMap as the source for overrides. When set to 'configmap', the system uses a declarative style for managing overrides, which necessitates mounting the ConfigMap. This configuration allows for flexible management choices.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3749-sane-overridable-defaults.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nflyteadmin:\n  overrides:\n    # Points to deprecated matchable overrides written by flytectl\n    sourceType: db \n```\n\nLANGUAGE: yaml\nCODE:\n```\nflyteadmin:\n  overrides:\n    sourceType: configmap\n    sourcePath: /etc/flyte/overrides/\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to the Flyte Project\nDESCRIPTION: This command changes the current directory to the newly created Flyte project directory `hello-world`. This is necessary before running the workflow if the project was initialized using `pyflyte init`.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/quickstart_guide.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-world\n```\n\n----------------------------------------\n\nTITLE: Linking Docker Socket for Linux in Bash\nDESCRIPTION: This command creates a symbolic link to the Docker socket file on Linux, resolving Docker connectivity issues when using Docker Desktop.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s ~$USER/.docker/desktop/docker.sock /var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Command to upgrade Flyte binary deployment using Helm with custom values\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sagemaker_inference.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL database settings in YAML\nDESCRIPTION: Sets default configuration for PostgreSQL database connection, including host, port, credentials, and options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndbname: postgres\ndebug: false\nhost: localhost\noptions: sslmode=disable\npassword: postgres\npasswordPath: \"\"\nport: 30001\nreadReplicaHost: localhost\nusername: postgres\n```\n\n----------------------------------------\n\nTITLE: Scheduler Policy Protobuf Definition\nDESCRIPTION: Protobuf definition for scheduler policy that includes concurrency control settings. It defines the maximum number of parallel executions, handling policy, and concurrency level.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/RFC-5659-execution-concurrency.md#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SchedulerPolicy {\n   // Defines how many executions with this launch plan can run in parallel\n   uint32 max = 1;\n\n   // Defines how to handle the execution when the max concurrency is reached.\n   ConcurrencyPolicy policy = 2;\n\n   ConcurrencyLevel level = 3;\n}\n\nenum ConcurrencyLevel {\n  // Applies concurrency limits across all launch plan versions.\n  LAUNCH_PLAN = 0;\n  \n  // Applies concurrency at the versioned launch plan level\n  LAUNCH_PLAN_VERSION = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release (Bash)\nDESCRIPTION: This Bash command upgrades the Flyte binary Helm release with the new configuration for the Airflow agent. It requires specifying the release name, namespace, and the YAML file containing the configuration changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/airflow.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Defining QualityOfService Proto\nDESCRIPTION: Protobuf definition for quality of service specifications including tier and custom attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage QualityOfService {\n  Tier tier = 1;\n  QualityOfServiceSpec spec = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Data Plane Helm Chart for AWS\nDESCRIPTION: Bash command to install the Flyte data plane Helm chart on an AWS EKS cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm install flyte-core-data flyteorg/flyte-core -n flyte \\\n--values values-eks.yaml --values values-dataplane.yaml \\\n--create-namespace\n```\n\n----------------------------------------\n\nTITLE: Compiled Workflow Definitions in Protocol Buffers\nDESCRIPTION: Defines message types for compiled workflows and tasks, including CompiledWorkflow, CompiledTask, and CompiledWorkflowClosure which contains all information needed to start a workflow execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CompiledWorkflowClosure {\n  CompiledWorkflow primary = 1;\n  repeated CompiledWorkflow sub_workflows = 2;\n  repeated CompiledTask tasks = 3;\n}\n\nmessage CompiledWorkflow {\n  WorkflowTemplate template = 1;\n  ConnectionSet connections = 2;\n}\n\nmessage CompiledTask {\n  TaskTemplate template = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Public Key to Slurm Cluster\nDESCRIPTION: This command copies the generated public SSH key to the Slurm cluster for passwordless authentication. Replace <username> and <fqdn-or-ip> with appropriate values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nssh-copy-id <username>@<fqdn-or-ip>\n```\n\n----------------------------------------\n\nTITLE: PowerShell completion setup for flytectl\nDESCRIPTION: This snippet outlines the process for configuring PowerShell completion for flytectl. It demonstrates how to load the completion script for the current session using `flytectl completion powershell | Out-String | Invoke-Expression`, and how to make it permanent by saving the script to `flytectl.ps1` and sourcing it from your PowerShell profile.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_completion.rst#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n\" PS> flytectl completion powershell | Out-String | Invoke-Expression\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n\" PS> flytectl completion powershell > flytectl.ps1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatGPT Agent in Flyte Binary YAML\nDESCRIPTION: YAML configuration for enabling the ChatGPT agent in Flyte binary. It specifies the agent-service plugin and sets the default agent for ChatGPT tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - chatgpt: agent-service\n\nplugins:\n  agent-service:\n    # Configuring the timeout is optional.\n    # Tasks like using ChatGPT with a large model might require a longer time, \n    # so we have the option to adjust the timeout setting here.\n    defaultAgent:\n      timeouts:\n        ExecuteTaskSync: 10s\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Account with GCP Workload Identity\nDESCRIPTION: YAML configuration for creating a default service account with GCP Workload Identity annotation for GKE integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: default\n  namespace: {{ namespace }}\n  annotations:\n    # Annotation needed for GCP Workload Identity to function\n    # https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity\n    iam.gke.io/gcp-service-account: {{ gsa }}\n```\n\n----------------------------------------\n\nTITLE: Navigation List Table in Markdown/RST\nDESCRIPTION: A list table providing navigation links to different sections of the Flyte fundamentals documentation. It includes links to pages about tasks and workflows, registering workflows, running and scheduling workflows, Jupyter notebook interaction, visualization, optimization, and extension options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {doc}`🔀 Tasks, workflows and launch plans <tasks_workflows_and_launch_plans>`\n  - Create tasks as building blocks, compose them into workflows, and schedule\n    them with launch plans.\n* - {doc}`🗄 Registering workflows <registering_workflows>`\n  - Develop and deploy workflows to a local Flyte demo cluster.\n* - {doc}`⏱ Running and scheduling workflows <running_and_scheduling_workflows>`\n  - Execute workflows programmatically and schedule them as cron jobs.\n* - {doc}`📙 Jupyter notebook interaction <jupyter_notebook_interaction>`\n  - Develop and debug Flyte workflows interactively in Jupyter notebooks.\n* - {doc}`📊 Visualizing task input and output <visualizing_task_input_and_output>`\n  - Create rich, customizable static reports for increased visibility into tasks.\n* - {doc}`🏎 Optimizing tasks <optimizing_tasks>`\n  - Make tasks scalable, performant, and robust to unexpected failures.\n* - {doc}`🔌 Extending Flyte <extending_flyte>`\n  - Customize Flyte types and tasks to fit your needs.\n```\n```\n\n----------------------------------------\n\nTITLE: Visualize Workflow Graph in DOTURL Format\nDESCRIPTION: Retrieves a specific workflow and outputs its graph as a DOT URL. The workflow name is provided, the `--latest` flag retrieves the latest version, and the `-o doturl` flag specifies the DOTURL output format. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development  core.flyte_basics.basic_workflow.my_wf --latest -o doturl\"\n```\n\n----------------------------------------\n\nTITLE: Flyte Project YAML Configuration\nDESCRIPTION: Example YAML configuration for creating a Flyte project, including project name, ID, labels, and description.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nproject.yaml\nname: Human readable project name\nid: project-x\nlabels:\n  - k: v\n  - k1: v1\ndescription: |\n  Long description\n```\n\n----------------------------------------\n\nTITLE: Deleting Task Resource Attributes via Command Line - Flytectl (Shell)\nDESCRIPTION: This command allows users to delete specific task resource attributes for a given project and domain by providing the necessary parameters. It includes example usage for specifying the project, domain, and workflow name as well as using a configuration file for attribute deletion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_task-resource-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl delete task-resource-attribute -p flytesnacks -d development\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl delete task-resource-attribute --attrFile tra.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl delete task-resource-attribute -p flytesnacks -d development core.control_flow.merge_sort.merge_sort\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Cluster Resource Templates for Flyte\nDESCRIPTION: Templates for automating the creation of Kubernetes resources needed for Flyte, including namespaces, service accounts with AWS IAM role annotations, and RBAC configurations for Spark jobs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nclusterResourceTemplates:\n  inline:\n    #This section automates the creation of the project-domain namespaces\n    - key: aa_namespace\n      value: |\n        apiVersion: v1\n        kind: Namespace\n        metadata:\n          name: {{ namespace }}\n        spec:\n          finalizers:\n          - kubernetes\n    # This block performs the automated annotation of KSAs across all project-domain namespaces\n    - key: ab_service_account\n      value: |\n        apiVersion: v1\n        kind: ServiceAccount\n        metadata:\n          name: default\n          namespace: '{{ namespace }}'\n          annotations:\n            eks.amazonaws.com/role-arn: '{{ defaultIamRole }}'\n    - key: ac_spark_role\n      value: |\n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: Role\n        metadata:\n          name: spark-role\n          namespace: \"{{ namespace }}\"\n        rules:\n        - apiGroups: [\"*\"]\n          resources:\n          - pods\n          verbs:\n          - '*'\n        - apiGroups: [\"*\"]\n          resources:\n          - services\n          verbs:\n          - '*'\n        - apiGroups: [\"*\"]\n          resources:\n          - configmaps\n          verbs:\n          - '*'\n        - apiGroups: [\"*\"]\n          resources:\n          - persistentvolumeclaims\n          verbs:\n          - \"*\"\n    - key: ad_spark_service_account\n      value: |\n        apiVersion: v1\n        kind: ServiceAccount\n        metadata:\n          name: spark\n          namespace: \"{{ namespace }}\"\n          annotations:\n            eks.amazonaws.com/role-arn: '{{ defaultIamRole }}'\n    - key: ae_spark_role_binding\n      value: |\n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: RoleBinding\n        metadata:\n          name: spark-role-binding\n          namespace: \"{{ namespace }}\"\n        roleRef:\n          apiGroup: rbac.authorization.k8s.io\n          kind: Role\n          name: spark-role\n        subjects:\n          - kind: ServiceAccount\n            name: spark\n            namespace: \"{{ namespace }}\"\n```\n\n----------------------------------------\n\nTITLE: Viewing/Editing Flyte Single Binary Configuration File\nDESCRIPTION: Commands to navigate to the Flyte directory and open the single binary YAML configuration file for editing.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_development_cluster.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd flyte\nvim ./flyte-single-binary-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte DataCatalog Deployment\nDESCRIPTION: This YAML snippet defines the deployment configuration for Flyte DataCatalog, including image details, resources, and service settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.datacatalog:\n  affinity: {}\n  configPath: \"/etc/datacatalog/config/*.yaml\"\n  image:\n    pullPolicy: \"IfNotPresent\"\n    repository: \"cr.flyte.org/flyteorg/datacatalog\"\n    tag: \"1.15.1\"\n  nodeSelector: {}\n  podAnnotations: {}\n  replicaCount: 1\n  resources:\n    limits:\n      cpu: \"500m\"\n      ephemeral-storage: \"100Mi\"\n      memory: \"500Mi\"\n    requests:\n      cpu: \"10m\"\n      ephemeral-storage: \"50Mi\"\n      memory: \"50Mi\"\n  service:\n    annotations:\n      projectcontour.io/upstream-protocol.h2c: \"grpc\"\n    type: \"NodePort\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Command to upgrade a Flyte core Helm release with new configuration values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Basic Slurm Commands\nDESCRIPTION: Examples of basic Slurm commands to verify cluster setup and job submission.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsinfo\nsrun -N 1 hostname\n```\n\n----------------------------------------\n\nTITLE: Databricks WebAPI Plugin Configuration\nDESCRIPTION: Default WebAPI plugin configuration for Databricks including caching, rate limiters, and resource quotas.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_120\n\nLANGUAGE: yaml\nCODE:\n```\ncaching:\n  maxSystemFailures: 5\n  resyncInterval: 30s\n  size: 500000\n  workers: 10\nreadRateLimiter:\n  burst: 100\n  qps: 10\nresourceMeta: null\nresourceQuotas:\n  default: 1000\nwriteRateLimiter:\n  burst: 100\n  qps: 10\n```\n\n----------------------------------------\n\nTITLE: Example execution spec file\nDESCRIPTION: Example of an execution spec file generated by flytectl.  It defines the inputs, target project, domain, task, and version for an execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"iamRoleARN: \\\"\\\"\\ninputs:\\n  sorted_list1:\\n  - 0\\n  sorted_list2:\\n  - 0\\nkubeServiceAcct: \\\"\\\"\\ntargetDomain: \\\"\\\"\\ntargetProject: \\\"\\\"\\ntask: core.control_flow.merge_sort.merge\\nversion: v2\"\n```\n\n----------------------------------------\n\nTITLE: Activating a Scheduled Launch Plan in Flyte Using flytectl\nDESCRIPTION: Command to activate a specific version of a launch plan using flytectl, which will enable the schedule to run. This command specifies the project, domain, and version of the launch plan.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/schedules.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan -p flyteexamples -d development {{ name_of_lp }} --version <foo> --activate\n```\n\n----------------------------------------\n\nTITLE: Combined Pod Configuration Result\nDESCRIPTION: Resulting Pod configuration after merging Runtime and Compile-time PodTemplates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  namespace: flytesnacks-development\n  labels:\n    label_1: value-1  # from Compile-time value\n    label_2: value-2  # from Compile-time value\n  annotations:\n    annotation_1: value-1  # value overridden by Compile-time PodTemplate\n    annotation_2: value-2  # from Compile-time PodTemplate\n    bar: initial-value  # from Runtime PodTemplate\nspec:\n  containers:\n    - name: default\n      image: docker.io/rwgrim/docker-noop\n      terminationMessagePath: \"/dev/foo\"\n    - name: primary\n      image: a.b.c/image:v1\n      command: cmd\n      args: []\n      # remaining container configuration omitted\n```\n\n----------------------------------------\n\nTITLE: Generating Task Execution Spec with Flytectl\nDESCRIPTION: Command to generate an execution specification file for a Flyte task using Flytectl CLI\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get tasks -d development -p flytesnacks workflows.example.generate_normal_df  --latest --execFile exec_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceAccount in Kubernetes - YAML\nDESCRIPTION: This snippet creates a ServiceAccount named 'default' in a specified Namespace and adds GCP service account annotations for authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: default\n  namespace: '{{ namespace'}}'\n  annotations:\n    iam.gke.io/gcp-service-account: {{ gsa }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Executions in Flytectl CLI\nDESCRIPTION: This command retrieves all execution resources within the specified project and domain using Flytectl CLI. The required dependencies include a Flyte project and domain setup. The main parameters are '-p' for project and '-d' for domain. It outputs a list of executions in default table format, which can be filtered and sorted using additional options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Merged Pod Configuration Result\nDESCRIPTION: Example of resulting Pod configuration after merging default PodTemplate with K8s plugin configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example-pod\n  namespace: flytesnacks-development\n  labels:\n    foo: from-pod-template # maintained initial value\n    bar: from-default-label # value appended by k8s plugin configuration\n  annotations:\n    foo: overridden-value # value overridden by k8s plugin configuration\n    bar: initial-value # maintained initial value\n    baz: non-overridden-value # value added by k8s plugin configuration\nspec:\n  containers:\n    - name: ax9kd5xb4p8r45bpdv7v-n0-0\n      image: ghcr.io/flyteorg/flytecookbook:core-bfee7e549ad749bfb55922e130f4330a0ebc25b0\n      terminationMessagePath: \"/dev/foo\"\n      # remaining container configuration omitted\n  hostNetwork: true # overridden by the k8s plugin configuration\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flyte Projects with Flytectl\nDESCRIPTION: Demonstrates how to use the 'get' command to retrieve a list of projects or a specific project using Flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl --endpoint \"example.flyte.net\" get projects\n$ flytectl --endpoint \"example.flyte.net\" --project \"p\" --domain \"d\" delete workflows\n$ flytectl --endpoint \"example.flyte.net\" get projects <project-name>\n$ flytectl --endpoint \"example.flyte.net\" --project \"p\" --domain \"d\" delete workflows \"W1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensor Agent in Flyte Binary\nDESCRIPTION: YAML configuration to enable the sensor agent in Flyte binary installation. This configuration adds the agent-service plugin and sets it as the default for sensor tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - sensor: agent-service\n```\n\n----------------------------------------\n\nTITLE: Editing Flyte Sandbox Config for BigQuery Agent in YAML\nDESCRIPTION: This YAML snippet shows the configuration changes needed to enable the BigQuery agent in the Flyte sandbox config. It adds the 'agent-service' to the enabled plugins and sets it as the default for 'bigquery_query_job_task'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/bigquery.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - bigquery_query_job_task: agent-service\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: Command to spin up a demo cluster using flytectl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Execution Input in YAML\nDESCRIPTION: This YAML file example shows how to define inputs for a Flyte execution, including nested structures and various data types. It demonstrates the format for specifying complex data structures in Flyte tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: \"\"\ninputs:\n  input:\n    a: 1\n    b: 3.14\n    c: example_string\n    d:\n      \"1\": 100\n      \"2\": 200\n    e:\n      a: 1\n      b: 3.14\nenvs: {}\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntask: dataclass_example.dataclass_task\nversion: OSyTikiBTAkjBgrL5JVOVw\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Type Information in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to display badges showing the version, type, and app version of the Flyte binary Helm chart.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-binary/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Version: v0.1.10](https://img.shields.io/badge/Version-v0.1.10-informational?style=flat-square) ![Type: application](https://img.shields.io/badge/Type-application-informational?style=flat-square) ![AppVersion: 1.16.0](https://img.shields.io/badge/AppVersion-1.16.0-informational?style=flat-square)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for flytectl update launchplan\nDESCRIPTION: This snippet lists the options inherited from parent commands, including various configuration settings for authentication, admin server communication, logging, and storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n```\n\n----------------------------------------\n\nTITLE: Setting Slurm Private Key as Kubernetes Secret\nDESCRIPTION: This command sets the Slurm private key as a base64 encoded secret in the Kubernetes cluster. Replace your_slurm_private_key_path with the actual path to your private key file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nSECRET_VALUE=$(base64 < your_slurm_private_key_path) && \\\nkubectl patch secret flyteagent -n flyte --patch \"{\\\"data\\\":{\\\"flyte_slurm_private_key\\\":\\\"$SECRET_VALUE\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Slurm Cluster\nDESCRIPTION: Sample configuration for slurm.conf file, including cluster name, control machines, and compute nodes settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nClusterName=localcluster\n\nSlurmctldHost=localhost\n\nProctrackType=proctrack/linuxproc\n\nSlurmctldLogFile=/var/log/slurm/slurmctld.log\nSlurmdLogFile=/var/log/slurm/slurmd.log\n\nNodeName=localhost CPUs=<cpus> RealMemory=<available-mem> Sockets=<sockets> CoresPerSocket=<cores-per-socket> ThreadsPerCore=<threads-per-core> State=UNKNOWN\nPartitionName=debug Nodes=ALL Default=YES MaxTime=INFINITE State=UP\n```\n\n----------------------------------------\n\nTITLE: YAML Delta Benchmark Result Example\nDESCRIPTION: This YAML snippet shows an example of comparing the delta between two benchmark results. It shows how performance improvements or regressions can be quantified with delta values to evaluate different approaches.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/2995-performance-benchmarking.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"flyte.benchmark.chained-cache:\\n  duration: -10s\\n  flyteOverhead: -2.4%\\n  nodes:\\n  - n1:\\n    duration: -2s\\n    flyteOverhead: -0.1%\\n  - n2:\\n    ...\\n  events:\\n    workflow:\\n      count: +0\\n      latency:\\n        p50: +0.1ms\\n        p90: +0.2ms\\n        p99: -0.1ms\\n    node:\\n      count: -2\\n      latency:\\n        ...\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Ingress for Flyte-binary on EKS using ALB\nDESCRIPTION: YAML configuration to enable ingress for a Flyte-binary deployment on Amazon EKS using Application Load Balancer (ALB). It includes annotations for ALB-specific settings and SSL certificate.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_production.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  create: true\n  host: flyte.example.com\n  annotations:\n    kubernetes.io/ingress.class: alb\n    alb.ingress.kubernetes.io/scheme: internet-facing\n    alb.ingress.kubernetes.io/target-type: ip\n    alb.ingress.kubernetes.io/listen-ports: '[{\"HTTP\": 80}, {\"HTTPS\":443}]'\n    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-2:xxxxxxxxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n  tls:\n    - secretName: flyte-tls\n      hosts:\n        - flyte.example.com\n```\n\n----------------------------------------\n\nTITLE: Node Execution Context in Go\nDESCRIPTION: Code showing how the last retry attempt is handled on non-interruptible machines to ensure task completion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3902-simplify-retry-behaviour.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Link: github.com/flyteorg/flytepropeller/blob/a3c6e91f19c19601a957b29891437112868845de/pkg/controller/nodes/node_exec_context.go#L213\n// Executes last retry on non-interruptible machine\n```\n\n----------------------------------------\n\nTITLE: Complete Cluster Credentials Secret\nDESCRIPTION: Final secret configuration with both token and CA certificate\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cluster-credentials\n  namespace: flyte\ntype: Opaque\ndata:\n  dataplane_1_token: <your-dataplane1-token>\n  dataplane_1_cacert: <your-dataplane1-token-certificate>\n```\n\n----------------------------------------\n\nTITLE: Installing Kubeflow Training Operator for PyTorch/TensorFlow/MPI\nDESCRIPTION: Installs the Kubeflow training-operator using kubectl. This operator is required for PyTorch, TensorFlow, and MPI integrations in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k \"github.com/kubeflow/training-operator/manifests/overlays/standalone?ref=v1.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Data Plane Helm Chart for GCP\nDESCRIPTION: Bash command to install the Flyte data plane Helm chart on a GCP GKE cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm install flyte-core-data -n flyte flyteorg/flyte-core  \\\n      --values values-gcp.yaml \\\n      --values values-dataplane.yaml \\\n      --create-namespace flyte\n```\n\n----------------------------------------\n\nTITLE: Retrieve project by name\nDESCRIPTION: This command retrieves a specific project by its name. Replace `flytesnacks` with the actual project name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Installing Flyteagent Pod using Helm\nDESCRIPTION: Bash command to add the Flyte Helm repository and install the flyteagent pod in the Flyte namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\nhelm install flyteagent flyteorg/flyteagent --namespace flyte\n```\n\n----------------------------------------\n\nTITLE: Creating Snowflake JWT Token Secret\nDESCRIPTION: Kubernetes manifest for creating a secret containing the Snowflake JWT token\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: flyte-binary-external-services\n  namespace: flyte\ntype: Opaque\nstringData:\n  FLYTE_SNOWFLAKE_CLIENT_TOKEN: <JWT_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Admonition Block for Additional Resources\nDESCRIPTION: An admonition block highlighting additional resources for learning about Flyte, including links to the User Guide for comprehensive functionality and the Deployment Guide for production deployment instructions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{admonition} Learn more\n:class: important\n\nFor a comprehensive view of all of Flyte's functionality, see the\n{ref}`User Guide <userguide>`, and to learn how to deploy a production Flyte\ncluster, see the {ref}`Deployment Guide <deployment>`.\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Flyte Execution Details\nDESCRIPTION: This snippet shows how to retrieve details of a Flyte execution to check its state before or after termination. It uses the domain and project flags to specify the environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nflytectl get execution  -d development  -p flytesnacks\n ------------ ------------------------------------------------------------------------- ---------- ----------- -------------------------------- --------------- \n| NAME (7)   | WORKFLOW NAME                                                           | TYPE     | PHASE     | STARTED                        | ELAPSED TIME  |\n ------------ ------------------------------------------------------------------------- ---------- ----------- -------------------------------- --------------- \n| c6a51x2l9e | recipes.core.basic.lp.go_greet                                          | WORKFLOW | ABORTED   | 2021-02-17T08:13:04.680476300Z | 15.540361300s |\n ------------ ------------------------------------------------------------------------- ---------- ----------- -------------------------------- --------------- \n```\n\n----------------------------------------\n\nTITLE: Integrating Flyte Golang Compile Script in Makefile\nDESCRIPTION: This Makefile snippet demonstrates how to add a compile_linux target that uses the Flyte Golang compile script. It requires specifying the packages to compile and the output path.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/flyte_golang_compile/Readme.rst#2025-04-16_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\n.PHONY: compile_linux\ncompile_linux:\n  PACKAGES={{ *your packages }} OUTPUT={{ /path/to/output }} ./boilerplate/flyte/flyte_golang_compile.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Spark ServiceAccount in Kubernetes - YAML\nDESCRIPTION: This snippet creates a ServiceAccount named 'spark' in a specified Namespace, associated with a GCP service account for authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: spark\n  namespace: \"{{ namespace }}\"\n  annotations:\n    iam.gke.io/gcp-service-account: {{ gsa }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Databricks Spark Task\nDESCRIPTION: Python code demonstrating a Spark task implementation using Databricks plugin with custom configurations\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0-b5.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport random\nfrom operator import add\n\nimport flytekit\nfrom flytekit import Resources, task, workflow\n\nfrom flytekitplugins.spark.task import Databricks\n\n@task(\n    task_config=Databricks(\n        spark_conf={\n            \"spark.driver.memory\": \"1000M\",\n            \"spark.executor.memory\": \"1000M\",\n            \"spark.executor.cores\": \"1\",\n            \"spark.executor.instances\": \"2\",\n            \"spark.driver.cores\": \"1\",\n        },\n        databricks_conf={\n           \"run_name\": \"flytekit databricks plugin example\",\n           \"new_cluster\": {\n               \"spark_version\": \"11.0.x-scala2.12\",\n               \"node_type_id\": \"r3.xlarge\",\n               \"aws_attributes\": {\n                   \"availability\": \"ON_DEMAND\",\n                   \"instance_profile_arn\": \"arn:aws:iam::123123123:instance-profile/databricks-s3-role\",\n               },\n               \"num_workers\": 4,\n           },\n           \"timeout_seconds\": 3600,\n           \"max_retries\": 1,\n       }\n    ),\n    limits=Resources(mem=\"2000M\"),\n    cache_version=\"1\",\n)\ndef hello_spark(partitions: int) -> float:\n    print(\"Starting Spark with Partitions: {}\".format(partitions))\n\n    n = 100000 * partitions\n    sess = flytekit.current_context().spark_session\n    count = (\n        sess.sparkContext.parallelize(range(1, n + 1), partitions).map(f).reduce(add)\n    )\n    pi_val = 4.0 * count / n\n    print(\"Pi val is :{}\".format(pi_val))\n    return pi_val\n```\n\n----------------------------------------\n\nTITLE: URL Configuration\nDESCRIPTION: Default URL configuration settings including query parameters, fragments, and host settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nForceQuery: false\nFragment: \"\"\nHost: \"\"\nOmitHost: false\nOpaque: \"\"\nPath: \"\"\nRawFragment: \"\"\nRawPath: \"\"\nRawQuery: \"\"\nScheme: \"\"\nUser: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options for Flyte CLI\nDESCRIPTION: These command-line options allow users to configure storage backends for Flyte. Options include setting up Stow configuration, specifying the Stow backend type, and choosing the overall storage type (e.g., S3, Minio, local). These settings are crucial for defining how Flyte interacts with different storage systems.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_cluster-resource-attribute.rst#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Token as Kubernetes Secret\nDESCRIPTION: Bash command to encode the OpenAI API token in base64 and set it as a Kubernetes secret for the flyteagent.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSECRET_VALUE=$(echo -n \"<OPENAI_API_TOKEN>\" | base64) && \\\nkubectl patch secret flyteagent -n flyte --patch \"{\\\"data\\\":{\\\"flyte_openai_api_key\\\":\\\"$SECRET_VALUE\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Type in YAML\nDESCRIPTION: Sets the type of storage to configure in Flyte. Options include s3, minio, local, mem, and stow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_185\n\nLANGUAGE: yaml\nCODE:\n```\ns3\n```\n\n----------------------------------------\n\nTITLE: Proposed Hash-Annotated Task Implementation\nDESCRIPTION: Shows how to use typing.Annotated to implement hash-based caching for DataFrames using custom hash methods.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef foo(a: int, b: str) -> Annotated[pd.DataFrame, HashMethod(hash_pandas_dataframe_function) :\n    df = pd.Dataframe(...)\n    ...\n    return df\n\n@task(cached=True, version=\"1.0\")\ndef bar(df: pd.Dataframe) -> int:\n    ...\n\n@workflow\ndef wf(a: int, b: str):\n    df = foo(a=a, b=b)\n    v = bar(df=df)\n```\n\n----------------------------------------\n\nTITLE: Copying Additional Files in ImageSpec\nDESCRIPTION: This snippet demonstrates how to copy additional files or directories into the container using ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.image_spec import ImageSpec\nfrom flytekit import task, workflow\n\nimage_spec = ImageSpec(\n    name=\"image_with_copy\",\n    registry=\"localhost:30000\",\n    builder=\"default\",\n    copy=[\"files/input.txt\"],\n)\n\n@task(container_image=image_spec)\ndef my_task() -> str:\n    with open(\"/root/files/input.txt\", \"r\") as f:\n        return f.read()\n```\n\n----------------------------------------\n\nTITLE: Defining GetArtifactRequest Message in Protocol Buffers\nDESCRIPTION: Defines the GetArtifactRequest message for retrieving an Artifact. It includes fields for dataset, artifact_id, and tag_name to specify the artifact to retrieve.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetArtifactRequest {\n  DatasetID dataset = 1;\n  string artifact_id = 2;\n  string tag_name = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Task Execution Configuration in YAML\nDESCRIPTION: YAML configuration specifying task execution parameters including AWS IAM role, input parameters, and task identification details\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/running_tasks.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: 'arn:aws:iam::12345678:role/defaultrole'\ninputs:\n  n: 200\n  mean: 0.0\n  sigma: 1.0\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntask: workflows.example.generate_normal_df\nversion: \"v1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PyTorch Plugin for Flyte Binary\nDESCRIPTION: YAML configuration for enabling the PyTorch plugin in Flyte binary deployment. This sets up the necessary task plugins and default task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - pytorch\n        default-for-task-types:\n          - container: container\n          - container_array: k8s-array\n          - pytorch: pytorch\n```\n\n----------------------------------------\n\nTITLE: Initializing Flytectl Config for Remote Cluster with Insecure Connection\nDESCRIPTION: This command sets up a Flytectl configuration for a remote Flyte cluster but allows for an insecure connection. This may be used in development environments where SSL is not set up.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_init.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl config init --host=flyte.myexample.com --insecure\n```\n\n----------------------------------------\n\nTITLE: Building Flyte Components as a Single Binary for Development\nDESCRIPTION: Steps to clone the Flyte repository and build all Flyte components into a single binary for development purposes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Step 1: Clone flyte repo\ngit clone https://github.com/flyteorg/flyte.git\ncd flyte\n\n# Step 2: Build a single binary that bundles all the Flyte components.\nsudo apt-get -y install jq # You may need to install jq\nmake clean # (Optional) Run this only if you want to run the newest version of flyteconsole\nmake go-tidy\nmake compile\n\n# Step 3: Prepare a namespace template for the cluster resource controller.\n```\n\n----------------------------------------\n\nTITLE: Installing Dask Operator\nDESCRIPTION: Bash commands to add the Dask Helm repo and install the Dask operator. This is required for Dask integration in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add dask https://helm.dask.org\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install dask-operator dask/dask-kubernetes-operator --namespace dask-operator --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release with Athena Plugin\nDESCRIPTION: Bash command to upgrade the Flyte binary Helm release with the new configuration that includes the Athena plugin. It requires specifying the release name, namespace, and YAML file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/athena.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: This command initiates the Flyte demo cluster, setting up a fully standalone minimal environment for running Flyte locally using a single Docker container. No specific dependencies are listed beyond flytectl being installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl demo start\"\n```\n\n----------------------------------------\n\nTITLE: Mounting Source Code in Demo Cluster\nDESCRIPTION: Mounts the specified source code repository inside the demo cluster. This is useful for testing with your local code changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --source=$HOME/flyteorg/flytesnacks\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Databricks Plugin\nDESCRIPTION: Default configuration for the Flyte Databricks plugin. Includes settings for Databricks instance, token key, default warehouse, and resource constraints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\ndatabricksInstance: \"\"\ndatabricksTokenKey: FLYTE_DATABRICKS_API_TOKEN\ndefaultWarehouse: COMPUTE_CLUSTER\nentrypointFile: \"\"\nresourceConstraints:\n  NamespaceScopeResourceConstraint:\n    Value: 50\n  ProjectScopeResourceConstraint:\n    Value: 100\nwebApi:\n  caching:\n    maxSystemFailures: 5\n    resyncInterval: 30s\n    size: 500000\n    workers: 10\n  readRateLimiter:\n    burst: 100\n    qps: 10\n  resourceMeta: null\n  resourceQuotas:\n    default: 1000\n  writeRateLimiter:\n    burst: 100\n    qps: 10\n```\n\n----------------------------------------\n\nTITLE: Storage Limits Configuration\nDESCRIPTION: Maximum download size limit configuration in megabytes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n\"2\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Flyte V0.2.0 Release Notes in Markdown\nDESCRIPTION: This Markdown document outlines the major changes and improvements in Flyte version 0.2.0. It includes sections for Core Platform enhancements, Flytekit (SDK) improvements, and mentions general bug fixes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.2.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte V0.2.0\n\n## Changes since v0.1.0\n\n### Core Platform\n- Go Mod support\n- Go 1.13 upgrade\n- OAuth Support (CLI, UI, Admin)\n- Standardized pull request templates & OSS process standardization\n- PluginMachinery and flexible statemachine for Arbitrary plugins\n- Improved Engine performance, reliability and write requirements to etcD (scalability)\n- Backoff support\n- Timeouts\n- Dynamic workflow support\n- Resource manager per project/domain\n- RawOutputDirectories created in FlytePropeller\n- Improve visibility and observability\n- User/System error differentiation\n- Optional interruptible tasks (let's use spot instances, to reduce cost)\n- Caps on queue time for workflows\n- Multi cluster improvements\n- Visibility into execution cluster for the execution\n- Add descriptions to Identifiers (Projects, Workflows etc)\n- Configuration improvements throughout - You can configure Flyte for your environment\n- Multi Cluster placement manager\n\n### Flytekit (SDK improvements)\n- Subworkflow support\n- Collaboration of Workflows support (Workflow fetch)\n- Three-legged OAuth and basic authentication support\n- Fetch the latest version of a task instead of having to specify a version\n\n### And of course Bug fixes throughout!\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Slurm Cluster Access\nDESCRIPTION: This SSH configuration enables key-based authentication for the Slurm cluster. It should be added to the ~/.ssh/config file on the local machine.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nHost <host-alias>\n  HostName <fqdn-or-ip>\n  Port <ssh-port>\n  User <username>\n  IdentityFile <path-to-private-key>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for S3 Access\nDESCRIPTION: This configuration sets the AWS access key and secret for S3 access. It should be added to the ~/.aws/credentials file on both the local machine and Slurm cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = <aws-access-key-id>\naws_secret_access_key = <aws-secret-access-key>\n```\n\n----------------------------------------\n\nTITLE: Catalog Artifact and Metadata Definitions in Protocol Buffers\nDESCRIPTION: Defines message types for catalog artifacts, tags and metadata used in Flyte's caching system. Includes CatalogArtifactTag, CatalogMetadata, and status enums for cache operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CatalogArtifactTag {\n  string artifact_id = 1;\n  string name = 2;\n}\n\nmessage CatalogMetadata {\n  Identifier dataset_id = 1;\n  CatalogArtifactTag artifact_tag = 2;\n  TaskExecutionIdentifier source_task_execution = 3;\n}\n\nenum CatalogCacheStatus {\n  CACHE_DISABLED = 0;\n  CACHE_MISS = 1;\n  CACHE_HIT = 2;\n  CACHE_POPULATED = 3;\n  CACHE_LOOKUP_FAILURE = 4;\n  CACHE_PUT_FAILURE = 5;\n  CACHE_SKIPPED = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Connection in YAML\nDESCRIPTION: Sets the storage connection configuration for Flyte, including access key, authentication type, SSL settings, endpoint, region, and secret key.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_186\n\nLANGUAGE: yaml\nCODE:\n```\naccess-key: \"\"\nauth-type: iam\ndisable-ssl: false\nendpoint: \"\"\nregion: us-east-1\nsecret-key: \"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Flytectl Config for Sandbox Environment\nDESCRIPTION: This command generates a Flytectl configuration file in the default Flyte directory, which is located at ~/.flyte. This is particularly useful for setting up a local sandbox environment to run Flyte applications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_init.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl config init\n```\n\n----------------------------------------\n\nTITLE: Generating BCrypt Hash with Python\nDESCRIPTION: Python script to generate a bcrypt hash for the flytepropeller password using bcrypt library and base64 encoding.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install bcrypt && python -c 'import bcrypt; import base64; print(base64.b64encode(bcrypt.hashpw(\"<your-random-password>\".encode(\"utf-8\"), bcrypt.gensalt(6))))')\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release with Athena Plugin\nDESCRIPTION: Bash command to upgrade the Flyte core Helm release with the new configuration that includes the Athena plugin. It requires specifying the release name, namespace, and the values-override.yaml file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/athena.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieve projects with filters\nDESCRIPTION: This command retrieves projects based on specified filter criteria. It uses the `--filter.fieldSelector` flag to filter based on a specific field, such as the project name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project --filter.fieldSelector=\"project.name=flytesnacks\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyteagent Deployment\nDESCRIPTION: Bash command to rollout restart the flyteagent deployment in the Flyte namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyteagent -n flyte\n```\n\n----------------------------------------\n\nTITLE: Values Override Configuration for Flyte Core\nDESCRIPTION: YAML configuration for enabling Databricks plugin in Flyte core deployment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/databricks.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenabled_plugins:\n  tasks:\n    task-plugins:\n      enabled-plugins:\n        - container\n        - sidecar\n        - k8s-array\n        - agent-service\n      default-for-task-types:\n        container: container\n        sidecar: sidecar\n        container_array: k8s-array\n        databricks: agent-service\n```\n\n----------------------------------------\n\nTITLE: Node State Transitions\nDESCRIPTION: Mermaid flowchart illustrating the complete node state machine including dynamic nodes and retry logic.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/state_machine.rst#2025-04-16_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n     id1(( ))\n     id1-->NotYetStarted\n     id1-->|Will stop the node execution |Aborted\n     NotYetStarted-->|If all upstream nodes are ready, i.e, inputs are ready | Queued\n     NotYetStarted--> |If the branch was not taken |Skipped\n     Queued-->|Start task execution- attempt 0 | Running\n     Running-->|If task timeout has elapsed and retry_attempts >= max_retries|TimingOut\n     Running-->|Internal state|Succeeding\n     Running-->|For dynamic nodes generating workflows| DynamicRunning\n     DynamicRunning-->TimingOut\n     DynamicRunning-->RetryableFailure\n     TimingOut-->|If total node timeout has elapsed|TimedOut\n     DynamicRunning-->Succeeding\n     Succeeding-->|User observes the task as succeeded| Succeeded\n     Running-->|on retryable failure| RetryableFailure\n     RetryableFailure-->|if retry_attempts < max_retries|Running\n     RetryableFailure-->|retry_attempts >= max_retries|Failing\n     Failing-->Failed\n     Succeeded-->id2(( ))\n     Failed-->id2(( ))\n```\n\n----------------------------------------\n\nTITLE: Retrieve task by name\nDESCRIPTION: Retrieves a specific task by its fully qualified name within a Flyte project and domain.  This allows targeting a specific task for inspection or further operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl task -p flytesnacks -d development core.basic.lp.greet\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Local Runnable Task\nDESCRIPTION: Create a task that can be executed locally, which will be used alongside the mockable SQL task in a workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/mocking_tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef t1(x: str) -> str:\n    return x + \" appended\"\n```\n\n----------------------------------------\n\nTITLE: Identity Service User Info Method\nDESCRIPTION: Defines an RPC method for retrieving user information about the currently authenticated user, following OpenID Connect specifications\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/service/service.rst#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nservice IdentityService {\n  rpc UserInfo(UserInfoRequest) returns (UserInfoResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace in Kubernetes - YAML\nDESCRIPTION: This snippet defines a Namespace resource for Kubernetes, specifying finalizers that ensure proper clean-up of resources when the Namespace is deleted.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: {{ namespace }}\nspec:\n  finalizers:\n  - kubernetes\n```\n\n----------------------------------------\n\nTITLE: Downloading Slurm Source\nDESCRIPTION: Commands to download and extract the Slurm source package.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmkdir <your-clean-dir> && cd <your-clean-dir>\nwget https://download.schedmd.com/slurm/slurm-24.05.5.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Filter Comparison Operator Definition\nDESCRIPTION: Enumeration defining comparison operators for property filtering, currently supporting only EQUALS operation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nenum ComparisonOperator {\n  EQUALS = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Assembler for Kubernetes Jobs in Flyte\nDESCRIPTION: Sets workqueue configuration for the error assembler, including worker count and retry settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_136\n\nLANGUAGE: yaml\nCODE:\n```\nmaxItems: 100000\nmaxRetries: 5\nworkers: 10\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Launch Plan in Flyte using flytectl\nDESCRIPTION: This command deactivates a launch plan, which deschedules any scheduled job associated with it. It specifies the project, domain, launch plan name, and version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan -p flytesnacks -d development core.control_flow.merge_sort.merge_sort --version v1 --deactivate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Launch Plans with flytectl Command in Shell\nDESCRIPTION: This shell command retrieves launch plans within a specified project and domain using the 'flytectl get launchplan' command. It supports filtering by workflow, state, and version, and can output results in various formats such as YAML and JSON. The command requires the flytectl tool and proper access credentials to communicate with the Flyte backend.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_launchplan.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development core.basic.lp.go_greet\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development core.basic.lp.go_greet --latest\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development core.basic.lp.go_greet --version v2\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development --workflow core.flyte_basics.lp.go_greet\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development --filter.fieldSelector=\"name=core.basic.lp.go_greet\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development -o yaml  --filter.fieldSelector \"state=1\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development -o yaml  --filter.fieldSelector \"state=0\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development k8s_spark.dataframe_passing.my_smart_schema --filter.fieldSelector=\"version=v1\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development --filter.sortBy=created_at --filter.limit=1 --filter.asc\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get -p flytesnacks -d development launchplan --filter.limit=10 --filter.page=2\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development -o yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -p flytesnacks -d development -o json\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get launchplan -d development -p flytesnacks core.control_flow.merge_sort.merge_sort --execFile execution_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Execution Cluster Labels with flytectl\nDESCRIPTION: Use flytectl to update execution cluster labels based on the attributes defined in the 'ec.yaml' file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-cluster-label --attrFile ec.yaml\n```\n\n----------------------------------------\n\nTITLE: Visualizing OpenID Connect Authentication Flow in Flyte UI\nDESCRIPTION: This Mermaid sequence diagram illustrates the OpenID Connect authentication flow for users accessing the Flyte UI. It shows the interactions between the User, Browser, Console, Admin, and Identity Provider (IdP) during the login process.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_appendix.rst#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n%%{config: { 'fontFamily': 'Menlo', 'fontSize': 10, 'fontWeight': 100} }%%\n    autonumber\n    User->>+Browser: /home\n    Browser->>+Console: /home\n    Console->>-Browser: 302 /login\n    Browser->>+Admin: /login\n    Admin->>-Browser: Idp.com/oidc\n    Browser->>+Idp: Idp.com/oidc\n    Idp->>-Browser: 302 /login\n    Browser->>-User: Enter user/pass\n    User->>+Browser: login\n    Browser->>+Idp: Submit username/pass\n    Idp->>-Browser: admin/?authCode=<abc>\n    Browser->>+Admin: admin/authCode=<abc>\n    Admin->>+Idp: Exchange Tokens\n    Idp->>-Admin: idt, at, rt\n    Admin->>+Browser: Write Cookies & Redirect to /console\n    Browser->>+Console: /home\n    Browser->>-User: Render /home\n```\n\n----------------------------------------\n\nTITLE: Running Workflows with pyflyte in Flyte v1.0.0\nDESCRIPTION: Example showing how to use the updated pyflyte run command syntax that no longer requires a colon when selecting the workflow. This command executes a remote workflow with specific parameter values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.0.0.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pyflyte run --remote example.py wf --n 500 --mean 42 --sigma 2\n```\n\n----------------------------------------\n\nTITLE: AWS Plugin List Table in RST\nDESCRIPTION: RST list-table directive defining the available AWS plugins and their descriptions, including Batch, Athena, and Sagemaker.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/index.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`AWS Batch <deployment-plugin-setup-aws-array>`\n  - Guide to setting up the AWS Batch plugin.\n* - {ref}`AWS Athena <deployment-plugin-setup-aws-athena>`\n  - Guide to setting up the AWS Athena plugin.\n* - {ref}`AWS Sagemaker <deployment-plugin-setup-aws-sagemaker>`\n  - Guide to setting up the AWS Sagemaker plugin.\n```\n\n----------------------------------------\n\nTITLE: ResourceManager Interface in Go\nDESCRIPTION: Go interface definition for the ResourceManager, including methods for allocating and releasing resources. This interface provides the core functionality for managing resource allocations in Flyte plugins.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/resource_manager.rst#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ResourceManager interface {\nGetID() string\n// During execution, the plugin calls AllocateResource() to register a token in the token pool associated with a resource\n// If it is granted an allocation, the token is recorded in the token pool until the same plugin releases it.\n// When calling AllocateResource, the plugin has to specify a ResourceConstraintsSpec that contains resource capping constraints at different project and namespace levels.\n// The ResourceConstraint pointers in ResourceConstraintsSpec can be set to nil to not have a constraint at that level\nAllocateResource(ctx context.Context, namespace ResourceNamespace, allocationToken string, constraintsSpec ResourceConstraintsSpec) (AllocationStatus, error)\n// During execution, after an outstanding request is completed, the plugin uses ReleaseResource() to release the allocation of the token from the token pool. This way, it redeems the quota taken by the token\nReleaseResource(ctx context.Context, namespace ResourceNamespace, allocationToken string) error\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigMap Update for Databricks Agent\nDESCRIPTION: YAML configuration to enable Databricks agent in Flyte demo cluster\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/databricks.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    default-for-task-types:\n      container: container\n      container_array: k8s-array\n      sidecar: sidecar\n      databricks: agent-service\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorFlow Plugin for Flyte Binary\nDESCRIPTION: YAML configuration for enabling the TensorFlow plugin in Flyte binary deployment. This sets up the necessary task plugins and default task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - tensorflow\n        default-for-task-types:\n          - container: container\n          - container_array: k8s-array\n          - tensorflow: tensorflow\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Flyte Sandbox Cluster\nDESCRIPTION: This command demonstrates how to tear down the Flyte sandbox cluster after finishing development. It uses the flytectl demo teardown command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflytectl demo teardown\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Pub/Sub Events in FlyteAdmin\nDESCRIPTION: YAML configuration for enabling GCP Cloud Pub/Sub event publishing in FlyteAdmin. Specifies the GCP project ID, event types to publish, and topic name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/eventing.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncloud_events.yaml: |\n  cloudEvents:\n    enable: true\n    gcp:\n      projectId: my-project-id\n    eventsPublisher:\n      eventTypes:\n      - all # or node, task, workflow\n      topicName: my-topic\n    type: gcp\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Flyte Service - Bash Command\nDESCRIPTION: Command to set up port forwarding for the Flyte Kubernetes service on ports 8088 and 8089 for HTTP and gRPC traffic respectively.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_simple.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n flyte port-forward service/flyte-binary 8088:8088 8089:8089\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Plugins in YAML\nDESCRIPTION: This YAML configuration enables specific task plugins, including Spark, which is necessary for running Spark tasks in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - K8S-ARRAY\n      - spark\n    default-for-task-types:\n      - container: container\n      - container_array: K8S-ARRAY\n```\n\n----------------------------------------\n\nTITLE: Flyte Project Updates Changelog\nDESCRIPTION: Markdown formatted changelog detailing updates across three main components: Flytekit improvements including fast register and native Python typing, FlyteConsole UI enhancements, and Flyte Platform infrastructure changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.9.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Flytekit\n* [Fast register](https://docs.flyte.org/en/latest/flyte_fundamentals/registering_workflows.html) - code only changes no longer need a rebuild of the container to run.\n* Project archive/activate command in flyte-cli\n* Bug fixes and misc improvements\n\nPlease take a look at the newest [alpha release](https://github.com/lyft/flytekit/releases/tag/v0.16.0a0) of Flytekit (v0.16.0a0) which introduces native Python based typing, and a new way of workflow authoring that enables local workflow execution.\nFor examples of the native typed SDK usage refer to: [Cookbook Examples](https://github.com/lyft/flytesnacks/tree/annotated/cookbook/recipes/native_typing)\n\n### FlyteConsole\n- Better Single task launch support\n- Launch form with more types supported\n- Bug and stability fixes\n\n### Flyte Platform\n - SparkOperator v1beta2 support\n - Archive/Unarchive projects\n - Bug Fixes\n```\n\n----------------------------------------\n\nTITLE: Starting MUNGE Service\nDESCRIPTION: Commands to enable MUNGE service at boot and restart it.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl enable munge\nsudo systemctl restart munge\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Dependencies with Helm\nDESCRIPTION: Commands to add the Flyte Helm repository and install the Flyte dependencies chart. This snippet demonstrates how to use Helm to deploy Flyte's required components in a Kubernetes cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-deps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyte https://flyteorg.github.io/flyte\nhelm install -n flyte --create-namespace flyte flyte/flyte-deps\n```\n\n----------------------------------------\n\nTITLE: TypeAnnotation Protobuf Message Definition\nDESCRIPTION: Definition of new TypeAnnotation message and modification of LiteralType to include annotation field\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1855-type-metadata.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TypeAnnotation {\n  google.protobuf.Struct annotations = 1;\n  // string type_hint = 2;\n  // google.protobuf.Struct json_schema = 2;\n ...\n}\n\nmessage LiteralType \n{\n...\n   TypeAnnotation annotation = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyteagent Deployment\nDESCRIPTION: Command to restart the flyteagent deployment after configuration changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyteagent -n flyte\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Plugin for Helm Chart\nDESCRIPTION: YAML configuration for enabling Snowflake plugin in Helm chart deployment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - snowflake\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - snowflake: snowflake\n```\n\n----------------------------------------\n\nTITLE: Installing FlyteCTL with Shell Script\nDESCRIPTION: Command to download and execute the FlyteCTL installation script. This method works across different operating systems and automatically installs the latest version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sL https://ctl.flyte.org/install | bash\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Agent Deployment\nDESCRIPTION: Command to restart the Flyte agent deployment in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyteagent -n flyte\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Bash command to upgrade the Flyte binary Helm release with custom values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Register files with specified version\nDESCRIPTION: Registers all serialized protobuf files with a specified version (v2).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks  --version v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core for BigQuery Agent in YAML\nDESCRIPTION: This YAML configuration for Flyte core enables the BigQuery agent by adding 'agent-service' to the enabled plugins and setting it as the default for 'bigquery_query_job_task'. It's added to a 'values-override.yaml' file for Helm installation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/bigquery.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    # -- Tasks specific configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#GetConfig)\n    tasks:\n      # -- Plugins configuration, [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#TaskPluginConfig)\n      task-plugins:\n        # -- [Enabled Plugins](https://pkg.go.dev/github.com/flyteorg/flyteplugins/go/tasks/config#Config). Enable sagemaker*, athena if you install the backend\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          bigquery_query_job_task: agent-service\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Bash command for upgrading the Flyte binary Helm release with BigQuery plugin configuration. Requires specifying release name, namespace, and configuration file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/bigquery.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: RFC Markdown Template Structure\nDESCRIPTION: Complete markdown structure for creating RFC documents, including sections for proposal details, implementation plans, impact analysis, and process guidelines.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/RFC-0000-Template.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [RFC Template] Title\n\n**Authors:**\n\n- @nickname\n- @nickname\n\n## 1 Executive Summary\n\n*A short paragraph or bullet list that quickly explains what you're trying to do.*\n\n## 2 Motivation\n\n*What motivates this proposal, and why is it important?*\n\n*Here, we aim to get comfortable articulating the value of our actions.*\n\n## 3 Proposed Implementation\n\n*This is the core of your proposal, and its purpose is to help you think through the problem because [writing is thinking](https://medium.learningbyshipping.com/writing-is-thinking-an-annotated-twitter-thread-2a75fe07fade).*\n\n*Consider:*\n\n- *using diagrams to help illustrate your ideas.*\n- *including code examples if you're proposing an interface or system contract.*\n- *linking to project briefs or wireframes that are relevant.*\n\n## 4 Metrics & Dashboards\n\n*What are the main metrics we should be measuring? For example, when interacting with an external system, it might be the external system latency. When adding a new table, how fast would it fill up?*\n\n## 5 Drawbacks\n\n*Are there any reasons why we should not do this? Here we aim to evaluate risk and check ourselves.*\n\n## 6 Alternatives\n\n*What are other ways of achieving the same outcome?*\n\n## 7 Potential Impact and Dependencies\n\n*Here, we aim to be mindful of our environment and generate empathy towards others who may be impacted by our decisions.*\n\n- *What other systems or teams are affected by this proposal?*\n- *How could this be exploited by malicious attackers?*\n\n## 8 Unresolved questions\n\n*What parts of the proposal are still being defined or not covered by this proposal?*\n\n## 9 Conclusion\n\n*Here, we briefly outline why this is the right decision to make at this time and move forward!*\n```\n\n----------------------------------------\n\nTITLE: Testing Workflow on Demo Cluster\nDESCRIPTION: Commands for building and pushing a Docker image, and running a workflow on a local demo cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . --tag \"localhost:30000/basics:v1\" -f Dockerfile --push\n```\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote \\\n  --image localhost:30000/basics:v1 \\\n  basics/hello_world.py hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Configuring Slurm for GPU Support\nDESCRIPTION: Additional configuration in slurm.conf and gres.conf for GPU support in Slurm cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n# In /etc/slurm/slurm.conf\nGresTypes=gpu\nNodeName=localhost Gres=gpu:1 CPUs=<cpus> RealMemory=<available-mem> Sockets=<sockets> CoresPerSocket=<cores-per-socket> ThreadsPerCore=<threads-per-core> State=UNKNOWN\nPartitionName=debug Nodes=ALL Default=YES MaxTime=INFINITE State=UP\n\n# In /etc/slurm/gres.conf\nAutoDetect=nvml\nNodeName=localhost Name=gpu Type=tesla File=/dev/nvidia0\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Notifications in YAML\nDESCRIPTION: This YAML configuration sets up AWS-based notifications in Flyte, including SNS topic, SQS queue, and email settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/notifications.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnotifications:\n  type: \"aws\"\n  region: \"us-east-1\"\n  publisher:\n    topicName: \"arn:aws:sns:us-east-1:{{ YOUR ACCOUNT ID }}:{{ YOUR TOPIC }}\"\n  processor:\n    queueName: \"{{ YOUR QUEUE NAME }}\"\n    accountId: \"{{ YOUR ACCOUNT ID }}\"\n  emailer:\n    subject: \"Notice: Execution \\\"{{ workflow.name }}\\\" has {{ phase }} in \\\"{{ domain }}\\\".\"\n    sender:  \"flyte-notifications@company.com\"\n    body: >\n      Execution \\\"{{ workflow.name }} [{{ name }}]\\\" has {{ phase }} in \\\"{{ domain }}\\\". View details at\n      <a href=\\http://flyte.company.com/console/projects/{{ project }}/domains/{{ domain }}/executions/{{ name }}>\n      http://flyte.company.com/console/projects/{{ project }}/domains/{{ domain }}/executions/{{ name }}</a>. {{ error }}\n```\n\n----------------------------------------\n\nTITLE: Starting Slurm Daemons\nDESCRIPTION: Commands to enable and start Slurm controller and compute daemons.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl enable slurmctld\nsudo systemctl restart slurmctld\n\nsudo systemctl enable slurmd\nsudo systemctl restart slurmd\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Cache in YAML\nDESCRIPTION: Sets default values for storage caching, including maximum size and garbage collection target.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nmax_size_mbs: 0\ntarget_gc_percent: 0\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Configuration for Databricks S3 Access\nDESCRIPTION: JSON policy configuration for allowing IAM role to access S3 through Databricks\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/databricks.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{\n  \"Effect\": \"Allow\",\n  \"Action\": \"iam:PassRole\",\n  \"Resource\": \"arn:aws:iam::<aws-account-id-databricks>:role/<iam-role-for-s3-access>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Local Workflow Execution\nDESCRIPTION: Example of executing the workflow locally with different enum values to test the implementation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/enum_type.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(f\"Running coffee_maker_enum() {coffee_maker_enum()}\")\n    print(f\"Running coffee_maker_enum(CoffeeType.LATTE) {coffee_maker_enum(coffee_enum=CoffeeType.LATTE)}\")\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Named Outputs in Flyte\nDESCRIPTION: Required imports for implementing named outputs in Flyte, including typing.NamedTuple and flytekit decorators.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/named_outputs.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import NamedTuple\nfrom flytekit import task, workflow\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Admin for Sandbox Deployment in YAML\nDESCRIPTION: This YAML configuration file sets up the FlyteAdmin component for the sandbox environment. It specifies the endpoint, authentication type, and console settings for connecting to the Flyte cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/sandbox.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  # For GRPC endpoints you might want to use dns:///flyte.myexample.com\n  endpoint: localhost:30080\n  authType: Pkce\n  insecure: true\n  console:\n    endpoint: http://localhost:30080\nlogger:\n  show-source: true\nlevel: 0\n```\n\n----------------------------------------\n\nTITLE: Retrieve all projects\nDESCRIPTION: This command retrieves all project resources available in Flyte. It doesn't require any specific arguments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project\n```\n\n----------------------------------------\n\nTITLE: Post-v0.13.0 Admin Authentication Configuration\nDESCRIPTION: Updated YAML configuration for Flyte Admin authentication setup after version 0.13.0, showing the new auth structure and OpenID Connect settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_migration.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n# ... other settings\nsecurity:\n    secure: false\n    useAuth: true\n    allowCors: true\n    allowedOrigins:\n    - \"*\"\n    allowedHeaders:\n    - \"Content-Type\"\nauth:\n    authorizedUris:\n        - https://flyte.mycompany.com\n        - http://flyteadmin:80\n        - http://flyteadmin.flyte.svc.cluster.local:80\n    userAuth:\n        openId:\n            baseUrl: https://dev-62129345.okta.com/oauth2/default\n            scopes:\n                - profile\n                - openid\n                - offline_access\n            clientId: 0oal5rch46pVhCGF45d6\n    appAuth:\n        authServerType: External\n        thirdPartyConfig:\n            flyteClient:\n                clientId: 0oal62nxuD6OSFSRq5d6\n                redirectUri: http://localhost:12345/callback\n                scopes:\n                - all\n                - offline\n```\n\n----------------------------------------\n\nTITLE: Creating Literal Types for Scalar Values in Go\nDESCRIPTION: Function for creating a LiteralType from a Scalar value in Go. This is part of the type validation system in FlytePropeller to support binary data type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc literalTypeForScalar(scalar *core.Scalar) *core.LiteralType {\n  ...\n  case *core.Scalar_Binary:\n\t\tliteralType = &core.LiteralType{Type: &core.LiteralType_Simple{Simple: core.SimpleType_BINARY}}\n  ...\n  return literalType \n}\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Single Binary with Environment Configuration\nDESCRIPTION: This command starts the Flyte single binary using a specific configuration file. It sets the POD_NAMESPACE environment variable which is necessary for the webhook to function correctly.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nPOD_NAMESPACE=flyte flyte start --config flyte-single-binary-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC RoleBinding for K8s Service Agent\nDESCRIPTION: YAML configuration for the RBAC role binding that associates the role with the service account\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: flyte-flyteagent-rolebinding\n  namespace: flyte\n  labels:\n    app.kubernetes.io/name: flyteagent\n    app.kubernetes.io/instance: flyte\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: flyte-flyteagent-role\nsubjects:\n- kind: ServiceAccount\n  name: flyteagent\n  namespace: flyte\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Demo Deployment\nDESCRIPTION: Command to restart the Flyte sandbox deployment after configuration changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyte-sandbox -n flyte\n```\n\n----------------------------------------\n\nTITLE: Installing Generator Dependencies in FlyteIDL\nDESCRIPTION: Command to download and install the required generator dependencies for FlyteIDL development.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake download_tooling\n```\n\n----------------------------------------\n\nTITLE: Configuring ImageSpec for Deck Dependencies\nDESCRIPTION: Setup of ImageSpec object to handle Docker image dependencies for Flyte Decks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncustom_image = ImageSpec(\n    name=\"flyte-deck-example\",\n    registry=\"ghcr.io/flyteorg\",\n    packages=[\n        \"pandas\",\n        \"scikit-learn\",\n        \"plotly\",\n        \"pandas-profiling\",\n        \"pillow\",\n    ],\n    python_version=\"3.8\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Resources in YAML\nDESCRIPTION: This YAML configuration sets default and limit values for CPU, memory, and storage resources for Flyte tasks, helping to resolve resource allocation issues.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninline: \n  task_resources:\n    defaults:\n      cpu: 100m\n      memory: 100Mi\n      storage: 100Mi\n    limits:\n      memory: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Running Flyte CoPilot in Downloader Mode\nDESCRIPTION: Command to run Flyte CoPilot in Downloader mode, which downloads metadata and configured data to a specified path. In Kubernetes, this is typically executed as an init container with a shared volume mount.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytecopilot/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flyte-copilot downloader\n```\n\n----------------------------------------\n\nTITLE: GPU Device Node Label Configuration in Flyte-Binary\nDESCRIPTION: YAML configuration for flyte-binary Helm chart to specify the node label key used for GPU device selection. This must match the labels on your Kubernetes worker nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    plugins:\n      k8s:\n       gpu-device-node-label: \"cloud.google.com/gke-accelerator\" #change to match your node's config\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Namespace Template YAML\nDESCRIPTION: Template for creating Kubernetes namespaces with finalizer configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: {{ namespace }}\nspec:\n  finalizers:\n  - kubernetes\n\n```\n\n----------------------------------------\n\nTITLE: TaskNodeMetadata message fields schema\nDESCRIPTION: Protocol buffer message defining metadata fields for task nodes including cache status, catalog information and dynamic workflow details.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskNodeMetadata {\n  CatalogCacheStatus cache_status\n  CatalogMetadata catalog_key\n  CatalogReservation.Status reservation_status\n  string checkpoint_uri\n  DynamicWorkflowNodeMetadata dynamic_workflow\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flytectl Register Command Options in Bash\nDESCRIPTION: This snippet shows the available command-line options for the 'flytectl register' command. It includes flags for file handling, logging, telemetry, output formatting, project specification, and storage configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nflytectl register \\\n  --files.outputLocationPrefix string \\\n  --files.sourceUploadPath string \\\n  --files.version string \\\n  -i, --interactive \\\n  --logger.formatter.type string \\\n  --logger.level int \\\n  --logger.mute \\\n  --logger.show-source \\\n  --otel.file.filename string \\\n  --otel.jaeger.endpoint string \\\n  --otel.otlpgrpc.endpoint string \\\n  --otel.otlphttp.endpoint string \\\n  --otel.sampler.parentSampler string \\\n  --otel.type string \\\n  -o, --output string \\\n  -p, --project string \\\n  --storage.cache.max_size_mbs int \\\n  --storage.cache.target_gc_percent int \\\n  --storage.connection.access-key string \\\n  --storage.connection.auth-type string \\\n  --storage.connection.disable-ssl \\\n  --storage.connection.endpoint string \\\n  --storage.connection.region string \\\n  --storage.connection.secret-key string \\\n  --storage.container string \\\n  --storage.defaultHttpClient.timeout string \\\n  --storage.enable-multicontainer \\\n  --storage.limits.maxDownloadMBs int \\\n  --storage.stow.config stringToString \\\n  --storage.stow.kind string \\\n  --storage.type string\n```\n\n----------------------------------------\n\nTITLE: Configuring Databricks Access Token in YAML for Flyte Binary\nDESCRIPTION: YAML configuration snippet for adding a Databricks access token to Flyte binary. It uses an inline secret reference.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inlineSecretRef: flyte-binary-external-services\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options for Flytectl Get Command\nDESCRIPTION: This snippet shows the available command-line flags for configuring storage options when using the 'flytectl get' command. It includes settings for cache size, authentication, connection details, and storage limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow-execution-config.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Flytectl in Bash\nDESCRIPTION: Command to rollback the Flytectl binary to a previous version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_upgrade.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl upgrade rollback\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: Command to spin up a demo cluster using flytectl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Deleting Plugin Override with Project and Domain\nDESCRIPTION: This snippet demonstrates how to delete a plugin override for a given project and domain using the `flytectl delete plugin-override` command. It specifies the project and domain as command-line arguments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl delete plugin-override -p flytesnacks -d development\"\n```\n\n----------------------------------------\n\nTITLE: Installing MUNGE Authentication Service\nDESCRIPTION: Commands to install MUNGE packages, which are required for Slurm authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install munge libmunge2 libmunge-dev\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for Slurm Cluster Access\nDESCRIPTION: This command creates a new RSA key pair for SSH authentication to the Slurm cluster. It generates a 4096-bit RSA key.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -t rsa -b 4096\n```\n\n----------------------------------------\n\nTITLE: Defining Error Aggregation Strategy in Go\nDESCRIPTION: Defines an enumeration for error aggregation strategies and extends PluginProperties struct to support configurable error handling in distributed tasks. Introduces Default and Earliest strategies for error aggregation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5598-deterministic-errors-distributed-training.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ErrorAggregationStrategy int\n\nconst (\n\t// Single error file from a single container\n\tDefault ErrorAggregationStrategy = iota\n\n\t// Earliest error from potentially multiple error files\n\tEarliest\n)\n\n// System level properties that this Plugin supports\ntype PluginProperties struct {\n\t...\n\tErrorAggregationStrategy ErrorAggregationStrategy\n}\n```\n\n----------------------------------------\n\nTITLE: Initial K8s Plugin Configuration Example\nDESCRIPTION: Basic K8s plugin configuration showing default labels, annotations, and host networking settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nk8s:\n  default-labels:\n    bar: from-default-label\n  default-annotations:\n    foo: overridden-value\n    baz: non-overridden-value\n  enable-host-networking-pod: true\n```\n\n----------------------------------------\n\nTITLE: Running Flyte Propeller Locally\nDESCRIPTION: Command to run the Flyte Propeller operator locally\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ flytepropeller\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Chart\nDESCRIPTION: This command upgrades the Flyte binary Helm chart with the new configuration. Replace <RELEASE_NAME>, <YOUR_NAMESPACE>, and <YOUR_YAML_FILE> with appropriate values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Installing Contour Ingress Controller\nDESCRIPTION: These commands show how to add the Bitnami Helm repository and install the Contour ingress controller in the Flyte namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install gateway bitnami/contour -n flyte\n```\n\n----------------------------------------\n\nTITLE: Executing Command in Flytectl Sandbox Using Bash\nDESCRIPTION: The `flytectl sandbox exec -- ls -al` command allows users to execute non-interactive commands within the Flytectl sandbox container and return the output immediately. This usage leverages bash to list files in a detailed format. The command is executed in the `/root` directory by default. It requires `flytectl` to be properly installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_exec.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl sandbox exec -- ls -al\n```\n\n----------------------------------------\n\nTITLE: Enable Custom Containers on Databricks Cluster\nDESCRIPTION: API request to enable custom containers on Databricks cluster using personal access token\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/databricks.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH -n -H \"Authorization: Bearer <your-personal-access-token>\" \\\nhttps://<databricks-instance>/api/2.0/workspace-conf \\\n-d '{\"enableDcs\": \"true\"}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Flyte Configuration in Kubernetes\nDESCRIPTION: Command to edit the Flyte sandbox configuration in Kubernetes using kubectl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sagemaker_inference.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit configmap flyte-sandbox-config -n flyte\n```\n\n----------------------------------------\n\nTITLE: Setting Update Backoff Parameters in YAML\nDESCRIPTION: These configurations define the initial delay and number of retries for exponential backoff when updating resources.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_107\n\nLANGUAGE: yaml\nCODE:\n```\n\"10\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"5\"\n```\n\n----------------------------------------\n\nTITLE: Dry Run Flyte Demo Start\nDESCRIPTION: This command prints the docker commands that would be used to start the demo container, without actually executing them. It's useful for understanding the underlying commands and configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl demo start --dryRun\"\n```\n\n----------------------------------------\n\nTITLE: Task State Transitions\nDESCRIPTION: Mermaid flowchart showing task execution states from initialization through completion including resource management and failure handling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/state_machine.rst#2025-04-16_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n     id1(( ))\n     id1-->|Aborted by NodeHandler- timeouts, external abort, etc,.| NotReady\n     id1-->Aborted\n     NotReady-->|Optional-Blocked on resource quota or resource pool | WaitingForResources\n     WaitingForResources--> |Optional- Has been submitted, but hasn't started |Queued\n     Queued-->|Optional- Prestart initialization | Initializing\n     Initializing-->|Actual execution of user code has started|Running\n     Running-->|Successful execution|Success\n     Running-->|Failed with a retryable error|RetryableFailure\n     Running-->|Unrecoverable failure, will stop all execution|PermanentFailure\n     Success-->id2(( ))\n     RetryableFailure-->id2(( ))\n     PermanentFailure-->id2(( ))\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Flyte\nDESCRIPTION: Command to apply end-to-end tests for Flyte. This helps verify the correct functioning of the deployed Flyte Sandbox.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ../end2end/tests/endtoend.yaml\n```\n\n----------------------------------------\n\nTITLE: Get Workflows with Pagination\nDESCRIPTION: Retrieves workflows from a specific page number, limiting the number of results per page. The `--filter.limit` flag specifies the maximum number of results per page, and `--filter.page` specifies the page number. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get -p flytesnacks -d development workflow --filter.limit=10 --filter.page 2\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Client Configuration\nDESCRIPTION: Default configuration for Kubernetes API client including QPS, burst rate and timeout settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_172\n\nLANGUAGE: yaml\nCODE:\n```\nqps: \"100\"\nburst: \"25\"\ntimeout: 30s\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalResourceInfo Message in Protobuf\nDESCRIPTION: Defines a message type for storing information about external resources used or produced by task executions, including identifiers, phases, and logs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ExternalResourceInfo {\n  string external_id = 1;\n  uint32 index = 2;\n  uint32 retry_attempt = 3;\n  flyteidl.core.TaskExecution.Phase phase = 4;\n  flyteidl.core.CatalogCacheStatus cache_status = 5;\n  repeated flyteidl.core.TaskLog logs = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Datadog Integration with Environment Variables\nDESCRIPTION: Environment variable configuration for integrating Flyte task logs with Datadog, enabling container log collection and excluding logs from the Datadog agent itself.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nDD_LOGS_ENABLED: \"false\"\nDD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: \"true\"\nDD_LOGS_CONFIG_K8S_CONTAINER_USE_FILE: \"true\"\nDD_CONTAINER_EXCLUDE_LOGS: \"name:datadog-agent\" # This is to avoid tracking logs produced by the datadog agent itself\n```\n\n----------------------------------------\n\nTITLE: Adding Flyte Helm Repository\nDESCRIPTION: Command to add the Flyte chart repository to Helm\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\n```\n\n----------------------------------------\n\nTITLE: Setting Flytectl Config Environment Variable in Bash\nDESCRIPTION: This command sets the FLYTECTL_CONFIG environment variable to the correct configuration file for the Flyte sandbox.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport FLYTECTL_CONFIG=~/.flyte/config-sandbox.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Sandbox with MinIO Storage\nDESCRIPTION: Comprehensive YAML configuration for setting up Flyte sandbox environment with MinIO storage integration, including Spark configurations and database settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nflyte-binary:\n  nameOverride: flyte-sandbox\n  enabled: true\n  configuration:\n    database:\n      host: '{{ printf \"%s-postgresql\" .Release.Name | trunc 63 | trimSuffix \"-\" }}'\n      password: postgres\n    storage:\n      metadataContainer: my-s3-bucket\n      userDataContainer: my-s3-bucket\n      provider: s3\n      providerConfig:\n        s3:\n          disableSSL: true\n          v2Signing: true\n          endpoint: http://{{ printf \"%s-minio\" .Release.Name | trunc 63 | trimSuffix \"-\" }}.{{ .Release.Namespace }}:9000\n          authType: accesskey\n          accessKey: minio\n          secretKey: miniostorage\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release for BigQuery Agent\nDESCRIPTION: This Bash command upgrades the Flyte core Helm release with the new configuration for the BigQuery agent. It uses the 'values-override.yaml' file and requires specifying the release name and namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/bigquery.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Sum Type Protocol Buffers\nDESCRIPTION: Protocol buffer message definitions for SumType and LiteralSum to support union types in FlyteIDL core types and literals.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/sum-types.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SumType {\n    repeated LiteralType summands = 1;\n}\n\nmessage LiteralType {\n    oneof type {\n        // ...\n        SumType sum = 8;\n    }\n    // ...\n}\n\nmessage LiteralSum {\n    Literal value = 1;\n    SumType type = 2;\n    uint64 summand_idx = 3;\n}\n\nmessage Scalar {\n    oneof value {\n        // ...\n        LiteralSum sum = 8;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flytectl Delete Execution Queue Attribute Command\nDESCRIPTION: This command deletes execution queue attributes for a specific project and domain using the flytectl tool. It takes the project and domain as parameters to identify the target attributes for deletion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution-queue-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n flytectl delete execution-queue-attribute -p flytesnacks -d development\n\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: This command demonstrates how to apply the end-to-end test configuration using kubectl after all pods are running.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ../end2end/tests/endtoend.yaml\n```\n\n----------------------------------------\n\nTITLE: Contour Resource Configuration YAML\nDESCRIPTION: Default resource requests and limits configuration for Contour and Envoy pods\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncontour.contour.resources:\n  limits:\n    cpu: \"100m\"\n    memory: \"100Mi\"\n  requests:\n    cpu: \"10m\"\n    memory: \"50Mi\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks with pagination\nDESCRIPTION: Retrieves tasks from a specific page by specifying the limit and page number. This enables navigating through large result sets.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get -p flytesnacks -d development task --filter.limit=10 --filter.page=2\"\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Secret with kubectl\nDESCRIPTION: Command to apply the Kubernetes Secret containing cluster credentials to the control plane cluster using kubectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nkubect apply -f secrets.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Shard Strategy in YAML for Flyte Workflows\nDESCRIPTION: This YAML configuration demonstrates how to set up the 'Project' shard strategy for Flyte workflows. It defines multiple shards with specific project IDs and a wildcard shard for unspecified projects.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  core:\n    # a configuration example using the \"project\" shard type\n    manager:\n      # pod and scanning configuration redacted\n      # ...\n      shard:\n        type: Project       # use the \"Project\" shard strategy\n        per-shard-mapping:  # a list of per shard mappings - one shard is created for each element\n          - ids:            # the list of ids to be managed by the first shard\n            - flytesnacks\n          - ids:            # the list of ids to be managed by the second shard\n            - flyteexamples\n            - flytelabs\n          - ids:            # the list of ids to be managed by the third shard\n            - \"*\"           # use the wildcard to manage all ids not managed by other shards\n```\n\n----------------------------------------\n\nTITLE: Get Workflows with Limit and Sorting\nDESCRIPTION: Retrieves workflows with a specified limit and sorting order. The `--filter.sortBy` flag specifies the field to sort by, `--filter.limit` sets the maximum number of results, and `--filter.asc` specifies ascending order.  Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get -p flytesnacks -d development workflow  --filter.sortBy=created_at --filter.limit=1 --filter.asc\"\n```\n\n----------------------------------------\n\nTITLE: flytectl create command help\nDESCRIPTION: Displays help information for the `flytectl create` command. This help includes a list of available options specific to the `create` command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for create\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Resource Attributes with flytectl\nDESCRIPTION: Command to fetch and verify individual project-domain cluster resource attributes using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get cluster-resource-attribute -p flyteexamples -d development\n```\n\n----------------------------------------\n\nTITLE: Archiving a Flyte Execution using flytectl\nDESCRIPTION: This command archives a Flyte execution, hiding it from the CLI and UI. It requires specifying the project, domain, and execution ID.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution -p flytesnacks -d development  oeh94k9r2r --archive\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyteagent Deployment\nDESCRIPTION: This command restarts the flyteagent deployment in the flyte namespace to apply the new configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nkubectl rollout restart deployment flyteagent -n flyte\n```\n\n----------------------------------------\n\nTITLE: Register files with overridden version\nDESCRIPTION: Registers files with a specified version (v2), overriding the default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --version v2\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing CLI Authentication with External Authorization Server using OAuth2-PKCE\nDESCRIPTION: This Mermaid sequence diagram shows the OAuth2-PKCE authentication flow for CLI users with an external Authorization Server. It illustrates the process of obtaining client configuration, initiating the authorization flow with the external IdP, and exchanging the authorization code for an access token.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_appendix.rst#2025-04-16_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n%%{config: { 'fontFamily': 'Menlo', 'fontSize': 10, 'fontWeight': 100} }%%\n    autonumber\n    User->>+Cli: flytectl list-projects\n    Cli->>+Admin: admin/client-config\n    Admin->>-Cli: Client_id=<abc>, ...\n    Cli->>+Browser: /oauth2/authorize?pkce&code_challenge,client_id,scope\n    Browser->>+ExternalIdp: /oauth2/authorize?pkce...\n    ExternalIdp->>-Browser: 302 idp.com/login\n    Note over Browser,ExternalIdp: The prior OpenID Connect flow\n    Browser->>+ExternalIdp: /logged_in\n    Note over Browser,ExternalIdp: Potentially show custom consent screen\n    ExternalIdp->>-Browser: localhost/?authCode=<abc>\n    Browser->>+Cli: localhost/authCode=<abc>\n    Cli->>+ExternalIdp: /token?code,code_verifier\n    ExternalIdp->>-Cli: access_token\n    Cli->>+Admin: /projects/ + access_token\n    Admin->>-Cli: project1, project2\n```\n\n----------------------------------------\n\nTITLE: Launch Plan Runtime Override Configuration\nDESCRIPTION: Shows how to provide runtime configuration overrides when creating a launch plan, with the ability to specify overrides for multiple task nodes\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3553-config-override.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlaunch_plan.LaunchPlan.get_or_create(\n    workflow=wf, \n    name=\"your_lp_name_5\", \n    runtime_override={\n      \"task-yee\": TaskNodeConfigOverride(...),\n      \"task-ketan\": TaskNodeConfigOverride(...)\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Execution Queue Attributes with flytectl\nDESCRIPTION: Command to update execution queue attributes using the flytectl CLI tool. It uses the era.yaml file as input for the attribute values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-queue-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-queue-attribute --attrFile era.yaml\n```\n\n----------------------------------------\n\nTITLE: Additional GPU Resource Tolerations in Flyte-Core\nDESCRIPTION: YAML configuration for flyte-core Helm chart to add custom tolerations for GPU resources. Used when your infrastructure requires additional tolerations for GPU scheduling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  k8s:\n    plugins:\n      k8s:\n        resource-tolerations:\n        - nvidia.com/gpu: \n          - key: \"mykey\"\n            operator: \"Equal\"\n            value: \"myvalue\"\n            effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Workflow-Specific Execution Cluster Label\nDESCRIPTION: Configuration for mapping specific workflows to cluster labels\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: project1\nworkflow: example.training_workflow\nvalue: project1\n```\n\n----------------------------------------\n\nTITLE: Overrides Configuration Example\nDESCRIPTION: A YAML representation of override configurations for a specific workflow, detailing resource limits and inherited configurations. It outlines the expected structure and fields necessary for configuring overrides in Flyte. This approach leverages ConfigMaps as the source of truth.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3749-sane-overridable-defaults.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1  # Version of this document structure\ndomain: development\nproject: flytesnacks\nworkflow: MyExampleWorkflow\nkind: overrides\nspec:\n  taskResources:\n    defaults:\n      cpu: \"1\"\n      memory: \"500Mi\"\n    limits:\n      cpu: \"3\"\n      memory: \"2Gi\"\n      gpu: \"4\"\n  workflowExecutionConfig:\n    inherited: true\n    source: project\n    labels:\n      my-key: \"my-value\"\n    securityContext:\n      coreIdentity:\n        iamRole: \"my_iam_role\"\nstatus:\n  version: 1 # Version for the entire overrides document\n```\n\n----------------------------------------\n\nTITLE: Force Pushing an Image using Environment Variable\nDESCRIPTION: This command demonstrates how to force push an image using an environment variable with the pyflyte command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nFLYTE_FORCE_PUSH_IMAGE_SPEC=True pyflyte run --remote image_spec.py wf\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for flytectl update execution\nDESCRIPTION: Displays a comprehensive list of options inherited from parent commands, including authentication, admin configuration, logging, and storage settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Updating Task Resource Attributes Configuration\nDESCRIPTION: Example YAML configuration for updating task resource attributes at project and domain level, specifying CPU and memory defaults and limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-resource-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\ndefaults:\n  cpu: \"1\"\n  memory: \"150Mi\"\nlimits:\n  cpu: \"2\"\n  memory: \"450Mi\"\n```\n\n----------------------------------------\n\nTITLE: Initial Cluster Credentials Secret Template\nDESCRIPTION: Template for creating the cluster credentials secret that will store CA cert and bearer token\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cluster-credentials\n  namespace: flyte\ntype: Opaque\ndata:\n```\n\n----------------------------------------\n\nTITLE: Register archive file locally\nDESCRIPTION: Registers a local .tgz or .tar archive file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register files  _pb_output.tgz -d development  -p flytesnacks --archive\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Scheduler in Flyte\nDESCRIPTION: Specifies which scheduler to use when launching array-pods in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_127\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Example Task Resource Attribute JSON Output\nDESCRIPTION: Sample JSON representation of task resource attributes showing project, domain, defaults, and limits\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task-resource-attribute.rst#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"workflow\":\"core.control_flow.merge_sort.merge_sort\",\"defaults\":{\"cpu\":\"1\",\"memory\":\"150Mi\"},\"limits\":{\"cpu\":\"2\",\"memory\":\"450Mi\"}}\n```\n\n----------------------------------------\n\nTITLE: Deallocating Resources in Go\nDESCRIPTION: Example Go code showing how a Flyte plugin releases allocated resources using the ResourceManager. It demonstrates the use of the ReleaseResource function with specific parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/resource_manager.rst#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nerr := ReleaseResource(ctx, \"default_cluster\", \"flkgiwd13-akjdoe-0\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Creating SageMaker Execution in Flyte\nDESCRIPTION: Commands for retrieving execution specifications and launching a SageMaker training workflow using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/sagemaker.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get launchplan --config ~/.flyte/flytectl.yaml \\\n   --project flytesnacks \\\n   --domain development \\\n   sagemaker_training.sagemaker_custom_training.mnist_trainer \\\n   --latest \\\n   --execFile exec_spec.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nflytectl --config ~/.flyte/flytectl.yaml create execution \\\n    -p <project> -d <domain> --execFile ~/exec_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Slurm Build Dependencies\nDESCRIPTION: Commands to install necessary packages for building Slurm from source.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y build-essential fakeroot devscripts equivs\n\nsudo apt install -y \\\n    libncurses-dev libgtk2.0-dev libpam0g-dev libperl-dev liblua5.3-dev \\\n    libhwloc-dev dh-exec librrd-dev libipmimonitoring-dev hdf5-helpers \\\n    libfreeipmi-dev libhdf5-dev man2html-base libcurl4-openssl-dev \\\n    libpmix-dev libhttp-parser-dev libyaml-dev libjson-c-dev \\\n    libjwt-dev liblz4-dev libmariadb-dev libdbus-1-dev librdkafka-dev\n```\n\n----------------------------------------\n\nTITLE: Collecting Kubernetes Pod Logs in Bash\nDESCRIPTION: This command retrieves logs from Kubernetes pods in a specified namespace, typically corresponding to a Flyte project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs pods -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Command to upgrade Flyte binary Helm release with custom configuration values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Teardown Command Options - Shell\nDESCRIPTION: This section lists various options available for the teardown command. It includes parameters for help, volume cleanup, configuration file specification, and domain specifics. Understanding these options is crucial for executing the command effectively and avoiding unintended data loss.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_teardown.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help     help for teardown\n-v, --volume   Optional. Clean up Docker volume.\n```\n\n----------------------------------------\n\nTITLE: Setting Backoff Maximum Duration in YAML\nDESCRIPTION: Defines the cap of the backoff duration to limit maximum wait time between retries.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_199\n\nLANGUAGE: yaml\nCODE:\n```\n20s\n```\n\n----------------------------------------\n\nTITLE: Deleting Completed Workflows\nDESCRIPTION: Command to delete all completed workflows in a namespace using kubectl-flyte\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl-flyte delete --namespace flytekit-development --all-completed\n```\n\n----------------------------------------\n\nTITLE: Capturing Kubernetes Pod Status in Bash\nDESCRIPTION: This command describes the status of a specific Kubernetes pod in a given namespace, which is useful for troubleshooting Flyte execution issues.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod <PodName> -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Retrieve projects with limit and page number\nDESCRIPTION: This command retrieves projects present in specific pages by specifying the limit and page number. It uses the `--filter.limit` and `--filter.page` flags for pagination.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project --filter.limit=10 --filter.page=2\n```\n\n----------------------------------------\n\nTITLE: Linking Docker Socket for MacOS in Bash\nDESCRIPTION: This command creates a symbolic link to the Docker socket file on MacOS, resolving Docker connectivity issues when using Docker Desktop.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s ~/Library/Containers/com.docker.docker/Data/docker.raw.sock /var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Complex Runtime PodTemplate\nDESCRIPTION: YAML definition of a Runtime PodTemplate with extended configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PodTemplate\nmetadata:\n  name: flyte-template\n  namespace: flyte\ntemplate:\n  metadata:\n    labels:\n      label_1: value-runtime\n      label_2: value-runtime\n      label_3: value-runtime\n    annotations:\n      foo: value-runtime\n      bar: value-runtime\n  spec:\n    containers:\n      - name: default\n        image: docker.io/rwgrim/docker-noop\n        terminationMessagePath: \"/dev/foo\"\n    hostNetwork: false\n```\n\n----------------------------------------\n\nTITLE: Checking Flyte Sandbox Status\nDESCRIPTION: This command retrieves the status of the Flyte sandbox container, providing information about its current state and health. It helps users monitor the sandbox environment and identify any potential issues.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl sandbox status\"\n```\n\n----------------------------------------\n\nTITLE: Literal Offloading Configuration\nDESCRIPTION: Configuration for literal value offloading including size thresholds and SDK version support\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_168\n\nLANGUAGE: yaml\nCODE:\n```\nEnabled: false\nmax-size-in-mb-for-offloading: 1000\nmin-size-in-mb-for-offloading: 10\nsupported-sdk-versions:\n  FLYTE_SDK: 1.13.14\n```\n\n----------------------------------------\n\nTITLE: Updating Execution Cluster Labels with flytectl\nDESCRIPTION: Command to update the execution cluster labels using flytectl, applying the label configuration that maps projects and domains to specific clusters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-cluster-label --attrFile ecl-production.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting the Webhook\nDESCRIPTION: Command to start the Flyte Propeller webhook service\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flytepropeller webhook\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status\nDESCRIPTION: Command to verify the status of Flyte pods after deployment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Job Specification Structure in Protobuf\nDESCRIPTION: Protobuf message definition for DynamicJobSpec that specifies the structure for dynamic job execution. It includes nodes for parallel execution, minimum success criteria, output bindings, task templates, and subworkflow templates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/dynamic_spec.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DynamicJobSpec {\n    repeated Node nodes = 1;\n    int64 min_successes = 2;\n    repeated Binding outputs = 3;\n\n    repeated TaskTemplate tasks = 4;\n    repeated WorkflowTemplate subworkflows = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte Launch Plan Dependencies\nDESCRIPTION: Importing required libraries for working with Flyte launch plans\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/launch_plans.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import LaunchPlan\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Execution in YAML using Flytectl CLI\nDESCRIPTION: This command retrieves execution node details in YAML using Flytectl CLI. Requires the '--details' flag and '-o yaml' for YAML output. Additional '--nodeID' flag is needed for task level details. Outputs detailed node information in YAML format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get execution -p flytesnacks -d development oeh94k9r2r --details -o yaml\n```\n\n----------------------------------------\n\nTITLE: Defining NodeExecution Message in Protobuf\nDESCRIPTION: Defines the NodeExecution message type, which encapsulates details for a single node execution entity in a Flyte workflow. It includes fields for the node execution identifier and input data URI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage NodeExecution {\n  flyteidl.core.NodeExecutionIdentifier id = 1;\n  string input_uri = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secret Manager in Flyte\nDESCRIPTION: YAML configuration to enable AWS secret management plugin in Flyte deployment through values.yaml file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  core:\n    webhook:\n      secretManagerType: \"AWS\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Console UI\nDESCRIPTION: This YAML snippet sets the base URL and configuration directory for the Flyte Console UI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.console:\n  BASE_URL: \"/console\"\n  CONFIG_DIR: \"/etc/flyte/config\"\n```\n\n----------------------------------------\n\nTITLE: Image Renderer Example\nDESCRIPTION: Example of using Image renderer to convert image data to HTML.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True)\ndef image_renderer():\n    import PIL.Image\n    from flytekit import FlyteFile\n    import numpy as np\n\n    # Create a random image\n    imarray = np.random.rand(100, 100, 3) * 255\n    im = PIL.Image.fromarray(imarray.astype(\"uint8\")).convert(\"RGBA\")\n\n    # You can append a PIL.Image directly\n    img = renderer.ImageRenderer()\n    img.append(im)\n\n    # Or a FlyteFile\n    im.save(\"/tmp/random.png\")\n    img.append(FlyteFile(\"/tmp/random.png\"))\n    return None\n```\n\n----------------------------------------\n\nTITLE: TypeEngine to_literal_type Method Implementation\nDESCRIPTION: Implementation of the to_literal_type method in TypeEngine class to handle type annotations\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1855-type-metadata.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    @classmethod\n    def to_literal_type(cls, python_type: Type) -> LiteralType:\n        \"\"\"\n        Converts a python type into a flyte specific ``LiteralType``\n        \"\"\"\n        transformer = cls.get_transformer(python_type)\n        res = transformer.get_literal_type(python_type)\n        meta = None\n        if hasattr(python_type, \"__metadata__\"):\n            for x in python_type.__metadata__:\n                if not isinstance(x, FlyteTypeAnnotation):\n                    continue\n                if x.data.get(\"__consumed\", False):\n                    continue\n                annotation = x.data\n                x.data[\"__consumed\"] = True\n\n        if annotation is not None:\n            return LiteralType(\n                simple=res.simple,\n                schema=res.schema,\n                collection_type=res.collection_type,\n                map_value_type=res.map_value_type,\n                blob=res.blob,\n                enum_type=res.enum_type,\n                annotation=annotation,\n            )\n        return res\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Settings in Flytectl\nDESCRIPTION: Command-line options for configuring OpenTelemetry telemetry and tracing settings, including endpoint configuration and sampling parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--otel.otlphttp.endpoint string\n--otel.sampler.parentSampler string\n--otel.type string\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Container Storage\nDESCRIPTION: Flag to enable multi-container storage connections, which automatically opens new connections to different containers or buckets as they are encountered\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--storage.enable-multicontainer\n```\n\n----------------------------------------\n\nTITLE: Workflow-Specific Task Resource Attributes Configuration\nDESCRIPTION: Example YAML configuration for updating task resource attributes for a specific workflow, including project, domain, and workflow identifiers along with CPU and memory specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-resource-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nworkflow: core.control_flow.merge_sort.merge_sort\ndefaults:\n  cpu: \"1\"\n  memory: \"150Mi\"\nlimits:\n  cpu: \"2\"\n  memory: \"450Mi\"\n```\n\n----------------------------------------\n\nTITLE: Container Task Arguments Template Example in JSON\nDESCRIPTION: Example JSON configuration showing how container arguments are templated in Flyte tasks. Demonstrates the structure of command arguments including templated values that get replaced at runtime.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/container_interface.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"container\": {\n  \"command\": [],\n  \"args\": [\n    \"pyflyte-execute\",\n    \"--inputs\",\n    \"{{.input}}\",\n    \"--output-prefix\",\n    \"{{.outputPrefix}}\",\n    \"--raw-output-data-prefix\",\n    \"{{.rawOutputDataPrefix}}\",\n    \"--resolver\",\n    \"flytekit.core.python_auto_container.default_task_resolver\",\n    \"--\",\n    \"task-module\",\n    \"core.basic.hello_world\",\n    \"task-name\",\n    \"say_hello\"\n  ],\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Pods in Project Namespace\nDESCRIPTION: Command to list pods in the project-specific namespace for investigating execution issues.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/debugging_executions.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n <project>-<domain>\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for Flyte\nDESCRIPTION: Command to apply the end-to-end test manifest after deploying Flyte dependencies. This helps verify that the Flyte installation is functioning correctly.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-deps/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ../end2end/tests/endtoend.yaml\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration\nDESCRIPTION: Defines logging settings for various providers including Cloudwatch, Kubernetes, and Stackdriver.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\ncloudwatch-enabled: false\ncloudwatch-log-group: \"\"\ncloudwatch-region: \"\"\ncloudwatch-template-uri: \"\"\ndynamic-log-links: null\ngcp-project: \"\"\nkubernetes-enabled: true\nkubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\nkubernetes-url: \"\"\nstackdriver-enabled: false\nstackdriver-logresourcename: \"\"\nstackdriver-template-uri: \"\"\ntemplates: null\n```\n\n----------------------------------------\n\nTITLE: Updating Flyte Project Using YAML File\nDESCRIPTION: This command updates a Flyte project using a YAML file specified with the --file flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project --file project.yaml\n```\n\n----------------------------------------\n\nTITLE: Registering SageMaker Plugin Examples in Flyte\nDESCRIPTION: Command to register SageMaker training examples from flytesnacks repository into the Flyte deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/sagemaker.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl register files https://github.com/flyteorg/flytesnacks/releases/download/v0.3.0/snacks-cookbook-integrations-aws-sagemaker_training.tar.gz --archive -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Sandbox Helm Release\nDESCRIPTION: Command to upgrade the Flyte Sandbox Helm release with custom values. This allows for applying configuration changes to an existing Flyte deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -f values-sandbox.yaml flyte .\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options for Flyte CLI\nDESCRIPTION: These command-line options allow users to configure storage settings for Flyte. They include options for Stow backend configuration, specifying the Stow backend type, and setting the overall storage type (e.g., s3, minio, local, mem, or stow).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-cluster-label.rst#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Trust Policy for Multiple EKS Clusters\nDESCRIPTION: JSON configuration for IAM trust policy that allows multiple EKS clusters to assume the same IAM role. The policy includes two OIDC providers, one for each data plane cluster, with appropriate conditions for service accounts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n{\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n         \"Federated\": \"arn:aws:iam::<AWS-ACCOUNT-ID>:oidc-provider/oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE1-OIDC-PROVIDER>\"\n      },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n         \"StringLike\": {\n            \"oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE1-OIDC-PROVIDER>:aud\": \"sts.amazonaws.com\",\n\n            \"oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE1-OIDC-PROVIDER>:sub\": [\n            \"system:serviceaccount:flyte:flytepropeller\",\n            \"system:serviceaccount:*:default\"\n            ]\n            }\n      }\n      },\n   {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n         \"Federated\": \"arn:aws:iam::<AWS-ACCOUNT-ID>:oidc-provider/oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE2-OIDC-PROVIDER>\"\n      },\n      \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n      \"Condition\": {\n         \"StringLike\": {\n            \"oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE2-OIDC-PROVIDER>:aud\": \"sts.amazonaws.com\",\n            \"oidc.eks.<AWS-REGION-CODE>.amazonaws.com/id/<DATAPLANE2-OIDC-PROVIDER>:sub\": [\n            \"system:serviceaccount:flyte:flytepropeller\",\n            \"system:serviceaccount:*:default\"\n            ]\n            }\n         }\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dedicated Slurm User\nDESCRIPTION: Command to create a system user for Slurm with specific UID and GID.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo adduser --system --uid <uid> --group --home /var/lib/slurm slurm\n```\n\n----------------------------------------\n\nTITLE: Connector Deployment Settings\nDESCRIPTION: Default values for connector deployment configuration including endpoint, security, and service config settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_117\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n'{\"loadBalancingConfig\": [{\"round_robin\":{}}]}'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\nLANGUAGE: yaml\nCODE:\n```\n10s\n```\n\n----------------------------------------\n\nTITLE: Checking Flyte Deployment Pod Status\nDESCRIPTION: Command to check the status of Flyte deployment pods after upgrading.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Generating FlyteAdmin Service Code\nDESCRIPTION: Command to generate all code, mock client, and documentation for the FlyteAdmin Service.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/contributing.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Old Workflows in Flyte v1.0.0\nDESCRIPTION: Kubernetes command to clean up old terminated workflows across all namespaces. This is a required action after upgrading to Flyte v1.0.0 due to changes in the garbage collection logic.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.0.0.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete fly -l termination-status=terminated --all-namespaces --cascade='background' --wait=false --force --grace-period=0\n```\n\n----------------------------------------\n\nTITLE: AWS Flyte Configuration\nDESCRIPTION: YAML configuration template for connecting to Flyte deployed on AWS\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/overview.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///<replace-me>\n  authType: Pkce\n  insecure: true\n```\n\n----------------------------------------\n\nTITLE: Dask Cluster Configuration Protocol\nDESCRIPTION: Protocol buffer messages for configuring Dask distributed computing clusters including worker specifications and resource allocations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DaskCluster {\n  string image = 1;\n  int32 nWorkers = 2;\n  flyteidl.core.Resources resources = 3;\n}\n\nmessage DaskJob {\n  string namespace = 1;\n  JobPodSpec jobPodSpec = 2;\n  DaskCluster cluster = 3;\n}\n\nmessage JobPodSpec {\n  string image = 1;\n  flyteidl.core.Resources resources = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Plugin for Demo Cluster\nDESCRIPTION: YAML configuration for enabling Snowflake plugin in the demo cluster settings\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    default-for-task-types:\n      container: container\n      container_array: k8s-array\n      sidecar: sidecar\n      snowflake: snowflake\n    enabled-plugins:\n      - container\n      - k8s-array\n      - sidecar\n      - snowflake\n```\n\n----------------------------------------\n\nTITLE: Generating Execution Spec File - YAML\nDESCRIPTION: This snippet demonstrates how to generate an execution specification file for a specified task in the Flyte platform. The command retrieves the task details and outputs the execution spec to a YAML file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflytectl get tasks -d development -p flytesnacks core.control_flow.merge_sort.merge --version v2 --execFile execution_spec.yaml\n```\n\n----------------------------------------\n\nTITLE: GCS Flyte Configuration\nDESCRIPTION: YAML configuration template for connecting to Flyte deployed on Google Cloud Storage\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/overview.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///<replace-me>\n  authType: Pkce\n  insecure: false\n```\n\n----------------------------------------\n\nTITLE: Initializing Flytectl Config with Separate Console Endpoint\nDESCRIPTION: This command allows users to specify a separate console endpoint when initializing the Flytectl config. This is particularly useful for setups where the console is deployed separately from the Flyte admin service.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_init.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl config init --host=flyte.myexample.com --console=console.myexample.com\n```\n\n----------------------------------------\n\nTITLE: Demystifying Pod Failures in Go Plugin\nDESCRIPTION: Code reference showing where the Pod plugin attempts to identify and handle pod failures, particularly for preemption cases, and returns system retriable failures.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3902-simplify-retry-behaviour.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Link: github.com/flyteorg/flyteplugins/blob/dfdf6f95aef7bebff160d6660f5c62f5832c39e4/go/tasks/pluginmachinery/flytek8s/pod_helper.go#L628\n// Returns a system retriable failure when preemption is detected\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Flyte Helm Chart\nDESCRIPTION: Main Helm chart that depends on flyte-core and installs additional dependencies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../charts/flyte/Chart.yaml\n   :language: yaml\n   :caption: charts/flyte/Chart.yaml\n```\n\n----------------------------------------\n\nTITLE: TaskExecutionMetadata message fields schema\nDESCRIPTION: Protocol buffer message defining metadata fields for task execution including external resources, resource pools, and plugin information.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskExecutionMetadata {\n  string generated_name\n  repeated ExternalResourceInfo external_resources\n  repeated ResourcePoolInfo resource_pool_info\n  string plugin_identifier\n  InstanceClass instance_class\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Overrides with Workflow - JSON\nDESCRIPTION: This JSON snippet demonstrates the result when fetching plugin overrides for a specific workflow along with project and domain using Flytectl. The output specifies the workflow and includes plugin override details. Use this format when you need comprehensive details about overrides related to workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_plugin-override.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"project\": \"flytesnacks\",\n\t\"domain\": \"development\",\n    \"workflow\": \"core.control_flow.merge_sort.merge_sort\"\n\t\"overrides\": [{\n\t\t\"task_type\": \"python_task\",\n\t\t\"plugin_id\": [\"pluginoverride1\", \"pluginoverride2\"],\n        \"missing_plugin_behavior\": 0\n\t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Node Defaults\nDESCRIPTION: Default configuration values for workflow node execution including deadlines, retries and debug settings\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_165\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-deadlines:\n  node-active-deadline: 0s\n  node-execution-deadline: 0s\n  workflow-active-deadline: 0s\ndefault-max-attempts: 1\nenable-cr-debug-metadata: false\nignore-retry-cause: false\ninterruptible-failure-threshold: -1\nmax-node-retries-system-failures: 3\n```\n\n----------------------------------------\n\nTITLE: Verifying Slurm User Creation\nDESCRIPTION: Command to verify the creation of the Slurm system user.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/passwd | grep <uid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Propeller Settings in YAML\nDESCRIPTION: Defines various configuration options for Flyte propeller, including worker count, evaluation durations, queue settings, and leader election options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_161\n\nLANGUAGE: yaml\nCODE:\n```\nkube-config: \"\"\nmaster: \"\"\nworkers: \"20\"\nworkflow-reeval-duration: 10s\ndownstream-eval-duration: 30s\nlimit-namespace: all\nprof-port: 10254\nmetadata-prefix: metadata/propeller\nrawoutput-prefix: \"\"\nmetrics-prefix: flyte\nmetrics-keys:\n  - project\n  - domain\n  - wf\n  - task\nenable-admin-launcher: \"true\"\nmax-workflow-retries: \"10\"\nmax-ttl-hours: \"23\"\ngc-interval: 30m0s\npublish-k8s-events: \"false\"\nmax-output-size-bytes: \"-1\"\nenable-grpc-latency-metrics: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Dependencies Helm Chart\nDESCRIPTION: Helm chart configuration for installing additional Flyte dependencies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../charts/flyte-deps/Chart.yaml\n   :language: yaml\n   :caption: charts/flyte-deps/Chart.yaml\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp using Java `Instant.now()`\nDESCRIPTION: This Java code snippet creates a Timestamp object using the current epoch second and nanosecond values obtained from Instant.now().\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nInstant now = Instant.now();\n\nTimestamp timestamp =\n    Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n        .setNanos(now.getNano()).build();\n```\n\n----------------------------------------\n\nTITLE: Setting Output and Project Options in Flytectl\nDESCRIPTION: These options allow specifying the output format and the Flyte project for Flytectl commands.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n-p, --project string                               Specifies the Flyte project.\n```\n\n----------------------------------------\n\nTITLE: Inspecting Workflow Custom Resource\nDESCRIPTION: Command to describe the contents of a specific FlytePropeller workflow custom resource.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/component_architecture/flytepropeller_architecture.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe flyteworkflows.flyte.lyft.com f7616dc75400f43e6920 -n flytesnacks-development\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Resource Attributes for Project, Domain, and Workflow in YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of a configuration file used to update cluster resource attributes for a specific workflow within a project and domain. It includes the workflow name along with the domain, project, and attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_cluster-resource-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nworkflow: core.control_flow.merge_sort.merge_sort\nattributes:\n  foo: \"bar\"\n  buzz: \"lightyear\"\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for FlyteAdmin\nDESCRIPTION: This snippet includes the command to run unit tests for the FlyteAdmin project, helping to verify the functionality of the code before finalizing changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteadmin/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make test_unit\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes YAML from Helm Chart\nDESCRIPTION: Commands to generate raw Kubernetes YAML manifests from the Helm chart and apply them using kubectl. This alternative method allows for manual inspection and deployment of the Flyte dependencies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-deps/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm template --name-template=flyte-deps . -n flyte   > flyte_generated_sandbox.yaml\nkubectl apply -f flyte_generated_sandbox.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL gRPC Exporter in YAML\nDESCRIPTION: Sets the default endpoint for exporting telemetry traces to an OTLP gRPC collector.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nendpoint: http://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Workflow\nDESCRIPTION: Command to delete a specific workflow using kubectl-flyte\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl-flyte delete --namespace flytekit-development flytekit-development-ff806e973581f4508bf1\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core Task Plugins\nDESCRIPTION: YAML configuration for enabling agent-service and setting default task types in Flyte core deployment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sagemaker_inference.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          boto: agent-service\n          sagemaker-endpoint: agent-service\n```\n\n----------------------------------------\n\nTITLE: Creating Role in Kubernetes - YAML\nDESCRIPTION: This snippet creates a Kubernetes Role named 'spark-role' that grants permissions to perform various actions on pods, services, configmaps, and persistent volume claims within a specified Namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: spark-role\n  namespace: \"{{ namespace }}\"\nrules:\n- apiGroups: [\"*\"]\n  resources:\n  - pods\n  verbs:\n  - '*'\n- apiGroups: [\"*\"]\n  resources:\n  - services\n  verbs:\n  - '*'\n- apiGroups: [\"*\"]\n  resources:\n  - configmaps\n  verbs:\n  - '*'\n- apiGroups: [\"*\"]\n  resources:\n  - persistentvolumeclaims\n  verbs:\n  - '*'\n```\n\n----------------------------------------\n\nTITLE: Describing Kubernetes Service Account in Bash\nDESCRIPTION: This command describes a Kubernetes service account in a specified namespace, useful for verifying IAM role annotations in EKS deployments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe sa <my-flyte-sa> -n <flyte-namespace>\n```\n\n----------------------------------------\n\nTITLE: Usage\nDESCRIPTION: Shows the general usage pattern for the flytectl sandbox start command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workflow Execution Config for Specific Workflow Using Flytectl\nDESCRIPTION: This Flytectl command retrieves the workflow execution configuration for a specific workflow within a project and domain. This functionality is useful for obtaining detailed configuration at the workflow level. Outputs are given in JSON format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow-execution-config.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"project\": \"flytesnacks\",\n\t\"domain\": \"development\",\n    \"workflow\": \"core.control_flow.merge_sort.merge_sort\",\n\t\"max_parallelism\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Catalog Cache Type Configuration\nDESCRIPTION: Specifies the catalog implementation type to use.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nnoop\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Flyte Documentation\nDESCRIPTION: Sets up a conda environment with required dependencies for building Flyte documentation. Creates a new environment named 'monodocs-env' and installs flyteidl package.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ conda-lock install --name monodocs-env monodocs-environment.lock.yaml\n$ conda activate monodocs-env\n$ pip install ./flyteidl\n```\n\n----------------------------------------\n\nTITLE: Creating Example Project Directory Structure\nDESCRIPTION: Shows the basic directory structure of the examples folder in the flytesnacks repository.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexamples\n├── README.md\n├── airflow_plugin\n├── athena_plugin\n├── aws_batch_plugin\n├── basics\n├── bigquery_agent\n...\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Flyte Core Helm Chart Update\nDESCRIPTION: Documents the update to flyte-core helm chart that enables templating support for oauthAdminClientCredentials.clientSecret field\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.19.2-b2.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.19.2-b2 Release ChangeLog\n\n## System\n1. Update flyte-core helm chart to allow templating in oauthAdminClientCredentials.clientSecret\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Options in Flytectl\nDESCRIPTION: These options configure OpenTelemetry settings for the Flytectl tool, including the endpoint for the OTLP telemetry trace collector, the parent sampler, and the type of exporter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n--otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n--otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n```\n\n----------------------------------------\n\nTITLE: Leader Election Configuration\nDESCRIPTION: Settings for leader election mechanism including lock configuration and timing parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_173\n\nLANGUAGE: yaml\nCODE:\n```\nenabled: \"false\"\nlock-config-map:\n  Name: \"\"\n  Namespace: \"\"\nlease-duration: 15s\nrenew-deadline: 10s\nretry-period: 2s\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Binary Chart for Single Cluster Setup\nDESCRIPTION: This YAML snippet demonstrates how to add configuration settings under the 'inline' section in the eks-production.yaml file for the flyte-binary chart used in single cluster setups.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninline:\n  # Add custom config values here.\n  # These values will be added to the configmap\n  config:\n    # Use this section to add custom config values\n    custom:\n      # Example:\n      # feature:\n      #   filename.yaml: |\n      #     some_key: value\n      #     object:\n      #       key: value\n```\n\n----------------------------------------\n\nTITLE: Configuring Stow Backend Type\nDESCRIPTION: This code snippet defines command-line parameters for configuring the Stow backend in Flyte. It specifies options for the backend configuration, the kind of backend to use, and the overall storage type. These configurations are essential for setting up and using the appropriate backend for Flyte storage functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution-queue-attribute.rst#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Command to upgrade Flyte core Helm release with values-override.yaml configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: flytectl update launchplan-meta Command Usage\nDESCRIPTION: The general usage syntax for the 'flytectl update launchplan-meta' command, showing available flags and options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan-meta.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan-meta [flags]\n```\n\n----------------------------------------\n\nTITLE: Python Union Type Implementation Examples\nDESCRIPTION: Demonstrates Python's type-erased union implementation showing runtime representation, type collapse behavior, and type equality comparisons.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/sum-types-2.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> # No runtime representation\n>>> a : t.Union[str, int] = 10\n>>> a\n10\n\n>>> # Single-type union collapse\n>>> t.Union[int, int]\n<class 'int'>\n\n>>> # Trivial duplicate collapse\n>>> t.Union[int, int, str]\ntyping.Union[int, str]\n\n>>> # Non-trivial duplicate collapse:\n>>> a = t.Union[t.List[t.Union[str, int]], t.List[t.Union[str, int]]]\n>>> b = t.Union[t.List[t.Union[str, int]], t.List[t.Union[int, str]]]\n>>> a\ntyping.List[typing.Union[str, int]]\n>>> b\ntyping.List[typing.Union[str, int]]\n>>> a == b\nTrue\n\n>>> # Order does not matter:\n>>> t.Union[str, int] == t.Union[int, str]\nTrue\n```\n\n----------------------------------------\n\nTITLE: Adding Flyte Helm Repository\nDESCRIPTION: Bash commands to add the Flyte Helm repository and fetch the flyte-core chart for deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\nhelm repo update\n# Get flyte-core helm chart\nhelm fetch --untar --untardir . flyteorg/flyte-core\ncd flyte-core\n```\n\n----------------------------------------\n\nTITLE: Defining Email Notification Message Type in Protocol Buffers\nDESCRIPTION: Protocol buffer message definition for email notification specifications. Contains a repeated field for recipient email addresses.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage EmailNotification {\n  repeated string recipients_email = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Latest Workflow Version\nDESCRIPTION: Retrieves the latest version of a workflow by name within a specified project and domain.  The `--latest` flag is used to indicate that only the latest version should be returned. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development  core.basic.lp.go_greet --latest\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Array Job Size in Flyte\nDESCRIPTION: Sets the maximum size (number of elements) allowed in a single array job.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_129\n\nLANGUAGE: yaml\nCODE:\n```\n\"5000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Task Plugins in YAML\nDESCRIPTION: This YAML snippet configures task plugins for Flyte, specifying enabled plugins and default task types. It includes settings for container, sidecar, and k8s-array task types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-binary/README.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenabled_plugins:\n  tasks:\n    task-plugins:\n      default-for-task-types:\n        container: \"container\"\n        container_array: \"k8s-array\"\n        sidecar: \"sidecar\"\n      enabled-plugins:\n        - \"container\"\n        - \"sidecar\"\n        - \"k8s-array\"\n        - \"agent-service\"\n        - \"echo\"\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Requests in YAML\nDESCRIPTION: Defines the CPU and memory resource requests for Kubernetes components.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_216\n\nLANGUAGE: yaml\nCODE:\n```\ncpu: 200m\nmemory: 500Mi\n```\n\n----------------------------------------\n\nTITLE: Register files and enable schedule\nDESCRIPTION: Registers files, specifies a version, and enables schedule for launchplans included in the serialized protobuf files.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --version v2 --enableSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Flyte Admin Volume Configuration\nDESCRIPTION: Helm values override configuration for mounting cluster credentials and configuring cluster access\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nflyteadmin:\n  additionalVolumes:\n  - name: cluster-credentials\n    secret:\n      secretName: cluster-credentials\n  additionalVolumeMounts:\n  - name: cluster-credentials\n    mountPath: /var/run/credentials\n  initContainerClusterSyncAdditionalVolumeMounts:\n  - name: cluster-credentials\n    mountPath: /etc/credentials\nconfigmap:\n  clusters:\n   labelClusterMap:\n     label1:\n     - id: dataplane_1\n       weight: 1\n   clusterConfigs:\n   - name: \"dataplane_1\"\n     endpoint: https://<your-dataplane1-kubeapi-endpoint>:443\n     enabled: true\n     auth:\n        type: \"file_path\"\n        tokenPath: \"/var/run/credentials/dataplane_1_token\"\n        certPath: \"/var/run/credentials/dataplane_1_cacert\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Storage and Plugins\nDESCRIPTION: YAML configuration for S3 storage, Databricks plugin settings, and environment variables\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0-b5.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  type: s3\n  container: \"your-bucket\"\n  stow:\n    kind: s3\n    config:\n      access_key_id: AKIAYOURKEY\n      auth_type: accesskey\n      secret_key: YOUR+SECRET\n      disable_ssl: true\n      region: us-east-2\n\ndatabricks:\n  databricksInstance: dbc-abc-123.cloud.databricks.com\n  entrypointFile: dbfs:///FileStore/tables/entrypoint.py\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables\nDESCRIPTION: Starts the demo cluster while passing environment variables. This is helpful for configuring specific parameters in the container.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --env FLYTE_TIMEOUT=700\n```\n\n----------------------------------------\n\nTITLE: Patching Flyteagent Secret with Snowflake Private Key\nDESCRIPTION: Updates the flyteagent secret in the flyte namespace with a base64 encoded Snowflake private key for query execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nENCODED_VALUE=$(cat <YOUR PRIVATE KEY FILE> | base64) && kubectl patch secret flyteagent -n flyte --patch \"{\\\"data\\\":{\\\"snowflake_private_key\\\":\\\"$ENCODED_VALUE\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Executing Remote Flyte Workflow\nDESCRIPTION: Command to execute an example machine learning workflow on a remote Flyte cluster with custom hyperparameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/component_architecture/flytepropeller_architecture.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote example.py training_workflow --hyperparameters '{\"C\": 0.4}'\n```\n\n----------------------------------------\n\nTITLE: Creating RoleBinding in Kubernetes - YAML\nDESCRIPTION: This snippet creates a RoleBinding named 'spark-role-binding' that binds the 'spark-role' to the 'spark' ServiceAccount in the specified Namespace, allowing the ServiceAccount to use the permissions defined in the Role.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: spark-role-binding\n  namespace: \"{{ namespace }}\"\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: spark-role\nsubjects:\n- kind: ServiceAccount\n  name: spark\n  namespace: \"{{ namespace }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Client and Testing - Bash Commands\nDESCRIPTION: Commands for backing up existing Flyte configuration, generating new config, and running a test workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_simple.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmv ~/.flyte/config.yaml ~/.flyte/bak.config.yaml\nflytectl config init --host localhost:8088\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/flyteorg/flytesnacks\ncd flytesnacks/examples/basics\npyflyte run --remote basics/hello_world.py hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Setting readHeaderTimeoutSeconds in YAML\nDESCRIPTION: Configures the amount of time allowed to read request headers. The default value is 32 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"32\"\n```\n\n----------------------------------------\n\nTITLE: Checking Flyte Demo Status\nDESCRIPTION: This command checks the status of the Flyte demo container, providing information on its current state. It requires flytectl to be installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl demo status\"\n```\n\n----------------------------------------\n\nTITLE: Execution Queue Attribute YAML Configuration\nDESCRIPTION: This YAML configuration file provides an example of how execution queue attributes can be defined. It includes the domain, project, and a list of tags to be applied to the execution queue attribute.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-queue-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    domain: development\n    project: flytesnacks\n    tags:\n      - foo\n      - bar\n      - buzz\n      - lightyear\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Documentation\nDESCRIPTION: Shell script snippet showing how to generate documentation for core proto files. It demonstrates cleaning existing files and using protoc to generate new documentation in restructuredtext format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/contributing.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncore_proto_files=`ls protos/flyteidl/core/*.proto |xargs`\n# Remove any currently generated file\nls -d protos/docs/core/* | grep -v index.rst | xargs rm\nprotoc --doc_out=protos/docs/core --doc_opt=restructuredtext,core.rst -I=protos `echo $core_proto_files`\n```\n\n----------------------------------------\n\nTITLE: Fetching Workflow Overrides\nDESCRIPTION: This command fetches overrides configured for a specific project and workflow, presenting them in a YAML format. Required parameters include the project name, domain, and workflow identifier. It gives a structured view of all configured task resources and their limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3749-sane-overridable-defaults.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get overrides -p flytesnacks -d development --workflow MyExampleWorkflow\n```\n\n----------------------------------------\n\nTITLE: Requesting a GPU Partition in Flyte Task\nDESCRIPTION: Python code example showing how to configure a Flyte task to request a specific GPU partition on an NVIDIA A100 device. Uses the partition_2g_10gb property to specify the partition size.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, Resources, task\nfrom flytekit.extras.accelerators import A100\n\nimage = ImageSpec(\n    base_image= \"ghcr.io/flyteorg/flytekit:py3.10-1.10.2\",\n     name=\"pytorch\",\n     python_version=\"3.10\",\n     packages=[\"torch\"],\n     builder=\"default\",\n     registry=\"<YOUR_CONTAINER_REGISTRY>\",\n )\n\n@task(requests=Resources( gpu=\"1\"),\n              accelerator=A100.partition_2g_10gb, \n              ) # 2 compute instances with 10GB memory slice\ndef gpu_available() -> bool:\n   return torch.cuda.is_available()\n```\n\n----------------------------------------\n\nTITLE: Defining MatchableAttributesConfiguration Message in Protobuf\nDESCRIPTION: Defines the MatchableAttributesConfiguration message type, which represents a custom set of attributes applied at different levels of specificity (domain, project, workflow) for resource management and execution configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MatchableAttributesConfiguration {\n  MatchingAttributes attributes = 1;\n  string domain = 2;\n  string project = 3;\n  string workflow = 4;\n  string launch_plan = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Retry Configuration\nDESCRIPTION: Defines retry settings for event recording.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n\"5\"\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Chart for Flyte Platform in Markdown\nDESCRIPTION: This snippet outlines the changes made in the Flyte v0.17.1 release, specifically mentioning updates to the helm chart. It includes the addition of Minio and Kubernetes Dashboard nodePort to the platform configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.17.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v0.17.1\n\n## Platform\n- Updated helm chart to include minio & kubernetes Dashboard nodePort\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Tags Definition\nDESCRIPTION: Defines documentation tags for categorizing the Web API configuration content.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/index.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tags:: WebAPI, Integration, Data, Advanced\n```\n\n----------------------------------------\n\nTITLE: Viewing Node Execution Details with Log Links\nDESCRIPTION: Example output of using the --details flag to view node execution details including execution timestamps and log links for debugging failed tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/debugging_executions.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n└── n1 - FAILED - 2021-06-30 08:51:07.3111846 +0000 UTC - 2021-06-30 08:51:17.192852 +0000 UTC\n│   ├── Attempt :0\n│       └── Task - FAILED - 2021-06-30 08:51:07.3111846 +0000 UTC - 2021-06-30 08:51:17.192852 +0000 UTC\n│       └── Logs :\n│           └── Name :Kubernetes Logs (User)\n│           └── URI :http://localhost:30082/#/log/flytectldemo-development/f3a5a4034960f4aa1a09-n1-0/pod?namespace=flytectldemo-development\n```\n\n----------------------------------------\n\nTITLE: Flytectl Delete Execution Queue Attribute for a Workflow\nDESCRIPTION: This command deletes the execution queue attribute for a specific workflow. It requires the project, domain, and the fully qualified name of the workflow as parameters.  This allows for targeted deletion of attributes associated with a particular workflow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution-queue-attribute.rst#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\n flytectl delete execution-queue-attribute -p flytesnacks -d development core.control_flow.merge_sort.merge_sort\n\n```\n\n----------------------------------------\n\nTITLE: Listing Workflows in Namespace\nDESCRIPTION: Command to retrieve and list all workflows in a specific namespace using kubectl-flyte\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl-flyte get --namespace flytekit-development\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Components Resources in YAML\nDESCRIPTION: Default YAML configuration values for Flyte's core components including resource limits, security contexts, image configurations, service settings and monitoring parameters. The configuration covers deployment parameters for FlyteConsole, FlytePropeller and FlyteScheduler services.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nflyteconsole.resources:\n  limits:\n    cpu: \"500m\"\n    memory: \"250Mi\"\n  requests:\n    cpu: \"10m\"\n    memory: \"50Mi\"\n\nflytepropeller.resources:\n  limits:\n    cpu: \"200m\"\n    ephemeral-storage: \"100Mi\"\n    memory: \"200Mi\"\n  requests:\n    cpu: \"10m\"\n    ephemeral-storage: \"50Mi\"\n    memory: \"100Mi\"\n\nflytescheduler.resources:\n  limits:\n    cpu: \"250m\"\n    ephemeral-storage: \"100Mi\"\n    memory: \"500Mi\"\n  requests:\n    cpu: \"10m\"\n    ephemeral-storage: \"50Mi\"\n    memory: \"50Mi\"\n```\n\n----------------------------------------\n\nTITLE: Writing Plugin Overrides to File - YAML\nDESCRIPTION: This YAML block represents the structure used when writing plugin overrides to a configuration file using Flytectl's attribute file option. The file captures domain, project, and override settings including task type, plugin IDs, and behavior for missing plugins. This output is useful for setting or verifying overrides in a YAML-configured environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_plugin-override.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\noverrides:\n   - task_type: python_task # Task type for which to apply plugin implementation overrides\n     plugin_id:             # Plugin id(s) to be used in place of the default for the task type.\n       - plugin_override1\n       - plugin_override2\n     missing_plugin_behavior: 1 # Behavior when no specified plugin_id has an associated handler. 0 : FAIL , 1: DEFAULT\n```\n\n----------------------------------------\n\nTITLE: MMCloud Agent Task Plugin Configuration\nDESCRIPTION: YAML configuration to enable MMCloud agent plugin and set it as default for mmcloud_task type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - agent-service\n    default-for-task-types:\n      - mmcloud_task: agent-service\n```\n\n----------------------------------------\n\nTITLE: Show Flytectl Help\nDESCRIPTION: Displays the usage of the flytectl demo start command along with its available flags and options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Workflow with Markdown Description\nDESCRIPTION: Command to execute a workflow with tags and a markdown file as description. Demonstrates how to use a file for detailed execution documentation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0001-flyte-execution-tags.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote --tags '[\"key1\", \"key2\"]' --description README.md test.py wf --input1=10\n```\n\n----------------------------------------\n\nTITLE: Configuring External Auth in Flyte-core Helm Values\nDESCRIPTION: YAML configuration for setting up external authentication in the flyte-core Helm chart. This includes app authentication and user authentication settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  adminServer:\n    auth:\n      appAuth:\n        authServerType: External\n      externalAuthServer:\n        allowedAudience: https://<your-flyte-deployment-URL>\n        baseUrl: https://dev-<org-id>.okta.com/oauth2/<auth-server-id>\n        metadataUrl: .well-known/openid-configuration\n      userAuth:\n        openId:\n        # baseUrl: https://<keycloak-url>/auth/realms/<keycloak-realm> # Uncomment for Keycloak and update with your installation host and realm name\n        # baseUrl: https://login.microsoftonline.com/<tenant-id>/v2.0 # Uncomment for Azure AD\n```\n\n----------------------------------------\n\nTITLE: Managing Flyte Launch Plans with Flytectl\nDESCRIPTION: Demonstrates commands for retrieving launch plan information and generating execution templates using Flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl get launch-plans [launchplan-name] [-o yaml | -o json | default -o table] [--filters...] [--sort-by...] [--selectors...]\n$ flytectl get launch-plans launch-plan-name --execution-template -o YAML\n```\n\n----------------------------------------\n\nTITLE: Post-v0.13.0 Propeller Authentication Configuration\nDESCRIPTION: Simplified YAML configuration for Flyte Propeller authentication setup after version 0.13.0, showing reduced configuration requirements.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_migration.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///mycompany.domain.com\n  clientId: flytepropeller\n  clientSecretLocation: /etc/secrets/client_secret\n```\n\n----------------------------------------\n\nTITLE: Event Configuration Default Values\nDESCRIPTION: Default settings for handling execution events and output data policies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_171\n\nLANGUAGE: yaml\nCODE:\n```\nraw-output-policy: reference\nfallback-to-output-reference: \"false\"\nErrorOnAlreadyExists: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration\nDESCRIPTION: This snippet showcases the webhook configuration parameters for Flyte, encompassing autoscaling settings (enabled, max/min replicas, metrics for CPU and memory utilization), general enablement, node selectors, pod annotations/labels, environment variables, priority class name, Prometheus enablement, resource requests (CPU, ephemeral storage, memory), security context, service settings (annotations, type), and service account configuration (annotations, create flag, image pull secrets). These settings control the behavior and deployment of the Flyte webhook component.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autoscaling\": {\n    \"enabled\": false,\n    \"maxReplicas\": 10,\n    \"metrics\": [\n      {\n        \"resource\": {\n          \"name\": \"cpu\",\n          \"target\": {\n            \"averageUtilization\": 80,\n            \"type\": \"Utilization\"\n          }\n        },\n        \"type\": \"Resource\"\n      },\n      {\n        \"resource\": {\n          \"name\": \"memory\",\n          \"target\": {\n            \"averageUtilization\": 80,\n            \"type\": \"Utilization\"\n          }\n        },\n        \"type\": \"Resource\"\n      }\n    ],\n    \"minReplicas\": 1\n  },\n  \"enabled\": true,\n  \"nodeSelector\": {},\n  \"podAnnotations\": {},\n  \"podEnv\": {},\n  \"podLabels\": {},\n  \"priorityClassName\": \"\",\n  \"prometheus\": {\n    \"enabled\": false\n  },\n  \"resources\": {\n    \"requests\": {\n      \"cpu\": \"200m\",\n      \"ephemeral-storage\": \"500Mi\",\n      \"memory\": \"500Mi\"\n    }\n  },\n  \"securityContext\": {\n    \"fsGroup\": 65534,\n    \"fsGroupChangePolicy\": \"Always\",\n    \"runAsNonRoot\": true,\n    \"runAsUser\": 1001,\n    \"seLinuxOptions\": {\n      \"type\": \"spc_t\"\n    }\n  },\n  \"service\": {\n    \"annotations\": {\n      \"projectcontour.io/upstream-protocol.h2c\": \"grpc\"\n    },\n    \"type\": \"ClusterIP\"\n  },\n  \"serviceAccount\": {\n    \"annotations\": {},\n    \"create\": true,\n    \"imagePullSecrets\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook Listen Port in YAML\nDESCRIPTION: Configures the port used to listen for webhook calls. Default is 9443.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_205\n\nLANGUAGE: yaml\nCODE:\n```\n\"9443\"\n```\n\n----------------------------------------\n\nTITLE: Validating Project Creation Options in Flytectl\nDESCRIPTION: This reference lists the various options available for the project creation command, including flags for activation, archiving, and description. This train of options allows users to manipulate projects during their lifecycle effectively.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create project [flags]\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Type Option\nDESCRIPTION: Sets the type of storage to configure, such as s3, minio, local, mem, or stow. Defaults to s3.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \\\"s3\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Client in YAML\nDESCRIPTION: Defines Kubernetes client configuration for Flyte propeller, including burst, QPS, and timeout settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_164\n\nLANGUAGE: yaml\nCODE:\n```\nburst: 25\nqps: 100\ntimeout: 30s\n```\n\n----------------------------------------\n\nTITLE: Setting Per Retry Timeout in YAML\nDESCRIPTION: Configures the default gRPC per retry timeout to 15 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n15s\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress with TLS in YAML\nDESCRIPTION: This YAML configuration enables TLS for the Flyte ingress, necessary for resolving authentication handshake failures in custom Kubernetes clusters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  host: <http://example.com|example.com>\n  separateGrpcIngress: true\n  separateGrpcIngressAnnotations:\n    <http://ingress.kubernetes.io/backend-protocol|ingress.kubernetes.io/backend-protocol>: \"grpc\"\n  annotations:\n    <http://ingress.kubernetes.io/app-root|ingress.kubernetes.io/app-root>: \"/console\"\n    <http://ingress.kubernetes.io/default-backend-redirect|ingress.kubernetes.io/default-backend-redirect>: \"/console\"\n    <http://kubernetes.io/ingress.class|kubernetes.io/ingress.class>: haproxy\n  tls:\n    enabled: true # enable tls\n```\n\n----------------------------------------\n\nTITLE: Markdown Renderer Example\nDESCRIPTION: Example of using Markdown renderer to convert Markdown text to HTML.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True)\ndef markdown_renderer():\n    md = renderer.MarkdownRenderer()\n    md.append(\"# This is a title\")\n    md.append(\"This is some **bold** text.\")\n    return None\n```\n\n----------------------------------------\n\nTITLE: Setting Up Databricks Secret\nDESCRIPTION: Command to create and update Databricks access token secret in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSECRET_VALUE=$(echo -n \"<DATABRICKS_TOKEN>\" | base64) && \\\nkubectl patch secret flyteagent -n flyte --patch \"{\\\"data\\\":{\\\"flyte_databricks_access_token\\\":\\\"$SECRET_VALUE\\\"}}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Cluster Label in YAML\nDESCRIPTION: Example YAML configuration for updating an execution cluster label for a project and domain combination.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-cluster-label.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nvalue: foo\n```\n\n----------------------------------------\n\nTITLE: Compiling and Starting the Flyte Server with Custom Configuration\nDESCRIPTION: Commands to compile the Flyte project and start the server with a specific configuration file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_development_cluster.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake compile\n./flyte start --config ./flyte-single-binary-local.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core for Airflow Agent (YAML)\nDESCRIPTION: This YAML configuration is used to enable the Airflow agent in a Flyte core installation. It specifies the enabled plugins and sets the default task types, including the 'agent-service' for Airflow tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/airflow.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    # -- Tasks specific configuration [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#GetConfig)\n    tasks:\n      # -- Plugins configuration, [structure](https://pkg.go.dev/github.com/flyteorg/flytepropeller/pkg/controller/nodes/task/config#TaskPluginConfig)\n      task-plugins:\n        # -- [Enabled Plugins](https://pkg.go.dev/github.com/flyteorg/flyteplugins/go/tasks/config#Config). Enable sagemaker*, athena if you install the backend\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          airflow: agent-service\n```\n\n----------------------------------------\n\nTITLE: Initializing Flytectl Config with Storage Provider\nDESCRIPTION: This command initializes a Flytectl configuration file specifying a storage provider, which is crucial for managing data storage in Flyte environments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_init.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl config init --host=flyte.myexample.com --storage\n```\n\n----------------------------------------\n\nTITLE: Visualizing Modified Workflow Graph\nDESCRIPTION: Mermaid diagram showing a modified workflow with an additional task B1 that creates a short circuit path to D. Demonstrates how workflow structure can be changed while maintaining caching benefits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/versioning.rst#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n       A-->B;\n       B-->B1;\n       B1-->D;\n       B1-->C;\n       C-->D;\n```\n\n----------------------------------------\n\nTITLE: Flytectl Authentication Configuration\nDESCRIPTION: Configuration for Flytectl authentication using either PKCE or Client Credentials flows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n    endpoint: dns:///<Flyte ingress url>\n    authType: Pkce\n    clientId: <Id>\n    clientSecretLocation: </some/path/to/key>\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Cache Configuration Options\nDESCRIPTION: Configures the Blob store data cache. `--storage.cache.max_size_mbs` sets the maximum in-memory cache size in MB.  `--storage.cache.target_gc_percent` adjusts the garbage collection target percentage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\"\n      \"--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\"\n```\n\n----------------------------------------\n\nTITLE: Default Qubole Analyze Link Path Configuration in YAML\nDESCRIPTION: Default URL path where queries can be visualized on the Qubole website.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\n/v2/analyze\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Burst in YAML\nDESCRIPTION: Sets the maximum burst for throttle in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_178\n\nLANGUAGE: yaml\nCODE:\n```\n\"10\"\n```\n\n----------------------------------------\n\nTITLE: Defining NamedEntity Message Type in Protocol Buffers\nDESCRIPTION: Protocol buffer message definition for Flyte resources like tasks, workflows and launch plans. Includes resource type, identifier and metadata fields.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage NamedEntity {\n  flyteidl.core.ResourceType resource_type = 1;\n  NamedEntityIdentifier id = 2;\n  NamedEntityMetadata metadata = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Flyte Services List Table in Markdown\nDESCRIPTION: A list table showing the main Flyte services and their descriptions using Markdown syntax. Includes Flyte Scheduler, Data Catalog, Admin, and PropEller services with reference links to their respective configuration specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`Flyte Scheduler <flytescheduler-config-specification>`\n  - The Flyte workflow scheduler service.\n* - {ref}`Data Catalog <flytedatacatalog-config-specification>`\n  - The Flyte Data Catalog service.\n* - {ref}`Flyte Admin <flyteadmin-config-specification>`\n  - The Flyte control plane.\n* - {ref}`FlytePropeller <flytepropeller-config-specification>`\n  - Execution engine configuration\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Command\nDESCRIPTION: Yarn command to start the local development server using Webpack\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/console.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Generating Raw Kubernetes YAML with Helm Template\nDESCRIPTION: This command demonstrates how to use Helm to generate a raw Kubernetes YAML file for Flyte core, specifying the release name, namespace, and values file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm template --name-template=flyte-eks . -n flyte -f values-eks.yaml > flyte_generated_eks.yaml\n```\n\n----------------------------------------\n\nTITLE: Shell script for calculating ellipse area\nDESCRIPTION: Defines a Shell script that reads input radii, calculates the area of an ellipse, and writes the result to an output file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\nset -e\n\n# Read inputs\nradius1=$(cat /var/inputs/radius1)\nradius2=$(cat /var/inputs/radius2)\n\n# Calculate area\narea=$(echo \"3.14159 * $radius1 * $radius2\" | bc -l)\n\n# Write output\necho $area > /var/outputs/area\n```\n\n----------------------------------------\n\nTITLE: Editing Flyte Configuration\nDESCRIPTION: Command to edit the Flyte sandbox configuration map for agent setup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/snowflake.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit configmap flyte-sandbox-config -n flyte\n```\n\n----------------------------------------\n\nTITLE: Register files and override Kubernetes service account\nDESCRIPTION: Registers files, continues on error, specifies a version, and overrides the Kubernetes service account.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError --version v2 --k8sServiceAccount \\\"kubernetes-service-account\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Workflow Scheduler Configuration\nDESCRIPTION: This configuration snippet shows the settings for the Workflow Scheduler within the Flyte platform. It includes options to enable or disable the workflow scheduler module. If disabled, no scheduled launchplans/workflows will be supported.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {},\n  \"enabled\": false,\n  \"type\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Helm Secret Management Configuration\nDESCRIPTION: YAML configuration for disabling Helm secret management and creating secrets manually in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  adminOauthClientCredentials:\n    enabled: true\n    clientSecret: null\n    clientId: <client_id>\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n name: flyte-secret-auth\n namespace: flyte\ntype: Opaque\nstringData:\n  client_secret: <client_secret>\n```\n\n----------------------------------------\n\nTITLE: Delete Cluster Resource Attribute with Project and Domain - Flyte CLI (yaml)\nDESCRIPTION: This snippet demonstrates how to delete cluster resource attributes for a specific project and domain using the Flyte CLI. The command can be modified to include a workflow name and uses options to specify an attributes file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_cluster-resource-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflytectl delete cluster-resource-attribute -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Listing Flyte API References in Markdown\nDESCRIPTION: This code snippet creates a table in Markdown format listing Flyte's API references, including Flytekit (Python SDK), FlyteCTL (command-line interface), and FlyteIDL (core specification language). Each API is briefly described and linked to its documentation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {doc}`Flytekit <api/flytekit/docs_index>`\n  - Flyte's official Python SDK.\n* - {doc}`FlyteCTL <api/flytectl/docs_index>`\n  - Flyte's command-line interface for interacting with a Flyte cluster.\n* - {doc}`FlyteIDL <api/flyteidl/docs_index>`\n  - Flyte's core specification language.\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting A100 GPU with No Partition Preference\nDESCRIPTION: Python code example showing how to configure a Flyte task to request an NVIDIA A100 GPU without specifying a particular partition configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import ImageSpec, Resources, task\nfrom flytekit.extras.accelerators import A100\n\nimage = ImageSpec(\n    base_image= \"ghcr.io/flyteorg/flytekit:py3.10-1.10.2\",\n     name=\"pytorch\",\n     python_version=\"3.10\",\n     packages=[\"torch\"],\n     builder=\"default\",\n     registry=\"<YOUR_CONTAINER_REGISTRY>\",\n )\n\n@task(requests=Resources( gpu=\"1\"),\n              accelerator=A100, \n              ) \ndef gpu_available() -> bool:\n   return torch.cuda.is_available()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stow Storage in YAML\nDESCRIPTION: Sets the storage configuration for the Stow backend in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_187\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Enabling Ingress for Flyte-core on GCP using NGINX\nDESCRIPTION: YAML configuration to enable ingress for a Flyte-core deployment on Google Cloud Platform using NGINX ingress controller. It specifies the ingress class and annotations for SSL redirect.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/cloud_production.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  create: true\n  host: flyte.example.com\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n  tls:\n    - secretName: flyte-tls\n      hosts:\n        - flyte.example.com\n```\n\n----------------------------------------\n\nTITLE: Default Interruptible Tolerations Configuration in YAML\nDESCRIPTION: Default null value for tolerations used for interruptible pods.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_100\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Updating Task Resource Attributes with flytectl\nDESCRIPTION: Command to update task resource attributes for a project-domain combination using flytectl and the tra.yaml file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update task-resource-attribute --attrFile tra.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing pflags on Windows\nDESCRIPTION: PowerShell commands for installing pflags on Windows systems. First installs the scoop package manager, then adds the flytestdlib bucket, and finally installs pflags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytestdlib/README.md#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n```\n\nLANGUAGE: powershell\nCODE:\n```\nscoop bucket add flytestdlib https://github.com/flyteorg/flytestdlib.git\n```\n\nLANGUAGE: powershell\nCODE:\n```\nscoop install pflags\n```\n\n----------------------------------------\n\nTITLE: Spark Log Configuration\nDESCRIPTION: Logging configuration for Spark applications including Kubernetes, Cloudwatch, and Stackdriver settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_158\n\nLANGUAGE: yaml\nCODE:\n```\nall-user:\n  cloudwatch-enabled: false\n  cloudwatch-log-group: \"\"\n  cloudwatch-region: \"\"\n  cloudwatch-template-uri: \"\"\n  dynamic-log-links: null\n  gcp-project: \"\"\n  kubernetes-enabled: false\n  kubernetes-template-uri: \"\"\n  kubernetes-url: \"\"\n  stackdriver-enabled: false\n  stackdriver-logresourcename: \"\"\n  stackdriver-template-uri: \"\"\n  templates: null\nmixed:\n  cloudwatch-enabled: false\n  cloudwatch-log-group: \"\"\n  cloudwatch-region: \"\"\n  cloudwatch-template-uri: \"\"\n  dynamic-log-links: null\n  gcp-project: \"\"\n  kubernetes-enabled: true\n  kubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\n  kubernetes-url: \"\"\n  stackdriver-enabled: false\n  stackdriver-logresourcename: \"\"\n  stackdriver-template-uri: \"\"\n  templates: null\nsystem:\n```\n\n----------------------------------------\n\nTITLE: Flytectl Get Help Option\nDESCRIPTION: This option displays help information for the flytectl get command. It provides a list of available subcommands and options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for get\n\n```\n\n----------------------------------------\n\nTITLE: Updating Flyte ConfigMap for Slurm Agent\nDESCRIPTION: This YAML configuration enables the Slurm agent in the Flyte demo cluster. It should be used to update the flyte-sandbox-config ConfigMap in the flyte namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    default-for-task-types:\n      container: container\n      container_array: k8s-array\n      sidecar: sidecar\n      slurm_fn: agent-service\n      slurm: agent-service\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overrides with Flytectl\nDESCRIPTION: The code snippet demonstrates how to retrieve override configurations using the Flytectl command-line tool. It illustrates how to fetch override details at global, domain, and project levels. This requires a Flytectl installation and appropriate permissions to access the Flyte installation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3749-sane-overridable-defaults.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get overrides -o overrides.yaml\n...\n```\n\nLANGUAGE: shell\nCODE:\n```\nflytectl get overrides -d development -p flytesnacks -o overrides.yaml\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieve specific task version\nDESCRIPTION: Retrieves a particular version of a task by its name within a Flyte project and domain.  The `--version` flag allows specifying the exact version to retrieve.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development  core.basic.lp.greet --version v2\"\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status\nDESCRIPTION: Command to verify the status of Flyte deployment pods\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Override Configuration in YAML\nDESCRIPTION: Example YAML configuration file (po.yaml) for updating plugin overrides in Flyte. It specifies the project, domain, and override settings for task types and plugin IDs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_plugin-override.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\noverrides:\n   - task_type: python_task # Task type for which to apply plugin implementation overrides\n     plugin_id:             # Plugin id(s) to be used in place of the default for the task type.\n       - plugin_override1\n       - plugin_override2\n     missing_plugin_behavior: 1 # Behavior when no specified plugin_id has an associated handler. 0 : FAIL , 1: DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IAM Service Account for Control Plane\nDESCRIPTION: Bash command to create an IAM service account for the Flyte control plane using eksctl, associating it with the control plane EKS cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neksctl create iamserviceaccount --cluster=<controlplane-cluster-name> --name=flyteadmin --role-only --role-name=flyte-controlplane-role --attach-policy-arn <ARN-of-your-IAM-policy> --approve --region <AWS-REGION-CODE> --namespace flyte\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Demo Container with Flytectl\nDESCRIPTION: This snippet demonstrates how to execute non-interactive commands within the Flytectl demo container using the `flytectl demo exec` command. It is essential to have Flytectl installed and configured properly to use this command. The key parameter is `--`, which separates the `flytectl demo exec` command from the command to be executed inside the container. The expected output is the immediate result of the executed command inside the container.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_exec.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo exec -- ls -al\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core Components in YAML\nDESCRIPTION: This YAML snippet defines configuration options for core Flyte components including admin, data catalog, and propeller. It specifies whether components are disabled and includes settings for seeding projects.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-binary/README.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflyte-core-components:\n  admin:\n    disableClusterResourceManager: false\n    disableScheduler: false\n    disabled: false\n    seedProjectsWithDetails:\n      - description: \"Default project setup.\"\n        name: \"flytesnacks\"\n    seedProjects:\n      - \"flytesnacks\"\n  dataCatalog:\n    disabled: false\n  propeller:\n    disableWebhook: false\n    disabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Task Plugins\nDESCRIPTION: This YAML snippet defines the configuration for Flyte task plugins, specifying default task types and enabled plugins.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.enabled_plugins.tasks:\n  task-plugins:\n    default-for-task-types:\n      container: \"container\"\n      container_array: \"k8s-array\"\n      sensor: \"agent-service\"\n      sidecar: \"sidecar\"\n    enabled-plugins:\n      - \"container\"\n      - \"sidecar\"\n      - \"k8s-array\"\n      - \"agent-service\"\n      - \"echo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Slurm Agent in Flyte Core\nDESCRIPTION: This YAML configuration enables the Slurm agent in Flyte core. It should be added to a file named values-override.yaml for use with Helm.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nenabled_plugins:\n  tasks:\n    task-plugins:\n      enabled-plugins:\n        - container\n        - sidecar\n        - k8s-array\n        - agent-service\n      default-for-task-types:\n        container: container\n        sidecar: sidecar\n        container_array: k8s-array\n        slurm_fn: agent-service\n        slurm: agent-service\n```\n\n----------------------------------------\n\nTITLE: Setting Up Slurm Directories\nDESCRIPTION: Commands to create and set proper ownership for Slurm-related directories.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir -p /var/spool/slurmctld /var/spool/slurmd /var/log/slurm\nsudo chown -R slurm: /var/spool/slurmctld /var/spool/slurmd /var/log/slurm\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Resource Primary Label in Flyte\nDESCRIPTION: Configures the primary label for a given Kubernetes service cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_146\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a List Table in reStructuredText for GCP Plugin Links\nDESCRIPTION: This RST code creates a list table with no header row and specific column widths. It contains a link to the Google BigQuery plugin setup guide.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/index.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`Google BigQuery <deployment-plugin-setup-gcp-bigquery>`\n  - Guide to setting up the Google BigQuery plugin.\n```\n\n----------------------------------------\n\nTITLE: Defining Error Document Proto\nDESCRIPTION: Protobuf definition for error documentation format to communicate container failures to execution engine.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ErrorDocument {\n  ContainerError error = 1;  // The error raised during execution.\n}\n```\n\n----------------------------------------\n\nTITLE: Database Model for Execution Tracking\nDESCRIPTION: Go struct definition for the Execution model, adding fields to denormalize launch plan entity information for performance optimization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/RFC-5659-execution-concurrency.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodel Execution {\n\t...\n\tLaunchPlanProject string\n\tLaunchPlanDomain string\n\tLaunchPlanName string\n}\n```\n\n----------------------------------------\n\nTITLE: Config File Example for Cluster Resource Attributes - YAML\nDESCRIPTION: This snippet is an example of the configuration file used to specify cluster resource attributes. The attributes section includes optional key-value pairs that can be retained for 'get', 'update' and 'delete' commands.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_cluster-resource-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nattributes:\n  foo: \"bar\"\n  buzz: \"lightyear\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Plugin in YAML\nDESCRIPTION: Sets up the Copilot plugin configuration for Kubernetes, including the Docker image to use and startup timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap.copilot:\n  plugins:\n    k8s:\n      co-pilot:\n        image: \"cr.flyte.org/flyteorg/flytecopilot:1.15.1\"\n        name: \"flyte-copilot-\"\n        start-timeout: \"30s\"\n```\n\n----------------------------------------\n\nTITLE: Secret Class Import in Flytekit\nDESCRIPTION: Importing the Secret class from flytekit, which is used to request secrets from the configured secret manager.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import Secret\nfrom flytekit import task, workflow\nfrom flytekit.types.directory import FlyteDirectory\nfrom flytekit.types.file import FlyteFile\n\nfrom flytekit import current_context\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Bash command for upgrading the Flyte core Helm release with BigQuery plugin configuration using the values override file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/bigquery.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Flytectl Top-Level Commands\nDESCRIPTION: Shows the main commands available in the Flytectl CLI, including version, configure, get, create, update, and delete.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl [options]\n  version\n  configure\n  get\n  create\n  update\n  delete \n```\n\n----------------------------------------\n\nTITLE: Flyte User Guide Tips Block in Markdown\nDESCRIPTION: A Markdown tip block advising users to reference deployment guides for managing Flyte clusters in the cloud.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{tip}\nTo learn about how to spin up and manage a Flyte cluster in the cloud, see the\n{doc}`Deployment Guides <../deployment/index>`.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Overrides with a ConfigMap\nDESCRIPTION: This YAML snippet shows how to configure overrides using a ConfigMap in FlyteAdmin. It includes examples for task resource limits and security settings, illustrating how to define these in a reproducible and declarative manner, suitable for GitOps workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3749-sane-overridable-defaults.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ConfigMap\nmetadata:\n  name: defaults\n  namespace: flyte\n  apiVersion: v1\ndata:\n  defaults.yaml: |\n      # MyExampleWorkflow overrides\n      - project: flytesnacks\n        domain: development\n        workflow: MyExampleWorkflow\n        overrides:\n          taskResources:\n            defaults:\n              cpu: \"1\" \n              memory: \"500Mi\"\n            limits:\n              cpu: \"3\" \n              memory: \"2Gi\"\n              gpu: \"4\" \n            ...    \n      # Flytesnacks/development level overrides    \n      - project: flytesnacks\n        domain: development\n        overrides:\n          workflowExecutionConfig:\n            labels:\n              my-key: \"my-value\"\n            securityContext:\n              coreIdentity:\n                iamRole: \"my_iam_role\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Generating Workflow-Level Execution Config File Using Flytectl\nDESCRIPTION: This Flytectl feature generates a sample YAML configuration file at the project domain workflow level, including annotations, labels, security configurations, and more. This functionality aids in setting up detailed configurations for individual workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow-execution-config.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  values:\n    cliAnnotationKey: cliAnnotationValue\ndomain: development\nlabels:\n  values:\n    cliLabelKey: cliLabelValue\nmax_parallelism: 10\nproject: flytesnacks\nworkflow: k8s_spark.dataframe_passing.my_smart_structured_dataset\nraw_output_data_config:\n  output_location_prefix: cliOutputLocationPrefix\nsecurity_context:\n  run_as:\n    k8s_service_account: default\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte with Kubernetes Resources - YAML\nDESCRIPTION: This snippet configures enabled plugins for Flyte and sets up cluster resource manager templates, including Namespaces, Roles, and ServiceAccounts that are needed for various Flyte functionalities.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - spark\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          spark: spark\ncluster_resource_manager:\n  enabled: true\n  standalone_deploy: false\n  templates:\n    - key: aa_namespace\n      value: |\n        apiVersion: v1\n        kind: Namespace\n        metadata:\n          name: {{ namespace }}\n        spec:\n          finalizers:\n          - kubernetes\n    - key: ac_spark_role\n      value: |\n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: Role\n        metadata:\n          name: spark-role\n          namespace: {{ namespace }}\n        rules:\n        - apiGroups: [\"*\"]\n          resources:\n          - pods\n          verbs:\n          - '*'\n        - apiGroups: [\"*\"]\n          resources:\n          - services\n          verbs:\n          - '*'\n        - apiGroups: [\"*\"]\n          resources:\n          - configmaps\n          verbs:\n          - '*'\n        - apiGroups: [\"*\"]\n          resources:\n          - persistentvolumeclaims\n          verbs:\n          - '*'\n    - key: ad_spark_service_account\n      value: |\n        apiVersion: v1\n        kind: ServiceAccount\n        metadata:\n          name: spark\n          namespace: {{ namespace }}\n    - key: ae_spark_role_binding\n      value: |\n        apiVersion: rbac.authorization.k8s.io/v1\n        kind: RoleBinding\n        metadata:\n          name: spark-role-binding\n          namespace: {{ namespace }}\n        roleRef:\n          apiGroup: rbac.authorization.k8s.io\n          kind: Role\n          name: spark-role\n        subjects:\n        - kind: ServiceAccount\n          name: spark\n          namespace: {{ namespace }}\n```\n\n----------------------------------------\n\nTITLE: Core Resource Constraint Default Values\nDESCRIPTION: Default values for core resource constraints including project and namespace scope constraints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nValue: 100\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nValue: 50\n\n```\n\n----------------------------------------\n\nTITLE: Example Pod Status Output\nDESCRIPTION: Sample output showing a failed pod with ErrImagePull status, demonstrating the naming convention of execution pods with nodeId suffix.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/debugging_executions.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                        READY   STATUS             RESTARTS   AGE\nf65009af77f284e50959-n0-0   0/1     ErrImagePull       0          18h\n```\n\n----------------------------------------\n\nTITLE: Default Timeout Configuration in YAML\nDESCRIPTION: Default timeout duration (1 minute) for common operations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_77\n\nLANGUAGE: yaml\nCODE:\n```\n1m0s\n```\n\n----------------------------------------\n\nTITLE: Flytectl Project Specification Option\nDESCRIPTION: Specifies the Flyte project to interact with when running `flytectl` commands.  This is required to target operations to a specific Flyte deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n\"-p, --project string                               Specifies the Flyte project.\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Override Configuration File (po.yaml)\nDESCRIPTION: This YAML snippet shows the structure of the configuration file (po.yaml) used for deleting plugin overrides. It includes the domain, project, and override specifications such as `task_type`, `plugin_id`, and `missing_plugin_behavior`. The overrides section is optional during deletion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"domain: development\nproject: flytesnacks\noverrides:\n   - task_type: python_task # Task type for which to apply plugin implementation overrides\n     plugin_id:             # Plugin id(s) to be used in place of the default for the task type.\n       - plugin_override1\n       - plugin_override2\n     missing_plugin_behavior: 1 # Behavior when no specified plugin_id has an associated handler. 0 : FAIL , 1: DEFAULT\"\n```\n\n----------------------------------------\n\nTITLE: Default Cluster Label Configuration in YAML\nDESCRIPTION: Default cluster label ('default') to be used if a label is not specified on a Hive job.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\ndefault\n```\n\n----------------------------------------\n\nTITLE: Setting httpPort for Catalog in YAML\nDESCRIPTION: Configures the HTTP port on which to serve Catalog. The default value is 8080.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"8080\"\n```\n\n----------------------------------------\n\nTITLE: Creating a List Table for Plugin Setup Guides in Markdown\nDESCRIPTION: This code snippet creates a list table in Markdown format, outlining different plugin types and their corresponding setup guides. It includes K8s, Web API, AWS, and GCP plugins.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`K8s Plugins <deployment-plugin-setup-k8s>`\n  - Guide to setting up the K8s Operator Plugins.\n* - {ref}`Web API Plugin <deployment-plugin-setup-webapi>`\n  - Guide to setting up the Web API Plugins.\n* - {ref}`AWS Plugins <deployment-plugin-setup-aws>`\n  - Guide to setting up AWS-specific Plugins.\n* - {ref}`GCP Plugins <deployment-plugin-setup-gcp>`\n  - Guide to setting up GCP-specific Plugins.\n```\n```\n\n----------------------------------------\n\nTITLE: Get Specific Workflow with Filters\nDESCRIPTION: Retrieves a specific workflow that matches the specified filter and workflow name. The workflow name is provided as a command-line argument, and the `--filter.fieldSelector` flag specifies the filter expression. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development k8s_spark.dataframe_passing.my_smart_schema --filter.fieldSelector=\\\"workflow.version=v1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Deployment\nDESCRIPTION: Command to restart the Flyte deployment in the sandbox environment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/k8sservice.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyte-sandbox -n flyte\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Type Configuration\nDESCRIPTION: This flag sets the type of storage backend to configure.  Supported types include s3, minio, local, mem, and stow. The default value is s3.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_6\n\nLANGUAGE: TEXT\nCODE:\n```\n\"--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \\\"s3\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core Helm Chart\nDESCRIPTION: Helm chart configuration for multiple cluster Flyte deployment option\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: ../../../charts/flyte-core/Chart.yaml\n   :language: yaml\n   :caption: charts/flyte-core/Chart.yaml\n```\n\n----------------------------------------\n\nTITLE: Workflow Notifications Configuration\nDESCRIPTION: This configuration snippet shows the settings for workflow notifications within the Flyte platform. It includes options to enable or disable the workflow notifications module. It's mentioned that Flyte uses cloud native pub-sub systems to notify users of various events in their workflows\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {},\n  \"enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CUDA using Nvidia Docker Image in ImageSpec\nDESCRIPTION: This snippet shows how to use a pre-installed CUDA Nvidia docker image as the base image in ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimage_spec = ImageSpec(\n  base_image=\"nvidia/cuda:12.6.1-cudnn-devel-ubuntu22.04\",\n  packages=[\"tensorflow\", \"pandas\"],\n  python_version=\"3.9\",\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default URL Configuration in YAML\nDESCRIPTION: Configures the default URL settings, including various URL components and flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nForceQuery: false\nFragment: \"\"\nHost: \"\"\nOmitHost: false\nOpaque: \"\"\nPath: \"\"\nRawFragment: \"\"\nRawPath: \"\"\nRawQuery: \"\"\nScheme: \"\"\nUser: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte DataCatalog Server\nDESCRIPTION: This YAML snippet defines the configuration for the Flyte DataCatalog Server, including gRPC and HTTP settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.datacatalogServer:\n  application:\n    grpcMaxRecvMsgSizeMBs: 6\n    grpcPort: 8089\n    grpcServerReflection: true\n    httpPort: 8080\n  datacatalog:\n    metrics-scope: \"datacatalog\"\n    profiler-port: 10254\n    storage-prefix: \"metadata/datacatalog\"\n```\n\n----------------------------------------\n\nTITLE: SIG Charter Requirements Checklist\nDESCRIPTION: Markdown checklist detailing the required components and steps for creating and submitting a Special Interest Group (SIG) charter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0007-community-groups.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Define and submit a charter including:\n  - [ ] Scope. It should be a short statement describing SIG's goal at a high level\n  - [ ] List of technical assets owned by this SIG (code repos, etc)\n  - [ ] Non-goals or Out of scope items\n  - [ ] Roles\n    - [ ] SIG Chair(s)\n        - Should be at least \"Community members\" as defined in [GOVERNANCE]\n        - Should define how priorities and commitments are managed\n        - Leads taking an extended leave of 1 or more months SHOULD coordinate with other leads to ensure the role is adequately staffed during their leave\n        - Leads MAY decide to step down at anytime and propose a replacement.\n   - [ ] Communication channels\n       - [ ] Meetings should occur at least once per month. Use [Doodle] to coordinate if needed\n           - Meetings should be recorded and notes public\n       - [ ] Slack channel to use or create\n```\n\n----------------------------------------\n\nTITLE: Enabling Stackdriver Logging in Flyte\nDESCRIPTION: Boolean flag to enable or disable Google Stackdriver as a logging backend for Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_155\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration\nDESCRIPTION: Kubernetes deployment and service configuration for the backend plugin system deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-exteranl-plugin-service.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: backend-plugin-system\n  labels:\n    app: backend-plugin-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: backend-plugin-system\n  template:\n    metadata:\n      labels:\n        app: backend-plugin-system\n    spec:\n      containers:\n      - name: backend-plugin-system\n        image: pingsutw/backend-plugin-system:v1\n        ports:\n        - containerPort: 8000\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: backend-plugin-system\nspec:\n  selector:\n    app: backend-plugin-system\n  ports:\n    - protocol: TCP\n      port: 8000\n      targetPort: 8000\n```\n\n----------------------------------------\n\nTITLE: Defining Container Error Proto\nDESCRIPTION: Protobuf definition for container execution errors including error code, message, kind and origin.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ContainerError {\n  string code = 1;  // A simplified code for errors\n  string message = 2;  // A detailed error message\n  Kind kind = 3;  // Abstract error kind\n  ExecutionError.ErrorKind origin = 4;  // Error origin\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Core Database Tables in FlyteAdmin\nDESCRIPTION: Defines the core database tables used by FlyteAdmin for storing executions, launch plans, tasks and related data\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/admin.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- executions\n- execution_events\n- launch_plans\n- node_executions\n- node_execution_events\n- tasks\n- task_executions\n- workflows\n```\n\n----------------------------------------\n\nTITLE: Updating Cluster Resource Attributes for Project and Domain in YAML\nDESCRIPTION: This YAML snippet shows the structure of a configuration file (cra.yaml) used to update cluster resource attributes for a given project and domain combination. It defines the domain, project, and a set of key-value attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_cluster-resource-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nattributes:\n  foo: \"bar\"\n  buzz: \"lightyear\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for FlyteAdmin Setup\nDESCRIPTION: This snippet provides the commands necessary to install dependencies for FlyteAdmin, ensuring the environment is correctly configured before performing other build tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteadmin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Please make sure you have all the dependencies installed:\n$ make install\n\n# In case you are only missing goimports:\n$ go install golang.org/x/tools/cmd/goimports@latest\n$ make goimports\n```\n\n----------------------------------------\n\nTITLE: Using Flytectl Upgrade with Flags in Bash\nDESCRIPTION: General syntax for using the 'flytectl upgrade' command with optional flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_upgrade.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl upgrade [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting a Flyte Demo Cluster in Development Mode\nDESCRIPTION: Command to start a Flyte demo cluster in development mode using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/testing_agents_in_a_local_development_cluster.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --dev\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow-Specific Execution Cluster Label\nDESCRIPTION: Command to update an execution cluster label for a specific workflow using a YAML configuration file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-cluster-label.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-cluster-label --attrFile ecl.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Task Resource Defaults\nDESCRIPTION: This YAML snippet defines the default resource allocations and limits for Flyte tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.task_resource_defaults:\n  task_resources:\n    defaults:\n      cpu: \"100m\"\n      memory: \"200Mi\"\n      storage: \"5Mi\"\n    limits:\n      cpu: 2\n      gpu: 1\n      memory: \"1Gi\"\n      storage: \"20Mi\"\n```\n\n----------------------------------------\n\nTITLE: Listing Flyte Community Resources in Markdown\nDESCRIPTION: This code snippet creates a table in Markdown format listing various Flyte community resources, including links to general resources, community Q&A, introductions, idea sharing, and deployment help. Each resource is briefly described and linked to its respective Slack channel or documentation page.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/index.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`🗓️ Resources <community>`\n  - Find resources for office hours, newsletter, and slack.\n* - [🤔 Ask the Community](https://flyte-org.slack.com/archives/CP2HDHKE1)\n  - Ask anything related to Flyte and get a response within a few hours.\n* - [👋 Introduce yourself](https://flyte-org.slack.com/archives/C01RXBFV1M5)\n  - Tell us about yourself. We'd love to know about you and what brings you to Flyte.\n* - [💭 Share ideas](https://flyte-org.slack.com/archives/CPQ3ZFQ84>)\n  - Share any suggestions or feedback you have on how to make Flyte better.\n* - [🛠 Get help with deploment](https://flyte-org.slack.com/archives/C01P3B761A6>)\n  - If you need any help with Flyte deployment, hit us up.\n```\n```\n\n----------------------------------------\n\nTITLE: Python Task Definition Example\nDESCRIPTION: Demonstrates the before and after implementation of tasks using dict types, showing the transition from Protobuf Struct to Binary serialization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef t1() -> dict:\n  ...\n  return {\"a\": 1} # Protobuf Struct {\"a\": 1.0}\n\n@task\ndef t2(a: dict):\n  print(a[\"integer\"]) # wrong, will be a float\n```\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef t1() -> dict: # Literal(scalar=Scalar(binary=Binary(value=b'msgpack_bytes', tag=\"msgpack\")))\n  ...\n  return {\"a\": 1}  # Protobuf Binary value=b'\\x81\\xa1a\\x01', produced by msgpack\n\n@task\ndef t2(a: dict):\n  print(a[\"integer\"]) # correct, it will be a integer\n```\n\n----------------------------------------\n\nTITLE: Flytectl Local Configuration\nDESCRIPTION: Configuration for flytectl client authentication using PKCE flow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  ...\n  authType: Pkce\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring FlytePropeller for AWS Batch Array Plugin in YAML\nDESCRIPTION: This YAML configuration sets up FlytePropeller to use the AWS Array Plugin for AWS Batch tasks. It specifies the role annotation key, AWS region, and enables the aws_array task plugin for both array and single AWS Batch tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/batch.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  aws:\n    batch:\n      roleAnnotationKey: eks.amazonaws.com/role-arn\n    region: us-east-2\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - aws_array\n    default-for-task-types:\n      container_array: aws_array\n      aws-batch: aws_array\n```\n\n----------------------------------------\n\nTITLE: Fetching Cluster Resource Attributes using Flytectl for a Specific Workflow\nDESCRIPTION: This example extends the `flytectl` command to include a specific workflow while fetching cluster resource attributes. The output is shown in JSON format, and requires `flytectl` to be installed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_cluster-resource-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"workflow\":\"core.control_flow.merge_sort.merge_sort\",\"attributes\":{\"buzz\":\"lightyear\",\"foo\":\"bar\"}}\n```\n\n----------------------------------------\n\nTITLE: Default Value Configuration for Resource Parameters\nDESCRIPTION: Default values for resource configuration parameters including nil value, string value \"1\", and DecimalSI format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_108\n\nLANGUAGE: yaml\nCODE:\n```\n<nil>\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nDecimalSI\n```\n\n----------------------------------------\n\nTITLE: Modifying FlyteConsole Deployment Configuration\nDESCRIPTION: YAML configuration for setting up FlyteConsole deployment with environment variables for Google Analytics and admin API URL.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/security/index.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- env:\n  - name: ENABLE_GA\n    value: \"true\"\n  - name: GA_TRACKING_ID\n    value: G-0123456789\n  - name: ADMIN_API_URL\n    value: https://<flyte-admin-domain>\n```\n\n----------------------------------------\n\nTITLE: Default CPU Resource Configuration in YAML\nDESCRIPTION: Default CPU resource value (1) for containers if not specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_94\n\nLANGUAGE: yaml\nCODE:\n```\n\"1\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Modified Inputs with Struct Data - YAML\nDESCRIPTION: This snippet provides an example of populating struct data for generic input parameters in a task's execution specification YAML file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_execution.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\niamRoleARN: \"arn:aws:iam::123456789:role/dummy\"\ninputs:\n  \"x\":\n    \"x\": 2\n    \"y\": ydatafory\n    \"z\":\n      1 : \"foo\"\n      2 : \"bar\"\n  \"y\":\n    \"x\": 3\n    \"y\": ydataforx\n    \"z\":\n      3 : \"buzz\"\n      4 : \"lightyear\"\nkubeServiceAcct: \"\"\ntargetDomain: \"\"\ntargetProject: \"\"\ntask: core.type_system.custom_objects.add\nversion: v3\n```\n\n----------------------------------------\n\nTITLE: Including RST Tags Directive for Documentation\nDESCRIPTION: An RST eval directive that adds an 'Intermediate' tag to the documentation page, used for categorizing the content's difficulty level.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/notifications.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tags:: Intermediate\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Refresh Window in YAML\nDESCRIPTION: Sets the default maximum duration between token refresh attempt and token expiry to 0 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n0s\n```\n\n----------------------------------------\n\nTITLE: Enabling GRPC Server Reflection in YAML\nDESCRIPTION: Sets whether to enable GRPC Server Reflection. The default value is true.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"true\"\n```\n\n----------------------------------------\n\nTITLE: Installing Slurm Packages\nDESCRIPTION: Commands to install the built Slurm Debian packages.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd ..\nsudo dpkg -i slurm-smd_24.05.5-1_amd64.deb\nsudo dpkg -i slurm-smd-client_24.05.5-1_amd64.deb\nsudo dpkg -i slurm-smd-slurmctld_24.05.5-1_amd64.deb\nsudo dpkg -i slurm-smd-slurmd_24.05.5-1_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Updating Agent Image in Kubernetes\nDESCRIPTION: YAML configuration showing how to update the agent image in Kubernetes deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage: localhost:30000/flyteagent:example\n```\n\n----------------------------------------\n\nTITLE: Deleting Plugin Override with Configuration File\nDESCRIPTION: This snippet demonstrates how to delete a plugin override using a configuration file specified with the `--attrFile` flag. The configuration file contains the project, domain, and overrides information. This method allows for more complex override specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl delete plugin-override --attrFile po.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Workflow Details\nDESCRIPTION: Command to retrieve details of a specific workflow using kubectl-flyte\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl-flyte get flytekit-development/flytekit-development-ff806e973581f4508bf1\n```\n\n----------------------------------------\n\nTITLE: flytectl inherited options\nDESCRIPTION: Lists the options inherited from parent commands in `flytectl`. These options configure various aspects of the Flyte environment, such as admin endpoint, authentication, storage, logging, and telemetry.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create.rst#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Server using Helm\nDESCRIPTION: Command to install the new unified Flyte server using Helm chart, which simplifies deployment by running all backend functionality in a single image.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install flyte-server flyteorg/flyte-binary --namespace flyte --values your_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL Jaeger Exporter in YAML\nDESCRIPTION: Sets the default endpoint for exporting telemetry traces to Jaeger.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nendpoint: http://localhost:14268/api/traces\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Catalog Cache\nDESCRIPTION: Default configuration for the Flyte catalog cache. Includes settings for reader and writer with maximum items, retries, and worker counts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nreader:\n  maxItems: 10000\n  maxRetries: 3\n  workers: 10\nwriter:\n  maxItems: 10000\n  maxRetries: 3\n  workers: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Propeller Settings in YAML\nDESCRIPTION: Defines core configuration for the Flyte propeller, including workflow management settings, leader election, and queue configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap.core.propeller:\n  downstream-eval-duration: \"30s\"\n  enable-admin-launcher: true\n  leader-election:\n    enabled: true\n    lease-duration: \"15s\"\n    lock-config-map:\n      name: \"propeller-leader\"\n      namespace: \"flyte\"\n    renew-deadline: \"10s\"\n    retry-period: \"2s\"\n  limit-namespace: \"all\"\n  literal-offloading-config:\n    enabled: false\n  max-workflow-retries: 30\n  metadata-prefix: \"metadata/propeller\"\n  metrics-prefix: \"flyte\"\n  prof-port: 10254\n  queue:\n    batch-size: -1\n    batching-interval: \"2s\"\n    queue:\n      base-delay: \"5s\"\n      capacity: 1000\n      max-delay: \"120s\"\n      rate: 100\n      type: \"maxof\"\n    sub-queue:\n      capacity: 100\n      rate: 10\n      type: \"bucket\"\n    type: \"batch\"\n  rawoutput-prefix: \"s3://my-s3-bucket/\"\n  workers: 4\n  workflow-reeval-duration: \"30s\"\n```\n\n----------------------------------------\n\nTITLE: Snowflake Configuration\nDESCRIPTION: Configuration for Snowflake integration including web API settings, resource constraints and default warehouse.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_157\n\nLANGUAGE: yaml\nCODE:\n```\ncaching:\n  maxSystemFailures: 5\n  resyncInterval: 30s\n  size: 500000\n  workers: 10\nreadRateLimiter:\n  burst: 100\n  qps: 10\nresourceMeta: null\nresourceQuotas:\n  default: 1000\nwriteRateLimiter:\n  burst: 100\n  qps: 10\n```\n\n----------------------------------------\n\nTITLE: Writing Task Resource Attributes to File\nDESCRIPTION: Save task resource attributes to a YAML file using Flytectl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task-resource-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get -p flytesnacks -d development task-resource-attribute --attrFile tra.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Mute in YAML\nDESCRIPTION: Disables muting of all logs by default. This setting is intended for benchmarks and tests only.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents in Markdown\nDESCRIPTION: A toctree directive in markdown that defines the hidden navigation structure for the deployment documentation, organizing various deployment-related sections.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: -1\n:hidden:\n\ndeployment/index\nplugins/index\nagents/index\nconfiguration/index\nconfiguration/generated/index\nsecurity/index\nswagger\n```\n\n----------------------------------------\n\nTITLE: Data Proxy Service Method Definitions\nDESCRIPTION: Defines RPC methods for creating upload and download locations for artifacts within the Flyte platform, enabling controlled data access\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/service/service.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nservice DataProxyService {\n  rpc CreateUploadLocation(CreateUploadLocationRequest) returns (CreateUploadLocationResponse);\n  rpc CreateDownloadLocation(CreateDownloadLocationRequest) returns (CreateDownloadLocationResponse);\n  rpc CreateDownloadLink(CreateDownloadLinkRequest) returns (CreateDownloadLinkResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Table of Contents Entry in Markdown\nDESCRIPTION: Example showing how to add a new tutorial or integration example to the table of contents using MyST Markdown list-table directive.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {doc}`Airflow agent </auto_examples/airflow_agent/index>`\n  - Run Airflow jobs in your workflows with the Airflow agent.\n  ...\n```\n\n----------------------------------------\n\nTITLE: Attempting Task Archive Operation\nDESCRIPTION: Demonstrates an unsupported operation attempting to archive a task. This operation will result in an error as task archiving is not supported.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-meta.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update task-meta -d development -p flytesnacks core.control_flow.merge_sort.merge --archive\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Configuration Options\nDESCRIPTION: Comprehensive list of command line flags for configuring storage settings in Flytectl. Includes options for authentication, connection parameters, caching behavior, and storage type selection. Default storage type is s3 with IAM authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n-p, --project string                               Specifies the Flyte project.\n    --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n    --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n    --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n    --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n    --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n    --storage.connection.endpoint string           URL for storage client to connect to.\n    --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n    --storage.connection.secret-key string         Secret to use when accesskey is set.\n    --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n    --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n    --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n    --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n    --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n    --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n    --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Global configuration options inherited from parent commands, including admin settings, storage configuration, and output formatting options\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_version.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte Tasks\nDESCRIPTION: Imports the slope and intercept tasks from the workflow.py file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/imperative_workflows.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n:caption: basics/imperative_workflow.py\\n:lines: 4\n```\n\n----------------------------------------\n\nTITLE: Installing Flyteagent with Helm\nDESCRIPTION: Commands for adding the Flyte Helm repository and installing the flyteagent pod.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\nhelm install flyteagent flyteorg/flyteagent --namespace flyte\n```\n\n----------------------------------------\n\nTITLE: Default Annotations Configuration in YAML\nDESCRIPTION: Default pod annotations including setting safe-to-evict to false for cluster autoscaler.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_88\n\nLANGUAGE: yaml\nCODE:\n```\ncluster-autoscaler.kubernetes.io/safe-to-evict: \"false\"\n```\n\n----------------------------------------\n\nTITLE: FlyteAdmin Entity Types\nDESCRIPTION: Lists the main entity types managed by FlyteAdmin API including static entities and execution entities\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/admin.rst#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nStatic entities:\n- Workflows\n- Tasks\n- Launch Plans\n\nExecution entities:\n- (Workflow) executions\n- Node executions \n- Task executions\n```\n\n----------------------------------------\n\nTITLE: Protobuf Literal Type Definition\nDESCRIPTION: Protocol Buffer definition for Literal Type including SimpleType enum and LiteralType message structure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nimport \"google/protobuf/struct.proto\";\n\nenum SimpleType {\n    NONE = 0;\n    INTEGER = 1;\n    FLOAT = 2;\n    STRING = 3;\n    BOOLEAN = 4;\n    DATETIME = 5;\n    DURATION = 6;\n    BINARY = 7;\n    ERROR = 8;\n    STRUCT = 9; // Use this one.\n}\nmessage LiteralType {\n    SimpleType simple = 1; // Use this one.\n    google.protobuf.Struct metadata = 6; // Store Json Schema to differentiate different dataclass.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Kubernetes Plugin\nDESCRIPTION: Default configuration for the Flyte Kubernetes plugin. Includes settings for co-pilot, resource defaults, tolerations, GPU configuration, and timeouts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nadd-tolerations-for-extended-resources: []\nco-pilot:\n  cpu: 500m\n  default-input-path: /var/flyte/inputs\n  default-output-path: /var/flyte/outputs\n  image: cr.flyte.org/flyteorg/flytecopilot:v0.0.15\n  input-vol-name: flyte-inputs\n  memory: 128Mi\n  name: flyte-copilot-\n  output-vol-name: flyte-outputs\n  start-timeout: 1m40s\n  storage: \"\"\ncreate-container-config-error-grace-period: 0s\ncreate-container-error-grace-period: 3m0s\ndefault-annotations:\n  cluster-autoscaler.kubernetes.io/safe-to-evict: \"false\"\ndefault-cpus: \"1\"\ndefault-env-from-configmaps: null\ndefault-env-from-secrets: null\ndefault-env-vars: null\ndefault-env-vars-from-env: null\ndefault-labels: null\ndefault-memory: 1Gi\ndefault-node-selector: null\ndefault-pod-dns-config: null\ndefault-pod-security-context: null\ndefault-pod-template-name: \"\"\ndefault-pod-template-resync: 30s\ndefault-security-context: null\ndefault-tolerations: null\ndelete-resource-on-finalize: false\nenable-distributed-error-aggregation: false\nenable-host-networking-pod: null\ngpu-device-node-label: k8s.amazonaws.com/accelerator\ngpu-partition-size-node-label: k8s.amazonaws.com/gpu-partition-size\ngpu-resource-name: nvidia.com/gpu\ngpu-unpartitioned-node-selector-requirement: null\ngpu-unpartitioned-toleration: null\nimage-pull-backoff-grace-period: 3m0s\nimage-pull-policy: \"\"\ninject-finalizer: false\ninterruptible-node-selector: null\ninterruptible-node-selector-requirement: null\ninterruptible-tolerations: null\nnon-interruptible-node-selector-requirement: null\npod-pending-timeout: 0s\nresource-tolerations: null\n```\n\n----------------------------------------\n\nTITLE: Filtering Executions by Tags in Flytectl\nDESCRIPTION: Command to filter and retrieve executions based on tags using the flytectl CLI. Shows how to query executions within a specific project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0001-flyte-execution-tags.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get execution -p flytesnacks -d development --filter.tags=\"hello,world\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Flow in YAML\nDESCRIPTION: Sets the default device authentication flow configuration, including poll interval, refresh time, and timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\npollInterval: 5s\nrefreshTime: 5m0s\ntimeout: 10m0s\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SNS Cloud Events in YAML\nDESCRIPTION: YAML configuration for enabling cloud events with AWS SNS in FlyteAdmin. Specifies region, event types, and SNS topic ARN.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/cloud_event.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncloud_events.yaml: |\n  cloudEvents:\n    enable: true\n    aws:\n      region: us-east-2\n    eventsPublisher:\n      eventTypes:\n      - all # or node, task, workflow\n      topicName: arn:aws:sns:us-east-2:123456:123-my-topic\n    type: aws\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Console URL for Logs in Flyte\nDESCRIPTION: Configures the console URL for accessing Kubernetes logs from Flyte UI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_153\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Storage Configuration Options\nDESCRIPTION: Configuration settings for storage backends, supporting multiple storage types like S3, Minio, local storage, with authentication and connection options\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--storage.type string\n--storage.connection.auth-type string\n--storage.connection.endpoint string\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionMetadata.ExecutionMode Enum\nDESCRIPTION: This snippet defines the ExecutionMode enum detailing the various methods by which a workflow execution can be launched.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: Enum ExecutionMetadata.ExecutionMode values\n   :header: \"Name\", \"Number\", \"Description\"\n   :widths: auto\n\n   \"MANUAL\", \"0\", \"The default execution mode, MANUAL implies that an execution was launched by an individual.\"\n   \"SCHEDULED\", \"1\", \"A schedule triggered this execution launch.\"\n   \"SYSTEM\", \"2\", \"A system process was responsible for launching this execution rather an individual.\"\n   \"RELAUNCH\", \"3\", \"This execution was launched with identical inputs as a previous execution.\"\n   \"CHILD_WORKFLOW\", \"4\", \"This execution was triggered by another execution.\"\n   \"RECOVERED\", \"5\", \"This execution was recovered from another execution.\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Max Number of gRPC Retries in YAML\nDESCRIPTION: Sets the default maximum number of gRPC retries to 4.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"4\"\n```\n\n----------------------------------------\n\nTITLE: Executing Flytectl Sandbox Teardown Command\nDESCRIPTION: This Bash command cleans up the Flytectl sandbox environment by removing the cluster and configurations created during 'sandbox start'. The command supports various flags for detailed customization, such as setting authorization parameters, debugging options, and output preferences.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_teardown.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl sandbox teardown\n```\n\n----------------------------------------\n\nTITLE: Workflow Execution Config YAML Example\nDESCRIPTION: This is an example of a YAML file (wec.yaml) used for deleting workflow execution configurations. It specifies the domain, project, max_parallelism, and security context. Max_parallelism is optional.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_workflow-execution-config.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"domain: development\\nproject: flytesnacks\\nmax_parallelism: 5\\nsecurity_context:\\n  run_as:\\n    k8s_service_account: demo\"\n```\n\n----------------------------------------\n\nTITLE: Control Plane Cluster Config\nDESCRIPTION: Additional configuration for enabling workflow execution in control plane cluster\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n   clusters:\n      clusterConfigs:\n      - name: \"dataplane_1\"\n        ...\n      - name: \"controlplane\"\n        enabled: true\n        inCluster: true  # Use in-cluster credentials\n```\n\n----------------------------------------\n\nTITLE: Example Task Resource Attribute YAML Output\nDESCRIPTION: Sample YAML representation of task resource attributes showing project, domain, defaults, and limits\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task-resource-attribute.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\ndefaults:\n  cpu: \"1\"\n  memory: \"150Mi\"\nlimits:\n  cpu: \"2\"\n  memory: \"450Mi\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Demo Status Flags\nDESCRIPTION: Shows the command with the flags. These options include standard flags like help, and inherited flags for configuring admin access, storage, logging, and other parameters. Understanding these options is crucial for customizing the command's behavior and interacting with different Flyte configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_status.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl demo status [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Complex FlyteAdmin Configuration for Multiple AWS Batch Queues in YAML\nDESCRIPTION: This YAML configuration demonstrates a more complex setup for FlyteAdmin with multiple AWS Batch queues. It defines different queues with distinct attributes and matching logic based on project, domain, and workflow name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/batch.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nqueues:\n  executionQueues:\n    - dynamic: \"gpu_dynamic\"\n      attributes:\n      - gpu\n    - dynamic: \"critical\"\n      attributes:\n      - critical\n    - dynamic: \"default\"\n      attributes:\n      - default\n  workflowConfigs:\n    - project: \"my_queue_1\"\n      domain: \"production\"\n      workflowName: \"my_workflow_1\"\n      tags:\n      - critical\n    - project: \"production\"\n      workflowName: \"my_workflow_2\"\n      tags:\n      - gpu\n    - project: \"my_queue_3\"\n      domain: \"production\"\n      workflowName: \"my_workflow_3\"\n      tags:\n      - critical\n    - tags:\n      - default\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Probe in YAML for Flyte Agent\nDESCRIPTION: This YAML snippet demonstrates the default configuration for the readinessProbe field. It sets up a gRPC probe on port 8000 with initial delay and periodic checks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyteagent/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe:\n  grpc:\n    port: 8000\n  initialDelaySeconds: 1\n  periodSeconds: 3\n```\n\n----------------------------------------\n\nTITLE: Adding Flyte Helm Repository\nDESCRIPTION: Command to add the Flyte chart repository to Helm for chart installation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\n```\n\n----------------------------------------\n\nTITLE: Default Catalog Reader Workqueue Configuration in YAML\nDESCRIPTION: Default configuration for the catalog reader workqueue, specifying max items, retries, and workers for array tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\nmaxItems: 10000\nmaxRetries: 3\nworkers: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Kubernetes Cluster in Flyte\nDESCRIPTION: Defines configuration for connecting to a remote Kubernetes cluster, including authentication settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_131\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  certPath: \"\"\n  tokenPath: \"\"\n  type: \"\"\nenabled: false\nendpoint: \"\"\nname: \"\"\n```\n\n----------------------------------------\n\nTITLE: Register files with default version\nDESCRIPTION: Registers all serialized protobuf files with the default version (v1). Fails if entities with the same version already exist.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks\"\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Agent Setup Documentation in Markdown\nDESCRIPTION: This code snippet creates a hidden table of contents for the agent setup documentation, listing all the available agent configuration guides.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n:name: Agent setup\n:hidden:\n\nairflow\nchatgpt\ndatabricks\nbigquery\nmmcloud\nsagemaker_inference\nsensor\nsnowflake\nopenai_batch\nk8sservice\nslurm\n```\n```\n\n----------------------------------------\n\nTITLE: Default Workers Configuration for Qubole in YAML\nDESCRIPTION: Default number of parallel workers (15) to refresh the Qubole cache.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_83\n\nLANGUAGE: yaml\nCODE:\n```\n\"15\"\n```\n\n----------------------------------------\n\nTITLE: TaskExecutionMetadata.InstanceClass enum schema\nDESCRIPTION: Enum defining machine instance classes for task execution, including default and interruptible options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nenum InstanceClass {\n  DEFAULT = 0;\n  INTERRUPTIBLE = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Source Code Embedding Format\nDESCRIPTION: Example of how to embed source code in Markdown documentation files\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_docs.md#2025-04-16_snippet_4\n\nLANGUAGE: code-block\nCODE:\n```\n```{literalinclude} /examples/<target file path>\n\t\t:lines: <from line>-<to line>\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Flyte Workflows with Flytectl\nDESCRIPTION: Shows how to retrieve Flyte workflow information using the Flytectl get command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl get workflows [workflow-name] [-o yaml | -o json | default -o table] [--filters...] [--sort-by...] [--selectors...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Sum Type Checker in Go\nDESCRIPTION: Go implementation of type checking logic for sum types in Flytepropeller, handling type casting validation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/sum-types.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (t sumChecker) CastsFrom(upstreamType *flyte.LiteralType) bool {\n    for _, x := range t.literalType.GetSum().GetSummands() {\n        if getTypeChecker(x).CastsFrom(upstreamType) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Authentication Token Path in Flyte\nDESCRIPTION: Sets the file path to the authentication token for Kubernetes cluster access.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_143\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Sandbox Deployment\nDESCRIPTION: This command restarts the flyte-sandbox deployment in the flyte namespace to apply the new configuration for the demo cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nkubectl rollout restart deployment flyte-sandbox -n flyte\n```\n\n----------------------------------------\n\nTITLE: Setting InsecureSkipVerify in YAML\nDESCRIPTION: Configures the default value for InsecureSkipVerify, which controls certificate verification, to false.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Event Configuration\nDESCRIPTION: Configuration for execution event handling including output reference policies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_166\n\nLANGUAGE: yaml\nCODE:\n```\nfallback-to-output-reference: false\nraw-output-policy: reference\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Memory in Task Definition (Boolean Method)\nDESCRIPTION: Shows how to enable shared memory in a Flyte task by setting the shared_memory parameter to True, which sizes memory-backed volumes to node allocatable memory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.15.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom flytekit import task\n\n@task(shared_memory=True)\ndef t1() -> bool:\n    # /dev/shm is available in the task\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Flyte Execution with YAML Input in Bash\nDESCRIPTION: This bash command demonstrates how to create a Flyte execution using flytectl with a YAML input file. It specifies the project and domain for the execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nflytectl create execution --execFile ./flytectl/create_dataclass_task.yaml -p flytesnacks -d development\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Athena Plugin\nDESCRIPTION: Default configuration for the Flyte Athena plugin. Sets default catalog to AwsDataCatalog, default workgroup to primary, and includes resource constraints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultCatalog: AwsDataCatalog\ndefaultWorkGroup: primary\nresourceConstraints:\n  NamespaceScopeResourceConstraint:\n    Value: 50\n  ProjectScopeResourceConstraint:\n    Value: 100\nwebApi:\n  caching:\n    maxSystemFailures: 5\n    resyncInterval: 30s\n    size: 500000\n    workers: 10\n  readRateLimiter:\n    burst: 100\n    qps: 10\n  resourceMeta: null\n  resourceQuotas:\n    default: 1000\n  writeRateLimiter:\n    burst: 100\n    qps: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage CLI Parameters in Flyte\nDESCRIPTION: Command line parameters for configuring storage settings in Flyte including connection details, SSL settings, container configuration, HTTP timeouts, and storage backend selection. Includes options for S3, MinIO, local storage, and Stow backends with associated limits and connection parameters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-execution-config.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Executing Commands Inside Flyte Demo\nDESCRIPTION: This command executes commands inside the Flyte demo container, allowing for interaction with the running environment. It requires flytectl to be installed and configured.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl demo exec -- pwd\\t\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Audience in YAML\nDESCRIPTION: Sets the default audience for OAuth2 authorization requests to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Multi-container in YAML\nDESCRIPTION: Disables multi-container support by default. When enabled, it allows automatic connections to new containers/buckets.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Box Renderer Example\nDESCRIPTION: Example of using Box renderer to create box-and-whisker plots from DataFrame data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/decks.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@task(enable_deck=True)\ndef box_renderer():\n    from sklearn.datasets import load_iris\n    iris = load_iris()\n    df = pd.DataFrame(iris.data, columns=[\"sepal length\", \"sepal width\", \"petal length\", \"petal width\"])\n    box = renderer.BoxRenderer()\n    box.append(df)\n    return df\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Gates with Async/Await Pattern in Python\nDESCRIPTION: Example workflow demonstrating signal gates using an async/await pattern. Shows how to use BoolSignal type and flyte.await() for workflow control with timeout functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-runtime-workflow-control-using-signalling.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBoolSignal = Signal[bool]\n\ndef calclulate_expense(v: int) -> int:\n    return v * 2\n\ndef pay(expense: int) -> bool:\n    ...\n    return true\n\n@workflow\ndef my_wf(a: int, approve: BoolSignal) -> bool:\n    e = create_node(calculate_expense, v=a)\n    s = flyte.await(approve, timeout=10d)\n    p = pay(expense: e)\n    e >> s >> p\n\n    c = flyte.sleep(10d)\n\n    return\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Queue Attributes in YAML\nDESCRIPTION: Example YAML configuration for defining execution queue attributes for a project and domain combination. This file (era.yaml) is used as input for the update command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-queue-attribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\ntags:\n  - foo\n  - bar\n  - buzz\n  - lightyear\n```\n\n----------------------------------------\n\nTITLE: Defining WorkflowExecutionGetDataRequest Fields\nDESCRIPTION: This section details the WorkflowExecutionGetDataRequest structure used to request inputs and outputs produced by a workflow execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: WorkflowExecutionGetDataRequest type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"id\", \":ref:`ref_flyteidl.core.WorkflowExecutionIdentifier`\", \"\", \"The identifier of the execution for which to fetch inputs and outputs.\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Update Options\nDESCRIPTION: This section lists various options available for the flytectl update command, including configurational parameters for authentication and logging settings. It lists different flags that can be used to customize the CLI behavior and manage Flyte resources efficiently.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update.rst#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-h, --help   help for update\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.authorizationHeader string             Custom metadata header to pass JWT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.clientId string                        Client ID (default \"flytepropeller\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.clientSecretEnvVar string              Environment variable containing the client secret\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.command strings                        Command for external authentication token generation\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.defaultServiceConfig string            \n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.insecure                               Use insecure connection.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.maxRetries int                         Max number of gRPC retries (default 4)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.proxyCommand strings                   Command for external proxy-authorization token generation\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.scopes strings                         List of scopes to request\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--console.endpoint string                      Endpoint of console,  if different than flyte admin\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-d, --domain string                                Specifies the Flyte project's domain.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.archive                                Pass in archive file either an http link or local path.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.continueOnError                        Continue on error when registering files.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.destinationDirectory string            Location of source code in container.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.dryRun                                 Execute command without making any modifications.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.force                                  Force use of version number on entities registered with flyte.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-i, --interactive                                  Set this flag to use an interactive CLI\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--logger.formatter.type string                 Sets logging format type. (default \"json\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--logger.level int                             Sets the minimum logging level. (default 3)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--logger.show-source                           Includes source code location in logs.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-p, --project string                               Specifies the Flyte project.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.connection.endpoint string           URL for storage client to connect to.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Delete Cluster Resource Attribute by Workflow Name - Flyte CLI (yaml)\nDESCRIPTION: This snippet illustrates how to delete cluster resource attributes specifically for a workflow by including the workflow name in the command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_cluster-resource-attribute.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nflytectl delete cluster-resource-attribute -p flytesnacks -d development core.control_flow.merge_sort.merge_sort\n```\n\n----------------------------------------\n\nTITLE: Julia script for calculating ellipse area\nDESCRIPTION: Defines a Julia script that reads input radii, calculates the area of an ellipse, and writes the result to an output file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_11\n\nLANGUAGE: julia\nCODE:\n```\n# Read inputs\nradius1 = parse(Float64, readline(\"/var/inputs/radius1\"))\nradius2 = parse(Float64, readline(\"/var/inputs/radius2\"))\n\n# Calculate area\narea = π * radius1 * radius2\n\n# Write output\nopen(\"/var/outputs/area\", \"w\") do f\n    write(f, string(area))\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Project Activation in YAML\nDESCRIPTION: This YAML file defines the activation state for a Flyte project, using state: 0 to indicate activation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# update.yaml\nid: \"my-project-id\"\nstate: 0\n```\n\n----------------------------------------\n\nTITLE: Managing Flyte Executions with Flytectl\nDESCRIPTION: Shows commands for retrieving execution information and creating new executions using Flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/proposal/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ flytectl get execution [exec-name] [-o yaml | -o json | default -o table] [--filters...] [--sort-by...] [--selectors...]\n$ flytectl create execution -f template.yaml\nOR\n$ flytectl create execution --launch-plan \"name\" --inputs \"key=value\"\n```\n\n----------------------------------------\n\nTITLE: Zsh completion setup for flytectl\nDESCRIPTION: This snippet details how to enable and configure Zsh completion for flytectl. It involves adding `autoload -U compinit; compinit` to your `~/.zshrc` file and then executing `flytectl completion zsh > \"${fpath[1]}/_flytectl\"`. A new shell session is required for the changes to take effect.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_completion.rst#2025-04-16_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n\"$ echo \\\"autoload -U compinit; compinit\\\" >> ~/.zshrc\"\n```\n\nLANGUAGE: zsh\nCODE:\n```\n\"$ flytectl completion zsh > \\\"${fpath[1]}/_flytectl\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options for Flytectl CLI\nDESCRIPTION: These command-line options allow users to configure storage settings for Flytectl. Options include enabling multi-container support, setting download limits, configuring Stow backend, and selecting the storage type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_examples.rst#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Athena Configuration\nDESCRIPTION: Configuration for AWS Athena including workgroup and catalog settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nprimary\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nAwsDataCatalog\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Settings for Flyte in YAML\nDESCRIPTION: Defines default log configuration settings for user, system, and mixed logs in Flyte. Includes options for CloudWatch, Kubernetes, and Stackdriver logging.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_159\n\nLANGUAGE: yaml\nCODE:\n```\ncloudwatch-enabled: false\ncloudwatch-log-group: \"\"\ncloudwatch-region: \"\"\ncloudwatch-template-uri: \"\"\ndynamic-log-links: null\ngcp-project: \"\"\nkubernetes-enabled: false\nkubernetes-template-uri: \"\"\nkubernetes-url: \"\"\nstackdriver-enabled: false\nstackdriver-logresourcename: \"\"\nstackdriver-template-uri: \"\"\ntemplates: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Core Values\nDESCRIPTION: YAML configuration for enabling the OpenAI Batch agent in Flyte core deployment, defining enabled plugins and task type mappings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  enabled_plugins:\n    tasks:\n      task-plugins:\n        enabled-plugins:\n          - container\n          - sidecar\n          - k8s-array\n          - agent-service\n        default-for-task-types:\n          container: container\n          sidecar: sidecar\n          container_array: k8s-array\n          openai-batch: agent-service\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Map Tasks in Python\nDESCRIPTION: This snippet shows the necessary import statement for using map tasks in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/map_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow, map_task\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Tags for Agent Setup Documentation\nDESCRIPTION: This code snippet defines tags for the Markdown document, specifying that it relates to Agent, Integration, Data, and Advanced topics.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{tags} Agent, Integration, Data, Advanced\n```\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure\nDESCRIPTION: Toctree directive for organizing documentation pages in Sphinx, with hidden navigation links to Flytekit, Flytectl and FlyteIDL sections.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/api/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 1\n:hidden:\n\nflytekit <flytekit/docs_index>\nflytectl <flytectl/docs_index>\nflyteidl <flyteidl/docs_index>\n```\n\n----------------------------------------\n\nTITLE: Defining AddTagRequest Message in Protocol Buffers\nDESCRIPTION: Defines the AddTagRequest message for tagging an Artifact. It contains a single field 'tag' of type Tag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AddTagRequest {\n  Tag tag = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Avatar Links in HTML\nDESCRIPTION: HTML markup for displaying circular GitHub avatar images that link to user profiles. Each avatar is processed through weserv.nl image service to apply a circular mask and resize to 50x50 pixels.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/[username]\"><img src=\"https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/[user-id]?v=4&w=50&h=50&mask=circle\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Annotating Kubernetes Service Account with IAM Role in Bash\nDESCRIPTION: This command manually annotates a Kubernetes service account with an IAM role ARN, necessary for proper AWS permissions in EKS deployments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate serviceaccount -n <flyte-namespace> <http://eks.amazonaws.com/role-arn=arn:aws:iam::xxxx:role/<flyte-iam-role>eks.amazonaws.com/role-arn=arn:aws:iam::xxxx:role/<flyte-iam-role>\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: Command to spin up a demo Flyte cluster using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Default Connector Deployment Configuration\nDESCRIPTION: Configuration for the default connector including load balancing, timeout settings, and endpoint configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_113\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultServiceConfig: '{\"loadBalancingConfig\": [{\"round_robin\":{}}]}'\ndefaultTimeout: 10s\nendpoint: \"\"\ninsecure: true\ntimeouts: null\n```\n\n----------------------------------------\n\nTITLE: Applying Generated Kubernetes Manifest\nDESCRIPTION: This command shows how to apply the generated Kubernetes manifest file using kubectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f flyte_generated_eks.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Store Policy in YAML\nDESCRIPTION: Sets the Workflow Store Policy to initialize in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_182\n\nLANGUAGE: yaml\nCODE:\n```\nResourceVersionCache\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets Prefix in YAML\nDESCRIPTION: Sets the prefix where to look for secrets file in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_183\n\nLANGUAGE: yaml\nCODE:\n```\n/etc/secrets\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Resource Quota (YAML)\nDESCRIPTION: Kubernetes ResourceQuota template for setting CPU and memory limits per project namespace\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: project-quota\n  namespace: {{ namespace }}\nspec:\n  hard:\n    limits.cpu: {{ projectQuotaCpu }}\n    limits.memory: {{ projectQuotaMemory }}\n\n```\n\n----------------------------------------\n\nTITLE: Pre-v0.13.0 Admin Authentication Configuration\nDESCRIPTION: YAML configuration for Flyte Admin authentication setup before version 0.13.0, including OAuth settings with Okta integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_migration.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n# ... other settings\nsecurity:\n    secure: false\n    useAuth: true\n    allowCors: true\n    allowedOrigins:\n    - \"*\"\n    allowedHeaders:\n    - \"Content-Type\"\n    oauth:\n    baseUrl: https://dev-62129345.okta.com/oauth2/default/\n    scopes:\n        - profile\n        - openid\n        - email\n    claims:\n        iss: https://dev-62129345.okta.com/oauth2/default\n        aud: 0oal5rch46pVhCGF45d6\n    clientId: 0oal5rch46pVhCGF45d6\n    clientSecretFile: \"/Users/ytong/etc/secrets/oauth/secret\"\n    authorizeUrl: \"https://dev-62129345.okta.com/oauth2/default/v1/authorize\"\n    tokenUrl: \"https://dev-62129345.okta.com/oauth2/default/v1/token\"\n    callbackUrl: \"http://localhost:8088/callback\"\n    cookieHashKeyFile: \"/Users/ytong/etc/secrets/hashkey/hashkey\"\n    cookieBlockKeyFile: \"/Users/ytong/etc/secrets/blockkey/blockkey\"\n    redirectUrl: \"/api/v1/projects\"\n    thirdPartyConfig:\n        flyteClient:\n        clientId: 0oal62nxuD6OSFSRq5d6\n        redirectUri: http://localhost:12345/callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete Logging Setup in Flyte\nDESCRIPTION: Comprehensive logging configuration for Flyte, including settings for Kubernetes, CloudWatch, and Stackdriver logging systems.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_145\n\nLANGUAGE: yaml\nCODE:\n```\ncloudwatch-enabled: false\ncloudwatch-log-group: \"\"\ncloudwatch-region: \"\"\ncloudwatch-template-uri: \"\"\ndynamic-log-links: null\ngcp-project: \"\"\nkubernetes-enabled: true\nkubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName\n  }}/pod?namespace={{ .namespace }}\nkubernetes-url: \"\"\nstackdriver-enabled: false\nstackdriver-logresourcename: \"\"\nstackdriver-template-uri: \"\"\ntemplates: null\n```\n\n----------------------------------------\n\nTITLE: Setting grpcPort for Catalog in YAML\nDESCRIPTION: Configures the gRPC port on which to serve Catalog. The default value is 8081.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"8081\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Settings in Flytectl\nDESCRIPTION: Command line arguments for configuring storage settings in Flytectl, including HTTP client timeout, multi-container support, download limits, and storage backend options. These flags control how Flytectl interacts with different storage systems like S3, MinIO, or local storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_cluster-resource-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Task Node Configuration Override Protocol Buffer Definition\nDESCRIPTION: Defines the protobuf message structure for task node overrides, specifying configurable parameters like resources, caching, retries, container image, and environment variables\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3553-config-override.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TaskNodeOverrides {\n    Resources resources = 1;\n    bool cache = 2;\n    bool cache_serialize = 3;\n    string cache_version = 4;\n    int32 retries = 5;\n    bool interruptible = 6;\n    string container_image = 7;\n    map<string, string> environment = 9;\n    google.protobuf.Struct task_config = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Type Configuration\nDESCRIPTION: This snippet defines the `storage.type` flag for the flytectl CLI. It allows users to select the storage backend to use, including options like s3, minio, local, mem, and stow.  The default storage type is `s3`. This setting configures the storage used by Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_completion.rst#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \\\"s3\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Defining Spark Role with RBAC Permissions\nDESCRIPTION: YAML configuration for creating a Kubernetes role with permissions for Spark operations including pod, service, configmap, and PVC management.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: spark-role\n  namespace: \"{{ namespace }}\"\nrules:\n- apiGroups: [\"*\"]\n  resources:\n  - pods\n  verbs:\n  - '*'\n- apiGroups: [\"*\"]\n  resources:\n  - services\n  verbs:\n  - '*'\n- apiGroups: [\"*\"]\n  resources:\n  - configmaps\n  verbs:\n  - '*'\n- apiGroups: [\"*\"]\n  resources:\n  - persistentvolumeclaims\n  verbs:\n  - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicWorkflowNodeMetadata Message in Protobuf\nDESCRIPTION: Defines the DynamicWorkflowNodeMetadata message type, which captures information about dynamically generated workflow definitions for dynamic workflow nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DynamicWorkflowNodeMetadata {\n  flyteidl.core.Identifier id = 1;\n  flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Domain Execution Cluster Label\nDESCRIPTION: Configuration for mapping projects and domains to specific cluster labels\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: project1\nvalue: label1\n```\n\n----------------------------------------\n\nTITLE: Get Execution Queue Attribute with Workflow (JSON)\nDESCRIPTION: This JSON snippet showcases the output of the `flytectl get execution-queue-attribute` command when retrieving execution queue attributes for a specific project, domain, and workflow. The output includes the project, domain, workflow name, and associated tags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-queue-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"workflow\":\"core.control_flow.merge_sort.merge_sort\",\"tags\":[\"foo\", \"bar\"]}\n```\n\n----------------------------------------\n\nTITLE: Boolean Expression and Condition Definitions in Protocol Buffers\nDESCRIPTION: Defines messages for boolean expressions used in workflow conditions, including comparison and conjunction expressions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BooleanExpression {\n  ConjunctionExpression conjunction = 1;\n  ComparisonExpression comparison = 2;\n}\n\nmessage ComparisonExpression {\n  Operator operator = 1;\n  Operand left_value = 2;\n  Operand right_value = 3;\n}\n\nmessage ConjunctionExpression {\n  LogicalOperator operator = 1;\n  BooleanExpression left_expression = 2;\n  BooleanExpression right_expression = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Signal Service Method Definitions\nDESCRIPTION: Defines RPC methods for creating, updating, and retrieving signals within the Flyte workflow system\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/service/service.rst#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nservice SignalService {\n  rpc GetOrCreateSignal(SignalGetOrCreateRequest) returns (Signal);\n  rpc ListSignals(SignalListRequest) returns (SignalList);\n  rpc SetSignal(SignalSetRequest) returns (SignalSetResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Project Archival in YAML\nDESCRIPTION: This YAML file defines the archival state for a Flyte project, using state: 1 to indicate archival.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# update.yaml\nid: \"my-project-id\"\nstate: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Domains\nDESCRIPTION: This YAML snippet defines the configuration for Flyte domains, specifying development, staging, and production environments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.domain:\n  domains:\n    - id: \"development\"\n      name: \"development\"\n    - id: \"staging\"\n      name: \"staging\"\n    - id: \"production\"\n      name: \"production\"\n```\n\n----------------------------------------\n\nTITLE: flytectl Command Usage for Updating Execution Queue Attributes\nDESCRIPTION: General usage syntax for the flytectl update execution-queue-attribute command, showing the basic structure and available flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-queue-attribute.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-queue-attribute [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Endpoint for OpenTelemetry\nDESCRIPTION: Default endpoint configuration for the Jaeger telemetry trace ingestor used in OpenTelemetry.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nhttp://localhost:14268/api/traces\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Container in YAML\nDESCRIPTION: Sets the initial container (bucket in S3) to create if it doesn't exist in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_188\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Sphinx Documentation Table of Contents for Flyte Demo Commands in RST\nDESCRIPTION: This RST code defines a table of contents for the demo-related commands in Flytectl. It uses Sphinx toctree directive to organize the documentation into a hierarchical structure with links to individual command reference pages.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/demo.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Demo\n\n    gen/flytectl_demo_start\n    gen/flytectl_demo_status\n    gen/flytectl_demo_teardown\n    gen/flytectl_demo_exec\n    gen/flytectl_demo_reload\n```\n\n----------------------------------------\n\nTITLE: Displaying Flyte Project Badges in Markdown\nDESCRIPTION: This code snippet shows how to display various project badges for Flyte using Markdown syntax. It includes badges for Linux Foundation status, GitHub stars, release version, test status, sandbox status, completed milestones, downloads, Slack community, and license.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{image} https://img.shields.io/badge/Graduate%20Project-Linux%20Foundation-purple?style=for-the-badge\n:target: https://lfaidata.foundation/projects/flyte/\n:alt: Linux Foundation\n```\n\n```{image} https://img.shields.io/github/stars/flyteorg/flyte?label=github&logo=github&style=for-the-badge\n:target: https://github.com/flyteorg/flyte\n:alt: GitHub Repo stars\n```\n\n```{image} https://img.shields.io/github/release/flyteorg/flyte.svg?style=for-the-badge&color=blue\n:target: https://github.com/flyteorg/flyte/releases/latest\n:alt: Flyte Release\n```\n\n```{image} https://img.shields.io/github/actions/workflow/status/flyteorg/flyte/tests.yml?label=tests&style=for-the-badge\n:target: https://github.com/flyteorg/flyte/actions/workflows/tests.yml\n:alt: GitHub Test Status\n```\n\n```{image} https://img.shields.io/github/actions/workflow/status/flyteorg/flyte/sandbox.yml?label=Sandbox%20docker%20image&style=for-the-badge\n:target: https://github.com/flyteorg/flyte/actions/workflows/sandbox.yml\n:alt: GitHub Sandbox Status\n```\n\n```{image} https://img.shields.io/github/milestones/closed/flyteorg/flyte?style=for-the-badge\n:target: https://github.com/flyteorg/flyte/milestones?state=closed\n:alt: Completed Milestones\n```\n\n```{image} https://img.shields.io/pypi/dm/flytekit?color=blue&label=flytekit%20downloads&style=for-the-badge&logo=pypi&logoColor=white\n:target: https://github.com/flyteorg/flytekit\n:alt: Flytekit Downloads\n```\n\n```{image} https://img.shields.io/badge/Slack-Chat-pink?style=for-the-badge&logo=slack\n:target: https://slack.flyte.org\n:alt: Flyte Slack\n```\n\n```{image} https://img.shields.io/badge/LICENSE-Apache2.0-ff69b4.svg?style=for-the-badge\n:target: http://www.apache.org/licenses/LICENSE-2.0.html\n:alt: License\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Configuration\nDESCRIPTION: AWS-specific configuration including region, account ID and retry settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\nus-east-2\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"3\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"0\"\n\n```\n\n----------------------------------------\n\nTITLE: Default Affinity Configuration in YAML\nDESCRIPTION: Default null value for pod affinity settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_98\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Checking Flyte Deployment Pod Status\nDESCRIPTION: This command checks the status of the Flyte deployment pods in the flyte namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Configuring MUNGE Directories and Permissions\nDESCRIPTION: Commands to set correct ownership and permissions for MUNGE-related directories and key file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -R munge: /etc/munge/ /var/log/munge/ /var/lib/munge/ /run/munge/\nsudo chmod 0700 /etc/munge/ /var/log/munge/ /var/lib/munge/\nsudo chmod 0755 /run/munge/\nsudo chmod 0700 /etc/munge/munge.key\nsudo chown -R munge: /etc/munge/munge.key\n```\n\n----------------------------------------\n\nTITLE: Array Node Configuration\nDESCRIPTION: Configuration settings for array nodes including event versioning and parallelism behavior\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_167\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-parallelism-behavior: unlimited\nevent-version: 0\nuse-map-plugin-logs: false\n```\n\n----------------------------------------\n\nTITLE: Computing Duration from datetime.timedelta in Python\nDESCRIPTION: Creates a Duration object in Python from a datetime.timedelta object using the FromTimedelta conversion method.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ntd = datetime.timedelta(days=3, minutes=10)\nduration = Duration()\nduration.FromTimedelta(td)\n```\n\n----------------------------------------\n\nTITLE: Custom GPU Resource Name Configuration in Flyte-Binary\nDESCRIPTION: YAML configuration for flyte-binary Helm chart to customize the GPU resource name. Used when your GPU accelerators expose a resource name different from the default 'nvidia.com/gpu'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n  inline:\n    plugins:\n      k8s:\n        gpu-resource-name: <YOUR_GPU_RESOURCE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Connector Poll Interval Configuration\nDESCRIPTION: Default polling interval setting (10 seconds) for connector metadata updates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_116\n\nLANGUAGE: yaml\nCODE:\n```\n10s\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Quota Template YAML\nDESCRIPTION: Template for defining resource quotas with CPU and memory limits for project namespaces.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: project-quota\n  namespace: {{ namespace }}\nspec:\n  hard:\n    limits.cpu: {{ projectQuotaCpu }}\n    limits.memory: {{ projectQuotaMemory }}\n\n```\n\n----------------------------------------\n\nTITLE: Storage CLI Configuration Options\nDESCRIPTION: Command line flags for configuring storage backend settings in Flyte. Includes options for cache size, authentication, connection parameters, container settings, and download limits. The storage backend can be configured for different providers like S3, MinIO, local storage, or memory storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution.rst#2025-04-16_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks with limit and sorting\nDESCRIPTION: Retrieves tasks with a specified limit and sorting order.  This example sorts the results by creation time in ascending order and limits the result to one task.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get -p flytesnacks -d development task  --filter.sortBy=created_at --filter.limit=1 --filter.asc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Region for S3 Access\nDESCRIPTION: This configuration sets the AWS region for S3 access. It should be added to the ~/.aws/config file on both the local machine and Slurm cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[default]\nregion = <your-region>\n```\n\n----------------------------------------\n\nTITLE: RST Source Code Embedding Format\nDESCRIPTION: Example of how to embed source code in RST documentation files\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_docs.md#2025-04-16_snippet_3\n\nLANGUAGE: code-block\nCODE:\n```\n.. literalinclude:: /examples/<target file path>\n\t\t:lines: <from line>-<to line>\n```\n\n----------------------------------------\n\nTITLE: Defining WorkflowExecutionGetRequest Fields\nDESCRIPTION: This section defines the WorkflowExecutionGetRequest which is used to fetch details of a single workflow execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: WorkflowExecutionGetRequest type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"id\", \":ref:`ref_flyteidl.core.WorkflowExecutionIdentifier`\", \"\", \"Uniquely identifies an individual workflow execution.\"\n```\n\n----------------------------------------\n\nTITLE: WorkflowExecutionEvent message fields schema\nDESCRIPTION: Protocol buffer message for workflow execution events containing execution ID, phase, timestamps and outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage WorkflowExecutionEvent {\n  WorkflowExecutionIdentifier execution_id\n  string producer_id\n  WorkflowExecution.Phase phase\n  google.protobuf.Timestamp occurred_at\n  string output_uri\n  ExecutionError error\n  LiteralMap output_data\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Template Resync Interval in YAML\nDESCRIPTION: This setting defines the frequency at which default pod templates are resynced in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_106\n\nLANGUAGE: yaml\nCODE:\n```\n30s\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from POSIX time() in C++\nDESCRIPTION: Creates a Timestamp object from POSIX time() function, setting seconds to the current unix timestamp and nanoseconds to 0.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nTimestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n```\n\n----------------------------------------\n\nTITLE: Updating Execution Cluster Label Using YAML File\nDESCRIPTION: Command to update an execution cluster label using a YAML configuration file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-cluster-label.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-cluster-label --attrFile ecl.yaml\n```\n\n----------------------------------------\n\nTITLE: GPU Device Node Label Configuration in Flyte-Core\nDESCRIPTION: YAML configuration for flyte-core Helm chart to specify the node label key used for GPU device selection. This must match the labels on your Kubernetes worker nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  k8s:\n    plugins:\n      k8s:\n        gpu-device-node-label: \"cloud.google.com/gke-accelerator\" #change to match your node's config\n```\n\n----------------------------------------\n\nTITLE: Retrieve tasks with filters\nDESCRIPTION: Retrieves all tasks matching the specified filters. In this example, the filter selects tasks with a specific name and version using the `--filter.fieldSelector` flag.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl get task -p flytesnacks -d development --filter.fieldSelector=\\\"task.name=k8s_spark.pyspark_pi.print_every_time,task.version=v1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Bash command to upgrade the Flyte core Helm release with custom values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/chatgpt.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition for Flyte API Documentation\nDESCRIPTION: Sphinx/RST directive defining the documentation structure and navigation for Flyte's API specification using a table of contents tree.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs_index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\t:maxdepth: 1\n\t:caption: flyteidl\n\t:name: flyteidltoc\n\n\tdocs/admin/index\n\tdocs/core/index\n\tdocs/datacatalog/index\n\tdocs/event/index\n\tdocs/plugins/index\n\tdocs/service/index\n\tdocs/contributing\n```\n\n----------------------------------------\n\nTITLE: Defining WorkflowAttributes Request/Response Types\nDESCRIPTION: Defines message types for getting and updating workflow attribute overrides, including required fields for project, domain, and workflow identification.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage WorkflowAttributesGetRequest {\n  string project = 1;\n  string domain = 2;\n  string workflow = 3;\n  MatchableResource resource_type = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flyte Propeller Tools\nDESCRIPTION: Command to compile and install kubectl-flyte and flytepropeller binaries to ~/go/bin directory\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make compile\n```\n\n----------------------------------------\n\nTITLE: Task-Meta Command Usage\nDESCRIPTION: Basic command syntax for updating task metadata with available flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-meta.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update task-meta [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry File Export Path\nDESCRIPTION: Default configuration for the filename used to store exported telemetry traces in the OpenTelemetry FileConfig.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n/tmp/trace.txt\n```\n\n----------------------------------------\n\nTITLE: Default Labels Configuration in YAML\nDESCRIPTION: Default null value for pod labels.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_89\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Defining Artifact Message in Protocol Buffers\nDESCRIPTION: Defines the Artifact message which represents an artifact in the data catalog. It contains fields for ID, dataset, data, metadata, partitions, tags, and creation timestamp.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Artifact {\n  string id = 1;\n  DatasetID dataset = 2;\n  repeated ArtifactData data = 3;\n  Metadata metadata = 4;\n  repeated Partition partitions = 5;\n  repeated Tag tags = 6;\n  google.protobuf.Timestamp created_at = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Dask Logging Configuration\nDESCRIPTION: Default logging configuration for Dask including settings for Cloudwatch, Kubernetes, and Stackdriver integrations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_118\n\nLANGUAGE: yaml\nCODE:\n```\ncloudwatch-enabled: false\ncloudwatch-log-group: \"\"\ncloudwatch-region: \"\"\ncloudwatch-template-uri: \"\"\ndynamic-log-links: null\ngcp-project: \"\"\nkubernetes-enabled: true\nkubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName\n  }}/pod?namespace={{ .namespace }}\nkubernetes-url: \"\"\nstackdriver-enabled: false\nstackdriver-logresourcename: \"\"\nstackdriver-template-uri: \"\"\ntemplates: null\n```\n\n----------------------------------------\n\nTITLE: Defining Control Plane Documentation Structure in reStructuredText\nDESCRIPTION: This snippet outlines the table of contents for the Control Plane section of Flyte documentation. It uses reStructuredText directives to create a hierarchical structure of documentation pages.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _control-plane:\n\n################\nControl Plane\n################\n\n.. toctree::\n    :maxdepth: 1\n\n    projects\n    domains\n    admin\n    console\n    dynamic_spec\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Default HTTP Client in YAML\nDESCRIPTION: Sets default HTTP client configuration with null headers and no timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nheaders: null\ntimeout: 0s\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-container Support in YAML\nDESCRIPTION: Enables or disables multi-container support in Flyte storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_189\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Default External Auth Command in YAML\nDESCRIPTION: Sets the default command for external authentication token generation to an empty array.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Locally using Make\nDESCRIPTION: Shell command to build the documentation using make in the docs directory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake -C docs html\n```\n\n----------------------------------------\n\nTITLE: Default Catalog Writer Workqueue Configuration in YAML\nDESCRIPTION: Default configuration for the catalog writer workqueue, specifying max items, retries, and workers for array tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_73\n\nLANGUAGE: yaml\nCODE:\n```\nmaxItems: 10000\nmaxRetries: 3\nworkers: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Exponential Backoff in YAML\nDESCRIPTION: Default configuration for exponential backoff implementation, specifying base duration and maximum duration for retry attempts.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_196\n\nLANGUAGE: yaml\nCODE:\n```\nbase-second: 2\nmax-duration: 20s\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Backoff Delay in YAML\nDESCRIPTION: Sets the default value for the maximum delay for gRPC backoff to 8 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n8s\n```\n\n----------------------------------------\n\nTITLE: Building Slurm Debian Packages\nDESCRIPTION: Commands to build Debian packages for Slurm from source.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntar -xaf slurm-24.05.5.tar.bz2\ncd slurm-24.05.5\nsudo mk-build-deps -i debian/control\ndebuild -b -uc -us\n```\n\n----------------------------------------\n\nTITLE: Device Flow Timeout Configuration\nDESCRIPTION: Defines the timeout duration for device flow authentication completion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n10m0s\n```\n\n----------------------------------------\n\nTITLE: Configuring Databricks Default Warehouse in Flyte\nDESCRIPTION: Defines the default warehouse type to use when running tasks on Databricks. This setting can be overridden at the task level.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_122\n\nLANGUAGE: yaml\nCODE:\n```\nCOMPUTE_CLUSTER\n```\n\n----------------------------------------\n\nTITLE: Storage Configuration\nDESCRIPTION: This snippet presents the storage configuration for Flyte, covering bucket names, caching parameters, custom storage settings, multi-container enablement, GCS settings, download limits, S3 settings (including authentication type, access keys, and endpoints), and storage type (sandbox, S3, GCS, or custom).  These configurations are critical for defining how Flyte interacts with and manages data storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bucketName\": \"my-s3-bucket\",\n  \"cache\": {\n    \"maxSizeMBs\": 0,\n    \"targetGCPercent\": 70\n  },\n  \"custom\": {},\n  \"enableMultiContainer\": false,\n  \"gcs\": null,\n  \"limits\": {\n    \"maxDownloadMBs\": 10\n  },\n  \"s3\": {\n    \"accessKey\": \"\",\n    \"authType\": \"iam\",\n    \"endpoint\": \"\",\n    \"region\": \"us-east-1\",\n    \"secretKey\": \"\"\n  },\n  \"type\": \"sandbox\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Settings in Flyte CLI\nDESCRIPTION: Command line arguments for configuring Flyte's storage system including cache settings, authentication, connection parameters, and storage type selection. Includes options for S3, MinIO, local storage, and memory storage with configurable limits and multi-container support.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secret Manager in YAML\nDESCRIPTION: Sets configuration parameters for HashiCorp Vault Secret Manager integration, including role and KV version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_212\n\nLANGUAGE: yaml\nCODE:\n```\nannotations: null\nkvVersion: \"2\"\nrole: flyte\n```\n\n----------------------------------------\n\nTITLE: Task Log Template Parameters Reference\nDESCRIPTION: Lists the parameters available for creating templated URIs to access task logs. These parameters provide access to pod information, container details, and timing data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* - ``{{ .podName }}``\n     - Gets the pod name as it shows in k8s dashboard\n   * - ``{{ .podUID }}``\n     - The pod UID generated by the k8s at runtime\n   * - ``{{ .namespace }}``\n     - K8s namespace where the pod runs\n   * - ``{{ .containerName }}``\n     - The container name that generated the log\n   * - ``{{ .containerId }}``\n     - The container id docker/crio generated at run time\n   * - ``{{ .logName }}``\n     - A deployment specific name where to expect the logs to be\n   * - ``{{ .hostname }}``\n     - The value used to override the hostname the pod uses internally within its own network namespace (i.e., the pod's ``.spec.hostname``)\n   * - ``{{ .nodeName }}``\n     - The hostname of the node where the pod is running and logs reside (i.e., the pod's ``.spec.nodeName``)\n   * - ``{{ .podRFC3339StartTime }}``\n     - The pod creation time (in RFC3339 format, e.g. \"2021-01-01T02:07:14Z\", also conforming to ISO 8601)\n   * - ``{{ .podRFC3339FinishTime }}``\n     - Don't have a good mechanism for this yet, but approximating with ``time.Now`` for now\n   * - ``{{ .podUnixStartTime }}``\n     - The pod creation time (in unix seconds, not millis)\n   * - ``{{ .podUnixFinishTime }}``\n     - Don't have a good mechanism for this yet, but approximating with ``time.Now`` for now\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Values for Flyte Sandbox\nDESCRIPTION: Comprehensive Helm values configuration file that defines the setup for a Flyte sandbox environment. Includes configuration for core Flyte binary, database settings, storage configuration with Minio, and supporting services like Kubernetes Dashboard and Docker Registry.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-sandbox/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocker-registry.enabled: true\ndocker-registry.image.pullPolicy: \"Never\"\ndocker-registry.image.tag: \"sandbox\"\ndocker-registry.persistence.enabled: false\ndocker-registry.service.nodePort: 30000\ndocker-registry.service.type: \"NodePort\"\nflyte-binary.clusterResourceTemplates.inlineConfigMap: \"{{ include \\\"flyte-sandbox.clusterResourceTemplates.inlineConfigMap\\\" . }}\"\nflyte-binary.configuration.database.host: \"{{ printf \\\"%s-postgresql\\\" .Release.Name | trunc 63 | trimSuffix \\\"-\\\" }}\"\nflyte-binary.configuration.database.password: \"postgres\"\nflyte-binary.configuration.inline.plugins.k8s.default-env-vars[0].FLYTE_AWS_ENDPOINT: \"http://{{ printf \\\"%s-minio\\\" .Release.Name | trunc 63 | trimSuffix \\\"-\\\" }}.{{ .Release.Namespace }}:9000\"\nflyte-binary.configuration.inline.plugins.k8s.default-env-vars[1].FLYTE_AWS_ACCESS_KEY_ID: \"minio\"\nflyte-binary.configuration.inline.plugins.k8s.default-env-vars[2].FLYTE_AWS_SECRET_ACCESS_KEY: \"miniostorage\"\nflyte-binary.configuration.inline.plugins.k8s.default-env-vars[3].FLYTE_PLATFORM_URL: \"{{ printf \\\"%s-grpc\\\" .Release.Name }}.{{ .Release.Namespace }}:8089\"\nflyte-binary.configuration.inline.plugins.k8s.default-env-vars[4].FLYTE_PLATFORM_INSECURE: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Flyte Workflow Development Guide with List-Table in Markdown\nDESCRIPTION: A formatted list-table in Markdown that displays the structure of the getting started guide, including links to subsections about installing tools, creating projects, understanding components, and running workflows locally.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {doc}`Installing development tools <installing_development_tools>`\n  - Install the tools needed to create Flyte projects and run workflows and tasks.\n* - {doc}`Creating a Flyte project <../getting_started_with_workflow_development/creating_a_flyte_project>`\n  - Create a Flyte project that contains workflow code and essential configuration files.\n* - {doc}`Flyte project components <flyte_project_components>`\n  - Understand the directory structure, configuration files, and code in a Flyte project.\n* - {doc}`Running a workflow locally <running_a_workflow_locally>`\n  - Execute a workflow in a local Python environment or in a local Flyte cluster.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining NodeExecutionEvent Message in Protobuf\nDESCRIPTION: Defines a message type for node execution events, including identifiers, phases, timestamps, and various metadata fields related to the node execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage NodeExecutionEvent {\n  flyteidl.core.NodeExecutionIdentifier id = 1;\n  string producer_id = 2;\n  flyteidl.core.NodeExecution.Phase phase = 3;\n  google.protobuf.Timestamp occurred_at = 4;\n  string input_uri = 5;\n  string output_uri = 6;\n  flyteidl.core.ExecutionError error = 7;\n  flyteidl.core.LiteralMap output_data = 8;\n  flyteidl.event.WorkflowNodeMetadata workflow_node_metadata = 9;\n  flyteidl.event.TaskNodeMetadata task_node_metadata = 10;\n  flyteidl.event.ParentTaskExecutionMetadata parent_task_metadata = 11;\n  flyteidl.event.ParentNodeExecutionMetadata parent_node_metadata = 12;\n  string retry_group = 13;\n  string spec_node_id = 14;\n  string node_name = 15;\n  int32 event_version = 16;\n  bool is_parent = 17;\n  bool is_dynamic = 18;\n  string deck_uri = 19;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing flytectl CLI for Flyte Development\nDESCRIPTION: Commands to install the latest version of flytectl, a CLI tool for working with Flyte, and add it to the system PATH.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Step 1: Install the latest version of flytectl\ncurl -sL https://ctl.flyte.org/install | bash\n\n# Step 2: Export flytectl path based on the previous log \"flyteorg/flytectl info installed ./bin/flytectl\"\nexport PATH=$PATH:/home/ubuntu/bin # replace with your path\n```\n\n----------------------------------------\n\nTITLE: Defining Flyte Admin Override APIs\nDESCRIPTION: This Protobuf RPC definition outlines the API for fetching override documents in Flyte. It highlights the necessary fields such as domain, project, and workflow, and describes how inherited attributes are managed. This API is central to retrieving current override settings programmatically.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3749-sane-overridable-defaults.md#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc GetOverrides(GetOverridesRequest) returns (GetOverridesResponse)\n\n...\n\nmessage OverridesDocument {\n  string domain = 1;\n  \n  string project = 2; // optional\n  \n  string workflow = 3; // optional\n  \n  int32 api_version = 4;\n  \n  repeated ResourceOverrides overrides = 5;\n  \n  OverridesStatus status = 6;\n}\n\nmessage ResourceOverrides {\n  MatchingAttributes attributes = 1; # Oneof for existing matchable resources\n  \n  bool inherited = 2;\n  \n  string domain = 3;  // optional, if inherited\n  \n  string project = 4;  // optional, if inherited\n  \n  ...\n}\n\nmessage OverridesStatus {\n  int32 version = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Plugin TOC Tree Structure\nDESCRIPTION: RST toctree directive defining the document structure for AWS plugin setup guides, including hidden navigation for batch, athena, and sagemaker sections.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/index.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:maxdepth: 1\n:name: AWS plugin setup\n:hidden:\n\nbatch\nathena\nsagemaker\n```\n\n----------------------------------------\n\nTITLE: GRPC Backend Plugin Server Implementation\nDESCRIPTION: GRPC service implementation for the backend plugin system handling task creation, retrieval and deletion.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-exteranl-plugin-service.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass BackendPluginServer(BackendPluginServiceServicer):\n    def CreateTask(self, request: plugin_system_pb2.TaskCreateRequest, context) -> plugin_system_pb2.TaskCreateResponse:\n        req = TaskCreateRequest.from_flyte_idl(request)\n        plugin = BackendPluginRegistry.get_plugin(req.template.type)\n        return plugin.create(req.inputs, req.output_prefix, req.template)\n\n    def GetTask(self, request: plugin_system_pb2.TaskGetRequest, context):\n        plugin = BackendPluginRegistry.get_plugin(request.task_type)\n        return plugin.get(job_id=request.job_id, output_prefix=request.output_prefix, prev_state=request.prev_state)\n\n    def DeleteTask(self, request: plugin_system_pb2.TaskDeleteRequest, context):\n        plugin = BackendPluginRegistry.get_plugin(request.task_type)\n        return plugin.delete(request.job_id)\n```\n\n----------------------------------------\n\nTITLE: Compiling Flyte Package from File\nDESCRIPTION: This command is used to compile a specified Flyte package file, which is a tgz file containing protobuf files for workflows, tasks, and launch plans. This operation is essential for validating workflows and tasks without the need for direct interaction with a Flyte cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_compile.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl compile --file my-flyte-package.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\nflytectl compile --file /home/user/dags/my-flyte-package.tgz\n```\n\nLANGUAGE: bash\nCODE:\n```\nflytectl compile [flags]\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Flyte Sandbox Image\nDESCRIPTION: This snippet demonstrates how to specify a custom Flyte Sandbox compliant image using the `--image` flag.  If the image flag is passed, Flytectl will ignore version and pre flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start --image docker.io/my-override:latest\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Source Code Reference Markdown Format\nDESCRIPTION: Example of how to reference source code in Markdown documentation files\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_docs.md#2025-04-16_snippet_2\n\nLANGUAGE: code-block\nCODE:\n```\n[View source code on GitHub](\"https://github.com/flyteorg/<source repo name>/blob/<git sha>/<target file path>#L<from line>-L<to line>\")\n```\n\n----------------------------------------\n\nTITLE: YAML Benchmark Result Example\nDESCRIPTION: This YAML snippet demonstrates the structure of benchmark results, including workflow durations, overhead, node-level details, event counts and latencies, blobstore read/write metrics, and propeller statistics. It serves as an example of how performance metrics are aggregated and presented for analysis.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/2995-performance-benchmarking.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"flyte.benchmark.chained-cache:\\n  duration: 1m53s\\n  flyteOverhead: 14%\\n  nodes:\\n  - n1:\\n    duration: 1m2s\\n    flyteOverhead: 6%\\n  - n2:\\n    ...\\n  events:\\n    workflow:\\n      count: 5\\n      latency:\\n        p50: 21ms\\n        p90: 30ms\\n        p99: 35ms\\n    node:\\n      count: 18\\n      latency:\\n        ...\\n    task:\\n      ...\\n  blobstore\\n    writes:\\n      count: 20\\n      latency:\\n        p50: 98ms\\n        ...\\n    reads:\\n      count: 40\\n      latency:\\n        p50: 23ms\\n        ...\\n  propeller:\\n    rounds:\\n      ...\\n    streaks:\\n      ...\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript MessagePack Implementation\nDESCRIPTION: JavaScript implementation for MessagePack encoding and decoding using the @msgpack/msgpack library.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { encode, decode } from '@msgpack/msgpack';\n\n// Example data to encode\nconst data = { a: 1 };\n\n// Encode the data\nconst encodedData = encode(data);\n\n// Print the encoded data\nconsole.log(encodedData); // <Buffer 81 a1 61 01>\n\n// Decode the data\nconst decodedData = decode(encodedData);\n\n// Print the decoded data\nconsole.log(decodedData); // { a: 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Cluster Attributes in YAML\nDESCRIPTION: Define an attributes file named 'ec.yaml' with cluster value, domain, and project information for customizing execution cluster labels.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/customizable_resources.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvalue: mycluster\ndomain: development\nproject: flyteexamples\n```\n\n----------------------------------------\n\nTITLE: Flytectl Command Line Configuration Options\nDESCRIPTION: Command-line parameters for configuring Flytectl storage settings, including OpenTelemetry export, storage backend configuration, authentication, caching, and output formats. Parameters control storage type, connection settings, cache size, authentication methods, and output display formats.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_project.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n-p, --project string                               Specifies the Flyte project.\n--storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n--storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n--storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n--storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n--storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n--storage.connection.endpoint string           URL for storage client to connect to.\n--storage.connection.region string             Region to connect to. (default \"us-east-1\")\n--storage.connection.secret-key string         Secret to use when accesskey is set.\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: PKCE Timeout Configuration\nDESCRIPTION: Defines timeout duration for browser authentication session in PKCE flow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n2m0s\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Formatter Type in YAML\nDESCRIPTION: Sets the default logging format type to JSON.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\njson\n```\n\n----------------------------------------\n\nTITLE: Resource Constraints Specification\nDESCRIPTION: Default resource constraint values for namespace scope (50) and project scope (100).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_112\n\nLANGUAGE: yaml\nCODE:\n```\nNamespaceScopeResourceConstraint:\n  Value: 50\nProjectScopeResourceConstraint:\n  Value: 100\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp using Java `System.currentTimeMillis()`\nDESCRIPTION: This Java snippet computes a Timestamp object by converting the current milliseconds to seconds and nanoseconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nlong millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n    .setNanos((int) ((millis % 1000) * 1000000)).build();\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Configuration\nDESCRIPTION: Default HTTP client configuration with null headers and zero timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook Certificate Directory in YAML\nDESCRIPTION: Defines the certificate directory to use for writing generated certificates for the webhook component.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_203\n\nLANGUAGE: yaml\nCODE:\n```\n/etc/webhook/certs\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Certificate Storage in YAML\nDESCRIPTION: Setting to determine whether to write certificates locally. Default is false.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_204\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Chart\nDESCRIPTION: Bash command to upgrade the Flyte binary Helm chart. It requires specifying the release name, namespace, and values file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Enabling CloudWatch Logging in Flyte\nDESCRIPTION: Boolean flag to enable or disable AWS CloudWatch as a logging backend for Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_148\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Backoff Base Duration in YAML\nDESCRIPTION: Sets the number of seconds representing the base duration of the exponential backoff algorithm.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_198\n\nLANGUAGE: yaml\nCODE:\n```\n\"2\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Logging in Flyte\nDESCRIPTION: Boolean flag to enable or disable Kubernetes as a logging backend for Flyte. Enabled by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_152\n\nLANGUAGE: yaml\nCODE:\n```\n\"true\"\n```\n\n----------------------------------------\n\nTITLE: Array Job Protocol Definition\nDESCRIPTION: Defines protocol buffer message for array jobs that can process independent data pieces concurrently with controls for parallelism, size and success criteria.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ArrayJob {\n  int64 parallelism = 1;\n  int64 size = 2;\n  int64 min_successes = 3;\n  float min_success_ratio = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Default LRU Cache Size Configuration in YAML\nDESCRIPTION: Default size (2000) of the AutoRefreshCache for Qubole.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_82\n\nLANGUAGE: yaml\nCODE:\n```\n\"2000\"\n```\n\n----------------------------------------\n\nTITLE: Detailed Logging Configuration Parameters\nDESCRIPTION: Individual default settings for various logging providers including Cloudwatch, Kubernetes, and Stackdriver.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_119\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"true\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhttp://localhost:30082/#!/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace\n  }}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Displaying Chart Dependencies in Markdown\nDESCRIPTION: This snippet uses Markdown table syntax to list the dependencies of the Flyte binary Helm chart, including the repository, name, and version of the required subchart.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-binary/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Repository | Name | Version |\n|------------|------|----------|\n| file://../flyteagent | flyteagent(flyteagent) | v0.1.10 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Tolerations in Flyte\nDESCRIPTION: Sets pod tolerations to allow scheduling on nodes with matching taints in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_133\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Setting Airflow Connection Environment Variable (Bash)\nDESCRIPTION: Example of setting an Airflow connection environment variable using the AIRFLOW_CONN format. This is required for configuring connections between Airflow operators and external systems.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/migrating_from_airflow_to_flyte.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AIRFLOW_CONN_MY_PROD_DATABASE='my-conn-type://login:password@host:port/schema?param1=val1&param2=val2'\n```\n\n----------------------------------------\n\nTITLE: Writing Cluster Resource Attributes to a YAML File using Flytectl\nDESCRIPTION: This snippet uses `flytectl` to write cluster resource attributes to a `cra.yaml` file if the attributes exist. The `flytectl` tool needs to be installed for executing this command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_cluster-resource-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nattributes:\n  foo: \"bar\"\n  buzz: \"lightyear\"\n```\n\n----------------------------------------\n\nTITLE: Parsing FlytePropeller Logs with fold_logs.py Script\nDESCRIPTION: Example output from fold_logs.py, a script in the FlytePropeller repository that parses logs to produce hierarchical time-series breakdown of workflow execution. The script shows the timestamp, line number, duration, and hierarchical structure of workflow processing stages.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/2995-performance-benchmarking.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhamersaw@ragnarok:~/development/flytepropeller$ ./script/fold-logs.py ~/flyte.log fd5d4ee88f9dc4436a76\nTimestamp   Line    Duration    Hierarchical Log Layout\n----------------------------------------------------------------------------------------------------\n18:08:38    282     14.0s       1 Workflow\n18:08:38    283     0.0s            1.1 Processing\n18:08:38    284     0.0s                1.1.1 StreakRound(Ready)\n18:08:38    289     0.0s                1.1.2 StreakRound(Running)\n18:08:38    292     0.0s                    1.1.2.1 UpdateNodePhase(start-node,NotYetStarted,Succeeded)\n18:08:38    298     0.0s                1.1.3 StreakRound(Running)\n18:08:38    299     0.0s                    1.1.3.1 UpdateNodePhase(n0,NotYetStarted,Queued)\n18:08:38    304     0.0s                1.1.4 StreakRound(Running)\n18:08:38    319     0.0s                    1.1.4.1 UpdateNodePhase(n0,Queued,Running)\n18:08:38    323     0.0s                1.1.5 StreakRound(Running)\n18:08:38    332     0.0s                1.1.6 StreakRound(Running)\n18:08:38    342     0.0s            1.2 Processing\n18:08:38    343     0.0s                1.2.1 StreakRound(Running)\n18:08:39    352     0.0s            1.3 Processing\n18:08:39    353     0.0s                1.3.1 StreakRound(Running)\n18:08:39    361     0.0s                1.3.2 StreakRound(Running)\n18:08:39    371     0.0s            1.4 Processing\n18:08:39    372     0.0s                1.4.1 StreakRound(Running)\n18:08:40    382     0.0s            1.5 Processing\n18:08:40    383     0.0s                1.5.1 StreakRound(Running)\n18:08:50    397     0.0s            1.6 Processing\n18:08:50    398     0.0s                1.6.1 StreakRound(Running)\n18:08:52    407     0.0s            1.7 Processing\n18:08:52    408     0.0s                1.7.1 StreakRound(Running)\n18:08:52    415     0.0s                    1.7.1.1 UpdateNodePhase(n0,Running,Succeeding)\n18:08:52    419     0.0s                1.7.2 StreakRound(Running)\n18:08:52    426     0.0s                1.7.3 StreakRound(Running)\n18:08:52    428     0.0s                    1.7.3.1 UpdateNodePhase(end-node,NotYetStarted,Queued)\n18:08:52    433     0.0s                1.7.4 StreakRound(Running)\n18:08:52    436     0.0s                    1.7.4.1 UpdateNodePhase(end-node,Queued,Succeeded)\n18:08:52    442     0.0s                1.7.5 StreakRound(Running)\n18:08:52    445     0.0s                1.7.6 StreakRound(Succeeding)\n18:08:52    453     0.0s            1.8 Processing\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionState Enum\nDESCRIPTION: This section defines the ExecutionState enum which controls the visibility and state of executions within the UI/CLI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: Enum ExecutionState values\n   :header: \"Name\", \"Number\", \"Description\"\n   :widths: auto\n\n   \"EXECUTION_ACTIVE\", \"0\", \"By default, all executions are considered active.\"\n   \"EXECUTION_ARCHIVED\", \"1\", \"Archived executions are no longer visible in the UI.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace Template for Flyte Sandbox\nDESCRIPTION: This snippet creates a YAML template for defining namespaces in the Flyte sandbox environment. It specifies the API version, kind, and metadata for the namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: '{{ namespace }}'\n```\n\n----------------------------------------\n\nTITLE: Workflow Status JSON Example\nDESCRIPTION: JSON representation of a workflow status showing execution metadata and node states.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/component_architecture/flytepropeller_architecture.rst#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"status\": {\n    \"dataDir\": \"gs://flyteontf-gcp-data-116223838137/metadata/propeller/flytesnacks-development-f7616dc75400f43e6920\",\n    \"defVersion\": 1,\n    \"lastUpdatedAt\": \"2024-03-26T16:22:16Z\",\n    \"nodeStatus\": {\n        \"end-node\": {\n            \"phase\": 5,\n            \"stoppedAt\": \"2024-03-26T16:22:16Z\"\n        },\n        \"n0\": {\n            \"phase\": 5,\n            \"stoppedAt\": \"2024-03-26T16:21:46Z\"\n        },\n        \"n1\": {\n            \"phase\": 5,\n            \"stoppedAt\": \"2024-03-26T16:22:02Z\"\n        },\n        \"n2\": {\n            \"phase\": 5,\n            \"stoppedAt\": \"2024-03-26T16:22:16Z\"\n        },\n        \"start-node\": {\n            \"phase\": 5,\n            \"stoppedAt\": \"2024-03-26T16:20:39Z\"\n        }\n    },\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status\nDESCRIPTION: Command to verify the status of Flyte pods after deployment updates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Overrides with Flytectl - JSON\nDESCRIPTION: This code block shows the output format when retrieving plugin overrides using the flytectl command. It's used to get plugin overrides for a specified project and domain in JSON format. The command requires the Flytectl CLI tool and appropriate access to the Flyte project's configuration. The output includes project, domain, and overrides details such as task type and plugin identifiers.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_plugin-override.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"project\": \"flytesnacks\",\n\t\"domain\": \"development\",\n\t\"overrides\": [{\n\t\t\"task_type\": \"python_task\",\n\t\t\"plugin_id\": [\"pluginoverride1\", \"pluginoverride2\"],\n        \"missing_plugin_behavior\": 0 \n\t}]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution Cluster Labels for a Workflow using flytectl - JSON Output\nDESCRIPTION: This snippet shows how to retrieve the execution cluster label for a specific workflow, alongside a project and domain, utilizing the flytectl get execution-cluster-label command. The output includes details such as project, domain, workflow, and label value in JSON format. Pre-requisite: configuration of flytectl with access permissions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-cluster-label.rst#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"project\":\"flytesnacks\",\"domain\":\"development\",\"workflow\":\"core.control_flow.merge_sort.merge_sort\",\"value\":\"foo\"}\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Backend Plugin System\nDESCRIPTION: Dockerfile for building the backend plugin system image with required dependencies.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0000-exteranl-plugin-service.md#2025-04-16_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.9-slim-buster\n\nMAINTAINER Flyte Team <users@flyte.org>\nLABEL org.opencontainers.image.source=https://github.com/flyteorg/flytekit\n\nWORKDIR /root\nENV PYTHONPATH /root\n\nRUN apt-get update && apt-get install -y git\nRUN pip install \"git+https://github.com/flyteorg/flytekit@backend-plugin-system\"\nRUN pip install fastapi uvicorn[standard]\nRUN pip install numpy==1.23.1\n\nCMD uvicorn flytekit.extend.backend.fastapi:app --host 0.0.0.0 --port 8000\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Sandbox with Proxy in Bash\nDESCRIPTION: This command starts the Flyte sandbox with a specified HTTP proxy, useful for environments that require a network proxy.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --env HTTP_PROXY=<your-proxy-IP>\n```\n\n----------------------------------------\n\nTITLE: Specifying Demo Image\nDESCRIPTION: Specifies a Flyte demo compliant image with the registry. This allows the user to use a custom image from their registry.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --image docker.io/my-override:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary Data Conversion in FlyteKit\nDESCRIPTION: Implementation of a method to convert binary IDL objects to Python types using MessagePack. This code is part of the TypeTransformer system and handles deserialization of binary data with custom decoders for different Python types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# In Mashumaro, the default encoder uses strict_map_key=False, while the default decoder uses strict_map_key=True.\n# This is relevant for cases like Dict[int, str].\n# If strict_map_key=False is not used, the decoder will raise an error when trying to decode keys that are not strictly typed.\ndef _default_flytekit_decoder(data: bytes) -> Any:\n    return msgpack.unpackb(data, raw=False, strict_map_key=False)\n\n\ndef from_binary_idl(self, binary_idl_object: Binary, expected_python_type: Type[T]) -> Optional[T]:\n    # Handle msgpack serialization\n    if binary_idl_object.tag == \"msgpack\":\n        try:\n            # Retrieve the existing decoder for the expected type\n            decoder = self._msgpack_decoder[expected_python_type]\n        except KeyError:\n            # Create a new decoder if not already cached\n            decoder = MessagePackDecoder(expected_python_type, pre_decoder_func=_default_flytekit_decoder)\n            self._msgpack_decoder[expected_python_type] = decoder\n        # Decode the binary IDL object into the expected Python type\n        return decoder.decode(binary_idl_object.value)\n    else:\n        # Raise an error if the binary format is not supported\n        raise TypeTransformerFailedError(f\"Unsupported binary format {binary_idl_object.tag}\")\n```\n\n----------------------------------------\n\nTITLE: Logger Format Configuration\nDESCRIPTION: Sets the default logging format type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ntype: json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flyte Workflow Custom Resources\nDESCRIPTION: Kubernetes command to list FlytePropeller workflow custom resources in a specific namespace.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/component_architecture/flytepropeller_architecture.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get flyteworkflows.flyte.lyft.com -n flytesnacks-development\n```\n\n----------------------------------------\n\nTITLE: Supported Task Types Configuration\nDESCRIPTION: Default configuration for supported task types in the connector system.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_115\n\nLANGUAGE: yaml\nCODE:\n```\n- task_type_3\n- task_type_4\n```\n\n----------------------------------------\n\nTITLE: K8s Plugin Configuration\nDESCRIPTION: K8s plugin configuration with default labels and annotations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/general.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n   k8s:\n    default-labels:\n      label_1: value-plugin\n    default-annotations:\n      annotation_1: value-plugin\n      baz: value-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte AWS Plugin\nDESCRIPTION: Default configuration for the Flyte AWS plugin. Includes settings for region (us-east-2), accountId, logLevel, and retry count.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\naccountId: \"\"\nlogLevel: 0\nregion: us-east-2\nretries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudWatch Log Group in Flyte\nDESCRIPTION: Specifies the log group to which CloudWatch log streams are associated for Flyte logs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_150\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp from POSIX `time()` in C++\nDESCRIPTION: This code snippet demonstrates initializing a Timestamp from the current POSIX time. It sets the current seconds using the `time()` function and initializes nanoseconds to zero.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nTimestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Admin Endpoint in YAML\nDESCRIPTION: Specifies the default value for the admin endpoint, which is an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Manager Type in YAML\nDESCRIPTION: Configures the type of secret manager to use. Default is K8s (Kubernetes).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_209\n\nLANGUAGE: yaml\nCODE:\n```\nK8s\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Service Name in YAML\nDESCRIPTION: Sets the name of the webhook service in the Kubernetes cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_206\n\nLANGUAGE: yaml\nCODE:\n```\nflyte-pod-webhook\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Command\nDESCRIPTION: Yarn command to install project dependencies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/console.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook Service Port in YAML\nDESCRIPTION: Defines the port on the service that hosts the webhook. Default is 443.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_207\n\nLANGUAGE: yaml\nCODE:\n```\n\"443\"\n```\n\n----------------------------------------\n\nTITLE: Default Inject Finalizer Configuration in YAML\nDESCRIPTION: Default setting (false) for whether the plugin should inject a finalizer on startTask and remove it on task termination.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_87\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Type in YAML\nDESCRIPTION: Sets the default storage type to 's3'. Other options include minio, local, mem, and stow.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ns3\n```\n\n----------------------------------------\n\nTITLE: Creating a List Table for Agent Setup Options in Markdown\nDESCRIPTION: This code snippet creates a Markdown list table that outlines various agent setup options available in Flyte, including their descriptions and reference links.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`Airflow Agent <deployment-agent-setup-airflow>`\n  - Configuring your Flyte deployment for the Airflow agent\n* - {ref}`ChatGPT Agent <deployment-agent-setup-chatgpt>`\n  - Configuring your Flyte deployment for the ChatGPT agent.\n* - {ref}`Databricks Agent <deployment-agent-setup-databricks>`\n  - Configuring your Flyte deployment for the Databricks agent.\n* - {ref}`Google BigQuery Agent <deployment-agent-setup-bigquery>`\n  - Configuring your Flyte deployment for the BigQuery agent.\n* - {ref}`MMCloud Agent <deployment-agent-setup-mmcloud>`\n  - Configuring your Flyte deployment for the MMCloud agent.\n* - {ref}`SageMaker Inference <deployment-agent-setup-sagemaker-inference>`\n  - Deploy models and create, as well as trigger inference endpoints on SageMaker.\n* - {ref}`Sensor Agent <deployment-agent-setup-sensor>`\n  - Configuring your Flyte deployment for the sensor agent.\n* - {ref}`Snowflake Agent <deployment-agent-setup-snowflake>`\n  - Configuring your Flyte deployment for the SnowFlake agent.\n* - {ref}`OpenAI Batch <deployment-agent-setup-openai-batch>`\n  - Submit requests to OpenAI GPT models for asynchronous batch processing.\n* - {ref}`LinkedIn K8s Service Batch <deployment-agent-setup-k8sservice>`\n  - Configuring your Flyte deployment for the K8s service agent.\n* - {ref}`Slurm Agent <deployment-agent-setup-slurm>`\n  - Configuring your Flyte deployment for the Slurm agent.\n```\n```\n\n----------------------------------------\n\nTITLE: Pre-v0.13.0 Propeller Authentication Configuration\nDESCRIPTION: YAML configuration for Flyte Propeller authentication setup before version 0.13.0.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_migration.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///mycompany.domain.com\n  useAuth: true\n  clientId: flytepropeller\n  clientSecretLocation: /etc/secrets/client_secret\n  tokenUrl: https://demo.nuclyde.io/oauth2/token\n  scopes:\n  - all\n```\n\n----------------------------------------\n\nTITLE: Setting Default Auth Type in YAML\nDESCRIPTION: Configures the default OAuth2 flow type for communicating with admin to ClientSecret.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nClientSecret\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionUpdateRequest Fields\nDESCRIPTION: This snippet describes the fields in the ExecutionUpdateRequest which allows updating the state of a workflow execution identified by the specified ID.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: ExecutionUpdateRequest type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"id\", \":ref:`ref_flyteidl.core.WorkflowExecutionIdentifier`\", \"\", \"Identifier of the execution to update\"\n   \"state\", \":ref:`ref_flyteidl.admin.ExecutionState`\", \"\", \"State to set as the new value active/archive\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Leader Election in YAML\nDESCRIPTION: Sets up leader election configuration for Flyte propeller, including lease duration and lock settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_163\n\nLANGUAGE: yaml\nCODE:\n```\nenabled: false\nlease-duration: 15s\nlock-config-map:\n  Name: \"\"\n  Namespace: \"\"\nrenew-deadline: 10s\nretry-period: 2s\n```\n\n----------------------------------------\n\nTITLE: Generating CRD Code\nDESCRIPTION: Commands for generating code after making changes to Custom Resource Definitions\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ go mod vendor\n$ make op_code_generate\n```\n\n----------------------------------------\n\nTITLE: Cluster Credentials Secret with Token\nDESCRIPTION: Secret configuration with the data plane cluster token added\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: cluster-credentials\n  namespace: flyte\ntype: Opaque\ndata:\n  dataplane_1_token: <your-dataplane1-token>\n```\n\n----------------------------------------\n\nTITLE: Accessing Task Execution API Endpoint\nDESCRIPTION: Example of the API endpoint structure for accessing task executions in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# replace with your specific task execution parameters\nhttp://localhost:30080/api/v1/task_executions/flytesnacks/development/fe92c0a8cbf684ad19a8/n0?limit=10000\n```\n\n----------------------------------------\n\nTITLE: Updating Binding Validation for Sum Types\nDESCRIPTION: Go code for validating bindings with sum types in Flytepropeller, including recursive validation of summands.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/sum-types.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc validateBinding(w c.WorkflowBuilder, nodeID c.NodeID, nodeParam string, binding *flyte.BindingData,\n\t    expectedType *flyte.LiteralType, errs errors.CompileErrors) (\n        resolvedType *flyte.LiteralType, upstreamNodes []c.NodeID, ok bool) {\n\n        switch binding.GetValue().(type) {\n        case *flyte.BindingData_Scalar:\n            // Goes through SumType-aware AreTypesCastable\n            break\n        case *flyte.BindingData_Promise:\n            // Goes through SumType-aware AreTypesCastable\n            break\n        default:\n            if expectedType.GetSum() != nil {\n                for _, t := range expectedType.GetSum().GetSummands() {\n                    if resolvedType, nodeIds, ok := validateBinding(w, nodeID, nodeParam, binding, t, errors.NewCompileErrors()); ok {\n                        // there can be no errors otherwise ok = false\n                        return resolvedType, nodeIds, ok\n                    }\n                }\n                errs.Collect(errors.NewMismatchingBindingsErr(nodeID, nodeParam, expectedType.String(), binding.GetCollection().String()))\n                return nil, nil, !errs.HasErrors()\n            }\n        }\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret with kubectl\nDESCRIPTION: Command to create a Kubernetes secret called 'user-info' with a 'user_secret' key in the namespace corresponding to the project and domain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret -n <project>-<domain> generic user-info --from-literal=user_secret=mysecret\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for Flytectl Upgrade in Bash\nDESCRIPTION: List of options inherited from parent commands that can be used with 'flytectl upgrade'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_upgrade.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Databricks Resource Constraints Configuration\nDESCRIPTION: Default resource constraint specification showing NamespaceScopeResourceConstraint setting.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_121\n\nLANGUAGE: yaml\nCODE:\n```\nNamespaceScopeResourceConstraint:\n```\n\n----------------------------------------\n\nTITLE: Write Execution Cluster Label to File using flytectl - YAML Example\nDESCRIPTION: This snippet illustrates the output of executing the flytectl command to write the execution cluster label to a YAML configuration file named ecl.yaml. The content provides the domain, project, and label value. Installing flytectl and ensuring necessary write permissions is required.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_execution-cluster-label.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nvalue: foo\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicWorkflowNodeMetadata Message in Protobuf\nDESCRIPTION: Defines a message type for storing metadata about dynamically generated workflow nodes, including the workflow identifier and compiled representation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DynamicWorkflowNodeMetadata {\n  flyteidl.core.Identifier id = 1;\n  flyteidl.core.CompiledWorkflowClosure compiled_workflow = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Kubernetes Deployment Configuration\nDESCRIPTION: Command to edit the Flyte agent deployment in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit deployment flyteagent -n flyte\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for flytectl update launchplan-meta\nDESCRIPTION: Lists the options inherited from parent commands, including various configuration settings for admin, authentication, storage, and output formatting.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan-meta.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n      --admin.audience string                        Audience to use when initiating OAuth2 authorization requests.\n      --admin.authType string                        Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n      --admin.authorizationHeader string             Custom metadata header to pass JWT\n      --admin.authorizationServerUrl string          This is the URL to your IdP's authorization server. It'll default to Endpoint\n      --admin.caCertFilePath string                  Use specified certificate file to verify the admin server peer.\n      --admin.clientId string                        Client ID (default \"flytepropeller\")\n      --admin.clientSecretEnvVar string              Environment variable containing the client secret\n      --admin.clientSecretLocation string            File containing the client secret (default \"/etc/secrets/client_secret\")\n      --admin.command strings                        Command for external authentication token generation\n      --admin.defaultServiceConfig string            \n      --admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n      --admin.deviceFlowConfig.refreshTime string    grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.deviceFlowConfig.timeout string        amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n      --admin.endpoint string                        For admin types,  specify where the uri of the service is located.\n      --admin.httpProxyURL string                    OPTIONAL: HTTP Proxy to be used for OAuth requests.\n      --admin.insecure                               Use insecure connection.\n      --admin.insecureSkipVerify                     InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n      --admin.maxBackoffDelay string                 Max delay for grpc backoff (default \"8s\")\n      --admin.maxMessageSizeBytes int                The max size in bytes for incoming gRPC messages\n      --admin.maxRetries int                         Max number of gRPC retries (default 4)\n      --admin.perRetryTimeout string                 gRPC per retry timeout (default \"15s\")\n      --admin.pkceConfig.refreshTime string          grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n      --admin.pkceConfig.timeout string              Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n      --admin.proxyCommand strings                   Command for external proxy-authorization token generation\n      --admin.scopes strings                         List of scopes to request\n      --admin.tokenRefreshWindow string              Max duration between token refresh attempt and token expiry. (default \"0s\")\n      --admin.tokenUrl string                        OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n      --admin.useAudienceFromAdmin                   Use Audience configured from admins public endpoint config.\n      --admin.useAuth                                Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n  -c, --config string                                config file (default is $HOME/.flyte/config.yaml)\n      --console.endpoint string                      Endpoint of console,  if different than flyte admin\n  -d, --domain string                                Specifies the Flyte project's domain.\n      --files.archive                                Pass in archive file either an http link or local path.\n      --files.assumableIamRole string                Custom assumable iam auth role to register launch plans with.\n      --files.continueOnError                        Continue on error when registering files.\n      --files.destinationDirectory string            Location of source code in container.\n      --files.dryRun                                 Execute command without making any modifications.\n      --files.enableSchedule                         Enable the schedule if the files contain schedulable launchplan.\n      --files.force                                  Force use of version number on entities registered with flyte.\n      --files.k8ServiceAccount string                Deprecated. Please use --K8sServiceAccount\n      --files.k8sServiceAccount string               Custom kubernetes service account auth role to register launch plans with.\n      --files.outputLocationPrefix string            Custom output location prefix for offloaded types (files/schemas).\n      --files.sourceUploadPath string                Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n      --files.version string                         Version of the entity to be registered with flyte which are un-versioned after serialization.\n  -i, --interactive                                  Set this flag to use an interactive CLI\n      --logger.formatter.type string                 Sets logging format type. (default \"json\")\n      --logger.level int                             Sets the minimum logging level. (default 3)\n      --logger.mute                                  Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n      --logger.show-source                           Includes source code location in logs.\n      --otel.file.filename string                    Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n      --otel.jaeger.endpoint string                  Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n      --otel.otlpgrpc.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n      --otel.otlphttp.endpoint string                Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n      --otel.sampler.parentSampler string            Sets the parent sampler to use for the tracer (default \"always\")\n      --otel.type string                             Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n  -o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n  -p, --project string                               Specifies the Flyte project.\n      --storage.cache.max_size_mbs int               Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n      --storage.cache.target_gc_percent int          Sets the garbage collection target percentage.\n      --storage.connection.access-key string         Access key to use. Only required when authtype is set to accesskey.\n      --storage.connection.auth-type string          Auth Type to use [iam, accesskey]. (default \"iam\")\n      --storage.connection.disable-ssl               Disables SSL connection. Should only be used for development.\n      --storage.connection.endpoint string           URL for storage client to connect to.\n      --storage.connection.region string             Region to connect to. (default \"us-east-1\")\n      --storage.connection.secret-key string         Secret to use when accesskey is set.\n      --storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n      --storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n      --storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n      --storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n      --storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Constructing Binary IDL Object for Struct Types in Go\nDESCRIPTION: This Go code snippet from FlyteCtl demonstrates how to construct a Binary IDL Object for SimpleType.STRUCT. It uses msgpack to marshal the value into a byte array, which is then converted to a string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nif newT.Simple == core.SimpleType_STRUCT {\n    if _, isValueStringType := v.(string); !isValueStringType {\n        byteValue, err := msgpack.Marshal(v)\n        if err != nil {\n            return nil, fmt.Errorf(\"unable to marshal to json string for struct value %v\", v)\n        }\n        strValue = string(byteValue)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PyTorch Distributed Training Protocol\nDESCRIPTION: Protocol specification for distributed PyTorch training using Kubeflow PyTorch operator.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DistributedPyTorchTrainingTask {\n  int32 workers = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Plugins in YAML\nDESCRIPTION: Sets the task plugin configuration for Flyte, including default task types and enabled plugins.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_194\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-for-task-types: {}\nenabled-plugins: []\n```\n\n----------------------------------------\n\nTITLE: Running Stats Generation Command\nDESCRIPTION: Command to generate dashboards using the make target in the flyteorg/flyte root folder\nSOURCE: https://github.com/flyteorg/flyte/blob/master/stats/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake stats\n```\n\n----------------------------------------\n\nTITLE: Default Value for Resource infDecAmount Dec Parameter\nDESCRIPTION: Default value configuration showing null setting for the Dec parameter in resource.infDecAmount.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_109\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Configuring ConstantShardingStrategy in YAML\nDESCRIPTION: YAML configuration example for the ConstantShardingStrategy, specifying the number of replicas to maintain.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1483-flytepropeller-horizontal-scaling.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nConstantShardingStrategy:\n    Replicas: 4\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Parent Sampler\nDESCRIPTION: Default configuration for the parent sampler to use for the OpenTelemetry tracer, set to 'always'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nalways\n```\n\n----------------------------------------\n\nTITLE: Computing Duration from two Timestamps (Pseudocode)\nDESCRIPTION: Calculates the Duration between two Timestamp values, handling nanosecond overflow/underflow appropriately.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_12\n\nLANGUAGE: Pseudocode\nCODE:\n```\nTimestamp start = ...;\nTimestamp end = ...;\nDuration duration = ...;\n\nduration.seconds = end.seconds - start.seconds;\nduration.nanos = end.nanos - start.nanos;\n\nif (duration.seconds < 0 && duration.nanos > 0) {\n  duration.seconds += 1;\n  duration.nanos -= 1000000000;\n} else if (duration.seconds > 0 && duration.nanos < 0) {\n  duration.seconds -= 1;\n  duration.nanos += 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: Command to spin up a demo cluster using flytectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Default Max Items Configuration in YAML\nDESCRIPTION: Default maximum number of entries (10000) to keep in the index of a workqueue.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\n\"10000\"\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Secret Manager Sidecar Image in YAML\nDESCRIPTION: Specifies the sidecar Docker image to use for GCP Secret Manager integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_218\n\nLANGUAGE: yaml\nCODE:\n```\ngcr.io/google.com/cloudsdktool/cloud-sdk:alpine\n```\n\n----------------------------------------\n\nTITLE: Resource Quota Template YAML\nDESCRIPTION: Template for configuring project resource quotas with CPU and memory limits\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: project-quota\n  namespace: {{ namespace }}\nspec:\n  hard:\n    limits.cpu: {{ projectQuotaCpu }}\n    limits.memory: {{ projectQuotaMemory }}\n```\n\n----------------------------------------\n\nTITLE: Default Token Path Configuration in YAML\nDESCRIPTION: Default empty string value for the token path in Kubernetes authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Default CA Certificate File Path in YAML\nDESCRIPTION: Sets the default value for the CA certificate file path to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting connMaxLifeTime for database in YAML\nDESCRIPTION: Sets the maximum amount of time a database connection may be reused. The default value is 1 hour.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n1h0m0s\n```\n\n----------------------------------------\n\nTITLE: Creating New Example Project\nDESCRIPTION: Command and resulting directory structure for creating a new example project using the provided script.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/create-example-project.sh new_example_project\n```\n\n----------------------------------------\n\nTITLE: Creating Execution Cluster Label Configuration\nDESCRIPTION: YAML configuration that defines how Flyte should route executions based on domain and project attributes. This maps the \"team1\" project in the \"production\" domain to use the \"label2\" cluster label.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: production\nproject: team1\nvalue: label2\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL File Exporter in YAML\nDESCRIPTION: Sets the default filename for exporting telemetry traces to a file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nfilename: /tmp/trace.txt\n```\n\n----------------------------------------\n\nTITLE: Presto Query Protocol\nDESCRIPTION: Message definition for executing Presto SQL queries with routing and catalog configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PrestoQuery {\n  string routing_group = 1;\n  string catalog = 2;\n  string schema = 3;\n  string statement = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Resource Quota Limit in Flyte\nDESCRIPTION: Sets the resource quota (in number of outstanding requests) for a Kubernetes cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_147\n\nLANGUAGE: yaml\nCODE:\n```\n\"0\"\n```\n\n----------------------------------------\n\nTITLE: Updating Task Description with flytectl\nDESCRIPTION: Updates the description of a Flyte task using flytectl update task-meta command. Requires project, domain and task path specification.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-meta.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update task-meta  -d development -p flytesnacks core.control_flow.merge_sort.merge --description \"Merge sort example\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Commands\nDESCRIPTION: Command line instructions for editing and restarting Flyte deployments.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/security/index.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit deployment flyteconsole -n <flyteconsole-ns>\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment/flyteconsole -n <flyteconsole-ns>\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit configmap flyte-admin-config -n <flyteadmin-ns>\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment/flyteadmin -n <flyteadmin-ns>\n```\n\n----------------------------------------\n\nTITLE: Default Memory Resource Configuration in YAML\nDESCRIPTION: Default memory resource value (1Gi) for containers if not specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_95\n\nLANGUAGE: yaml\nCODE:\n```\n1Gi\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options in Flytectl CLI\nDESCRIPTION: These command-line options allow users to configure various storage settings for Flytectl. They include enabling multi-container support, setting download size limits, configuring Stow backend, and selecting the storage type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task-resource-attribute.rst#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: PKCE Refresh Time Configuration\nDESCRIPTION: Sets the grace period for token refresh in PKCE authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n5m0s\n```\n\n----------------------------------------\n\nTITLE: Configuring Number of Workers in YAML\nDESCRIPTION: Sets the number of parallel workers to work on the queue in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_180\n\nLANGUAGE: yaml\nCODE:\n```\n\"10\"\n```\n\n----------------------------------------\n\nTITLE: Attempting Task Activation Operation\nDESCRIPTION: Shows a no-op activation command for a task. This operation has no effect since task archiving is not supported in the first place.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-meta.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update task-meta -d development -p flytesnacks core.control_flow.merge_sort.merge --activate\n```\n\n----------------------------------------\n\nTITLE: Delete Cluster Resource Attribute using Config File - Flyte CLI (yaml)\nDESCRIPTION: This snippet shows how to delete cluster resource attributes using a configuration file. The config file 'cra.yaml' specifies the domain and project along with optional attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_cluster-resource-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflytectl delete cluster-resource-attribute --attrFile cra.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration Documentation Command Shell Script\nDESCRIPTION: This shell command is used to generate configuration documentation in reStructuredText (rst) format. It supports a variety of flags for obtaining help and further configuring how the documentation generation behaves. No additional dependencies are necessary apart from having Flytectl installed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_config_docs.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflytectl config docs [flags]\n```\n\n----------------------------------------\n\nTITLE: Runtime Override Configuration in Workflow\nDESCRIPTION: Demonstrates how to set default runtime override values within a workflow, which can be further customized in the UI or launch plan\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3553-config-override.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@workflow\ndef wf():\n  t0().with_runtime_override(\"model_1_resources\", runtime_override_config(cpu=1, mem=\"1Gi\"))\n  sub_wf().with_runtime_override(...).with_runtime_override(...).with_runtime_override(...)\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage HTTP Client Timeout Option\nDESCRIPTION: Sets the timeout for the HTTP client used for storage operations. Defaults to 0s.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \\\"0s\\\")\"\n```\n\n----------------------------------------\n\nTITLE: C++ std::variant Implementation Examples\nDESCRIPTION: Illustrates C++'s std::variant implementation showing positional tags, type access methods, and type ordering significance.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/sum-types-2.md#2025-04-16_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Runtime representation carries a position tag, showing both APIs\nstd::variant<int, bool> a = 10;\nassert(std::get<int>(a) == 10);\nassert(std::get<0>(a) == 10);\na = false;\nassert(std::get<bool>(a) == false);\nassert(std::get<1>(a) == false);\n\n// Failure cases\nstd::get<2>(a); // no matching function for call to 'get'\nstd::get<double>(a); // no matching function for call to 'get'\n\nstd::get<0>(a);\n/*\nterminate called after throwing an instance of 'std::bad_variant_access'\n  what():  Unexpected index\n*/\n\n// Duplicate types are allowed but must use an unambiguous API\nstd::variant<int, int> b = 10;\n/*\nno viable conversion from 'int' to\n    'std::variant<int, int>'\n*/\n\n// Unambiguous uses allow both APIs\nstd::variant<int, int, bool> c = false;\n\nassert(std::get<bool>(c) == false);\nassert(std::get<2>(c) == false);\n\n// Ambiguous uses of the API do not work, the index-based API is the never ambiguous\nc.emplace<0>(10); // Assignment using the index-based API\nstd::get<int>(c);\n/*\nerror: \n      static_assert failed due to requirement\n      '__detail::__variant::__exactly_once<int, int, int, bool>' \"T should occur\n      for exactly once in alternatives\"\n      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n*/\n\nstd::get<0>(c) == 10;\n\n// Order of types matters\nif (c.index() == 0)\n  std::cout << \"First integer\" << std::endl;\nelse if (c.index() == 1)\n  std::cout << \"Second integer\" << std::endl;\nelse if (c.index() == 2)\n  std::cout << \"Boolean\" << std::endl;\n\nstd::variant<int, bool> x = false;\nstd::variant<bool, int> y = true;\n\nx = y;\n/*\nerror: no viable overloaded '='\n  x = y;\n  ~ ^ ~\n*/\n```\n\n----------------------------------------\n\nTITLE: Logging and Telemetry Configuration\nDESCRIPTION: Options for configuring logging formats, log levels, and telemetry tracing with support for various exporters and sampling strategies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl.rst#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--logger.formatter.type string\n--logger.level int\n--otel.type string\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Command to install necessary Python dependencies from requirements.txt file\nSOURCE: https://github.com/flyteorg/flyte/blob/master/stats/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Port in YAML\nDESCRIPTION: Sets the default port number for Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_176\n\nLANGUAGE: yaml\nCODE:\n```\n\"10254\"\n```\n\n----------------------------------------\n\nTITLE: Configuration File for Task Resource Attribute Deletion - Flytectl (YAML)\nDESCRIPTION: The following YAML configuration file can be used to define defaults and limits for task resource attributes. While these fields are optional during the deletion, they can be retained for other operations like 'get' and 'update'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_task-resource-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\ndefaults:\n  cpu: \"1\"\n  memory: \"150Mi\"\nlimits:\n  cpu: \"2\"\n  memory: \"450Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Connector Service Plugin\nDESCRIPTION: Default configuration for the Flyte connector service plugin. Includes settings for default connector, supported task types, poll interval, and resource constraints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nconnectorForTaskTypes: {}\nconnectors: {}\ndefaultConnector:\n  defaultServiceConfig: '{\"loadBalancingConfig\": [{\"round_robin\":{}}]}'\n  defaultTimeout: 10s\n  endpoint: \"\"\n  insecure: true\n  timeouts: null\npollInterval: 10s\nresourceConstraints:\n  NamespaceScopeResourceConstraint:\n    Value: 50\n  ProjectScopeResourceConstraint:\n    Value: 100\nsupportedTaskTypes:\n- task_type_3\n- task_type_4\nwebApi:\n  caching:\n    maxSystemFailures: 5\n    resyncInterval: 30s\n    size: 500000\n    workers: 10\n  readRateLimiter:\n    burst: 100\n    qps: 10\n  resourceMeta: null\n  resourceQuotas:\n    default: 1000\n  writeRateLimiter:\n    burst: 100\n    qps: 10\n```\n\n----------------------------------------\n\nTITLE: Setting PKCE Config in YAML\nDESCRIPTION: Configures the default PKCE authentication flow settings, including refresh time and timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nrefreshTime: 5m0s\ntimeout: 2m0s\n```\n\n----------------------------------------\n\nTITLE: Kubeflow Operator Plugin Retry Handling\nDESCRIPTION: Code reference showing how the Kubeflow operators plugin counts preemptions against the user retry budget.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/3902-simplify-retry-behaviour.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Link: github.com/flyteorg/flyteplugins/blob/master/go/tasks/plugins/k8s/kfoperators/common/common_operator.go#L79\n// Counts preemptions towards user retry budget\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationList Fields\nDESCRIPTION: This part defines the fields for the NotificationList which contains a repeated list of notifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: NotificationList type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"notifications\", \":ref:`ref_flyteidl.admin.Notification`\", \"repeated\", \"\"\n```\n\n----------------------------------------\n\nTITLE: Default Tolerations Configuration in YAML\nDESCRIPTION: Default null value for pod tolerations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_96\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Default Max Retries Configuration in YAML\nDESCRIPTION: Default maximum number of retries (3) per item in a workqueue.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_75\n\nLANGUAGE: yaml\nCODE:\n```\n\"3\"\n```\n\n----------------------------------------\n\nTITLE: Namespace Template Configuration YAML\nDESCRIPTION: Template for creating Kubernetes namespaces with finalizers\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: {{ namespace }}\nspec:\n  finalizers:\n  - kubernetes\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Level in YAML\nDESCRIPTION: Sets the minimum logging level to 3 by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n\"3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Namespace Template (YAML)\nDESCRIPTION: Kubernetes namespace template definition for Flyte with kubernetes finalizer\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: {{ namespace }}\nspec:\n  finalizers:\n  - kubernetes\n\n```\n\n----------------------------------------\n\nTITLE: Flytectl Upgrade Help Option in Bash\nDESCRIPTION: Command to display help information for the 'flytectl upgrade' command.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_upgrade.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for upgrade\n```\n\n----------------------------------------\n\nTITLE: Docker Image Registry Mappings Configuration\nDESCRIPTION: List of Docker image references mapping public images to specific tagged versions. Includes infrastructure components like MinIO, PostgreSQL, Envoy proxy, Kubernetes dashboard, and core system containers.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docker/sandbox-bundled/images/manifest.txt#2025-04-16_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker.io/bitnami/os-shell:sandbox=bitnami/os-shell:11-debian-11\ndocker.io/bitnami/minio:sandbox=bitnami/minio:2023.1.25-debian-11-r0\ndocker.io/bitnami/postgresql:sandbox=bitnami/postgresql:15.1.0-debian-11-r20\ndocker.io/envoyproxy/envoy:sandbox=envoyproxy/envoy:v1.23-latest\ndocker.io/kubernetesui/dashboard:sandbox=kubernetesui/dashboard:v2.7.0\ndocker.io/library/registry:sandbox=registry:2.8.1\ndocker.io/moby/buildkit:sandbox=moby/buildkit:buildx-stable-1\ndocker.io/rancher/local-path-provisioner:v0.0.21\ndocker.io/rancher/mirrored-coredns-coredns:1.9.1\ndocker.io/rancher/mirrored-library-busybox:1.34.1\ndocker.io/rancher/mirrored-metrics-server:v0.5.2\ndocker.io/rancher/mirrored-pause:3.6\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow-Specific Plugin Override Configuration in YAML\nDESCRIPTION: Example YAML configuration file for updating plugin overrides for a specific workflow in Flyte. It includes project, domain, workflow name, and override settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_plugin-override.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nworkflow: core.control_flow.merge_sort.merge_sort\noverrides:\n   - task_type: python_task # Task type for which to apply plugin implementation overrides\n     plugin_id:             # Plugin id(s) to be used in place of the default for the task type.\n       - plugin_override1\n       - plugin_override2\n     missing_plugin_behavior: 1 # Behavior when no specified plugin_id has an associated handler. 0 : FAIL , 1: DEFAULT\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration\nDESCRIPTION: Default SSL configuration for storage connections. Set to false by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from Timestamp and Duration in Pseudocode\nDESCRIPTION: This snippet shows how to calculate a new Timestamp by adding a Duration to an existing Timestamp. It handles nanosecond overflow and underflow by adjusting seconds and nanoseconds accordingly.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_9\n\nLANGUAGE: pseudocode\nCODE:\n```\nTimestamp start = ...;\nDuration duration = ...;\nTimestamp end = ...;\n\nend.seconds = start.seconds + duration.seconds;\nend.nanos = start.nanos + duration.nanos;\n\nif (end.nanos < 0) {\n  end.seconds -= 1;\n  end.nanos += 1000000000;\n} else if (end.nanos >= 1000000000) {\n  end.seconds += 1;\n  end.nanos -= 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CloudWatch Region for Logging in Flyte\nDESCRIPTION: Configures the AWS region in which CloudWatch logs are stored for Flyte execution logs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_149\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Deployment Status with kubectl\nDESCRIPTION: This snippet instructs how to check the status of deployment pods in the Flyte namespace using kubectl. It outputs the current state of all pods, helping verify if components are up and running post upgrade.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/k8s/index.rst#2025-04-16_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Structuring Table of Contents for Flyte Productionization Documentation in Markdown\nDESCRIPTION: A markdown table of contents (toctree) that organizes documentation topics related to productionizing Flyte pipelines. The toctree includes sections on resource customization, task and launch plan references, notifications, scheduling, UI configuration, GPU access, spot instances, secrets, and labeling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: -1\n:name: productionizing_toc\n:hidden:\n\ncustomizing_task_resources\nreference_tasks\nreference_launch_plans\nnotifications\nschedules\nconfiguring_logging_links_in_the_ui\nconfiguring_access_to_gpus\nspot_instances\nsecrets\nworkflow_labels_and_annotations\n```\n```\n\n----------------------------------------\n\nTITLE: Default Name Configuration in YAML\nDESCRIPTION: Default empty string value for the friendly name of a remote cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stow Configuration Options for Flyte\nDESCRIPTION: This snippet specifies configuration options for the Stow backend used in Flyte. It includes parameters for defining the backend kind and type of storage, with a reference to external documentation for further details. The default storage is set to S3, and the parameters allow flexibility for various storage solutions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_workflow-execution-config.rst#2025-04-16_snippet_5\n\nLANGUAGE: string\nCODE:\n```\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n      --storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n      --storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Authorization Server URL in YAML\nDESCRIPTION: Configures the default authorization server URL to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Dependencies with Custom Values\nDESCRIPTION: Command to upgrade the Flyte dependencies installation using a custom values file. This allows users to apply their specific configuration changes to the Flyte deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-deps/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -f values.yaml flyte .\n```\n\n----------------------------------------\n\nTITLE: Running Flytectl Tests\nDESCRIPTION: Command to run tests for Flytectl with race detection and code coverage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/contribute.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./... -race -coverprofile=coverage.txt -covermode=atomic  -v\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration File for Execution Queue Attribute Deletion\nDESCRIPTION: This YAML file provides the configuration required for deleting execution queue attributes. It includes fields like domain, project, and tags.  The value field is optional and is not read during the delete operation, but it can be included if the same file is used for other operations like get or update.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution-queue-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\ntags:\n  - foo\n  - bar\n  - buzz\n  - lightyear\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterAssignment Message Type in Protocol Buffers\nDESCRIPTION: Protocol buffer message definition for specifying cluster routing rules. Contains a cluster_pool_name field for assigning executions to specific clusters.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ClusterAssignment {\n  string cluster_pool_name = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Helm Release with SageMaker Configuration\nDESCRIPTION: Command to upgrade the Flyte Helm release with custom values override for SageMaker integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/sagemaker.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -n flyte -f values-override.yaml flyteorg/flyte-core\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Agent Service Plugin\nDESCRIPTION: Default configuration for the Flyte agent service plugin. Includes settings for default agent, supported task types, poll interval, and resource constraints.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nagentForTaskTypes: null\nagents: null\ndefaultAgent:\n  defaultServiceConfig: '{\"loadBalancingConfig\": [{\"round_robin\":{}}]}'\n  defaultTimeout: 3s\n  endpoint: \"\"\n  insecure: true\n  timeouts: null\npollInterval: 10s\nresourceConstraints:\n  NamespaceScopeResourceConstraint:\n    Value: 50\n  ProjectScopeResourceConstraint:\n    Value: 100\nsupportedTaskTypes:\n- task_type_1\n- task_type_2\nwebApi:\n  caching:\n    maxSystemFailures: 5\n    resyncInterval: 30s\n    size: 500000\n    workers: 10\n  readRateLimiter:\n    burst: 100\n    qps: 10\n  resourceMeta: null\n  resourceQuotas:\n    default: 1000\n  writeRateLimiter:\n    burst: 100\n    qps: 10\n```\n\n----------------------------------------\n\nTITLE: Selecting Storage Type\nDESCRIPTION: Sets the type of storage backend to use, with default set to S3 and options including s3, minio, local, mem, and stow\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--storage.type string\n```\n\n----------------------------------------\n\nTITLE: Visualizing Basic Workflow Graph\nDESCRIPTION: Mermaid diagram showing a basic workflow with tasks A, B, C, and D connected in sequence. Used to demonstrate task failure and caching scenarios.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/versioning.rst#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n       A-->B;\n       B-->C;\n       C-->D;\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Binary Task Plugins\nDESCRIPTION: YAML configuration for enabling agent-service and setting default task types in Flyte binary deployment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sagemaker_inference.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntasks:\n  task-plugins:\n    enabled-plugins:\n      - container\n      - sidecar\n      - k8s-array\n      - agent-service\n    default-for-task-types:\n      - container: container\n      - container_array: k8s-array\n      - boto: agent-service\n      - sagemaker-endpoint: agent-service\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Task Plugins in YAML\nDESCRIPTION: Defines the list of plugins that are currently enabled in the Flyte system.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_200\n\nLANGUAGE: yaml\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Dependency Documentation\nDESCRIPTION: Sphinx toctree directive that organizes documentation sections for customizing dependencies, including imagespec, raw containers, and multiple image workflow configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: -1\n:name: customizing_dependencies_toc\n:hidden:\n\nimagespec\nraw_containers\nmultiple_images_in_a_workflow\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Prefix in YAML\nDESCRIPTION: Sets the prefix for environment variables in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_184\n\nLANGUAGE: yaml\nCODE:\n```\nFLYTE_SECRET_\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow-Specific Execution Queue Attributes in YAML\nDESCRIPTION: Example YAML configuration for defining execution queue attributes for a specific workflow within a project and domain. This configuration takes precedence over project-domain level attributes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-queue-attribute.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndomain: development\nproject: flytesnacks\nworkflow: core.control_flow.merge_sort.merge_sort\ntags:\n  - foo\n  - bar\n  - buzz\n  - lightyear\n```\n\n----------------------------------------\n\nTITLE: Configuring Insecure Connection in YAML\nDESCRIPTION: Sets the default value for using an insecure connection to false.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Supporting Input and Default Input Handling in FlytePropeller\nDESCRIPTION: Implementation of functions to extract values from literals, create default literals, and make binary literals. These functions handle conversions between Flyte's internal representation and Go types, with special support for binary data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Literal Input\nfunc ExtractFromLiteral(literal *core.Literal) (interface{}, error) {\n    switch literalValue := literal.Value.(type) {\n        case *core.Literal_Scalar:\n        ...\n            case *core.Scalar_Binary:\n\t\t\t    return scalarValue.Binary, nil\n    }\n}\n// Default Input\nfunc MakeDefaultLiteralForType(typ *core.LiteralType) (*core.Literal, error) {\n\tswitch t := typ.GetType().(type) {\n\tcase *core.LiteralType_Simple:\n        case core.SimpleType_BINARY:\n\t\t\treturn MakeLiteral([]byte{})\n    }\n}\n// Use Message Pack as Default Tag for deserialization.\n// \"tag\" will default be \"msgpack\"\nfunc MakeBinaryLiteral(v []byte, tag string) *core.Literal {\n\treturn &core.Literal{\n\t\tValue: &core.Literal_Scalar{\n\t\t\tScalar: &core.Scalar{\n\t\t\t\tValue: &core.Scalar_Binary{\n\t\t\t\t\tBinary: &core.Binary{\n\t\t\t\t\t\tValue: v,\n\t\t\t\t\t\tTag:   tag,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Security Configuration\nDESCRIPTION: Default security settings for catalog cache.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Scopes in YAML\nDESCRIPTION: Sets the default list of scopes to request as an empty array.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Spark Operator Configuration\nDESCRIPTION: This configuration snippet shows the settings for the Spark Operator within the Flyte platform. It includes options to enable/disable the Spark Operator deployment and configure default Spark settings such as credential providers, output committer algorithms, kubernetes allocation batch sizes, S3 access control, and blacklist settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-core/README.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": false,\n  \"plugin_config\": {\n    \"plugins\": {\n      \"spark\": {\n        \"spark-config-default\": [\n          {\n            \"spark.hadoop.fs.s3a.aws.credentials.provider\": \"com.amazonaws.auth.DefaultAWSCredentialsProviderChain\"\n          },\n          {\n            \"spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version\": \"2\"\n          },\n          {\n            \"spark.kubernetes.allocation.batch.size\": \"50\"\n          },\n          {\n            \"spark.hadoop.fs.s3a.acl.default\": \"BucketOwnerFullControl\"\n          },\n          {\n            \"spark.hadoop.fs.s3n.impl\": \"org.apache.hadoop.fs.s3a.S3AFileSystem\"\n          },\n          {\n            \"spark.hadoop.fs.AbstractFileSystem.s3n.impl\": \"org.apache.hadoop.fs.s3a.S3A\"\n          },\n          {\n            \"spark.hadoop.fs.s3.impl\": \"org.apache.hadoop.fs.s3a.S3AFileSystem\"\n          },\n          {\n            \"spark.hadoop.fs.AbstractFileSystem.s3.impl\": \"org.apache.hadoop.fs.s3a.S3A\"\n          },\n          {\n            \"spark.hadoop.fs.s3a.impl\": \"org.apache.hadoop.fs.s3a.S3AFileSystem\"\n          },\n          {\n            \"spark.hadoop.fs.AbstractFileSystem.s3a.impl\": \"org.apache.hadoop.fs.s3a.S3A\"\n          },\n          {\n            \"spark.hadoop.fs.s3a.multipart.threshold\": \"536870912\"\n          },\n          {\n            \"spark.blacklist.enabled\": \"true\"\n          },\n          {\n            \"spark.blacklist.timeout\": \"5m\"\n          },\n          {\n            \"spark.task.maxfailures\": \"8\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Cluster\nDESCRIPTION: Command to start a Flyte demo cluster with a specific image version\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0-b5.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --image ghcr.io/flyteorg/flyte-sandbox-bundled:sha-e240038bea1f3bdfe2092823688d35dc78fb6e6b\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Catalog Client\nDESCRIPTION: This YAML snippet defines the configuration for the Flyte Catalog Client, specifying the endpoint and connection settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.catalog:\n  catalog-cache:\n    endpoint: \"datacatalog:89\"\n    insecure: true\n    type: \"datacatalog\"\n```\n\n----------------------------------------\n\nTITLE: Tags Configuration in RST Format\nDESCRIPTION: RST directive for specifying documentation tags related to extensibility, contribution, and difficulty level.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/backend_plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tags:: Extensibility, Contribute, Intermediate\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Assembler for Kubernetes Jobs in Flyte\nDESCRIPTION: Sets workqueue configuration for the output assembler, including worker count and retry settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_135\n\nLANGUAGE: yaml\nCODE:\n```\nmaxItems: 100000\nmaxRetries: 5\nworkers: 10\n```\n\n----------------------------------------\n\nTITLE: Mounting Secrets as Environment Variables\nDESCRIPTION: Specifying the mounting requirement for a secret to be injected as an environment variable.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@task(\n    secret_requests=[\n        Secret(\n            group=SECRET_GROUP,\n            key=SECRET_NAME,\n            mount_requirement=Secret.MountType.ENV_VAR,\n        )\n    ]\n)\ndef env_var_secret_task() -> str:\n    # Get the secret from the environment variable\n    secret_val = current_context().secrets.get(SECRET_GROUP, SECRET_NAME)\n    # WARNING: Never print your secrets. This is just for demonstration purposes.\n    print(f\"Secret {SECRET_NAME} loaded from environment variable: {secret_val}\")\n    return \"env var secret used successfully\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Output Format Option\nDESCRIPTION: Specifies the desired output format for `flytectl` commands. Supported formats include TABLE, JSON, YAML, DOT, and DOTURL. DOT and DOTURL are only supported for Workflow outputs. Defaults to TABLE format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"-o, --output string                                Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \\\"TABLE\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Message Size in YAML\nDESCRIPTION: Sets the default maximum size in bytes for incoming gRPC messages to 0 (unlimited).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Role in YAML\nDESCRIPTION: Specifies the Vault role to use for HashiCorp Vault integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_219\n\nLANGUAGE: yaml\nCODE:\n```\nflyte\n```\n\n----------------------------------------\n\nTITLE: Task-Meta Command Options\nDESCRIPTION: Lists all available options specific to the task-meta update command including activation, archiving, description and execution controls.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_task-meta.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n    --activate             activate the named entity.\n    --archive              archive named entity.\n    --description string   description of the named entity.\n    --dryRun               execute command without making any modifications.\n    --force                do not ask for an acknowledgement during updates.\n-h, --help                 help for task-meta\n```\n\n----------------------------------------\n\nTITLE: Flytectl Update Execution-Cluster-Label Command Usage\nDESCRIPTION: Syntax for using the 'flytectl update execution-cluster-label' command with available flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-cluster-label.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution-cluster-label [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Trace ID Ratio\nDESCRIPTION: Default configuration for the trace ID ratio in the OpenTelemetry sampler, set to 0.01 (1% sampling rate).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\n\"0.01\"\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Download Limit Option\nDESCRIPTION: Sets the maximum allowed download size (in MBs) per call to storage. Defaults to 2MB.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\"\n```\n\n----------------------------------------\n\nTITLE: Default Environment From ConfigMaps Configuration in YAML\nDESCRIPTION: Default null value for environment variables sourced from ConfigMaps.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_92\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Commands to install PostgreSQL client and connect to the Flyte database running on local environment with specified credentials.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# Step 1: Install the PostgreSQL client.\nsudo apt-get update\nsudo apt-get install postgresql-client\n\n# Step 2: Connect to the PostgreSQL server. The password is \"postgres\".\npsql -h localhost -p 30001 -U postgres -d flyte\n```\n\n----------------------------------------\n\nTITLE: Simple Function Example\nDESCRIPTION: Example of a simple Python function with explanation of its parameters and functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef function(x, y, z=3):\n    return x + y * z\n```\n\n----------------------------------------\n\nTITLE: flytectl completion command syntax\nDESCRIPTION: This snippet shows the basic syntax of the `flytectl completion` command. The user must specify which shell they want the completion script to be generated for (bash, zsh, fish, or powershell).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_completion.rst#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"  flytectl completion [bash|zsh|fish|powershell]\"\n```\n\n----------------------------------------\n\nTITLE: Defining MatchableResource Enum in Protobuf\nDESCRIPTION: Defines the MatchableResource enum, which specifies different resource types that can be configured using customizable attributes in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nenum MatchableResource {\n  TASK_RESOURCE = 0;\n  CLUSTER_RESOURCE = 1;\n  EXECUTION_QUEUE = 2;\n  EXECUTION_CLUSTER_LABEL = 3;\n  QUALITY_OF_SERVICE_SPECIFICATION = 4;\n  PLUGIN_OVERRIDE = 5;\n  WORKFLOW_EXECUTION_CONFIG = 6;\n  CLUSTER_ASSIGNMENT = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Parameters in Flytectl\nDESCRIPTION: Command line options for configuring storage backends in Flytectl. Includes parameters for specifying the storage type (s3, minio, local, mem, or stow) and the specific Stow backend kind when using the Stow storage type.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Event Type Configuration\nDESCRIPTION: Specifies the type of event sink to use.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nadmin\n```\n\n----------------------------------------\n\nTITLE: Delete workflow execution config using a config file\nDESCRIPTION: This command deletes the workflow execution configuration using a YAML file. The file should contain the domain and project.  Max_parallelism is optional in the file as it is unread during the delete command but can be retained since the same file can be used for get, update and delete commands.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_workflow-execution-config.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl delete workflow-execution-config --attrFile wec.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Group and Name Constants\nDESCRIPTION: Declaring constants for the secret group and name, which map to the Kubernetes secret created earlier.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSECRET_GROUP = \"user-info\"\nSECRET_NAME = \"user_secret\"\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from current time in Python\nDESCRIPTION: Creates a Timestamp object in Python and sets it to the current time using the GetCurrentTime() method.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ntimestamp = Timestamp()\ntimestamp.GetCurrentTime()\n```\n\n----------------------------------------\n\nTITLE: Creating a Hidden Toctree for Plugin Setup Guides in Markdown\nDESCRIPTION: This code snippet creates a hidden toctree in Markdown format, listing the individual setup guide pages for different plugin types. It includes K8s, AWS, GCP, and Web API plugin setup guides.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n:name: Plugin Setup\n:hidden:\n\nk8s/index\naws/index\ngcp/index\nwebapi/index\n```\n```\n\n----------------------------------------\n\nTITLE: Empty String Default Configuration\nDESCRIPTION: Default empty string value for fragment configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Task Resource Attributes Configuration in YAML\nDESCRIPTION: YAML configuration for defining default and maximum task resource limits for CPU and memory in the Flyte demo cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/environment_setup.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n    cpu: \"2\"\n    memory: 1Gi\nlimits:\n    cpu: \"1000\"\n    memory: 5Ti\nproject: flytesnacks\ndomain: development\n```\n\n----------------------------------------\n\nTITLE: Setting Databricks API Token Key in Flyte\nDESCRIPTION: Specifies the name of the key where to find the Databricks authentication token in the secret manager.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_123\n\nLANGUAGE: yaml\nCODE:\n```\nFLYTE_DATABRICKS_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Default Node Selector Configuration in YAML\nDESCRIPTION: Default null value for pod node selectors.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_97\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Alternative Concurrency Scheduling Protobuf Definition\nDESCRIPTION: Proposed extension to the Concurrency protobuf message to support different scheduling behaviors. It adds a scheduling field to determine the order in which pending executions should be processed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/RFC-5659-execution-concurrency.md#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Concurrency {\n  // Defines how many executions with this launch plan can run in parallel\n  uint32 max = 1;\n  \n  // Defines how to handle the execution when the max concurrency is reached.\n  ConcurrencyPolicy policy = 2;\n\n  ConcurrencyScheduling scheduling = 3;\n}\n\n\ntype ConcurrencyScheduling enum {\n  FIFO = 0;\n  FILO = 1;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting secure mode for Catalog in YAML\nDESCRIPTION: Determines whether to run Catalog in secure mode. The default value is false.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Setting Client Secret Location in YAML\nDESCRIPTION: Configures the default file location for the client secret.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n/etc/secrets/client_secret\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Template for Flyte Objects\nDESCRIPTION: A Jinja2 template that generates Sphinx documentation with special handling for FlyteFile and FlyteDirectory classes. For these specific classes, it generates documentation for methods and attributes, while other objects are documented using autodata directive.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/_templates/file_types.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n{% if objname == 'FlyteFile' or objname == 'FlyteDirectory' %}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   {% if methods %}\n\n   .. rubric:: {{ _('Methods') }}\n   {% for item in methods %}\n\n   {% if item != '__init__' %}\n   .. automethod:: {{ item }}\n   {% endif %}\n\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n\n   .. rubric:: {{ _('Attributes') }}\n   {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n   {%- endfor %}\n\n   {% endif %}\n   {% endblock %}\n\n\n{% else %}\n\n.. autodata:: {{ objname }}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: RFC File Naming Convention\nDESCRIPTION: Shows the proper format for naming RFC files when submitting a proposal, using a template-based approach with numbered prefixes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nrfc/<category>/0000-my-feature.md\n```\n\n----------------------------------------\n\nTITLE: Configuring flyte-binary monitoring\nDESCRIPTION: Placeholder YAML configuration skeleton for flyte-binary monitoring settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/monitoring.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration:\n```\n\n----------------------------------------\n\nTITLE: Note About TaskTemplate Custom Field\nDESCRIPTION: RST note explaining the purpose and structure of the custom field in TaskTemplate for extending functionality.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/backend_plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nAn important field to note here is {std:ref}`custom <protos/docs/core/core:tasktemplate>`. The custom field is essentially an unstructured JSON. This makes it possible to extend a task-template beyond the default supported targets {std:ref}`container <protos/docs/core/core:tasktemplate>`.\n```\n\n----------------------------------------\n\nTITLE: Default Cluster Configs Configuration in YAML\nDESCRIPTION: Default cluster configuration with settings for quotas and limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_85\n\nLANGUAGE: yaml\nCODE:\n```\n- labels:\n  - default\n  limit: 100\n  namespaceScopeQuotaProportionCap: 0.7\n  primaryLabel: default\n  projectScopeQuotaProportionCap: 0.7\n```\n\n----------------------------------------\n\nTITLE: Configuring reStructuredText Table of Contents for Flyte Core Concepts\nDESCRIPTION: Defines a toctree directive that organizes documentation for Flyte's core concepts. The toctree is configured with maxdepth of 1 and includes links to major conceptual topics like tasks, workflows, nodes, and other fundamental Flyte components.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _divedeep:\n\n#############\nMain concepts\n#############\n\n.. toctree::\n    :maxdepth: 1\n    :name: Core Concepts\n\n    tasks\n    workflows\n    nodes\n    launchplans\n    schedules\n    registration\n    executions\n    state_machine\n    execution_timeline\n    data_management\n    flyte_console\n    catalog\n    versioning\n    workflow_lifecycle\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Container Option\nDESCRIPTION: Specifies the initial storage container (e.g., S3 bucket) to create if it does not already exist.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.'\"\n```\n\n----------------------------------------\n\nTITLE: Device Flow Poll Interval Configuration\nDESCRIPTION: Sets the polling interval for token endpoint in device flow authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n5s\n```\n\n----------------------------------------\n\nTITLE: Default Kubernetes Auth Configuration in YAML\nDESCRIPTION: Default configuration for Kubernetes authentication with empty certificate and token paths.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\ncaCertPath: \"\"\ntokenPath: \"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Python Dependencies for Flyte Project\nDESCRIPTION: A simple requirements.txt file specifying the minimum Flytekit dependency version needed for a Flyte project.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/flyte_project_components.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytekit>=1.5.0\n```\n\n----------------------------------------\n\nTITLE: Creating Databricks Runtime Dockerfile\nDESCRIPTION: Dockerfile for building a custom Databricks runtime image with required dependencies\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0-b5.md#2025-04-16_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM databricksruntime/standard:11.3-LTS\nENV PATH $PATH:/databricks/python3/bin\nENV PYTHONPATH /databricks/driver\nRUN /databricks/python3/bin/pip install awscli flytekitplugins-spark==v1.3.0b5\nCOPY ./ /databricks/driver\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Size in YAML\nDESCRIPTION: Sets the maximum cache size in terms of number of items stored in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_179\n\nLANGUAGE: yaml\nCODE:\n```\n\"10000\"\n```\n\n----------------------------------------\n\nTITLE: Options for Sandbox Status Command - Flytectl\nDESCRIPTION: Lists the available options and flags that can be utilized with the flytectl sandbox status command, including help command and inherited admin options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_status.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-h, --help   help for status\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.audience string   Audience to use when initiating OAuth2 authorization requests.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.authType string   Type of OAuth2 flow used for communicating with admin.ClientSecret, Pkce, ExternalCommand are valid values (default \"ClientSecret\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.authorizationHeader string   Custom metadata header to pass JWT\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.authorizationServerUrl string   This is the URL to your IdP's authorization server. It'll default to Endpoint\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.caCertFilePath string   Use specified certificate file to verify the admin server peer.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.clientId string   Client ID (default \"flytepropeller\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.clientSecretEnvVar string   Environment variable containing the client secret\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.clientSecretLocation string   File containing the client secret (default \"/etc/secrets/client_secret\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.command strings   Command for external authentication token generation\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.defaultServiceConfig string\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.deviceFlowConfig.pollInterval string   amount of time the device flow would poll the token endpoint if auth server doesn't return a polling interval. Okta and google IDP do return an interval' (default \"5s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.deviceFlowConfig.refreshTime string   grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.deviceFlowConfig.timeout string   amount of time the device flow should complete or else it will be cancelled. (default \"10m0s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.endpoint string   For admin types,  specify where the uri of the service is located.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.httpProxyURL string   OPTIONAL: HTTP Proxy to be used for OAuth requests.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.insecure   Use insecure connection.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.insecureSkipVerify   InsecureSkipVerify controls whether a client verifies the server's certificate chain and host name. Caution : shouldn't be use for production usecases'\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.maxBackoffDelay string   Max delay for grpc backoff (default \"8s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.maxMessageSizeBytes int   The max size in bytes for incoming gRPC messages\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.maxRetries int   Max number of gRPC retries (default 4)\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.perRetryTimeout string   gRPC per retry timeout (default \"15s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.pkceConfig.refreshTime string   grace period from the token expiry after which it would refresh the token. (default \"5m0s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.pkceConfig.timeout string   Amount of time the browser session would be active for authentication from client app. (default \"2m0s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.proxyCommand strings   Command for external proxy-authorization token generation\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.scopes strings   List of scopes to request\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.tokenRefreshWindow string   Max duration between token refresh attempt and token expiry. (default \"0s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.tokenUrl string   OPTIONAL: Your IdP's token endpoint. It'll be discovered from flyte admin's OAuth Metadata endpoint if not provided.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.useAudienceFromAdmin   Use Audience configured from admins public endpoint config.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--admin.useAuth   Deprecated: Auth will be enabled/disabled based on admin's dynamically discovered information.\n```\n\nLANGUAGE: shell\nCODE:\n```\n-c, --config string   config file (default is $HOME/.flyte/config.yaml)\n```\n\nLANGUAGE: shell\nCODE:\n```\n--console.endpoint string   Endpoint of console,  if different than flyte admin\n```\n\nLANGUAGE: shell\nCODE:\n```\n-d, --domain string   Specifies the Flyte project's domain.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.archive   Pass in archive file either an http link or local path.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.assumableIamRole string   Custom assumable iam auth role to register launch plans with.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.continueOnError   Continue on error when registering files.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.destinationDirectory string   Location of source code in container.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.dryRun   Execute command without making any modifications.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.enableSchedule   Enable the schedule if the files contain schedulable launchplan.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.force   Force use of version number on entities registered with flyte.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.k8ServiceAccount string   Deprecated. Please use --K8sServiceAccount\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.k8sServiceAccount string   Custom kubernetes service account auth role to register launch plans with.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.outputLocationPrefix string   Custom output location prefix for offloaded types (files/schemas).\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.sourceUploadPath string   Deprecated: Update flyte admin to avoid having to configure storage access from flytectl.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--files.version string   Version of the entity to be registered with flyte which are un-versioned after serialization.\n```\n\nLANGUAGE: shell\nCODE:\n```\n-i, --interactive   Set this flag to use an interactive CLI\n```\n\nLANGUAGE: shell\nCODE:\n```\n--logger.formatter.type string   Sets logging format type. (default \"json\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--logger.level int   Sets the minimum logging level. (default 3)\n```\n\nLANGUAGE: shell\nCODE:\n```\n--logger.mute   Mutes all logs regardless of severity. Intended for benchmarks/tests only.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--logger.show-source   Includes source code location in logs.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--otel.file.filename string   Filename to store exported telemetry traces (default \"/tmp/trace.txt\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--otel.jaeger.endpoint string   Endpoint for the jaeger telemetry trace ingestor (default \"http://localhost:14268/api/traces\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--otel.otlpgrpc.endpoint string   Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4317\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--otel.otlphttp.endpoint string   Endpoint for the OTLP telemetry trace collector (default \"http://localhost:4318/v1/traces\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--otel.sampler.parentSampler string   Sets the parent sampler to use for the tracer (default \"always\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--otel.type string   Sets the type of exporter to configure [noop/file/jaeger/otlpgrpc/otlphttp]. (default \"noop\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n-o, --output string   Specifies the output type - supported formats [TABLE JSON YAML DOT DOTURL]. NOTE: dot, doturl are only supported for Workflow (default \"TABLE\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n-p, --project string   Specifies the Flyte project.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.cache.max_size_mbs int   Maximum size of the cache where the Blob store data is cached in-memory. If not specified or set to 0,  cache is not used\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.cache.target_gc_percent int   Sets the garbage collection target percentage.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.connection.access-key string   Access key to use. Only required when authtype is set to accesskey.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.connection.auth-type string   Auth Type to use [iam, accesskey]. (default \"iam\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.connection.disable-ssl   Disables SSL connection. Should only be used for development.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.connection.endpoint string   URL for storage client to connect to.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.connection.region string   Region to connect to. (default \"us-east-1\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.connection.secret-key string   Secret to use when accesskey is set.\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.container string   Initial container (in s3 a bucket) to create -if it doesn't exist-.'\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.defaultHttpClient.timeout string   Sets time out on the http client. (default \"0s\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.enable-multicontainer   If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.limits.maxDownloadMBs int   Maximum allowed download size (in MBs) per call. (default 2)\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.stow.config stringToString   Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.stow.kind string   Kind of Stow backend to use. Refer to github/flyteorg/stow\n```\n\nLANGUAGE: shell\nCODE:\n```\n--storage.type string   Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Default Values for Resource int64Amount Parameters\nDESCRIPTION: Default values for the resource.int64Amount configuration showing value \"1\" and scale \"0\".\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_110\n\nLANGUAGE: yaml\nCODE:\n```\n\"1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\n\"0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure in Sphinx/RST\nDESCRIPTION: A toctree directive that defines the structure and organization of the development lifecycle documentation. It includes hidden navigation links to various development-related topics like caching, decks, failure nodes, and migration guides.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: -1\n:name: development_lifecycle_toc\n:hidden:\n\nprivate_images\ncaching\ncache_serializing\ndecks\nfailure_node\ncreating_a_new_project\nrunning_tasks\nrunning_workflows\nrunning_launch_plans\ninspecting_executions\ndebugging_executions\nmigrating_from_airflow_to_flyte\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for Python Classes and Functions using Jinja2\nDESCRIPTION: This template generates Sphinx documentation for Python classes and functions. For classes, it includes sections for methods and attributes. The template uses Jinja2 syntax to conditionally render different parts of the documentation based on the object type and available information.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/_templates/custom.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n{% if objtype == 'class' %}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   {% if methods %}\n\n   .. rubric:: {{ _('Methods') }}\n   {% for item in methods %}\n\n   {% if item != '__init__' %}\n   .. automethod:: {{ item }}\n   {% endif %}\n\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n\n   .. rubric:: {{ _('Attributes') }}\n   {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n      :noindex:\n   {%- endfor %}\n\n   {% endif %}\n   {% endblock %}\n\n\n{% endif %}\n\n{% if objtype == 'function' %}\n\n.. autofunction:: {{ objname }}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Helm Chart Values (YAML)\nDESCRIPTION: Example of updating the Flyte Helm chart values file structure for migration from the 'flyte' chart to 'flyte-core'. This shows how to nest certain configurations under the 'flyte:' key.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.18.2.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflyte:\n  configmaps:\n    ...\n  flyteadmin:\n    ...\nminio:\n  ...\ncontour:\n  ...\n```\n\n----------------------------------------\n\nTITLE: BigQuery and Google Configuration\nDESCRIPTION: Configuration settings for BigQuery and Google token source authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\ndefault\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nremoteClusterConfig:\n  auth:\n    caCertPath: \"\"\n    tokenPath: \"\"\n  enabled: false\n  endpoint: \"\"\n  name: \"\"\n\n```\n\n----------------------------------------\n\nTITLE: Attempting to Archive Launch Plan with flytectl (Unsupported)\nDESCRIPTION: This command attempts to archive a launch plan, which is not supported and will result in an error.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan-meta.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update launchplan-meta -p flytesnacks -d development  core.advanced.merge_sort.merge_sort --archive\n```\n\n----------------------------------------\n\nTITLE: Default Qubole Endpoint Configuration in YAML\nDESCRIPTION: Default endpoint URL for Qubole service.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_78\n\nLANGUAGE: yaml\nCODE:\n```\nhttps://wellness.qubole.com\n```\n\n----------------------------------------\n\nTITLE: Importing Flyte Dependencies for Pickle Type Example\nDESCRIPTION: This snippet shows the necessary import statement for the pickle type example in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/data_types_and_io/pickle_type.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import task, workflow\n```\n\n----------------------------------------\n\nTITLE: Configuring Task with Multi-instance GPU (MIG) Accelerator in Flyte\nDESCRIPTION: Example showing how to request an A100 GPU with no specific partition size preference. This uses the Multi-instance GPU feature to allow flexible allocation of GPU resources.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.10.6.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit.extras.accelerators import A100\n\n\n@task(\n    limits=Resources(gpu=\"1\"),\n    accelerator=A100,\n)\ndef my_task() -> None:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Co-Pilot Settings in YAML\nDESCRIPTION: This snippet defines default configuration values for the Flyte Co-Pilot, including container name, image, input/output paths, and resource allocations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_102\n\nLANGUAGE: yaml\nCODE:\n```\ncpu: 500m\ndefault-input-path: /var/flyte/inputs\ndefault-output-path: /var/flyte/outputs\nimage: cr.flyte.org/flyteorg/flytecopilot:v0.0.15\ninput-vol-name: flyte-inputs\nmemory: 128Mi\nname: flyte-copilot-\noutput-vol-name: flyte-outputs\nstart-timeout: 1m40s\nstorage: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Literal Offloading in YAML\nDESCRIPTION: YAML configuration structure for literal offloading settings including SDK version support, size thresholds, and basic enablement flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5103-offloaded-literal.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype LiteralOffloadingConfig struct {\n  Enabled bool\n  // Maps flytekit SDK to minimum supported version that can handle reading offloaded literals.\n  SupportedSDKVersions map[string]string\n  // Default, 10Mbs. Determines the size of a literal at which to trigger offloading\n  MinSizeInMBForOffloading uint64\n  // Fail fast threshold\n  MaxSizeInMBForOffloading uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Documentation TOC in Markdown\nDESCRIPTION: Table of contents tree for the generated configuration documentation, listing the configuration files for each Flyte component. Uses Markdown toctree directive to organize documentation structure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:maxdepth: 1\n:caption: Generated Configuration Documentation\n:name: generatedconfigdoctoc\n:hidden:\n\ndatacatalog_config\nflyteadmin_config\nflytepropeller_config\nscheduler_config\n```\n\n----------------------------------------\n\nTITLE: Default Scheduler Name Configuration in YAML\nDESCRIPTION: Default empty string value for the Kubernetes scheduler name.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_99\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage CLI Options in Flyte\nDESCRIPTION: Command line flags for configuring storage settings in Flyte. Includes options for storage type, container configuration, HTTP client timeout, download limits, and Stow backend settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-queue-attribute.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--storage.container string                     Initial container (in s3 a bucket) to create -if it doesn't exist-.\n--storage.defaultHttpClient.timeout string     Sets time out on the http client. (default \"0s\")\n--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\n--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Setting profiler-port for DataCatalog in YAML\nDESCRIPTION: Specifies the port on which the profiling service is listening. The default value is 10254.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"10254\"\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource Deletion Behavior in YAML\nDESCRIPTION: This configuration determines whether Kubernetes resources should be deleted upon successful pod execution or left for the garbage collector.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_103\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents for Flytectl Nouns\nDESCRIPTION: RST markup defining the table of contents structure for Flytectl noun documentation, listing all available resource types that can be managed through the CLI.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/nouns.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Nouns\n\n    project\n    execution\n    workflow\n    task\n    task-resource-attribute\n    cluster-resource-attribute\n    execution-cluster-label\n    execution-queue-attribute\n    plugin-override\n    launchplan\n    workflow-execution-config\n    examples\n    files\n    config\n    sandbox\n    demo\n```\n\n----------------------------------------\n\nTITLE: Setting metrics-scope for DataCatalog in YAML\nDESCRIPTION: Defines the scope under which metrics will be recorded. The default value is 'datacatalog'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndatacatalog\n```\n\n----------------------------------------\n\nTITLE: Flyte User Guide Note Block in Markdown\nDESCRIPTION: A Markdown note block directing users to the contribution guide for updating examples.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{note}\nWant to contribute or update an example? Check out the {ref}`Contribution Guide <contribute_docs>`.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Connection in YAML\nDESCRIPTION: Sets the default storage connection configuration, including authentication type, region, and SSL settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\naccess-key: \"\"\nauth-type: iam\ndisable-ssl: false\nendpoint: \"\"\nregion: us-east-1\nsecret-key: \"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Checklist for Pull Request Requirements in Markdown\nDESCRIPTION: A markdown checklist for verifying that all requirements for the pull request have been met. It includes items for code completion, testing, documentation, and issue association.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/pull_request_template/pull_request_template.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n - [ ] Code completed\n - [ ] Smoke tested\n - [ ] Unit tests added\n - [ ] Code documentation added\n - [ ] Any pending items have an associated Issue\n```\n\n----------------------------------------\n\nTITLE: Pagination Enums Definition\nDESCRIPTION: Enumeration definitions for pagination sorting options including sort keys and sort order values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nenum SortKey {\n  CREATION_TIME = 0;\n}\n\nenum SortOrder {\n  DESCENDING = 0;\n  ASCENDING = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Age Configuration\nDESCRIPTION: Sets the maximum age for cached entries.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n0s\n```\n\n----------------------------------------\n\nTITLE: Configuring Stow Backend Storage\nDESCRIPTION: Provides configuration options for the Stow storage backend, allowing flexible storage backend selection and configuration\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--storage.stow.config stringToString\n```\n\nLANGUAGE: bash\nCODE:\n```\n--storage.stow.kind string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Resource Attribute with Workflow Specification\nDESCRIPTION: Fetch task resource attributes for a specific project, domain, and workflow using Flytectl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_task-resource-attribute.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get task-resource-attribute -p flytesnacks -d development core.control_flow.merge_sort.merge_sort\n```\n\n----------------------------------------\n\nTITLE: Flyte v1.3.0-b2 Release Notes Header\nDESCRIPTION: Markdown header for the Flyte v1.3.0-b2 changelog indicating major changes including demo sandbox and Helm charts updates.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0-b2.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v1.3.0-b2 Changelog\n\nNew demo sandbox environment\nNew Helm charts\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Kubernetes Cluster Endpoint in Flyte\nDESCRIPTION: Configures the API endpoint URL for the remote Kubernetes cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_139\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Verifying MUNGE Credential\nDESCRIPTION: Command to generate and verify a MUNGE credential, ensuring proper setup.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmunge -n | unmunge | grep STATUS\n```\n\n----------------------------------------\n\nTITLE: Default Qubole Token Key Configuration in YAML\nDESCRIPTION: Default name of the key (FLYTE_QUBOLE_CLIENT_TOKEN) where to find the Qubole token in the secret manager.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_81\n\nLANGUAGE: yaml\nCODE:\n```\nFLYTE_QUBOLE_CLIENT_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Stow in YAML\nDESCRIPTION: Sets an empty default configuration for the Stow storage backend.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Data in YAML for Flyte Agent\nDESCRIPTION: This YAML snippet shows the default configuration for the agentSecret.secretData field. It defines a simple structure with a 'data' object containing a 'username' field.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyteagent/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nagentSecret:\n  secretData:\n    data:\n      username: \"User\"\n```\n\n----------------------------------------\n\nTITLE: Ray Default Configuration\nDESCRIPTION: Default configuration for Ray head and worker nodes, including IP address and usage stats settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_156\n\nLANGUAGE: yaml\nCODE:\n```\nheadNode:\n  ipAddress: $MY_POD_IP\n  startParameters:\n    disable-usage-stats: \"true\"\nworkerNode:\n  ipAddress: $MY_POD_IP\n  startParameters:\n    disable-usage-stats: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Local Flyte Sandbox Configuration\nDESCRIPTION: YAML configuration for connecting to a local Flyte sandbox environment\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/overview.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///localhost:30081\n  insecure: true\n  authType: Pkce\n```\n\n----------------------------------------\n\nTITLE: Default Workers Configuration in YAML\nDESCRIPTION: Default number of concurrent workers (10) to start processing the queue.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_74\n\nLANGUAGE: yaml\nCODE:\n```\n\"10\"\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Authentication Certificate Path in Flyte\nDESCRIPTION: Configures the file path to the authentication certificate for Kubernetes cluster access.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_144\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Note\nDESCRIPTION: Release note header indicating version v0.17.3-b1 with brief description of deployment.yaml changes\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.17.3-b1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v0.17.3-b1\n\nJust picking up some minor changes around the admin `deployment.yaml` file\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Avatars in Markdown/HTML\nDESCRIPTION: This code snippet generates a grid of circular avatar images for project contributors. It uses the weserv.nl image service to fetch and mask GitHub avatars, linking each to the contributor's profile.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n[![953358](https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/953358?v=4&w=50&h=50&mask=circle)](https://github.com/katrogan)[![37090125](https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/37090125?v=4&w=50&h=50&mask=circle)](https://github.com/lyft-metaservice-3)[![7597118](https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/7597118?v=4&w=50&h=50&mask=circle)](https://github.com/matthewphsmith)\n```\n\n----------------------------------------\n\nTITLE: GPU Partition Tolerations Configuration\nDESCRIPTION: YAML showing the tolerations configuration for GPU partitioning. Includes tolerations for both the GPU accelerator type and partition size.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n  tolerations:\n  - effect: NoSchedule\n    key: nvidia.com/gpu.accelerator\n    operator: Equal\n    value: nvidia-tesla-a100\n  - effect: NoSchedule\n    key: nvidia.com/gpu.partition-size\n    operator: Equal\n    value: 2g.10gb\n```\n\n----------------------------------------\n\nTITLE: Working Group Charter Requirements Checklist\nDESCRIPTION: Markdown checklist outlining the requirements and steps for creating and submitting a Working Group (WG) charter.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/0007-community-groups.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Define and submit a charter including:\n    - [ ] The problem this WG is trying to solve\n    - [ ] The artifact(s) it will deliver\n    - [ ] The SIG(s) it will collaborate with\n    - [ ] Repo ownership (if any)\n- [ ] Roles\n    - [ ] Lead(s)\n        - [ ] Should be at least \"Community member\" as defined in [GOVERNANCE]\n        - [ ] Must coordinate project updates to the wider community.\n- [ ] Submit a PR to [/community] with the charter and request reviews from [Technical Steering Committee] Members\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Array Configuration\nDESCRIPTION: Defines settings for Kubernetes array jobs including error and output assemblers, logging configuration, and resource limits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nErrorAssembler:\n  maxItems: 100000\n  maxRetries: 5\n  workers: 10\nOutputAssembler:\n  maxItems: 100000\n  maxRetries: 5\n  workers: 10\nlogs:\n  config:\n    cloudwatch-enabled: false\n    cloudwatch-log-group: \"\"\n    cloudwatch-region: \"\"\n    cloudwatch-template-uri: \"\"\n    dynamic-log-links: null\n    gcp-project: \"\"\n    kubernetes-enabled: true\n    kubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName }}/pod?namespace={{ .namespace }}\n    kubernetes-url: \"\"\n    stackdriver-enabled: false\n    stackdriver-logresourcename: \"\"\n    stackdriver-template-uri: \"\"\n    templates: null\nmaxArrayJobSize: 5000\nmaxErrorLength: 1000\nnamespaceTemplate: \"\"\nnode-selector: null\nremoteClusterConfig:\n  auth:\n    certPath: \"\"\n    tokenPath: \"\"\n    type: \"\"\n  enabled: false\n  endpoint: \"\"\n  name: \"\"\nresourceConfig:\n  limit: 0\n  primaryLabel: \"\"\nscheduler: \"\"\ntolerations: null\n```\n\n----------------------------------------\n\nTITLE: Default Region Configuration\nDESCRIPTION: Default AWS region setting for storage connections.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nus-east-1\n```\n\n----------------------------------------\n\nTITLE: Haskell Algebraic Data Type Implementation\nDESCRIPTION: Shows Haskell's implementation of algebraic data types with symbolic tags, demonstrating tag uniqueness requirements and type handling.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/core language/sum-types-2.md#2025-04-16_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ndata Test = Hello Int | World String\n\n-- Runtime value carries tag, can be introspected\ncase x of\n  Hello a -> \"Found int: \" ++ show a\n  World b -> \"Found string: \" ++ show b\n\n-- Duplicates are a compile-time error\ndata Test1 = Hello | Hello\n{-|\ntest.hs:1:21: error:\n  Multiple declarations of 'Hello'\n  Declared at: test.hs:1:13\n               test.hs:1:21\n-}\n\n-- Duplicate types are allowed\ndata Test2 = Left Int | Right Int\ncase x of\n  Left a -> \"Found int: \" ++ show a\n  Right b -> \"Found a different int: \" ++ show b\n```\n\n----------------------------------------\n\nTITLE: Options for flytectl update workflow-meta Command\nDESCRIPTION: This lists the available options for the 'flytectl update workflow-meta' command, including flags for activating, archiving, setting description, dry run, and force update.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_workflow-meta.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n    --activate             activate the named entity.\n    --archive              archive named entity.\n    --description string   description of the named entity.\n    --dryRun               execute command without making any modifications.\n    --force                do not ask for an acknowledgement during updates.\n-h, --help                 help for workflow-meta\n```\n\n----------------------------------------\n\nTITLE: Generating Python Dependency Requirements for Flyte Documentation\nDESCRIPTION: Command used to generate the requirements file using uv (Python package management tool). The command compiles docs-requirements.in into docs-requirements.txt with exact version pinning for reproducible builds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/docs-requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv pip compile docs-requirements.in -o docs-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Advanced Composition in Markdown\nDESCRIPTION: This code snippet creates a hidden table of contents using Markdown syntax. It lists various advanced topics in Flyte composition, such as conditionals, chaining entities, subworkflows, and dynamic workflows.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: -1\n:name: advanced_composition_toc\n:hidden:\n\nconditionals\nchaining_flyte_entities\nsubworkflows\ndynamic_workflows\nmap_tasks\nnested_parallelization\neager_workflows\ndecorating_tasks\ndecorating_workflows\nintratask_checkpoints\nwaiting_for_external_inputs\n```\n```\n\n----------------------------------------\n\nTITLE: Custom GPU Resource Name Configuration in Flyte-Core\nDESCRIPTION: YAML configuration for flyte-core Helm chart to customize the GPU resource name. Used when your GPU accelerators expose a resource name different from the default 'nvidia.com/gpu'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_access_to_gpus.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfigmap:\n  k8s:\n    plugins:\n      k8s:\n        gpu-resource-name: <YOUR_GPU_RESOURCE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Running Flyte CoPilot in Sidecar Mode\nDESCRIPTION: Command to run Flyte CoPilot in Sidecar mode, which monitors the main container process, waits for its completion, and copies generated data to remote storage. This runs in parallel with the main container.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytecopilot/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flyte-copilot sidecar\n```\n\n----------------------------------------\n\nTITLE: Configuring Databricks Instance in Flyte\nDESCRIPTION: Sets the Databricks workspace instance name for Flyte to connect to.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_124\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Options in Flytectl CLI\nDESCRIPTION: These command line options allow users to specify the storage type and Stow backend kind for Flytectl. The storage type can be set to s3, minio, local, mem, or stow, with s3 as the default. The Stow backend kind can be specified for advanced storage configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Setting Databricks Endpoint in Flyte\nDESCRIPTION: Configures the Databricks API endpoint for Flyte to connect to.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_126\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Component Versions in Markdown\nDESCRIPTION: This code snippet lists the version changes for different components of Flyte, including Admin, Propeller, and Console. It shows the version ranges for each component that are included in this release.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.19.3.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAdmin v0.6.92 to v0.6.112\nPropeller v0.16.19 to v0.16.32\nConsole v0.41.0 to v0.43.0\n```\n\n----------------------------------------\n\nTITLE: Setting Vault KV Version in YAML\nDESCRIPTION: Configures the Key-Value version for HashiCorp Vault integration, set to version 2 by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_220\n\nLANGUAGE: yaml\nCODE:\n```\n\"2\"\n```\n\n----------------------------------------\n\nTITLE: Building Flyte Documentation\nDESCRIPTION: Executes the make command to build the documentation. Output HTML files are generated in the docs/_build/html directory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make docs\n```\n\n----------------------------------------\n\nTITLE: Setting storage-prefix for DataCatalog in YAML\nDESCRIPTION: Specifies the prefix where DataCatalog stores offloaded ArtifactData in CloudStorage. The default value is 'metadata'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata\n```\n\n----------------------------------------\n\nTITLE: Flytectl Delete Plugin Override Usage\nDESCRIPTION: This snippet shows the basic usage of the `flytectl delete plugin-override` command.  It highlights that flags are used to configure the deletion operation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl delete plugin-override [flags]\"\n```\n\n----------------------------------------\n\nTITLE: Listing Platform Changes in Flyte v0.17.2\nDESCRIPTION: This snippet outlines the platform-related changes in Flyte v0.17.2. It includes the addition of default buckets in sandbox helm, a fix for the helm chart propeller config regarding logs URL updates, and the introduction of cluster-admin read-only roles for the Kubernetes dashboard.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.17.2.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v0.17.2\n\n## Platform\n- Added default buckets in sandbox helm\n- Fixed bug in helm chart propeller config. logs url will not update correctly \n- Added cluster-admin read only roles for kubernetes dashboard\n```\n\n----------------------------------------\n\nTITLE: Converting datetime.timedelta to Duration in Python\nDESCRIPTION: This example demonstrates how to convert a Python datetime.timedelta object to a Duration object using the FromTimedelta method. It shows the conversion of days and minutes to the Duration format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntd = datetime.timedelta(days=3, minutes=10)\nduration = Duration()\nduration.FromTimedelta(td)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Error Length for Kubernetes Arrays in Flyte\nDESCRIPTION: Determines the maximum length of error strings returned for array jobs in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_128\n\nLANGUAGE: yaml\nCODE:\n```\n\"1000\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flytectl on Other Operating Systems\nDESCRIPTION: Commands for installing and upgrading Flytectl on non-OSX systems using curl\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/overview.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://ctl.flyte.org/install | bash\n\nflytectl upgrade\n```\n\n----------------------------------------\n\nTITLE: Default Environment Variables From Environment Configuration in YAML\nDESCRIPTION: Default null value for environment variables sourced from the environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_91\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Limits in YAML\nDESCRIPTION: Defines the CPU and memory limits for Kubernetes resources.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_215\n\nLANGUAGE: yaml\nCODE:\n```\ncpu: 200m\nmemory: 500Mi\n```\n\n----------------------------------------\n\nTITLE: Flyte v0.3.0 Release Notes Documentation\nDESCRIPTION: Markdown formatted changelog detailing the improvements and new features across different components of Flyte platform in version 0.3.0\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.3.0.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte V0.3.0\n\n## Changes since v0.2.0\n\n### Core Platform\n- Improved differentiation of System and User errors with Deeper visibility\n- Support for Presto queries (no-op client to be replaced with custom client)\n- Support for optional interruptible Task executions - on Spot Like environments\n- Better backoff behavior on Kubernetes resource creation failures\n- Publish notifications to GCP pubsub\n- Improved filtering logic in Service Layer\n- Configurable Scheduler for K8s pod executions\n- Spark Operator webhook support\n- Performance improvements\n- [Experimental] Inclusion of an EKS archetype with Terraform files to make it easy to deploy and test in a cloud\n\n\n### Flytekit (SDK improvements)\n- Dynamic Subworkflow and Launch Plan support\n- Inclusion of queuing budget and interruptible flag in workflow and task decorators\n- Ability to call non-Python based Spark jobs\n\n### Flyte Console (UI)\n- Added support for a custom banner to show live status messages\n- Tweaks in execution list page\n```\n\n----------------------------------------\n\nTITLE: Release Changelog in Markdown\nDESCRIPTION: Markdown formatted changelog entry describing helm chart modifications for cluster resource sync deployment changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.19.2-b4.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# 0.19.2-b4 Release ChangeLog\n\n## System\n1. Additions to flyte-core helm chart to allow deploying cluster resource sync as a standalone process with the latest image version.\n```\n\n----------------------------------------\n\nTITLE: WebAPI Plugin Configuration for Connector\nDESCRIPTION: Default configuration for the WebAPI plugin including caching settings, rate limiters, and resource quotas.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_111\n\nLANGUAGE: yaml\nCODE:\n```\ncaching:\n  maxSystemFailures: 5\n  resyncInterval: 30s\n  size: 500000\n  workers: 10\nreadRateLimiter:\n  burst: 100\n  qps: 10\nresourceMeta: null\nresourceQuotas:\n  default: 1000\nwriteRateLimiter:\n  burst: 100\n  qps: 10\n```\n\n----------------------------------------\n\nTITLE: Updated Literal Message Protocol Definition\nDESCRIPTION: Protobuf message definition for the updated Literal type that includes new fields for offloading support: uri for offload location and size_bytes for literal size information.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5103-offloaded-literal.md#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Literal {\n    oneof value {\n        // A simple value.\n        Scalar scalar = 1;\n        // A collection of literals to allow nesting.\n        LiteralCollection collection = 2;\n        // A map of strings to literals.\n        LiteralMap map = 3;\n    }\n    ...\n    // ** new below this line **\n    // If this literal is offloaded, this field will contain metadata including the offload location.\n    string uri = 6;\n    // Includes information about the size of the literal.\n    uint64 size_bytes = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiteralMapBlob Fields\nDESCRIPTION: This segment outlines the fields in the LiteralMapBlob which represent input/output data that can be actual values or links to where values are stored.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: LiteralMapBlob type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"values\", \":ref:`ref_flyteidl.core.LiteralMap`\", \"\", \"**Deprecated.** Data in LiteralMap format\"\n   \"uri\", \":ref:`ref_string`\", \"\", \"In the event that the map is too large, we return a uri to the data\"\n```\n\n----------------------------------------\n\nTITLE: Including Docker Build Configuration in Makefile\nDESCRIPTION: Configuration snippet showing how to set up repository name and include the Docker build Makefile from the Flyte boilerplate. Enables docker_build and dockerhub_push make targets.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/docker_build/Readme.rst#2025-04-16_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nREPOSITORY=<myreponame>\ninclude boilerplate/flyte/docker_build/Makefile\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Signed URL in YAML\nDESCRIPTION: Sets an empty default configuration for signed URL generation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Generating CloudEvent JSON with Schema URL for Flyte Workflow Execution\nDESCRIPTION: This JSON snippet demonstrates the structure of a CloudEvent message for a Flyte workflow execution. It includes the schema URL, which points to the JSON Schema file used for validating the event data.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/jsonschema/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"specversion\" : \"1.0\",\n    \"type\" : \"com.flyte.resource.workflow\",\n    \"source\" : \"https://github.com/flyteorg/flyteadmin\",\n    \"id\" : \"D234-1234-1234\",\n    \"time\" : \"2018-04-05T17:31:00Z\",\n    \"jsonschemaurl\": \"https://github.com/flyteorg/flyteidl/blob/master/jsonschema/workflow_execution.json\",\n    \"data\" : \"workflow execution event\"\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Custom Resource Output Example\nDESCRIPTION: Example output showing a workflow custom resource listing with name and age.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/component_architecture/flytepropeller_architecture.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNAME                   AGE\nf7616dc75400f43e6920   3h42m\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP Endpoint for OpenTelemetry\nDESCRIPTION: Default endpoint configuration for the OTLP telemetry trace collector using HTTP protocol.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nhttp://localhost:4318/v1/traces\n```\n\n----------------------------------------\n\nTITLE: Installing pflags on POSIX Systems\nDESCRIPTION: Shell command to download and install the pflags tool on POSIX-compatible systems using a downloaded installation script.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytestdlib/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sfL https://raw.githubusercontent.com/flyteorg/flytestdlib/godownloader/godownloader.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Flytectl Stow Backend Configuration\nDESCRIPTION: These flags configure the stow backend used by flytectl. They allow setting the configuration and kind of stow backend.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_5\n\nLANGUAGE: TEXT\nCODE:\n```\n\"--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\"\n\n```\n\nLANGUAGE: TEXT\nCODE:\n```\n\"--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Sandbox Deployment\nDESCRIPTION: Command to restart the Flyte sandbox deployment after configuration changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sensor.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyte-sandbox -n flyte\n```\n\n----------------------------------------\n\nTITLE: Retrieve projects with limit and sorting\nDESCRIPTION: This command retrieves projects with a specified limit and sorting order. It uses the `--filter.sortBy`, `--filter.limit`, and `--filter.asc` flags to control the sorting, limit, and ascending/descending order.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project --filter.sortBy=created_at --filter.limit=1 --filter.asc\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText List Table Definition\nDESCRIPTION: Creates a formatted table listing available Web API plugins and their descriptions.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/index.md#2025-04-16_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`Snowflake Plugin <deployment-plugin-setup-webapi-snowflake>`\n  - Guide to setting up the Snowflake plugin.\n* - {ref}`Databricks Plugin <deployment-plugin-setup-webapi-databricks>`\n  - Guide to setting up the Databricks plugin.\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Server Command\nDESCRIPTION: NPM command to launch Storybook for component development and testing\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/control_plane/console.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Setting heartbeat-grace-period-multiplier for DataCatalog in YAML\nDESCRIPTION: Defines the number of heartbeats before a reservation expires without an extension. The default value is 3.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n\"3\"\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Namespace Template in Flyte\nDESCRIPTION: Configures the template for namespace creation in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_134\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: S3 Output URI Example\nDESCRIPTION: Example of an S3 output URI path for execution results in the node closure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/development_lifecycle/inspecting_executions.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"outputUri\": \"s3://my-s3-bucket/metadata/propeller/flytesnacks-development-<execid>/n0/data/0/outputs.pb\"\n```\n\n----------------------------------------\n\nTITLE: Qubole Configuration\nDESCRIPTION: Settings for Qubole integration including cluster configurations, API endpoints and token management.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzeLinkPath: /v2/analyze\nclusterConfigs:\n- labels:\n  - default\n  limit: 100\n  namespaceScopeQuotaProportionCap: 0.7\n  primaryLabel: default\n  projectScopeQuotaProportionCap: 0.7\ncommandApiPath: /api/v1.2/commands/\ndefaultClusterLabel: default\ndestinationClusterConfigs: []\nendpoint: https://wellness.qubole.com\nlruCacheSize: 2000\nquboleTokenKey: FLYTE_QUBOLE_CLIENT_TOKEN\nworkers: 15\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Default Values\nDESCRIPTION: Default configuration values for Redis connection settings including host paths, primary name, and retry options.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_170\n\nLANGUAGE: yaml\nCODE:\n```\nhostKey: \"\"\nhostPath: \"\"\nhostPaths: []\nmaxRetries: 0\nprimaryName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Default Enabled Flag Configuration in YAML\nDESCRIPTION: Default boolean value (false) for enabling or disabling a feature.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Setting grpcMaxRecvMsgSizeMBs in YAML\nDESCRIPTION: Configures the maximum receive message size for gRPC. If unset, it defaults to the gRPC server default value. The default value is 0.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"0\"\n```\n\n----------------------------------------\n\nTITLE: Using flytectl CLI Commands\nDESCRIPTION: Examples of new flytectl commands for starting a local sandbox and generating workflow visualizations\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.15.0.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl sandbox start\n```\n\nLANGUAGE: bash\nCODE:\n```\nflytectl get workflow .... -o dot\n```\n\n----------------------------------------\n\nTITLE: Documenting Flyte v0.15.1 Platform Update in Markdown\nDESCRIPTION: This markdown snippet outlines the changes made in Flyte version 0.15.1, specifically mentioning an update to the helm chart to include missing ingress paths for the platform.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.15.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v0.15.1\n\n## Platform\n- Updated helm chart to include missing ingress paths\n```\n\n----------------------------------------\n\nTITLE: Go MessagePack Implementation\nDESCRIPTION: Golang implementation showing MessagePack encoding and decoding using the shamaton/msgpack library.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/shamaton/msgpack/v2\"\n)\n\nfunc main() {\n    // Example data to encode\n    data := map[string]int{\"a\": 1}\n\n    // Encode the data\n    encodedData, err := msgpack.Marshal(data)\n    if err != nil {\n        panic(err)\n    }\n\n    // Print the encoded data\n    fmt.Printf(\"Encoded data: %x\\n\", encodedData)\n\n    // Decode the data\n    var decodedData map[string]int\n    err = msgpack.Unmarshal(encodedData, &decodedData)\n    if err != nil {\n        panic(err)\n    }\n\n    // Print the decoded data\n    fmt.Printf(\"Decoded data: %+v\\n\", decodedData)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionTerminateRequest Fields\nDESCRIPTION: This section defines the fields for the ExecutionTerminateRequest message, specifying the identifier of the execution to terminate and an optional cause for the termination.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: ExecutionTerminateRequest type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"id\", \":ref:`ref_flyteidl.core.WorkflowExecutionIdentifier`\", \"\", \"Uniquely identifies the individual workflow execution to be terminated.\"\n   \"cause\", \":ref:`ref_string`\", \"\", \"Optional reason for aborting.\"\n```\n\n----------------------------------------\n\nTITLE: Datadog Integration Configuration with Helm\nDESCRIPTION: YAML configuration for integrating Flyte task logs with Datadog using Helm, enabling container log collection and using files for log collection.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  enabled: true\n  containerCollectAll: true\n  containerCollectUsingFiles: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Download Limits in YAML\nDESCRIPTION: Sets the default maximum download size limit to 2 MB.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nmaxDownloadMBs: 2\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Example in Markdown\nDESCRIPTION: Demonstrates the correct format for version numbers when releasing flyteidl, showing that versions must use semantic versioning format with a 'v' prefix.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/RELEASE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nv1.2.3\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from Java System.currentTimeMillis()\nDESCRIPTION: Creates a Timestamp object in Java using System.currentTimeMillis(), converting milliseconds to seconds and nanoseconds appropriately.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nlong millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n    .setNanos((int) ((millis % 1000) * 1000000)).build();\n```\n\n----------------------------------------\n\nTITLE: Hidden Table of Contents Configuration\nDESCRIPTION: A toctree directive that configures a hidden table of contents for the Flyte fundamentals documentation, listing all the subpages that make up this section of the documentation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: -1\n:hidden:\n\ntasks_workflows_and_launch_plans\nregistering_workflows\nrunning_and_scheduling_workflows\njupyter_notebook_interaction\nvisualizing_task_input_and_output\noptimizing_tasks\nextending_flyte\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Image Pull Policy\nDESCRIPTION: Specifies a Flyte demo image pull policy. Users need to set this to define how images are pulled from the registry.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --image docker.io/my-override:latest --imagePullPolicy Always\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText TOC Tree Definition\nDESCRIPTION: Defines the table of contents structure for Web API plugin documentation pages.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/index.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n:maxdepth: 1\n:name: Web API plugin setup\n:hidden:\n\nsnowflake\ndatabricks\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Demo Sandbox\nDESCRIPTION: Command to create a new Flyte sandbox cluster running in a Docker container\nSOURCE: https://github.com/flyteorg/flyte/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Configuring Hidden Table of Contents in Markdown\nDESCRIPTION: A toctree directive that sets up a hidden table of contents for the Flyte workflow development documentation, listing all relevant pages in the section.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: -1\n:hidden:\n\ninstalling_development_tools\ncreating_a_flyte_project\nflyte_project_components\nrunning_a_workflow_locally\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown RFC Directory Structure\nDESCRIPTION: Defines the three main directories for storing different types of RFCs in the Flyte repository, including Core language, General System, and CI-CD changes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Core language:** Proposals to `FlyteIdl` that change the wire-format\\n- **General System:** Changes to other repos that introduce significant changes\\n- **CI-CD:** Significant changes to CI-CD System\n```\n\n----------------------------------------\n\nTITLE: Hidden TOC Tree Configuration in Markdown\nDESCRIPTION: This snippet configures a hidden table of contents (toctree) in the documentation that links to a 'mocking_tasks' page. It uses Sphinx configuration options to set the maximum depth to -1 and assigns a name 'testing_toc' to the toctree.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/testing/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: -1\n:name: testing_toc\n:hidden:\n\nmocking_tasks\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Client Secret Environment Variable in YAML\nDESCRIPTION: Sets the default environment variable name for the client secret to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Default Certificate Path Configuration in YAML\nDESCRIPTION: Default empty string value for the certificate path in Kubernetes authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Default Interruptible Node Selector Configuration in YAML\nDESCRIPTION: Default null value for node selectors used for interruptible pods.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_101\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Requirements in YAML\nDESCRIPTION: Sets the CPU and memory resource requirements for Kubernetes components.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_214\n\nLANGUAGE: yaml\nCODE:\n```\nlimits:\n  cpu: 200m\n  memory: 500Mi\nrequests:\n  cpu: 200m\n  memory: 500Mi\n```\n\n----------------------------------------\n\nTITLE: Type Checking in FlytePropeller Compiler\nDESCRIPTION: Implementation of type compatibility checking in the FlytePropeller compiler. This code determines if one type can be cast to another, with special handling for struct types that use JSON schema metadata for compatibility checking.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (t trivialChecker) CastsFrom(upstreamType *flyte.LiteralType) bool {\n\tif upstreamType.GetEnumType() != nil {\n\t\tif t.literalType.GetSimple() == flyte.SimpleType_STRING {\n\t\t\treturn true\n\t\t}\n\t}\n\n    if t.literalType.GetEnumType() != nil {\n        if upstreamType.GetSimple() == flyte.SimpleType_STRING {\n            return true\n        }\n    }\n\n\tif GetTagForType(upstreamType) != \"\" && GetTagForType(t.literalType) != GetTagForType(upstreamType) {\n\t\treturn false\n\t}\n\n    // Here is the new way to check if dataclass/pydantic BaseModel are castable or not.\n    if upstreamTypeCopy.GetSimple() == flyte.SimpleType_STRUCT &&\\\n         downstreamTypeCopy.GetSimple() == flyte.SimpleType_STRUCT {\n        // Json Schema is stored in Metadata\n        upstreamMetadata := upstreamTypeCopy.GetMetadata()\n        downstreamMetadata := downstreamTypeCopy.GetMetadata()\n\n        // There's bug in flytekit's dataclass Transformer to generate JSON Scheam before,\n        // in some case, we the JSON Schema will be nil, so we can only pass it to support\n        // backward compatible. (reference task should be supported.)\n        if upstreamMetadata == nil || downstreamMetadata == nil {\n            return true\n        }\n\n        return isSameTypeInJSON(upstreamMetadata, downstreamMetadata) ||\\\n                 isSuperTypeInJSON(upstreamMetadata, downstreamMetadata)\n    }\n\n\tupstreamTypeCopy := *upstreamType\n\tdownstreamTypeCopy := *t.literalType\n\tupstreamTypeCopy.Structure = &flyte.TypeStructure{}\n\tdownstreamTypeCopy.Structure = &flyte.TypeStructure{}\n\tupstreamTypeCopy.Metadata = &structpb.Struct{}\n\tdownstreamTypeCopy.Metadata = &structpb.Struct{}\n\tupstreamTypeCopy.Annotation = &flyte.TypeAnnotation{}\n\tdownstreamTypeCopy.Annotation = &flyte.TypeAnnotation{}\n\treturn upstreamTypeCopy.String() == downstreamTypeCopy.String()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Linked Avatar Images using Go Templates\nDESCRIPTION: A Go template that iterates through a collection and generates HTML markup for circular avatar images. For each item with an ID, it creates an image element wrapped in a link, using weserv.nl to process the avatar URL into a 50x50 circular image.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/assets/contributor-template.md#2025-04-16_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{range .}}{{if not .ID}}{{else}}[![{{.ID}}](https://images.weserv.nl/?url={{.AvatarURL}}&w=50&h=50&mask=circle)]({{.HTMLURL}}){{end}}{{end}}\n```\n\n----------------------------------------\n\nTITLE: Pip Requirements List with Grafanalib Dependency\nDESCRIPTION: An auto-generated pip requirements file listing grafanalib and its dependency attrs with specific versions. Generated using pip-compile with Python 3.9 and backtracking resolver.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/stats/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.9\n# by the following command:\n#\n#    pip-compile --resolver=backtracking requirements.in\n#\nattrs==22.2.0\n    # via grafanalib\ngrafanalib==0.7.0\n    # via -r requirements.in\n```\n\n----------------------------------------\n\nTITLE: Flytectl Multi-Container Storage Option\nDESCRIPTION: Enables multi-container support, automatically opening connections to new containers/buckets as needed. Overrides the `--storage.container` argument.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution.rst#2025-04-16_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n      \"--storage.enable-multicontainer                If this is true,  then the container argument is overlooked and redundant. This config will automatically open new connections to new containers/buckets as they are encountered\"\n```\n\n----------------------------------------\n\nTITLE: Access Key Configuration\nDESCRIPTION: Default empty string configuration for storage access key used with accesskey authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL Exporter Type in YAML\nDESCRIPTION: Sets the default OpenTelemetry exporter type to 'noop'. Other options include file, jaeger, otlpgrpc, and otlphttp.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nnoop\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Dask Plugin\nDESCRIPTION: Default configuration for the Flyte Dask plugin. Includes log settings for CloudWatch, Kubernetes, and Stackdriver with various template URIs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nlogs:\n  cloudwatch-enabled: false\n  cloudwatch-log-group: \"\"\n  cloudwatch-region: \"\"\n  cloudwatch-template-uri: \"\"\n  dynamic-log-links: null\n  gcp-project: \"\"\n  kubernetes-enabled: true\n  kubernetes-template-uri: http://localhost:30082/#!/log/{{ .namespace }}/{{ .podName\n    }}/pod?namespace={{ .namespace }}\n  kubernetes-url: \"\"\n  stackdriver-enabled: false\n  stackdriver-logresourcename: \"\"\n  stackdriver-template-uri: \"\"\n  templates: null\n```\n\n----------------------------------------\n\nTITLE: FlyteTypeAnnotation Class Definition\nDESCRIPTION: Definition of a custom class to represent parsed metadata annotations\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1855-type-metadata.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FlyteTypeAnnotation:\n    def __init__(self, data: Dict[str, Any]):\n        self._data = data\n\n    @property\n    def data(self):\n        return self._data\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Flyte Basics Documentation\nDESCRIPTION: This code snippet sets up a table of contents for the Flyte basics documentation using the toctree directive in reStructuredText. It specifies various topics covered in the basics section, including hello world, tasks, workflows, launch plans, imperative workflows, documentation, shell tasks, and named outputs.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/basics/index.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:maxdepth: -1\n:name: basics_toc\n:hidden:\n\nhello_world\ntasks\nworkflows\nlaunch_plans\nimperative_workflows\ndocumenting_workflows\nshell_tasks\nnamed_outputs\n```\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from POSIX gettimeofday() in C++\nDESCRIPTION: Creates a Timestamp object using the POSIX gettimeofday() function, converting microseconds to nanoseconds by multiplying by 1000.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nstruct timeval tv;\ngettimeofday(&tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from Timestamp + Duration (Pseudocode)\nDESCRIPTION: Calculates a new Timestamp by adding a Duration to an existing Timestamp, handling nanosecond overflow/underflow correctly.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_13\n\nLANGUAGE: Pseudocode\nCODE:\n```\nTimestamp start = ...;\nDuration duration = ...;\nTimestamp end = ...;\n\nend.seconds = start.seconds + duration.seconds;\nend.nanos = start.nanos + duration.nanos;\n\nif (end.nanos < 0) {\n  end.seconds -= 1;\n  end.nanos += 1000000000;\n} else if (end.nanos >= 1000000000) {\n  end.seconds += 1;\n  end.nanos -= 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: FlytePropeller Manager Control Loop Implementation\nDESCRIPTION: Go pseudocode showing the control loop implementation for managing FlytePropeller replicas, including initialization and replica management logic.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1483-flytepropeller-horizontal-scaling.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ninitialize p (population size)\nwhile True:\n    replicas = fetch_current_state\n    if len(replicas) < p:\n        missing_replicas = find_missing_replica()\n        for r in missing_replicas:\n            start(r)\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Duration in YAML\nDESCRIPTION: Sets the sleep duration for testing purposes in Flyte configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_160\n\nLANGUAGE: yaml\nCODE:\n```\n0s\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Link Lifetime in YAML\nDESCRIPTION: YAML configuration example showing how to control when log links appear and disappear by setting hideOnceFinished and showWhilePending flags.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/configuring_logging_links_in_the_ui.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntask_logs:\n  plugins:\n    logs:\n      templates:\n        - displayName: <name-to-show>\n          hideOnceFinished: true\n          showWhilePending: true\n          templateUris:\n            - \"https://...\"\n```\n\n----------------------------------------\n\nTITLE: Literal Protobuf Definition with Hash Field\nDESCRIPTION: Extended Literal message definition in protobuf that adds a hash field for cache key calculation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md#2025-04-16_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Literal {\n    oneof value {\n        Scalar scalar = 1;\n        LiteralCollection collection = 2;\n        LiteralMap map = 3;\n    }\n    string hash = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Flytectl Verbs in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) in reStructuredText format, listing various Flytectl verb commands. It sets the maximum depth to 1 and provides a caption for the section.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/verbs.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n    :caption: Verbs\n \n    gen/flytectl_create\n    gen/flytectl_completion\n    gen/flytectl_get\n    gen/flytectl_update\n    gen/flytectl_delete\n    gen/flytectl_register\n    gen/flytectl_config\n    gen/flytectl_compile\n    gen/flytectl_sandbox\n    gen/flytectl_demo\n    gen/flytectl_version\n    gen/flytectl_upgrade\n```\n\n----------------------------------------\n\nTITLE: Kubeflow Operator Configuration\nDESCRIPTION: Configuration for the Kubeflow operator with timeout settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\ntimeout: 1m0s\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from Win32 GetSystemTimeAsFileTime() in C++\nDESCRIPTION: Creates a Timestamp object from Windows system time, accounting for the different epoch (Windows epoch is 1601-01-01T00:00:00Z which is 11644473600 seconds before Unix epoch).\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nFILETIME ft;\nGetSystemTimeAsFileTime(&ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n// A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n// is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n```\n\n----------------------------------------\n\nTITLE: Second Cache Call Measurement\nDESCRIPTION: Shows the second execution of the workflow using timeit, which should be faster due to cache hits.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_fundamentals/optimizing_tasks.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%timeit -n 1 -r 1 wf(data=[float(x) for x in range(100_000)])\n```\n\n----------------------------------------\n\nTITLE: Updating Documentation Dependencies\nDESCRIPTION: Command to update the documentation requirements file after modifying doc-requirements.in.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/contributing.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake doc-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Linking to GitHub Issues in Markdown\nDESCRIPTION: Examples of how to link to GitHub issues in the pull request description. It shows how to reference an issue that the pull request fixes and how to link to a follow-up issue if applicable.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/pull_request_template/pull_request_template.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfixes https://github.com/flyteorg/flyte/issues/<number>\n\n## Follow-up issue\n_NA_\nOR\n_https://github.com/flyteorg/flyte/issues/<number>_\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager in YAML\nDESCRIPTION: Sets configuration parameters for GCP Secret Manager integration, including sidecar image and resource requirements.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_211\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  limits:\n    cpu: 200m\n    memory: 500Mi\n  requests:\n    cpu: 200m\n    memory: 500Mi\nsidecarImage: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()` in C++\nDESCRIPTION: This code snippet shows how to generate a Timestamp from the Windows system time, converting it from file time to Unix time by adjusting for the epoch difference.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nFILETIME ft;\nGetSystemTimeAsFileTime(&ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Plugin Phase Versions in YAML\nDESCRIPTION: Configuration for the maximum number of plugin phase versions allowed for one phase.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_195\n\nLANGUAGE: yaml\nCODE:\n```\n\"100000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Download Size Limit\nDESCRIPTION: Configures the maximum allowed download size per call in megabytes, with a default limit of 2 MB\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_plugin-override.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n--storage.limits.maxDownloadMBs int\n```\n\n----------------------------------------\n\nTITLE: Flytectl Get Project Command\nDESCRIPTION: This command fetches a Flyte project using flytectl. It requires the flytectl CLI tool to be installed and configured to connect to a Flyte cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n flytectl get project\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Name Path\nDESCRIPTION: Example Docker registry paths showing where images will be pushed. Demonstrates the format for both main package and build stages cache.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/github_workflows/Readme.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1. docker.pkg.github.com/flyteorg/<repo>/<package_name>\n2. docker.pkg.github.com/flyteorg/<repo>/<package_name>-stages\n```\n\n----------------------------------------\n\nTITLE: Building and Registering Databricks Workflow\nDESCRIPTION: Commands for building the custom Docker image and registering the Flyte workflow\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.3.0-b5.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t pingsutw/databricks:test -f Dockerfile .\n```\n\nLANGUAGE: shell\nCODE:\n```\npyflyte --config ~/.flyte/config-sandbox.yaml register --destination-dir . --image pingsutw/databricks:test databricks.py\n```\n\n----------------------------------------\n\nTITLE: Flyte Version Update Note\nDESCRIPTION: Release note indicating the version number and change to Admin event version\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.17.3-b3.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v0.17.3-b3\n\nChange Admin event version to 2\n```\n\n----------------------------------------\n\nTITLE: Testing Remote Agent\nDESCRIPTION: Command to test the deployed agent by running a workflow remotely.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote agent_workflow.py agent_task\n```\n\n----------------------------------------\n\nTITLE: Computing Duration from Two Timestamps in Pseudocode\nDESCRIPTION: This snippet demonstrates how to calculate a Duration by finding the difference between two Timestamp objects. It includes handling of nanosecond precision and proper second/nanosecond adjustment when the signs differ.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/event/event.rst#2025-04-16_snippet_8\n\nLANGUAGE: pseudocode\nCODE:\n```\nTimestamp start = ...;\nTimestamp end = ...;\nDuration duration = ...;\n\nduration.seconds = end.seconds - start.seconds;\nduration.nanos = end.nanos - start.nanos;\n\nif (duration.seconds < 0 && duration.nanos > 0) {\n  duration.seconds += 1;\n  duration.nanos -= 1000000000;\n} else if (duration.seconds > 0 && duration.nanos < 0) {\n  duration.seconds -= 1;\n  duration.nanos += 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Reservation Extension Heartbeat Interval in YAML\nDESCRIPTION: Sets the maximum available reservation extension heartbeat interval to 10 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n10s\n```\n\n----------------------------------------\n\nTITLE: Documentation Source Code Reference RST Format\nDESCRIPTION: Example of how to reference source code in RST documentation files\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_docs.md#2025-04-16_snippet_1\n\nLANGUAGE: code-block\nCODE:\n```\n.. raw:: html\n\n\t\ta href=\"https://github.com/flyteorg/<source repo name>/blob/<git sha>/<target file path>#L<from line>-L<to line>\">View source code on GitHub</a\n```\n\n----------------------------------------\n\nTITLE: flytectl get project usage\nDESCRIPTION: Shows the general usage of the flytectl get project command\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project [flags]\n```\n\n----------------------------------------\n\nTITLE: Editing Flyte Secret Auth in Kubernetes for Flyte Core\nDESCRIPTION: Bash command to edit the flyte-secret-auth secret in the Flyte namespace using kubectl.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl edit secret -n flyte flyte-secret-auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Signed URL in YAML\nDESCRIPTION: Sets the configuration for Signed URL in Flyte storage.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_193\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Wrapper Types\nDESCRIPTION: Defines wrapper message types for primitive data types including bool, bytes, numbers and strings, with their JSON representation rules.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BoolValue {\n  bool value = 1;\n}\n\nmessage StringValue {\n  string value = 1;\n}\n\nmessage Int32Value {\n  int32 value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags in reStructuredText for GCP Plugin Configuration\nDESCRIPTION: This RST code snippet adds tags to the document, indicating that it relates to GCP, Integration, Data, and is considered Advanced content.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/index.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tags:: GCP, Integration, Data, Advanced\n```\n\n----------------------------------------\n\nTITLE: Setting Use Audience from Admin Flag in YAML\nDESCRIPTION: Configures the default value for using the audience from admin's public endpoint config to false.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flytectl in Bash\nDESCRIPTION: Command to upgrade Flytectl. Note that sudo privileges may be required to avoid permission issues.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_upgrade.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl upgrade\n```\n\n----------------------------------------\n\nTITLE: Flyte Version Header in Markdown\nDESCRIPTION: Markdown header showing the Flyte version number for release notes\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.17.3-b2.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Flyte v0.17.3-b2\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Workflow Decoration in Python\nDESCRIPTION: This snippet imports necessary libraries for decorating workflows in Flyte, including functools, typing, and Flytekit components.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_workflows.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom typing import Callable\n\nfrom flytekit import task, workflow\nfrom flytekit.core.node_creation import create_node\nfrom flytekit.current_context import FlyteContext\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp from Timestamp + Duration in Pseudo Code\nDESCRIPTION: This pseudo code calculates a new Timestamp by adding a Duration to an existing Timestamp, adjusting nanoseconds and seconds when needed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_14\n\nLANGUAGE: Pseudo\nCODE:\n```\nTimestamp start = ...;\nDuration duration = ...;\nTimestamp end = ...;\n\nend.seconds = start.seconds + duration.seconds;\nend.nanos = start.nanos + duration.nanos;\n\nif (end.nanos < 0) {\n  end.seconds -= 1;\n  end.nanos += 1000000000;\n} else if (end.nanos >= 1000000000) {\n  end.seconds += 1;\n  end.nanos -= 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Command to upgrade Flyte binary installation using Helm with custom values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/mmcloud.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Client in YAML\nDESCRIPTION: Sets the default HTTP client configuration for Flyte storage, including headers and timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_192\n\nLANGUAGE: yaml\nCODE:\n```\nheaders: null\ntimeout: 0s\n```\n\n----------------------------------------\n\nTITLE: Device Flow Refresh Time Configuration\nDESCRIPTION: Sets the grace period for token refresh in device flow authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n5m0s\n```\n\n----------------------------------------\n\nTITLE: flytectl update execution Command Usage\nDESCRIPTION: The general syntax for using the 'flytectl update execution' command, showing that it accepts flags for customization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update execution [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Webhook Certificates\nDESCRIPTION: Command to generate self-signed certificates for the Flyte Propeller webhook\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ flytepropeller webhook init-certs\n```\n\n----------------------------------------\n\nTITLE: Defining ImageSpec in YAML File\nDESCRIPTION: This example shows how to define an ImageSpec in a YAML file, which can be used with pyflyte commands.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# imageSpec.yaml\npython_version: 3.11\nregistry: pingsutw\npackages:\n  - sklearn\nenv:\n  Debug: \"True\"\n```\n\n----------------------------------------\n\nTITLE: Installing kubectl-flyte via Krew\nDESCRIPTION: Alternative installation method using Krew package manager for kubectl plugins\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytepropeller/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl krew install flyte\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Cache in YAML\nDESCRIPTION: Sets the caching configuration for Flyte storage, including maximum size and garbage collection target.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_190\n\nLANGUAGE: yaml\nCODE:\n```\nmax_size_mbs: 0\ntarget_gc_percent: 0\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Binary Helm Release\nDESCRIPTION: Command to upgrade the Flyte binary Helm release with custom values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/openai_batch.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyteorg/flyte-binary -n <YOUR_NAMESPACE> --values <YOUR_YAML_FILE>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Square Function Task in Flyte\nDESCRIPTION: Creates a task that computes the square of a number without any specific resource requirements.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@task\ndef square(x: int) -> int:\n    \"\"\"Computes the square of the given integer.\"\"\"\n    return x * x\n```\n\n----------------------------------------\n\nTITLE: Structuring Documentation Navigation with List Table in Markdown\nDESCRIPTION: A list table markdown structure defining the main navigation sections of the Flyte deployment documentation, including deployment paths, plugin setup, agent setup, cluster configuration, and security overview.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{list-table}\n:header-rows: 0\n:widths: 20 30\n\n* - {ref}`🛣 Deployment Paths <deployment-deployment>`\n  - Walkthroughs for deploying Flyte, from the most basic to a fully-featured, multi-cluster production system.\n* - {ref}`🔌 Plugin Setup <deployment-plugin-setup>`\n  - Enable backend plugins to extend Flyte's capabilities, such as hooks for K8s, AWS, GCP, and Web API services.\n* - {ref}`🤖 Agent Setup <deployment-agent-setup>`\n  - Enable backend plugins to extend Flyte's capabilities, such as hooks for K8s, AWS, GCP, and Web API services.\n* - {ref}`🎛 Cluster Configuration <deployment-configuration>`\n  - How to configure the various components of your cluster.\n* - {ref}`📖 Configuration Reference <deployment-configuration-generated>`\n  - Reference docs for configuration settings for Flyte's backend services.\n* - {ref}`🔒 Security Overview <deployment-security-overview>`\n  - Read for comments on security in Flyte.\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp using Python's current time\nDESCRIPTION: This Python code snippet initializes a Timestamp object with the current time using the GetCurrentTime() method.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ntimestamp = Timestamp()\ntimestamp.GetCurrentTime()\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Kubernetes Cluster in Flyte\nDESCRIPTION: Boolean flag to enable or disable the remote Kubernetes cluster configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_141\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Release\nDESCRIPTION: Command to upgrade Flyte core deployment using Helm with values override\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/sagemaker_inference.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieve projects in JSON format\nDESCRIPTION: This command retrieves all projects and outputs them in JSON format. It uses the `-o json` flag to specify the output format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_project.rst#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nflytectl get project -o json\n```\n\n----------------------------------------\n\nTITLE: Compute Duration from two Timestamps in Pseudo Code\nDESCRIPTION: This pseudo code calculates the duration by subtracting the seconds and nanoseconds of an earlier Timestamp from a later one, adjusting for negative nanosecond values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_13\n\nLANGUAGE: Pseudo\nCODE:\n```\nTimestamp start = ...;\nTimestamp end = ...;\nDuration duration = ...;\n\nduration.seconds = end.seconds - start.seconds;\nduration.nanos = end.nanos - start.nanos;\n\nif (duration.seconds < 0 && duration.nanos > 0) {\n  duration.seconds += 1;\n  duration.nanos -= 1000000000;\n} else if (duration.seconds > 0 && duration.nanos < 0) {\n  duration.seconds -= 1;\n  duration.nanos += 1000000000;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP gRPC Endpoint for OpenTelemetry\nDESCRIPTION: Default endpoint configuration for the OTLP telemetry trace collector using gRPC protocol.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nhttp://localhost:4317\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Core Helm Chart\nDESCRIPTION: This command upgrades the Flyte core Helm chart with the new configuration. Replace <RELEASE_NAME> and <YOUR_NAMESPACE> with appropriate values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/agents/slurm.rst#2025-04-16_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade <RELEASE_NAME> flyte/flyte-core -n <YOUR_NAMESPACE> --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Note About Spark Plugin Specification\nDESCRIPTION: RST note describing the use of Protobuf for Spark plugin specification and its location in the codebase.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/extending/backend_plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\nFor Spark we decided to use Protobuf to specify the plugin as can be seen [here](https://github.com/flyteorg/flyteidl/blob/master/protos/flyteidl/plugins/spark.proto). Note it isn't necessary to have the Plugin structure specified in `flyteidl`, but we do it for simplicity, ease of maintenance alongside the core platform, and convenience leveraging existing tooling to generate code for protobuf.\n```\n\n----------------------------------------\n\nTITLE: Get Specific Workflow Version\nDESCRIPTION: Retrieves a particular version of a workflow by name within a project and domain. The `--version` flag specifies the desired version. Requires a Flyte project and domain to be specified.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl get workflow -p flytesnacks -d development  core.basic.lp.go_greet --version v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Echo Testing Plugin\nDESCRIPTION: Default configuration for the Flyte echo testing plugin. Sets sleep-duration to 0 seconds.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nsleep-duration: 0s\n```\n\n----------------------------------------\n\nTITLE: Restarting Flyte Demo Deployment\nDESCRIPTION: Command to restart the Flyte sandbox deployment after configuration changes\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl rollout restart deployment flyte-sandbox -n flyte\n```\n\n----------------------------------------\n\nTITLE: Running the Latest Pre-Release of Flyte in Sandbox\nDESCRIPTION: This snippet demonstrates how to run the latest pre-release version of Flyte in the sandbox using the `--pre` flag. The pre-release flag is ignored if the version flag is also passed.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_sandbox_start.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl sandbox start  --pre\"\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Workflow Execution Config File Using Flytectl\nDESCRIPTION: Flytectl generates a sample YAML file for creating new workflow execution configurations at the project domain level. The generated file includes annotations, labels, and security context, showcasing Flytectl's ability to prepare configurations adhering to the expected API format.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_get_workflow-execution-config.rst#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  values:\n    cliAnnotationKey: cliAnnotationValue\ndomain: development\nlabels:\n  values:\n    cliLabelKey: cliLabelValue\nmax_parallelism: 10\nproject: flytesnacks\nraw_output_data_config:\n  output_location_prefix: cliOutputLocationPrefix\nsecurity_context:\n  run_as:\n    k8s_service_account: default\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Secret Name in YAML\nDESCRIPTION: Sets the name of the secret to store generated certificates for webhook use.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_208\n\nLANGUAGE: yaml\nCODE:\n```\nflyte-pod-webhook\n```\n\n----------------------------------------\n\nTITLE: Deploying Generated Kubernetes Manifests\nDESCRIPTION: Command to apply the generated Kubernetes manifests using kubectl. This deploys the Flyte Sandbox components to the cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f flyte_generated_sandbox.yaml\n```\n\n----------------------------------------\n\nTITLE: flytectl update execution Command Options\nDESCRIPTION: Lists the specific options available for the 'update execution' command, including flags for activating, archiving, dry run, and forcing updates without confirmation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n      --activate   activate execution.\n      --archive    archive execution.\n      --dryRun     execute command without making any modifications.\n      --force      do not ask for an acknowledgement during updates.\n  -h, --help       help for execution\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Secret Manager Sidecar Image in YAML\nDESCRIPTION: Specifies the sidecar Docker image to use for AWS Secret Manager integration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_213\n\nLANGUAGE: yaml\nCODE:\n```\ndocker.io/amazon/aws-secrets-manager-secret-sidecar:v0.1.4\n```\n\n----------------------------------------\n\nTITLE: Resource Manager Configuration\nDESCRIPTION: Configuration for resource management including Redis settings and quota limits\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_169\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  hostKey: \"\"\n  hostPath: \"\"\n  hostPaths: []\n  maxRetries: 0\n  primaryName: \"\"\nresourceMaxQuota: 1000\ntype: noop\n```\n\n----------------------------------------\n\nTITLE: flytectl update launchplan-meta Command Options\nDESCRIPTION: Lists the specific options available for the 'flytectl update launchplan-meta' command, including flags for activation, archiving, description, dry run, and force update.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_launchplan-meta.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n      --activate             activate the named entity.\n      --archive              archive named entity.\n      --description string   description of the named entity.\n      --dryRun               execute command without making any modifications.\n      --force                do not ask for an acknowledgement during updates.\n  -h, --help                 help for launchplan-meta\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Annotations in YAML\nDESCRIPTION: Configuration for Vault annotations, set to null by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_221\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Running Flytekit Tests and Linting\nDESCRIPTION: These commands show how to run unit tests and linting for Flytekit after modifying the source code.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_code.rst#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmake lint\nmake test\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage CLI Parameters in Flyte\nDESCRIPTION: Command line parameters for configuring storage backend settings in Flyte. Includes options for specifying storage type (s3/minio/local/mem/stow), Stow-specific configuration, and Stow backend kind.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_update_execution-cluster-label.rst#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--storage.stow.config stringToString           Configuration for stow backend. Refer to github/flyteorg/stow (default [])\n--storage.stow.kind string                     Kind of Stow backend to use. Refer to github/flyteorg/stow\n--storage.type string                          Sets the type of storage to configure [s3/minio/local/mem/stow]. (default \"s3\")\n```\n\n----------------------------------------\n\nTITLE: Sample Kubernetes Pod YAML Output\nDESCRIPTION: This YAML snippet shows a partial output of a Kubernetes pod definition, highlighting the resource version field which is crucial for the ResourceVersionCache mechanism in FlytePropeller.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  ...\n  labels:\n    app.kubernetes.io/instance: flyte-core\n    app.kubernetes.io/managed-by: Helm\n    app.kubernetes.io/name: datacatalog\n    helm.sh/chart: flyte-core-v1.12.0\n  name: datacatalog-589586b67f-l6v58\n  namespace: flyte\n  ...\n  resourceVersion: \"1055227\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Limits in YAML\nDESCRIPTION: Sets the download limit for Flyte storage in megabytes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_191\n\nLANGUAGE: yaml\nCODE:\n```\nmaxDownloadMBs: 2\n```\n\n----------------------------------------\n\nTITLE: Retrieving EKS Cluster OIDC Provider with AWS CLI\nDESCRIPTION: Command to retrieve the OIDC issuer URL for an EKS cluster using the AWS CLI. This information is needed to configure the IAM trust policy for the data plane role.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\naws eks describe-cluster --region <AWS-REGION-CODE> --name flyte-dataplane-2 --query \"cluster.identity.oidc.issuer\" --output text\n```\n\n----------------------------------------\n\nTITLE: Reviewing Helm Chart Changes with Diff Plugin\nDESCRIPTION: Instructions for installing the Helm diff plugin and using it to review changes made to the values file. This helps users understand the impact of their customizations before applying them.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-deps/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm plugin install https://github.com/databus23/helm-diff\nhelm diff upgrade -f values-sandbox.yaml flyte .\n```\n\n----------------------------------------\n\nTITLE: Dry Run for Docker Commands\nDESCRIPTION: Prints the Docker commands that would be run to bring up the demo container without actually starting it. Useful for verification.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_demo_start.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start --dryRun\n```\n\n----------------------------------------\n\nTITLE: Formatting Pull Request Title for Version Bumping in Markdown\nDESCRIPTION: Instructions for using specific tags in the pull request title to trigger version bumping. It explains how to use #patch, #minor, or #major to increment the corresponding version number.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/pull_request_template/pull_request_template.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n_- Use #patch, #minor or #major in the pull-request title to bump the corresponding version. Otherwise, the patch version\nwill be bumped. [More details](https://github.com/marketplace/actions/github-tag-bump)_\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Device Node Label in YAML\nDESCRIPTION: This setting specifies the Kubernetes node label used to identify GPU devices on nodes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_104\n\nLANGUAGE: yaml\nCODE:\n```\nk8s.amazonaws.com/accelerator\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Metrics Prefix in YAML\nDESCRIPTION: Sets an optional prefix for all metrics published by the webhook component.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_202\n\nLANGUAGE: yaml\nCODE:\n```\n'flyte:'\n```\n\n----------------------------------------\n\nTITLE: Default Endpoint Configuration in YAML\nDESCRIPTION: Default empty string value for the remote Kubernetes cluster endpoint.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flyte Helm Release with Multiple Data Planes\nDESCRIPTION: Command to upgrade the Flyte Helm release with the updated configuration that includes multiple data plane clusters. This applies the new cluster configuration to the control plane.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade flyte-core-control flyteorg/flyte-core  -n flyte --values values-controlplane.yaml --values values-eks.yaml --values values-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account Properties in YAML\nDESCRIPTION: Defines properties for a Kubernetes service account including image pull secrets, labels, and name. These values are likely used in a Helm chart to customize the deployment of a service account.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte-binary/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n| serviceAccount.imagePullSecrets | list | `[]` |  |\n| serviceAccount.labels | object | `{}` |  |\n| serviceAccount.name | string | `\"\"` |  |\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM Policy for Flyte S3 Access\nDESCRIPTION: JSON snippet defining the minimum set of S3 permissions required for Flyte to function properly in a multi-cluster AWS deployment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"Action\": [\n   \"s3:DeleteObject*\",\n   \"s3:GetObject*\",\n   \"s3:ListBucket\",\n   \"s3:PutObject*\"\n   ],\n\"Resource\": [\n         \"arn:aws:s3:::<your-S3-bucket>*\",\n         \"arn:aws:s3:::<your-S3-bucket>*/*\"\n      ],\n```\n\n----------------------------------------\n\nTITLE: Delete workflow execution config by workflow name, project, and domain\nDESCRIPTION: This command deletes the workflow execution configuration for a specific workflow in a given project and domain. Replace 'flytesnacks', 'development', and 'core.control_flow.merge_sort.merge_sort' with the appropriate values.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_workflow-execution-config.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"flytectl delete workflow-execution-config -p flytesnacks -d development core.control_flow.merge_sort.merge_sort\"\n```\n\n----------------------------------------\n\nTITLE: Updating Project Details with flytectl\nDESCRIPTION: This command uses flytectl to update a project's display name, description, and labels. It demonstrates how to modify project metadata using the command-line interface.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v0.19.2.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl update project  --id data --name datadata --description \"Team that manage Data Platform\" --labels \"team=data,managedby=flyte\"\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in SQLAlchemyTask\nDESCRIPTION: Example of using secrets with SQLAlchemyTask to securely connect to a database.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/secrets.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom flytekit import kwtypes\nfrom flytekitplugins.sqlalchemy import SQLAlchemyTask, SQLAlchemyConfig\n\n\n# define the secrets\nsecrets = {\n    \"username\": Secret(group=\"<SECRET_GROUP>\", key=\"<USERNAME_SECRET>\"),\n    \"password\": Secret(group=\"<SECRET_GROUP>\", key=\"<PASSWORD_SECRET>\"),\n}\n\n\nsql_query = SQLAlchemyTask(\n    name=\"sql_query\",\n    query_template=\"\"\"SELECT * FROM my_table LIMIT {{ .inputs.limit }}\"\"\",\n    inputs=kwtypes(limit=int),\n\n    # request secrets\n    secret_requests=[*secrets.values()],\n\n    # specify username and password credentials in the configuration\n    task_config=SQLAlchemyConfig(\n        uri=\"<DATABASE_URI>\",\n        secret_connect_args=secrets,\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Authorization Header in YAML\nDESCRIPTION: Sets the default custom metadata header for passing JWT to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Unsupported Partial Task with List Input in Python\nDESCRIPTION: Demonstrates an unsupported use case where fixing parameters of type list in a partial task leads to an error.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/CHANGELOG/CHANGELOG-v1.5.0.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\nfrom typing import List\nfrom flytekit import task, workflow, map_task\n\n@task\ndef t(a: int, xs: List[int]) -> str:\n    return f\"{a} {xs}\"\n\n@workflow\ndef wf():\n    partial_t = partial(t, xs=[1, 2, 3])\n    map_task(partial_t)(a=[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Setting Default GPU Resource Name in YAML\nDESCRIPTION: This configuration defines the default resource name used for GPU allocation in Kubernetes.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_105\n\nLANGUAGE: yaml\nCODE:\n```\nnvidia.com/gpu\n```\n\n----------------------------------------\n\nTITLE: Qubole Hive Query Protocol\nDESCRIPTION: Protocol buffer messages for executing Hive queries on Qubole clusters with query collections and job specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/plugins/plugins.rst#2025-04-16_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage HiveQuery {\n  string query = 1;\n  uint32 timeout_sec = 2;\n  uint32 retryCount = 3;\n}\n\nmessage HiveQueryCollection {\n  repeated HiveQuery queries = 1;\n}\n\nmessage QuboleHiveJob {\n  string cluster_label = 1;\n  HiveQueryCollection query_collection = 2;\n  repeated string tags = 3;\n  HiveQuery query = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for GCP Plugin Setup\nDESCRIPTION: This RST code defines a hidden table of contents for GCP plugin setup, with a maximum depth of 1 and including a link to the BigQuery setup guide.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/gcp/index.md#2025-04-16_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n:maxdepth: 1\n:name: GCP plugin setup\n:hidden:\n\nbigquery\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Formatter in YAML\nDESCRIPTION: Sets the default logging format to JSON.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ntype: json\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Flyte Task with @task Decorator\nDESCRIPTION: Shows how to create a simple Flyte task using the @task decorator. This task takes a name parameter and returns a greeting string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/flyte_project_components.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@task()\ndef say_hello(name: str) -> str:\n    return f\"Hello, {name}!\"\n```\n\n----------------------------------------\n\nTITLE: Checking Flyte Deployment Pod Status\nDESCRIPTION: Bash command to check the status of Flyte deployment pods in the Flyte namespace using kubectl get pods.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/databricks.rst#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n flyte\n```\n\n----------------------------------------\n\nTITLE: Compiling Flyte Package Options\nDESCRIPTION: This section lists available options for the flytectl compile command, providing a means to customize the compilation process. Options include specifying a file path to a Flyte package, help command, and various inherited options for admin configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_compile.rst#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--file string   Path to a flyte package file. Flyte packages are tgz files generated by pyflyte or jflyte.\n```\n\nLANGUAGE: markdown\nCODE:\n```\n-h, --help          help for compile\n```\n\n----------------------------------------\n\nTITLE: Flytectl Storage Download Limit Configuration\nDESCRIPTION: This flag sets the maximum allowed download size in megabytes (MB) per call. The default value is 2 MB.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_create_project.rst#2025-04-16_snippet_4\n\nLANGUAGE: TEXT\nCODE:\n```\n\"--storage.limits.maxDownloadMBs int            Maximum allowed download size (in MBs) per call. (default 2)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Message Length in YAML\nDESCRIPTION: Deprecated configuration parameter that sets the maximum length of error messages in the system.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_197\n\nLANGUAGE: yaml\nCODE:\n```\n\"0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Claims in YAML\nDESCRIPTION: Configuration for Kubernetes resource claims, set to null by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_217\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Computing Timestamp from Java Instant.now()\nDESCRIPTION: Creates a Timestamp object in Java using Instant.now(), directly mapping epoch seconds and nanoseconds to the Timestamp fields.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/core/core.rst#2025-04-16_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nInstant now = Instant.now();\n\nTimestamp timestamp =\n    Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n        .setNanos(now.getNano()).build();\n```\n\n----------------------------------------\n\nTITLE: OAuth Error Message\nDESCRIPTION: Example error message when using self-signed certificates with OAuth authentication.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/security/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncertificate is not standards compliant.\n```\n\n----------------------------------------\n\nTITLE: Cluster Resource Attributes Configuration in YAML\nDESCRIPTION: YAML configuration for setting cluster resource quotas including CPU and memory limits for the Flyte demo cluster.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/environment_setup.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nattributes:\n    projectQuotaCpu: \"1000\"\n    projectQuotaMemory: 5Ti\nproject: flytesnacks\ndomain: development\n```\n\n----------------------------------------\n\nTITLE: Adding Flyte Helm Repository\nDESCRIPTION: Command to add the Flyte chart repository to Helm\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/webapi/snowflake.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add flyteorg https://flyteorg.github.io/flyte\n```\n\n----------------------------------------\n\nTITLE: Configuring Flytectl Client in YAML\nDESCRIPTION: This YAML configuration disables insecure connections in the Flytectl client, necessary when TLS is enabled on the server side.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/troubleshoot.rst#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  endpoint: dns:///example.com\n  authType: Pkce\n  insecure: false # disable insecure in flytectl\n  insecureSkipVerify: true\n```\n\n----------------------------------------\n\nTITLE: Default Environment From Secrets Configuration in YAML\nDESCRIPTION: Default null value for environment variables sourced from Secrets.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_93\n\nLANGUAGE: yaml\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Resync Duration in YAML\nDESCRIPTION: Sets the frequency of re-syncing launchplans within the auto refresh cache in Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_181\n\nLANGUAGE: yaml\nCODE:\n```\n30s\n```\n\n----------------------------------------\n\nTITLE: Configuring Flyte Copilot\nDESCRIPTION: This YAML snippet defines the configuration for Flyte Copilot, including the Docker image and startup timeout.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/charts/flyte/README.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nflyte.configmap.copilot:\n  plugins:\n    k8s:\n      co-pilot:\n        image: \"cr.flyte.org/flyteorg/flytecopilot:1.15.1\"\n        name: \"flyte-copilot-\"\n        start-timeout: \"30s\"\n```\n\n----------------------------------------\n\nTITLE: Register files and override Output location prefix\nDESCRIPTION: Registers files, continues on error, specifies a version, and overrides the output location prefix.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_register_files.rst#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"flytectl register file  _pb_output/* -d development  -p flytesnacks --continueOnError --version v2 --outputLocationPrefix \\\"s3://dummy/prefix\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Building Image for Different Architecture in ImageSpec\nDESCRIPTION: This code shows how to specify a different architecture platform when building the image using ImageSpec.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/imagespec.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimage_spec = ImageSpec(\n  packages=[\"pandas\"],\n  platform=\"linux/arm64\",\n  registry=\"ghcr.io/flyteorg\",\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Flyte Task Decoration\nDESCRIPTION: This snippet imports the necessary dependencies for decorating Flyte tasks, including functools.wraps and the Flyte task decorator.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/advanced_composition/decorating_tasks.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import wraps\nfrom flytekit import task, workflow\nfrom flytekit.types.file import FlyteFile\nimport logging\n```\n\n----------------------------------------\n\nTITLE: Default Qubole Command API Path Configuration in YAML\nDESCRIPTION: Default API path where commands can be launched on Qubole.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_79\n\nLANGUAGE: yaml\nCODE:\n```\n/api/v1.2/commands/\n```\n\n----------------------------------------\n\nTITLE: Configuring ResourceManager in YAML\nDESCRIPTION: Default YAML configuration for disabling the ResourceManager in Flyte deployments. This configuration relies on individual platforms to manage resource utilization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/resource_manager.rst#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresourcemanager:\n  type: noop\n```\n\n----------------------------------------\n\nTITLE: Rendering RST Tags for AWS Integration\nDESCRIPTION: RST directive for adding tags to the documentation page to indicate AWS integration and related categories.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/plugins/aws/index.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. tags:: AWS, Integration, MachineLearning, Data, Advanced\n```\n\n----------------------------------------\n\nTITLE: Adding TOC Reference in Markdown\nDESCRIPTION: Example showing how to add a table of contents reference for a specific example.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n{toc}\n/auto_examples/bigquery_agent/index\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL Sampler in YAML\nDESCRIPTION: Sets the default configuration for the OpenTelemetry sampler, including parent sampler and trace ID ratio.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nparentSampler: always\ntraceIdRatio: 0.01\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema for Dataclasses and Pydantic BaseModels in Python\nDESCRIPTION: This snippet demonstrates how to create dataclasses and Pydantic BaseModels, and generate their JSON schema using Pydantic's API. It includes nested structures and various data types.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/5741-binary-idl-with-message-pack.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass DC_inside:\n    a: int\n    b: float\n\n@dataclass\nclass DC:\n    a: int\n    b: float\n    c: str\n    d: Dict[str, int]\n    e: DC_inside\n\nclass MyDCModel(BaseModel):\n    dc: DC\n\nmy_dc = MyDCModel(dc=DC(a=1, b=2.0, c=\"3\", d={\"4\": 5}, e=DC_inside(a=6, b=7.0)))\nmy_dc.model_json_schema()\n\"\"\"\n{'$defs': {'DC': {'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'number'}, 'c': {'title': 'C', 'type': 'string'}, 'd': {'additionalProperties': {'type': 'integer'}, 'title': 'D', 'type': 'object'}, 'e': {'$ref': '#/$defs/DC_inside'}}, 'required': ['a', 'b', 'c', 'd', 'e'], 'title': 'DC', 'type': 'object'}, 'DC_inside': {'properties': {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'number'}}, 'required': ['a', 'b'], 'title': 'DC_inside', 'type': 'object'}}, 'properties': {'dc': {'$ref': '#/$defs/DC'}}, 'required': ['dc'], 'title': 'MyDCModel', 'type': 'object'}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Resource Overrides in Flyte\nDESCRIPTION: Imports necessary modules for demonstrating how to override resource requirements dynamically.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/productionizing/customizing_task_resources.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport numpy as np\nfrom flytekit import task, workflow, Resources\n```\n\n----------------------------------------\n\nTITLE: Basic Python Workflow Execution with Main Conditional\nDESCRIPTION: Example code showing how to run a Flyte workflow with a main module conditional in a Python script.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    print(wf())\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL HTTP Exporter in YAML\nDESCRIPTION: Sets the default endpoint for exporting telemetry traces to an OTLP HTTP collector.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nendpoint: http://localhost:4318/v1/traces\n```\n\n----------------------------------------\n\nTITLE: Configuring FlyteAdmin CORS Settings\nDESCRIPTION: YAML configuration for enabling CORS and setting allowed origins in FlyteAdmin config.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/security/index.rst#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  allowCors: true\n  ......\n  allowedOrigins:\n  - 'https://<flyte-console-domain>'\n  ......\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Service Config in YAML\nDESCRIPTION: Sets the default service configuration to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Kubernetes Cluster Name in Flyte\nDESCRIPTION: Sets a friendly name for the remote Kubernetes cluster configuration.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_138\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Extending flyteidl AdminService for Cache Eviction\nDESCRIPTION: This snippet refers to extending the existing `UpdateExecution` endpoint and introducing a new endpoint `UpdateTaskExecution` in `flyteadmin` to support cache eviction functionality. These extensions involve adding an `evict_cache` flag to the request objects which enables the removal of cached results for workflows and tasks.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/2633-eviction-of-cached-task-outputs.md#2025-04-16_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n\"The [`UpdateExecution`](https://github.com/flyteorg/flyteidl/blob/ac94eb4c6ffbe17df5b146337135f59914ffe3bf/protos/flyteidl/service/admin.proto#L281) endpoints and its [`ExecutionUpdateRequest`](https://github.com/flyteorg/flyteidl/blob/e749b82a70027d3364f4e5b98ce2cfbffb4eef54/protos/flyteidl/admin/execution.proto#L351) could be extended to include an `evict_cache` flag.\"\n```\n\nLANGUAGE: protobuf\nCODE:\n```\n\"We further propose adding a new endpoint equivalent to `UpdateExecution` for handling tasks execution entities (e.g. `UpdateTaskExecution`), supporting the `evict_cache` flag mentioned above.\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Client ID in YAML\nDESCRIPTION: Sets the default client ID to 'flytepropeller'.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nflytepropeller\n```\n\n----------------------------------------\n\nTITLE: Navigating to Workflows Directory in Bash\nDESCRIPTION: Command to navigate to the workflows directory of a Flyte project using the command line.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/getting_started_with_workflow_development/running_a_workflow_locally.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd my_project/workflows\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Token URL in YAML\nDESCRIPTION: Sets the default token endpoint URL to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Go Interface Implementation for Platform Task Resource Values\nDESCRIPTION: A proposed extension to the TaskExecutionMetadata interface to include GetPlatformTaskResourceValues() method for propagating execution config values to plugin handlers.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/rfc/system/1476-task-resources.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nGetPlatformTaskResourceValues() TaskResourceSpec\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Show Source in YAML\nDESCRIPTION: Disables including source code location in logs by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Default Destination Cluster Configs in YAML\nDESCRIPTION: Default empty array for destination cluster configurations.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_86\n\nLANGUAGE: yaml\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Proxy Command in YAML\nDESCRIPTION: Configures the default command for external proxy-authorization token generation to an empty array.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Flyte Auth YAML Configuration\nDESCRIPTION: YAML configuration structure for setting up authentication in Flyte's values file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/auth_setup.rst#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n```\n\n----------------------------------------\n\nTITLE: Starting Flyte Sandbox\nDESCRIPTION: Command to initialize the Flyte sandbox environment.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/flyte_agents/deploying_agents_to_the_flyte_sandbox.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflytectl demo start\n```\n\n----------------------------------------\n\nTITLE: Version Command Help Option\nDESCRIPTION: Available flags specific to the version command\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_version.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Defining WorkflowExecutionGetDataResponse Fields\nDESCRIPTION: This snippet outlines the WorkflowExecutionGetDataResponse fields which provide inputs and outputs for a particular execution.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/admin/admin.rst#2025-04-16_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\n.. csv-table:: WorkflowExecutionGetDataResponse type fields\n   :header: \"Field\", \"Type\", \"Label\", \"Description\"\n   :widths: auto\n\n   \"outputs\", \":ref:`ref_flyteidl.admin.UrlBlob`\", \"\", \"**Deprecated.** Signed url to fetch a core.LiteralMap of execution outputs. Deprecated: Please use full_outputs instead.\"\n   \"inputs\", \":ref:`ref_flyteidl.admin.UrlBlob`\", \"\", \"**Deprecated.** Signed url to fetch a core.LiteralMap of execution inputs. Deprecated: Please use full_inputs instead.\"\n   \"full_inputs\", \":ref:`ref_flyteidl.core.LiteralMap`\", \"\", \"Full_inputs will only be populated if they are under a configured size threshold.\"\n   \"full_outputs\", \":ref:`ref_flyteidl.core.LiteralMap`\", \"\", \"Full_outputs will only be populated if they are under a configured size threshold.\"\n```\n\n----------------------------------------\n\nTITLE: Empty Connector Maps Configuration\nDESCRIPTION: Default empty map configurations for connectors and connector task type mappings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_114\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Proxy URL in YAML\nDESCRIPTION: Sets the default HTTP Proxy URL for OAuth requests to an empty string.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Protobuf Representation of a Spark Task in Flyte\nDESCRIPTION: This code block illustrates the protobuf representation of a Spark task after serialization. It includes task metadata, interface details, custom Spark configurations, and container specifications.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/concepts/main_concepts/workflow_lifecycle.rst#2025-04-16_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nId:  Task, \"example.example.hello_spark\" \nType: \"Spark\"\nMetadata: \n    runtime: \n        type: FLYTE_SDK\n        version: 1.0.3\n        flavor: python\n        \ninterface:\n    inputs:\n        i : \n          type : simple:Integer\n          description: \"i\"\n    outputs: \n       o0: \n          type: FLOAT\n          description: o0\ncustom:\n    executorpath: \"/opt/venv/bin/python3\"\n    mainApplicationFile: /opt/venv/bin/entrypoint.py\n    sparkConf: \n       spark.driver.cores: 1\n       spark.executor.instances: 2\n       spark.driver.memory: 1000M\n    \n\nContainer:\n    image: \"hello_world:1\"\n    args: \n     [\n       \"pyflyte-execute\"\n       \"--inputs\"\n       \"{{.input}}\"\n       \"--output-prefix\"\n       \"{{.outputPrefix}}\"\n       \"--raw-output-data-prefix\"\n       \"{{.rawOutputDataPrefix}}\"\n       \"--checkpoint-path\"\n       \"{{.checkpointOutputPrefix}}\"\n       \"--prev-checkpoint\"\n       \"{{.prevCheckpointPrefix}}\"\n       \"--resolver\"\n       \"flytekit.core.python_auto_container.default_task_resolver\"\n       \"--\"\n       \"task-module\"\n       \"example.example\"\n       \"task-name\"\n       \"hello_spark\"\n     ]\n```\n\n----------------------------------------\n\nTITLE: Linting FlyteAdmin Code\nDESCRIPTION: The following command is used to lint the FlyteAdmin codebase, checking for any stylistic errors or deviations from coding standards.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteadmin/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make lint\n```\n\n----------------------------------------\n\nTITLE: Setting Use Auth Flag in YAML\nDESCRIPTION: Configures the deprecated useAuth flag to false by default.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/flytepropeller_config.rst#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"false\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Preview Link Format\nDESCRIPTION: Format for generating documentation preview links in pull requests\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_docs.md#2025-04-16_snippet_5\n\nLANGUAGE: code-block\nCODE:\n```\nhttps://flyte--<PR number>.org.readthedocs.build/en/<PR number>/<relative path>.html\n```\n\n----------------------------------------\n\nTITLE: Compute Timestamp from POSIX `gettimeofday()` in C++\nDESCRIPTION: This snippet initializes a Timestamp using the `gettimeofday()` function to set seconds and nanoseconds from a timeval structure.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flyteidl/protos/docs/datacatalog/datacatalog.rst#2025-04-16_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nstruct timeval tv;\ngettimeofday(&tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n```\n\n----------------------------------------\n\nTITLE: Stow Configuration\nDESCRIPTION: Default configuration for Stow backend including kind and empty config map.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/generated/datacatalog_config.rst#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Data Catalog Service Description\nDESCRIPTION: Markdown header and description explaining the purpose of the datacatalog service component within Flyte.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/datacatalog/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# datacatalog\nService that catalogs data to allow for data discovery, lineage and tagging\n```\n\n----------------------------------------\n\nTITLE: Creating Bearer Token Secret in Kubernetes\nDESCRIPTION: Creates a long-lived bearer token for the flyteadmin Service Account in the data plane cluster\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/deployment/multicluster.rst#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: dataplane1-token\n  namespace: flyte\n  annotations:\n    kubernetes.io/service-account.name: flyteadmin\ntype: kubernetes.io/service-account-token\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Pod Details\nDESCRIPTION: This command retrieves detailed YAML output for a specific Kubernetes pod in the Flyte namespace, including its resource version.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/deployment/configuration/performance.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get datacatalog-589586b67f-l6v58 -n flyte -o yaml\n```\n\n----------------------------------------\n\nTITLE: Flytectl Delete Execution Queue Attribute Usage\nDESCRIPTION: This displays the general usage pattern for the `flytectl delete execution-queue-attribute` command, showing that it accepts flags for customization.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/flytectl/docs/source/gen/flytectl_delete_execution-queue-attribute.rst#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nflytectl delete execution-queue-attribute [flags]\n```\n\n----------------------------------------\n\nTITLE: Running Flyte Workflow Remotely\nDESCRIPTION: Command to execute a Flyte workflow on a remote cluster using the pyflyte CLI tool\nSOURCE: https://github.com/flyteorg/flyte/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npyflyte run --remote hello_world.py hello_world_wf\n```\n\n----------------------------------------\n\nTITLE: Haskell script for calculating ellipse area\nDESCRIPTION: Defines a Haskell script that reads input radii, calculates the area of an ellipse, and writes the result to an output file.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/user_guide/customizing_dependencies/raw_containers.md#2025-04-16_snippet_10\n\nLANGUAGE: haskell\nCODE:\n```\nimport System.IO\n\nmain :: IO ()\nmain = do\n    radius1 <- readFile \"/var/inputs/radius1\"\n    radius2 <- readFile \"/var/inputs/radius2\"\n    let area = pi * (read radius1) * (read radius2)\n    writeFile \"/var/outputs/area\" (show area)\n```\n\n----------------------------------------\n\nTITLE: Including Golang Test Targets in Makefile\nDESCRIPTION: This snippet shows how to include the Golang test targets in your main Makefile. It requires setting the REPOSITORY environment variable and including the boilerplate Makefile for Golang test targets.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/golang_test_targets/Readme.rst#2025-04-16_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nREPOSITORY=<myreponame>\ninclude boilerplate/flyte/golang_test_targets/Makefile\n```\n\n----------------------------------------\n\nTITLE: Building Fresh Documentation using Make\nDESCRIPTION: Shell command to perform a clean build of the documentation.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmake -C docs clean html\n```\n\n----------------------------------------\n\nTITLE: Enabling GolangCI Configuration in Flyte Projects\nDESCRIPTION: Instructions for adding the flyteorg/golangci_file to the boilerplate/update.cfg file in order to enable the pre-configured GolangCI linter settings.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/boilerplate/flyte/golangci_file/Readme.rst#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAdd \"flyteorg/golangci_file\" to your \"boilerplate/update.cfg\" file.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Documentation Server\nDESCRIPTION: Commands to build and serve Flyte documentation locally using Python's HTTP server\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_docs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dev-docs\npython -m http.server --directory docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Setting DocSearch API Key\nDESCRIPTION: Sets a fake API key environment variable required for local documentation build process.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCSEARCH_API_KEY=fake-api-key\n```\n\n----------------------------------------\n\nTITLE: Creating New Example File\nDESCRIPTION: Command to create a new example file in an existing project directory.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntouch examples/exploratory_data_analysis/my_new_example.py\n```\n\n----------------------------------------\n\nTITLE: Python Example Format\nDESCRIPTION: Demonstrates the percent format for writing Python examples with interleaved code and markdown cells.\nSOURCE: https://github.com/flyteorg/flyte/blob/master/docs/community/contribute/contribute_examples.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# %%\nprint(\"Hello World!\")\n\n# %% [markdown]\n# This is a Markdown cell\n\n# %%\nprint(\"This is another code cell\")\n```"
  }
]