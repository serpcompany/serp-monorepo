[
  {
    "owner": "scipy",
    "repo": "scipy",
    "content": "TITLE: Defining Poisson Distribution Functions in LaTeX\nDESCRIPTION: Mathematical formulas for the probability mass function, cumulative distribution function, mean, variance, skewness, and kurtosis of the Poisson distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_poisson.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} p\\left(k;\\lambda\\right) & = & e^{-\\lambda}\\frac{\\lambda^{k}}{k!}\\quad k\\geq0,\\\\ F\\left(x;\\lambda\\right) & = & \\sum_{n=0}^{\\left\\lfloor x\\right\\rfloor }e^{-\\lambda}\\frac{\\lambda^{n}}{n!}=\\frac{1}{\\Gamma\\left(\\left\\lfloor x\\right\\rfloor +1\\right)}\\int_{\\lambda}^{\\infty}t^{\\left\\lfloor x\\right\\rfloor }e^{-t}dt,\\\\ \\mu & = & \\lambda\\\\ \\mu_{2} & = & \\lambda\\\\ \\gamma_{1} & = & \\frac{1}{\\sqrt{\\lambda}}\\\\ \\gamma_{2} & = & \\frac{1}{\\lambda}.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Linear Programming Solution Using scipy.optimize.linprog\nDESCRIPTION: Example demonstrating how to solve a linear programming problem with inequality and equality constraints using SciPy's linprog function. The example first tries with tighter bounds that result in an infeasible solution, then loosens constraints to find an optimal solution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.optimize import linprog\nc = np.array([-29.0, -45.0, 0.0, 0.0])\nA_ub = np.array([[1.0, -1.0, -3.0, 0.0],\n                [-2.0, 3.0, 7.0, -3.0]])\nb_ub = np.array([5.0, -10.0])\nA_eq = np.array([[2.0, 8.0, 1.0, 0.0],\n                [4.0, 4.0, 0.0, 1.0]])\nb_eq = np.array([60.0, 60.0])\nx0_bounds = (0, None)\nx1_bounds = (0, 5.0)\nx2_bounds = (-np.inf, 0.5)\nx3_bounds = (-3.0, None)\nbounds = [x0_bounds, x1_bounds, x2_bounds, x3_bounds]\nresult = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)\nprint(result.message)\n```\n\nLANGUAGE: python\nCODE:\n```\nx1_bounds = (0, 6)\nbounds = [x0_bounds, x1_bounds, x2_bounds, x3_bounds]\nresult = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds)\nprint(result.message)\n```\n\nLANGUAGE: python\nCODE:\n```\nx = np.array(result.x)\nobj = result.fun\nprint(c @ x)\nprint(obj)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(b_ub - (A_ub @ x).flatten())\nprint(b_eq - (A_eq @ x).flatten())\nprint([0 <= result.x[0], 0 <= result.x[1] <= 6.0, result.x[2] <= 0.5, -3.0 <= result.x[3]])\n```\n\n----------------------------------------\n\nTITLE: Testing for Normality in Python\nDESCRIPTION: Demonstrates various tests for normality including skewness test, kurtosis test, and combined normality test using SciPy's stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint('normal skewtest teststat = %6.3f pvalue = %6.4f' % stats.skewtest(x))\nprint('normal kurtosistest teststat = %6.3f pvalue = %6.4f' % stats.kurtosistest(x))\nprint('normaltest teststat = %6.3f pvalue = %6.4f' % stats.normaltest(x))\n```\n\n----------------------------------------\n\nTITLE: Finding Roots of Single-Variable Equations with SciPy\nDESCRIPTION: Example demonstrating how to find the root of a single-variable transcendental equation using SciPy's root function, which returns both the solution and the function value at the solution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.optimize import root\ndef func(x):\n    return x + 2 * np.cos(x)\nsol = root(func, 0.3)\nsol.x\narray([-1.02986653])\nsol.fun\narray([ -6.66133815e-16])\n```\n\n----------------------------------------\n\nTITLE: Finding Global Minimum with Optimization Methods - Python\nDESCRIPTION: This code demonstrates how to apply various global optimization methods available in SciPy to find the global minimum of the `eggholder` function. It shows function evaluation results for methods such as SHGO and differential evolution, storing the results for comparison.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy import optimize\n>>> results = dict()\n>>> results['shgo'] = optimize.shgo(eggholder, bounds)\n>>> results['shgo']\n        fun: -935.3379515604197  # may vary\n       funl: array([-935.33795156])\n    message: 'Optimization terminated successfully.'\n       nfev: 42\n        nit: 2\n      nlfev: 37\n      nlhev: 0\n      nljev: 9\n    success: True\n          x: array([439.48096952, 453.97740589])\n\n>>> results['DA'] = optimize.dual_annealing(eggholder, bounds)\n>>> results['DA']\n        fun: -956.9182316237413  # may vary\n    message: ['Maximum number of iteration reached']\n       nfev: 4091\n       nhev: 0\n        nit: 1000\n       njev: 0\n          x: array([482.35324114, 432.87892901])\n```\n\n----------------------------------------\n\nTITLE: Bimodal Distribution Density Estimation - Python\nDESCRIPTION: This snippet generates a bimodal distribution and applies kernel density estimation using different bandwidth selections, illustrating the challenges of accurately estimating the density function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/kernel_density_estimation.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import partial\n\nloc1, scale1, size1 = (-2, 1, 175)\nloc2, scale2, size2 = (2, 0.2, 50)\nx2 = np.concatenate([np.random.normal(loc=loc1, scale=scale1, size=size1),\n                     np.random.normal(loc=loc2, scale=scale2, size=size2)])\n\nx_eval = np.linspace(x2.min() - 1, x2.max() + 1, 500)\n\nkde = stats.gaussian_kde(x2)\nkde2 = stats.gaussian_kde(x2, bw_method='silverman')\nkde3 = stats.gaussian_kde(x2, bw_method=partial(my_kde_bandwidth, fac=0.2))\nkde4 = stats.gaussian_kde(x2, bw_method=partial(my_kde_bandwidth, fac=0.5))\npdf = stats.norm.pdf\nbimodal_pdf = pdf(x_eval, loc=loc1, scale=scale1) * float(size1) / x2.size + \n               pdf(x_eval, loc=loc2, scale=scale2) * float(size2) / x2.size\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\n\nax.plot(x2, np.zeros(x2.shape), 'b+', ms=12)\nax.plot(x_eval, kde(x_eval), 'k-', label=\"Scott's Rule\")\nax.plot(x_eval, kde2(x_eval), 'b-', label=\"Silverman's Rule\")\nax.plot(x_eval, kde3(x_eval), 'g-', label=\"Scott * 0.2\")\nax.plot(x_eval, kde4(x_eval), 'c-', label=\"Scott * 0.5\")\nax.plot(x_eval, bimodal_pdf, 'r--', label=\"Actual PDF\")\n\nax.set_xlim([x_eval.min(), x_eval.max()])\nax.legend(loc=2)\nax.set_xlabel('x')\nax.set_ylabel('Density')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Testing Exceptions with Pytest\nDESCRIPTION: Example showing the preferred way to test for expected exceptions using pytest.raises as a context manager with the match parameter to verify specific error messages.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/missing-bits.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscores = np.array([1, 2, 3])\ncompare = np.array([-8, -3, 2, 7, 12, np.nan])\nwith pytest.raises(ValueError, match='input contains nan'):\n    stats.zmap(scores, compare, nan_policy='raise')\n```\n\n----------------------------------------\n\nTITLE: Performing Fisher's Exact Test with SciPy in Python\nDESCRIPTION: This snippet performs Fisher's exact test using the `scipy.stats.fisher_exact` function to determine if there is a significant difference in the odds of acute mountain sickness between an acetazolamide group and a control group. The inputs are a contingency table of observed cases and the test's result includes a statistic and a p-value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_fisher_exact.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import fisher_exact\nres = fisher_exact([[7, 17], [15, 5]], alternative='less')\nres.statistic\n```\n\nLANGUAGE: Python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Applying Arbitrary Function to Matrix in SciPy Python\nDESCRIPTION: This Python code snippet demonstrates how to apply an arbitrary function, such as the zeroth-order Bessel function, to a matrix using SciPy's `linalg.funm` command. The function requires complex number handling and uses Schur decomposition for computations. Inputs include a matrix and a Python function that accepts complex numbers. The output is the function applied to the eigenvalues of the input matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n>>> from scipy import special, linalg\n>>> rng = np.random.default_rng()\n>>> A = rng.random((3, 3))\n>>> B = linalg.funm(A, lambda x: special.jv(0, x))\n>>> A\narray([[0.06369197, 0.90647174, 0.98024544],\n       [0.68752227, 0.5604377 , 0.49142032],\n       [0.86754578, 0.9746787 , 0.37932682]])\n>>> B\narray([[ 0.6929219 , -0.29728805, -0.15930896],\n       [-0.16226043,  0.71967826, -0.22709386],\n       [-0.19945564, -0.33379957,  0.70259022]])\n>>> linalg.eigvals(A)\narray([ 1.94835336+0.j, -0.72219681+0.j, -0.22270006+0.j])\n>>> special.jv(0, linalg.eigvals(A))\narray([0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j])\n>>> linalg.eigvals(B)\narray([0.25375345+0.j, 0.87379738+0.j, 0.98763955+0.j])\n```\n\n----------------------------------------\n\nTITLE: Matrix Operations with numpy.matrix\nDESCRIPTION: Demonstrates basic matrix operations using numpy.matrix class including creation, inverse, and transpose operations. Shows MATLAB-like syntax and convenient matrix multiplication.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> A = np.asmatrix('[1 2;3 4]')\n>>> A\nmatrix([[1, 2],\n        [3, 4]])\n>>> A.I\nmatrix([[-2. ,  1. ],\n        [ 1.5, -0.5]])\n>>> b = np.asmatrix('[5 6]')\n>>> b\nmatrix([[5, 6]])\n>>> b.T\nmatrix([[5],\n        [6]])\n>>> A*b.T\nmatrix([[17],\n        [39]])\n```\n\n----------------------------------------\n\nTITLE: Computing Delaunay Triangulation in Python using scipy.spatial\nDESCRIPTION: This snippet demonstrates how to compute a Delaunay triangulation for a set of 2D points using scipy.spatial.Delaunay. It also shows how to visualize the triangulation using Matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.spatial import Delaunay\nimport numpy as np\npoints = np.array([[0, 0], [0, 1.1], [1, 0], [1, 1]])\ntri = Delaunay(points)\n\nimport matplotlib.pyplot as plt\nplt.triplot(points[:,0], points[:,1], tri.simplices)\nplt.plot(points[:,0], points[:,1], 'o')\n\nfor j, p in enumerate(points):\n    plt.text(p[0]-0.03, p[1]+0.03, j, ha='right') # label the points\nfor j, s in enumerate(tri.simplices):\n    p = points[s].mean(axis=0)\n    plt.text(p[0], p[1], '#%d' % j, ha='center') # label triangles\nplt.xlim(-0.5, 1.5); plt.ylim(-0.5, 1.5)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Solving Systems of Non-Linear Equations with Jacobian in SciPy\nDESCRIPTION: Example showing how to find roots of a system of non-linear equations using SciPy's root function with the Levenberg-Marquardt method, providing both the function and its Jacobian matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndef func2(x):\n    f = [x[0] * np.cos(x[1]) - 4,\n         x[1]*x[0] - x[1] - 5]\n    df = np.array([[np.cos(x[1]), -x[0] * np.sin(x[1])],\n                   [x[1], x[0] - 1]])\n    return f, df\nsol = root(func2, [1, 1], jac=True, method='lm')\nsol.x\narray([ 6.50409711,  0.90841421])\n```\n\n----------------------------------------\n\nTITLE: Calculating Pearson's Correlation with SciPy in Python\nDESCRIPTION: This snippet calculates Pearson's correlation coefficient for the provided datasets using SciPy. The output includes the correlation statistic. SciPy is required to perform this calculation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.pearsonr(x, y)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Continuous Distribution in SciPy\nDESCRIPTION: Shows how to create a custom continuous distribution by subclassing scipy.stats.rv_continuous and implementing the required methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy import stats\n>>> class deterministic_gen(stats.rv_continuous):\n...     def _cdf(self, x):\n...         return np.where(x < 0, 0., 1.)\n...     def _stats(self):\n...         return 0., 0., 0., 0.\n\n>>> deterministic = deterministic_gen(name=\"deterministic\")\n>>> deterministic.cdf(np.arange(-3, 3, 0.5))\narray([ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  1.,  1.,  1.,  1.])\n```\n\n----------------------------------------\n\nTITLE: Parallel Differential Evolution with Workers\nDESCRIPTION: This snippet shows how to use the `differential_evolution` function with the `workers` argument to parallelize the optimization process. It utilizes a `multiprocessing.Pool` to distribute the function evaluations across multiple processes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n>>> res = differential_evolution(rosen, bnds, workers=2, updating='deferred')\n```\n\n----------------------------------------\n\nTITLE: Defining Inequality and Equality Constraints for Optimization - Python\nDESCRIPTION: In this code, inequality and equality constraints are defined for the constrained minimization problem using dictionaries. Each constraint includes a function and its Jacobian, enabling the `minimize` function to optimize the `rosen` function under these conditions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> ineq_cons = {'type': 'ineq',\n...              'fun' : lambda x: np.array([1 - x[0] - 2*x[1],\n...                                          1 - x[0]**2 - x[1],\n...                                          1 - x[0]**2 + x[1]]),\n...              'jac' : lambda x: np.array([[-1.0, -2.0],\n...                                          [-2*x[0], -1.0],\n...                                          [-2*x[0], 1.0]])}\n>>> eq_cons = {'type': 'eq',\n...            'fun' : lambda x: np.array([2*x[0] + x[1] - 1]),\n...            'jac' : lambda x: np.array([2.0, 1.0])}\n```\n\n----------------------------------------\n\nTITLE: Minimizing Rosenbrock Function using Trust-NCG Method with Hessian-Vector Product\nDESCRIPTION: Example of using SciPy's minimize function with the trust-region Newton-conjugate gradient method (trust-ncg) to optimize the Rosenbrock function using the memory-efficient Hessian-vector product approach.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nres = minimize(rosen, x0, method='trust-ncg',\n               jac=rosen_der, hessp=rosen_hess_p,\n               options={'gtol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: Performing Shapiro-Wilk Test\nDESCRIPTION: This code imports the necessary stats module from SciPy and performs the Shapiro-Wilk test on the weights data array, producing a statistic value that indicates normality.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_shapiro.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.shapiro(x)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: B-Spline Interpolation Example\nDESCRIPTION: Demonstrates B-spline interpolation and differentiation using make_interp_spline with sine function data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 3/2, 7)\ny = np.sin(np.pi*x)\n\nfrom scipy.interpolate import make_interp_spline\nbspl = make_interp_spline(x, y, k=3)\nder = bspl.derivative()\n\nimport matplotlib.pyplot as plt\nxx = np.linspace(0, 3/2, 51)\nplt.plot(xx, bspl(xx), '--', label=r'$\\sin(\\pi x)$ approx')\nplt.plot(x, y, 'o', label='data')\nplt.plot(xx, der(xx)/np.pi, '--', label=r'$d \\sin(\\pi x)/dx / \\pi$ approx')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Finding Roots of a Spline in Python\nDESCRIPTION: This snippet demonstrates how to find the roots of a spline using SciPy's sproot function, and shows how to handle edge cases by defining the spline on a slightly larger interval.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n# Roots of spline\ninterpolate.sproot(tck)\n\n# Handle edge cases\nx = np.linspace(-np.pi/4, np.pi + np.pi/4, 51)\ny = np.sin(x)\ntck = interpolate.splrep(x, y, s=0)\ninterpolate.sproot(tck)\n```\n\n----------------------------------------\n\nTITLE: Using the Custom RandomEngine QMC Engine\nDESCRIPTION: This code shows how to use the custom `RandomEngine` class created in the previous snippet. It initializes the engine, generates random numbers using `random()`, and then resets the engine to demonstrate that the same sequence of random numbers is produced after resetting.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/quasi_monte_carlo.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> engine = RandomEngine(2)\n>>> engine.random(5)\narray([[0.22733602, 0.31675834],  # random\n       [0.79736546, 0.67625467],\n       [0.39110955, 0.33281393],\n       [0.59830875, 0.18673419],\n       [0.67275604, 0.94180287]])\n>>> engine.reset()\n>>> engine.random(5)\narray([[0.22733602, 0.31675834],  # random\n       [0.79736546, 0.67625467],\n       [0.39110955, 0.33281393],\n       [0.59830875, 0.18673419],\n       [0.67275604, 0.94180287]])\n```\n\n----------------------------------------\n\nTITLE: Chi-Square Goodness of Fit Test\nDESCRIPTION: Performs a chi-square test to validate if the sample follows the defined discrete normal distribution\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> f2 = np.hstack([f[:5].sum(), f[5:-5], f[-5:].sum()])\n>>> p2 = np.hstack([probs[:5].sum(), probs[5:-5], probs[-5:].sum()])\n>>> ch2, pval = stats.chisquare(f2, p2*n_sample)\n>>> print('chisquare for normdiscrete: chi2 = %6.3f pvalue = %6.4f' % (ch2, pval))\n```\n\n----------------------------------------\n\nTITLE: Computing Odds Ratio with SciPy in Python\nDESCRIPTION: This Python snippet calculates the odds ratio for a given contingency table using the 'odds_ratio' function from the 'scipy.stats.contingency' module. It evaluates the odds of an event (ischemic stroke) based on a treatment (aspirin vs. placebo).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_odds_ratio.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats.contingency import odds_ratio\nres = odds_ratio([[176, 230], [21035, 21018]])\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Linear Least-Squares Data Fitting with SciPy\nDESCRIPTION: Shows how to use linalg.lstsq to solve a data-fitting problem with an exponential model. The example creates synthetic data, adds noise, fits the model parameters, and plots the result.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> import matplotlib.pyplot as plt\n>>> rng = np.random.default_rng()\n\n>>> c1, c2 = 5.0, 2.0\n>>> i = np.r_[1:11]\n>>> xi = 0.1*i\n>>> yi = c1*np.exp(-xi) + c2*xi\n>>> zi = yi + 0.05 * np.max(yi) * rng.standard_normal(len(yi))\n\n>>> A = np.c_[np.exp(-xi)[:, np.newaxis], xi[:, np.newaxis]]\n>>> c, resid, rank, sigma = linalg.lstsq(A, zi)\n\n>>> xi2 = np.r_[0.1:1.0:100j]\n>>> yi2 = c[0]*np.exp(-xi2) + c[1]*xi2\n\n>>> plt.plot(xi,zi,'x',xi2,yi2)\n>>> plt.axis([0,1.1,3.0,5.5])\n>>> plt.xlabel('$x_i$')\n>>> plt.title('Data fitting with linalg.lstsq')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing the P-value from Spearman's Rho Result\nDESCRIPTION: This snippet shows how to directly access the p-value from the `res` object, which is the result of the `scipy.stats.spearmanr` function. This p-value represents the probability of observing a correlation as strong as the one calculated, assuming no actual correlation exists.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Minimizing Function with Trust Region Constraint Method - Python\nDESCRIPTION: This code demonstrates the use of the `minimize` function with the `trust-constr` method to find the minimum of a function (`rosen`) subject to linear and nonlinear constraints. The function's value at its minimum is printed after optimization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> res = minimize(rosen, x0, method='trust-constr', jac=rosen_der, hess=rosen_hess_linop,\n...                constraints=[linear_constraint, nonlinear_constraint],\n...                options={'verbose': 1}, bounds=bounds)\n# may vary\n`gtol` termination condition is satisfied.\nNumber of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.018 s.\n>>> print(res.x)\n[0.41494531 0.17010937]\n```\n\n----------------------------------------\n\nTITLE: Implementing Least-Squares Estimation with SciPy\nDESCRIPTION: This code snippet demonstrates how to perform least-squares estimation using SciPy's `least_squares` function. It takes defined residuals based on an enzymatic reaction and computes the optimal parameter values, while imposing constraints on them.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.optimize import least_squares\n\n>>> def model(x, u):\n...     return x[0] * (u ** 2 + x[1] * u) / (u ** 2 + x[2] * u + x[3])\n\n>>> def fun(x, u, y):\n...     return model(x, u) - y\n\n>>> def jac(x, u, y):\n...     J = np.empty((u.size, x.size))\n...     den = u ** 2 + x[2] * u + x[3]\n...     num = u ** 2 + x[1] * u\n...     J[:, 0] = num / den\n...     J[:, 1] = x[0] * u / den\n...     J[:, 2] = -x[0] * num * u / den ** 2\n...     J[:, 3] = -x[0] * num / den ** 2\n...     return J\n\n>>> u = np.array([4.0, 2.0, 1.0, 5.0e-1, 2.5e-1, 1.67e-1, 1.25e-1, 1.0e-1,\n...               8.33e-2, 7.14e-2, 6.25e-2])\n>>> y = np.array([1.957e-1, 1.947e-1, 1.735e-1, 1.6e-1, 8.44e-2, 6.27e-2,\n...               4.56e-2, 3.42e-2, 3.23e-2, 2.35e-2, 2.46e-2])\n>>> x0 = np.array([2.5, 3.9, 4.15, 3.9])\n>>> res = least_squares(fun, x0, jac=jac, bounds=(0, 100), args=(u, y), verbose=1)\n# may vary\n`ftol` termination condition is satisfied.\nFunction evaluations 130, initial cost 4.4383e+00, final cost 1.5375e-04, first-order optimality 4.92e-08.\n>>> res.x\narray([ 0.19280596,  0.19130423,  0.12306063,  0.13607247])\n```\n\n----------------------------------------\n\nTITLE: Calculating Two-Sided P-Value and Annotating with Matplotlib in Python\nDESCRIPTION: This snippet computes the two-sided p-value by comparing the correlation statistic with the null distribution and annotates the plot with Matplotlib. It shows areas corresponding to extreme values. Matplotlib and SciPy are necessary to run this code.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nrs = res.statistic  # original statistic\npvalue = dist.cdf(-rs) + dist.sf(rs)\nannotation = (f'p-value={pvalue:.4f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (rs, 0.01), (0.25, 0.1), arrowprops=props)\ni = r_vals >= rs\nax.fill_between(r_vals[i], y1=0, y2=pdf[i], color='C0')\ni = r_vals <= -rs\nax.fill_between(r_vals[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(-1.1, 1.1)\nax.set_ylim(0, 0.9)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Expected Value Calculation with New API and quad\nDESCRIPTION: Shows how to calculate expected values using the pdf method from the new API in conjunction with scipy.integrate.quad.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef f(x): return x**4 * X.pdf(x)\nintegrate.quad(f, a=-np.inf, b=np.inf)  # integral estimate, estimate of the error\n```\n\n----------------------------------------\n\nTITLE: Matrix Operations with numpy.ndarray\nDESCRIPTION: Shows equivalent matrix operations using 2D numpy.ndarray objects, demonstrating matrix multiplication, transpose, and differences from numpy.matrix class.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,2],[3,4]])\n>>> A\narray([[1, 2],\n      [3, 4]])\n>>> linalg.inv(A)\narray([[-2. ,  1. ],\n      [ 1.5, -0.5]])\n>>> b = np.array([[5,6]]) #2D array\n>>> b\narray([[5, 6]])\n>>> b.T\narray([[5],\n      [6]])\n>>> A*b #not matrix multiplication!\narray([[ 5, 12],\n      [15, 24]])\n>>> A.dot(b.T) #matrix multiplication\narray([[17],\n      [39]])\n```\n\n----------------------------------------\n\nTITLE: Solving Optimization Problem with SLSQP Method - Python\nDESCRIPTION: This snippet provides an example of solving a constrained optimization problem using the `SLSQP` method. It utilizes the `minimize` function while accounting for the defined equality and inequality constraints, outputting the result of optimization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> x0 = np.array([0.5, 0])\n>>> res = minimize(rosen, x0, method='SLSQP', jac=rosen_der,\n...                constraints=[eq_cons, ineq_cons], options={'ftol': 1e-9, 'disp': True},\n...                bounds=bounds)\n# may vary\nOptimization terminated successfully.    (Exit mode 0)\n                Current function value: 0.342717574857755\n                Iterations: 5\n                Function evaluations: 6\n                Gradient evaluations: 5\n>>> print(res.x)\n[0.41494475 0.1701105 ]\n```\n\n----------------------------------------\n\nTITLE: Performing One-Sample t-test in Python\nDESCRIPTION: Demonstrates how to perform a one-sample t-test using SciPy's stats module to compare the sample mean to the theoretical mean.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint('t-statistic = %6.3f pvalue = %6.4f' %  stats.ttest_1samp(x, m))\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using RegularGridInterpolator in Python\nDESCRIPTION: This snippet demonstrates how to create a RegularGridInterpolator object, define a 2D function, create a grid of points, and interpolate using different methods. It also shows how to visualize the results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_regular_grid.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import RegularGridInterpolator\n\ndef F(u, v):\n    return u * np.cos(u * v) + v * np.sin(u * v)\n\nfit_points = [np.linspace(0, 3, 8), np.linspace(0, 3, 11)]\nvalues = F(*np.meshgrid(*fit_points, indexing='ij'))\n\nut, vt = np.meshgrid(np.linspace(0, 3, 80), np.linspace(0, 3, 80), indexing='ij')\ntrue_values = F(ut, vt)\ntest_points = np.array([ut.ravel(), vt.ravel()]).T\n\ninterp = RegularGridInterpolator(fit_points, values)\nfig, axes = plt.subplots(2, 3, figsize=(10, 6))\naxes = axes.ravel()\nfig_index = 0\nfor method in ['linear', 'nearest', 'slinear', 'cubic', 'quintic']:\n    im = interp(test_points, method=method).reshape(80, 80)\n    axes[fig_index].imshow(im)\n    axes[fig_index].set_title(method)\n    axes[fig_index].axis(\"off\")\n    fig_index += 1\naxes[fig_index].imshow(true_values)\naxes[fig_index].set_title(\"True values\")\nfig.tight_layout()\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Solving Linear Sum Assignment Problem with SciPy Python\nDESCRIPTION: This snippet shows the application of SciPy's linear_sum_assignment function to solve the linear sum assignment problem for optimizing task allocations. It requires the scipy library and a pre-defined cost matrix. Inputs include the cost matrix, and it outputs the optimal row and column indices for assignments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.optimize import linear_sum_assignment\nrow_ind, col_ind = linear_sum_assignment(cost)\n```\n\n----------------------------------------\n\nTITLE: Minimizing a Univariate Function using SciPy\nDESCRIPTION: This snippet provides an example of how to minimize a univariate function using the `minimize_scalar` function from SciPy. It demonstrates the use of Brent's method to locate the minimum of a specified lambda function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.optimize import minimize_scalar\n>>> f = lambda x: (x - 2) * (x + 1)**2\n>>> res = minimize_scalar(f, method='brent')\n>>> print(res.x)\n1.0\n```\n\n----------------------------------------\n\nTITLE: Optimization with Shared Calculations\nDESCRIPTION: Demonstrates techniques for avoiding redundant calculations in optimization by using combined function/gradient evaluation and memoization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef f_and_df(x):\n    expensive_value = expensive(x[0])\n    return (-expensive_value**2,  # objective function\n            -2*expensive_value*dexpensive(x[0]))  # gradient\n\nfrom functools import lru_cache\nexpensive = lru_cache(expensive)\n```\n\n----------------------------------------\n\nTITLE: Accessing Distribution Bounds and Methods\nDESCRIPTION: Shows how to retrieve distribution support, list methods, and inspect available distribution methods\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprint('bounds of distribution lower: %s, upper: %s' % norm.support())\n```\n\nLANGUAGE: Python\nCODE:\n```\ndir(norm)\n```\n\nLANGUAGE: Python\nCODE:\n```\nrv = norm()\ndir(rv)\n```\n\n----------------------------------------\n\nTITLE: Generating nonlinear datasets and visualizing MGC\nDESCRIPTION: This snippet generates nonlinear data using NumPy and illustrates the relationship with the defined mgc_plot function. It also retrieves and prints MGC test statistics and p-values for the nonlinear case.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/multiscale_graphcorr.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> unif = np.array(rng.uniform(0, 5, size=100))\n>>> x = unif * np.cos(np.pi * unif)\n>>> y = unif * np.sin(np.pi * unif) + 0.4 * rng.random(x.size)\n\n>>> mgc_plot(x, y, \"Spiral\", only_viz=True)\n\n>>> stat, pvalue, mgc_dict = multiscale_graphcorr(x, y)\n>>> print(\"MGC test statistic: \", round(stat, 1))\nMGC test statistic:  0.2  # random\n>>> print(\"P-value: \", round(pvalue, 1))\nP-value:  0.0\n>>> mgc_plot(x, y, \"Spiral\", mgc_dict, only_mgc=True)\n```\n\n----------------------------------------\n\nTITLE: Minimizing Rosenbrock Function using Newton-CG Method with Hessian-Vector Product\nDESCRIPTION: Example of using SciPy's minimize function with the Newton-CG method that uses the more memory-efficient Hessian-vector product approach instead of the full Hessian matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nres = minimize(rosen, x0, method='Newton-CG',\n               jac=rosen_der, hessp=rosen_hess_p,\n               options={'xtol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: Kolmogorov-Smirnov Test for Two Samples in Python using SciPy\nDESCRIPTION: This snippet shows how to use SciPy's ks_2samp function to perform a Kolmogorov-Smirnov test on two samples. It demonstrates examples with samples from the same distribution and from different distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/comparing_two_samples.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> stats.ks_2samp(rvs1, rvs2)\nKstestResult(statistic=0.026, pvalue=0.9959527565364388)  # random\n\n>>> stats.ks_2samp(rvs1, rvs3)\nKstestResult(statistic=0.114, pvalue=0.00299005061044668)  # random\n```\n\n----------------------------------------\n\nTITLE: Solving Knapsack Problem with SciPy MILP Python\nDESCRIPTION: This code demonstrates solving the knapsack problem using SciPy's MILP for maximizing the total value of selected items without exceeding the knapsack capacity. It requires numpy and scipy.optimize and defines constraints and bounds using optimize.Bounds and optimize.LinearConstraint.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy import optimize\nsizes = np.array([21, 11, 15, 9, 34, 25, 41, 52])\nvalues = np.array([22, 12, 16, 10, 35, 26, 42, 53])\n```\n\n----------------------------------------\n\nTITLE: Generating STFT with Specific Parameters\nDESCRIPTION: Shows how to generate a Short-Time Fourier Transform with custom time slice and offset parameters\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nSz3 = SFT.stft(z, p0=0, p1=(N-noverlap)//SFT.hop, k_offset=nperseg//2)\nt3 = SFT.t(N, p0=0, p1=(N-noverlap)//SFT.hop, k_offset=nperseg//2)\n```\n\n----------------------------------------\n\nTITLE: Comparing Means with T-Test in Python using SciPy\nDESCRIPTION: This snippet demonstrates how to use SciPy's ttest_ind function to compare the means of two samples. It shows examples with samples from identical and different distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/comparing_two_samples.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> import scipy.stats as stats\n>>> rvs1 = stats.norm.rvs(loc=5, scale=10, size=500)\n>>> rvs2 = stats.norm.rvs(loc=5, scale=10, size=500)\n>>> stats.ttest_ind(rvs1, rvs2)\nTtest_indResult(statistic=-0.5489036175088705, pvalue=0.5831943748663959)  # random\n\n>>> rvs3 = stats.norm.rvs(loc=8, scale=10, size=500)\n>>> stats.ttest_ind(rvs1, rvs3)\nTtest_indResult(statistic=-4.533414290175026, pvalue=6.507128186389019e-06)  # random\n```\n\n----------------------------------------\n\nTITLE: Analyzing Linear System with lfilter in Python\nDESCRIPTION: This snippet demonstrates how to use scipy.signal.lfilter to apply a digital filter to an input signal. It shows examples with and without initial conditions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy import signal\n\nx = np.array([1., 0., 0., 0.])\nb = np.array([1.0/2, 1.0/4])\na = np.array([1.0, -1.0/3])\nsignal.lfilter(b, a, x)\nzi = signal.lfiltic(b, a, y=[2.])\nsignal.lfilter(b, a, x, zi=zi)\n```\n\n----------------------------------------\n\nTITLE: Accessing One-Sided P-Value\nDESCRIPTION: This snippet retrieves and displays the p-value calculated from a one-sided Spearman's rank correlation test. The p-value represents the probability of observing the data or more extreme data, assuming the null hypothesis is true.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Result Class Using Python Dataclass\nDESCRIPTION: Example of creating a custom result class using Python's dataclass decorator to store multiple return values. Includes proper typing and hidden private attributes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/missing-bits.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass MyResultObject:\n    statistic: np.ndarray\n    pvalue: np.ndarray\n    confidence_interval: ConfidenceInterval\n    _rho: np.ndarray = field(repr=False)\n```\n\n----------------------------------------\n\nTITLE: BFGS Optimization with Gradient Implementation\nDESCRIPTION: Shows implementation of the Rosenbrock function gradient for use with the BFGS optimization method, demonstrating more efficient optimization using derivative information.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef rosen_der(x):\n    xm = x[1:-1]\n    xm_m1 = x[:-2]\n    xm_p1 = x[2:]\n    der = np.zeros_like(x)\n    der[1:-1] = 200*(xm-xm_m1**2) - 400*(xm_p1 - xm**2)*xm - 2*(1-xm)\n    der[0] = -400*x[0]*(x[1]-x[0]**2) - 2*(1-x[0])\n    der[-1] = 200*(x[-1]-x[-2]**2)\n    return der\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Constraints in SciPy\nDESCRIPTION: Creates a LinearConstraint object to define the linear constraints x_0 + 2x_1 ≤ 1 and 2x_0 + x_1 = 1 for optimization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.optimize import LinearConstraint\nlinear_constraint = LinearConstraint([[1, 2], [2, 1]], [-np.inf, 1], [1, 1])\n```\n\n----------------------------------------\n\nTITLE: Computing Convex Hull in Python using scipy.spatial\nDESCRIPTION: This snippet shows how to compute and visualize a convex hull for a set of random 2D points using scipy.spatial.ConvexHull and Matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.spatial import ConvexHull\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nrng = np.random.default_rng()\npoints = rng.random((30, 2))   # 30 random points in 2-D\nhull = ConvexHull(points)\n\nplt.plot(points[:,0], points[:,1], 'o')\nfor simplex in hull.simplices:\n    plt.plot(points[simplex,0], points[simplex,1], 'k-')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing Indexing in Dense and Sparse Arrays in Python\nDESCRIPTION: This snippet demonstrates the difference in indexing capabilities between dense arrays, COO sparse arrays, and CSR sparse arrays.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(dense[2, 2])\n# This will raise a TypeError:\n# print(sparse[2, 2])\nprint(sparse.tocsr()[2, 2])\n```\n\n----------------------------------------\n\nTITLE: Implementing Truncated Distribution with Domain Parameter in Python\nDESCRIPTION: This code demonstrates how to create a truncated distribution by passing a domain parameter to the TransformedDensityRejection generator. The distribution is truncated to the interval [-1, 1] and then used to generate random samples in a 5×3 matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrng = TransformedDensityRejection(dist, domain=(-1, 1), random_state=urng)\nrng.rvs((5, 3))\n```\n\n----------------------------------------\n\nTITLE: Large-Scale Root Finding with Krylov Method in SciPy\nDESCRIPTION: Implementation of a partial differential equation solver using SciPy's root function with the 'krylov' method, suitable for large-scale problems where computing the full Jacobian is expensive.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.optimize import root\nfrom numpy import cosh, zeros_like, mgrid, zeros\n\n# parameters\nnx, ny = 75, 75\nhx, hy = 1./(nx-1), 1./(ny-1)\n\nP_left, P_right = 0, 0\nP_top, P_bottom = 1, 0\n\ndef residual(P):\n   d2x = zeros_like(P)\n   d2y = zeros_like(P)\n\n   d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx\n   d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx\n   d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx\n\n   d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy\n   d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy\n   d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy\n\n   return d2x + d2y + 5*cosh(P).mean()**2\n\n# solve\nguess = zeros((nx, ny), float)\nsol = root(residual, guess, method='krylov', options={'disp': True})\n#sol = root(residual, guess, method='broyden2', options={'disp': True, 'max_rank': 50})\n#sol = root(residual, guess, method='anderson', options={'disp': True, 'M': 10})\nprint('Residual: %g' % abs(residual(sol.x)).max())\n\n# visualize\nimport matplotlib.pyplot as plt\nx, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]\nplt.pcolormesh(x, y, sol.x, shading='gouraud')\nplt.colorbar()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Designing IIR Elliptic Filter in Python\nDESCRIPTION: This example demonstrates how to design an elliptic low-pass IIR filter using scipy.signal.iirfilter, and plot its frequency response.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipy.signal as signal\nimport matplotlib.pyplot as plt\n\nb, a = signal.iirfilter(4, Wn=0.2, rp=5, rs=60, btype='lowpass', ftype='ellip')\nw, h = signal.freqz(b, a)\n\nplt.title('Digital filter frequency response')\nplt.plot(w, 20*np.log10(np.abs(h)))\nplt.title('Digital filter frequency response')\nplt.ylabel('Amplitude Response [dB]')\nplt.xlabel('Frequency (rad/sample)')\nplt.grid()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: FFT of Combined Sine Waves\nDESCRIPTION: Shows how to compute and plot the FFT of two combined sine waves with different frequencies. Demonstrates frequency analysis and visualization of the frequency spectrum.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import fft, fftfreq\nimport numpy as np\nN = 600\nT = 1.0 / 800.0\nx = np.linspace(0.0, N*T, N, endpoint=False)\ny = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)\nyf = fft(y)\nxf = fftfreq(N, T)[:N//2]\nimport matplotlib.pyplot as plt\nplt.plot(xf, 2.0/N * np.abs(yf[0:N//2]))\nplt.grid()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Assigning Tasks Based on Optimal Indices Python\nDESCRIPTION: Using the outputs from the linear_sum_assignment function, this snippet maps swimming styles and students, providing the optimal assignment and calculating the total medley time. It uses arrays for tasks and resources and prints a dictionary of optimal assignments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nstyles = np.array([\"backstroke\", \"breaststroke\", \"butterfly\", \"freestyle\"])[row_ind]\nstudents = np.array([\"A\", \"B\", \"C\", \"D\", \"E\"])[col_ind]\ndict(zip(styles, students))\n```\n\n----------------------------------------\n\nTITLE: Transforming Normal to Truncated Normal in SciPy\nDESCRIPTION: This snippet demonstrates how to create a truncated normal distribution from a standard normal distribution using the `truncate` method. It defines a standard normal distribution, truncates it between specified bounds `a` and `b`, and then plots the resulting PDF, comparing it with the SciPy's built-in `truncnorm` distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_56\n\nLANGUAGE: python\nCODE:\n```\na, b = 0.1, 2\n\nX = stats.Normal()  \nY = stats.truncate(X, a, b)  # compare to `truncnorm`\nY.plot()\n\nx = np.linspace(a, b, 300)\nplt.plot(x, stats.truncnorm(a, b).pdf(x), '--')\nplt.legend(['`truncate(X, a, b)`', '`truncnorm`'])\nplt.title(\"Truncated Normal PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing RegularGridInterpolator and CartesianGridInterpolator in Python\nDESCRIPTION: This snippet demonstrates how to use CartesianGridInterpolator as a drop-in replacement for RegularGridInterpolator when dealing with uniformly spaced data on Cartesian grids.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_regular_grid.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nx, y = np.arange(5), np.arange(6)\nxx, yy = np.meshgrid(x, y, indexing='ij')\nvalues = xx**3 + yy**3\nrgi = RegularGridInterpolator((x, y), values, method='linear')\nrgi([[1.5, 1.5], [3.5, 2.6]])\ncgi = CartesianGridInterpolator((x, y), values, method='linear')\ncgi([[1.5, 1.5], [3.5, 2.6]])\n```\n\n----------------------------------------\n\nTITLE: 1D RBF Interpolation Example\nDESCRIPTION: Demonstrates 1D interpolation using RBFInterpolator and compares it with UnivariateSpline interpolation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_unstructured.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.interpolate import RBFInterpolator, InterpolatedUnivariateSpline\n\nx = np.linspace(0, 10, 9).reshape(-1, 1)\ny = np.sin(x)\nxi = np.linspace(0, 10, 101).reshape(-1, 1)\n\nius = InterpolatedUnivariateSpline(x, y)\nyi = ius(xi)\n\nrbf = RBFInterpolator(x, y)\nfi = rbf(xi)\n```\n\n----------------------------------------\n\nTITLE: Solving Linear Systems\nDESCRIPTION: Demonstrates solving linear systems using scipy.linalg.solve and comparing it with the matrix inverse method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1, 2], [3, 4]])\n>>> A\narray([[1, 2],\n      [3, 4]])\n>>> b = np.array([[5], [6]])\n>>> b\narray([[5],\n      [6]])\n>>> linalg.inv(A).dot(b)  # slow\narray([[-4. ],\n      [ 4.5]])\n>>> A.dot(linalg.inv(A).dot(b)) - b  # check\narray([[  8.88178420e-16],\n      [  2.66453526e-15]])\n>>> np.linalg.solve(A, b)  # fast\narray([[-4. ],\n      [ 4.5]])\n>>> A.dot(np.linalg.solve(A, b)) - b  # check\narray([[ 0.],\n      [ 0.]])\n```\n\n----------------------------------------\n\nTITLE: N-dimensional Integration using nquad\nDESCRIPTION: Demonstrates using nquad for n-dimensional integration with both constant and variable integration bounds.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy import integrate\n>>> def f(x, y):\n...     return x*y\n...\n>>> def bounds_y():\n...     return [0, 0.5]\n...\n>>> def bounds_x(y):\n...     return [0, 1-2*y]\n...\n>>> integrate.nquad(f, [bounds_x, bounds_y])\n(0.010416666666666668, 4.101620128472366e-16)\n```\n\n----------------------------------------\n\nTITLE: Monotone Interpolation Comparison\nDESCRIPTION: Compares different interpolation methods (CubicSpline, Akima1D, and PCHIP) with data containing an outlier.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import CubicSpline, PchipInterpolator, Akima1DInterpolator\nx = np.array([1., 2., 3., 4., 4.5, 5., 6., 7., 8])\ny = x**2\ny[4] += 101\n\nimport matplotlib.pyplot as plt\nxx = np.linspace(1, 8, 51)\nplt.plot(xx, CubicSpline(x, y)(xx), '--', label='spline')\nplt.plot(xx, Akima1DInterpolator(x, y)(xx), '-', label='Akima1D')\nplt.plot(xx, PchipInterpolator(x, y)(xx), '-', label='pchip')\nplt.plot(x, y, 'o')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing Sample Statistics to Theoretical Values in Python\nDESCRIPTION: Calculates theoretical statistics for a t-distribution and compares them to sample statistics using SciPy's stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nm, v, s, k = stats.t.stats(10, moments='mvsk')\nn, (smin, smax), sm, sv, ss, sk = stats.describe(x)\n\nsstr = '%-14s mean = %6.4f, variance = %6.4f, skew = %6.4f, kurtosis = %6.4f'\nprint(sstr % ('distribution:', m, v, s ,k))\nprint(sstr % ('sample:', sm, sv, ss, sk))\n```\n\n----------------------------------------\n\nTITLE: Visualizing Drum Head Vibration using Bessel Functions in Python\nDESCRIPTION: This code demonstrates how to use Bessel functions to model and visualize the vibrational modes of a circular drum head. It uses scipy.special.jn and scipy.special.jn_zeros to calculate the drum head height and matplotlib to create a 3D surface plot.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/special.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from scipy import special\n>>> import numpy as np\n>>> def drumhead_height(n, k, distance, angle, t):\n...    kth_zero = special.jn_zeros(n, k)[-1]\n...    return np.cos(t) * np.cos(n*angle) * special.jn(n, distance*kth_zero)\n>>> theta = np.r_[0:2*np.pi:50j]\n>>> radius = np.r_[0:1:50j]\n>>> x = np.array([r * np.cos(theta) for r in radius])\n>>> y = np.array([r * np.sin(theta) for r in radius])\n>>> z = np.array([drumhead_height(1, 1, r, theta, 0.5) for r in radius])\n\n>>> import matplotlib.pyplot as plt\n>>> fig = plt.figure()\n>>> ax = fig.add_axes(rect=(0, 0.05, 0.95, 0.95), projection='3d')\n>>> ax.plot_surface(x, y, z, rstride=1, cstride=1, cmap='RdBu_r', vmin=-0.5, vmax=0.5)\n>>> ax.set_xlabel('X')\n>>> ax.set_ylabel('Y')\n>>> ax.set_xticks(np.arange(-1, 1.1, 0.5))\n>>> ax.set_yticks(np.arange(-1, 1.1, 0.5))\n>>> ax.set_zlabel('Z')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints and Solving Knapsack Problem Python\nDESCRIPTION: This snippet defines the constraints for the knapsack problem and solves it using the MILP function from SciPy. It sets up binary constraints for decision variables, utilizes a linear constraint for knapsack capacity, and computes the solution, checking for success.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nbounds = optimize.Bounds(0, 1)\nintegrality = np.full_like(values, True)\ncapacity = 100\nconstraints = optimize.LinearConstraint(A=sizes, lb=0, ub=capacity)\n\nres = milp(c=-values, constraints=constraints,\n           integrality=integrality, bounds=bounds)\n```\n\n----------------------------------------\n\nTITLE: Creating Voronoi Diagram using KDTree in Python with scipy.spatial\nDESCRIPTION: This snippet demonstrates how to create a Voronoi diagram using KDTree from scipy.spatial. It uses a set of 2D points and visualizes the regions using a color mesh plot.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.spatial import KDTree\nimport numpy as np\nimport matplotlib.pyplot as plt\n\npoints = np.array([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2],\n                   [2, 0], [2, 1], [2, 2]])\ntree = KDTree(points)\n\nx = np.linspace(-0.5, 2.5, 31)\ny = np.linspace(-0.5, 2.5, 33)\nxx, yy = np.meshgrid(x, y)\nxy = np.c_[xx.ravel(), yy.ravel()]\n\ndx_half, dy_half = np.diff(x[:2])[0] / 2., np.diff(y[:2])[0] / 2.\nx_edges = np.concatenate((x - dx_half, [x[-1] + dx_half]))\ny_edges = np.concatenate((y - dy_half, [y[-1] + dy_half]))\nplt.pcolormesh(x_edges, y_edges, tree.query(xy)[1].reshape(33, 31), shading='flat')\nplt.plot(points[:,0], points[:,1], 'ko')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SVD Computation in Python using SciPy\nDESCRIPTION: This snippet shows how to perform Singular Value Decomposition (SVD) on a matrix using SciPy's linalg module. It computes U, s, and Vh matrices, reconstructs the original matrix, and verifies the computation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> M,N = A.shape\n>>> U,s,Vh = linalg.svd(A)\n>>> Sig = linalg.diagsvd(s,M,N)\n>>> U, Vh = U, Vh\n>>> U\narray([[-0.3863177 , -0.92236578],\n      [-0.92236578,  0.3863177 ]])\n>>> Sig\narray([[ 9.508032  ,  0.        ,  0.        ],\n      [ 0.        ,  0.77286964,  0.        ]])\n>>> Vh\narray([[-0.42866713, -0.56630692, -0.7039467 ],\n      [ 0.80596391,  0.11238241, -0.58119908],\n      [ 0.40824829, -0.81649658,  0.40824829]])\n>>> U.dot(Sig.dot(Vh)) #check computation\narray([[ 1.,  2.,  3.],\n      [ 4.,  5.,  6.]])\n```\n\n----------------------------------------\n\nTITLE: Manipulating PPoly Objects for Sine Function Interpolation in Python\nDESCRIPTION: This snippet demonstrates how to create a cubic spline interpolation of the sine function, compute its derivative, find roots, and solve equations using PPoly objects.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.interpolate import CubicSpline\nx = np.linspace(0, 10, 71)\ny = np.sin(x)\nspl = CubicSpline(x, y)\n\ndspl = spl.derivative()\n\ndspl(1.1), spl(1.1, nu=1)\n\ndspl.roots() / np.pi\n\ndspl.roots(extrapolate=False) / np.pi\n\ndspl.solve(0.5, extrapolate=False) / np.pi\n```\n\n----------------------------------------\n\nTITLE: Vectorized Minimization with Custom Map-like\nDESCRIPTION: This snippet demonstrates how to use a custom map-like function to take advantage of vectorization during function evaluation within the `minimize` function. It shows how to reshape the input array for vectorized calculations and measures performance using `%timeit`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nIf the objective function can be vectorized, then a map-like can be used to take\nadvantage of vectorization during function evaluation. Vectorization means that the\nobjective function can carry out the required calculations in a single (rather than\nmultiple) call, which is typically very efficient::\n\n    In [5]: def vectorized_maplike(fun, iterable):\n    ...         arr = np.array([i for i in iter(iterable)])   # arr.shape = (S, N)\n    ...         arr_t = arr.T                                 # arr_t.shape = (N, S)\n    ...         r = slow_func(arr_t)                          # calculation vectorized over S\n    ...         return r\n\n    In [6]: %timeit minimize(slow_func, x0, method='L-BFGS-B', options={'workers':vectorized_maplike})\n    38.9 ms ± 734 μs per loop (mean ± std. dev. of 7 runs, 10 loops each)  # may vary\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Multivariate Minimization Method in SciPy\nDESCRIPTION: Implementation of a custom minimization function that searches the neighborhood in each dimension independently with a fixed step size, returning an OptimizeResult object compatible with SciPy's minimize interface.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.optimize import OptimizeResult\ndef custmin(fun, x0, args=(), maxfev=None, stepsize=0.1,\n        maxiter=100, callback=None, **options):\n    bestx = x0\n    besty = fun(x0)\n    funcalls = 1\n    niter = 0\n    improved = True\n    stop = False\n\n    while improved and not stop and niter < maxiter:\n        improved = False\n        niter += 1\n        for dim in range(np.size(x0)):\n            for s in [bestx[dim] - stepsize, bestx[dim] + stepsize]:\n                testx = np.copy(bestx)\n                testx[dim] = s\n                testy = fun(testx, *args)\n                funcalls += 1\n                if testy < besty:\n                    besty = testy\n                    bestx = testx\n                    improved = True\n            if callback is not None:\n                callback(bestx)\n            if maxfev is not None and funcalls >= maxfev:\n                stop = True\n                break\n\n    return OptimizeResult(fun=besty, x=bestx, nit=niter,\n                          nfev=funcalls, success=(niter > 1))\nx0 = [1.35, 0.9, 0.8, 1.1, 1.2]\nres = minimize(rosen, x0, method=custmin, options=dict(stepsize=0.05))\nres.x\narray([1., 1., 1., 1., 1.])\n```\n\n----------------------------------------\n\nTITLE: Cubic Spline Interpolation Basic Usage\nDESCRIPTION: Shows how to create and evaluate a CubicSpline interpolator with simple squared values data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import CubicSpline\nspl = CubicSpline([1, 2, 3, 4, 5, 6], [1, 4, 8, 16, 25, 36])\nspl(2.5)\n```\n\n----------------------------------------\n\nTITLE: Using Parallel Execution with scipy.fft.fft in Python\nDESCRIPTION: This example shows how to enable parallel execution for the Fast Fourier Transform function in SciPy. The 'workers' parameter specifies the number of threads or processes to use for computation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/parallel_execution.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.fft import fft\nimport numpy as np\n\nx = np.random.random(1000000)\nresult = fft(x, workers=4)\n```\n\n----------------------------------------\n\nTITLE: Comparing Legacy and New STFT Implementations - Python\nDESCRIPTION: Code example comparing the legacy stft() function with the new ShortTimeFFT class implementation using a complex-valued chirp signal. Demonstrates setup, signal generation, STFT computation, and visualization of results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from scipy.fft import fftshift\n>>> from scipy.signal import stft, istft, spectrogram, ShortTimeFFT\n\n>>> fs, N = 200, 1001  # 200 Hz sampling rate for 5 s signal\n>>> t_z = np.arange(N) / fs  # time indexes for signal\n>>> z = np.exp(2j*np.pi*70 * (t_z - 0.2*t_z**2))  # complex-valued chirp\n\n>>> nperseg, noverlap = 50, 40\n>>> win = ('gaussian', 1e-2 * fs)  # Gaussian with 0.01 s standard dev.\n\n>>> # Legacy STFT:\n>>> f0_u, t0, Sz0_u = stft(z, fs, win, nperseg, noverlap,\n...                        return_onesided=False, scaling='spectrum')\n>>> f0, Sz0 = fftshift(f0_u), fftshift(Sz0_u, axes=0)\n```\n\n----------------------------------------\n\nTITLE: Performing Kolmogorov-Smirnov Test in Python\nDESCRIPTION: Demonstrates how to use the Kolmogorov-Smirnov test to compare the sample distribution to theoretical distributions (t and normal) using SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprint('KS-statistic D = %6.3f pvalue = %6.4f' % stats.kstest(x, 't', (10,)))\nprint('KS-statistic D = %6.3f pvalue = %6.4f' % stats.kstest(x, 'norm'))\n\nd, pval = stats.kstest((x-x.mean())/x.std(), 'norm')\nprint('KS-statistic D = %6.3f pvalue = %6.4f' % (d, pval))\n```\n\n----------------------------------------\n\nTITLE: Visualizing Skew Test Null Distribution in Python\nDESCRIPTION: This snippet visualizes the null distribution expected under the assumption that the sample comes from a normal distribution. It uses Matplotlib to plot a standard normal distribution and includes a custom function 'st_plot' for plotting. Dependencies include Matplotlib and Scipy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_skewtest.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\ndist = stats.norm()\nst_val = np.linspace(-5, 5, 100)\npdf = dist.pdf(st_val)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef st_plot(ax):  # we'll reuse this\n    ax.plot(st_val, pdf)\n    ax.set_title(\"Skew Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\nst_plot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calling root_scalar with Halley Method in SciPy\nDESCRIPTION: This snippet demonstrates how to invoke the root_scalar function using the Halley method. The Halley method is a root-finding algorithm that requires function, first derivative, and second derivative information.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-halley.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _optimize.root_scalar-halley:\n\nroot_scalar(method='halley')\n----------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root_scalar\n   :impl: scipy.optimize._root_scalar._root_scalar_halley_doc\n   :method: halley\n```\n\n----------------------------------------\n\nTITLE: Performing Normal Test with scipy.stats\nDESCRIPTION: This snippet performs a normality test using `scipy.stats.normaltest` on the data in the array `x`. It calculates the test statistic and p-value, which are used to assess whether the data is likely drawn from a normal distribution. The result object `res` contains the statistic and p-value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.normaltest(x)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteAliasUrn with Probability Vector in SciPy\nDESCRIPTION: This code snippet demonstrates how to initialize a DiscreteAliasUrn object using a probability vector (pv) and a random number generator (urng).  It imports necessary modules, defines a probability vector, creates a random number generator, initializes the DiscreteAliasUrn object, and generates a random sample.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dau.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.stats.sampling import DiscreteAliasUrn\n>>> \n>>> pv = [0.18, 0.02, 0.8]\n>>> urng = np.random.default_rng()\n>>> rng = DiscreteAliasUrn(pv, random_state=urng)\n>>> rng.rvs()\n0      # may vary\n```\n\n----------------------------------------\n\nTITLE: Creating and Plotting Smoothing Splines in Python\nDESCRIPTION: Illustrates the creation of smoothing splines using make_splrep with different smoothing parameters, and plots the results alongside the original data and underlying function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.interpolate import make_splrep\n\n>>> x = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/16)\n>>> rng = np.random.default_rng()\n>>> y =  np.sin(x) + 0.4*rng.standard_normal(size=len(x))\n\n>>> import matplotlib.pyplot as plt\n>>> xnew = np.arange(0, 9/4, 1/50) * np.pi\n\n>>> plt.plot(xnew, np.sin(xnew), '-.', label='sin(x)')\n>>> plt.plot(xnew, make_splrep(x, y, s=0)(xnew), '-', label='s=0')\n>>> plt.plot(xnew, make_splrep(x, y, s=len(x))(xnew), '-', label=f's={len(x)}')\n>>> plt.plot(x, y, 'o')\n>>> plt.legend()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Binary Structures for Morphology in Python\nDESCRIPTION: Demonstrates using scipy.ndimage.generate_binary_structure to create structuring elements for binary morphology operations. Examples show 4-connected and 8-connected structures in 2D.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n>>> from scipy.ndimage import generate_binary_structure\n>>> generate_binary_structure(2, 1)\narray([[False,  True, False],\n       [ True,  True,  True],\n       [False,  True, False]], dtype=bool)\n>>> generate_binary_structure(2, 2)\narray([[ True,  True,  True],\n       [ True,  True,  True],\n       [ True,  True,  True]], dtype=bool)\n```\n\n----------------------------------------\n\nTITLE: Minimizing Function Using SR1 Quasi-Newton Approximation - Python\nDESCRIPTION: This snippet illustrates how to use the `SR1` quasi-Newton approximation for the Hessian in the `minimize` function with `trust-constr` method. The code demonstrates how to optimize the `rosen` function with provided constraints, using a two-point method for the gradient.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.optimize import SR1\n>>> res = minimize(rosen, x0, method='trust-constr',  jac='2-point', hess=SR1(),\n...                constraints=[linear_constraint, nonlinear_constraint],\n...                options={'verbose': 1}, bounds=bounds)\n# may vary\n`gtol` termination condition is satisfied.\nNumber of iterations: 12, function evaluations: 24, CG iterations: 7, optimality: 4.48e-09, constraint violation: 0.00e+00, execution time: 0.016 s.\n>>> print(res.x)\n[0.41494531 0.17010937]\n```\n\n----------------------------------------\n\nTITLE: Calculating Matrix Norms in SciPy\nDESCRIPTION: Demonstrates how to calculate different types of matrix norms using SciPy's linalg.norm function, including Frobenius norm, L1 norm, L-infinity norm, and negative norms.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> A=np.array([[1, 2], [3, 4]])\n>>> A\narray([[1, 2],\n      [3, 4]])\n>>> linalg.norm(A)\n5.4772255750516612\n>>> linalg.norm(A, 'fro') # frobenius norm is the default\n5.4772255750516612\n>>> linalg.norm(A, 1) # L1 norm (max column sum)\n6.0\n>>> linalg.norm(A, -1)\n4.0\n>>> linalg.norm(A, np.inf) # L inf norm (max row sum)\n7.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Special Functions in Python\nDESCRIPTION: This code provides implementations of several special functions not included in scipy.special, such as the binary entropy function, rectangular step function, and ramp function. It demonstrates how to use existing NumPy and SciPy functions to create these additional functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/special.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef binary_entropy(x):\n    return -(sc.xlogy(x, x) + sc.xlog1py(1 - x, -x))/np.log(2)\n\ndef step(x):\n    return 0.5*(np.sign(x) + np.sign(1 - x))\n\ndef ramp(x):\n    return np.maximum(0, x)\n```\n\n----------------------------------------\n\nTITLE: ShortTimeFFT Implementation and Plotting - Python\nDESCRIPTION: Continuation of the STFT comparison example showing the new ShortTimeFFT implementation, plotting configuration, and visualization of results using matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> # New STFT:\n>>> SFT = ShortTimeFFT.from_window(win, fs, nperseg, noverlap, fft_mode='centered',\n...                                scale_to='magnitude', phase_shift=None)\n>>> Sz1 = SFT.stft(z)\n\n>>> # Plot results:\n>>> fig1, axx = plt.subplots(2, 1, sharex='all', sharey='all',\n...                          figsize=(6., 5.))\n>>> t_lo, t_hi, f_lo, f_hi = SFT.extent(N, center_bins=True)\n>>> axx[0].set_title(r\"Legacy stft() produces $%d\\times%d$ points\" % Sz0.T.shape)\n>>> axx[0].set_xlim(t_lo, t_hi)\n>>> axx[0].set_ylim(f_lo, f_hi)\n>>> axx[1].set_title(r\"ShortTimeFFT produces $%d\\times%d$ points\" % Sz1.T.shape)\n```\n\n----------------------------------------\n\nTITLE: Extending CubicSpline interpolation domain for custom extrapolation in Python\nDESCRIPTION: This snippet demonstrates how to extend the interpolation domain of a CubicSpline by adding extra knots. It modifies the spline in-place to achieve desired extrapolation behavior while maintaining continuity of derivatives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import CubicSpline\n\ndef add_boundary_knots(spline):\n    \"\"\"\n    Add knots infinitesimally to the left and right.\n\n    Additional intervals are added to have zero 2nd and 3rd derivatives,\n    and to maintain the first derivative from whatever boundary condition\n    was selected. The spline is modified in place.\n    \"\"\"\n    # determine the slope at the left edge\n    leftx = spline.x[0]\n    lefty = spline(leftx)\n    leftslope = spline(leftx, nu=1)\n\n    # add a new breakpoint just to the left and use the\n    # known slope to construct the PPoly coefficients.\n    leftxnext = np.nextafter(leftx, leftx - 1)\n    leftynext = lefty + leftslope*(leftxnext - leftx)\n    leftcoeffs = np.array([0, 0, leftslope, leftynext])\n    spline.extend(leftcoeffs[..., None], np.r_[leftxnext])\n\n    # repeat with additional knots to the right\n    rightx = spline.x[-1]\n    righty = spline(rightx)\n    rightslope = spline(rightx,nu=1)\n    rightxnext = np.nextafter(rightx, rightx + 1)\n    rightynext = righty + rightslope * (rightxnext - rightx)\n    rightcoeffs = np.array([0, 0, rightslope, rightynext])\n    spline.extend(rightcoeffs[..., None], np.r_[rightxnext])\n\nxs = [1, 2, 3, 4, 5, 6, 7, 8]\nys = [4.5, 3.6, 1.6, 0.0, -3.3, -3.1, -1.8, -1.7]\n\nnotaknot = CubicSpline(xs,ys, bc_type='not-a-knot')\n# not-a-knot does not require additional intervals\n\nnatural = CubicSpline(xs,ys, bc_type='natural')\n# extend the natural natural spline with linear extrapolating knots\nadd_boundary_knots(natural)\n\nclamped = CubicSpline(xs,ys, bc_type='clamped')\n# extend the clamped spline with constant extrapolating knots\nadd_boundary_knots(clamped)\n\nxnew = np.linspace(min(xs) - 5, max(xs) + 5, 201)\n\nfig, axs = plt.subplots(3, 3,figsize=(12,12))\n\nsplines = [notaknot, natural, clamped]\ntitles = ['not-a-knot', 'natural', 'clamped']\n\nfor i in [0, 1, 2]:\n    for j, spline, title in zip(range(3), splines, titles):\n        axs[i, j].plot(xs, spline(xs, nu=i),'o')\n        axs[i, j].plot(xnew, spline(xnew, nu=i),'-')\n        axs[i, j].set_title(f'{title}, deriv={i}')\n\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Hessian-Vector Product for Rosenbrock Function\nDESCRIPTION: Memory-efficient function that computes the product of the Hessian matrix with an arbitrary vector without explicitly forming the full Hessian matrix. This is useful for large optimization problems.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef rosen_hess_p(x, p):\n    x = np.asarray(x)\n    Hp = np.zeros_like(x)\n    Hp[0] = (1200*x[0]**2 - 400*x[1] + 2)*p[0] - 400*x[0]*p[1]\n    Hp[1:-1] = -400*x[:-2]*p[:-2]+(202+1200*x[1:-1]**2-400*x[2:])*p[1:-1] \\\n               -400*x[1:-1]*p[2:]\n    Hp[-1] = -400*x[-2]*p[-2] + 200*p[-1]\n    return Hp\n```\n\n----------------------------------------\n\nTITLE: FFT with Windowing Example\nDESCRIPTION: Demonstrates how to apply a Blackman window to reduce spectral leakage in FFT analysis. Shows the difference between regular FFT and windowed FFT results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import fft, fftfreq\nimport numpy as np\nN = 600\nT = 1.0 / 800.0\nx = np.linspace(0.0, N*T, N, endpoint=False)\ny = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x)\nyf = fft(y)\nfrom scipy.signal.windows import blackman\nw = blackman(N)\nywf = fft(y*w)\n```\n\n----------------------------------------\n\nTITLE: Infinite Integration with Exponential Integral\nDESCRIPTION: Demonstrates integration with infinite limits by implementing the exponential integral function and comparing results with scipy.special.expn.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.integrate import quad\n>>> import numpy as np\n>>> def integrand(t, n, x):\n...     return np.exp(-x*t) / t**n\n...\n\n>>> def expint(n, x):\n...     return quad(integrand, 1, np.inf, args=(n, x))[0]\n...\n\n>>> vec_expint = np.vectorize(expint)\n\n>>> vec_expint(3, np.arange(1.0, 4.0, 0.5))\narray([ 0.1097,  0.0567,  0.0301,  0.0163,  0.0089,  0.0049])\n>>> import scipy.special as special\n>>> special.expn(3, np.arange(1.0,4.0,0.5))\narray([ 0.1097,  0.0567,  0.0301,  0.0163,  0.0089,  0.0049])\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sample from Student's t-distribution in Python\nDESCRIPTION: Creates a random sample of 1000 values from a Student's t-distribution with 10 degrees of freedom using SciPy's stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipy.stats as stats\nx = stats.t.rvs(10, size=1000)\n```\n\n----------------------------------------\n\nTITLE: Basic Integration Using quad with Bessel Function\nDESCRIPTION: Demonstrates using scipy.integrate.quad to integrate a Bessel function over a finite interval [0, 4.5], showing both the numerical result and comparison with analytical solution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import scipy.integrate as integrate\n>>> import scipy.special as special\n>>> result = integrate.quad(lambda x: special.jv(2.5,x), 0, 4.5)\n>>> result\n(1.1178179380783249, 7.8663172481899801e-09)\n\n>>> from numpy import sqrt, sin, cos, pi\n>>> I = sqrt(2/pi)*(18.0/27*sqrt(2)*cos(4.5) - 4.0/27*sqrt(2)*sin(4.5) +\n...                 sqrt(2*pi) * special.fresnel(3/sqrt(pi))[0])\n>>> I\n1.117817938088701\n\n>>> print(abs(result[0]-I))\n1.03761443881e-11\n```\n\n----------------------------------------\n\nTITLE: Performing 1D Convolution with SciPy\nDESCRIPTION: This snippet demonstrates how to use the convolve function from SciPy's signal module to perform 1D convolution on two input sequences. It shows the default 'full' output mode and the 'same' output mode.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> x = np.array([1.0, 2.0, 3.0])\n>>> h = np.array([0.0, 1.0, 0.0, 0.0, 0.0])\n>>> signal.convolve(x, h)\narray([ 0.,  1.,  2.,  3.,  0.,  0.,  0.])\n>>> signal.convolve(x, h, 'same')\narray([ 2.,  3.,  0.])\n```\n\n----------------------------------------\n\nTITLE: Defining Nonlinear Constraints in SciPy\nDESCRIPTION: Creates a NonlinearConstraint object to define nonlinear constraints with custom functions for constraint evaluation, Jacobian, and Hessian.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ndef cons_f(x):\n    return [x[0]**2 + x[1], x[0]**2 - x[1]]\n\ndef cons_J(x):\n    return [[2*x[0], 1], [2*x[0], -1]]\n\ndef cons_H(x, v):\n    return v[0]*np.array([[2, 0], [0, 0]]) + v[1]*np.array([[2, 0], [0, 0]])\n\nfrom scipy.optimize import NonlinearConstraint\nnonlinear_constraint = NonlinearConstraint(cons_f, -np.inf, 1, jac=cons_J, hess=cons_H)\n```\n\n----------------------------------------\n\nTITLE: Solving Batch of Linear Systems in Python\nDESCRIPTION: This snippet demonstrates how to solve a batch of linear systems, each with a single right-hand side, using SciPy's linalg.solve function with 3D input arrays.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nA = rng.random((3, 5, 5))\nb = rng.random((3, 5, 1))  # batch shape (3,), core shape (5, 1)\nlinalg.solve(A, b).shape\n```\n\n----------------------------------------\n\nTITLE: Performing Chi-Square Test for Distribution Fit in Python\nDESCRIPTION: Uses the chi-square test to compare observed frequencies in the sample to expected frequencies from t and normal distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nquantiles = [0.0, 0.01, 0.05, 0.1, 1-0.10, 1-0.05, 1-0.01, 1.0]\ncrit = stats.t.ppf(quantiles, 10)\nn_sample = x.size\nfreqcount = np.histogram(x, bins=crit)[0]\ntprob = np.diff(quantiles)\nnprob = np.diff(stats.norm.cdf(crit))\ntch, tpval = stats.chisquare(freqcount, tprob*n_sample)\nnch, npval = stats.chisquare(freqcount, nprob*n_sample)\nprint('chisquare for t:      chi2 = %6.2f pvalue = %6.4f' % (tch, tpval))\nprint('chisquare for normal: chi2 = %6.2f pvalue = %6.4f' % (nch, npval))\n```\n\n----------------------------------------\n\nTITLE: Integration with Additional Parameters\nDESCRIPTION: Shows how to use quad with a function that takes additional parameters using the args parameter to integrate ax^2 + b from 0 to 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.integrate import quad\n>>> def integrand(x, a, b):\n...     return a*x**2 + b\n...\n>>> a = 2\n>>> b = 1\n>>> I = quad(integrand, 0, 1, args=(a,b))\n>>> I\n(1.6666666666666667, 1.8503717077085944e-14)\n```\n\n----------------------------------------\n\nTITLE: Designing FIR Filters with firwin in Python\nDESCRIPTION: This example demonstrates how to design low-pass and band-stop FIR filters using scipy.signal.firwin, and plot their frequency responses using scipy.signal.freqz.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipy.signal as signal\nimport matplotlib.pyplot as plt\n\nb1 = signal.firwin(40, 0.5)\nb2 = signal.firwin(41, [0.3, 0.8])\nw1, h1 = signal.freqz(b1)\nw2, h2 = signal.freqz(b2)\n\nplt.title('Digital filter frequency response')\nplt.plot(w1, 20*np.log10(np.abs(h1)), 'b')\nplt.plot(w2, 20*np.log10(np.abs(h2)), 'r')\nplt.ylabel('Amplitude Response (dB)')\nplt.xlabel('Frequency (rad/sample)')\nplt.grid()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Negative Log-Likelihood Function\nDESCRIPTION: This snippet defines a function `nllf` to calculate the negative log-likelihood for a given shape `c` and scale parameter. It creates a Weibull distribution object, calculates the log probability density function (logpdf) for each data point, and returns the negative sum of these log probabilities.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n\"def nllf(x):\n    c, scale = x  # pass (only) `c` and `scale` as elements of `x`\n    X = Weibull(c=c) * scale\n    return -X.logpdf(data).sum()\n\nnllf((c_, scale_))\"\n```\n\n----------------------------------------\n\nTITLE: Solving Second-Order ODE with solve_ivp in Python\nDESCRIPTION: Demonstrates solving a second-order ODE (Airy equation) using scipy.integrate.solve_ivp. Compares the numerical solution to the analytical Airy function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.integrate import solve_ivp\nfrom scipy.special import gamma, airy\ny1_0 = +1 / 3**(2/3) / gamma(2/3)\ny0_0 = -1 / 3**(1/3) / gamma(1/3)\ny0 = [y0_0, y1_0]\ndef func(t, y):\n    return [t*y[1],y[0]]\n\nt_span = [0, 4]\nsol1 = solve_ivp(func, t_span, y0)\nprint(\"sol1.t: {}\".format(sol1.t))\nprint(\"sol1.y[1]: {}\".format(sol1.y[1]))\nprint(\"airy(sol.t)[0]:  {}\".format(airy(sol1.t)[0]))\n\nrtol, atol = (1e-8, 1e-8)\nsol2 = solve_ivp(func, t_span, y0, rtol=rtol, atol=atol)\nprint(\"sol2.y[1][::6]: {}\".format(sol2.y[1][0::6]))\nprint(\"airy(sol2.t)[0][::6]: {}\".format(airy(sol2.t)[0][::6]))\n\nimport numpy as np\nt = np.linspace(0, 4, 100)\nsol3 = solve_ivp(func, t_span, y0, t_eval=t)\n\ndef gradient(t, y):\n    return [[0,t], [1,0]]\nsol4 = solve_ivp(func, t_span, y0, method='Radau', jac=gradient)\n```\n\n----------------------------------------\n\nTITLE: Generating Samples and Plotting the Histogram\nDESCRIPTION: This code snippet generates random samples using `NumericalInverseHermite` and plots a histogram of the generated samples, comparing it to the true probability density function (PDF) of the distribution. This helps visually assess whether the generated random variates follow the expected distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import matplotlib.pyplot as plt\n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> rng = NumericalInverseHermite(dist, random_state=urng)\n>>> rvs = rng.rvs(10000)\n>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000)\n>>> fx = norm.pdf(x)\n>>> plt.plot(x, fx, 'r-', lw=2, label='true distribution')\n>>> plt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates')\n>>> plt.xlabel('x')\n>>> plt.ylabel('PDF(x)')\n>>> plt.title('Numerical Inverse Hermite Samples')\n>>> plt.legend()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Discrepancy with SciPy QMC\nDESCRIPTION: This snippet calculates the discrepancy of two sets of points using `scipy.stats.qmc.discrepancy`. It first scales the point sets using `scipy.stats.qmc.scale` to fit within specified bounds. The lower the discrepancy, the more uniform the sample is.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/quasi_monte_carlo.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.stats import qmc\n>>> space_1 = np.array([[1, 3], [2, 6], [3, 2], [4, 5], [5, 1], [6, 4]])\n>>> space_2 = np.array([[1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 6]])\n>>> l_bounds = [0.5, 0.5]\n>>> u_bounds = [6.5, 6.5]\n>>> space_1 = qmc.scale(space_1, l_bounds, u_bounds, reverse=True)\n>>> space_2 = qmc.scale(space_2, l_bounds, u_bounds, reverse=True)\n>>> qmc.discrepancy(space_1)\n0.008142039609053464\n>>> qmc.discrepancy(space_2)\n0.010456854423869011\n```\n\n----------------------------------------\n\nTITLE: Comparing Eigenvalues Between Dense Matrix and LinearOperator for First-Derivative\nDESCRIPTION: This snippet creates both a dense matrix and a LinearOperator version of a first-derivative operation, then compares their eigenvalues using eig() for the dense matrix and eigs() for the operator. It demonstrates that both approaches yield matching imaginary eigenvalues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/arpack.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> N = 21\n>>> D = np.diag(0.5*np.ones(N-1), k=1) - np.diag(0.5*np.ones(N-1), k=-1)\n>>> D[0] = D[-1] = 0 # take away edge effects\n>>> Dop = FirstDerivative(N, dtype=np.float64)\n\n>>> evals_all, evecs_all = eig(D)\n>>> evals_large, evecs_large = eigs(Dop, 4, which='LI')\n>>> evals_all_imag = evals_all.imag\n>>> isort_imag = np.argsort(np.abs(evals_all_imag))\n>>> evals_all_imag = evals_all_imag[isort_imag]\n>>> evals_large_imag = evals_large.imag\n>>> isort_imag = np.argsort(np.abs(evals_large_imag))\n>>> evals_large_imag = evals_large_imag[isort_imag]\n>>> evals_all_imag[-4:]\narray([-0.95105652, 0.95105652, -0.98768834, 0.98768834])\n>>> evals_large_imag\narray([0.95105652, -0.95105652, 0.98768834, -0.98768834]) # may vary\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Arguments to Geometric Transform in Python\nDESCRIPTION: Shows how to pass additional arguments to the mapping function in scipy.ndimage.geometric_transform. This allows for more flexible transformations by parameterizing the shift values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n>>> def shift_func(output_coordinates, s0, s1):\n...     return (output_coordinates[0] - s0, output_coordinates[1] - s1)\n...\n>>> geometric_transform(a, shift_func, extra_arguments = (0.5, 0.5))\narray([[ 0.    ,  0.    ,  0.    ],\n       [ 0.    ,  1.3625,  2.7375],\n       [ 0.    ,  4.8125,  6.1875],\n       [ 0.    ,  8.2625,  9.6375]])\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters for SciPy Special Ufuncs\nDESCRIPTION: Example showing the correct format for documenting parameters of universal functions in scipy.special. Demonstrates how to specify array_like parameter types and document value constraints.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/special_ufuncs.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n  Parameters\n  ----------\n  z : array_like\n      Real or complex valued argument\n```\n\n----------------------------------------\n\nTITLE: Controlling BLAS/LAPACK Threading with threadpoolctl in Python\nDESCRIPTION: This snippet demonstrates how to use threadpoolctl to control the threading behavior of BLAS/LAPACK libraries used by SciPy and NumPy. It's important for managing multi-threaded execution in linear algebra operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/parallel_execution.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom threadpoolctl import threadpool_limits\n\nwith threadpool_limits(limits=1, user_api='blas'):\n    # Your code here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Applying a 2D FIR Filter to an Image\nDESCRIPTION: This code demonstrates how to apply a 2D FIR filter to an image using SciPy's signal.fftconvolve function. It creates a simple filter with two non-zero points and applies it to a grayscale image of a face.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import signal, datasets\n>>> import matplotlib.pyplot as plt\n\n>>> image = datasets.face(gray=True)\n>>> w = np.zeros((50, 50))\n>>> w[0][0] = 1.0\n>>> w[49][25] = 1.0\n>>> image_new = signal.fftconvolve(image, w)\n\n>>> plt.figure()\n>>> plt.imshow(image)\n>>> plt.gray()\n>>> plt.title('Original image')\n>>> plt.show()\n\n>>> plt.figure()\n>>> plt.imshow(image_new)\n>>> plt.gray()\n>>> plt.title('Filtered image')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Correlation with generic_filter in Python\nDESCRIPTION: Shows how to implement a 2D correlation filter using the generic_filter function. The correlation operation is performed with a custom filter function that processes the neighborhood values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.arange(12).reshape(3,4)\n>>> correlate(a, [[1, 0], [0, 3]])\narray([[ 0,  3,  7, 11],\n       [12, 15, 19, 23],\n       [28, 31, 35, 39]])\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays for Dunnett's Test with NumPy in Python\nDESCRIPTION: This code snippet initializes NumPy arrays representing blood count data for a control group and two experimental drug groups. This setup is necessary for performing Dunnett's test, wherein we compare these groups against the single control group. The arrays represent blood cell counts in millions per cubic millimeter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_dunnett.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\ncontrol = np.array([7.40, 8.50, 7.20, 8.24, 9.84, 8.32])\ndrug_a = np.array([9.76, 8.80, 7.68, 9.36])\ndrug_b = np.array([12.80, 9.68, 12.16, 9.20, 10.55])\n```\n\n----------------------------------------\n\nTITLE: Monte Carlo Simulation for Null Distribution with SciPy in Python\nDESCRIPTION: This snippet uses a Monte Carlo simulation to generate a null distribution by sampling from independent normal distributions and calculating Pearson's statistic. SciPy is required to perform the simulation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nrng = np.random.default_rng(332520619051409741187796892627751113442)\n\ndef statistic(x, y, axis):\n    return stats.pearsonr(x, y, axis=axis).statistic  # ignore pvalue\n\nref = stats.monte_carlo_test((x, y), rvs=(rng.standard_normal, rng.standard_normal),\n                             statistic=statistic, alternative='greater', n_resamples=9999)\n\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nax.hist(ref.null_distribution, np.linspace(-1, 1, 26), density=True)\nax.legend(['exact null distribution (independent, normally-distributed observations)',\n           f'Monte Carlo null distribution \\n({len(ref.null_distribution)} permutations)'])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Normality Test on Standardized Data with SciPy in Python\nDESCRIPTION: This code snippet demonstrates how to perform a normality test on standardized data using SciPy's stats.normaltest function. It prints the test statistic and p-value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nprint('normaltest teststat = %6.3f pvalue = %6.4f' %\n       stats.normaltest((x-x.mean())/x.std()))\n```\n\n----------------------------------------\n\nTITLE: Parallel Minimization with Pool.map\nDESCRIPTION: This snippet demonstrates parallel minimization using the `minimize` function with `multiprocessing.Pool` and `map`. It shows how to use a map-like callable to parallelize the evaluation of the objective function and measures the execution time using `%timeit`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nNow the parallel version::\n\n    In [4]: with Pool() as pwl:  # parallel approach\n    ...         %timeit minimize(slow_func, x0, method='L-BFGS-B', options={'workers':pwl.map})\n    70.5 ms ± 146 μs per loop (mean ± std. dev. of 7 runs, 1 loop each)  # may vary\n```\n\n----------------------------------------\n\nTITLE: Fitting Bivariate Spline on Gridded Data with SciPy (Python)\nDESCRIPTION: This snippet demonstrates how to fit a smoothing tensor product spline using the `RectBivariateSpline` class from SciPy. It showcases how to create 2D grids using `numpy`, fit the spline to the data, and visualize the results using `matplotlib`. The default smoothing factor `s` is set to 0, and it is recommended to specify it explicitly for better results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import RectBivariateSpline\n\nx = np.arange(-5.01, 5.01, 0.25)        # the grid is an outer product\n\ny = np.arange(-5.01, 7.51, 0.25)        # of x and y arrays\n\nxx, yy = np.meshgrid(x, y, indexing='ij')\nz = np.sin(xx**2 + 2.*yy**2)            # z array needs to be 2-D\n\nfunc = RectBivariateSpline(x, y, z, s=0)\n\nxnew = np.arange(-5.01, 5.01, 1e-2)\nynew = np.arange(-5.01, 7.51, 1e-2)\nznew = func(xnew, ynew)\n\nplt.imshow(znew)\nplt.colorbar()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Element-wise Matching with SciPy Distributions\nDESCRIPTION: Demonstrates how SciPy distributions perform element-wise matching when arrays of probabilities and parameters have the same shape.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> stats.t.isf([0.1, 0.05, 0.01], [10, 11, 12])\narray([ 1.37218364,  1.79588482,  2.68099799])\n```\n\n----------------------------------------\n\nTITLE: Normality Test on Normally Distributed Data with SciPy in Python\nDESCRIPTION: This code demonstrates how to perform a normality test on normally distributed data using SciPy. It generates 1000 samples from a normal distribution and applies the normaltest function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nprint('normaltest teststat = %6.3f pvalue = %6.4f' %\n              stats.normaltest(stats.norm.rvs(size=1000)))\n```\n\n----------------------------------------\n\nTITLE: Calculating Spearman's Rho with SciPy\nDESCRIPTION: This snippet calculates Spearman's rank-order correlation coefficient between two datasets `x` and `y` using `scipy.stats.spearmanr`. It then extracts the correlation statistic from the result.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.spearmanr(x, y)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Solving Constrained Optimization Problem with SciPy\nDESCRIPTION: Uses SciPy's minimize function with the 'trust-constr' method to solve a constrained optimization problem, incorporating previously defined constraints.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nx0 = np.array([0.5, 0])\nres = minimize(rosen, x0, method='trust-constr', jac=rosen_der, hess=rosen_hess,\n               constraints=[linear_constraint, nonlinear_constraint],\n               options={'verbose': 1}, bounds=bounds)\nprint(res.x)\n```\n\n----------------------------------------\n\nTITLE: Using RegularGridInterpolator with Batch Dimensions in Python\nDESCRIPTION: This snippet illustrates how to use RegularGridInterpolator with batch dimensions, allowing interpolation of multiple functions simultaneously on a 3D grid.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_regular_grid.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nn = 5   # the number of batch components\n\n# make a 3D grid\nx1 = np.linspace(-np.pi, np.pi, 10)\nx2 = np.linspace(0.0, np.pi, 15)\nx3 = np.linspace(0.0, np.pi/2, 20)\npoints = (x1, x2, x3)\n\n# define a function and sample it on the grid\ndef f(x1, x2, x3, n):\n    lst = [np.sin(np.pi*x1/2) * np.exp(x2/2) + x3 + i for i in range(n)]\n    return np.asarray(lst)\n\nX1, X2, X3 = np.meshgrid(x1, x2, x3, indexing=\"ij\")\nvalues = f(X1, X2, X3, n)\nvalues.shape\n\n# prepare the data and construct the interpolator\nvalues = np.moveaxis(values, 0, -1)\nvalues.shape\nrgi = RegularGridInterpolator(points, values)\n\n# Coordinates to compute the interpolation at\nx = np.asarray([0.2, np.pi/2.1, np.pi/4.1])\n\n# evaluate\nrgi(x).shape\n```\n\n----------------------------------------\n\nTITLE: LSQUnivariateSpline with Non-Uniform Knots in Python\nDESCRIPTION: This code demonstrates the use of SciPy's LSQUnivariateSpline class, which allows for specifying custom knot locations for the spline interpolation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n# LSQUnivarateSpline with non-uniform knots\nt = [np.pi/2-.1, np.pi/2+.1, 3*np.pi/2-.1, 3*np.pi/2+.1]\ns = interpolate.LSQUnivariateSpline(x, y, t, k=2)\nynew = s(xnew)\n\nplt.figure()\nplt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b')\n```\n\n----------------------------------------\n\nTITLE: Watershed transform using Image Foresting Transform\nDESCRIPTION: This example demonstrates how to apply a watershed transform using the Image Foresting Transform (`watershed_ift`) to segment an image based on markers. It uses an input array and a marker array to delineate objects and background, resulting in a segmented image.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> input = np.array([[0, 0, 0, 0, 0, 0, 0],\n>>>                   [0, 1, 1, 1, 1, 1, 0],\n>>>                   [0, 1, 0, 0, 0, 1, 0],\n>>>                   [0, 1, 0, 0, 0, 1, 0],\n>>>                   [0, 1, 0, 0, 0, 1, 0],\n>>>                   [0, 1, 1, 1, 1, 1, 0],\n>>>                   [0, 0, 0, 0, 0, 0, 0]], np.uint8)\n>>> markers = np.array([[1, 0, 0, 0, 0, 0, 0],\n>>>                     [0, 0, 0, 0, 0, 0, 0],\n>>>                     [0, 0, 0, 0, 0, 0, 0],\n>>>                     [0, 0, 0, 2, 0, 0, 0],\n>>>                     [0, 0, 0, 0, 0, 0, 0],\n>>>                     [0, 0, 0, 0, 0, 0, 0],\n>>>                     [0, 0, 0, 0, 0, 0, 0]], np.int8)\n>>> from scipy.ndimage import watershed_ift\n>>> watershed_ift(input, markers)\narray([[1, 1, 1, 1, 1, 1, 1],\n\t    [1, 1, 2, 2, 2, 1, 1],\n            [1, 2, 2, 2, 2, 2, 1],\n            [1, 2, 2, 2, 2, 2, 1],\n            [1, 2, 2, 2, 2, 2, 1],\n            [1, 1, 2, 2, 2, 1, 1],\n            [1, 1, 1, 1, 1, 1, 1]], dtype=int8)\n```\n\n----------------------------------------\n\nTITLE: Computing Singular Value Decomposition in SciPy\nDESCRIPTION: Shows how to perform Singular Value Decomposition (SVD) on a matrix using linalg.svd. The example creates a 2x3 matrix and starts the SVD computation process.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,2,3],[4,5,6]])\n>>> A\n```\n\n----------------------------------------\n\nTITLE: Monte Carlo Test for Normality\nDESCRIPTION: This snippet demonstrates the use of `scipy.stats.monte_carlo_test` to estimate the p-value for the normality test, particularly useful for small sample sizes where the asymptotic approximation is inaccurate.  It defines a statistic function that extracts the normaltest statistic and compares it against a null distribution generated using `stats.norm.rvs`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(x, axis):\n    # Get only the `normaltest` statistic; ignore approximate p-value\n    return stats.normaltest(x, axis=axis).statistic\nres = stats.monte_carlo_test(x, stats.norm.rvs, statistic,\n                             alternative='greater')\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nax.hist(res.null_distribution, np.linspace(0, 25, 50),\n        density=True)\nax.legend(['asymptotic approximation (many observations)',\n           'Monte Carlo approximation (11 observations)'])\nax.set_xlim(0, 14)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Rosenbrock Function Minimization using Nelder-Mead\nDESCRIPTION: Demonstrates minimizing the Rosenbrock function using the Nelder-Mead simplex algorithm. Shows basic usage of scipy.optimize.minimize with function definition and initial guess vector.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef rosen(x):\n    \"\"\"The Rosenbrock function\"\"\"\n    return sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0)\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nres = minimize(rosen, x0, method='nelder-mead',\n               options={'xatol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: Finding Eigenvalues and Eigenvectors with SciPy\nDESCRIPTION: Demonstrates calculating eigenvalues and eigenvectors of a 2x2 matrix using linalg.eig. The example verifies that the eigenvectors are normalized and satisfy the eigenvalue equation Av = λv.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1, 2], [3, 4]])\n>>> la, v = linalg.eig(A)\n>>> l1, l2 = la\n>>> print(l1, l2)   # eigenvalues\n(-0.3722813232690143+0j) (5.372281323269014+0j)\n>>> print(v[:, 0])   # first eigenvector\n[-0.82456484  0.56576746]\n>>> print(v[:, 1])   # second eigenvector\n[-0.41597356 -0.90937671]\n>>> print(np.sum(abs(v**2), axis=0))  # eigenvectors are unitary\n[1. 1.]\n>>> v1 = np.array(v[:, 0]).T\n>>> print(linalg.norm(A.dot(v1) - l1*v1))  # check the computation\n3.23682852457e-16\n```\n\n----------------------------------------\n\nTITLE: Distribution Shifting and Scaling\nDESCRIPTION: Demonstrates how to modify distribution location and scale parameters\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nnorm.stats(loc=3, scale=4, moments=\"mv\")\nexpon.mean(scale=3.)\nuniform.cdf([0, 1, 2, 3, 4, 5], loc=1, scale=4)\n```\n\n----------------------------------------\n\nTITLE: Executing Chi-square Test Using SciPy in Python\nDESCRIPTION: This snippet performs a chi-square test with SciPy, comparing the observed and expected frequencies to determine whether the differences are significant. The test hypothesis is based on whether the proportions of foraging events match the tree canopy volumes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_chisquare.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import chisquare\nchisquare(f_obs=f_obs, f_exp=f_exp)\n```\n\n----------------------------------------\n\nTITLE: Finding Small Eigenvalues with ARPACK\nDESCRIPTION: Example showing different approaches to finding small eigenvalues, including increasing tolerance, increasing maximum iterations, and using shift-invert mode.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/arpack.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nevals_small, evecs_small = eigsh(X, 3, which='SM', tol=1E-2)\nprint(evals_all[:3])\nprint(evals_small)\nprint(np.dot(evecs_small.T, evecs_all[:,:3]))\n\nevals_small, evecs_small = eigsh(X, 3, sigma=0, which='LM')\nprint(evals_all[:3])\nprint(evals_small)\nprint(np.dot(evecs_small.T, evecs_all[:,:3]))\n```\n\n----------------------------------------\n\nTITLE: Timing odeint for Gray-Scott System With Banded Matrix Optimization\nDESCRIPTION: This code times the performance of solving the Gray-Scott system using SciPy's odeint when specifying the banded structure of the Jacobian matrix with ml=2 and mu=2.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n%timeit solb = odeint(grayscott1d, y0, t, args=(f, k, Du, Dv, dx), ml=2, mu=2)\n# 10 loops, best of 3: 191 ms per loop\n```\n\n----------------------------------------\n\nTITLE: Integrating Polynomials with Simpson's Rule in Python\nDESCRIPTION: Demonstrates using scipy.integrate.simpson to integrate polynomial functions. Shows exact results for polynomials up to order 3 with equally spaced samples.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\ndef f1(x):\n   return x**2\n\ndef f2(x):\n   return x**3\n\nx = np.array([1,3,4])\ny1 = f1(x)\nfrom scipy import integrate\nI1 = integrate.simpson(y1, x=x)\nprint(I1)\n\ny2 = f2(x)\nI2 = integrate.simpson(y2, x=x)\nprint(I2)\n```\n\n----------------------------------------\n\nTITLE: Permutation Test for Pearson's Correlation in Python\nDESCRIPTION: This snippet performs a permutation test using SciPy to compute the exact null distribution under the hypothesis that the variables are independent, but not necessarily normally distributed. The resulting p-value is outputted.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nres = stats.pearsonr(x, y, alternative='greater', method=stats.PermutationMethod())\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Generating Quasi-Monte Carlo Samples in SciPy\nDESCRIPTION: This snippet demonstrates the generation of quasi-random samples using SciPy's `stats.qmc.Sobol` engine and compares them with pseudo-random samples. It initializes a normal distribution, generates both quasi-random and pseudo-random samples, and then plots histograms of the samples to visually compare their distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nX = stats.Normal()\n\nrng = np.random.default_rng(7824387278234)\nqrng = stats.qmc.Sobol(1, rng=rng)  # instantiate a QMCEngine\n\nbins = np.linspace(-3.5, 3.5, 31)\nplt.hist(X.sample(512, rng=qrng), bins, alpha=0.5, label='quasi-random')\nplt.hist(X.sample(512, rng=rng), bins, alpha=0.5, label='pseudo-random')\nplt.title('Histogram of normally-distributed sample')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Minimizing Rosenbrock Function using Newton-CG Method with Full Hessian\nDESCRIPTION: Example of using SciPy's minimize function with the Newton-CG method to optimize the Rosenbrock function. This approach utilizes the full Hessian matrix computed by the rosen_hess function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nres = minimize(rosen, x0, method='Newton-CG',\n               jac=rosen_der, hess=rosen_hess,\n               options={'xtol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: Plotting Pole Zero Plot in Python\nDESCRIPTION: This code snippet visualizes an IIR filter's poles and zeros in the complex plane, using SciPy to convert filter coefficients to zeros, poles, and gain. Matplotlib is used for plotting. The output is a plot with blue X markers for zeros and red dots for poles in the complex plane.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n>>> z, p, k = signal.tf2zpk(b, a)\n\n>>> plt.plot(np.real(z), np.imag(z), 'ob', markerfacecolor='none')\n>>> plt.plot(np.real(p), np.imag(p), 'xr')\n>>> plt.legend(['Zeros', 'Poles'], loc=2)\n\n>>> plt.title('Pole / Zero Plot')\n>>> plt.xlabel('Real')\n>>> plt.ylabel('Imaginary')\n>>> plt.grid()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculate p-value from Chi-Square Test\nDESCRIPTION: This code snippet retrieves the p-value from the `chi2_contingency` result object. The p-value represents the probability of observing the given data (or more extreme data) if the null hypothesis is true. This value is then used to determine the statistical significance of the test, allowing for a decision on whether to reject the null hypothesis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_chi2_contingency.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Comparing FIR and IIR Filter Cutoff Frequencies in Python\nDESCRIPTION: This code compares the cutoff frequencies of FIR and IIR filters, demonstrating that FIR filters have a cutoff at half-amplitude (-6dB) while IIR filters have a cutoff at half-power (-3dB).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom scipy import signal as sig\n\nfs = 16000\nb = sig.firwin(101, 2500, fs=fs)\nf, h_fft = sig.freqz(b, fs=fs)\nh_amp = 20 * np.log10(np.abs(h_fft))\n_, ax = plt.subplots(layout=\"constrained\")\nax.plot(f, h_amp, label=\"FIR\")\nax.grid(True)\n\nb, a = sig.iirfilter(15, 2500, btype=\"low\", fs=fs)\nf, h_fft = sig.freqz(b, a, fs=fs)\nh_amp = 20 * np.log10(np.abs(h_fft))\nax.plot(f, h_amp, label=\"IIR\")\nax.set(xlim=[2100, 2900], ylim=[-10, 2])\nax.set(xlabel=\"Frequency (Hz)\", ylabel=\"Amplitude Response [dB]\")\nax.legend()\n```\n\n----------------------------------------\n\nTITLE: Gradient Magnitude Calculation Using Sobel Filter\nDESCRIPTION: Implementation example of generic_gradient_magnitude using the Sobel operator for calculating first derivatives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\na = np.zeros((5, 5))\na[2, 2] = 1\nfrom scipy.ndimage import sobel, generic_gradient_magnitude\ngeneric_gradient_magnitude(a, sobel)\n```\n\n----------------------------------------\n\nTITLE: Implementing Differential Evolution - SciPy Python\nDESCRIPTION: The `scipy.optimize.differential_evolution` function implements a global optimization algorithm. It is well-suited for finding the global minimum of multivariate functions and is notable for its stochastic nature, not relying on gradient methods, making it applicable to a wider range of problems, albeit with potentially more function evaluations required.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.differential_evolution\n\n```\n\n----------------------------------------\n\nTITLE: Plotting B-spline Basis Elements in Python\nDESCRIPTION: This code snippet illustrates how to create and plot B-spline basis elements of degree 3 using SciPy's BSpline class.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nk = 3      # cubic splines\nt = [0., 1.4, 2., 3.1, 5.]   # internal knots\nt = np.r_[[0]*k, t, [5]*k]   # add boundary knots\n\nfrom scipy.interpolate import BSpline\nimport matplotlib.pyplot as plt\nfor j in [-2, -1, 0, 1, 2]:\n    a, b = t[k+j], t[-k+j-1]\n    xx = np.linspace(a, b, 101)\n    bspl = BSpline.basis_element(t[k+j:-k+j])\n    plt.plot(xx, bspl(xx), label=f'j = {j}')\nplt.legend(loc='best')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Subclassing QMCEngine with RandomEngine in SciPy\nDESCRIPTION: This code demonstrates how to create a custom QMC engine by subclassing `scipy.stats.qmc.QMCEngine`. It wraps NumPy's `random.Generator` to provide a basic random number generator as a QMC engine. The implementation requires overriding the `_random`, `reset`, and `fast_forward` methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/quasi_monte_carlo.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.stats import qmc\n>>> class RandomEngine(qmc.QMCEngine):\n...     def __init__(self, d, seed=None):\n...         super().__init__(d=d, seed=seed)\n...         self.rng = np.random.default_rng(self.rng_seed)\n...\n...\n...     def _random(self, n=1, *, workers=1):\n...         return self.rng.random((n, self.d))\n...\n...\n...     def reset(self):\n...         self.rng = np.random.default_rng(self.rng_seed)\n...         self.num_generated = 0\n...         return self\n...\n...\n...     def fast_forward(self, n):\n...         self.random(n)\n...         return self\n```\n\n----------------------------------------\n\nTITLE: Computing Hessian Matrix for Rosenbrock Function in Python\nDESCRIPTION: Function to compute the full Hessian matrix of the Rosenbrock function for use with Newton-CG optimization method. It constructs the Hessian using diagonal matrices and vectors for efficient computation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef rosen_hess(x):\n    x = np.asarray(x)\n    H = np.diag(-400*x[:-1],1) - np.diag(400*x[:-1],-1)\n    diagonal = np.zeros_like(x)\n    diagonal[0] = 1200*x[0]**2-400*x[1]+2\n    diagonal[-1] = 200\n    diagonal[1:-1] = 202 + 1200*x[1:-1]**2 - 400*x[2:]\n    H = H + np.diag(diagonal)\n    return H\n```\n\n----------------------------------------\n\nTITLE: Computing Edge Image Using Spline Filtering in Python\nDESCRIPTION: Demonstrates how to use spline filtering to compute an edge-image (second derivative of smoothed spline) of a sample image. Uses cspline2d and sepfir2d functions from scipy.signal with mirror-symmetric boundary conditions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import signal, datasets\n>>> import matplotlib.pyplot as plt\n\n>>> image = datasets.face(gray=True).astype(np.float32)\n>>> derfilt = np.array([1.0, -2, 1.0], dtype=np.float32)\n>>> ck = signal.cspline2d(image, 8.0)\n>>> deriv = (signal.sepfir2d(ck, derfilt, [1]) +\n...          signal.sepfir2d(ck, [1], derfilt))\n```\n\nLANGUAGE: Python\nCODE:\n```\nlaplacian = np.array([[0,1,0], [1,-4,1], [0,1,0]], dtype=np.float32)\nderiv2 = signal.convolve2d(ck,laplacian,mode='same',boundary='symm')\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> plt.figure()\n>>> plt.imshow(image)\n>>> plt.gray()\n>>> plt.title('Original image')\n>>> plt.show()\n\n>>> plt.figure()\n>>> plt.imshow(deriv)\n>>> plt.gray()\n>>> plt.title('Output of spline edge filter')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Word Graph using Hamming Distance\nDESCRIPTION: Builds a sparse graph using Hamming distance to connect words that differ by one letter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/csgraph.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.spatial.distance import pdist, squareform\nfrom scipy.sparse import csr_matrix\nhamming_dist = pdist(word_bytes, metric='hamming')\ngraph = csr_matrix(squareform(hamming_dist < 1.5 / 3))\n```\n\n----------------------------------------\n\nTITLE: Calculating Determinants of Matrix Batch Using List Comprehension\nDESCRIPTION: This snippet shows how to calculate determinants for a batch of matrices using a list comprehension, which applies linalg.det to each matrix in the batch.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[linalg.det(A) for A in batch]\n```\n\n----------------------------------------\n\nTITLE: Clustering Example with PyTorch Tensors Using Array API Standard\nDESCRIPTION: Demonstrates using SciPy's cluster.vq.vq function with PyTorch tensors as inputs. This example shows how array API standard support enables working with non-NumPy arrays while maintaining the expected tensor type in the output.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import torch\n>>> from scipy.cluster.vq import vq\n>>> code_book = torch.tensor([[1., 1., 1.],\n...                           [2., 2., 2.]])\n>>> features  = torch.tensor([[1.9, 2.3, 1.7],\n...                           [1.5, 2.5, 2.2],\n...                           [0.8, 0.6, 1.7]])\n>>> code, dist = vq(features, code_book)\n>>> code\ntensor([1, 1, 0], dtype=torch.int32)\n>>> dist\ntensor([0.4359, 0.7348, 0.8307])\n```\n\n----------------------------------------\n\nTITLE: Performing Kurtosis Test Using SciPy in Python\nDESCRIPTION: This snippet uses SciPy to perform a kurtosis test on the data array 'x'. It calculates the kurtosis statistic to assess if the sample data is normally distributed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kurtosistest.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy import stats\nres = stats.kurtosistest(x)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: RectBivariateSpline Implementation\nDESCRIPTION: Example showing how to replace interp2d with RectBivariateSpline for regular grid interpolation\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/interp_transition_guide.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nr = RectBivariateSpline(x, y, z.T)\nrt = lambda xnew, ynew: r(xnew, ynew).T\nznew_r = plot(rt, xnew, ynew)\n```\n\n----------------------------------------\n\nTITLE: Creating a B-spline Design Matrix in SciPy\nDESCRIPTION: This code demonstrates how to create a design matrix in the B-spline basis for non-parametric regression. It constructs a 4-regular knot vector for cubic splines and builds a sparse design matrix for evaluation points.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> t = [0., 0., 0., 0., 2., 3., 4., 6., 6., 6., 6.]\n\n>>> xnew = [1, 2, 3]\n\n>>> from scipy.interpolate import BSpline\n>>> mat = BSpline.design_matrix(xnew, t, k=3)\n>>> mat\n<Compressed Sparse Row sparse array of dtype 'float64'\n\twith 12 stored elements and shape (3, 7)>\n```\n\n----------------------------------------\n\nTITLE: Linear and Cubic Interpolation using interp1d in SciPy\nDESCRIPTION: This example demonstrates linear and cubic spline interpolation using the interp1d class from scipy.interpolate. It creates interpolation functions from sample data points and plots the original data alongside the interpolated curves.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.interpolate import interp1d\n\n>>> x = np.linspace(0, 10, num=11, endpoint=True)\n>>> y = np.cos(-x**2/9.0)\n>>> f = interp1d(x, y)\n>>> f2 = interp1d(x, y, kind='cubic')\n\n>>> xnew = np.linspace(0, 10, num=41, endpoint=True)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(x, y, 'o', xnew, f(xnew), '-', xnew, f2(xnew), '--')\n>>> plt.legend(['data', 'linear', 'cubic'], loc='best')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Statistic for Permutation Test\nDESCRIPTION: This snippet defines a custom `statistic` function to be used with `scipy.stats.permutation_test`.  The function calculates the Spearman's rho statistic and transforms it to a t-value. It's designed to explore all possible pairings between two datasets by permuting one of them.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(x):  # explore all possible pairings by permuting `x`\n    rs = stats.spearmanr(x, y).statistic  # ignore pvalue\n    transformed = rs * np.sqrt(dof / ((rs+1.0)*(1.0-rs)))\n    return transformed\n```\n\n----------------------------------------\n\nTITLE: Generating Null Distribution with Beta and Plotting with Matplotlib in Python\nDESCRIPTION: This snippet uses SciPy to calculate the exact null distribution for the Pearson correlation test under the null hypothesis, plots it using Matplotlib, and defines a reusable plotting function. SciPy and Matplotlib are needed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nn = len(x)  # len(x) == len(y)\na = b = n/2 - 1  # shape parameter\nloc, scale = -1, 2  # support is (-1, 1)\ndist = stats.beta(a=a, b=b, loc=loc, scale=scale)\nr_vals = np.linspace(-1, 1, 1000)\npdf = dist.pdf(r_vals)\nfig, ax = plt.subplots(figsize=(8, 5))\ndef plot(ax):  # we'll re-use this\n    ax.plot(r_vals, pdf)\n    ax.set_title(\"Pearson's R Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Signal Compression using DCT\nDESCRIPTION: Shows how DCT can be used for signal compression by keeping only the first few coefficients. Demonstrates the energy compaction property of DCT and plots original vs reconstructed signals.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import dct, idct\nimport matplotlib.pyplot as plt\nN = 100\nt = np.linspace(0,20,N, endpoint=False)\nx = np.exp(-t/3)*np.cos(2*t)\ny = dct(x, norm='ortho')\nwindow = np.zeros(N)\nwindow[:20] = 1\nyr = idct(y*window, norm='ortho')\nsum(abs(x-yr)**2) / sum(abs(x)**2)\nplt.plot(t, x, '-bx')\nplt.plot(t, yr, 'ro')\nwindow = np.zeros(N)\nwindow[:15] = 1\nyr = idct(y*window, norm='ortho')\nsum(abs(x-yr)**2) / sum(abs(x)**2)\nplt.plot(t, yr, 'g+')\nplt.legend(['x', '$x_{20}$', '$x_{15}$'])\nplt.grid()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Generalized Eigenvalues and Eigenvectors for Matrix Batch\nDESCRIPTION: This code demonstrates how to calculate generalized eigenvalues and eigenvectors for a batch of matrices using SciPy's linalg.eig function with two inputs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nevals, evecs = linalg.eig(input, b=input)\nevals.shape, evecs.shape\n```\n\n----------------------------------------\n\nTITLE: Applying Geometric Transform in Python with SciPy\nDESCRIPTION: Demonstrates using the geometric_transform function from scipy.ndimage to apply a custom shift transformation to a 2D numpy array. The example shows how to define a mapping function and pass additional arguments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = np.arange(12).reshape(4,3).astype(np.float64)\n>>> def shift_func(output_coordinates):\n...     return (output_coordinates[0] - 0.5, output_coordinates[1] - 0.5)\n...\n>>> from scipy.ndimage import geometric_transform\n>>> geometric_transform(a, shift_func)\narray([[ 0.    ,  0.    ,  0.    ],\n       [ 0.    ,  1.3625,  2.7375],\n       [ 0.    ,  4.8125,  6.1875],\n       [ 0.    ,  8.2625,  9.6375]])\n```\n\n----------------------------------------\n\nTITLE: Permutation Test for Exact Null Distribution in Python\nDESCRIPTION: This snippet demonstrates the use of a permutation test to compute the exact null distribution of Kendall's tau statistic, handling small samples with ties accurately. SciPy library is required.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(x):  # explore all possible pairings by permuting `x`\n    return stats.kendalltau(x, y).statistic  # ignore pvalue\nref = stats.permutation_test((x,), statistic,\n                             permutation_type='pairings')\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nbins = np.linspace(-1.25, 1.25, 25)\nax.hist(ref.null_distribution, bins=bins, density=True)\nax.legend(['asymptotic approximation\\n(many observations)',\n           'exact null distribution'])\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing Number of Intervals for Hermite and Polynomial Inversion in Python\nDESCRIPTION: This code demonstrates the difference in the number of intervals used by NumericalInverseHermite and NumericalInversePolynomial for a given u-resolution. It shows that NumericalInverseHermite typically uses significantly more intervals.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats.sampling import NumericalInverseHermite\n>>> # NumericalInverseHermite accepts a `tol` parameter to set the\n>>> # u-resolution of the generator.\n>>> rng_hermite = NumericalInverseHermite(norm(), tol=1e-12)\n>>> rng_hermite.intervals\n    3000\n>>> rng_poly = NumericalInversePolynomial(norm(), u_resolution=1e-12)\n>>> rng_poly.intervals\n    252\n```\n\n----------------------------------------\n\nTITLE: NumPy Array Visualization with matplotlib\nDESCRIPTION: Creates and displays a figure with 6 subplots showing original and transformed arrays using NumPy and matplotlib. Demonstrates the use of ifftn transform and different colormap visualizations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nN = 30\nf, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2, 3, sharex='col', sharey='row')\nxf = np.zeros((N,N))\nxf[0, 5] = 1\nxf[0, N-5] = 1\nZ = ifftn(xf)\nax1.imshow(xf, cmap=cm.Reds)\nax4.imshow(np.real(Z), cmap=cm.gray)\nxf = np.zeros((N, N))\nxf[5, 0] = 1\nxf[N-5, 0] = 1\nZ = ifftn(xf)\nax2.imshow(xf, cmap=cm.Reds)\nax5.imshow(np.real(Z), cmap=cm.gray)\nxf = np.zeros((N, N))\nxf[5, 10] = 1\nxf[N-5, N-10] = 1\nZ = ifftn(xf)\nax3.imshow(xf, cmap=cm.Reds)\nax6.imshow(np.real(Z), cmap=cm.gray)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Array with SciPy Sparse Arrays Python\nDESCRIPTION: Defines a new function for creating block arrays specifically for sparse arrays (sparray) in SciPy. This function is part of the transition from using sparse matrices to sparse arrays. The block_array function requires a 'blocks' parameter, can take optional 'format', and 'dtype' parameters to specify the format and data type of the sparse array. This ensures easier manipulation of large, sparse data structures effectively.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef block_array(blocks, format=None, dtype=None):\n```\n\n----------------------------------------\n\nTITLE: Order Statistics with Plotting and Expected Values Calculation\nDESCRIPTION: The snippet initializes a normal distribution to generate order statistics, plotting their probability density functions and computing expected values. Dependencies include `scipy.stats` and matplotlib for visualization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_71\n\nLANGUAGE: ipython3\nCODE:\n```\nn = 4\nr = np.arange(1, n+1)\nX = stats.Normal()\nY = stats.order_statistic(X, r=r, n=n)\nY.plot()\nplt.show()\n```\n\nLANGUAGE: ipython3\nCODE:\n```\nY.mean()\n```\n\n----------------------------------------\n\nTITLE: Rosenbrock Function Minimization with Additional Arguments\nDESCRIPTION: Shows how to minimize a modified Rosenbrock function with additional scaling and offset parameters using the Nelder-Mead method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef rosen_with_args(x, a, b):\n    \"\"\"The Rosenbrock function with additional arguments\"\"\"\n    return sum(a*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0) + b\n\nx0 = np.array([1.3, 0.7, 0.8, 1.9, 1.2])\nres = minimize(rosen_with_args, x0, method='nelder-mead',\n               args=(0.5, 1.), options={'xatol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: PPF Approximation with NumericalInverseHermite\nDESCRIPTION: This snippet demonstrates the usage of `NumericalInverseHermite` to approximate the percent point function (PPF) of a distribution. It generates percentiles using `np.linspace` and then compares the PPF values obtained from `NumericalInverseHermite` to those from `norm.ppf` using `np.allclose`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> rng = NumericalInverseHermite(dist)\n>>> p = np.linspace(0.01, 0.99, 99) # percentiles from 1% to 99%\n>>> np.allclose(rng.ppf(p), norm.ppf(p))\nTrue\n```\n\n----------------------------------------\n\nTITLE: Minimizing Rosenbrock Function using Trust-Krylov Method with Full Hessian\nDESCRIPTION: Example of using SciPy's minimize function with the trust-region truncated generalized Lanczos/conjugate gradient method (trust-krylov) to optimize the Rosenbrock function using the full Hessian matrix. This method is especially effective for indefinite problems.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nres = minimize(rosen, x0, method='trust-krylov',\n               jac=rosen_der, hess=rosen_hess,\n               options={'gtol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: Numba Implementation of the Callback Function\nDESCRIPTION: This Python code demonstrates implementing the callback function using Numba for improved performance. It defines a Numba-compiled function that performs the coordinate transformation and then creates a LowLevelCallable for use with scipy.ndimage.geometric_transform.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n\"# example.py\n   import numpy as np\n   import ctypes\n   from scipy import ndimage, LowLevelCallable\n   from numba import cfunc, types, carray\n\n   @cfunc(types.intc(types.CPointer(types.intp),\n                     types.CPointer(types.double),\n                     types.intc,\n                     types.intc,\n                     types.voidptr))\n   def transform(output_coordinates_ptr, input_coordinates_ptr,\n                 output_rank, input_rank, user_data):\n       input_coordinates = carray(input_coordinates_ptr, (input_rank,))\n       output_coordinates = carray(output_coordinates_ptr, (output_rank,))\n       shift = carray(user_data, (1,), types.double)[0]\n\n       for i in range(input_rank):\n           input_coordinates[i] = output_coordinates[i] - shift\n\n       return 1\n\n   shift = 0.5\n\n   # Then call the function\n   user_data = ctypes.c_double(shift)\n   ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)\n   callback = LowLevelCallable(transform.ctypes, ptr)\n\n   im = np.arange(12).reshape(4, 3).astype(np.float64)\n   print(ndimage.geometric_transform(im, callback))\"\n```\n\n----------------------------------------\n\nTITLE: STFT Signal Reconstruction Verification - Python\nDESCRIPTION: Code demonstrating the ISTFT (Inverse Short-Time Fourier Transform) usage to reconstruct the original signal and verify the accuracy of both implementations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n>>> t0_r, z0_r = istft(Sz0_u, fs, win, nperseg, noverlap,\n...                    input_onesided=False, scaling='spectrum')\n>>> z1_r = SFT.istft(Sz1, k1=N)\n\n>>> len(z0_r), len(z)\n(1010, 1001)\n>>> np.allclose(z0_r[:N], z)\nTrue\n>>> np.allclose(z1_r, z)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Performing Dunnett's Test with SciPy in Python\nDESCRIPTION: This code snippet applies Dunnett's test using the SciPy library, calculating p-values to determine if differences between group means are statistically significant. It evaluates whether the experimental groups' means differ from the control, considering a family-wise error rate of 5%.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_dunnett.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import dunnett\nres = dunnett(drug_a, drug_b, control=control)\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-dimensional Batch of Matrices in Python\nDESCRIPTION: This code creates a 2x4 batch of 3x3 matrices, demonstrating how to work with multi-dimensional batches in SciPy's linear algebra functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbatch_shape = (2, 4)\ni = np.arange(np.prod(batch_shape)).reshape(*batch_shape, 1, 1)\ninput = i * np.eye(3)\n```\n\n----------------------------------------\n\nTITLE: Finding Shortest Path Between Words\nDESCRIPTION: Uses Dijkstra's algorithm to find the shortest path between two words in the graph.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/csgraph.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.sparse.csgraph import dijkstra\ni1 = word_list.searchsorted('ape')\ni2 = word_list.searchsorted('man')\ndistances, predecessors = dijkstra(graph, indices=i1, return_predecessors=True)\n\npath = []\ni = i2\nwhile i != i1:\n    path.append(word_list[i])\n    i = predecessors[i]\npath.append(word_list[i1])\nprint(path[::-1])\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Spline Interpolation in Python\nDESCRIPTION: This snippet demonstrates the use of SciPy's InterpolatedUnivariateSpline class for spline interpolation, which is an object-oriented approach to creating and evaluating splines.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import interpolate\n\n# InterpolatedUnivariateSpline\nx = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/8)\ny = np.sin(x)\ns = interpolate.InterpolatedUnivariateSpline(x, y)\nxnew = np.arange(0, 2*np.pi, np.pi/50)\nynew = s(xnew)\n\nplt.figure()\nplt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b')\nplt.legend(['Linear', 'InterpolatedUnivariateSpline', 'True'])\nplt.axis([-0.05, 6.33, -1.05, 1.05])\nplt.title('InterpolatedUnivariateSpline')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Cython Implementation of the Callback Function\nDESCRIPTION: This Cython code demonstrates implementing the callback function using Cython.  It defines the transform function in Cython and creates the LowLevelCallable in a separate Python script.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_38\n\nLANGUAGE: cython\nCODE:\n```\n\"# example.pyx\n\n   from numpy cimport npy_intp as intp\n\n   cdef api int transform(intp *output_coordinates, double *input_coordinates,\n                          int output_rank, int input_rank, void *user_data):\n       cdef intp i\n       cdef double shift = (<double *>user_data)[0]\n\n       for i in range(input_rank):\n           input_coordinates[i] = output_coordinates[i] - shift\n       return 1\"\n```\n\n----------------------------------------\n\nTITLE: Generating Regular Grid for Curse of Dimensionality in NumPy\nDESCRIPTION: This code snippet demonstrates how to create a regular grid using NumPy's `linspace` and `meshgrid` functions.  It illustrates the exponential growth of points needed to fill the space as dimensionality increases, highlighting the curse of dimensionality. This code snippet will create 3 arrays x1, x2, and x3 representing the grid points in each dimension.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/quasi_monte_carlo.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> disc = 10\n>>> x1 = np.linspace(0, 1, disc)\n>>> x2 = np.linspace(0, 1, disc)\n>>> x3 = np.linspace(0, 1, disc)\n>>> x1, x2, x3 = np.meshgrid(x1, x2, x3)\n```\n\n----------------------------------------\n\nTITLE: 2D RBF Interpolation Example\nDESCRIPTION: Implements 2D scattered data interpolation using RBFInterpolator with visualization of the results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_unstructured.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.interpolate import RBFInterpolator\n\nrng = np.random.default_rng()\nxy = rng.random((100, 2))*4.0-2.0\nz = xy[:, 0]*np.exp(-xy[:, 0]**2-xy[:, 1]**2)\nedges = np.linspace(-2.0, 2.0, 101)\ncenters = edges[:-1] + np.diff(edges[:2])[0] / 2.\nx_i, y_i = np.meshgrid(centers, centers)\nx_i = x_i.reshape(-1, 1)\ny_i = y_i.reshape(-1, 1)\nxy_i = np.concatenate([x_i, y_i], axis=1)\n\nrbf = RBFInterpolator(xy, z, epsilon=2)\nz_i = rbf(xy_i)\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Transformation on Weibull Distribution Instance\nDESCRIPTION: Illustrates transformation of distribution instance by scaling and shifting using arithmetic operations. Removes the older dependency on loc and scale, further enhancing flexibility and efficiency of distribution manipulations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nY = 2*X + 1\nY.plot()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Evaluating PPF with NumericalInversePolynomial in Python\nDESCRIPTION: This snippet demonstrates how to evaluate the Percent Point Function (PPF) using a NumericalInversePolynomial generator and compare it with the exact distribution function from scipy.stats.norm.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> rng.ppf(0.975)\n1.959963985701268\n>>> norm.ppf(0.975)\n1.959963984540054\n```\n\n----------------------------------------\n\nTITLE: Visualizing Null Distribution with Matplotlib in Python\nDESCRIPTION: This snippet visualizes the approximated null distribution of Kendall's tau statistic using Matplotlib. It calculates the variance for large samples without ties and plots the probability density function. Numpy and Matplotlib libraries are required.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nn = len(x)  # len(x) == len(y)\nvar = (2*(2*n + 5))/(9*n*(n - 1))\ndist = stats.norm(scale=np.sqrt(var))\nz_vals = np.linspace(-1.25, 1.25, 100)\npdf = dist.pdf(z_vals)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef plot(ax):  # we'll reuse this\n    ax.plot(z_vals, pdf)\n    ax.set_title(\"Kendall Tau Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Nearest, Previous, and Next Interpolation using interp1d in SciPy\nDESCRIPTION: This example demonstrates nearest, previous, and next point interpolation methods using the interp1d class. These methods return the nearest, previous, or next point along the x-axis and are particularly useful for step-like interpolation needs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.interpolate import interp1d\n\n>>> x = np.linspace(0, 10, num=11, endpoint=True)\n>>> y = np.cos(-x**2/9.0)\n>>> f1 = interp1d(x, y, kind='nearest')\n>>> f2 = interp1d(x, y, kind='previous')\n>>> f3 = interp1d(x, y, kind='next')\n\n>>> xnew = np.linspace(0, 10, num=1001, endpoint=True)\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(x, y, 'o')\n>>> plt.plot(xnew, f1(xnew), '-', xnew, f2(xnew), '--', xnew, f3(xnew), ':')\n>>> plt.legend(['data', 'nearest', 'previous', 'next'], loc='best')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing Power Log Normal Distribution using SciPy\nDESCRIPTION: This snippet demonstrates the usage of the `scipy.stats.powerlognorm` to represent the Power Log Normal Distribution. Users should have SciPy installed to utilize this feature effectively. The function allows for computation of probabilities and random variates based on the specified shape parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powerlognorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport scipy.stats as stats\n\n# Define shape parameters\nsigma = 1.0\nc = 1.0\n\n# Create Power Log Normal Distribution\npower_log_norm = stats.powerlognorm(c, scale=sigma)\n\n# Usage examples\nrandom_variates = power_log_norm.rvs(size=1000)\nprobability = power_log_norm.pdf(1.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteGuideTable with Probability Vector\nDESCRIPTION: Creates an instance of DiscreteGuideTable using a given probability vector (PV) and a random state using NumPy's default random generator. It showcases how to sample random values based on the PV.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dgt.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.stats.sampling import DiscreteGuideTable\n>>> pv = [0.18, 0.02, 0.8]\n>>> urng = np.random.default_rng()\n>>> rng = DiscreteGuideTable(pv, random_state=urng)\n>>> rng.rvs()\n2    # may vary\n```\n\n----------------------------------------\n\nTITLE: Saving NumPy Structured Array as MATLAB Struct\nDESCRIPTION: Demonstrates how to create a NumPy structured array and save it as a MATLAB struct file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> dt = [('f1', 'f8'), ('f2', 'S10')]\n>>> arr = np.zeros((2,), dtype=dt)\n>>> arr\n>>> arr[0]['f1'] = 0.5\n>>> arr[0]['f2'] = 'python'\n>>> arr[1]['f1'] = 99\n>>> arr[1]['f2'] = 'not perl'\n>>> sio.savemat('np_struct_arr.mat', {'arr': arr})\n```\n\n----------------------------------------\n\nTITLE: Initializing Normal Distribution with New Infrastructure in Python\nDESCRIPTION: Demonstrates initializing a new Normal distribution object using instantiated classes within SciPy's new infrastructure. Uses specified parameters mu and sigma for instantiation. This method enhances performance and simplifies parameter management.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nmu, sigma = 0, 1\nX = stats.Normal(mu=mu, sigma=sigma)\nX\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean of a Distribution Instance\nDESCRIPTION: Computes the mean of a distribution instance using SciPy's updated infrastructure. Focuses on performance improvements and reduced redundancy through object methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nX.mean()\n```\n\n----------------------------------------\n\nTITLE: Constructing Sparse Arrays from Coordinate Data in Python\nDESCRIPTION: This snippet shows how to construct a sparse array directly from coordinate data (row, column, and data arrays) without first creating a dense array.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrow = [0,0,1,1,2]\ncol = [0,3,1,2,2]\ndata = [1,2,4,1,5]\ncsr = sp.sparse.csr_array((data, (row, col)))\nprint(csr)\n```\n\n----------------------------------------\n\nTITLE: Handling incompatible arguments in stats.gamma.rvs\nDESCRIPTION: This code snippet demonstrates a situation where stats.gamma.rvs accepted arguments that were not compatible with broadcasting in older Scipy versions. In Scipy 0.18, such calls now generate a ValueError due to the shape of the first argument being incompatible with the requested size.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.18.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"stats.gamma.rvs([2, 5, 10, 15], size=(2,2))\"\n```\n\n----------------------------------------\n\nTITLE: Calculating P-value and Visualizing Results with Matplotlib in Python\nDESCRIPTION: This snippet calculates the p-value of the kurtosis test statistic and illustrates the areas of the null distribution considered more extreme. The result is annotated on a plot, highlighting key areas visually.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kurtosistest.md#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nkt_plot(ax)\npvalue = dist.cdf(-res.statistic) + dist.sf(res.statistic)\nannotation = (f'p-value={pvalue:.3f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (3, 0.005), (3.25, 0.02), arrowprops=props)\ni = kt_val >= res.statistic\nax.fill_between(kt_val[i], y1=0, y2=pdf[i], color='C0')\ni = kt_val <= -res.statistic\nax.fill_between(kt_val[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(-5, 5)\nax.set_ylim(0, 0.1)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Using Halton Sequence in SciPy QMC\nDESCRIPTION: This example demonstrates how to use the `scipy.stats.qmc.Halton` engine to generate QMC points.  It shows how to initialize the engine, generate points using `random()`, reset the sequence with `reset()`, and fast-forward the sequence with `fast_forward()` to obtain the same points as before.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/quasi_monte_carlo.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import qmc\n>>> engine = qmc.Halton(d=2)\n>>> engine.random(5)\narray([[0.22166437, 0.07980522],  # random\n       [0.72166437, 0.93165708],\n       [0.47166437, 0.41313856],\n       [0.97166437, 0.19091633],\n       [0.01853937, 0.74647189]])\n>>> engine.random(5)\narray([[0.51853937, 0.52424967],  # random\n       [0.26853937, 0.30202745],\n       [0.76853937, 0.857583  ],\n       [0.14353937, 0.63536078],\n       [0.64353937, 0.01807683]])\n\n>>> engine.reset()\n>>> engine.random(5)\narray([[0.22166437, 0.07980522],  # random\n       [0.72166437, 0.93165708],\n       [0.47166437, 0.41313856],\n       [0.97166437, 0.19091633],\n       [0.01853937, 0.74647189]])\n\n>>> engine.reset()\n>>> engine.fast_forward(5)\n>>> engine.random(5)\narray([[0.51853937, 0.52424967],  # random\n       [0.26853937, 0.30202745],\n       [0.76853937, 0.857583  ],\n       [0.14353937, 0.63536078],\n       [0.64353937, 0.01807683]])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Different Parametrizations for Curve Interpolation in Python\nDESCRIPTION: This snippet demonstrates three parametrization methods (uniform, cord length, and centripetal) for interpolating a dataset with BSplines. It shows how to calculate different parametrization values and visualize the resulting interpolated curves.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> x = [0, 1, 2, 3, 4, 5, 6]\n>>> y = [0, 0, 0, 9, 0, 0, 0]\n>>> p = np.stack((x, y))\n>>> p\narray([[0, 1, 2, 3, 4, 5, 6],\n       [0, 0, 0, 9, 0, 0, 0]])\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> u_unif = x\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> dp = p[:, 1:] - p[:, :-1]      # 2-vector distances between points\n>>> l = (dp**2).sum(axis=0)        # squares of lengths of 2-vectors between points\n>>> u_cord = np.sqrt(l).cumsum()   # cumulative sums of 2-norms\n>>> u_cord = np.r_[0, u_cord]      # the first point is parameterized at zero\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> u_c = np.r_[0, np.cumsum((dp**2).sum(axis=0)**0.25)]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.interpolate import make_interp_spline\n>>> import matplotlib.pyplot as plt\n>>> fig, ax = plt.subplots(1, 3, figsize=(8, 3))\n>>> parametrizations = ['uniform', 'cord length', 'centripetal']\n>>>\n>>> for j, u in enumerate([u_unif, u_cord, u_c]):\n...    spl = make_interp_spline(u, p, axis=1)    # note p is a 2D array\n...    \n...    uu = np.linspace(u[0], u[-1], 51)\n...    xx, yy = spl(uu)\n...    \n...    ax[j].plot(xx, yy, '--')\n...    ax[j].plot(p[0, :], p[1, :], 'o')\n...    ax[j].set_title(parametrizations[j])\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Permutation Test\nDESCRIPTION: This snippet performs a permutation test using `scipy.stats.permutation_test` to assess the significance of Spearman's rho. It compares the observed statistic to the null distribution generated by permuting the data. It then plots the null distribution and compares it to the asymptotic t-distribution approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nref = stats.permutation_test((x,), statistic, alternative='greater',\n                             permutation_type='pairings')\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nax.hist(ref.null_distribution, np.linspace(-5, 5, 26),\n        density=True)\nax.legend(['asymptotic approximation\\n(many observations)',\n           f'exact \\n({len(ref.null_distribution)} permutations)'])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting DiscreteAliasUrn Samples in SciPy\nDESCRIPTION: This code generates a plot comparing the true distribution with samples generated using DiscreteAliasUrn. It defines a custom distribution with a PMF, initializes a DiscreteAliasUrn object, generates 1000 random samples, and plots a histogram of the samples along with the true distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dau.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import matplotlib.pyplot as plt\n>>> from scipy.stats.sampling import DiscreteAliasUrn\n>>> class Distribution:\n...     def __init__(self, c):\n...         self.c = c\n...     def pmf(self, x):\n...         return x**self.c\n...     def support(self):\n...         return (0, 10)\n... \n>>> dist = Distribution(2)\n>>> urng = np.random.default_rng()\n>>> rng = DiscreteAliasUrn(dist, random_state=urng)\n>>> rvs = rng.rvs(1000)\n>>> fig = plt.figure()\n>>> ax = fig.add_subplot(111)\n>>> x = np.arange(1, 11)\n>>> fx = dist.pmf(x)\n>>> fx = fx / fx.sum()\n>>> ax.plot(x, fx, 'bo', label='true distribution')\n>>> ax.vlines(x, 0, fx, lw=2)\n>>> ax.hist(rvs, bins=np.r_[x, 11]-0.5, density=True, alpha=0.5, color='r',\n...         label='samples')\n>>> ax.set_xlabel('x')\n>>> ax.set_ylabel('PMF(x)')\n>>> ax.set_title('Discrete Alias Urn Samples')\n>>> plt.legend()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Generalized Hyperbolic Distribution Parameters in Python\nDESCRIPTION: Creates two plots demonstrating how different parameters (p and a) affect the shape of the Generalized Hyperbolic distribution. The first plot shows variations of the p parameter from -10 to 10, while the second plot shows variations of the a parameter from 0 to 10. Both plots include comparisons with Normal, Laplace, and Pareto distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genhyperbolic.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom scipy import stats\n\np, a, b, loc, scale = 1, 1, 0, 0, 1\nx = np.linspace(-10, 10, 100)\n\n# plot GH for different values of p\nplt.figure(0)\nplt.title(\"Generalized Hyperbolic | -10 < p < 10\")\nplt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        label = 'GH(p=1, a=1, b=0, loc=0, scale=1)')\nplt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'red', alpha = 0.5, label='GH(p>1, a=1, b=0, loc=0, scale=1)')\n[plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'red', alpha = 0.1) for p in np.linspace(1, 10, 10)]\nplt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'blue', alpha = 0.5, label='GH(p<1, a=1, b=0, loc=0, scale=1)')\n[plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'blue', alpha = 0.1) for p in np.linspace(-10, 1, 10)]\nplt.plot(x, stats.norm.pdf(x, loc, scale), label = 'N(loc=0, scale=1)')\nplt.plot(x, stats.laplace.pdf(x, loc, scale), label = 'Laplace(loc=0, scale=1)')\nplt.plot(x, stats.pareto.pdf(x+1, 1, loc, scale), label = 'Pareto(a=1, loc=0, scale=1)')\nplt.ylim(1e-15, 1e2)\nplt.yscale('log')\nplt.legend(bbox_to_anchor=(1.1, 1))\nplt.subplots_adjust(right=0.5)\n\n# plot GH for different values of a\nplt.figure(1)\nplt.title(\"Generalized Hyperbolic | 0 < a < 10\")\nplt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        label = 'GH(p=1, a=1, b=0, loc=0, scale=1)')\nplt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'blue', alpha = 0.5, label='GH(p=1, a>1, b=0, loc=0, scale=1)')\n[plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'blue', alpha = 0.1) for a in np.linspace(1, 10, 10)]\nplt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'red', alpha = 0.5, label='GH(p=1, 0<a<1, b=0, loc=0, scale=1)')\n[plt.plot(x, stats.genhyperbolic.pdf(x, p, a, b, loc, scale),\n        color = 'red', alpha = 0.1) for a in np.linspace(0, 1, 10)]\nplt.plot(x, stats.norm.pdf(x, loc, scale),  label = 'N(loc=0, scale=1)')\nplt.plot(x, stats.laplace.pdf(x, loc, scale), label = 'Laplace(loc=0, scale=1)')\nplt.plot(x, stats.pareto.pdf(x+1, 1, loc, scale), label = 'Pareto(a=1, loc=0, scale=1)')\nplt.ylim(1e-15, 1e2)\nplt.yscale('log')\nplt.legend(bbox_to_anchor=(1.1, 1))\nplt.subplots_adjust(right=0.5)\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Custom 2D Interpolation with Nearest-Neighbor Extrapolation\nDESCRIPTION: Extends CloughTocher2DInterpolator to handle out-of-bounds points by using nearest-neighbor extrapolation. Returns a callable function that applies the modified interpolation behavior.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import CloughTocher2DInterpolator as CT\n\ndef my_CT(xy, z):\n    \"\"\"CT interpolator + nearest-neighbor extrapolation.\n\n    Parameters\n    ----------\n    xy : ndarray, shape (npoints, ndim)\n        Coordinates of data points\n    z : ndarray, shape (npoints)\n        Values at data points\n\n    Returns\n    -------\n    func : callable\n        A callable object which mirrors the CT behavior,\n        with an additional neareast-neighbor extrapolation\n        outside of the data range.\n    \"\"\"\n    x = xy[:, 0]\n    y = xy[:, 1]\n    f = CT(xy, z)\n\n    # this inner function will be returned to a user\n    def new_f(xx, yy):\n        # evaluate the CT interpolator. Out-of-bounds values are nan.\n        zz = f(xx, yy)\n        nans = np.isnan(zz)\n\n        if nans.any():\n            # for each nan point, find its nearest neighbor\n            inds = np.argmin(\n                (x[:, None] - xx[nans])**2 +\n                (y[:, None] - yy[nans])**2\n                , axis=0)\n            # ... and use its value\n            zz[nans] = z[inds]\n        return zz\n\n    return new_f\n\n# Now illustrate the difference between the original ``CT`` interpolant\n# and ``my_CT`` on a small example:\n\nx = np.array([1, 1, 1, 2, 2, 2, 4, 4, 4])\ny = np.array([1, 2, 3, 1, 2, 3, 1, 2, 3])\nz = np.array([0, 7, 8, 3, 4, 7, 1, 3, 4])\n\nxy = np.c_[x, y]\nlut = CT(xy, z)\nlut2 = my_CT(xy, z)\n\nX = np.linspace(min(x) - 0.5, max(x) + 0.5, 71)\nY = np.linspace(min(y) - 0.5, max(y) + 0.5, 71)\nX, Y = np.meshgrid(X, Y)\n\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\n\nax.plot_wireframe(X, Y, lut(X, Y), label='CT')\nax.plot_wireframe(X, Y, lut2(X, Y), color='m',\n                  cstride=10, rstride=10, alpha=0.7, label='CT + n.n.')\n\nax.scatter(x, y, z,  'o', color='k', s=48, label='data')\nax.legend()\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Calling minimize_scalar with 'bounded' method in SciPy\nDESCRIPTION: This snippet demonstrates how to use the 'bounded' method of the minimize_scalar function from scipy.optimize. It is used for minimizing a scalar function within specified bounds.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize_scalar-bounded.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy.optimize.minimize_scalar(method='bounded')\n```\n\n----------------------------------------\n\nTITLE: Creating Cost Matrix with Numpy Python\nDESCRIPTION: This code snippet demonstrates the creation of a cost matrix using numpy for use in the linear sum assignment problem. Dependencies include the numpy library. It takes a set of values to construct a 2D array representing the cost matrix for different assignments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\ncost = np.array([[43.5, 45.5, 43.4, 46.5, 46.3],\n                 [47.1, 42.1, 39.1, 44.1, 47.8],\n                 [48.4, 49.6, 42.1, 44.5, 50.4],\n                 [38.2, 36.8, 43.2, 41.2, 37.2]])\n```\n\n----------------------------------------\n\nTITLE: Converting Transfer Function to Zero-Pole-Gain Representation in Python\nDESCRIPTION: This code uses scipy.signal.tf2zpk to convert a transfer function representation (numerator and denominator coefficients) to zero-pole-gain representation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nb = np.array([1.0/2, 1.0/4])\na = np.array([1.0, -1.0/3])\nsignal.tf2zpk(b, a)\n```\n\n----------------------------------------\n\nTITLE: Labeling connected components with 4-connectivity\nDESCRIPTION: This snippet showcases the usage of `scipy.ndimage.label` to identify and label connected regions in a 2D array using a 4-connected structuring element.  The structuring element `s` defines the neighborhood for determining connectivity.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])\n>>> s = [[0, 1, 0], [1,1,1], [0,1,0]]\n>>> from scipy.ndimage import label\n>>> label(a, s)\n(array([[0, 1, 1, 0, 0, 0],\n            [0, 1, 1, 0, 2, 0],\n            [0, 0, 0, 2, 2, 2],\n            [0, 0, 0, 0, 2, 0]], dtype=int32), 2)\n```\n\n----------------------------------------\n\nTITLE: Estimating U-Error with Monte Carlo Simulation\nDESCRIPTION: This example demonstrates the usage of the `u_error` method to estimate the maximum and mean absolute u-error of the approximation. It showcases how to specify the `sample_size` parameter to control the number of samples used in the Monte Carlo simulation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> rng1 = NumericalInverseHermite(dist, u_resolution=1e-10)\n>>> rng1.u_error(sample_size=1000000)  # uses one million samples\nUError(max_error=9.53167544892608e-11, mean_absolute_error=2.2450136432146864e-11)\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Arguments to Filter Function with generic_filter1d\nDESCRIPTION: Shows how to pass additional parameters to the filter function using extra_arguments parameter in generic_filter1d. This approach allows for more flexible filter implementations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> def fnc(iline, oline, a, b):\n...     oline[...] = iline[:-2] + a * iline[1:-1] + b * iline[2:]\n...\n>>> generic_filter1d(a, fnc, 3, extra_arguments = (2, 3))\narray([[ 3,  8, 14, 17],\n       [27, 32, 38, 41],\n       [51, 56, 62, 65]])\n```\n\n----------------------------------------\n\nTITLE: Comparing PDF and Histogram of X**3 in SciPy\nDESCRIPTION: This snippet generates a sample from a standard normal distribution, raises each sample to the power of 3, and plots both the theoretical PDF and a histogram of the resulting values. It uses the `pdf` method to plot the PDF and `hist` to plot a histogram of the sample. This allows visual comparison of the sample distribution with the theoretical PDF.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nX = stats.Normal()\nY = X**3\nx = np.linspace(-5, 5, 300)\nplt.plot(x, Y.pdf(x), label='pdf')\nplt.hist(X.sample(100000)**3, density=True, bins=np.linspace(-5, 5, 100), alpha=0.5);\nplt.ylim(0, 2)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Elliptic Integral Approximation Using PchipInterpolator in Python\nDESCRIPTION: This code snippet shows how to approximate the complete elliptic integral using PchipInterpolator for interpolation and integration.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.special import ellipk\nfrom scipy.interpolate import PchipInterpolator\n\nm = 0.5\nellipk(m)\n\nx = np.linspace(0, np.pi/2, 70)\ny = (1 - m*np.sin(x)**2)**(-1/2)\nspl = PchipInterpolator(x, y)\n\nspl.integrate(0, np.pi/2)\n```\n\n----------------------------------------\n\nTITLE: Generating Random Sparse Arrays in SciPy Python\nDESCRIPTION: Defines random_array for creating randomly populated sparse arrays with provided 'shape', 'density', and other optional parameters like 'format', 'dtype', 'rng', and 'data_sampler'. It defaults to NumPy's new default_rng(), allowing precise control over sparsity patterns and random data generation, efficiently facilitating statistical simulations and testing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef random_array(shape, density=0.01, format='coo', dtype=None, rng=None, data_sampler=None):\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Samples with Shape Parameters in Python\nDESCRIPTION: This code demonstrates how to generate multiple random numbers in a specific shape (5×3 matrix) from a TransformedDensityRejection generator by passing a tuple to the rvs() method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrng.rvs((5, 3))\n```\n\n----------------------------------------\n\nTITLE: Generating Single Sample with TransformedDensityRejection in Python\nDESCRIPTION: This code shows how to generate a single random number from a previously initialized TransformedDensityRejection generator by calling its rvs() method without parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrng.rvs()\n```\n\n----------------------------------------\n\nTITLE: Improving Performance with CDF at Mode in Python\nDESCRIPTION: Reinitializes the SimpleRatioUniforms instance with the cumulative distribution function (CDF) at mode, enhancing the sampling performance. Utilizes scipy.stats.norm to obtain CDF values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import norm\n>>> rng = SimpleRatioUniforms(dist, mode=0,\n...                           pdf_area=np.sqrt(2*np.pi),\n...                           cdf_at_mode=norm.cdf(0),\n...                           random_state=urng)\n>>> rvs = rng.rvs(1000)\n```\n\n----------------------------------------\n\nTITLE: Plotting Histogram of Random Samples from PINV in Python\nDESCRIPTION: This example demonstrates how to visualize the random samples generated by NumericalInversePolynomial using a histogram. It compares the histogram to the PDF of the standard normal distribution using matplotlib, allowing visual assessment of the sample distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import matplotlib.pyplot as plt\n>>> from scipy.stats import norm\n>>> from scipy.stats.sampling import NumericalInversePolynomial\n>>> class StandardNormal:\n...     def pdf(self, x):\n...         return np.exp(-0.5 * x*x)\n...\n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> rng = NumericalInversePolynomial(dist, random_state=urng)\n>>> rvs = rng.rvs(10000)\n>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, num=10000)\n>>> fx = norm.pdf(x)\n>>> plt.plot(x, fx, \"r-\", label=\"pdf\")\n>>> plt.hist(rvs, bins=50, density=True, alpha=0.8, label=\"rvs\")\n>>> plt.xlabel(\"x\")\n>>> plt.ylabel(\"PDF(x)\")\n>>> plt.title(\"Samples drawn using PINV method.\")\n>>> plt.legend()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Manually Calculating t-test Statistics in Python\nDESCRIPTION: Shows how to manually calculate the t-statistic and p-value for a one-sample t-test using NumPy and SciPy functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntt = (sm-m)/np.sqrt(sv/float(n))  # t-statistic for mean\npval = stats.t.sf(np.abs(tt), n-1)*2  # two-sided pvalue = Prob(abs(t)>tt)\nprint('t-statistic = %6.3f pvalue = %6.4f' % (tt, pval))\n```\n\n----------------------------------------\n\nTITLE: Custom Weighted Second Derivative with Extra Keywords\nDESCRIPTION: Example showing how to use extra_keywords parameter with generic_laplace to pass custom weights as named arguments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngeneric_laplace(a, d2, extra_keywords = {'weights': [1, -2, 1]})\n```\n\n----------------------------------------\n\nTITLE: Inverse Interpolation with Derivatives using BPoly\nDESCRIPTION: Creates an interpolation of x vs y using derivatives to solve a nonlinear equation of the form a*x - 1/tan(x) = 0. Uses BPoly.from_derivatives for cubic interpolation with first derivatives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import BPoly\n\ndef f(x, a):\n    return a*x - 1/np.tan(x)\n\nxleft, xright = 0.2, np.pi/2\nx = np.linspace(xleft, xright, 11)\n\nfig, ax = plt.subplots(1, 2, figsize=(12, 4))\n\nfor j, a in enumerate([3, 93]):\n    y = f(x, a)\n    dydx = a + 1./np.sin(x)**2    # d(ax - 1/tan(x)) / dx\n    dxdy = 1 / dydx               # dx/dy = 1 / (dy/dx)\n\n    xdx = np.c_[x, dxdy]\n    spl = BPoly.from_derivatives(y, xdx)   # inverse interpolation\n\n    yy = np.linspace(f(xleft, a), f(xright, a), 51)\n    ax[j].plot(yy, spl(yy), '--')\n    ax[j].plot(y, x, 'o')\n    ax[j].set_xlabel(r'$y$')\n    ax[j].set_ylabel(r'$x$')\n    ax[j].set_title(rf'$a = {a}$')\n\n    ax[j].plot(0, spl(0), 'o', ms=12)\n    ax[j].text(0.1, 0.85, fr'$x_0 = {spl(0):.3f}$',\n               transform=ax[j].transAxes, fontsize=18)\n    ax[j].grid(True)\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating One-Sided P-Value and Annotating with Matplotlib in Python\nDESCRIPTION: This snippet adjusts the analysis for a one-sided alternative hypothesis, recalculating the p-value and updating the plot to show the corresponding area using Matplotlib. SciPy and Matplotlib are required.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres = stats.pearsonr(x, y, alternative='greater')\nres.statistic\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\npvalue = dist.sf(rs)\nannotation = (f'p-value={pvalue:.6f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (rs, 0.01), (0.86, 0.04), arrowprops=props)\ni = r_vals >= rs\nax.fill_between(r_vals[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(0.85, 1)\nax.set_ylim(0, 0.1)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Monte Carlo Coin Flip Probability Simulation\nDESCRIPTION: Performs a computational simulation to estimate probability by generating random coin flip sequences and calculating the proportion of trials meeting a specific condition\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/resampling.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nN = 100000\nrng = np.random.default_rng()\nsimulation = rng.random(size=(n, N)) < p\ncounts = np.sum(simulation, axis=0)\nprob = np.sum(counts <= x) / N\n```\n\n----------------------------------------\n\nTITLE: Standard Normal Distribution Class Definition\nDESCRIPTION: This code defines a custom class `StandardNormal` that mimics the standard normal distribution by providing its PDF, CDF, and optionally, its PDF's derivative, which are required by `NumericalInverseHermite` for higher-order interpolation. The class is then instantiated and used with `NumericalInverseHermite`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> class StandardNormal:\n...     def pdf(self, x):\n...        return 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2)\n...     def cdf(self, x):\n...        return ndtr(x)\n... \n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> rng = NumericalInverseHermite(dist, random_state=urng)\n```\n\n----------------------------------------\n\nTITLE: Loading a MATLAB File in Python\nDESCRIPTION: Demonstrates how to load a MATLAB file in Python using SciPy's loadmat function and access its contents.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> mat_contents = sio.loadmat('octave_a.mat')\n>>> mat_contents\n>>> oct_a = mat_contents['a']\n>>> oct_a\n>>> oct_a.shape\n```\n\n----------------------------------------\n\nTITLE: Calculating Determinant of a Single Matrix in Python\nDESCRIPTION: This snippet demonstrates how to calculate the determinant of a single 3x3 identity matrix using SciPy's linalg.det function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy import linalg\nA = np.eye(3)\nlinalg.det(A)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Probability Density Function with Instantiated Distribution\nDESCRIPTION: Calculates the probability density function (pdf) at a given point x using directly initialized distribution instance. Focused on faster calculations via elimination of redundant distribution parameter passing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nX.pdf(x)\n```\n\n----------------------------------------\n\nTITLE: Creating and Comparing Diagonal Operators in SciPy\nDESCRIPTION: This code creates both a dense diagonal matrix and a LinearOperator equivalent, then compares their eigenvalues using eigh() for the dense matrix and eigsh() for the operator. It demonstrates how the eigenvalues and eigenvectors match between the two approaches.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/arpack.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> D = np.diag(d)\n>>> Dop = Diagonal(d, dtype=np.float64)\n\n>>> evals_all, evecs_all = eigh(D)\n>>> evals_large, evecs_large = eigsh(Dop, 3, which='LA', maxiter=1e3)\n>>> evals_all[-3:]\narray([1.53092498, 1.77243671, 2.00582508])\n>>> evals_large\narray([1.53092498, 1.77243671, 2.00582508])\n>>> print(np.dot(evecs_large.T, evecs_all[:,-3:]))\narray([[-1.  0.  0.],     # may vary (signs)\n       [-0. -1.  0.],\n       [ 0.  0. -1.]]\n```\n\n----------------------------------------\n\nTITLE: Re-labeling an array of object indices\nDESCRIPTION: This example shows how to re-label an array after removing a specific object (in this case, object with label 2). It first labels the array, then sets the values corresponding to the unwanted label to zero, and finally re-labels the resulting array.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> l, n = label([1, 0, 1, 0, 1])\n>>> l\narray([1, 0, 2, 0, 3], dtype=int32)\n>>> l = np.where(l != 2, l, 0)\n>>> l\narray([1, 0, 0, 0, 3], dtype=int32)\n>>> label(l)[0]\narray([1, 0, 0, 0, 2], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with SciPy Distributions - Individual Parameters\nDESCRIPTION: Illustrates how broadcasting can simplify multiple calls to the same distribution function with different parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> stats.t.isf([0.1, 0.05, 0.01], 10)\narray([ 1.37218364,  1.81246112,  2.76376946])\n>>> stats.t.isf([0.1, 0.05, 0.01], 11)\narray([ 1.36343032,  1.79588482,  2.71807918])\n```\n\n----------------------------------------\n\nTITLE: Computing Eigenvalues with Standard NumPy and ARPACK\nDESCRIPTION: Example showing how to find eigenvalues using both standard eigenvalue decomposition (eigh) and ARPACK's eigsh method on a symmetric matrix. Demonstrates basic usage and comparison of results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/arpack.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.linalg import eig, eigh\nfrom scipy.sparse.linalg import eigs, eigsh\nnp.set_printoptions(suppress=True)\nrng = np.random.default_rng()\n\nX = rng.random((100, 100)) - 0.5\nX = np.dot(X, X.T)  # create a symmetric matrix\n\nevals_all, evecs_all = eigh(X)\n\nevals_large, evecs_large = eigsh(X, 3, which='LM')\nprint(evals_all[-3:])\nprint(evals_large)\nprint(np.dot(evecs_large.T, evecs_all[:,-3:]))\n```\n\n----------------------------------------\n\nTITLE: Parametric Spline Interpolation in Python\nDESCRIPTION: This code demonstrates how to create and plot a parametric spline using SciPy's splprep and splev functions, representing a circular curve.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# Parametric spline\nt = np.arange(0, 1.1, .1)\nx = np.sin(2*np.pi*t)\ny = np.cos(2*np.pi*t)\ntck, u = interpolate.splprep([x, y], s=0)\nunew = np.arange(0, 1.01, 0.01)\nout = interpolate.splev(unew, tck)\nplt.figure()\nplt.plot(x, y, 'x', out[0], out[1], np.sin(2*np.pi*unew), np.cos(2*np.pi*unew), x, y, 'b')\nplt.legend(['Linear', 'Cubic Spline', 'True'])\nplt.axis([-1.05, 1.05, -1.05, 1.05])\nplt.title('Spline of parametrically-defined curve')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Linear Spline with Extrapolation\nDESCRIPTION: Shows how to create a linear interpolant with extrapolation using make_interp_spline.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import make_interp_spline\nx = np.linspace(0, 5, 11)\ny = 2*x\nspl = make_interp_spline(x, y, k=1)  # k=1: linear\nspl([-1, 6])\nnp.interp([-1, 6], x, y)\n```\n\n----------------------------------------\n\nTITLE: Calculating All Derivatives of a B-spline in Python\nDESCRIPTION: This snippet uses SciPy's spalde function to calculate all derivatives of a B-spline and plots them together.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# All derivatives of spline\nyders = interpolate.spalde(xnew, tck)\nplt.figure()\nfor i in range(len(yders[0])):\n   plt.plot(xnew, [d[i] for d in yders], '--', label=f\"{i} derivative\")\nplt.legend()\nplt.axis([-0.05, 6.33, -1.05, 1.05])\nplt.title('All derivatives of a B-spline')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Distribution Method Examples\nDESCRIPTION: Illustrates common distribution methods like CDF, random variate generation, and statistical properties\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nnorm.cdf(0)\nnorm.cdf([-1., 0, 1])\nnorm.mean(), norm.std(), norm.var()\nnorm.ppf(0.5)\nnorm.rvs(size=3)\n```\n\n----------------------------------------\n\nTITLE: Transforming Gamma to Log-Gamma in SciPy\nDESCRIPTION: This snippet illustrates how to generate a log-gamma distribution by taking the logarithm of a Gamma-distributed random variable.  It creates a Gamma distribution, takes its logarithm, and plots the PDF of the resulting distribution, comparing it with SciPy's `loggamma` distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nGamma = stats.make_distribution(stats.gamma)\na = 0.414\n\nX = Gamma(a=a)  \nY = stats.log(X)  # compare to `loggamma`\nY.plot()\n\nx = np.linspace(-17.5, 2, 300)\nplt.plot(x, stats.loggamma(c=a).pdf(x), '--')\nplt.legend(['`log(X)`', '`loggamma`'])\nplt.title(\"Exp-Gamma PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Transforming Normal to Log-Normal in SciPy\nDESCRIPTION: This snippet demonstrates how to obtain a log-normal distribution by exponentiating a normally-distributed random variable. It creates a normal distribution, scales and shifts it, exponentiates the result, and plots the PDF of the transformed variable, comparing it with SciPy's built-in `lognorm` distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nu, s = 1, 0.5\n\nX = stats.Normal()*s + u\nY = stats.exp(X)  # compare to `lognorm`\nY.plot(t=('x', eps, 9))\n\nx = np.linspace(eps, 9, 300)\nplt.plot(x, stats.lognorm(s=s, scale=np.exp(u)).pdf(x), '--')\nplt.legend(['`exp(X)`', '`lognorm`'])\nplt.title(\"Log-Normal PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Minimizing Functions Using Nelder-Mead Method in SciPy\nDESCRIPTION: This code snippet demonstrates how to use the Nelder-Mead method with SciPy's minimize function. The Nelder-Mead method is a numerical optimization algorithm for multidimensional unconstrained minimization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-neldermead.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy.optimize.minimize(method='Nelder-Mead')\n```\n\n----------------------------------------\n\nTITLE: Performing Geometric Transformations with ctypes in Python\nDESCRIPTION: This snippet shows how to use ctypes to perform geometric transformations on an image array using SciPy's ndimage module. The process involves loading a shared library compiled from C code into Python using ctypes. It defines a function pointer in ctypes with specific arguments, which is passed as a LowLevelCallable to the geometric_transform function. The transformation logic is provided by a C function referenced from the shared library file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n# script.py\n\n   import os\n   import ctypes\n   import numpy as np\n   from scipy import ndimage, LowLevelCallable\n\n   lib = ctypes.CDLL(os.path.abspath('example.so'))\n\n   shift = 0.5\n\n   user_data = ctypes.c_double(shift)\n   ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)\n\n   # Ctypes has no built-in intptr type, so override the signature\n   # instead of trying to get it via ctypes\n   callback = LowLevelCallable(lib._transform, ptr,\n       \"int _transform(intptr_t *, double *, int, int, void *)\")\n\n   # Perform the call\n   im = np.arange(12).reshape(4, 3).astype(np.float64)\n   print(ndimage.geometric_transform(im, callback))\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix Batch Using NumPy Broadcasting\nDESCRIPTION: This code demonstrates how to create a batch of matrices using NumPy broadcasting, which is more efficient than a list comprehension for large batches.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ni = np.arange(1, 4).reshape(-1, 1, 1)\nbatch = i * np.eye(3)\nbatch\n```\n\n----------------------------------------\n\nTITLE: Solving Linear System with Multiple Right-Hand Sides in Python\nDESCRIPTION: This code shows how to solve a linear system Ax = B where A is a single square matrix and B is a matrix with multiple column vectors as right-hand sides.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nb = np.empty((5, 2))\nb[:, 0] = np.arange(5)\nb[:, 1] = np.arange(5, 10)\nlinalg.solve(A, b)\n```\n\n----------------------------------------\n\nTITLE: Checking Exact P-Value Using Permutation Test in Python\nDESCRIPTION: This code snippet checks the exact p-value calculated using the permutation test, comparing it with the approximation from SciPy's Kendall's tau function. Requires the use of the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nref.pvalue\n```\n\n----------------------------------------\n\nTITLE: RegularGridInterpolator Implementation\nDESCRIPTION: Modern replacement for interp2d using RegularGridInterpolator\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/interp_transition_guide.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import RegularGridInterpolator as RGI\nr = RGI((x, y), z.T, method='linear', bounds_error=False)\nxxnew, yynew = np.meshgrid(xnew, ynew, indexing='ij', sparse=True)\nznew_reggrid = r((xxnew, yynew))\n```\n\n----------------------------------------\n\nTITLE: Calculating Jarque-Bera statistic using SciPy\nDESCRIPTION: This snippet calculates the Jarque-Bera test statistic using the `scipy.stats.jarque_bera` function. The result is stored in the `res` variable, and the statistic is accessed using `res.statistic`.  This statistic is based on the sample skewness and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.jarque_bera(x)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Univariate KDE Estimation - Python\nDESCRIPTION: This snippet imports the necessary libraries and demonstrates how to apply kernel density estimation (KDE) on a univariate dataset using the `scipy.stats.gaussian_kde` function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/kernel_density_estimation.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\nx1 = np.array([-7, -5, 1, 4, 5], dtype=np.float64)\nkde1 = stats.gaussian_kde(x1)\nkde2 = stats.gaussian_kde(x1, bw_method='silverman')\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nax.plot(x1, np.zeros(x1.shape), 'b+', ms=20)  # rug plot\nx_eval = np.linspace(-10, 10, num=200)\nax.plot(x_eval, kde1(x_eval), 'k-', label=\"Scott's Rule\")\nax.plot(x_eval, kde2(x_eval), 'r-', label=\"Silverman's Rule\")\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Distribution Tails in Python\nDESCRIPTION: Calculates critical values and empirical frequencies for the upper tail of the t-distribution, comparing them to theoretical probabilities.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncrit01, crit05, crit10 = stats.t.ppf([1-0.01, 1-0.05, 1-0.10], 10)\nprint('critical values from ppf at 1%%, 5%% and 10%% %8.4f %8.4f %8.4f' % (crit01, crit05, crit10))\nprint('critical values from isf at 1%%, 5%% and 10%% %8.4f %8.4f %8.4f' % tuple(stats.t.isf([0.01,0.05,0.10],10)))\n\nfreq01 = np.sum(x>crit01) / float(n) * 100\nfreq05 = np.sum(x>crit05) / float(n) * 100\nfreq10 = np.sum(x>crit10) / float(n) * 100\nprint('sample %%-frequency at 1%%, 5%% and 10%% tail %8.4f %8.4f %8.4f' % (freq01, freq05, freq10))\n```\n\n----------------------------------------\n\nTITLE: Custom Bandwidth Function for KDE - Python\nDESCRIPTION: This snippet defines a custom bandwidth function for kernel density estimation, demonstrating the effects of different bandwidths on the density estimation results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/kernel_density_estimation.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef my_kde_bandwidth(obj, fac=1./5):\n    \"\"\"We use Scott's Rule, multiplied by a constant factor.\"\"\"\n    return np.power(obj.n, -1./(obj.d+4)) * fac\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nax.plot(x1, np.zeros(x1.shape), 'b+', ms=20)  # rug plot\nkde3 = stats.gaussian_kde(x1, bw_method=my_kde_bandwidth)\nax.plot(x_eval, kde3(x_eval), 'g-', label=\"With smaller BW\")\n\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Building a Smooth Bivariate Spline\nDESCRIPTION: The SmoothBivariateSpline class provides an object-oriented interface for spline smoothing of scattered data, with automatic handling of knot placement and smoothing factors, simplifying the spline fitting process.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> interp_func = SmoothBivariateSpline(train_x, train_y, train_z, s=0.0)\n```\n\n----------------------------------------\n\nTITLE: Tracking Coordinates During Filtering with generic_filter in Python\nDESCRIPTION: Demonstrates how to use a class-based approach to track coordinates while filtering with generic_filter. The class maintains state across filter calls and prints the current position.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.arange(12).reshape(3,4)\n>>>\n>>> class fnc_class:\n...     def __init__(self, shape):\n...         # store the shape:\n...         self.shape = shape\n...         # initialize the coordinates:\n...         self.coordinates = [0] * len(shape)\n...\n...     def filter(self, buffer):\n...         result = (buffer * np.array([1, 3])).sum()\n...         print(self.coordinates)\n...         # calculate the next coordinates:\n...         axes = list(range(len(self.shape)))\n...         axes.reverse()\n...         for jj in axes:\n...             if self.coordinates[jj] < self.shape[jj] - 1:\n...                 self.coordinates[jj] += 1\n...                 break\n...             else:\n...                 self.coordinates[jj] = 0\n...         return result\n...\n>>> fnc = fnc_class(shape = (3,4))\n>>> generic_filter(a, fnc.filter, footprint = [[1, 0], [0, 1]])\n[0, 0]\n[0, 1]\n[0, 2]\n[0, 3]\n[1, 0]\n[1, 1]\n[1, 2]\n[1, 3]\n[2, 0]\n[2, 1]\n[2, 2]\n[2, 3]\narray([[ 0,  3,  7, 11],\n      [12, 15, 19, 23],\n      [28, 31, 35, 39]])\n```\n\n----------------------------------------\n\nTITLE: Controlling Random State in New API Sampling\nDESCRIPTION: Shows how to control the random state when generating samples in the new API using either a numpy Generator instance or an integer seed for the rng parameter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nX = stats.Normal()\nrng = np.random.default_rng(1)  # instantiate a numpy.random.Generator\nX.sample(rng=rng), X.sample(rng=1)\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for SciPy Development\nDESCRIPTION: Commands to create a Conda environment with all necessary dependencies for SciPy development using the environment.yml file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmamba env create -f environment.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Smoothing Splines with Noise Example\nDESCRIPTION: Demonstrates how to create smoothing splines with different penalty parameters using make_smoothing_spline. The example generates noisy sine data and shows the effect of different lambda values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.interpolate import make_smoothing_spline\n\nx = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/16)\nrng = np.random.default_rng()\ny =  np.sin(x) + 0.4*rng.standard_normal(size=len(x))\n\nimport matplotlib.pyplot as plt\nxnew = np.arange(0, 9/4, 1/50) * np.pi\nfor lam in [0, 0.02, 10, None]:\n    spl = make_smoothing_spline(x, y, lam=lam)\n    plt.plot(xnew, spl(xnew), '-.', label=fr'$\\lambda=${lam}')\nplt.plot(x, y, 'o')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Basic Operations on Sparse Arrays in Python\nDESCRIPTION: This snippet shows basic operations like max, argmax, and mean on both dense and sparse arrays, demonstrating that sparse arrays behave similarly to dense arrays for these operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(sparse.max())\nprint(dense.max())\nprint(sparse.argmax())\nprint(dense.argmax())\nprint(sparse.mean())\nprint(dense.mean())\nprint(sparse.nnz)\nprint(sparse.mean(axis=1))\n```\n\n----------------------------------------\n\nTITLE: Creating a Double Gamma Distribution in SciPy\nDESCRIPTION: This snippet shows how to create a double gamma distribution, which is a mixture of a Gamma-distributed random variable and its reflection about the origin. It defines a Gamma distribution, creates a mixture distribution using the Gamma distribution and its negative counterpart, and plots the PDF of the mixture, comparing it with SciPy's `dgamma` distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_57\n\nLANGUAGE: python\nCODE:\n```\na = 1.1\nX = Gamma(a=a)\nY = stats.Mixture((X, -X), weights=[0.5, 0.5])\n# plot method not available for mixtures\n\nx = np.linspace(-4, 4, 300)\nplt.plot(x, Y.pdf(x))\nplt.plot(x, stats.dgamma(a=a).pdf(x), '--')\nplt.legend(['`Mixture(X, -X)`', '`dgamma`'])\nplt.title(\"Double Gammma PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Matrix Inverse Computation\nDESCRIPTION: Computing matrix inverse using scipy.linalg.inv and verifying the result through matrix multiplication with the original matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,3,5],[2,5,1],[2,3,8]])\n>>> A\narray([[1, 3, 5],\n      [2, 5, 1],\n      [2, 3, 8]])\n>>> linalg.inv(A)\narray([[-1.48,  0.36,  0.88],\n      [ 0.56,  0.08, -0.36],\n      [ 0.16, -0.12,  0.04]])\n>>> A.dot(linalg.inv(A)) #double check\narray([[  1.00000000e+00,  -1.11022302e-16,  -5.55111512e-17],\n      [  3.05311332e-16,   1.00000000e+00,   1.87350135e-16],\n      [  2.22044605e-16,  -1.11022302e-16,   1.00000000e+00]])\n```\n\n----------------------------------------\n\nTITLE: Performing 2D Convolution with SciPy\nDESCRIPTION: This example shows how to use the convolve function for 2D convolution with two input 2D arrays. It demonstrates that the same function can handle both 1D and ND convolutions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> x = np.array([[1., 1., 0., 0.], [1., 1., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]])\n>>> h = np.array([[1., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 0.]])\n>>> signal.convolve(x, h)\narray([[ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n       [ 1.,  1.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  1.,  1.,  0.,  0.,  0.],\n       [ 0.,  0.,  1.,  1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]])\n```\n\n----------------------------------------\n\nTITLE: Using Keyword Arguments in Geometric Transform with Python\nDESCRIPTION: Demonstrates passing keyword arguments to the mapping function in scipy.ndimage.geometric_transform. This provides a named parameter approach for specifying transformation parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n>>> geometric_transform(a, shift_func, extra_keywords = {'s0': 0.5, 's1': 0.5})\narray([[ 0.    ,  0.    ,  0.    ],\n       [ 0.    ,  1.3625,  2.7375],\n       [ 0.    ,  4.8125,  6.1875],\n       [ 0.    ,  8.2625,  9.6375]])\n```\n\n----------------------------------------\n\nTITLE: Implementing Gray-Scott 1D System Using Method of Lines in Python\nDESCRIPTION: This function implements the right-hand side of the system of ODEs derived from the Gray-Scott PDE system using the method of lines. It handles boundary conditions and computes the spatial derivatives using finite differences.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef grayscott1d(y, t, f, k, Du, Dv, dx):\n    \"\"\"\n    Differential equations for the 1-D Gray-Scott equations.\n\n    The ODEs are derived using the method of lines.\n    \"\"\"\n    # The vectors u and v are interleaved in y.  We define\n    # views of u and v by slicing y.\n    u = y[::2]\n    v = y[1::2]\n\n    # dydt is the return value of this function.\n    dydt = np.empty_like(y)\n\n    # Just like u and v are views of the interleaved vectors\n    # in y, dudt and dvdt are views of the interleaved output\n    # vectors in dydt.\n    dudt = dydt[::2]\n    dvdt = dydt[1::2]\n\n    # Compute du/dt and dv/dt.  The end points and the interior points\n    # are handled separately.\n    dudt[0]    = G(u[0],    v[0],    f, k) + Du * (-2.0*u[0] + 2.0*u[1]) / dx**2\n    dudt[1:-1] = G(u[1:-1], v[1:-1], f, k) + Du * np.diff(u,2) / dx**2\n    dudt[-1]   = G(u[-1],   v[-1],   f, k) + Du * (- 2.0*u[-1] + 2.0*u[-2]) / dx**2\n    dvdt[0]    = H(u[0],    v[0],    f, k) + Dv * (-2.0*v[0] + 2.0*v[1]) / dx**2\n    dvdt[1:-1] = H(u[1:-1], v[1:-1], f, k) + Dv * np.diff(v,2) / dx**2\n    dvdt[-1]   = H(u[-1],   v[-1],   f, k) + Dv * (-2.0*v[-1] + 2.0*v[-2]) / dx**2\n\n    return dydt\n```\n\n----------------------------------------\n\nTITLE: Defining Statistic Function for Monte Carlo Test\nDESCRIPTION: This snippet defines a function that calculates only the Shapiro statistic, which is used as part of a Monte Carlo test to evaluate normality.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_shapiro.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(x):\n    # Get only the `shapiro` statistic; ignore its p-value\n    return stats.shapiro(x).statistic\nref = stats.monte_carlo_test(x, stats.norm.rvs, statistic,\n                             alternative='less')\n```\n\n----------------------------------------\n\nTITLE: Iterating Structure for Binary Morphology in SciPy\nDESCRIPTION: This snippet illustrates the use of the iterate_structure function from the scipy.ndimage module to perform a number of dilations on a binary structure. It generates a 2D structure with generate_binary_structure and iterates it with iterate_structure to achieve the equivalent of multiple erosions or dilations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> struct = generate_binary_structure(2, 1)\n>>> struct\narray([[False,  True, False],\n        [ True,  True,  True],\n        [False,  True, False]], dtype=bool)\n>>> from scipy.ndimage import iterate_structure\n>>> iterate_structure(struct, 2)\narray([[False, False,  True, False, False],\n        [False,  True,  True,  True, False],\n        [ True,  True,  True,  True,  True],\n        [False,  True,  True,  True, False],\n        [False, False,  True, False, False]], dtype=bool)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> iterate_structure(struct, 2, -1)\n(array([[False, False,  True, False, False],\n        [False,  True,  True,  True, False],\n        [ True,  True,  True,  True,  True],\n        [False,  True,  True,  True, False],\n        [False, False,  True, False, False]], dtype=bool), [-2, -2])\n```\n\n----------------------------------------\n\nTITLE: Visualize Distribution Functions Using Matplotlib\nDESCRIPTION: These snippets illustrate how to plot distribution functions (such as PDF and CDF) with matplotlib for a given random variable object using the `plot` method for visualization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_70\n\nLANGUAGE: ipython3\nCODE:\n```\nimport matplotlib.pyplot as plt\nax = X.plot()\nplt.show()\n```\n\nLANGUAGE: ipython3\nCODE:\n```\nX.plot(y='cdf')\nplt.show()\n```\n\nLANGUAGE: ipython3\nCODE:\n```\nX.plot('cdf', 'pdf', t=('x', -10, 10))\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Transforming Normal to Chi-squared in SciPy\nDESCRIPTION: This snippet showcases how to obtain a Chi-squared distribution by squaring a normally-distributed random variable. It creates a normal distribution, squares it, and plots the PDF of the resulting distribution, comparing it with SciPy's built-in `chi2` distribution with one degree of freedom.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nX = stats.Normal()\nY = X**2  # compare to chi2\nY.plot(t=('x', eps, 5));\n\nx = np.linspace(eps, 5, 300)\nplt.plot(x, stats.chi2(df=1).pdf(x), '--')\nplt.ylim(0, 3)\nplt.legend(['`X**2`', '`chi2`'])\nplt.title(\"Chi-squared PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Diagonal Sparse Arrays in SciPy Python\nDESCRIPTION: Defines the diags_array function which creates diagonal sparse arrays (sparray) and replaces existing methods creating sparse matrices. It takes 'diagonals' to specify data values, 'offsets' for diagonal offsets, and additional optional parameters like 'shape', 'format', and 'dtype' for control over array properties. This new API facilitates precision and flexibility while handling diagonal sparray creation, accommodating more predictable behaviors.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef diags_array(diagonals, /, *, offsets=0, shape=None, format=None, dtype=None):\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Function with generic_filter in Python\nDESCRIPTION: Demonstrates creating a custom filter function for use with generic_filter. The function processes a buffer containing neighborhood values and returns a weighted sum based on a specified footprint.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> def fnc(buffer):\n...     return (buffer * np.array([1, 3])).sum()\n...\n>>> from scipy.ndimage import generic_filter\n>>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]])\narray([[ 0,  3,  7, 11],\n       [12, 15, 19, 23],\n       [28, 31, 35, 39]])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DST Type-IV Transform Scaling and Inverse Properties in Python\nDESCRIPTION: This snippet illustrates the DST Type-IV transform properties, showing how it can be its own inverse when using orthogonal normalization. It also demonstrates the scaling factor (2*N = 10) when using the standard normalization, and shows how idst() provides the proper inverse.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> dst(dst(x, type=4, norm='ortho'), type=4, norm='ortho')\narray([ 1. ,  2. ,  1. , -1. ,  1.5])\n>>>  # scaling factor 2*N = 10\n>>> dst(dst(x, type=4), type=4)\narray([ 10.,  20.,  10., -10.,  15.])\n>>>  # no scaling factor\n>>> idst(dst(x, type=4), type=4)\narray([ 1. ,  2. ,  1. , -1. ,  1.5])\n```\n\n----------------------------------------\n\nTITLE: Comparing Survival Function with Numerical Integration\nDESCRIPTION: This snippet compares the survival function result with numerical integration of the PDF using `integrate.quad`. It checks the accuracy by equating the survival function with integrated PDF. Dependencies include `scipy.integrate`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_63\n\nLANGUAGE: ipython3\nCODE:\n```\nfrozen.sf(x) == 1 - integrate.quad(frozen.pdf, 0, x)[0]\n```\n\n----------------------------------------\n\nTITLE: Visualization of KStwo Statistics\nDESCRIPTION: Matplotlib code for visualizing the empirical CDF against the target N(0,1) CDF and highlighting the K-S statistics.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_kstwo.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import matplotlib.pyplot as plt\n>>> plt.step(np.concatenate([[-3], x]), ecdfs, where='post', label='Empirical CDF')\n>>> x3 = np.linspace(-3, 3, 100)\n>>> plt.plot(x3, target.cdf(x3), label='CDF for N(0, 1)')\n>>> plt.ylim([0, 1]); plt.grid(True); plt.legend();\n>>> plt.vlines([x[iminus]], ecdfs[iminus], cdfs[iminus], color='r', linestyle='solid', lw=4)\n>>> plt.vlines([x[iplus]], cdfs[iplus], ecdfs[iplus+1], color='m', linestyle='solid', lw=4)\n>>> plt.annotate('Dn-', xy=(x[iminus], (ecdfs[iminus]+ cdfs[iminus])/2),\n...              xytext=(x[iminus]+1, (ecdfs[iminus]+ cdfs[iminus])/2 - 0.02),\n...              arrowprops=dict(facecolor='white', edgecolor='r', shrink=0.05), size=15, color='r');\n>>> plt.annotate('Dn+', xy=(x[iplus], (ecdfs[iplus+1]+ cdfs[iplus])/2),\n...             xytext=(x[iplus]-2, (ecdfs[iplus+1]+ cdfs[iplus])/2 - 0.02),\n...             arrowprops=dict(facecolor='white', edgecolor='m', shrink=0.05), size=15, color='m');\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Eigenvalues and Eigenvectors for Matrix Batch\nDESCRIPTION: This snippet calculates eigenvalues and eigenvectors for a batch of matrices, showing how the output shapes relate to the input batch shape and core shapes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nevals, evecs = linalg.eig(input)\nevals.shape, evecs.shape\n```\n\n----------------------------------------\n\nTITLE: C Callback for geometric_transform\nDESCRIPTION: This C code defines a callback function for use with scipy.ndimage.geometric_transform. It calculates input coordinates based on output coordinates and a shift value passed as user data. It also includes the necessary Python wrapper to create a PyCapsule.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_35\n\nLANGUAGE: c\nCODE:\n```\n\"/* example.c */\n\n   #include <Python.h>\n   #include <numpy/npy_common.h>\n\n   static int\n   _transform(npy_intp *output_coordinates, double *input_coordinates,\n              int output_rank, int input_rank, void *user_data)\n   {\n       npy_intp i;\n       double shift = *(double *)user_data;\n\n       for (i = 0; i < input_rank; i++) {\n           input_coordinates[i] = output_coordinates[i] - shift;\n       }\n       return 1;\n   }\n\n   static char *transform_signature = \\\"int (npy_intp *, double *, int, int, void *)\\\";\n\n   static PyObject *\n   py_get_transform(PyObject *obj, PyObject *args)\n   {\n       if (!PyArg_ParseTuple(args, \\\"\\\")) return NULL;\n       return PyCapsule_New(_transform, transform_signature, NULL);\n   }\n\n   static PyMethodDef ExampleMethods[] = {\n       {\\\"get_transform\\\", (PyCFunction)py_get_transform, METH_VARARGS, \\\"\\\"},\n       {NULL, NULL, 0, NULL}\n   };\n\n   /* Initialize the module */\n   static struct PyModuleDef example = {\n       PyModuleDef_HEAD_INIT,\n       \\\"example\\\",\n       NULL,\n       -1,\n       ExampleMethods,\n       NULL,\n       NULL,\n       NULL,\n       NULL\n   };\n\n   PyMODINIT_FUNC\n   PyInit_example(void)\n   {\n       return PyModule_Create(&example);\n   }\"\n```\n\n----------------------------------------\n\nTITLE: Building SciPy with Clang compiler\nDESCRIPTION: Configures and builds SciPy using Clang as the C and C++ compiler, and gfortran as the Fortran compiler. It specifies a custom build directory to keep this build separate from the default GCC build.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCC=clang CXX=clang++ FC=gfortran python dev.py --build-dir=build-clang build\n```\n\n----------------------------------------\n\nTITLE: Plotting Chi-squared distribution for Jarque-Bera\nDESCRIPTION: This snippet generates a plot of the chi-squared distribution with two degrees of freedom, representing the null distribution for the Jarque-Bera test.  It uses `matplotlib` for plotting and `scipy.stats.chi2` to define the distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\ndist = stats.chi2(df=2)\njb_val = np.linspace(0, 11, 100)\npdf = dist.pdf(jb_val)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef jb_plot(ax):  # we'll reuse this\n    ax.plot(jb_val, pdf)\n    ax.set_title(\"Jarque-Bera Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\njb_plot(ax)\nplt.show();\n```\n\n----------------------------------------\n\nTITLE: Annotating Shapiro-Wilk Test Visualization\nDESCRIPTION: This code snippet creates a second plot that annotates the p-value of the Shapiro-Wilk test, highlighting the relevant area of the null distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_shapiro.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nannotation = (f'p-value={res.pvalue:.6f}\\n(highlighted area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (0.75, 0.1), (0.68, 0.7), arrowprops=props)\ni_extreme = np.where(bins <= res.statistic)[0]\nfor i in i_extreme:\n    ax.patches[i].set_color('C1')\nplt.xlim(0.65, 0.9)\nplt.ylim(0, 4)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Univariate Minimization Method in SciPy\nDESCRIPTION: Implementation of a custom univariate minimization function that uses a simple stepwise search strategy, returning an OptimizeResult object compatible with SciPy's minimize_scalar interface.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef custmin(fun, bracket, args=(), maxfev=None, stepsize=0.1,\n        maxiter=100, callback=None, **options):\n    bestx = (bracket[1] + bracket[0]) / 2.0\n    besty = fun(bestx)\n    funcalls = 1\n    niter = 0\n    improved = True\n    stop = False\n\n    while improved and not stop and niter < maxiter:\n        improved = False\n        niter += 1\n        for testx in [bestx - stepsize, bestx + stepsize]:\n            testy = fun(testx, *args)\n            funcalls += 1\n            if testy < besty:\n                besty = testy\n                bestx = testx\n                improved = True\n        if callback is not None:\n            callback(bestx)\n        if maxfev is not None and funcalls >= maxfev:\n            stop = True\n            break\n\n    return OptimizeResult(fun=besty, x=bestx, nit=niter,\n                          nfev=funcalls, success=(niter > 1))\ndef f(x):\n   return (x - 2)**2 * (x + 2)**2\nres = minimize_scalar(f, bracket=(-3.5, 0), method=custmin,\n                      options=dict(stepsize = 0.05))\nres.x\n-2.0\n```\n\n----------------------------------------\n\nTITLE: Evaluating a 2D Spline with bisplev\nDESCRIPTION: This snippet evaluates the 2D spline and its derivatives using bisplev. It requires the tck list output from bisplrep and allows for partial derivative computations in both x and y directions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> znew = interpolate.bisplev(xnew[:,0], ynew[0,:], tck)\n```\n\n----------------------------------------\n\nTITLE: Statistical Moments Calculation\nDESCRIPTION: Calculates and prints statistical moments (mean, variance, skew, kurtosis) for the discrete normal distribution\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> print('mean = %6.4f, variance = %6.4f, skew = %6.4f, kurtosis = %6.4f' %\n...       normdiscrete.stats(moments='mvsk'))\n>>> nd_std = np.sqrt(normdiscrete.stats(moments='v'))\n```\n\n----------------------------------------\n\nTITLE: DCT and IDCT Transform Examples\nDESCRIPTION: Demonstrates the relationship between DCT and IDCT transforms using different types and normalizations. Shows how the transforms are inverses of each other and the effect of normalization on scaling.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import dct, idct\nx = np.array([1.0, 2.0, 1.0, -1.0, 1.5])\n\n# DCT-II and DCT-III inverse relationship\ndct(dct(x, type=2, norm='ortho'), type=3, norm='ortho')\ndct(dct(x, type=2), type=3)\nidct(dct(x, type=2), type=2)\n\n# DCT-I inverse relationship\ndct(dct(x, type=1, norm='ortho'), type=1, norm='ortho')\ndct(dct(x, type=1), type=1)\nidct(dct(x, type=1), type=1)\n\n# DCT-IV inverse relationship\ndct(dct(x, type=4, norm='ortho'), type=4, norm='ortho')\ndct(dct(x, type=4), type=4)\nidct(dct(x, type=4), type=4)\n```\n\n----------------------------------------\n\nTITLE: Monte Carlo Test for P-value Approximation Using SciPy in Python\nDESCRIPTION: Utilizing Monte Carlo simulation, this snippet approximates the p-value of the kurtosis test given a small sample size. The method provides an alternative to the asymptotic approximation in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kurtosistest.md#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef statistic(x, axis):\n    # get just the skewtest statistic; ignore the p-value\n    return stats.kurtosistest(x, axis=axis).statistic\nres = stats.monte_carlo_test(x, stats.norm.rvs, statistic)\nfig, ax = plt.subplots(figsize=(8, 5))\nkt_plot(ax)\nax.hist(res.null_distribution, np.linspace(-5, 5, 50),\n        density=True)\nax.legend(['asymptotic approximation\\n(many observations)',\n           'Monte Carlo approximation\\n(11 observations)'])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Object Measurement Using Sum Function\nDESCRIPTION: Shows how to measure properties of labeled objects using the sum function, including examples of measuring specific objects and multiple objects at once.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> image = np.arange(4 * 6).reshape(4, 6)\n>>> mask = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])\n>>> labels = label(mask)[0]\n>>> slices = find_objects(labels)\n>>> from scipy.ndimage import sum as ndi_sum\n>>> ndi_sum(image, labels, 2)\n>>> ndi_sum(image[slices[1]], labels[slices[1]], 2)\n>>> ndi_sum(image, labels, [0, 2])\n```\n\n----------------------------------------\n\nTITLE: Griddata Interpolation Implementation\nDESCRIPTION: Demonstrates three different interpolation methods (nearest, linear, cubic) using scipy.interpolate.griddata on scattered data points.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_unstructured.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import griddata\ngrid_z0 = griddata(points, values, (grid_x, grid_y), method='nearest')\ngrid_z1 = griddata(points, values, (grid_x, grid_y), method='linear')\ngrid_z2 = griddata(points, values, (grid_x, grid_y), method='cubic')\n```\n\n----------------------------------------\n\nTITLE: Performing Kendall's Tau Test with Scipy in Python\nDESCRIPTION: This code snippet uses the SciPy library to calculate Kendall's tau statistic and p-value for the provided data. It highlights how to determine the statistical correlation between two measurements. Ensure SciPy is installed before execution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.kendalltau(x, y)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Verifying Spectrogram Calculation\nDESCRIPTION: Demonstrates how to verify that the spectrogram calculation matches expected results using numpy's allclose function\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nnp.allclose(SFT.spectrogram(z), abs(Sz1)**2)\nnp.allclose(t2, t3)\nnp.allclose(f2, SFT.f)\nnp.allclose(Sz2, Sz3)\n```\n\n----------------------------------------\n\nTITLE: Loading a MATLAB Struct in Python\nDESCRIPTION: Shows how to load a MATLAB struct file in Python and access its contents using different loading options.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> mat_contents = sio.loadmat('octave_struct.mat')\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct.shape\n>>> val = oct_struct[0, 0]\n>>> val\n>>> val['field1']\n>>> val['field2']\n>>> val.dtype\n\n>>> mat_contents = sio.loadmat('octave_struct.mat', squeeze_me=True)\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct.shape\n\n>>> mat_contents = sio.loadmat('octave_struct.mat', struct_as_record=False)\n>>> oct_struct = mat_contents['my_struct']\n>>> oct_struct[0,0].field1\n\n>>> mat_contents = sio.loadmat('octave_struct.mat', struct_as_record=False, squeeze_me=True)\n>>> oct_struct = mat_contents['my_struct']\n>>> type(oct_struct)\n>>> oct_struct.field1\n```\n\n----------------------------------------\n\nTITLE: Converting Words to NumPy Array for Processing\nDESCRIPTION: Converts the word list to a NumPy array and creates a byte representation for Hamming distance calculation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/csgraph.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nword_list = np.asarray(word_list)\nword_list.sort()\n\nword_bytes = np.ndarray((word_list.size, word_list.itemsize),\n                        dtype='uint8',\n                        buffer=word_list.data)\nword_bytes = word_bytes[:, ::word_list.itemsize//3]\n```\n\n----------------------------------------\n\nTITLE: Using C Callback in Python with LowLevelCallable\nDESCRIPTION: This Python code demonstrates using the C callback function defined in the previous snippet with scipy.ndimage.geometric_transform. It creates a LowLevelCallable from the PyCapsule returned by the C extension and passes user data using ctypes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n\"import ctypes\n   import numpy as np\n   from scipy import ndimage, LowLevelCallable\n\n   from example import get_transform\n\n   shift = 0.5\n\n   user_data = ctypes.c_double(shift)\n   ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)\n   callback = LowLevelCallable(get_transform(), ptr)\n   im = np.arange(12).reshape(4, 3).astype(np.float64)\n   print(ndimage.geometric_transform(im, callback))\"\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Spline Derivatives in Python\nDESCRIPTION: This code calculates the first derivative of a cubic spline using SciPy's splev function and plots it alongside the true derivative (cosine function).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Derivative of spline\nyder = interpolate.splev(xnew, tck, der=1)   # or BSpline(*tck)(xnew, 1)\nplt.figure()\nplt.plot(xnew, yder, xnew, np.cos(xnew),'--')\nplt.legend(['Cubic Spline', 'True'])\nplt.axis([-0.05, 6.33, -1.05, 1.05])\nplt.title('Derivative estimation from spline')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Monte Carlo Approximation for P-Value in SciPy\nDESCRIPTION: This snippet showcases using Scipy's Monte Carlo test for estimating the p-value for small sample sizes. It uses 'stats.monte_carlo_test' to provide a stochastic approximation of the exact p-value. Dependencies include Scipy and Matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_skewtest.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(x, axis):\n    # get just the skewtest statistic; ignore the p-value\n    return stats.skewtest(x, axis=axis).statistic\n\nres = stats.monte_carlo_test(x, stats.norm.rvs, statistic)\nfig, ax = plt.subplots(figsize=(8, 5))\nst_plot(ax)\nax.hist(res.null_distribution, np.linspace(-5, 5, 50),\n        density=True)\nax.legend(['asymptotic approximation\\n(many observations)',\n           'Monte Carlo approximation\\n(11 observations)'])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Replicating numpy.interp behavior with scipy.interpolate.interp1d in Python\nDESCRIPTION: This snippet demonstrates how to use interp1d to mimic the behavior of numpy.interp by setting appropriate fill values for extrapolation. It creates a 2D interpolation function and plots the results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import interp1d\n\nx = np.linspace(0, 1.5*np.pi, 11)\ny = np.column_stack((np.cos(x), np.sin(x)))   # y.shape is (11, 2)\n\nfunc = interp1d(x, y,\n                axis=0,  # interpolate along columns\n                bounds_error=False,\n                kind='linear',\n                fill_value=(y[0], y[-1]))\nxnew = np.linspace(-np.pi, 2.5*np.pi, 51)\nynew = func(xnew)\n\nfix, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\nax1.plot(xnew, ynew[:, 0])\nax1.plot(x, y[:, 0], 'o')\n\nax2.plot(xnew, ynew[:, 1])\nax2.plot(x, y[:, 1], 'o')\nplt.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Calculating P-value and Visualizing Critical Region\nDESCRIPTION: This snippet calculates the p-value for a two-sided Spearman's rho test using the t-distribution approximation and visualizes the critical region on the null distribution plot. It highlights the area under the curve beyond the transformed test statistic and its negative, representing the probability of observing a statistic as extreme or more extreme under the null hypothesis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nrs = res.statistic  # original statistic\ntransformed = rs * np.sqrt(dof / ((rs+1.0)*(1.0-rs)))\npvalue = dist.cdf(-transformed) + dist.sf(transformed)\nannotation = (f'p-value={pvalue:.4f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (2.7, 0.025), (3, 0.03), arrowprops=props)\ni = t_vals >= transformed\nax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')\ni = t_vals <= -transformed\nax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(-5, 5)\nax.set_ylim(0, 0.1)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Comparing Sample Distributions with KStwo\nDESCRIPTION: Comprehensive example comparing a sample drawn from N(0.5, 1) against N(0, 1) target distribution, calculating K-S statistics and plotting results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_kstwo.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import norm\n>>> n = 5\n>>> gendist = norm(0.5, 1)       # Normal distribution, mean 0.5, stddev 1\n>>> x = np.sort(gendist.rvs(size=n, random_state=np.random.default_rng()))\n>>> x\narray([-1.59113056, -0.66335147,  0.54791569,  0.78009321,  1.27641365])  # may vary\n>>> target = norm(0, 1)\n>>> cdfs = target.cdf(x)\n>>> cdfs\narray([0.0557901 , 0.25355274, 0.7081251 , 0.78233199, 0.89909533])   # may vary\n>>> ecdfs = np.arange(n+1, dtype=float)/n\n>>> cols = np.column_stack([x, ecdfs[1:], cdfs, cdfs - ecdfs[:n], ecdfs[1:] - cdfs])\n>>> np.set_printoptions(precision=3)\n>>> cols\narray([[-1.591,  0.2  ,  0.056,  0.056,  0.144],     # may vary\n       [-0.663,  0.4  ,  0.254,  0.054,  0.146],\n       [ 0.548,  0.6  ,  0.708,  0.308, -0.108],\n       [ 0.78 ,  0.8  ,  0.782,  0.182,  0.018],\n       [ 1.276,  1.   ,  0.899,  0.099,  0.101]])\n>>> gaps = cols[:, -2:]\n>>> Dnpm = np.max(gaps, axis=0)\n>>> Dn = np.max(Dnpm)\n>>> iminus, iplus = np.argmax(gaps, axis=0)\n>>> print('Dn- = %f (at x=%.2f)' % (Dnpm[0], x[iminus]))\n>>> print('Dn+ = %f (at x=%.2f)' % (Dnpm[1], x[iplus]))\n>>> print('Dn  = %f' % (Dn))\n```\n\n----------------------------------------\n\nTITLE: Tracking Coordinates During Filtering with generic_filter1d in Python\nDESCRIPTION: Shows how to track coordinates while filtering with generic_filter1d using a class-based approach. This implementation skips the filter axis when updating coordinates.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.arange(12).reshape(3,4)\n>>>\n>>> class fnc1d_class:\n...     def __init__(self, shape, axis = -1):\n...         # store the filter axis:\n...         self.axis = axis\n...         # store the shape:\n...         self.shape = shape\n...         # initialize the coordinates:\n...         self.coordinates = [0] * len(shape)\n...\n...     def filter(self, iline, oline):\n...         oline[...] = iline[:-2] + 2 * iline[1:-1] + 3 * iline[2:]\n...         print(self.coordinates)\n...         # calculate the next coordinates:\n...         axes = list(range(len(self.shape)))\n...         # skip the filter axis:\n...         del axes[self.axis]\n...         axes.reverse()\n...         for jj in axes:\n...             if self.coordinates[jj] < self.shape[jj] - 1:\n...                 self.coordinates[jj] += 1\n...                 break\n...             else:\n...                 self.coordinates[jj] = 0\n...\n>>> fnc = fnc1d_class(shape = (3,4))\n>>> generic_filter1d(a, fnc.filter, 3)\n[0, 0]\n[1, 0]\n[2, 0]\narray([[ 3,  8, 14, 17],\n      [27, 32, 38, 41],\n      [51, 56, 62, 65]])\n```\n\n----------------------------------------\n\nTITLE: Timing odeint for Gray-Scott System Without Banded Matrix Optimization\nDESCRIPTION: This code times the performance of solving the Gray-Scott system using SciPy's odeint without specifying the banded structure of the Jacobian matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%timeit sola = odeint(grayscott1d, y0, t, args=(f, k, Du, Dv, dx))\n# 1 loop, best of 3: 25.2 s per loop\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters with generic_filter1d in Python\nDESCRIPTION: Demonstrates how to use named parameters with the extra_keywords argument in generic_filter1d. This provides a more readable way to pass parameters to the filter function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> generic_filter1d(a, fnc, 3, extra_keywords = {'a':2, 'b':3})\narray([[ 3,  8, 14, 17],\n       [27, 32, 38, 41],\n       [51, 56, 62, 65]])\n```\n\n----------------------------------------\n\nTITLE: Plotting Splines and Original Data in Python\nDESCRIPTION: This code plots the original noisy data points, the underlying sine function, and two splines with different smoothing parameters using Matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport matplotlib.pyplot as plt\nxnew = np.arange(0, 9/4, 1/50) * np.pi\nplt.plot(xnew, np.sin(xnew), '-.', label='sin(x)')\nplt.plot(xnew, BSpline(*tck)(xnew), '-', label='s=0')\nplt.plot(xnew, BSpline(*tck_s)(xnew), '-', label=f's={len(x)}')\nplt.plot(x, y, 'o')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Generating Identical Random Variates with Fixed Seed\nDESCRIPTION: This example illustrates how to generate nearly identical random variates using both the distribution's built-in `rvs` method and `NumericalInverseHermite`'s `rvs` method, given the same random state. This ensures that both methods produce similar results when using the same seed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> dist = genexpon(9, 16, 3)\n>>> rng = NumericalInverseHermite(dist)\n>>> # `seed` ensures identical random streams are used by each `rvs` method\n>>> seed = 500072020\n>>> rvs1 = dist.rvs(size=100, random_state=np.random.default_rng(seed))\n>>> rvs2 = rng.rvs(size=100, random_state=np.random.default_rng(seed))\n>>> np.allclose(rvs1, rvs2)\nTrue\n```\n\n----------------------------------------\n\nTITLE: Basic 1D FFT Example with NumPy Arrays\nDESCRIPTION: Demonstrates basic forward and inverse FFT operations using scipy.fft on a 1D array with real values. Shows how the transform preserves the original signal when applying forward then inverse transforms.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import fft, ifft\nimport numpy as np\nx = np.array([1.0, 2.0, 1.0, -1.0, 1.5])\ny = fft(x)\ny\nyinv = ifft(y)\nyinv\n```\n\n----------------------------------------\n\nTITLE: Transforming Cauchy to Folded Cauchy in SciPy\nDESCRIPTION: This snippet shows how to create a folded Cauchy distribution by taking the absolute value of a Cauchy-distributed random variable. It defines a Cauchy distribution, adds a constant, takes the absolute value, and plots the PDF of the resulting distribution, comparing it with SciPy's built-in `foldcauchy` distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nCauchy = stats.make_distribution(stats.cauchy)\nc = 4.72\n\nX = Cauchy() + c  \nY = abs(X)  # compare to `foldcauchy`\nY.plot(t=('x', 0, 60))\n\nx = np.linspace(0, 60, 300)\nplt.plot(x, stats.foldcauchy(c=c).pdf(x), '--')\nplt.legend(['`abs(X)`', '`foldcauchy`'])\nplt.title(\"Folded Cauchy PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Defining Negative Log Product Spacing Function\nDESCRIPTION: This snippet defines a function `nlps` to calculate the negative log product spacing for maximum spacing estimation (MSE). It sorts the data along with the distribution's support endpoints and calculates the log of the cumulative distribution function (CDF) between consecutive sorted points, returning the negative sum.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n\"def nlps(x):\n    c, scale = x\n    X = Weibull(c=c) * scale\n    x = np.sort(np.concatenate((data, X.support())))  # Append the endpoints of the support to the data\n    return -X.logcdf(x[:-1], x[1:]).sum().real  # Minimize the sum of the logs the probability mass between points\n\nres_mps = optimize.minimize(nlps, x0, bounds=bounds)\nres_mps.x\"\n```\n\n----------------------------------------\n\nTITLE: Guidelines for Adding Array API Support to SciPy Functions\nDESCRIPTION: Provides a code pattern for modifying existing SciPy functions to support the array API standard. The example shows how to validate input arrays, use the array namespace, and handle conversions when calling compiled code.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef toto(a, b):\n    xp = array_namespace(a, b)\n    a = xp.asarray(a)\n    b = xp_copy(b, xp=xp)  # our custom helper is needed for copy\n\n    c = xp.sum(a) - xp.prod(b)\n\n    # this is some C or Cython call\n    c = np.asarray(c)\n    d = cdist(c)\n    d = xp.asarray(d)\n\n    return d\n```\n\n----------------------------------------\n\nTITLE: Manual Location and Scale Parameter Estimation\nDESCRIPTION: Demonstrates how to manually implement location and scale parameter estimation using method of moments, which was the technique used in the old API's fit_loc_scale method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nX = Weibull(c=c)\ndef fit_loc_scale(X, data):\n    m, v = X.mean(), X.variance()\n    m_, v_ = data.mean(), data.var()\n    scale = np.sqrt(v_ / v)\n    loc = m_ - scale*m\n    return loc, scale\n\nfit_loc_scale(X, data)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross Compilation Constants for NumPy and Pythran in Meson Cross File\nDESCRIPTION: This snippet demonstrates how to specify the paths to NumPy and Pythran include directories in a Meson cross file. This configuration helps avoid common issues when cross-compiling SciPy by explicitly setting the paths to host Python's site-packages rather than accidentally using the build Python's packages.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/cross_compilation.rst#2025-04-14_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[constants]\nsitepkg = '/abspath/to/host-pythons/site-packages/'\n\n[properties]\nnumpy-include-dir = sitepkg + 'numpy/core/include'\npythran-include-dir = sitepkg + 'pythran'\n```\n\n----------------------------------------\n\nTITLE: Strict Multiplication Handling in Sparse Array Code Migration\nDESCRIPTION: This snippet demonstrates how to raise exceptions for improper multiplication operations during migration, ensuring that matrix multiplications are explicitly marked with the new `@` operator to avoid errors in the codebase.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport scipy\n\n\nclass _strict_mul_mixin:\n    def __mul__(self, other):\n        if not scipy.sparse._sputils.isscalarlike(other):\n            raise ValueError('Operator * used here! Change to @?')\n        return super().__mul__(other)\n\n    def __rmul__(self, other):\n        if not scipy.sparse._sputils.isscalarlike(other):\n            raise ValueError('Operator * used here! Change to @?')\n        return super().__rmul__(other)\n\n    def __imul__(self, other):\n        if not scipy.sparse._sputils.isscalarlike(other):\n            raise ValueError('Operator * used here! Change to @?')\n        return super().__imul__(other)\n\n    def __pow__(self, *args, **kwargs):\n        raise ValueError('spmatrix ** found! Use linalg.matrix_power?')\n\nclass _strict_coo_matrix(_strict_mul_mixin, scipy.sparse.coo_matrix):\n    pass\n\nclass _strict_bsr_matrix(_strict_mul_mixin, scipy.sparse.bsr_matrix):\n    pass\n\nclass _strict_csr_matrix(_strict_mul_mixin, scipy.sparse.csr_matrix):\n    pass\n\nclass _strict_csc_matrix(_strict_mul_mixin, scipy.sparse.csc_matrix):\n    pass\n\nclass _strict_dok_matrix(_strict_mul_mixin, scipy.sparse.dok_matrix):\n    pass\n\nclass _strict_lil_matrix(_strict_mul_mixin, scipy.sparse.lil_matrix):\n    pass\n\nclass _strict_dia_matrix(_strict_mul_mixin, scipy.sparse.dia_matrix):\n    pass\n\nscipy.sparse.coo_matrix = scipy.sparse._coo.coo_matrix = _strict_coo_matrix\nscipy.sparse.bsr_matrix = scipy.sparse._bsr.bsr_matrix = _strict_bsr_matrix\nscipy.sparse.csr_matrix = scipy.sparse._csr.csr_matrix = _strict_csr_matrix\nscipy.sparse.csc_matrix = scipy.sparse._csc.csc_matrix = _strict_csc_matrix\nscipy.sparse.dok_matrix = scipy.sparse._dok.dok_matrix = _strict_dok_matrix\nscipy.sparse.lil_matrix = scipy.sparse._lil.lil_matrix = _strict_lil_matrix\n\n```\n\n----------------------------------------\n\nTITLE: Reducing U-Error by Decreasing U-Resolution\nDESCRIPTION: This snippet illustrates how reducing the `u_resolution` parameter can decrease the u-error, leading to a more accurate approximation of the inverse CDF. It shows that decreasing the u-resolution comes at the cost of increased computation time and a larger number of intervals.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> rng2 = NumericalInverseHermite(dist, u_resolution=1e-13)\n>>> rng2.u_error(sample_size=1000000)\nUError(max_error=9.32027892364129e-14, mean_absolute_error=1.5194172675685075e-14)\n```\n\n----------------------------------------\n\nTITLE: 2D Spline Interpolation Using bisplrep\nDESCRIPTION: The bisplrep function is used for smooth spline fitting to a 2D surface, taking 1-D arrays as inputs for surface points. It allows customization of spline orders and smoothing factors, outputting a list of spline representation parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> tck = interpolate.bisplrep(x, y, z, s=0)\n```\n\n----------------------------------------\n\nTITLE: Conditional Expected Value with New API\nDESCRIPTION: Demonstrates how to calculate a conditional expected value using the new API's cdf interval calculation capability to avoid potential numerical issues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nintegrate.quad(f, a=a, b=b)[0] / X.cdf(a, b)\n```\n\n----------------------------------------\n\nTITLE: Parallel Computation of Helmholtz Equation Solution using Cython\nDESCRIPTION: This Cython code demonstrates how to use parallel computation with prange to evaluate special functions at many points. It computes the fundamental solution to the Helmholtz equation using the Hankel function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/special.rst#2025-04-14_snippet_3\n\nLANGUAGE: Cython\nCODE:\n```\nfrom libc.math cimport fabs\ncimport cython\nfrom cython.parallel cimport prange\n\nimport numpy as np\nimport scipy.special as sc\ncimport scipy.special.cython_special as csc\n\ndef serial_G(k, x, y):\n    return 0.25j*sc.hankel1(0, k*np.abs(x - y))\n\n@cython.boundscheck(False)\n@cython.wraparound(False)\ncdef void _parallel_G(double k, double[:,:] x, double[:,:] y,\n                      double complex[:,:] out) nogil:\n    cdef int i, j\n\n    for i in prange(x.shape[0]):\n        for j in range(y.shape[0]):\n            out[i,j] = 0.25j*csc.hankel1(0, k*fabs(x[i,j] - y[i,j]))\n\ndef parallel_G(k, x, y):\n    out = np.empty_like(x, dtype='complex128')\n    _parallel_G(k, x, y, out)\n    return out\n```\n\n----------------------------------------\n\nTITLE: Minimizing Rosenbrock Function using Trust-NCG Method with Full Hessian\nDESCRIPTION: Example of using SciPy's minimize function with the trust-region Newton-conjugate gradient method (trust-ncg) to optimize the Rosenbrock function using the full Hessian matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nres = minimize(rosen, x0, method='trust-ncg',\n               jac=rosen_der, hess=rosen_hess,\n               options={'gtol': 1e-8, 'disp': True})\n```\n\n----------------------------------------\n\nTITLE: Plotting Chi-squared Distribution\nDESCRIPTION: This snippet generates a plot of the chi-squared distribution with two degrees of freedom, which represents the null distribution for the normality test. It uses matplotlib to create the plot and `scipy.stats.chi2` to define the distribution. The function `plot` encapsulates the plotting logic for reuse.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\ndist = stats.chi2(df=2)\nstat_vals = np.linspace(0, 16, 100)\npdf = dist.pdf(stat_vals)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef plot(ax):  # we'll reuse this\n    ax.plot(stat_vals, pdf)\n    ax.set_title(\"Normality Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Annotating Levene Test P-Value on Plot\nDESCRIPTION: This snippet annotates the p-value obtained from the Levene test onto a plot of the F distribution using Matplotlib, visually highlighting the significant area.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\npvalue = dist.sf(res.statistic)\nannotation = (f'p-value={pvalue:.3f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (1.5, 0.22), (2.25, 0.3), arrowprops=props)\ni = val >= res.statistic\nax.fill_between(val[i], y1=0, y2=pdf[i], color='C0')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Labeling connected components with 8-connectivity\nDESCRIPTION: This example demonstrates labeling connected regions using an 8-connected structuring element, where diagonal neighbors are considered connected. This changes the number of identified objects compared to 4-connectivity.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])\n>>> s = [[1,1,1], [1,1,1], [1,1,1]]\n>>> label(a, s)[0]\narray([[0, 1, 1, 0, 0, 0],\n           [0, 1, 1, 0, 1, 0],\n           [0, 0, 0, 1, 1, 1],\n           [0, 0, 0, 0, 1, 0]], dtype=int32)\n```\n\n----------------------------------------\n\nTITLE: Using TDR for Sampling from Standard Normal Distribution with SciPy\nDESCRIPTION: This snippet demonstrates how to create a standard normal distribution class with methods for PDF and its derivative, then utilize the TransformedDensityRejection class from SciPy to generate samples from this distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_tdr.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.stats.sampling import TransformedDensityRejection\nfrom scipy.stats import norm\n\nclass StandardNormal:\n    def pdf(self, x):\n        # note that the normalization constant is not required\n        return np.exp(-0.5 * x*x)\n    def dpdf(self, x):\n        return -x * np.exp(-0.5 * x*x)\n\ndist = StandardNormal()\n\nurng = np.random.default_rng()\nrng = TransformedDensityRejection(dist, random_state=urng)\nprint(rng.rvs())\n```\n\n----------------------------------------\n\nTITLE: Generating Independent QMC Samples (512x2) in SciPy\nDESCRIPTION: This snippet generates two independent quasi-random samples, each of length 512, from a standard normal distribution. It creates histograms of each sample to visualize their distribution. The shape of the generated sample array is (512, 2), indicating 512 samples each with dimension 2.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nsamples = X.sample((512, 2), rng=qrng)\nplt.hist(samples[:, 0], bins, alpha=0.5, label='sample 0')\nplt.hist(samples[:, 1], bins, alpha=0.5, label='sample 1')\nplt.title('Histograms of normally-distributed samples')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Confidence Intervals with New API\nDESCRIPTION: Demonstrates how to calculate confidence intervals in the new API by using inverse CDF and complementary CDF methods with the appropriate probability values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_27\n\nLANGUAGE: python\nCODE:\n```\np = 1 - a\nX.icdf(p/2), X.iccdf(p/2)\n```\n\n----------------------------------------\n\nTITLE: Parallel Differential Evolution with Pool.map\nDESCRIPTION: This snippet demonstrates using `multiprocessing.Pool` with the `map` function to parallelize the `differential_evolution` optimization. It shows how to provide a map-like callable as a worker to distribute function evaluations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n>>> from multiprocessing import Pool\n>>> with Pool(2) as pwl:\n...     res = differential_evolution(rosen, bnds, workers=pwl.map, updating='deferred')\n```\n\n----------------------------------------\n\nTITLE: Calculating NLLF with Fixed Location Parameters\nDESCRIPTION: This snippet calculates the negative log-likelihood (NLLF) of the data using the estimated parameters obtained from fitting the Weibull distribution with a fixed location. It uses `stats.weibull_min.nnlf` with the fitted parameters `c_`, `loc_` (which is fixed at 0), and `scale_`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n\"stats.weibull_min.nnlf((c_, loc_, scale_), data)\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Spearman's Rho with One-Sided Alternative\nDESCRIPTION: This snippet calculates Spearman's rank-order correlation coefficient with a one-sided alternative hypothesis ('greater'), specifying that the test should only consider correlations in the positive direction.  The `alternative` parameter is used to specify the direction of the hypothesis test.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nres = stats.spearmanr(x, y, alternative='greater')\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson Build for Cython Extension\nDESCRIPTION: Meson build configuration for compiling a Cython file into a Python extension module. This setup processes the _bglu_dense.pyx file and creates an importable extension with necessary dependencies and build parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/cython.rst#2025-04-14_snippet_0\n\nLANGUAGE: meson\nCODE:\n```\n_bglu_dense_c = opt_gen.process('_bglu_dense.pyx')\n\npy3.extension_module('_bglu_dense',\n  _bglu_dense_c,\n  c_args: cython_c_args,\n  dependencies: np_dep,\n  link_args: version_link_args,\n  install: true,\n  subdir: 'scipy/optimize'\n)\n```\n\n----------------------------------------\n\nTITLE: Thresholding array using NumPy\nDESCRIPTION: This example demonstrates how to threshold an array using NumPy's `where` function to create a binary image where values greater than 1 are set to 1, and others to 0. This technique is a basic form of image segmentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.array([[1,2,2,1,1,0],\n>>>               [0,2,3,1,2,0],\n>>>               [1,1,1,3,3,2],\n>>>               [1,1,1,1,2,1]])\n>>> np.where(a > 1, 1, 0)\narray([[0, 1, 1, 0, 0, 0],\n\t  [0, 1, 1, 0, 1, 0],\n\t  [0, 0, 0, 1, 1, 1],\n\t  [0, 0, 0, 0, 1, 0]])\n```\n\n----------------------------------------\n\nTITLE: Solving a transcendental equation using SciPy's brentq in Python\nDESCRIPTION: This code snippet demonstrates how to solve the equation a*x = 1/tan(x) using SciPy's brentq root-finding method. It sets up the problem and finds a solution for a specific value of the parameter 'a'.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import brentq\n\ndef f(x, a):\n    return a*x - 1/np.tan(x)\n\na = 3\nx0 = brentq(f, 1e-16, np.pi/2, args=(a,))   # here we shift the left edge\n                                            # by a machine epsilon to avoid\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with SciPy Distributions - Multiple Probabilities and Parameters\nDESCRIPTION: Shows how to use NumPy broadcasting rules with SciPy distributions to calculate critical values for multiple probabilities and degrees of freedom simultaneously.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> stats.t.isf([0.1, 0.05, 0.01], [[10], [11]])\narray([[ 1.37218364,  1.81246112,  2.76376946],\n       [ 1.36343032,  1.79588482,  2.71807918]])\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Type in scipy.ndimage Correlation\nDESCRIPTION: Demonstrates how to specify the output type when using the correlate function from scipy.ndimage. It shows the default behavior and how to explicitly set the output type to float64.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.ndimage import correlate\n>>> import numpy as np\n>>> correlate(np.arange(10), [1, 2.5])\narray([ 0,  2,  6,  9, 13, 16, 20, 23, 27, 30])\n>>> correlate(np.arange(10), [1, 2.5], output=np.float64)\narray([  0. ,   2.5,   6. ,   9.5,  13. ,  16.5,  20. ,  23.5,  27. ,  30.5])\n```\n\n----------------------------------------\n\nTITLE: Calculating and annotating p-value on Chi-squared plot\nDESCRIPTION: This snippet calculates the p-value for the Jarque-Bera test and annotates the chi-squared distribution plot with the p-value and shaded area representing values more extreme than the observed statistic. The `dist.sf()` method from SciPy calculates the survival function, which returns the p-value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\njb_plot(ax)\npvalue = dist.sf(res.statistic)\nannotation = (f'p-value={pvalue:.6f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (7.5, 0.01), (8, 0.05), arrowprops=props)\ni = jb_val >= res.statistic  # indices of more extreme statistic values\nax.fill_between(jb_val[i], y1=0, y2=pdf[i])\nax.set_xlim(0, 11)\nax.set_ylim(0, 0.3)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Short-Time Fourier Transform with Legacy Compatibility\nDESCRIPTION: Demonstrates how to create a Short-Time FFT object that matches legacy spectrogram behavior using specific parameters and configurations\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nSFT = ShortTimeFFT.from_window(win, fs, nperseg, noverlap,\n                                fft_mode='centered',\n                                scale_to='magnitude', phase_shift=None)\n```\n\n----------------------------------------\n\nTITLE: Designing Arbitrary FIR Filter with firwin2 in Python\nDESCRIPTION: This snippet shows how to design an FIR filter with an arbitrary frequency response using scipy.signal.firwin2, and plot its frequency response.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipy.signal as signal\nimport matplotlib.pyplot as plt\n\nb = signal.firwin2(150, [0.0, 0.3, 0.6, 1.0], [1.0, 2.0, 0.5, 0.0])\nw, h = signal.freqz(b)\n\nplt.title('Digital filter frequency response')\nplt.plot(w, np.abs(h))\nplt.title('Digital filter frequency response')\nplt.ylabel('Amplitude Response')\nplt.xlabel('Frequency (rad/sample)')\nplt.grid()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Using Cython Bindings for Special Functions in SciPy\nDESCRIPTION: This Cython code demonstrates how to use the cython_special module to access scalar, typed versions of special functions. It shows examples of using gamma and sici functions with both real and complex arguments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/special.rst#2025-04-14_snippet_1\n\nLANGUAGE: Cython\nCODE:\n```\ncimport scipy.special.cython_special as csc\n\ncdef:\n    double x = 1\n    double complex z = 1 + 1j\n    double si, ci, rgam\n    double complex cgam\n\nrgam = csc.gamma(x)\nprint(rgam)\ncgam = csc.gamma(z)\nprint(cgam)\ncsc.sici(x, &si, &ci)\nprint(si, ci)\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Reaction Terms for Gray-Scott Equations in Python\nDESCRIPTION: These functions define the source term G and reaction term H used in the Gray-Scott reaction-diffusion system. G represents the rate of change of concentration u, and H represents the rate of change of concentration v.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef G(u, v, f, k):\n    return f * (1 - u) - u*v**2\n\ndef H(u, v, f, k):\n    return -(f + k) * v + u*v**2\n```\n\n----------------------------------------\n\nTITLE: Defining L-moment Residual Function\nDESCRIPTION: This snippet defines a function `lmoment_residual` to calculate the difference between the L-moments of the distribution and the L-moments of the data.  It calculates the first two L-moments for both the Weibull distribution and the input data, then returns the Euclidean norm of the difference.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n\"def lmoment_residual(x):\n    c, scale = x\n    X = Weibull(c=c) * scale\n    E11 = stats.order_statistic(X, r=1, n=1).mean()\n    E12, E22 = stats.order_statistic(X, r=[1, 2], n=2).mean()\n    lmoments_X = [E11, 0.5*(E22 - E12)]  # the first two l-moments of the distribution\n    lmoments_x = stats.lmoment(data, order=[1, 2])  # first two l-moments of the data\n    return np.linalg.norm(lmoments_x - lmoments_X)  # Minimize the norm of the difference\n\nx0 = [0.4, 3]  # This method is a bit sensitive to the initial guess\nres_lmom = optimize.minimize(lmoment_residual, x0, bounds=bounds)\nres_lmom.x, res_lmom.fun  # residual should be ~0\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Distribution of Samples from TransformedDensityRejection in Python\nDESCRIPTION: This code creates a visualization comparing random samples generated by the TransformedDensityRejection method with the true standard normal distribution. It generates 1000 samples, plots their histogram, and compares it with the PDF of the standard normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom scipy.stats.sampling import TransformedDensityRejection\nfrom math import exp\n\nclass StandardNormal:\n    def pdf(self, x: float) -> float:\n        # note that the normalization constant isn't required\n        return exp(-0.5 * x*x)\n    def dpdf(self, x: float) -> float:\n        return -x * exp(-0.5 * x*x)\n\ndist = StandardNormal()\nurng = np.random.default_rng()\nrng = TransformedDensityRejection(dist, random_state=urng)\nrvs = rng.rvs(size=1000)\nx = np.linspace(rvs.min()-0.1, rvs.max()+0.1, num=1000)\nfx = norm.pdf(x)\nplt.plot(x, fx, 'r-', lw=2, label='true distribution')\nplt.hist(rvs, bins=20, density=True, alpha=0.8, label='random variates')\nplt.xlabel('x')\nplt.ylabel('PDF(x)')\nplt.title('Transformed Density Rejection Samples')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Double Integration Example\nDESCRIPTION: Shows how to perform double integration using dblquad with both constant and non-constant integration limits.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.integrate import dblquad\n>>> area = dblquad(lambda x, y: x*y, 0, 0.5, lambda x: 0, lambda x: 1-2*x)\n>>> area\n(0.010416666666666668, 1.1564823173178715e-16)\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Function with generic_filter1d in Python\nDESCRIPTION: Shows how to create a custom filter function to implement a 1D correlation using generic_filter1d. The function receives and modifies line arrays to produce the same result as correlate1d.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> def fnc(iline, oline):\n...     oline[...] = iline[:-2] + 2 * iline[1:-1] + 3 * iline[2:]\n...\n>>> from scipy.ndimage import generic_filter1d\n>>> generic_filter1d(a, fnc, 3)\narray([[ 3,  8, 14, 17],\n       [27, 32, 38, 41],\n       [51, 56, 62, 65]])\n```\n\n----------------------------------------\n\nTITLE: Evaluating CDF with NumericalInversePolynomial in Python\nDESCRIPTION: This snippet shows how to evaluate the Cumulative Distribution Function (CDF) using the NumericalInversePolynomial generator and compare it with the exact CDF from scipy.stats.norm.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> rng.cdf(1.959963984540054)\n0.9750000000042454\n>>> norm.cdf(1.959963984540054)\n0.975\n```\n\n----------------------------------------\n\nTITLE: Implementing nan_policy='omit' for Vector Transformation in Python\nDESCRIPTION: Shows how to implement the 'omit' option of nan_policy for functions that transform a vector to a new vector of the same size, where each output element depends on multiple input elements.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/nan_policy.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnan_mask = np.isnan(a)\ny = np.empty(a.shape, dtype=np.float64)\ny[~nan_mask] = func(a[~nan_mask])\ny[nan_mask] = np.nan\n```\n\n----------------------------------------\n\nTITLE: Optimized Cython Function\nDESCRIPTION: Enhanced version of the counting function using Cython type declarations. Demonstrates how adding static typing with 'cdef' can significantly improve performance.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/cython.rst#2025-04-14_snippet_2\n\nLANGUAGE: cython\nCODE:\n```\ndef myfun():\n    cdef int i = 1  # our first line of Cython code\n    while i < 10000000:\n        i += 1\n    return i\n```\n\n----------------------------------------\n\nTITLE: New SciPy Stats Distribution Classes\nDESCRIPTION: New probability distribution classes including Normal, Uniform and Mixture distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.Normal\nscipy.stats.Uniform\nscipy.stats.Mixture\nscipy.stats.make_distribution\n```\n\n----------------------------------------\n\nTITLE: Implementing LinearOperator for Diagonal Matrix\nDESCRIPTION: Example showing how to create a custom LinearOperator class that implements a diagonal matrix operator for use with ARPACK eigenvalue solvers.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/arpack.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.sparse.linalg import LinearOperator\nclass Diagonal(LinearOperator):\n    def __init__(self, diag, dtype='float32'):\n        self.diag = diag\n        self.shape = (len(self.diag), len(self.diag))\n        self.dtype = np.dtype(dtype)\n    def _matvec(self, x):\n        return self.diag*x\n    def _rmatvec(self, x):\n        return self.diag*x\n\nN = 100\nrng = np.random.default_rng()\nd = rng.normal(0, 1, N).astype(np.float64)\n```\n\n----------------------------------------\n\nTITLE: Custom Weighted Second Derivative with Extra Arguments\nDESCRIPTION: Demonstration of using extra_arguments parameter with generic_laplace to pass custom weights for the second derivative calculation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef d2(input, axis, output, mode, cval, weights):\n    return correlate1d(input, weights, axis, output, mode, cval, 0,)\n\na = np.zeros((5, 5))\na[2, 2] = 1\ngeneric_laplace(a, d2, extra_arguments = ([1, -2, 1],))\n```\n\n----------------------------------------\n\nTITLE: Performing Schur Decomposition in Python using SciPy\nDESCRIPTION: This example demonstrates how to compute the Schur decomposition of a matrix using SciPy's linalg.schur function. It shows both real and complex Schur forms and verifies the decomposition.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n>>> from scipy import linalg\n>>> A = np.asmatrix('[1 3 2; 1 4 5; 2 3 6]')\n>>> T, Z = linalg.schur(A)\n>>> T1, Z1 = linalg.schur(A, 'complex')\n>>> T2, Z2 = linalg.rsf2csf(T, Z)\n>>> T\narray([[ 9.90012467,  1.78947961, -0.65498528],\n       [ 0.        ,  0.54993766, -1.57754789],\n       [ 0.        ,  0.51260928,  0.54993766]])\n>>> T2\narray([[ 9.90012467+0.00000000e+00j, -0.32436598+1.55463542e+00j,\n        -0.88619748+5.69027615e-01j],\n       [ 0.        +0.00000000e+00j,  0.54993766+8.99258408e-01j,\n         1.06493862+3.05311332e-16j],\n       [ 0.        +0.00000000e+00j,  0.        +0.00000000e+00j,\n         0.54993766-8.99258408e-01j]])\n>>> abs(T1 - T2) # different\narray([[  1.06604538e-14,   2.06969555e+00,   1.69375747e+00],  # may vary\n       [  0.00000000e+00,   1.33688556e-15,   4.74146496e-01],\n       [  0.00000000e+00,   0.00000000e+00,   1.13220977e-15]])\n>>> abs(Z1 - Z2) # different\narray([[ 0.06833781,  0.88091091,  0.79568503],    # may vary\n       [ 0.11857169,  0.44491892,  0.99594171],\n       [ 0.12624999,  0.60264117,  0.77257633]])\n>>> T, Z, T1, Z1, T2, Z2 = map(np.asmatrix,(T,Z,T1,Z1,T2,Z2))\n>>> abs(A - Z*T*Z.H)  # same\nmatrix([[  5.55111512e-16,   1.77635684e-15,   2.22044605e-15],\n        [  0.00000000e+00,   3.99680289e-15,   8.88178420e-16],\n        [  1.11022302e-15,   4.44089210e-16,   3.55271368e-15]])\n>>> abs(A - Z1*T1*Z1.H)  # same\nmatrix([[  4.26993904e-15,   6.21793362e-15,   8.00007092e-15],\n        [  5.77945386e-15,   6.21798014e-15,   1.06653681e-14],\n        [  7.16681444e-15,   8.90271058e-15,   1.77635764e-14]])\n>>> abs(A - Z2*T2*Z2.H)  # same\nmatrix([[  6.02594127e-16,   1.77648931e-15,   2.22506907e-15],\n        [  2.46275555e-16,   3.99684548e-15,   8.91642616e-16],\n        [  8.88225111e-16,   8.88312432e-16,   4.44104848e-15]])\n```\n\n----------------------------------------\n\nTITLE: Finding Maximally Separated Words\nDESCRIPTION: Computes the pairs of words that require the maximum number of steps to connect in the word ladder.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/csgraph.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndistances, predecessors = dijkstra(graph, return_predecessors=True)\nmax_distance = np.max(distances[~np.isinf(distances)])\ni1, i2 = np.nonzero(distances == max_distance)\nlist(zip(word_list[i1], word_list[i2]))\n```\n\n----------------------------------------\n\nTITLE: Cubic Spline Interpolation in Python using SciPy\nDESCRIPTION: This snippet demonstrates how to perform cubic spline interpolation using SciPy's splrep and splev functions, and then plot the results alongside the original data and true function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import interpolate\n\n# Cubic spline\nx = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/8)\ny = np.sin(x)\ntck = interpolate.splrep(x, y, s=0)\nxnew = np.arange(0, 2*np.pi, np.pi/50)\nynew = interpolate.splev(xnew, tck, der=0)\n\nplt.figure()\nplt.plot(x, y, 'x', xnew, ynew, xnew, np.sin(xnew), x, y, 'b')\nplt.legend(['Linear', 'Cubic Spline', 'True'])\nplt.axis([-0.05, 6.33, -1.05, 1.05])\nplt.title('Cubic-spline interpolation')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Visualizing P-value\nDESCRIPTION: This snippet visualizes the p-value of the normality test on the chi-squared distribution plot.  It shades the area under the curve that corresponds to values more extreme than the observed test statistic.  The p-value is calculated using the survival function (`dist.sf`).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\npvalue = dist.sf(res.statistic)\nannotation = (f'p-value={pvalue:.6f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (13.5, 5e-4), (14, 5e-3), arrowprops=props)\ni = stat_vals >= res.statistic  # index more extreme statistic values\nax.fill_between(stat_vals[i], y1=0, y2=pdf[i])\nax.set_xlim(8, 16)\nax.set_ylim(0, 0.01)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Saving Python Object Array as MATLAB Cell Array\nDESCRIPTION: Shows how to create a NumPy object array and save it as a MATLAB cell array file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> obj_arr = np.zeros((2,), dtype=object)\n>>> obj_arr[0] = 1\n>>> obj_arr[1] = 'a string'\n>>> obj_arr\n>>> sio.savemat('np_cells.mat', {'obj_arr': obj_arr})\n```\n\n----------------------------------------\n\nTITLE: Numerically Integrate PDF in Right Tail\nDESCRIPTION: The snippet numerically integrates the PDF from a point to the upper end of its support using `integrate.quad`. Useful in verifying different integration approaches for accuracy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_64\n\nLANGUAGE: ipython3\nCODE:\n```\nintegrate.quad(frozen.pdf, x, 1)[0]\n```\n\n----------------------------------------\n\nTITLE: Minimizing Function with Hessian-vector Product Method - Python\nDESCRIPTION: This snippet shows how to utilize the `minimize` function with the `trust-constr` method while providing a Hessian-vector product function (`hessp`). The optimization results in the minimization of the `rosen` function under the given constraints.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> res = minimize(rosen, x0, method='trust-constr', jac=rosen_der, hessp=rosen_hess_p,\n...                constraints=[linear_constraint, nonlinear_constraint],\n...                options={'verbose': 1}, bounds=bounds)\n# may vary\n`gtol` termination condition is satisfied.\nNumber of iterations: 12, function evaluations: 8, CG iterations: 7, optimality: 2.99e-09, constraint violation: 1.11e-16, execution time: 0.018 s.\n>>> print(res.x)\n[0.41494531 0.17010937]\n```\n\n----------------------------------------\n\nTITLE: Executing Root Scalar with TOMS748 - SciPy - Python\nDESCRIPTION: This code snippet demonstrates how to call the root_scalar function using the toms748 method to find the roots of a scalar function. This function is a part of the SciPy library and requires the proper import of the optimize module. The expected input is a function and any other relevant parameters, while the output is the root found or an exception if the method fails.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-toms748.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nroot_scalar(method='toms748')\n```\n\n----------------------------------------\n\nTITLE: Initializing NumPy Arrays for Correlation Analysis\nDESCRIPTION: This snippet initializes two NumPy arrays, `x` and `y`, representing paired measurements of total collagen and free proline in liver samples. These arrays are used to demonstrate the calculation of Spearman's correlation coefficient.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n# total collagen (mg/g dry weight of liver)\nx = np.array([7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4])\n# free proline (μ mole/g dry weight of liver)\ny = np.array([2.8, 2.9, 2.8, 2.6, 3.5, 4.6, 5.0])\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays with Numpy in Python\nDESCRIPTION: This snippet imports Numpy and initializes two arrays representing measurements of total collagen and free proline obtained from human livers. These arrays will be used for statistical analysis. No additional dependencies are required.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n# total collagen (mg/g dry weight of liver)\nx = np.array([7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4])\n# free proline (μ mole/g dry weight of liver)\ny = np.array([2.8, 2.9, 2.8, 2.6, 3.5, 4.6, 5.0])\n```\n\n----------------------------------------\n\nTITLE: Defining a custom plotting function for MGC visualization\nDESCRIPTION: This function, mgc_plot, is used to visualize both the simulation scatter plot of two datasets and the local correlation heatmap derived from the multiscale graph correlation analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/multiscale_graphcorr.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> def mgc_plot(x, y, sim_name, mgc_dict=None, only_viz=False,\n...              only_mgc=False):\n...     \"\"\"Plot sim and MGC-plot\"\"\"\n...     if not only_mgc:\n...         # simulation\n...         plt.figure(figsize=(8, 8))\n...         ax = plt.gca()\n...         ax.set_title(sim_name + \" Simulation\", fontsize=20)\n...         ax.scatter(x, y)\n...         ax.set_xlabel('X', fontsize=15)\n...         ax.set_ylabel('Y', fontsize=15)\n...         ax.axis('equal')\n...         ax.tick_params(axis=\"x\", labelsize=15)\n...         ax.tick_params(axis=\"y\", labelsize=15)\n...         plt.show()\n...     if not only_viz:\n...         # local correlation map\n...         plt.figure(figsize=(8,8))\n...         ax = plt.gca()\n...         mgc_map = mgc_dict[\"mgc_map\"]\n...         # draw heatmap\n...         ax.set_title(\"Local Correlation Map\", fontsize=20)\n...         im = ax.imshow(mgc_map, cmap='YlGnBu')\n...         # colorbar\n...         cbar = ax.figure.colorbar(im, ax=ax)\n...         cbar.ax.set_ylabel(\"\", rotation=-90, va=\"bottom\")\n...         ax.invert_yaxis()\n...         # Turn spines off and create white grid.\n...         for edge, spine in ax.spines.items():\n...             spine.set_visible(False)\n...         # optimal scale\n...         opt_scale = mgc_dict[\"opt_scale\"]\n...         ax.scatter(opt_scale[0], opt_scale[1],\n...                    marker='X', s=200, color='red')\n...         # other formatting\n...         ax.tick_params(bottom=\"off\", left=\"off\")\n...         ax.set_xlabel('#Neighbors for X', fontsize=15)\n...         ax.set_ylabel('#Neighbors for Y', fontsize=15)\n...         ax.tick_params(axis=\"x\", labelsize=15)\n...         ax.tick_params(axis=\"y\", labelsize=15)\n...         ax.set_xlim(0, 100)\n...         ax.set_ylim(0, 100)\n...         plt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Basic Statistics on NumPy Array in Python\nDESCRIPTION: Demonstrates how to calculate basic statistics (min, max, mean, variance) on a NumPy array using array methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(x.min())   # equivalent to np.min(x)\nprint(x.max())   # equivalent to np.max(x)\nprint(x.mean())  # equivalent to np.mean(x)\nprint(x.var())   # equivalent to np.var(x))\n```\n\n----------------------------------------\n\nTITLE: Adjusting Squeeze Hat Ratio with TDR in SciPy\nDESCRIPTION: This snippet demonstrates how to adjust the squeeze hat ratio parameter when initializing the TransformedDensityRejection instance, which affects the accuracy and efficiency of sampling.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_tdr.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndist = StandardNormal()\nrng = TransformedDensityRejection(dist, max_squeeze_hat_ratio=0.999, random_state=urng)\nprint(rng.squeeze_hat_ratio)\n```\n\n----------------------------------------\n\nTITLE: 2D Function Definition and Grid Setup\nDESCRIPTION: Defines a 2D test function and creates a grid for interpolation demonstration. Sets up random sample points for scattered data interpolation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_unstructured.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\ndef func(x, y):\n    return x*(1-x)*np.cos(4*np.pi*x) * np.sin(4*np.pi*y**2)**2\n\ngrid_x, grid_y = np.meshgrid(np.linspace(0, 1, 100),\n                           np.linspace(0, 1, 200), indexing='ij')\n\nrng = np.random.default_rng()\npoints = rng.random((1000, 2))\nvalues = func(points[:,0], points[:,1])\n```\n\n----------------------------------------\n\nTITLE: Calculating and Annotating P-Value with Matplotlib in Python\nDESCRIPTION: This code calculates the p-value using Matplotlib for visualization, highlighting how extreme values are compared with the observed statistic for hypothesis testing. It supplements the statistical analysis by annotating the plot. Pre-requisites are Numpy, SciPy, and Matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\npvalue = dist.cdf(-res.statistic) + dist.sf(res.statistic)\nannotation = (f'p-value={pvalue:.4f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (0.65, 0.15), (0.8, 0.3), arrowprops=props)\ni = z_vals >= res.statistic\nax.fill_between(z_vals[i], y1=0, y2=pdf[i], color='C0')\ni = z_vals <= -res.statistic\nax.fill_between(z_vals[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(-1.25, 1.25)\nax.set_ylim(0, 0.5)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a MATLAB Struct in Octave\nDESCRIPTION: Demonstrates how to create a struct in Octave and save it as a MATLAB file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_6\n\nLANGUAGE: octave\nCODE:\n```\noctave:11> my_struct = struct('field1', 1, 'field2', 2)\noctave:12> save -6 octave_struct.mat my_struct\n```\n\n----------------------------------------\n\nTITLE: Generating Noisy Data and Constructing Splines in Python\nDESCRIPTION: This snippet demonstrates how to generate noisy data based on a sine function and construct two splines with different smoothing parameters using SciPy's splrep function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.interpolate import splrep, BSpline\n\n# Generate some noisy data\nx = np.arange(0, 2*np.pi+np.pi/4, 2*np.pi/16)\nrng = np.random.default_rng()\ny =  np.sin(x) + 0.4*rng.standard_normal(size=len(x))\n\n# Construct two splines with different values of ``s``\ntck = splrep(x, y, s=0)\ntck_s = splrep(x, y, s=len(x))\n```\n\n----------------------------------------\n\nTITLE: Using minimize_scalar for Bounded Optimization in Python\nDESCRIPTION: Example showing how to use SciPy's minimize_scalar function with the 'bounded' method to find the minimum of the Bessel function j1 within specified bounds.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nres = minimize_scalar(j1, bounds=(4, 7), method='bounded')\nres.x\n5.33144184241\n```\n\n----------------------------------------\n\nTITLE: Initializing and Checking Type of Normal Distribution in Python\nDESCRIPTION: Demonstrates the initial setup and verification of a normal distribution type using SciPy's stats module. No additional external dependencies are required other than SciPy. Inputs and outputs involve instantiation and type checking of a distribution object.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\ndist = stats.norm\ntype(dist)\n```\n\n----------------------------------------\n\nTITLE: Controlling Random State in Old API Random Sampling\nDESCRIPTION: Demonstrates two methods for controlling the random state when generating random samples in the old API: global seed setting and the random_state parameter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nnp.random.seed(1)\ndist = stats.norm\ndist.rvs(), dist.rvs(random_state=1)\n```\n\n----------------------------------------\n\nTITLE: Comparing RegularGridInterpolator with interpn Function in Python\nDESCRIPTION: This snippet shows how to use the interpn function as an alternative to RegularGridInterpolator for interpolation. It demonstrates that both methods produce identical results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_regular_grid.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import interpn\nrgi = RegularGridInterpolator(fit_points, values)\nresult_rgi = rgi(test_points)\n\nresult_interpn = interpn(fit_points, values, test_points)\nnp.allclose(result_rgi, result_interpn, atol=1e-15)\n```\n\n----------------------------------------\n\nTITLE: Defining Mandala Generation Function in Python\nDESCRIPTION: This function creates a mandala figure using Voronoi tessellations. It takes parameters for iterations, points, and radius, and returns a matplotlib Figure instance. The function uses numpy for numerical operations and scipy.spatial for Voronoi plotting.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef mandala(n_iter, n_points, radius):\n    \"\"\"Creates a mandala figure using Voronoi tessellations.\n\n    Parameters\n    ----------\n    n_iter : int\n        Number of iterations, i.e. how many times the equidistant points will\n        be generated.\n    n_points : int\n        Number of points to draw per iteration.\n    radius : scalar\n        The radial expansion factor.\n\n    Returns\n    -------\n    fig : matplotlib.Figure instance\n\n    Notes\n    -----\n    This code is adapted from the work of Audrey Roy Greenfeld [1]_ and Carlos\n    Focil-Espinosa [2]_, who created beautiful mandalas with Python code.  That\n    code in turn was based on Antonio Sánchez Chinchón's R code [3]_.\n\n    References\n    ----------\n    .. [1] https://www.codemakesmehappy.com/2019/09/voronoi-mandalas.html\n\n    .. [2] https://github.com/CarlosFocil/mandalapy\n\n    .. [3] https://github.com/aschinchon/mandalas\n\n    \"\"\"\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111)\n    ax.set_axis_off()\n    ax.set_aspect('equal', adjustable='box')\n\n    angles = np.linspace(0, 2*np.pi * (1 - 1/n_points), num=n_points) + np.pi/2\n    # Starting from a single center point, add points iteratively\n    xy = np.array([[0, 0]])\n    for k in range(n_iter):\n        t1 = np.array([])\n        t2 = np.array([])\n        # Add `n_points` new points around each existing point in this iteration\n        for i in range(xy.shape[0]):\n            t1 = np.append(t1, xy[i, 0] + radius**k * np.cos(angles))\n            t2 = np.append(t2, xy[i, 1] + radius**k * np.sin(angles))\n\n        xy = np.column_stack((t1, t2))\n\n    # Create the Mandala figure via a Voronoi plot\n    spatial.voronoi_plot_2d(spatial.Voronoi(xy), ax=ax)\n\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Implementing N-Dimensional Numerical Integration with SciPy\nDESCRIPTION: The `scipy.integrate.nquad` function provides a flexible interface for performing N-dimensional integration. This replaces the more rigid `dblquad` and `tplquad`. Dependencies include SciPy and NumPy. Expected inputs are functions to integrate and their limits, while outputs are the computed integrals.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.13.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n# Example of using scipy.integrate.nquad\nfrom scipy.integrate import nquad\n\n# Define the function to integrate\ndef integrand(x, y):\n    return x * y\n\n# Set the limits for integration\nlimits = [[0, 1], [0, 1]]\n\n# Perform N-dimensional integration\nresult, error = nquad(integrand, limits)\nprint(result)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing nan_policy='omit' for Related Inputs in Python\nDESCRIPTION: Shows how to implement the 'omit' option of nan_policy for functions with related or paired array inputs, where all values should be omitted if any related value is NaN.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/nan_policy.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhasnan = np.isnan(a) | np.isnan(b)  # Union of the isnan masks.\ny = func(a[~hasnan], b[~hasnan])\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Pull from Upstream\nDESCRIPTION: Sets up the local repository to pull from the upstream SciPy repository by default, helping to keep the fork in sync with the main project.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/development_setup.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit config branch.main.remote upstream\ngit config branch.main.merge refs/heads/main\n```\n\n----------------------------------------\n\nTITLE: Computing Different Types of Moments with New API\nDESCRIPTION: Demonstrates calculation of different moment types (raw, central, standardized) using the new moment method with explicitly specified order and kind parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n(X.moment(order=1, kind='raw'), \n X.moment(order=2, kind='central'), \n X.moment(order=3, kind='standardized'), \n X.moment(order=4, kind='standardized'))\n```\n\n----------------------------------------\n\nTITLE: Standard Normal Distribution with PDF Derivative\nDESCRIPTION: This code defines a `StandardNormal` class which includes the derivative of the PDF (`dpdf`). This allows the user to specify `order=5` for quintic Hermite interpolation in `NumericalInverseHermite`. The `dpdf` method calculates and returns the derivative of the standard normal distribution's PDF.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> class StandardNormal:\n...     def pdf(self, x):\n...        return 1/np.sqrt(2*np.pi) * np.exp(-x**2 / 2)\n...     def dpdf(self, x):\n...        return -1/np.sqrt(2*np.pi) * x * np.exp(-x**2 / 2)\n...     def cdf(self, x):\n...        return ndtr(x)\n... \n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> rng = NumericalInverseHermite(dist, order=5, random_state=urng)\n```\n\n----------------------------------------\n\nTITLE: Using threadpoolctl to Identify BLAS Library\nDESCRIPTION: Demonstrates how to use the threadpoolctl utility to identify the actual BLAS library being used by SciPy at runtime, which is particularly useful for distro installs where stub libraries may be used.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m threadpoolctl -i scipy.linalg\n[\n  {\n    \"user_api\": \"blas\",\n    \"internal_api\": \"openblas\",\n    \"prefix\": \"libopenblas\",\n    \"filepath\": \"/home/user/miniforge/envs/dev/lib/libopenblasp-r0.3.21.so\",\n    \"version\": \"0.3.21\",\n    \"threading_layer\": \"pthreads\",\n    \"architecture\": \"SkylakeX\",\n    \"num_threads\": 24\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Subclassing Discrete Random Variable Distribution\nDESCRIPTION: Creates a custom discrete random variable using SciPy's rv_discrete with predefined grid points and probabilities\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> normdiscrete = stats.rv_discrete(values=(gridint,\n...              np.round(probs, decimals=7)), name='normdiscrete')\n```\n\n----------------------------------------\n\nTITLE: Initializing NumPy Arrays for Expected Frequencies in Python\nDESCRIPTION: This snippet uses the NumPy library to initialize an array representing the expected frequencies of bird foraging based on tree canopy volumes. It multiplies the canopy percentages by the total number of observations to get expected counts.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_chisquare.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nf_exp = np.array([44, 24, 29, 3]) / 100 * 189\n```\n\n----------------------------------------\n\nTITLE: Verifying Sparse Array After Removing Duplicates in Python\nDESCRIPTION: This snippet demonstrates the result of converting the sparse array to dense format after removing duplicates, showing that it is identical to the original array without duplicates.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n>>> dupes.todense()\narray([[1, 0, 0, 2],\n       [0, 4, 1, 0],\n       [0, 0, 5, 0]])\n```\n\n----------------------------------------\n\nTITLE: Visualizing Group Means with Matplotlib in Python\nDESCRIPTION: This code snippet uses Matplotlib to create a box and whisker plot that visually compares the blood count data of the control and two drug groups. The plot helps in identifying the distribution and variance among the groups, highlighting differences that are further examined via Dunnett's test.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_dunnett.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(1, 1)\nax.boxplot([control, drug_a, drug_b])\nax.set_xticklabels([\"Control\", \"Drug A\", \"Drug B\"])\nax.set_ylabel(\"mean\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Confidence Interval for Odds Ratio in Python\nDESCRIPTION: This snippet computes the 95% confidence interval for the previously calculated odds ratio using the 'confidence_interval' method on the result object. It provides statistical insight into the effect of aspirin on stroke risk.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_odds_ratio.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nres.confidence_interval(confidence_level=0.95)\n```\n\n----------------------------------------\n\nTITLE: Extracting p-value from Shapiro-Wilk Test Result\nDESCRIPTION: This snippet retrieves and outputs the p-value from the result of the Shapiro-Wilk test, which indicates the probability of observing the test statistic.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_shapiro.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Implementing Nearest Interpolation Using NumPy's searchsorted\nDESCRIPTION: This snippet demonstrates how to implement nearest neighbor interpolation manually using NumPy's searchsorted function. It shows the underlying mechanism used by interp1d's 'nearest' mode by calculating midpoints between data points and finding the nearest indices.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> x = np.arange(8)\n>>> y = x**2\n>>> x_new = np.linspace(0, 7, 101)    # input points\n>>> x_bds = x[:-1] / 2.0 + x[1:] / 2.0   # halfway points\n>>> idx = np.searchsorted(x_bds, x_new, side='left')\n>>> idx = np.clip(idx, 0, len(x) - 1)  # clip the indices so that they are within the range of x indices.\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(x, y, 'o')\n>>> plt.plot(x_new, y[idx], '--')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation with NumPy\nDESCRIPTION: Shows how to create reproducible random number generators using NumPy's random number generation facilities\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom numpy.random import default_rng\nrng = default_rng()\nrng = default_rng(301439351238479871608357552876690613766)\nnorm.rvs(size=5, random_state=rng)\n```\n\n----------------------------------------\n\nTITLE: Initializing TransformedDensityRejection Generator with Standard Normal Distribution in Python\nDESCRIPTION: This code demonstrates how to set up a TransformedDensityRejection random number generator for a standard normal distribution. It defines a custom distribution class implementing the required PDF and DPDF methods, then initializes the generator with this distribution and a NumPy random number generator.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats.sampling import TransformedDensityRejection\nfrom math import exp\nimport numpy as np\n\nclass StandardNormal:\n    def pdf(self, x: float) -> float:\n        # note that the normalization constant isn't required\n        return exp(-0.5 * x*x)\n    def dpdf(self, x: float) -> float:\n        return -x * exp(-0.5 * x*x)\n\ndist = StandardNormal()\nurng = np.random.default_rng()\nrng = TransformedDensityRejection(dist, random_state=urng)\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular Grid Interpolation with scipy.interpolate\nDESCRIPTION: The `scipy.interpolate.interpn` function has been introduced for interpolation on regular grids. It allows for linear and nearest-neighbor interpolation in arbitrary dimensions, enhancing the interpolation capabilities of the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A new wrapper function `scipy.interpolate.interpn` for interpolation on regular\\ngrids has been added. `interpn` supports linear and nearest-neighbor\\ninterpolation in arbitrary dimensions and spline interpolation in two\\ndimensions.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Real FFT Operations Example\nDESCRIPTION: Shows the usage of rfft and irfft functions for real-valued input signals, demonstrating how to handle both even and odd-length inputs correctly.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import fft, rfft, irfft\nx = np.array([1.0, 2.0, 1.0, -1.0, 1.5, 1.0])\nfft(x)\nyr = rfft(x)\nyr\nirfft(yr)\nx = np.array([1.0, 2.0, 1.0, -1.0, 1.5])\nfft(x)\nyr = rfft(x)\nyr\nirfft(yr, n=len(x))\n```\n\n----------------------------------------\n\nTITLE: Listing Available Distributions\nDESCRIPTION: Demonstrates how to retrieve lists of continuous and discrete distributions using introspection\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndist_continu = [d for d in dir(stats) if isinstance(getattr(stats, d), stats.rv_continuous)]\ndist_discrete = [d for d in dir(stats) if isinstance(getattr(stats, d), stats.rv_discrete)]\nprint('number of continuous distributions: %d' % len(dist_continu))\nprint('number of discrete distributions:   %d' % len(dist_discrete))\n```\n\n----------------------------------------\n\nTITLE: Computing P-Value from Skew Test Statistic in Python\nDESCRIPTION: This snippet computes the p-value associated with the skew test statistic by shading areas on either tail of the null distribution graph beyond the computed statistic. It provides a visual representation of the significance level. Requires Matplotlib for plotting.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_skewtest.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nst_plot(ax)\npvalue = dist.cdf(-res.statistic) + dist.sf(res.statistic)\nannotation = (f'p-value={pvalue:.3f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (3, 0.005), (3.25, 0.02), arrowprops=props)\ni = st_val >= res.statistic\nax.fill_between(st_val[i], y1=0, y2=pdf[i], color='C0')\ni = st_val <= -res.statistic\nax.fill_between(st_val[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(-5, 5)\nax.set_ylim(0, 0.1)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Including RST Documentation Sections\nDESCRIPTION: A series of reStructuredText include directives that combine multiple documentation files into a comprehensive developer guide. The file uses standard RST syntax for section headers and includes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/core-dev/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _core-dev-guide:\n\n==========================\nSciPy Core Developer Guide\n==========================\n\n.. include:: decisions.rst.inc\n\n.. include:: newfeatures.rst.inc\n\n.. include:: github.rst.inc\n\n.. include:: licensing.rst.inc\n\n.. include:: versioning.rst.inc\n\n.. include:: deprecations.rst.inc\n\n.. include:: vendored-code.rst.inc\n\n.. include:: distributing.rst.inc\n\n.. include:: interactive_examples.rst.inc\n\n.. include:: releasing.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Visualizing Samples with Matplotlib in Python\nDESCRIPTION: Visualizes the true distribution compared to the histogram of generated samples using matplotlib. This snippet helps verify the distribution of samples generated by the Simple Ratio-of-Uniforms method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats.sampling import SimpleRatioUniforms\n>>> from scipy.stats import norm\n>>> import matplotlib.pyplot as plt\n>>> class StdNorm:\n...     def pdf(self, x):\n...         return np.exp(-0.5 * x**2)\n... \n>>> urng = np.random.default_rng()\n>>> dist = StdNorm()\n>>> rng = SimpleRatioUniforms(dist, mode=0,\n...                           pdf_area=np.sqrt(2*np.pi),\n...                           cdf_at_mode=norm.cdf(0),\n...                           random_state=urng)\n>>> rvs = rng.rvs(1000)\n>>> x = np.linspace(rvs.min()-0.1, rvs.max()+0.1, 1000)\n>>> fx = 1/np.sqrt(2*np.pi) * dist.pdf(x)\n>>> fig, ax = plt.subplots()\n>>> ax.plot(x, fx, 'r-', lw=2, label='true distribution')\n>>> ax.hist(rvs, bins=10, density=True, alpha=0.8, label='random variates')\n>>> ax.set_xlabel('x')\n>>> ax.set_ylabel('PDF(x)')\n>>> ax.set_title('Simple Ratio-of-Uniforms Samples')\n>>> ax.legend()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Generating linear datasets and visualizing MGC\nDESCRIPTION: This snippet generates linear data using NumPy and visualizes the relationship using the defined mgc_plot function. It also calculates the MGC test statistics and p-values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/multiscale_graphcorr.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> rng = np.random.default_rng()\n>>> x = np.linspace(-1, 1, num=100)\n>>> y = x + 0.3 * rng.random(x.size)\n\n>>> mgc_plot(x, y, \"Linear\", only_viz=True)\n\n>>> stat, pvalue, mgc_dict = multiscale_graphcorr(x, y)\n>>> print(\"MGC test statistic: \", round(stat, 1))\nMGC test statistic:  1.0\n>>> print(\"P-value: \", round(pvalue, 1))\nP-value:  0.0\n>>> mgc_plot(x, y, \"Linear\", mgc_dict, only_mgc=True)\n```\n\n----------------------------------------\n\nTITLE: Serial Minimization with Time Delay\nDESCRIPTION: This snippet demonstrates serial minimization using the `minimize` function with a slow objective function that introduces a time delay. It uses `%timeit` to measure the execution time of the serial approach.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n>>> import time\n>>> def slow_func(x):\n...     time.sleep(0.0002)\n...     return rosen(x)\n\nExamine the serial minimization first::\n\n    In [1]: rng = np.random.default_rng()\n\n    In [2]: x0 = rng.uniform(low=0.0, high=10.0, size=(20,))\n\n    In [3]: %timeit minimize(slow_func, x0, method='L-BFGS-B')  # serial approach\n    365 ms ± 6.17 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)  # may vary\n```\n\n----------------------------------------\n\nTITLE: Interpolating 2D Array using map_coordinates in Python\nDESCRIPTION: Shows how to use scipy.ndimage.map_coordinates to perform interpolation on a 2D numpy array at specific coordinates. This example interpolates values at (0.5, 0.5) and (1, 2).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = np.arange(12).reshape(4,3).astype(np.float64)\n>>> a\narray([[  0.,   1.,   2.],\n       [  3.,   4.,   5.],\n       [  6.,   7.,   8.],\n       [  9.,  10.,  11.]])\n>>> from scipy.ndimage import map_coordinates\n>>> map_coordinates(a, [[0.5, 2], [0.5, 1]])\narray([ 1.3625,  7.])\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Minimize Moment Difference\nDESCRIPTION: This snippet defines a function `f` that calculates the difference between the desired moments (mean and standard deviation) and the moments of a Weibull distribution. It returns the Euclidean norm of this difference, intended for minimization to find the Weibull parameters that match the target moments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_50\n\nLANGUAGE: python\nCODE:\n```\n\"moments_0 = np.asarray([8, 20])  # desired mean and standard deviation\ndef f(x):\n    c, scale = x\n    X = Weibull(c=c) * scale\n    moments_X = X.mean(), X.standard_deviation()\n    return np.linalg.norm(moments_X - moments_0)\n\nbounds.lb = np.asarray([0.1, 0.1])  # the Weibull distribution is problematic for very small c\nres = optimize.minimize(f, x0, bounds=bounds, method='slsqp')  # easily change the minimization method\nres\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Correlation with generic_filter1d in Python\nDESCRIPTION: Demonstrates how to implement a 1D correlation filter using the generic_filter1d function in SciPy's ndimage module. The example shows the correlation operation and its equivalent implementation with a custom filter function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.arange(12).reshape(3,4)\n>>> correlate1d(a, [1, 2, 3])\narray([[ 3,  8, 14, 17],\n       [27, 32, 38, 41],\n       [51, 56, 62, 65]])\n```\n\n----------------------------------------\n\nTITLE: Binary Dilation with SciPy in Python\nDESCRIPTION: This snippet demonstrates how to use the binary_dilation function from the scipy.ndimage module to find elements touching the border. It initializes a structuring element, creates a sample array, and performs dilation from the border using the sample array as a mask. The function can repeat dilation based on the iterations parameter or until the result stabilizes if iterations is -1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> struct = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\n>>> a = np.array([[1,0,0,0,0], [1,1,0,1,0], [0,0,1,1,0], [0,0,0,0,0]])\n>>> a\narray([[1, 0, 0, 0, 0],\n      [1, 1, 0, 1, 0],\n      [0, 0, 1, 1, 0],\n      [0, 0, 0, 0, 0]])\n>>> from scipy.ndimage import binary_dilation\n>>> binary_dilation(np.zeros(a.shape), struct, -1, a, border_value=1)\narray([[ True, False, False, False, False],\n      [ True,  True, False, False, False],\n      [False, False, False, False, False],\n      [False, False, False, False, False]], dtype=bool)\n```\n\n----------------------------------------\n\nTITLE: Checking If Distribution is Instance of rv_continuous in Python\nDESCRIPTION: Verifies if a distribution object is an instance of the class 'rv_continuous'. Part of SciPy's stats module, requiring no external dependencies. This checks compatibility and class inheritance in the context of distribution functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nisinstance(dist, stats.rv_continuous)\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Plotting a Random Variable Using Weibull Distribution\nDESCRIPTION: Illustrates instantiation of a Weibull random variable using the new class, followed by plotting its distribution using matplotlib. Parameter 'c' is specified as a keyword argument compatible with the new format and useful for visual analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nc = 2.\nX = Weibull(c=c)\nX.plot()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Voronoi Diagram using Voronoi in Python with scipy.spatial\nDESCRIPTION: This snippet shows how to create a Voronoi diagram using the Voronoi class from scipy.spatial. It demonstrates how to handle infinite ridges and visualize the complete Voronoi diagram.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.spatial import Voronoi\nimport numpy as np\nimport matplotlib.pyplot as plt\n\npoints = np.array([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2],\n                   [2, 0], [2, 1], [2, 2]])\nvor = Voronoi(points)\n\nplt.plot(points[:, 0], points[:, 1], 'o')\nplt.plot(vor.vertices[:, 0], vor.vertices[:, 1], '*')\nplt.xlim(-1, 3); plt.ylim(-1, 3)\n\nfor simplex in vor.ridge_vertices:\n    simplex = np.asarray(simplex)\n    if np.all(simplex >= 0):\n        plt.plot(vor.vertices[simplex, 0], vor.vertices[simplex, 1], 'k-')\n\ncenter = points.mean(axis=0)\nfor pointidx, simplex in zip(vor.ridge_points, vor.ridge_vertices):\n    simplex = np.asarray(simplex)\n    if np.any(simplex < 0):\n        i = simplex[simplex >= 0][0] # finite end Voronoi vertex\n        t = points[pointidx[1]] - points[pointidx[0]]  # tangent\n        t = t / np.linalg.norm(t)\n        n = np.array([-t[1], t[0]]) # normal\n        midpoint = points[pointidx].mean(axis=0)\n        far_point = vor.vertices[i] + np.sign(np.dot(midpoint - center, n)) * n * 100\n        plt.plot([vor.vertices[i,0], far_point[0]],\n                 [vor.vertices[i,1], far_point[1]], 'k--')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Plotting PDFs for Different Estimation Methods\nDESCRIPTION: This snippet generates a plot comparing the PDFs obtained from maximum likelihood estimation (MLE), maximum spacing estimation (MSE), and L-moments.  Histograms of the data are overlayed to provide visual context for the fitted distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_49\n\nLANGUAGE: python\nCODE:\n```\n\"import matplotlib.pyplot as plt\nx = np.linspace(eps, 10, 300)\n\nfor res, label in [(res_mle, \\\"MLE\\\"), (res_mps, \\\"MPS\\\"), (res_lmom, \\\"L-moments\\\")]:\n    c_, scale_ = res.x\n    X = Weibull(c=c_)*scale_\n    plt.plot(x, X.pdf(x), '-', label=label)\n\nplt.hist(data, bins=np.linspace(0, 10, 30), density=True, alpha=0.1)\nplt.xlabel('x')\nplt.ylabel('pdf(x)')\nplt.legend()\nplt.ylim(0, 0.3)\nplt.show()\"\n```\n\n----------------------------------------\n\nTITLE: Defining Bounds Constraints in SciPy\nDESCRIPTION: Creates a Bounds object to define the bound constraints 0 ≤ x_0 ≤ 1 and -0.5 ≤ x_1 ≤ 2.0 for optimization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.optimize import Bounds\nbounds = Bounds([0, -0.5], [1.0, 2.0])\n```\n\n----------------------------------------\n\nTITLE: Executing Levene Test Using SciPy\nDESCRIPTION: This snippet demonstrates the execution of the Levene test using SciPy to calculate the variance equality statistic among different sample groups.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.levene(small_dose, medium_dose, large_dose)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Public Cython Function\nDESCRIPTION: Example showing the basic structure of declaring and implementing a public Cython function in declaration (.pxd) and implementation (.pyx) files.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/public_cython_api.rst#2025-04-14_snippet_0\n\nLANGUAGE: cython\nCODE:\n```\n# scipy/something/foo.pxd\ncdef public int somefunc()\n\n# scipy/something/foo.pyx\ncdef public int somefunc():\n    return 42\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Performance Improvements with Arrays\nDESCRIPTION: The snippets highlight performance differences in CDF calculations when vectors are involved. It uses vectorized functions like `scipy.integrate.tanhsinh` demonstrating significant improvements over legacy methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_69\n\nLANGUAGE: ipython3\nCODE:\n```\nx = np.linspace(0, 1, 1000)\n```\n\nLANGUAGE: ipython3\nCODE:\n```\n%timeit X.cdf(x)  # new infrastructure\n```\n\nLANGUAGE: ipython3\nCODE:\n```\n%timeit stats.gausshyper.cdf(x, a, b, c, z)  # old infrastructure\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteAliasUrn with Urn Factor in SciPy\nDESCRIPTION: This code snippet shows how to influence the performance of DiscreteAliasUrn by setting the size of the internal table using the `urn_factor` parameter. It demonstrates setting the urn_factor to 2, which means the table's length will be twice the length of the probability vector.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dau.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> # use a table twice the length of PV.\n>>> urn_factor = 2\n>>> rng = DiscreteAliasUrn(pv, urn_factor=urn_factor, random_state=urng)\n>>> rng.rvs()\n2    # may vary\n```\n\n----------------------------------------\n\nTITLE: Likelihood Function Calculations\nDESCRIPTION: Mathematical formulas for maximum likelihood estimation and parameter fitting of statistical distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous.rst#2025-04-14_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nf\\left(\\mathbf{x};\\boldsymbol{\\theta}\\right)=\\prod_{i=1}^{N}f\\left(x_{i};\\boldsymbol{\\theta}\\right)\nl_{\\mathbf{x}}\\left(\\boldsymbol{\\theta}\\right) = -\\sum_{i=1}^{N}\\log f\\left(x_{i};\\boldsymbol{\\theta}\\right)\n```\n\n----------------------------------------\n\nTITLE: Observing P-Value of Kendall's Tau Test in Python\nDESCRIPTION: Extracts and observes the p-value returned by the Kendall's tau test from SciPy, crucial for determining the statistical significance of the study. Ensure SciPy is installed before execution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kendalltau.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Converting Sparse Array with Duplicates to Dense Array in Python\nDESCRIPTION: This snippet demonstrates how duplicate values in a sparse array are summed when converting to a dense array using the todense() method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n>>> dupes.todense()\narray([[1, 0, 0, 2],\n      [0, 4, 1, 0],\n      [0, 0, 5, 0]])\n```\n\n----------------------------------------\n\nTITLE: Performing Permutation Test for Levene Test\nDESCRIPTION: This advanced snippet performs a permutation test to generate an empirical null distribution for the Levene test, offering an alternative to the asymptotic approach.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(*samples):\n    return stats.levene(*samples).statistic\nref = stats.permutation_test(\n    (small_dose, medium_dose, large_dose), statistic,\n    permutation_type='independent', alternative='greater'\n)\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\nbins = np.linspace(0, 5, 25)\nax.hist(\n    ref.null_distribution, bins=bins, density=True, facecolor=\"C1\"\n)\nax.legend(['asymptotic approximation\\n(many observations)',\n           'randomized null distribution'])\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Performing Permutation Test for Variance Comparison\nDESCRIPTION: Implementing a permutation test to generate a randomized null distribution and calculate alternative p-value for variance comparison across groups.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_fligner.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(*samples):\n    return stats.fligner(*samples).statistic\nref = stats.permutation_test(\n    (small_dose, medium_dose, large_dose), statistic,\n    permutation_type='independent', alternative='greater'\n)\nref.pvalue  # randomized test p-value\n```\n\n----------------------------------------\n\nTITLE: Debugging C/C++/Fortran Code in SciPy\nDESCRIPTION: Example Python script for testing and debugging C-based functions in SciPy using GDB. Shows how to set up a test case for the hyp2f1 special function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/compiled_code.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.special import hyp2f1\nprint(hyp2f1(5.0, 1.0, -1.8, 0.95))\n```\n\n----------------------------------------\n\nTITLE: Solving Linear System with Single Vector in Python\nDESCRIPTION: This snippet demonstrates how to solve a linear system Ax = b where A is a single square matrix and b is a single vector using SciPy's linalg.solve function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nA = np.eye(5)\nb = np.arange(5)\nlinalg.solve(A, b)\n```\n\n----------------------------------------\n\nTITLE: Implementing nan_policy='omit' for Single Array Input in Python\nDESCRIPTION: Demonstrates how to implement the 'omit' option of nan_policy for a function that accepts a single array and returns a scalar. The function should behave as if NaN values were removed from the input.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/nan_policy.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfunc([1.0, 3.0, np.nan, 5.0], nan_policy='omit')\n```\n\nLANGUAGE: python\nCODE:\n```\nfunc([1.0, 3.0, 5.0])\n```\n\nLANGUAGE: python\nCODE:\n```\nfunc(a[~np.isnan(a)])\n```\n\n----------------------------------------\n\nTITLE: Initializing NumPy array with sample weights\nDESCRIPTION: This snippet initializes a NumPy array named `x` with a set of sample weights. This array will be used as input for the Jarque-Bera test to determine if the weights are normally distributed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nx = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236])\n```\n\n----------------------------------------\n\nTITLE: Using Python Warnings for Deprecation Detection\nDESCRIPTION: Command for running Python code with deprecation warnings enabled to check for deprecated SciPy functionality\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.7.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npython -Wd\n```\n\n----------------------------------------\n\nTITLE: Creating Parametric Smoothing Splines with make_splprep in Python\nDESCRIPTION: Demonstrates the use of make_splprep to create parametric smoothing splines for 2D data, including noise addition and plotting of results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.interpolate import make_splprep\n>>> th = np.linspace(-0.2, np.pi/2 + 0.2, 21)\n>>> r = 3 * np.sin(th) * np.cos(th) / (np.sin(th)**3 + np.cos(th)**3)\n>>> x, y = r * np.cos(th), r * np.sin(th)\n\n>>> rng = np.random.default_rng()\n>>> xn = x + 0.1*rng.uniform(-1, 1, size=len(x))\n>>> yn = y + 0.1*rng.uniform(-1, 1, size=len(x))\n>>> spl, u = make_splprep([xn, yn], s=0)   # note the [xn, yn] argument\n>>> spl_n, u_n = make_splprep([xn, yn], s=0.1)\n\n>>> import matplotlib.pyplot as plt\n>>> plt.plot(xn, yn, 'o')\n>>> plt.plot(*spl(u), '--')\n>>> plt.plot(*spl_n(u_n), '-')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a MATLAB Array in Octave\nDESCRIPTION: Shows how to create a 3D array in Octave and save it as a MATLAB-compatible file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_1\n\nLANGUAGE: octave\nCODE:\n```\noctave:1> a = 1:12\noctave:2> a = reshape(a, [1 3 4])\noctave:3> save -6 octave_a.mat a % MATLAB 6 compatible\noctave:4> ls octave_a.mat\n```\n\n----------------------------------------\n\nTITLE: Truncating the Distribution Domain with TDR\nDESCRIPTION: This snippet illustrates how to truncate the domain of the standard normal distribution by passing a domain parameter to the TransformedDensityRejection instance.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_tdr.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nurng = np.random.default_rng()\nrng = TransformedDensityRejection(dist, domain=[0, 1], random_state=urng)\nprint(rng.rvs(10))\n```\n\n----------------------------------------\n\nTITLE: Performing Kolmogorov-Smirnov Test in Python\nDESCRIPTION: The kstest function now handles both one-sample and two-sample testing, using different algorithms for calculating p-values based on the input types and sizes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.5.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import kstest\n\n# One-sample test\nstatistic, p_value = kstest(rvs, cdf)\n\n# Two-sample test\nstatistic, p_value = kstest(rvs1, rvs2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Batched Spline Evaluation in Python\nDESCRIPTION: Provides a workaround for handling batched inputs with smoothing splines by creating a custom BatchSpline class that mimics BSpline behavior for evaluations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nclass BatchSpline:\n    \"\"\"BSpline-like class with batch behavior.\"\"\"\n    def __init__(self, x, y, axis, *, spline, **kwargs):\n        y = np.moveaxis(y, axis, -1)\n        self._batch_shape = y.shape[:-1]\n        self._splines = [\n            spline(x, yi, **kwargs) for yi in y.reshape(-1, y.shape[-1])\n        ]\n        self._axis = axis\n\n    def __call__(self, x):\n        y = [spline(x) for spline in self._splines]\n        y = np.reshape(y, self._batch_shape + x.shape)\n        return np.moveaxis(y, -1, self._axis) if x.shape else y\n```\n\n----------------------------------------\n\nTITLE: Applying a Separable 2D Gaussian Filter\nDESCRIPTION: This example shows how to apply a separable 2D Gaussian filter to an image using SciPy's signal.sepfir2d function. It uses the signal.windows.gaussian function to create the filter kernel.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import signal, datasets\n>>> import matplotlib.pyplot as plt\n\n>>> image = np.asarray(datasets.ascent(), np.float64)\n>>> w = signal.windows.gaussian(51, 10.0)\n>>> image_new = signal.sepfir2d(image, w, w)\n\n>>> plt.figure()\n>>> plt.imshow(image)\n>>> plt.gray()\n>>> plt.title('Original image')\n>>> plt.show()\n\n>>> plt.figure()\n>>> plt.imshow(image_new)\n>>> plt.gray()\n>>> plt.title('Filtered image')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Finding Object Boundaries with find_objects\nDESCRIPTION: Demonstrates using find_objects to locate and extract object boundaries from a labeled array, returning slices that contain each object.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> a = np.array([[0,1,1,0,0,0],[0,1,1,0,1,0],[0,0,0,1,1,1],[0,0,0,0,1,0]])\n>>> l, n = label(a)\n>>> from scipy.ndimage import find_objects\n>>> f = find_objects(l)\n>>> a[f[0]]\n>>> a[f[1]]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Monte Carlo Null Distribution\nDESCRIPTION: This snippet plots the null distribution of the Shapiro-Wilk test using a histogram to visualize the Monte Carlo approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_shapiro.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(8, 5))\nbins = np.linspace(0.65, 1, 50)\n\ndef plot(ax):  # we'll reuse this\n    ax.hist(ref.null_distribution, density=True, bins=bins)\n    ax.set_title(\"Shapiro-Wilk Test Null Distribution \\n\"\n                 \"(Monte Carlo Approximation, 11 Observations)\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy Stats - Basic vs Detailed Namespace\nDESCRIPTION: Compares two different approaches for importing from scipy.stats, demonstrating how using more specific imports can make code more readable and self-documenting.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# first form\nfrom scipy import stats\nstats.lomax(...)\n\n# second form\nfrom scipy.stats import distributions\ndistributions.lomax(...)\n```\n\n----------------------------------------\n\nTITLE: Linear Assignment Problem Solver in SciPy\nDESCRIPTION: This snippet introduces the `scipy.optimize.linear_sum_assignment` function, which implements the Hungarian algorithm to solve linear sum assignment problems. It is a significant addition for users needing optimal assignment solutions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.linear_sum_assignment\n```\n\n----------------------------------------\n\nTITLE: Creating New Distribution Class for Weibull Distribution\nDESCRIPTION: Defines an abstraction of the Weibull distribution family using make_distribution. This new class handles distribution parameters more efficiently by adhering to the new SciPy infrastructure.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nWeibull = stats.make_distribution(stats.weibull_min)\nprint(Weibull.__doc__[:288])\n```\n\n----------------------------------------\n\nTITLE: Weibull Distribution Fitting with stats.weibull_min.fit\nDESCRIPTION: This code snippet demonstrates fitting a Weibull distribution to data using `stats.weibull_min.fit`. It estimates the shape (c), location (loc), and scale parameters of the distribution. The output `c_, loc_, scale_` represents the estimated parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n\"c_, loc_, scale_ = stats.weibull_min.fit(data)\nc_, loc_, scale_\"\n```\n\n----------------------------------------\n\nTITLE: Calculating NLLF with Estimated Parameters\nDESCRIPTION: This snippet calculates the negative log-likelihood (NLLF) of the data given the estimated parameters obtained from the `fit` method. It uses the `nnlf` method with the estimated parameters `c_, loc_, scale_` to compute the NLLF.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n\"stats.weibull_min.nnlf((c_, loc_, scale_), data)\"\n```\n\n----------------------------------------\n\nTITLE: Defining BSpline Class for Interpolation - Python\nDESCRIPTION: The `scipy.interpolate.BSpline` class implements piecewise polynomial splines, allowing for efficient evaluation and management of knots and coefficients.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> t, c, k = splrep(x, y, s=0)\\n>>> spl = BSpline(t, c, k)\\n>>> np.allclose(spl(x), y)\n```\n\n----------------------------------------\n\nTITLE: Solving Procrustes Problem - SciPy Python\nDESCRIPTION: The `scipy.linalg.orthogonal_procrustes` function introduced in the `scipy.linalg` module provides a way to solve the Procrustes problem, which is a form of statistical analysis that seeks to analyze the differences between two datasets.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nscipy.linalg.orthogonal_procrustes\n\n```\n\n----------------------------------------\n\nTITLE: Defining Gumbel Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and quantile function (G) for the Gumbel distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_r.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\exp\\left(-\\left(x+e^{-x}\\right)\\right)\\\\ F\\left(x\\right) & = & \\exp\\left(-e^{-x}\\right)\\\\ G\\left(q\\right) & = & -\\log\\left(-\\log\\left(q\\right)\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Accessing p-value from Jarque-Bera result\nDESCRIPTION: This snippet demonstrates how to access the p-value directly from the `res` object returned by `stats.jarque_bera`. This p-value is based on the asymptotic approximation of the null distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Visualizing Chi-Square Null Distribution\nDESCRIPTION: Creates a matplotlib plot to visualize the chi-square distribution used as the null hypothesis in Bartlett's test\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_bartlett.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\\nk = 3  # number of samples\\ndist = stats.chi2(df=k-1)\\nval = np.linspace(0, 5, 100)\\npdf = dist.pdf(val)\\nfig, ax = plt.subplots(figsize=(8, 5))\\n\\ndef plot(ax):  # we'll reuse this\\n    ax.plot(val, pdf, color='C0')\\n    ax.set_title(\"Bartlett Test Null Distribution\")\\n    ax.set_xlabel(\"statistic\")\\n    ax.set_ylabel(\"probability density\")\\n    ax.set_xlim(0, 5)\\n    ax.set_ylim(0, 1)\\n\\nplot(ax)\\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Polar Decomposition of a Matrix\nDESCRIPTION: The `scipy.linalg.polar` function computes the polar decomposition of a given matrix, providing insights into its structure. Users need to ensure they have SciPy installed to use this feature.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.13.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n# Example of computing the polar decomposition\nimport numpy as np\nfrom scipy.linalg import polar\n\n# Create a random matrix\nA = np.random.rand(3, 3)\n\n# Compute the polar decomposition\nU, P = polar(A)\nprint('Orthogonal component U:', U)\nprint('Positive semi-definite component P:', P)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Guide Factor for Speed Optimization\nDESCRIPTION: Illustrates the initialization of DiscreteGuideTable with a defined guide factor, which can enhance sampling speed at the cost of setup time.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dgt.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> guide_factor = 2\n>>> rng = DiscreteGuideTable(pv, random_state=urng, guide_factor=guide_factor)\n>>> rng.rvs()\n2     # may vary\n```\n\n----------------------------------------\n\nTITLE: CDF and PPF Functions for Discrete Distributions in SciPy\nDESCRIPTION: Demonstrates the relationship between the cumulative distribution function (CDF) and percent point function (PPF) for discrete distributions like hypergeometric.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> x = np.arange(4) * 2\n>>> x\narray([0, 2, 4, 6])\n>>> prb = hypergeom.cdf(x, M, n, N)\n>>> prb\narray([  1.03199174e-04,   5.21155831e-02,   6.08359133e-01,\n         9.89783282e-01])\n>>> hypergeom.ppf(prb, M, n, N)\narray([ 0.,  2.,  4.,  6.])\n```\n\n----------------------------------------\n\nTITLE: Importing Logarithmic Distribution from SciPy\nDESCRIPTION: This code snippet shows how to import the logarithmic distribution implementation from SciPy's stats module. It can be used to create and work with logarithmic distribution objects in Python.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_logser.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import logser\n```\n\n----------------------------------------\n\nTITLE: Nonlinear Least Squares Optimization with Constraints\nDESCRIPTION: The `scipy.optimize.least_squares` function allows for nonlinear least squares optimization with constraints, supporting multiple methods including Levenberg-Marquardt and trust-region methods. It is crucial for optimization tasks involving constraints.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.least_squares\n```\n\n----------------------------------------\n\nTITLE: Monte Carlo test for Jarque-Bera with custom statistic\nDESCRIPTION: This snippet defines a custom statistic function for calculating the Jarque-Bera statistic and then uses `scipy.stats.monte_carlo_test` to approximate the p-value. A histogram of the null distribution generated by the Monte Carlo simulation is plotted alongside the asymptotic approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(x, axis):\n    # underlying calculation of the Jarque Bera statistic\n    s = stats.skew(x, axis=axis)\n    k = stats.kurtosis(x, axis=axis)\n    return x.shape[axis]/6 * (s**2 + k**2/4)\n\nres = stats.monte_carlo_test(x, stats.norm.rvs, statistic,\n                             alternative='greater')\nfig, ax = plt.subplots(figsize=(8, 5))\njb_plot(ax)\nax.hist(res.null_distribution, np.linspace(0, 10, 50),\n        density=True)\nax.legend(['asymptotic approximation (many observations)',\n           'Monte Carlo approximation (11 observations)'])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Survival Function for Gauss Hypergeometric Distribution\nDESCRIPTION: This snippet demonstrates initializing parameters for the Gauss hypergeometric distribution and calculates its survival function using the frozen distribution object. Necessary dependencies include `scipy.stats` for distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_62\n\nLANGUAGE: ipython3\nCODE:\n```\na, b, c, z = 1.5, 2.5, 2, 0\nx = 0.5\nfrozen = stats.gausshyper(a=a, b=b, c=c, z=z)\nfrozen.sf(x)\n```\n\n----------------------------------------\n\nTITLE: Generating Knots for Smoothing Splines in Python\nDESCRIPTION: Demonstrates the use of generate_knots function to create knot vectors for smoothing splines with different smoothing parameters and spline orders.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> list(generate_knots(x, y, s=0))\n[array([0, 0, 0, 0, 2, 3, 4, 6, 6, 6, 6])]\n\n>>> list(generate_knots(x, y, s=1, k=2))   # k=2, quadratic spline\n[array([0., 0., 0., 6., 6., 6.]),\n array([0., 0., 0., 3., 6., 6., 6.]),\n array([0., 0., 0., 3., 5., 6., 6., 6.]),\n array([0., 0., 0., 2., 3., 5., 6., 6., 6.]),\n array([0. , 0. , 0. , 1.5, 2.5, 3.5, 4.5, 6. , 6. , 6. ])]   # Greville sites\n```\n\n----------------------------------------\n\nTITLE: Generating Samples Using Simple Ratio-of-Uniforms\nDESCRIPTION: Uses the SimpleRatioUniforms instance to generate a specified number of random samples from the defined distribution. The snippet illustrates sampling ten random values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> rvs = rng.rvs(10)\n```\n\n----------------------------------------\n\nTITLE: Initializing NumPy Array for Sample Data in Python\nDESCRIPTION: This snippet initializes a NumPy array with sample weight measurements of adult human males. The array 'x' serves as the dataset for further statistical analysis. NumPy is required for array manipulation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_skewtest.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nx = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236])\n```\n\n----------------------------------------\n\nTITLE: Creating a New Feature Branch\nDESCRIPTION: Commands to fetch updates and create a new feature branch based on the latest upstream main branch.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit checkout -b my-new-feature upstream/main\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parameters and Testing Gray-Scott System Performance in Python\nDESCRIPTION: This code demonstrates how to set up the initial parameters for solving the Gray-Scott system and compares the performance with and without specifying the banded structure of the Jacobian matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nrng = np.random.default_rng()\n\ny0 = rng.standard_normal(5000)\n\nt = np.linspace(0, 50, 11)\n\nf = 0.024\n\nk = 0.055\n\nDu = 0.01\n\nDv = 0.005\n\ndx = 0.025\n```\n\n----------------------------------------\n\nTITLE: Creating Sparse Matrices\nDESCRIPTION: Shows different ways of creating sparse matrices using various constructors and input types, including dense matrices and lists of lists.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.7.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nA = csr_matrix(rand(3,3))\nB = lil_matrix([[1,2],[3,4]])\n```\n\n----------------------------------------\n\nTITLE: Checking Canonical Format of Sparse Array in Python\nDESCRIPTION: This code shows how to check if a sparse array is in canonical form using the has_canonical_format attribute, and how to convert it to canonical form using sum_duplicates().\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n>>> coo = sp.sparse.coo_array(([1, 1, 1], ([0, 2, 1], [0, 1, 2])))\n>>> coo.has_canonical_format\nFalse\n\n>>> coo.sum_duplicates()\n>>> coo.has_canonical_format\nTrue\n```\n\n----------------------------------------\n\nTITLE: Defining Pareto Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Pareto distribution with shape parameter b and support x ≥ 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_pareto.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;b\\right) & = & \\frac{b}{x^{b+1}}\\\\ F\\left(x;b\\right) & = & 1-\\frac{1}{x^{b}}\\\\ G\\left(q;b\\right) & = & \\left(1-q\\right)^{-1/b}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Calculating U-errors for NumericalInversePolynomial in Python\nDESCRIPTION: This code calculates the maximum and mean absolute u-errors by comparing the CDF of the exact distribution with the PPF of the NumericalInversePolynomial generator for a large number of points.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n>>> u = np.linspace(0.001, 0.999, num=1_000_000)\n>>> u_errors = np.abs(u - dist.cdf(rng.ppf(u)))\n>>> u_errors.max()\n8.78600525666684e-11\n>>> u_errors.mean()\n2.9321444940323206e-11\n```\n\n----------------------------------------\n\nTITLE: Visualization of Periodogram and Welch's Method in SciPy Signal\nDESCRIPTION: A plot example showing the comparison between periodogram and Welch's method for spectral analysis of a 1.27kHz sine signal with additive gaussian noise. The example demonstrates how Welch's method produces a smoother noise floor at the expense of frequency resolution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n.. plot:: tutorial/examples/signal_SpectralAnalysis_PeriodogramWelch.py\n```\n\n----------------------------------------\n\nTITLE: Creating B-spline Interpolation for Sine Function in Python\nDESCRIPTION: This example demonstrates how to create a B-spline interpolation of the sine function and access its knots and coefficients.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = np.linspace(0, 3/2, 7)\ny = np.sin(np.pi*x)\nfrom scipy.interpolate import make_interp_spline\nbspl = make_interp_spline(x, y, k=3)\nprint(bspl.t)\nprint(x)\n\nlen(bspl.c)\n```\n\n----------------------------------------\n\nTITLE: Updates in Linear Algebra and Decompositions\nDESCRIPTION: The default algorithm for `scipy.linalg.leastsq` has changed to LAPACK's `*gelsd`, while a new function for QZ decomposition has been introduced. This enhances performance and supports new linear algebra functionalities.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nscipy.linalg.leastsq\n```\n\nLANGUAGE: python\nCODE:\n```\nscipy.linalg.ordqz\n```\n\n----------------------------------------\n\nTITLE: Calculating and Plotting Spline Integral in Python\nDESCRIPTION: This code defines a function to calculate the integral of a spline using SciPy's splint function, then plots the integral alongside the true integral (negative cosine function).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Integral of spline\ndef integ(x, tck, constant=-1):\n    x = np.atleast_1d(x)\n    out = np.zeros(x.shape, dtype=x.dtype)\n    for n in range(len(out)):\n        out[n] = interpolate.splint(0, x[n], tck)\n    out += constant\n    return out\n\nyint = integ(xnew, tck)\nplt.figure()\nplt.plot(xnew, yint, xnew, -np.cos(xnew), '--')\nplt.legend(['Cubic Spline', 'True'])\nplt.axis([-0.05, 6.33, -1.05, 1.05])\nplt.title('Integral estimation from spline')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Saving a NumPy Array as a MATLAB File in Python\nDESCRIPTION: Shows how to create a NumPy array and save it as a MATLAB file using SciPy's savemat function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> vect = np.arange(10)\n>>> vect.shape\n>>> sio.savemat('np_vector.mat', {'vect':vect})\n```\n\n----------------------------------------\n\nTITLE: Implementing nan_policy='omit' for Multiple Unrelated Inputs in Python\nDESCRIPTION: Demonstrates how to implement the 'omit' option of nan_policy for functions that accept multiple unrelated array inputs and return a scalar.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/nan_policy.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfunc(a, b, nan_policy='omit')\n```\n\nLANGUAGE: python\nCODE:\n```\nfunc(a[~np.isnan(a)], b[~np.isnan(b)])\n```\n\n----------------------------------------\n\nTITLE: Handling Extrapolation with RegularGridInterpolator in Python\nDESCRIPTION: This example demonstrates how to control extrapolation behavior using the fill_value parameter when dealing with data confined to an (N-1)-dimensional subspace of N-dimensional space.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_regular_grid.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx = np.array([0, 5, 10])\ny = np.array([0])\ndata = np.array([[0], [5], [10]])\nrgi = RegularGridInterpolator((x, y), data,\n                              bounds_error=False, fill_value=None)\nrgi([(2, 0), (2, 1), (2, -1)])   # extrapolates the value on the axis\nrgi.fill_value = -101\nrgi([(2, 0), (2, 1), (2, -1)])\n```\n\n----------------------------------------\n\nTITLE: Calculating PPF for Binomial Distribution\nDESCRIPTION: Illustrates how to calculate the percent point function (PPF) for a binomial distribution using DiscreteGuideTable. It shows how to set up the distribution and evaluate the PPF at a specific quantile.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dgt.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import scipy.stats as stats\n>>> n, p = 4, 0.1\n>>> dist = stats.binom(n, p)\n>>> rng = DiscreteGuideTable(dist, random_state=42)\n>>> rng.ppf(0.5)\n0.0\n```\n\n----------------------------------------\n\nTITLE: Cubic Spline Derivatives Visualization\nDESCRIPTION: Creates plots showing a cubic spline interpolation and its first three derivatives using cos function data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import CubicSpline\nx = np.linspace(0, 10, num=11)\ny = np.cos(-x**2 / 9.)\nspl = CubicSpline(x, y)\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(4, 1, figsize=(5, 7))\nxnew = np.linspace(0, 10, num=1001)\nax[0].plot(xnew, spl(xnew))\nax[0].plot(x, y, 'o', label='data')\nax[1].plot(xnew, spl(xnew, nu=1), '--', label='1st derivative')\nax[2].plot(xnew, spl(xnew, nu=2), '--', label='2nd derivative')\nax[3].plot(xnew, spl(xnew, nu=3), '--', label='3rd derivative')\nfor j in range(4):\n    ax[j].legend(loc='best')\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Faster Piecewise Polynomial Implementations in scipy.interpolate\nDESCRIPTION: The SciPy library now includes `scipy.interpolate.PPoly` and `scipy.interpolate.BPoly` for faster implementations of piecewise polynomials in power and Bernstein polynomial bases. Users are advised to adopt these classes over the older `scipy.interpolate.PiecewisePolynomial` class.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"Faster implementations of piecewise polynomials in power and Bernstein\\npolynomial bases have been added as `scipy.interpolate.PPoly` and\\n`scipy.interpolate.BPoly`. New users should use these in favor of\\n`scipy.interpolate.PiecewisePolynomial`.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Estimating u-error with NumericalInversePolynomial.u_error in Python\nDESCRIPTION: This code shows how to estimate the u-error achieved by the NumericalInversePolynomial algorithm. It defines a StandardNormal class with both pdf and cdf methods, initializes the generator, and then calls the u_error method to estimate the maximum and mean absolute u-error.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.special import ndtr\n>>> class StandardNormal:\n...     def pdf(self, x):\n...         return np.exp(-0.5 * x*x)\n...     def cdf(self, x):\n...         return ndtr(x)\n...\n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> rng = NumericalInversePolynomial(dist, random_state=urng)\n>>> rng.u_error(sample_size=100_000)\n    UError(max_error=8.785949745515609e-11, mean_absolute_error=2.9307548109436816e-11)\n```\n\n----------------------------------------\n\nTITLE: Verifying B-spline Equivalence with NumPy in Python\nDESCRIPTION: This snippet demonstrates using NumPy's allclose function to verify that two different B-spline representations produce equivalent results for the same input values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> np.allclose(b(xx), bspl(xx))\n    True\n```\n\n----------------------------------------\n\nTITLE: Sparse Matrix Boolean Comparisons\nDESCRIPTION: SciPy's sparse matrix types allow boolean operations and comparisons such as greater than or equal to, enhancing flexibility when working with sparse data. Dependencies include SciPy and NumPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.13.0-notes.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n# Example of boolean operations with sparse matrices\nfrom scipy.sparse import csr_matrix\n\n# Create sparse matrices\nA = csr_matrix([[0, 1, 2], [0, 0, 3], [4, 0, 0]])\nB = csr_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]])\n\n# Performing boolean comparison\nresult = A > B\nprint(result.toarray())\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Landau Distribution Probability Density Function in LaTeX\nDESCRIPTION: Mathematical formula representing the probability density function of the Landau distribution, expressed as an integral. The function involves an infinite integral with exponential and trigonometric terms.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_landau.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nf(x) = \\frac{1}{\\pi}\\int_0^\\infty \\exp(-t \\log t - xt)\\sin(\\pi t) dt\n```\n\n----------------------------------------\n\nTITLE: Verifying Equivalence of Solutions With and Without Banded Optimization\nDESCRIPTION: This code checks that the solutions computed with and without specifying the banded structure of the Jacobian matrix are numerically equivalent.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nnp.allclose(sola, solb)\n# Out[41]: True\n```\n\n----------------------------------------\n\nTITLE: Ellipsoidal Harmonic Function Computation - SciPy Python\nDESCRIPTION: The new convenience functions `entr`, `rel_entr`, `kl_div`, `huber`, and `pseudo_huber` have been added to `scipy.special`, facilitating various forms of statistical calculations involving ellipsoidal harmonics and entropy measures.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nscipy.special.ellip_harm, scipy.special.ellip_harm_2, scipy.special.ellip_normal\n\n```\n\n----------------------------------------\n\nTITLE: Setting u_resolution for NumericalInversePolynomial in Python\nDESCRIPTION: This snippet showcases how to set the u_resolution parameter during the initialization of NumericalInversePolynomial. By controlling the u_resolution, you can manage the trade-off between setup time and approximation accuracy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-12,\n...                                  random_state=urng)\n```\n\n----------------------------------------\n\nTITLE: PPF Edge Cases for Discrete Distributions in SciPy\nDESCRIPTION: Illustrates how the percent point function (PPF) behaves with values that are not exactly at the step points of a discrete distribution's CDF.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> hypergeom.ppf(prb + 1e-8, M, n, N)\narray([ 1.,  3.,  5.,  7.])\n>>> hypergeom.ppf(prb - 1e-8, M, n, N)\narray([ 0.,  2.,  4.,  6.])\n```\n\n----------------------------------------\n\nTITLE: Displaying B-spline Design Matrix Contents in Python\nDESCRIPTION: This snippet shows how to print the contents of a sparse B-spline design matrix in a readable array format, setting the display precision to 3 decimal places using NumPy's printoptions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/splines_and_polynomials.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> with np.printoptions(precision=3):\n...     print(mat.toarray())\n[[0.125 0.514 0.319 0.042 0.    0.    0.   ]\n [0.    0.111 0.556 0.333 0.    0.    0.   ]\n [0.    0.    0.125 0.75  0.125 0.    0.   ]]\n```\n\n----------------------------------------\n\nTITLE: Defining minimize function with TNC method in SciPy\nDESCRIPTION: This code snippet defines the minimize function in SciPy's optimize module, specifically implementing the TNC (Truncated Newton) method. It uses the _minimize_tnc function from the _tnc module for the actual implementation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-tnc.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._tnc._minimize_tnc\n   :method: TNC\n```\n\n----------------------------------------\n\nTITLE: Accessing p-value from Monte Carlo test result\nDESCRIPTION: This snippet demonstrates how to access the p-value from the `res` object returned by `stats.monte_carlo_test`. This p-value provides a more accurate estimation for small sample sizes than the asymptotic approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_jarque_bera.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Plotting Function for Interpolation Results\nDESCRIPTION: Utility function to plot and compare interpolation results using matplotlib\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/interp_transition_guide.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef plot(f, xnew, ynew):\n   fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n   znew = f(xnew, ynew)\n   ax1.plot(x, z[0, :], 'ro-', xnew, znew[0, :], 'b-')\n   im = ax2.imshow(znew)\n   plt.colorbar(im, ax=ax2)\n   plt.show()\n   return znew\n```\n\n----------------------------------------\n\nTITLE: Plotting the Null Distribution (T-Distribution)\nDESCRIPTION: This snippet plots the null distribution for Spearman's rho test, approximated by a Student's t-distribution. It defines a plotting function for reuse and displays the probability density function of the t-distribution with degrees of freedom calculated from the sample size.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\ndof = len(x)-2  # len(x) == len(y)\ndist = stats.t(df=dof)\nt_vals = np.linspace(-5, 5, 100)\npdf = dist.pdf(t_vals)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef plot(ax):  # we'll reuse this\n    ax.plot(t_vals, pdf)\n    ax.set_title(\"Spearman's Rho Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Function Wrapping and Partial Application for Optimization\nDESCRIPTION: Demonstrates alternative approaches to handling additional parameters using function wrapping and functools.partial.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/optimize.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom functools import partial\n\ndef rosen_with_args(x, a, *, b):\n    return sum(a*(x[1:]-x[:-1]**2.0)**2.0 + (1-x[:-1])**2.0) + b\n\ndef wrapped_rosen_without_args(x):\n    return rosen_with_args(x, 0.5, b=1.)\n\npartial_rosen = partial(rosen_with_args, a=0.5, b=1.)\n```\n\n----------------------------------------\n\nTITLE: Selecting Assert Functions for SciPy Unit Tests in Python\nDESCRIPTION: Guidelines for choosing the appropriate assert function when writing unit tests in SciPy. The selection is based on the type of data being compared: xp_assert_close for floating-point, xp_assert_equal for integer arrays, and assert for boolean checks and other types.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/writing_test_tips.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nxp_assert_close  # for floating-point comparison\nxp_assert_equal  # for integer arrays\nassert  # for anything else (boolean check, etc.)\n```\n\n----------------------------------------\n\nTITLE: Plotting Kurtosis Test Null Distribution with Matplotlib in Python\nDESCRIPTION: This code snippet creates a plot of the null distribution of the kurtosis test statistic using Matplotlib. It defines a function 'kt_plot' to visualize the standard normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kurtosistest.md#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport matplotlib.pyplot as plt\ndist = stats.norm()\nkt_val = np.linspace(-5, 5, 100)\npdf = dist.pdf(kt_val)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef kt_plot(ax):  # we'll reuse this\n    ax.plot(kt_val, pdf)\n    ax.set_title(\"Kurtosis Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n\nkt_plot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Running SciPy Tests\nDESCRIPTION: Commands to activate the development environment and run SciPy tests.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nconda activate scipy-dev\npython dev.py test -v\n```\n\n----------------------------------------\n\nTITLE: Customizing Construction Points for TDR Sampling\nDESCRIPTION: In this snippet, the number of construction points used in the TDR method is customized by passing an array of points during the initialization of the TransformedDensityRejection instance.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_tdr.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nrng = TransformedDensityRejection(dist,\n                                  construction_points=[-5, 0, 5])\n```\n\n----------------------------------------\n\nTITLE: Building SciPy Wheel Without Test Suite\nDESCRIPTION: Command to build a SciPy wheel excluding the test suite using Meson's install tags functionality.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/redistributable_binaries.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m build -wnx -Cinstall-args=--tags=runtime,python-runtime,devel\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Finder with Asymptotic Behavior\nDESCRIPTION: Implements a class that combines interpolation with asymptotic behavior for finding roots of a*x - 1/tan(x) = 0. Handles large values of parameter 'a' by switching to asymptotic solution when appropriate.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass RootWithAsymptotics:\n   def __init__(self, a):\n   \n       # construct the interpolant\n       xleft, xright = 0.2, np.pi/2\n       x = np.linspace(xleft, xright, 11)\n\n       y = f(x, a)\n       dydx = a + 1./np.sin(x)**2    # d(ax - 1/tan(x)) / dx\n       dxdy = 1 / dydx               # dx/dy = 1 / (dy/dx)\n\n       # inverse interpolation\n       self.spl = BPoly.from_derivatives(y, np.c_[x, dxdy])\n       self.a = a\n\n   def root(self):\n       out = self.spl(0)\n       asympt = 1./np.sqrt(self.a)\n       return np.where(spl.x.min() < asympt, out, asympt)\n```\n\n----------------------------------------\n\nTITLE: Creating Interpolating and Least-Squares Splines - Python\nDESCRIPTION: New functions `scipy.interpolate.make_interp_spline` and `scipy.interpolate.make_lsq_spline` are introduced for constructing interpolating splines and least-squares spline approximations based on given data points.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nNew function `scipy.interpolate.make_interp_spline` constructs an interpolating\\n spline given data points and boundary conditions.\\nNew function `scipy.interpolate.make_lsq_spline` constructs a least-squares\\n spline approximation given data points.\n```\n\n----------------------------------------\n\nTITLE: Generating Random Samples Using NumericalInversePolynomial in Python\nDESCRIPTION: This code snippet shows how to generate random samples using the initialized NumericalInversePolynomial generator. It uses the rvs method to generate a 5x3 array of random samples from the defined standard normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> rng.rvs((5, 3))\n    array([[-1.52449963,  1.31933688,  2.05884468],\n           [ 0.48883931,  0.15207903, -0.02150773],\n           [ 1.11486463,  1.95449597, -0.30724928],\n           [ 0.9854643 ,  0.29867424,  0.7560304 ],\n           [-0.61776203,  0.16033378, -1.00933003]])\n```\n\n----------------------------------------\n\nTITLE: Maximum Length Sequence Computation - SciPy Python\nDESCRIPTION: The `scipy.signal.max_len_seq` function facilitates the computation of a Maximum Length Sequence (MLS) signal, commonly employed in signal processing applications.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscipy.signal.max_len_seq\n\n```\n\n----------------------------------------\n\nTITLE: Reflecting Weibull Distribution Instance Over Origin\nDESCRIPTION: Implements reflection of a Weibull distribution instance, showing how transformations like inversion are straightforwardly achieved in the new approach. This replaces older separate distribution class methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nY = -X\nY.plot()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Migrating and Replacing Sparse Function Signatures in Python\nDESCRIPTION: This snippet provides the new signatures for existing sparse functions that need migrating. It emphasizes careful adjustment of inputs to ensure correct outputs during the migration process.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef kron(A, B, format=None):\n    pass\n\ndef kronsum(A, B, format=None):\n    pass\n\ndef hstack(blocks, format=None, dtype=None):\n    pass\n\ndef vstack(blocks, format=None, dtype=None):\n    pass\n\ndef block_diag(mats, format=None, dtype=None):\n    pass\n\ndef tril(A, k=0, format=None):\n    pass\n\ndef triu(A, k=0, format=None):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Improvements to Interpolation Handling\nDESCRIPTION: The `scipy.interpolate.interp1d` function has received updates for improved out-of-bounds behavior, allowing for a more robust interpolation strategy with the introduction of the `fill_value` parameter for edge cases.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscipy.interpolate.interp1d\n```\n\n----------------------------------------\n\nTITLE: Creating and Comparing Dense and Sparse Arrays in Python\nDESCRIPTION: This snippet demonstrates how to create a dense NumPy array and convert it to a sparse COO array using SciPy. It shows the difference in representation between dense and sparse arrays.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipy as sp\nimport numpy as np\ndense = np.array([[1, 0, 0, 2], [0, 4, 1, 0], [0, 0, 5, 0]])\nsparse = sp.sparse.coo_array(dense)\nprint(dense)\nprint(sparse)\n```\n\n----------------------------------------\n\nTITLE: Watershed IFT Segmentation with Basic Markers\nDESCRIPTION: Demonstrates watershed segmentation using markers array with regular (positive) markers. Shows how marker positions affect the segmentation result.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> markers = np.array([[0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 2, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 1]], np.int8)\n>>> watershed_ift(input, markers)\n```\n\n----------------------------------------\n\nTITLE: Computing Matrix Determinant\nDESCRIPTION: Shows how to compute the determinant of a matrix using scipy.linalg.det.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy import linalg\n>>> A = np.array([[1,2],[3,4]])\n>>> A\narray([[1, 2],\n      [3, 4]])\n>>> linalg.det(A)\n-2.0\n```\n\n----------------------------------------\n\nTITLE: Comparing Python and Cython Loops for Special Functions\nDESCRIPTION: This code compares the performance of calling special functions in a tight loop using Python and Cython. It demonstrates how Cython can avoid Python function overhead for repeated scalar function calls.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/special.rst#2025-04-14_snippet_2\n\nLANGUAGE: Cython\nCODE:\n```\nimport scipy.special as sc\ncimport scipy.special.cython_special as csc\n\ndef python_tight_loop():\n    cdef:\n        int n\n        double x = 1\n\n    for n in range(100):\n        sc.jv(n, x)\n\ndef cython_tight_loop():\n    cdef:\n        int n\n        double x = 1\n\n    for n in range(100):\n        csc.jv(n, x)\n```\n\n----------------------------------------\n\nTITLE: Accessing Exponential Power Distribution in SciPy\nDESCRIPTION: Reference to the implementation of Exponential Power Distribution in the scipy.stats module. The distribution is characterized by one positive shape parameter b and has support for x ≥ 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_exponpow.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.exponpow\n```\n\n----------------------------------------\n\nTITLE: Handling NaN Values in Winsorization in Python\nDESCRIPTION: The winsorize function now includes a nan_policy argument for refined handling of NaN input values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.5.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import winsorize\n\n# Example usage (not provided in the original text)\nwinsorized_data = winsorize(data, limits=[0.1, 0.1], nan_policy='omit')\n```\n\n----------------------------------------\n\nTITLE: Implementing Second Derivative Function for Laplace Filter\nDESCRIPTION: Example of a second derivative function implementation that can be used with generic_laplace filter. The function performs correlation with a [1, -2, 1] kernel along specified axis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef d2(input, axis, output, mode, cval):\n    return correlate1d(input, [1, -2, 1], axis, output, mode, cval, 0)\n\na = np.zeros((5, 5))\na[2, 2] = 1\nfrom scipy.ndimage import generic_laplace\ngeneric_laplace(a, d2)\n```\n\n----------------------------------------\n\nTITLE: Batch Interpolation Example\nDESCRIPTION: Demonstrates how to perform interpolation on multiple functions simultaneously using batched input.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import make_interp_spline\nn = 11\nx = 2 * np.pi * np.arange(n) / n\ny = np.stack((np.sin(x)**2, np.cos(x)), axis=1)\nspl = make_interp_spline(x, y)\nxv = np.linspace(0, 2*np.pi, 51)\nplt.plot(x, y, 'o')\nplt.plot(xv, spl(xv), '-')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Loading MATLAB Cell Array in Python\nDESCRIPTION: Demonstrates how to load a MATLAB cell array file in Python and access its contents.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> mat_contents = sio.loadmat('octave_cells.mat')\n>>> oct_cells = mat_contents['my_cells']\n>>> print(oct_cells.dtype)\n>>> val = oct_cells[0,0]\n>>> val\n>>> print(val.dtype)\n```\n\n----------------------------------------\n\nTITLE: Random Sample Generation and Frequency Analysis\nDESCRIPTION: Generates a random sample, creates a histogram, and compares observed frequencies with theoretical probabilities\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> n_sample = 500\n>>> rvs = normdiscrete.rvs(size=n_sample)\n>>> f, l = np.histogram(rvs, bins=gridlimits)\n>>> sfreq = np.vstack([gridint, f, probs*n_sample]).T\n>>> print(sfreq)\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for Generalized Normal Distribution in LaTeX\nDESCRIPTION: This LaTeX equation defines the entropy for the Generalized Normal Distribution with shape parameter β.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gennorm.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} h\\left[X; \\beta\\right] = \\frac{1}{\\beta} - \\log\\left(\\frac{\\beta}{2\\Gamma\\left(1/\\beta\\right)}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Applying Boschloo's Test Using SciPy in Python\nDESCRIPTION: This snippet demonstrates Boschloo's test using the `scipy.stats.boschloo_exact` function. It addresses limitations of Fisher's exact test by not assuming fixed row sums in the contingency table, providing potentially more powerful test results. It outputs a statistic and a p-value for the significance testing of treatment effect.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_fisher_exact.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import boschloo_exact\nres = boschloo_exact([[7, 17], [15, 5]], alternative='less')\nres.statistic\n```\n\nLANGUAGE: Python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Generating Independent QMC Sequences (2x512) in SciPy\nDESCRIPTION: This snippet generates 512 independent quasi-random sequences, each of length 2, from a standard normal distribution.  Histograms of the first and second elements of the sequences are plotted to visualize their distribution. The shape of the generated sample array is (2, 512), indicating 2 samples each with dimension 512.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nsamples = X.sample((2, 512), rng=qrng)\nplt.hist(samples[0], bins, alpha=0.5, label='sample 0')\nplt.hist(samples[1], bins, alpha=0.5, label='sample 1')\nplt.title('Histograms of normally-distributed samples')\nplt.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Determinants for Multi-dimensional Matrix Batch\nDESCRIPTION: This snippet calculates determinants for a 2x4 batch of 3x3 matrices, showing how the output shape relates to the input batch shape and core shape.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\noutput = linalg.det(input)\noutput\n\noutput.shape\n```\n\n----------------------------------------\n\nTITLE: Defining a Standard Normal Distribution PDF in Python\nDESCRIPTION: Defines a class representing the standard normal distribution with a probability density function (PDF). The PDF is represented as an exponential function which does not integrate to 1 by default. This function calculates the density of the standard normal distribution for given x values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> class StdNorm:\n...     def pdf(self, x):\n...         return np.exp(-0.5 * x**2)\n```\n\n----------------------------------------\n\nTITLE: LAPACK Complex Matrix Operation Function Declarations in C\nDESCRIPTION: Function declarations for LAPACK routines that handle complex single-precision matrices. These functions support a wide range of linear algebra operations including matrix factorization, solving linear systems, eigenvalue problems, and matrix transformations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid clapll(int *n, c *x, int *incx, c *y, int *incy, s *ssmin)\nvoid clapmr(bint *forwrd, int *m, int *n, c *x, int *ldx, int *k)\nvoid clapmt(bint *forwrd, int *m, int *n, c *x, int *ldx, int *k)\nvoid claqgb(int *m, int *n, int *kl, int *ku, c *ab, int *ldab, s *r, s *c, s *rowcnd, s *colcnd, s *amax, char *equed)\nvoid claqge(int *m, int *n, c *a, int *lda, s *r, s *c, s *rowcnd, s *colcnd, s *amax, char *equed)\nvoid claqhb(char *uplo, int *n, int *kd, c *ab, int *ldab, s *s, s *scond, s *amax, char *equed)\nvoid claqhe(char *uplo, int *n, c *a, int *lda, s *s, s *scond, s *amax, char *equed)\nvoid claqhp(char *uplo, int *n, c *ap, s *s, s *scond, s *amax, char *equed)\nvoid claqp2(int *m, int *n, int *offset, c *a, int *lda, int *jpvt, c *tau, s *vn1, s *vn2, c *work)\nvoid claqps(int *m, int *n, int *offset, int *nb, int *kb, c *a, int *lda, int *jpvt, c *tau, s *vn1, s *vn2, c *auxv, c *f, int *ldf)\nvoid claqr0(bint *wantt, bint *wantz, int *n, int *ilo, int *ihi, c *h, int *ldh, c *w, int *iloz, int *ihiz, c *z, int *ldz, c *work, int *lwork, int *info)\nvoid claqr1(int *n, c *h, int *ldh, c *s1, c *s2, c *v)\nvoid claqr2(bint *wantt, bint *wantz, int *n, int *ktop, int *kbot, int *nw, c *h, int *ldh, int *iloz, int *ihiz, c *z, int *ldz, int *ns, int *nd, c *sh, c *v, int *ldv, int *nh, c *t, int *ldt, int *nv, c *wv, int *ldwv, c *work, int *lwork)\nvoid claqr3(bint *wantt, bint *wantz, int *n, int *ktop, int *kbot, int *nw, c *h, int *ldh, int *iloz, int *ihiz, c *z, int *ldz, int *ns, int *nd, c *sh, c *v, int *ldv, int *nh, c *t, int *ldt, int *nv, c *wv, int *ldwv, c *work, int *lwork)\nvoid claqr4(bint *wantt, bint *wantz, int *n, int *ilo, int *ihi, c *h, int *ldh, c *w, int *iloz, int *ihiz, c *z, int *ldz, c *work, int *lwork, int *info)\nvoid claqr5(bint *wantt, bint *wantz, int *kacc22, int *n, int *ktop, int *kbot, int *nshfts, c *s, c *h, int *ldh, int *iloz, int *ihiz, c *z, int *ldz, c *v, int *ldv, c *u, int *ldu, int *nv, c *wv, int *ldwv, int *nh, c *wh, int *ldwh)\nvoid claqsb(char *uplo, int *n, int *kd, c *ab, int *ldab, s *s, s *scond, s *amax, char *equed)\nvoid claqsp(char *uplo, int *n, c *ap, s *s, s *scond, s *amax, char *equed)\nvoid claqsy(char *uplo, int *n, c *a, int *lda, s *s, s *scond, s *amax, char *equed)\nvoid clar1v(int *n, int *b1, int *bn, s *lambda, s *d, s *l, s *ld, s *lld, s *pivmin, s *gaptol, c *z, bint *wantnc, int *negcnt, s *ztz, s *mingma, int *r, int *isuppz, s *nrminv, s *resid, s *rqcorr, s *work)\nvoid clar2v(int *n, c *x, c *y, c *z, int *incx, s *c, c *s, int *incc)\nvoid clarcm(int *m, int *n, s *a, int *lda, c *b, int *ldb, c *c, int *ldc, s *rwork)\nvoid clarf(char *side, int *m, int *n, c *v, int *incv, c *tau, c *c, int *ldc, c *work)\nvoid clarfb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, c *v, int *ldv, c *t, int *ldt, c *c, int *ldc, c *work, int *ldwork)\nvoid clarfg(int *n, c *alpha, c *x, int *incx, c *tau)\nvoid clarfgp(int *n, c *alpha, c *x, int *incx, c *tau)\nvoid clarft(char *direct, char *storev, int *n, int *k, c *v, int *ldv, c *tau, c *t, int *ldt)\nvoid clarfx(char *side, int *m, int *n, c *v, c *tau, c *c, int *ldc, c *work)\nvoid clargv(int *n, c *x, int *incx, c *y, int *incy, s *c, int *incc)\nvoid clarnv(int *idist, int *iseed, int *n, c *x)\nvoid clarrv(int *n, s *vl, s *vu, s *d, s *l, s *pivmin, int *isplit, int *m, int *dol, int *dou, s *minrgp, s *rtol1, s *rtol2, s *w, s *werr, s *wgap, int *iblock, int *indexw, s *gers, c *z, int *ldz, int *isuppz, s *work, int *iwork, int *info)\nvoid clartg(c *f, c *g, s *cs, c *sn, c *r)\nvoid clartv(int *n, c *x, int *incx, c *y, int *incy, s *c, c *s, int *incc)\nvoid clarz(char *side, int *m, int *n, int *l, c *v, int *incv, c *tau, c *c, int *ldc, c *work)\nvoid clarzb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, c *v, int *ldv, c *t, int *ldt, c *c, int *ldc, c *work, int *ldwork)\nvoid clarzt(char *direct, char *storev, int *n, int *k, c *v, int *ldv, c *tau, c *t, int *ldt)\nvoid clascl(char *type_bn, int *kl, int *ku, s *cfrom, s *cto, int *m, int *n, c *a, int *lda, int *info)\nvoid claset(char *uplo, int *m, int *n, c *alpha, c *beta, c *a, int *lda)\nvoid clasr(char *side, char *pivot, char *direct, int *m, int *n, s *c, s *s, c *a, int *lda)\nvoid classq(int *n, c *x, int *incx, s *scale, s *sumsq)\nvoid claswp(int *n, c *a, int *lda, int *k1, int *k2, int *ipiv, int *incx)\nvoid clasyf(char *uplo, int *n, int *nb, int *kb, c *a, int *lda, int *ipiv, c *w, int *ldw, int *info)\nvoid clatbs(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, c *ab, int *ldab, c *x, s *scale, s *cnorm, int *info)\nvoid clatdf(int *ijob, int *n, c *z, int *ldz, c *rhs, s *rdsum, s *rdscal, int *ipiv, int *jpiv)\nvoid clatps(char *uplo, char *trans, char *diag, char *normin, int *n, c *ap, c *x, s *scale, s *cnorm, int *info)\nvoid clatrd(char *uplo, int *n, int *nb, c *a, int *lda, s *e, c *tau, c *w, int *ldw)\nvoid clatrs(char *uplo, char *trans, char *diag, char *normin, int *n, c *a, int *lda, c *x, s *scale, s *cnorm, int *info)\nvoid clatrz(int *m, int *n, int *l, c *a, int *lda, c *tau, c *work)\nvoid clauu2(char *uplo, int *n, c *a, int *lda, int *info)\nvoid clauum(char *uplo, int *n, c *a, int *lda, int *info)\nvoid cpbcon(char *uplo, int *n, int *kd, c *ab, int *ldab, s *anorm, s *rcond, c *work, s *rwork, int *info)\nvoid cpbequ(char *uplo, int *n, int *kd, c *ab, int *ldab, s *s, s *scond, s *amax, int *info)\nvoid cpbrfs(char *uplo, int *n, int *kd, int *nrhs, c *ab, int *ldab, c *afb, int *ldafb, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cpbstf(char *uplo, int *n, int *kd, c *ab, int *ldab, int *info)\nvoid cpbsv(char *uplo, int *n, int *kd, int *nrhs, c *ab, int *ldab, c *b, int *ldb, int *info)\nvoid cpbsvx(char *fact, char *uplo, int *n, int *kd, int *nrhs, c *ab, int *ldab, c *afb, int *ldafb, char *equed, s *s, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cpbtf2(char *uplo, int *n, int *kd, c *ab, int *ldab, int *info)\nvoid cpbtrf(char *uplo, int *n, int *kd, c *ab, int *ldab, int *info)\nvoid cpbtrs(char *uplo, int *n, int *kd, int *nrhs, c *ab, int *ldab, c *b, int *ldb, int *info)\nvoid cpftrf(char *transr, char *uplo, int *n, c *a, int *info)\nvoid cpftri(char *transr, char *uplo, int *n, c *a, int *info)\nvoid cpftrs(char *transr, char *uplo, int *n, int *nrhs, c *a, c *b, int *ldb, int *info)\nvoid cpocon(char *uplo, int *n, c *a, int *lda, s *anorm, s *rcond, c *work, s *rwork, int *info)\nvoid cpoequ(int *n, c *a, int *lda, s *s, s *scond, s *amax, int *info)\nvoid cpoequb(int *n, c *a, int *lda, s *s, s *scond, s *amax, int *info)\nvoid cporfs(char *uplo, int *n, int *nrhs, c *a, int *lda, c *af, int *ldaf, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cposv(char *uplo, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, int *info)\nvoid cposvx(char *fact, char *uplo, int *n, int *nrhs, c *a, int *lda, c *af, int *ldaf, char *equed, s *s, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cpotf2(char *uplo, int *n, c *a, int *lda, int *info)\nvoid cpotrf(char *uplo, int *n, c *a, int *lda, int *info)\nvoid cpotri(char *uplo, int *n, c *a, int *lda, int *info)\nvoid cpotrs(char *uplo, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, int *info)\nvoid cppcon(char *uplo, int *n, c *ap, s *anorm, s *rcond, c *work, s *rwork, int *info)\nvoid cppequ(char *uplo, int *n, c *ap, s *s, s *scond, s *amax, int *info)\nvoid cpprfs(char *uplo, int *n, int *nrhs, c *ap, c *afp, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cppsv(char *uplo, int *n, int *nrhs, c *ap, c *b, int *ldb, int *info)\nvoid cppsvx(char *fact, char *uplo, int *n, int *nrhs, c *ap, c *afp, char *equed, s *s, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cpptrf(char *uplo, int *n, c *ap, int *info)\nvoid cpptri(char *uplo, int *n, c *ap, int *info)\nvoid cpptrs(char *uplo, int *n, int *nrhs, c *ap, c *b, int *ldb, int *info)\nvoid cpstf2(char *uplo, int *n, c *a, int *lda, int *piv, int *rank, s *tol, s *work, int *info)\nvoid cpstrf(char *uplo, int *n, c *a, int *lda, int *piv, int *rank, s *tol, s *work, int *info)\nvoid cptcon(int *n, s *d, c *e, s *anorm, s *rcond, s *rwork, int *info)\nvoid cpteqr(char *compz, int *n, s *d, s *e, c *z, int *ldz, s *work, int *info)\nvoid cptrfs(char *uplo, int *n, int *nrhs, s *d, c *e, s *df, c *ef, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cptsv(int *n, int *nrhs, s *d, c *e, c *b, int *ldb, int *info)\nvoid cptsvx(char *fact, int *n, int *nrhs, s *d, c *e, s *df, c *ef, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cpttrf(int *n, s *d, c *e, int *info)\nvoid cpttrs(char *uplo, int *n, int *nrhs, s *d, c *e, c *b, int *ldb, int *info)\nvoid cptts2(int *iuplo, int *n, int *nrhs, s *d, c *e, c *b, int *ldb)\nvoid crot(int *n, c *cx, int *incx, c *cy, int *incy, s *c, c *s)\nvoid cspcon(char *uplo, int *n, c *ap, int *ipiv, s *anorm, s *rcond, c *work, int *info)\nvoid cspmv(char *uplo, int *n, c *alpha, c *ap, c *x, int *incx, c *beta, c *y, int *incy)\nvoid cspr(char *uplo, int *n, c *alpha, c *x, int *incx, c *ap)\nvoid csprfs(char *uplo, int *n, int *nrhs, c *ap, c *afp, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cspsv(char *uplo, int *n, int *nrhs, c *ap, int *ipiv, c *b, int *ldb, int *info)\nvoid cspsvx(char *fact, char *uplo, int *n, int *nrhs, c *ap, c *afp, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid csptrf(char *uplo, int *n, c *ap, int *ipiv, int *info)\nvoid csptri(char *uplo, int *n, c *ap, int *ipiv, c *work, int *info)\n```\n\n----------------------------------------\n\nTITLE: Computing Levene Test P-Value\nDESCRIPTION: This simple snippet extracts the p-value from the Levene test result object, which indicates the probability of observing the test statistic under the null hypothesis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Running Specific Benchmark Class with dev.py\nDESCRIPTION: This command runs a specific benchmark class (KleeMinty from optimize_linprog.py) using the dev.py script.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython dev.py bench -t optimize_linprog.KleeMinty\n```\n\n----------------------------------------\n\nTITLE: Normality Test on t-Distributed Data with SciPy in Python\nDESCRIPTION: This snippet shows how to perform a normality test on t-distributed data using SciPy. It generates 100 samples from a t-distribution with 10 degrees of freedom and applies the normaltest function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/analysing_one_sample.rst#2025-04-14_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nprint('normaltest teststat = %6.3f pvalue = %6.4f' %\n       stats.normaltest(stats.t.rvs(10, size=100)))\n```\n\n----------------------------------------\n\nTITLE: Fixing stats.norm.rvs broadcasting bug in Scipy\nDESCRIPTION: This code snippet demonstrates an example of a bug that existed in previous versions of Scipy, specifically in the stats.norm.rvs function. The bug caused the function to return identical values when broadcasting shape, location and scale parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.18.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"stats.norm.rvs(loc=np.zeros(10))\"\n```\n\n----------------------------------------\n\nTITLE: Shifting Image with geometric_transform in Python\nDESCRIPTION: This Python code demonstrates shifting an image using scipy.ndimage.geometric_transform with a Python callback function. It calculates the input coordinates based on the output coordinates and a shift value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n\"from scipy import ndimage\n\n   def transform(output_coordinates, shift):\n       input_coordinates = output_coordinates[0] - shift, output_coordinates[1] - shift\n       return input_coordinates\n\n   im = np.arange(12).reshape(4, 3).astype(np.float64)\n   shift = 0.5\n   print(ndimage.geometric_transform(im, transform, extra_arguments=(shift,)))\"\n```\n\n----------------------------------------\n\nTITLE: Importing F-distribution from SciPy\nDESCRIPTION: Shows how to import the F-distribution implementation from SciPy's stats module. This allows users to work with the F-distribution in their Python code.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_f.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import f\n```\n\n----------------------------------------\n\nTITLE: kendalltau p-value computation\nDESCRIPTION: The `scipy.stats.kendalltau` function now computes the correct p-value when the input contains ties, aligning with the results from `scipy.stats.mstats.kendalltau` and R. If the input does not contain ties, the output remains consistent with the previous implementation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"`scipy.stats.kendalltau` now computes the correct p-value in case the\\ninput contains ties. The p-value is also identical to that computed by\\n`scipy.stats.mstats.kendalltau` and by R. If the input does not\\ncontain ties there is no change w.r.t. the previous implementation.\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Backward and Forward Differences with scipy.ndimage\nDESCRIPTION: Shows how to use correlate1d function to calculate backward and forward differences. It demonstrates the effect of the origin parameter on the result.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> a = [0, 0, 1, 1, 1, 0, 0]\n>>> correlate1d(a, [-1, 1])               # backward difference\narray([ 0,  0,  1,  0,  0, -1,  0])\n>>> correlate1d(a, [-1, 1], origin = -1)  # forward difference\narray([ 0,  1,  0,  0, -1,  0,  0])\n>>> correlate1d(a, [0, -1, 1])\narray([ 0,  1,  0,  0, -1,  0,  0])\n```\n\n----------------------------------------\n\nTITLE: Switching BLAS Libraries for SciPy Development Builds\nDESCRIPTION: Shows how to switch between BLAS implementations when building SciPy from source using the dev.py build system, which is useful for testing whether an issue is related to a specific BLAS implementation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ mamba env create -f environment.yml\n$ mamba activate scipy-dev\n$ mamba install \"libblas=*=*netlib\"  # necessary, we need to build against blas/lapack\n$ python dev.py build -C-Dblas=blas -C-Dlapack=lapack -C-Duse-g77-abi=true\n$ python dev.py test -s linalg  # run tests to verify\n$ mamba install \"libblas=*=*mkl\"\n$ python dev.py test -s linalg\n$ mamba install \"libblas=*=*openblas\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data with Matplotlib in Python\nDESCRIPTION: This snippet uses Matplotlib to plot a scatter plot of total collagen versus free proline, labeling the axes for clarity. Matplotlib is a prerequisite library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(8, 5))\nax.plot(x, y, '.')\nax.set_xlabel(\"total collagen (mg/g)\")\nax.set_ylabel(\"free proline (μ mole/g)\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Updating KDTree Query Method in Python\nDESCRIPTION: Deprecates calling KDTree.query with k=None to find all neighbors. Users should use KDTree.query_ball_point instead.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.6.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Deprecated:\nKDTree.query(x, k=None)\n\n# Use instead:\nKDTree.query_ball_point(x, r)\n```\n\n----------------------------------------\n\nTITLE: Plotting Analog Filter Frequency Response in Python\nDESCRIPTION: This code snippet plots the frequency response of an analog IIR filter designed with SciPy's signal.iirdesign function. Dependencies include the SciPy, NumPy, and Matplotlib libraries. Key parameters include the passband and stopband frequencies. The input of this code block is the filter coefficients, and it outputs a frequency response plot showing amplitude vs. frequency.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n>>> import numpy as np\n>>> import scipy.signal as signal\n>>> import matplotlib.pyplot as plt\n\n>>> b, a = signal.iirdesign(wp=100, ws=200, gpass=2.0, gstop=40., analog=True)\n>>> w, h = signal.freqs(b, a)\n\n>>> plt.title('Analog filter frequency response')\n>>> plt.plot(w, 20*np.log10(np.abs(h)))\n>>> plt.ylabel('Amplitude Response [dB]')\n>>> plt.xlabel('Frequency')\n>>> plt.grid()\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D Meshgrid for Interpolation\nDESCRIPTION: This code utilizes NumPy's mgrid function to define a 2D mesh grid, which is essential for generating a grid of points over which the interpolation will take place. It's a common setup for creating structured data surfaces.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> x_edges, y_edges = np.mgrid[-1:1:21j, -1:1:21j]\n```\n\n----------------------------------------\n\nTITLE: Deprecating Cython API Functions\nDESCRIPTION: Shows how to deprecate a public Cython API function using scipy._lib.deprecation.deprecate_cython_api, which will emit DeprecationWarning when the deprecated function is imported.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/public_cython_api.rst#2025-04-14_snippet_1\n\nLANGUAGE: cython\nCODE:\n```\n# scipy/something/foo.pyx\ncdef public int somefunc():\n    return 42\n\nfrom scipy._lib.deprecation import deprecate_cython_api\nimport scipy.something.foo as mod\ndeprecate_cython_api(mod, \"somefunc\", new_name=\"scipy.something.newfunc\",\n                     message=\"Deprecated in Scipy 1.5.0\")\ndel deprecate_cython_api, mod\n```\n\n----------------------------------------\n\nTITLE: Creating a Batch of Matrices in Python\nDESCRIPTION: This code creates a batch of 3x3 matrices using a list comprehension, where each matrix is a multiple of the identity matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbatch = [i*np.eye(3) for i in range(1, 4)]\nbatch\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteAliasUrn with Domain Specification in SciPy\nDESCRIPTION: This snippet illustrates how to initialize a DiscreteAliasUrn object and specify the domain of the distribution using the ``domain`` parameter. This relocates the index of the probability vector. The example uses a probability vector `pv`, defines a domain `(10, 13)`, and then creates a `DiscreteAliasUrn` object with these parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dau.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> rng = DiscreteAliasUrn(pv, domain=(10, 13), random_state=urng)\n>>> rng.rvs()\n12    # may vary\n```\n\n----------------------------------------\n\nTITLE: Calculating Negative Log-Likelihood (NLLF) with weibull_min\nDESCRIPTION: This snippet calculates the negative log-likelihood (NLLF) of the data given the parameters of the Weibull distribution. It uses the `nnlf` method of the `stats.weibull_min` object to compute the NLLF. The input `(c, loc, scale)` represents the parameters and `data` is the dataset.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n\"stats.weibull_min.nnlf((c, loc, scale), data)\"\n```\n\n----------------------------------------\n\nTITLE: Querying SciPy Build Configuration with show_config\nDESCRIPTION: Shows how to use scipy.show_config to introspect the build configuration of an installed package, particularly to identify BLAS and LAPACK implementation details.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> blas_dep = scipy.show_config(mode='dicts')['Build Dependencies']['blas']\n>>> for key in blas_dep:\n...     print(f\"{key}:  {blas_dep[key]}\")\n...\nname:  openblas\nfound:  True\nversion:  0.3.23\ndetection method:  pkgconfig\ninclude directory:  /home/user/miniforge/envs/scipy-dev/include\nlib directory:  /home/user/miniforge/envs/scipy-dev/lib\nopenblas configuration:  USE_64BITINT=0 DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK=0 NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP=0 PRESCOTT MAX_THREADS=128\npc file directory:  /home/user/miniforge/envs/scipy-dev/lib/pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Verifying CDF Integration Error in Python\nDESCRIPTION: This code checks if the integration error in computing the CDF using NumericalInversePolynomial is within acceptable limits. It compares the maximum error with a threshold based on the normalization constant of the standard normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n>>> x = np.linspace(-10, 10, num=100_000)\n>>> x_error = np.abs(dist.cdf(x) - rng.cdf(x))\n>>> x_error.max()\n4.506062190046123e-12\n>>> I0 = np.sqrt(2*np.pi)\n>>> max_integration_error = 0.05 * I0 * 1e-10\n>>> x_error.max() <= max_integration_error\nTrue\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy IO Module in Python\nDESCRIPTION: Demonstrates how to import the SciPy IO module and assign it an alias for convenience.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import scipy.io as sio\n```\n\n----------------------------------------\n\nTITLE: Using New Statistical Functions and Distributions in SciPy\nDESCRIPTION: New statistical functions and distributions added to scipy.stats, including multiscale_graphcorr for independence testing, generalized inverse Gaussian distribution, and improvements to existing functions like binned_statistic_dd and hmean.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.4.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.multiscale_graphcorr\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.geninvgauss\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.binned_statistic_dd\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.hmean\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.betabinom\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.zscore\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.circmean\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.circstd\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.circvar\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.entropy\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.gaussian_kde.resample\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.kendalltau\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.truncnorm\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Mass Function for Negative Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the probability mass function p(k;M,n,r) for the Negative Hypergeometric Distribution. It expresses the probability of picking k red balls when sampling until r blue balls are drawn from a box with M total balls, of which n are red.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nhypergeom.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\np(k;M,n,r) & = & \\frac{\\left(\\begin{array}{c} k+r-1\\\\ k\\end{array}\\right)\\left(\\begin{array}{c} M-r-k\\\\ n-k\\end{array}\\right)}{\\left(\\begin{array}{c} M\\\\ n\\end{array}\\right)}\\quad 0 \\leq k \\leq M-n,\n```\n\n----------------------------------------\n\nTITLE: New Meson Build System Commands\nDESCRIPTION: Equivalent build and development commands using the new Meson and meson-python based build system. Includes commands for testing, development builds, and package installation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/distutils_equivalents.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython dev.py\npip install -e . --no-build-isolation\npython -m build --no-isolation\npip install dist/scipy*.whl\npip install .\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation using NumPy\nDESCRIPTION: Demonstrates basic linear interpolation using numpy.interp with cos function data plotted using matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/1D.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nx = np.linspace(0, 10, num=11)\ny = np.cos(-x**2 / 9.0)\nxnew = np.linspace(0, 10, num=1001)\nynew = np.interp(xnew, x, y)\n\nimport matplotlib.pyplot as plt\nplt.plot(xnew, ynew, '-', label='linear interp')\nplt.plot(x, y, 'o', label='data')\nplt.legend(loc='best')\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Probability Density Function with Distribution Parameters\nDESCRIPTION: Computes the probability density function (pdf) at a given point x using specified location and scale parameters with SciPy stats module. Requires prior initialization of parameters and the stats module. Outputs the pdf value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nx, loc, scale = 1., 0., 1.\ndist.pdf(x, loc, scale)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Double Exponential Distribution Entropy in LaTeX\nDESCRIPTION: This LaTeX code defines the entropy formula for the Log Double Exponential Distribution. It expresses the entropy as a function of the shape parameter c and the mathematical constant e.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loglaplace.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\nh\\left[X\\right]=\\log\\left(\\frac{2e}{c}\\right)\n```\n\n----------------------------------------\n\nTITLE: Chi-Square Contingency Test with SciPy\nDESCRIPTION: This code snippet demonstrates how to perform a chi-square test of independence using the `scipy.stats.chi2_contingency` function. It takes a contingency table as input and returns the test statistic, p-value, degrees of freedom, and expected frequencies. The code initializes a NumPy array representing the contingency table for aspirin usage and ischemic stroke, then calculates and prints the chi-square test statistic.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_chi2_contingency.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy.stats import chi2_contingency\ntable = np.array([[176, 230], [21035, 21018]])\nres = chi2_contingency(table)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Using Quasi-Monte Carlo Generator Classes\nDESCRIPTION: The QMC module provides several generator classes for Quasi-Monte Carlo sampling including Sobol, Halton and Latin Hypercube designs. These engines can be used for low-discrepancy sequences and specialized sampling.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.7.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats.qmc import Sobol, Halton, LatinHypercube\n\n# Example usage\nsobol = Sobol()  # Scrambled by default\nhalton = Halton()  # Scrambled by default \nlhs = LatinHypercube()\n```\n\n----------------------------------------\n\nTITLE: Implementing Chi-squared Distribution in Python using SciPy\nDESCRIPTION: This code snippet shows how to use the chi-squared distribution from SciPy's stats module. The chi2 function can be used to create instances of the distribution with specified degrees of freedom.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_chi2.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.chi2\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK Double Precision General Matrix Operations in C\nDESCRIPTION: This snippet declares LAPACK routines for operations on general matrices using double precision. It includes functions for solving linear systems, computing eigenvalues and eigenvectors, and performing matrix transformations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nvoid dtgevc(char *side, char *howmny, bint *select, int *n, d *s, int *lds, d *p, int *ldp, d *vl, int *ldvl, d *vr, int *ldvr, int *mm, int *m, d *work, int *info)\nvoid dtgex2(bint *wantq, bint *wantz, int *n, d *a, int *lda, d *b, int *ldb, d *q, int *ldq, d *z, int *ldz, int *j1, int *n1, int *n2, d *work, int *lwork, int *info)\nvoid dtgexc(bint *wantq, bint *wantz, int *n, d *a, int *lda, d *b, int *ldb, d *q, int *ldq, d *z, int *ldz, int *ifst, int *ilst, d *work, int *lwork, int *info)\nvoid dtgsen(int *ijob, bint *wantq, bint *wantz, bint *select, int *n, d *a, int *lda, d *b, int *ldb, d *alphar, d *alphai, d *beta, d *q, int *ldq, d *z, int *ldz, int *m, d *pl, d *pr, d *dif, d *work, int *lwork, int *iwork, int *liwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Using numpy.random.Generator with Explicit Seed\nDESCRIPTION: Example showing how to create a seeded random number generator in SciPy documentation. This approach allows for reproducible random numbers when needed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> rng = np.random.default_rng(102524723947864966825913730119128190984)\n>>> sample = rng.random(10)\n```\n\n----------------------------------------\n\nTITLE: Adding Dirichlet Distribution - SciPy Python\nDESCRIPTION: The addition of the Dirichlet multivariate distribution in `scipy.stats` enhances the statistical functionalities available in SciPy, providing users with the tools to work with this important family of probability distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.dirichlet\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Determinants of Matrix Batch Using SciPy's Batched Operation\nDESCRIPTION: This snippet shows how to calculate determinants for a batch of matrices in a single function call using SciPy's batched linear algebra operation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlinalg.det(batch)\n```\n\n----------------------------------------\n\nTITLE: Outputting Two-Sided P-Value\nDESCRIPTION: This snippet returns the computed two-sided p-value obtained from the correlation analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue  # two-sided p-value\n```\n\n----------------------------------------\n\nTITLE: Generating Knots for Smoothing Splines\nDESCRIPTION: Shows how to use generate_knots function to create knot vectors for smoothing splines. The example demonstrates the iterative process of knot generation for a polynomial function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.interpolate import generate_knots\nx = np.arange(7)\ny = x**4\nlist(generate_knots(x, y, s=1))\n```\n\n----------------------------------------\n\nTITLE: Referencing Newton-CG Method in SciPy's optimize.minimize Function\nDESCRIPTION: This snippet shows how to reference the Newton-CG method in SciPy's documentation. It specifies the function, implementation, and method name for the Newton-CG optimization algorithm.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-newtoncg.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._optimize._minimize_newtoncg\n   :method: Newton-CG\n```\n\n----------------------------------------\n\nTITLE: New SciPy Special Functions\nDESCRIPTION: List of new Legendre function implementations added to scipy.special with improved interface.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.legendre_p\nscipy.special.legendre_p_all\nscipy.special.assoc_legendre_p\nscipy.special.assoc_legendre_p_all\nscipy.special.sph_harm_y\nscipy.special.sph_harm_y_all\nscipy.special.sph_legendre_p\nscipy.special.sph_legendre_p_all\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for SciPy Development\nDESCRIPTION: Commands to clone the SciPy repository, initialize git submodules, and set up remote tracking. This setup is required for contributing to the SciPy project.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/dev_quickstart.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:YOURUSERNAME/scipy.git scipy\ncd scipy\ngit submodule update --init\ngit remote add upstream https://github.com/scipy/scipy.git\n```\n\n----------------------------------------\n\nTITLE: Handling Array-Valued Parameters in New API Sampling\nDESCRIPTION: Demonstrates random sample generation with array-valued parameters in the new API, where parameter array shapes are handled automatically without needing to include them in the shape specification.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nY = stats.Normal(mu = [0, 1])\nY.sample(shape=(3, 4)).shape  # the sample has shape (3, 4); each element is of shape (2,)\n```\n\n----------------------------------------\n\nTITLE: Array API Standard Usage\nDESCRIPTION: Example of enabling Array API support through environment variable to use alternative array libraries.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nSCIPY_ARRAY_API=1\n```\n\n----------------------------------------\n\nTITLE: Transforming Weibull to Inverse Weibull in SciPy\nDESCRIPTION: This snippet demonstrates how to create an inverse Weibull distribution by taking the reciprocal of a Weibull-distributed random variable. It initializes a Weibull distribution, calculates its reciprocal, and then plots the probability density function (PDF) of the transformed variable, comparing it with SciPy's built-in `invweibull` distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nc = 10.6\n\nX = Weibull(c=10.6)  \nY = 1 / X  # compare to `invweibull`\nY.plot()\n\nx = np.linspace(0.8, 2.05, 300)\nplt.plot(x, stats.invweibull(c=c).pdf(x), '--')\nplt.legend(['`1 / X`', '`invweibull`'])\nplt.title(\"Inverse Weibull PDF\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Loading and Filtering Word List in Python\nDESCRIPTION: Loads words from a dictionary file and filters for 3-letter lowercase words containing only alphabetic characters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/csgraph.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith open('/usr/share/dict/words') as f:\n   word_list = f.readlines()\nword_list = map(str.strip, word_list)\n\nword_list = [word for word in word_list if len(word) == 3]\nword_list = [word for word in word_list if word[0].islower()]\nword_list = [word for word in word_list if word.isalpha()]\nword_list = list(map(str.lower, word_list))\nlen(word_list)\n```\n\n----------------------------------------\n\nTITLE: Defining quadratic_assignment function with 'faq' method in SciPy's optimize module\nDESCRIPTION: This code snippet defines the quadratic_assignment function with the 'faq' method parameter. It links the public API to the implementation in the _qap._quadratic_assignment_faq module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.qap-faq.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.quadratic_assignment\n   :impl: scipy.optimize._qap._quadratic_assignment_faq\n   :method: faq\n```\n\n----------------------------------------\n\nTITLE: Calculating Matrix Exponential for Single Matrix in Python\nDESCRIPTION: This code demonstrates how to calculate the matrix exponential of a single 3x3 identity matrix using SciPy's linalg.expm function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nA = np.eye(3)\nlinalg.expm(A)\n```\n\n----------------------------------------\n\nTITLE: Initializing NumericalInversePolynomial for Standard Normal Distribution in Python\nDESCRIPTION: This code snippet demonstrates how to initialize the NumericalInversePolynomial generator to sample from a standard normal distribution. It defines a custom class StandardNormal with a pdf method and then creates an instance of NumericalInversePolynomial with this distribution and a random number generator.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.stats.sampling import NumericalInversePolynomial\n>>> class StandardNormal:\n...     def pdf(self, x):\n...         return np.exp(-0.5 * x*x)\n...\n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> rng = NumericalInversePolynomial(dist, random_state=urng)\n```\n\n----------------------------------------\n\nTITLE: Using Frozen Distribution Methods in SciPy\nDESCRIPTION: Demonstrates calling statistical methods on a frozen distribution without needing to respecify the parameters each time.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> rv.mean(), rv.std()\n(2.0, 2.0)\n```\n\n----------------------------------------\n\nTITLE: Handling the Construction and Indexing of Sparse Arrays in Python\nDESCRIPTION: This snippet provides detailed examples of constructing and indexing sparse arrays, illustrating how 1D inputs lead to different shaped outputs in sparse representations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n-  Construction using 1d-list of values:\n\n   -  ``csr_array([1, 2, 3]).shape == (3,)`` 1D input makes a 1D array.\n   -  ``csr_matrix([1, 2, 3]).shape == (1, 3)`` 1D input makes a 2D matrix.\n```\n\n----------------------------------------\n\nTITLE: Evaluating Inverse CDF with TDR in SciPy\nDESCRIPTION: This snippet shows how to evaluate the inverse CDF (PPF) using the hat distribution generated by TDR, illustrating its functionality with numerical examples.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_tdr.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nprint(rng.ppf_hat(0.5))\nprint(norm.ppf(0.5))\nu = np.linspace(0, 1, num=10)\nprint(rng.ppf_hat(u))\nprint(norm.ppf(u))\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy of Gumbel Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the entropy (h[X]) for the Gumbel distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_r.rst#2025-04-14_snippet_3\n\nLANGUAGE: tex\nCODE:\n```\nh\\left[X\\right]\\approx1.0608407169541684911\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for SciPy Development (Linux/macOS)\nDESCRIPTION: Commands to create and activate a virtual environment for SciPy development on Linux or macOS systems.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteGuideTable with Domain Adjustment\nDESCRIPTION: Initializes a DiscreteGuideTable instance with a specific domain offset for the probability vector, allowing for relocation of sampled values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dgt.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> rng = DiscreteGuideTable(pv, random_state=urng, domain=(10, 13))\n>>> rng.rvs()\n10   # may vary\n```\n\n----------------------------------------\n\nTITLE: Extracting P-Value from Permutation Test\nDESCRIPTION: This snippet retrieves the p-value from the permutation test result, which provides an empirical measure of statistical significance under permutation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nref.pvalue  # randomized test p-value\n```\n\n----------------------------------------\n\nTITLE: Setting Mandala Parameters and Generating Figure in Python\nDESCRIPTION: This snippet sets the parameters for the mandala function (iterations, points, and radius) and calls the function to generate and display the figure using matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Modify the following parameters in order to get different figures\nn_iter = 3\nn_points = 6\nradius = 4\n\nfig = mandala(n_iter, n_points, radius)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Override Distribution Function Calculations Using Method Argument\nDESCRIPTION: The snippets demonstrate overriding predefined computation methods for the complementary CDF using the `method` argument. It uses the framework `scipy.stats` for distribution customizations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_66\n\nLANGUAGE: ipython3\nCODE:\n```\nGaussHyper = stats.make_distribution(stats.gausshyper)\nX = GaussHyper(a=a, b=b, c=c, z=z)\n```\n\nLANGUAGE: ipython3\nCODE:\n```\nX.ccdf(x, method='quadrature') == integrate.tanhsinh(X.pdf, x, 1).integral\n```\n\nLANGUAGE: ipython3\nCODE:\n```\nX.ccdf(x, method='complement') == (1 - integrate.tanhsinh(X.pdf, 0, x).integral)\n```\n\nLANGUAGE: ipython3\nCODE:\n```\nX.ccdf(x, method='logexp') == np.exp(integrate.tanhsinh(lambda x: X.logpdf(x), x, 1, log=True).integral)\n```\n\n----------------------------------------\n\nTITLE: Defining Power Normal Distribution Moments in LaTeX\nDESCRIPTION: This LaTeX equation defines the n-th moment of the Power Normal Distribution using an integral expression.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powernorm.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\mu_{n}^{\\prime}=\\left(-1\\right)^{n}\\int_{0}^{1}\\left[\\Phi^{-1}\\left(y^{1/c}\\right)\\right]^{n}dy\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy Modules Safely in Benchmarks\nDESCRIPTION: Example of how to safely import SciPy modules in benchmark files to ensure compatibility with older versions of SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/benchmarks/README.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom .common import safe_import\n\nwith safe_import():\n    from scipy.sparse.linalg import onenormest\n```\n\n----------------------------------------\n\nTITLE: Visualizing Chi-Square Null Distribution with Matplotlib\nDESCRIPTION: Creating a visualization of the chi-square null distribution for the Fligner-Killeen test, demonstrating the probability density function and statistical parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_fligner.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nk = 3  # number of samples\ndist = stats.chi2(df=k-1)\nval = np.linspace(0, 8, 100)\npdf = dist.pdf(val)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef plot(ax):  # we'll reuse this\n    ax.plot(val, pdf, color='C0')\n    ax.set_title(\"Fligner Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n    ax.set_xlim(0, 8)\n    ax.set_ylim(0, 0.5)\n\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Setting breakpoints and debugging SciPy with GDB and PDB\nDESCRIPTION: This code snippet demonstrates a debugging session that combines GDB and PDB to trace execution from Python through to the underlying Fortran/C libraries. It shows how to set breakpoints in both environments, inspect variables, and view the call stack.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) b dpotrf_     # this adds a C breakpoint (type \"y\" below)\nFunction \"dpotrf_\" not defined.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (dpotrf_) pending.\n(gdb) run    # run the python script\n...\n> /home/br/temp/chol/chol.py(12)<module>()\n-> linalg.cholesky(a)   # execution stopped at the python breakpoint\n(Pdb) p a.shape  # ... inspect the python state here\n(40, 40)\n(Pdb) c     # continue execution until the C breakpoint\n\nThread 1 \"python\" hit Breakpoint 1, 0x00007ffff4c48820 in dpotrf_ ()\n   from /home/br/miniforge/envs/scipy-dev/lib/python3.10/site-packages/numpy/core/../../../../libcblas.so.3\n(gdb) s     # step through the C function\nSingle stepping until exit from function dpotrf_,\nwhich has no line number information.\nf2py_rout__flapack_dpotrf (capi_self=<optimized out>, capi_args=<optimized out>, \n    capi_keywds=<optimized out>, f2py_func=0x7ffff4c48820 <dpotrf_>)\n    at scipy/linalg/_flapackmodule.c:63281\n....\n(gdb) p lda    # inspect values of C variables\n$1 = 40\n\n# print out the C backtrace\n(gdb) bt\n#0  0x00007ffff3056b1e in f2py_rout.flapack_dpotrf ()\n   from /path/to/site-packages/scipy/linalg/_flapack.cpython-311-x86_64-linux-gnu.so\n#1  0x0000555555734323 in _PyObject_MakeTpCall (tstate=0x555555ad0558 <_PyRuntime+166328>,\n    callable=<fortran at remote 0x7ffff40ffc00>, args=<optimized out>, nargs=1,\n    keywords=('lower', 'overwrite_a', 'clean'))\n    at /usr/local/src/conda/python-3.11.8/Objects/call.c:214\n...\n```\n\n----------------------------------------\n\nTITLE: Transfer Function Representation in SciPy\nDESCRIPTION: Mathematical representation of analog and discrete-time transfer functions using numerator/denominator coefficients in positive powers form.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_11\n\nLANGUAGE: math\nCODE:\n```\nH(s) = \\frac{b_0 s^M + b_1 s^{(M-1)} + \\cdots + b_M}{a_0 s^N + a_1 s^{(N-1)} + \\cdots + a_N}\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK Double Precision Symmetric Matrix Operations in C\nDESCRIPTION: This snippet declares LAPACK routines for various operations on symmetric matrices using double precision. It includes functions for solving linear systems, computing condition numbers, and performing matrix factorizations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nvoid dsyrfs(char *uplo, int *n, int *nrhs, d *a, int *lda, d *af, int *ldaf, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dsysv(char *uplo, int *n, int *nrhs, d *a, int *lda, int *ipiv, d *b, int *ldb, d *work, int *lwork, int *info)\nvoid dsysvx(char *fact, char *uplo, int *n, int *nrhs, d *a, int *lda, d *af, int *ldaf, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *lwork, int *iwork, int *info)\nvoid dsyswapr(char *uplo, int *n, d *a, int *lda, int *i1, int *i2)\n```\n\n----------------------------------------\n\nTITLE: Measuring Performance of Computations Using Timeit\nDESCRIPTION: These snippets benchmark the execution time of CDF computations using the new and old infrastructures with `%timeit`. Dependencies include the IPython magic function and SciPy's `stats` package.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_67\n\nLANGUAGE: ipython3\nCODE:\n```\n%timeit X.cdf(x)  # new infrastructure\n```\n\nLANGUAGE: ipython3\nCODE:\n```\n%timeit stats.gausshyper.cdf(x, a, b, c, z)  # old infrastructure\n```\n\n----------------------------------------\n\nTITLE: LAPACK Issue Reproducer in Fortran\nDESCRIPTION: Fortran code example demonstrating how to reproduce a LAPACK issue with direct calls to LAPACK functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_13\n\nLANGUAGE: Fortran\nCODE:\n```\n$ gfortran ggev_repro_gh_11577.f90 \\\n  -I/$PWD/../flexiblas-setup/built-libs/include/ \\\n  -L$PWD/../flexiblas-setup/built-libs/lib -lopenblas\n$ ./a.out\n```\n\n----------------------------------------\n\nTITLE: Implementing nan_policy with axis Parameter in Python\nDESCRIPTION: Demonstrates how to implement nan_policy in conjunction with an axis parameter for functions that reduce arrays along a specified axis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/nan_policy.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfunc([[  1, nan,   3,   4],\n      [  2,  -3,   8,   2],\n      [nan,   7, nan,   8],\n      [nan, nan, nan, nan]], nan_policy='omit', axis=-1)\n```\n\n----------------------------------------\n\nTITLE: find_peaks_cwt return type change\nDESCRIPTION: The `scipy.signal.find_peaks_cwt` function now returns a NumPy array instead of a list. Code that previously expected a list should be updated to work with a NumPy array.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"The function `scipy.signal.find_peaks_cwt` now returns an array instead of\\na list.\"\n```\n\n----------------------------------------\n\nTITLE: Using Different Kurtosis Conventions in New API\nDESCRIPTION: Shows how to calculate kurtosis using different conventions (excess and non-excess) with the new kurtosis method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nstats.Normal().kurtosis(convention='excess'), stats.Normal().kurtosis(convention='non-excess')\n```\n\n----------------------------------------\n\nTITLE: Moment Generating Function Definition in LaTeX\nDESCRIPTION: Definition of the moment generating function M(t) for the hyperbolic secant distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nM\\left(t\\right)=\\sec\\left(\\frac{\\pi}{2}t\\right)\n```\n\n----------------------------------------\n\nTITLE: Special Distribution Sampling with QMC\nDESCRIPTION: Special QMC samplers are provided for multinomial and multivariate normal distributions that can use any of the base QMC engines.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.7.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats.qmc import MultinomialQMC, MultivariateNormalQMC\n\n# Example usage\nmultinom_sampler = MultinomialQMC(engine=Sobol())\nmvn_sampler = MultivariateNormalQMC(engine=Halton())\n```\n\n----------------------------------------\n\nTITLE: Bivariate KDE Estimation - Python\nDESCRIPTION: This snippet demonstrates generating correlated bivariate data and applying kernel density estimation to visualize the results in a 2D plot.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/kernel_density_estimation.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef measure(n):\n    \"\"\"Measurement model, return two coupled measurements.\"\"\"\n    m1 = np.random.normal(size=n)\n    m2 = np.random.normal(scale=0.5, size=n)\n    return m1+m2, m1-m2\n\nm1, m2 = measure(2000)\nxmin = m1.min()\nxmax = m1.max()\nymin = m2.min()\nymax = m2.max()\n\nX, Y = np.mgrid[xmin:xmax:100j, ymin:ymax:100j]\npositions = np.vstack([X.ravel(), Y.ravel()])\nvalues = np.vstack([m1, m2])\nkernel = stats.gaussian_kde(values)\nZ = np.reshape(kernel.evaluate(positions).T, X.shape)\n\nfig = plt.figure(figsize=(8, 6))\nax = fig.add_subplot(111)\n\nax.imshow(np.rot90(Z), cmap=plt.cm.gist_earth_r,\n          extent=[xmin, xmax, ymin, ymax])\nax.plot(m1, m2, 'k.', markersize=2)\n\nax.set_xlim([xmin, xmax])\nax.set_ylim([ymin, ymax])\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: STFT Plot Configuration and Visualization - Python\nDESCRIPTION: Final part of the STFT comparison example showing plot configuration, extent calculation, and visualization settings for comparing the two implementations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n>>> dt2 = (nperseg-noverlap) / fs / 2  # equals SFT.delta_t / 2\n>>> df2 = fs / nperseg / 2  # equals SFT.delta_f / 2\n>>> extent0 = (-dt2, t0[-1] + dt2, f0[0] - df2, f0[-1] - df2)\n>>> extent1 = SFT.extent(N, center_bins=True)\n\n>>> kw = dict(origin='lower', aspect='auto', cmap='viridis')\n>>> im1a = axx[0].imshow(abs(Sz0), extent=extent0, **kw)\n>>> im1b = axx[1].imshow(abs(Sz1), extent=extent1, **kw)\n>>> fig1.colorbar(im1b, ax=axx, label=\"Magnitude $|S_z(t, f)|$\")\n>>> _ = fig1.supylabel(r\"Frequency $f$ in Hertz ($\\Delta f = %g\\,$Hz)\" %\n...                    SFT.delta_f, x=0.08, y=0.5, fontsize='medium')\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Eigenvalue Problem Functions (LAPACK)\nDESCRIPTION: Function declarations for eigenvalue computations, including Hessenberg reduction, Schur decomposition, and inverse iteration methods for computing eigenvectors.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid dhgeqz(char *job, char *compq, char *compz, int *n, int *ilo, int *ihi, d *h, int *ldh, d *t, int *ldt, d *alphar, d *alphai, d *beta, d *q, int *ldq, d *z, int *ldz, d *work, int *lwork, int *info);\nvoid dhsein(char *side, char *eigsrc, char *initv, bint *select, int *n, d *h, int *ldh, d *wr, d *wi, d *vl, int *ldvl, d *vr, int *ldvr, int *mm, int *m, d *work, int *ifaill, int *ifailr, int *info);\nvoid dhseqr(char *job, char *compz, int *n, int *ilo, int *ihi, d *h, int *ldh, d *wr, d *wi, d *z, int *ldz, d *work, int *lwork, int *info);\n```\n\n----------------------------------------\n\nTITLE: Calculating Eigenvalues and Eigenvectors for Single Matrix\nDESCRIPTION: This code demonstrates how to calculate eigenvalues and eigenvectors for a single matrix using SciPy's linalg.eig function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nevals, evecs = linalg.eig(A)\nevals.shape, evecs.shape\n```\n\n----------------------------------------\n\nTITLE: JAX JIT Compiler Test Setup\nDESCRIPTION: Example showing how to configure tests to work with JAX's JIT compiler by using lazy_xp_function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy._lib._lazy_testing import lazy_xp_function\nfrom scipy.mymodule import toto\n\nlazy_xp_function(toto)\n\ndef test_toto(xp):\n    a = xp.asarray([1, 2, 3])\n    b = xp.asarray([0, 2, 5])\n    xp_assert_close(toto(a, b), a)\n```\n\n----------------------------------------\n\nTITLE: Using quadratic_assignment with 2opt method in SciPy\nDESCRIPTION: Shows how to call the quadratic_assignment function with the '2opt' method. This method is implemented in the _quadratic_assignment_2opt function within the scipy.optimize._qap module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.qap-2opt.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.quadratic_assignment(method='2opt')\n```\n\n----------------------------------------\n\nTITLE: Linear Least Squares Optimization with Constraints\nDESCRIPTION: The `scipy.optimize.lsq_linear` function provides a method for linear least squares optimization with constraints, and implements both a trust-region method and the BVLS algorithm. It is essential for linear regression tasks with bounds.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.lsq_linear\n```\n\n----------------------------------------\n\nTITLE: Comparing CubicSpline boundary conditions and extrapolation in Python\nDESCRIPTION: This code creates and compares CubicSpline interpolations with different boundary conditions ('not-a-knot', 'natural', 'clamped'). It plots the splines and their derivatives to illustrate the extrapolation behavior.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/extrapolation_examples.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import CubicSpline\n\nxs = [1, 2, 3, 4, 5, 6, 7, 8]\nys = [4.5, 3.6, 1.6, 0.0, -3.3, -3.1, -1.8, -1.7]\n\nnotaknot = CubicSpline(xs, ys, bc_type='not-a-knot')\nnatural = CubicSpline(xs, ys, bc_type='natural')\nclamped = CubicSpline(xs, ys, bc_type='clamped')\nxnew = np.linspace(min(xs) - 4, max(xs) + 4, 101)\n\nsplines = [notaknot, natural, clamped]\ntitles = ['not-a-knot', 'natural', 'clamped']\n\nfig, axs = plt.subplots(3, 3, figsize=(12, 12))\nfor i in [0, 1, 2]:\n    for j, spline, title in zip(range(3), splines, titles):\n        axs[i, j].plot(xs, spline(xs, nu=i),'o')\n        axs[i, j].plot(xnew, spline(xnew, nu=i),'-')\n        axs[i, j].set_title(f'{title}, deriv={i}')\n        \nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: DST and IDST Transform Examples\nDESCRIPTION: Demonstrates the relationship between DST and IDST transforms using different types and normalizations. Shows how the transforms are inverses of each other and the effect of normalization on scaling.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.fft import dst, idst\nx = np.array([1.0, 2.0, 1.0, -1.0, 1.5])\n\n# DST-II and DST-III inverse relationship\ndst(dst(x, type=2, norm='ortho'), type=3, norm='ortho')\ndst(dst(x, type=2), type=3)\nidst(dst(x, type=2), type=2)\n\n# DST-I inverse relationship\ndst(dst(x, type=1, norm='ortho'), type=1, norm='ortho')\n```\n\n----------------------------------------\n\nTITLE: Initializing NumPy array\nDESCRIPTION: This snippet initializes a NumPy array `x` with weight measurements.  The array represents sample data to be tested for normality using `scipy.stats.normaltest`.  No dependencies beyond NumPy are needed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nx = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236])\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Normal Distribution Parameters\nDESCRIPTION: Calculates grid points, probabilities, and bounds for a truncated normal distribution using NumPy and SciPy stats\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> npointsf = float(npoints)\n>>> nbound = 4   # bounds for the truncated normal\n>>> normbound = (1+1/npointsf) * nbound   # actual bounds of truncated normal\n>>> grid = np.arange(-npointsh, npointsh+2, 1)   # integer grid\n>>> gridlimitsnorm = (grid-0.5) / npointsh * nbound   # bin limits for the truncnorm\n>>> gridlimits = grid - 0.5   # used later in the analysis\n>>> grid = grid[:-1]\n>>> probs = np.diff(stats.truncnorm.cdf(gridlimitsnorm, -normbound, normbound))\n>>> gridint = grid\n```\n\n----------------------------------------\n\nTITLE: SciPy Implementation Reference\nDESCRIPTION: Reference to the SciPy implementation of the left-skewed Lévy distribution function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_levy_l.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.levy_l\n```\n\n----------------------------------------\n\nTITLE: Wiener Filter Implementation\nDESCRIPTION: Mathematical formulation of the Wiener filter for image denoising based on local mean and variance estimates.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_13\n\nLANGUAGE: math\nCODE:\n```\ny=\\left\\{ \\begin{array}{cc} \\frac{\\sigma^{2}}{\\sigma_{x}^{2}}m_{x}+\\left(1-\\frac{\\sigma^{2}}{\\sigma_{x}^{2}}\\right)x & \\sigma_{x}^{2}\\geq\\sigma^{2},\\\\ m_{x} & \\sigma_{x}^{2}<\\sigma^{2},\\end{array}\\right.\n```\n\n----------------------------------------\n\nTITLE: Binomial Distribution Probability Calculation\nDESCRIPTION: Uses SciPy's binomial cumulative distribution function to calculate the exact probability of a specific number of coin flip outcomes\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/resampling.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import binom\nprob = binom.cdf(x, n, p)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Batch Shape Broadcasting in Linear Algebra Operations\nDESCRIPTION: This snippet shows how batch shapes are broadcasted in linear algebra operations when input shapes are not identical, following NumPy's broadcasting rules.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nrng = np.random.default_rng(2859239482)\n\n# Define input core shapes\nm = 3\ncore_shape_a = (m, m)\ncore_shape_b = (m, m)\n\n# Define broadcastable batch shapes\nbatch_shape_a = (2, 4)\nbatch_shape_b = (5, 1, 4)\n\n# Define output core shapes\ncore_shape_evals = (m,)\ncore_shape_evecs = (m, m)\n\n# Predict shapes of outputs: broadcast batch shapes,\n# and append output core shapes\nnet_batch_shape = np.broadcast_shapes(batch_shape_a, batch_shape_b)\noutput_shape_evals = net_batch_shape + core_shape_evals\noutput_shape_evecs = net_batch_shape + core_shape_evecs\noutput_shape_evals, output_shape_evecs\n```\n\n----------------------------------------\n\nTITLE: Numerical Integration of Custom Distribution PDF in SciPy\nDESCRIPTION: Illustrates the potential numerical issues when integrating automatically generated PDFs for custom distributions over different intervals.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.integrate import quad\n>>> quad(deterministic.pdf, -1e-1, 1e-1)\n(4.163336342344337e-13, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Mean and Variance for Fisher's Noncentral Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the mean (μ) and variance (μ₂) for the distribution using P_0, P_1, and P_2.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nchypergeom_fisher.rst#2025-04-14_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n    \\mu & = & \\frac{P_0}{P_1},\\\\\n    \\mu_{2} & = & \\frac{P_2}{P_0} - \\left(\\frac{P_1}{P_0}\\right)^2,\\\\\n    \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Running ASV Commands Directly\nDESCRIPTION: Series of commands to run ASV directly for running benchmarks, publishing results, and previewing them. Note that this doesn't set environment variables for ccache and BLAS/LAPACK multi-threading.\nSOURCE: https://github.com/scipy/scipy/blob/main/benchmarks/README.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd benchmarks\nasv run --skip-existing-commits --steps 10 ALL\nasv publish\nasv preview\n```\n\n----------------------------------------\n\nTITLE: Performing Permutation Test for Variance Comparison\nDESCRIPTION: Conducts a permutation test as an alternative method to assess variance equality, especially useful for non-normal distributions\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_bartlett.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef statistic(*samples):\\n    return stats.bartlett(*samples).statistic\\nref = stats.permutation_test(\\n    (small_dose, medium_dose, large_dose), statistic,\\n    permutation_type='independent', alternative='greater'\\n)\\nfig, ax = plt.subplots(figsize=(8, 5))\\nplot(ax)\\nbins = np.linspace(0, 5, 25)\\nax.hist(\\n    ref.null_distribution, bins=bins, density=True, facecolor=\"C1\"\\n)\\nax.legend(['asymptotic approximation\\n(many observations)',\\n           'randomized null distribution'])\\nplot(ax)\\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Fitting Weibull Distribution with Fixed Location\nDESCRIPTION: This snippet fits the Weibull distribution to data while fixing the location parameter to 0 using the `floc` argument in `stats.weibull_min.fit`.  The estimated shape `c_` and scale `scale_` are returned. Setting `floc=0` constrains the location parameter during the fitting process.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n\"# c_, loc_, scale_ = stats.weibull_min.fit(data, loc=0)  # careful! this provides loc=0 as a *guess*\nc_, loc_, scale_ = stats.weibull_min.fit(data, floc=0)\nc_, loc_, scale_\"\n```\n\n----------------------------------------\n\nTITLE: Combining P-values in Statistics - SciPy Python\nDESCRIPTION: The `scipy.stats.combine_pvalues` function implements Fisher's and Stouffer's methods for combining p-values from independent tests, aiding in meta-analyses and other statistical models.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.combine_pvalues\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Multiple Distribution Statistics with Old API\nDESCRIPTION: Shows how to compute multiple statistics (mean, variance, skewness, kurtosis) in a single call using the stats method of the old distribution infrastructure.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nstats.weibull_min.stats(c, moments='mvsk')\n```\n\n----------------------------------------\n\nTITLE: Accessing Intermediate Results in ODE Solvers\nDESCRIPTION: This snippet outlines the new feature allowing access to intermediate results from the `dopri` family of ODE solvers through a callback function. This offers users more flexibility in extracting data during the integration process. Dependencies are the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.13.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n# Example of using a callback function with dopri solvers\nfrom scipy.integrate import solve_ivp\n\n# Define ODE system\ndef fun(t, y):\n    return -0.5 * y\n\n# Define a callback function to capture intermediate results\ndef solout(t, y):\n    print(f\"t={t}, y={y}\")\n\n# Solve ODE with callback\nsol = solve_ivp(fun, [0, 5], [1], t_eval=[0, 1, 2, 3, 4, 5], dense_output=True, events=solout)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Returns for SciPy Special Ufuncs\nDESCRIPTION: Example showing the correct format for documenting return values of universal functions in scipy.special. Shows how to specify return types for both scalar and array inputs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/special_ufuncs.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n  Returns\n  -------\n  scalar or ndarray\n      Values of the Gamma function\n```\n\n----------------------------------------\n\nTITLE: Sampling from Gamma Distribution Using Simple Ratio-of-Uniforms\nDESCRIPTION: Illustrates using Simple Ratio-of-Uniforms for generating samples from a gamma distribution with varying shape parameters. The snippet shows iteration over different shape parameters and using warnings suppression while generating samples.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import math\n>>> class GammaDist:\n...     def __init__(self, p):\n...         self.p = p\n...     def pdf(self, x):\n...         return x**(self.p-1) * np.exp(-x)\n...\n>>> urng = np.random.default_rng()\n>>> p = np.arange(1.5, 5, 1000)\n>>> res = np.empty((1000, 100))\n>>> for i in range(1000):\n...     dist = GammaDist(p[i])\n...     rng = SimpleRatioUniforms(dist, mode=p[i]-1,\n...                               pdf_area=math.gamma(p[i]),\n...                               random_state=urng)\n...     with np.testing.suppress_warnings() as sup:\n...         sup.filter(RuntimeWarning, \"invalid value encountered in double_scalars\")\n...         sup.filter(RuntimeWarning, \"overflow encountered in exp\")\n...         res[i] = rng.rvs(100)\n```\n\n----------------------------------------\n\nTITLE: Enabling PROPACK in SciPy\nDESCRIPTION: Environment variable setting to enable PROPACK solver for sparse SVD operations. This is currently opt-in due to potential Windows issues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.8.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSE_PROPACK=1\n```\n\n----------------------------------------\n\nTITLE: Calculating Negative Log-Likelihood with New API\nDESCRIPTION: Demonstrates direct computation of negative log-likelihood using the logpdf method of the new random variables implementation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nX = stats.Normal(mu=mu, sigma=sigma)\n-X.logpdf(data).sum()\n```\n\n----------------------------------------\n\nTITLE: Double Gamma Statistical Moments\nDESCRIPTION: Statistical moments including mean, variance, skewness, kurtosis, and mode for the double gamma distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dgamma.rst#2025-04-14_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nμ = m_n = 0\nμ_2 = α(α+1)\nγ_1 = 0\nγ_2 = ((α+2)(α+3))/(α(α+1)) - 3\nm_d = NA\n```\n\n----------------------------------------\n\nTITLE: Introducing Multivariate Normal Distribution in scipy.stats\nDESCRIPTION: A new class, `scipy.stats.multivariate_normal`, has been added to efficiently handle multivariate normal random variables, expanding the statistical functionalities available in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A new class `scipy.stats.multivariate_normal` with functionality for\\nmultivariate normal random variables has been added.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Hypergeometric Distribution in SciPy\nDESCRIPTION: Demonstrates initialization of hypergeometric distribution parameters M (population size), n (number of success states), and N (number of draws).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import hypergeom\n>>> [M, n, N] = [20, 7, 12]\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteAliasUrn with PMF and Support Method in SciPy\nDESCRIPTION: This example demonstrates how to use a PMF (Probability Mass Function) directly with the DiscreteAliasUrn, instead of a probability vector. It defines a custom distribution class with a pmf and support method. The support method returns the domain of the PMF. The snippet then creates an instance of this class and uses it to initialize the DiscreteAliasUrn.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dau.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> class Distribution:\n...     def __init__(self, c):\n...         self.c = c\n...     def pmf(self, x):\n...         return x**self.c\n...     def support(self):\n...         return (0, 10)\n... \n>>> dist = Distribution(2)\n>>> rng = DiscreteAliasUrn(dist, random_state=urng)\n>>> rng.rvs()\n10    # may vary\n```\n\n----------------------------------------\n\nTITLE: Handling Body Parallelism in C++\nDESCRIPTION: This part of the C++ library manages reading and writing of Matrix Market file contents. The `read_body.hpp`, `write_body.hpp`, and `*_threads.hpp` files introduce parallelism through threading. Key functions break the datastructure into manageable pieces, accelerating I/O operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/README.md#2025-04-14_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"read_body.hpp\\\"\\n#include \\\"write_body.hpp\\\"\\n#include \\\"*_threads.hpp\\\"\\n// Body handling logic with parallel support...\\n\"\n```\n\n----------------------------------------\n\nTITLE: Handling Explicit Zeros in Sparse Arrays in Python\nDESCRIPTION: This snippet demonstrates how to include explicit zeros in sparse arrays and how to eliminate them using the eliminate_zeros() method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrow = [0,0,1,1,2,2]\ncol = [0,3,1,2,2,3]\ndata = [1,2,4,1,5,0]\ncsr = sp.sparse.csr_array((data, (row, col)))\nprint(csr)\ncsr.eliminate_zeros()\nprint(csr)\n```\n\n----------------------------------------\n\nTITLE: Documenting minimize_scalar with Brent's method in SciPy (reStructuredText)\nDESCRIPTION: This snippet defines the documentation structure for the 'brent' method in SciPy's minimize_scalar function. It specifies the function name, implementation path, and method type using reStructuredText directives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize_scalar-brent.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _optimize.minimize_scalar-brent:\n\nminimize_scalar(method='brent')\n----------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize_scalar\n   :impl: scipy.optimize._optimize._minimize_scalar_brent\n   :method: brent\n```\n\n----------------------------------------\n\nTITLE: Enabling Array API Standard Support in Bash\nDESCRIPTION: Sets the environment variable SCIPY_ARRAY_API to enable array API standard support in SciPy. This environment variable must be set before importing SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SCIPY_ARRAY_API=1\n```\n\n----------------------------------------\n\nTITLE: Sparse Array Construction Function Example\nDESCRIPTION: Code reference showing the transition from matrix creation functions (like eye) to array creation functions (eye_array) and finally to array_api compatible names in the sparse module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/roadmap-detailed.rst#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\neye -> eye_array -> eye\n```\n\n----------------------------------------\n\nTITLE: Setting Up Parameters for a Custom Discrete Distribution\nDESCRIPTION: Initializes parameters for creating a custom discrete distribution based on the truncated normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> npoints = 20   # number of integer support points of the distribution minus 1\n>>> npointsh = npoints // 2\n```\n\n----------------------------------------\n\nTITLE: Analyzing Connected Components in Word Graph\nDESCRIPTION: Identifies and analyzes connected components in the word graph to find isolated words and word groups.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/csgraph.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.sparse.csgraph import connected_components\nN_components, component_list = connected_components(graph)\nprint(N_components)\n[np.sum(component_list == i) for i in range(N_components)]\n[list(word_list[np.nonzero(component_list == i)]) for i in range(1, N_components)]\n```\n\n----------------------------------------\n\nTITLE: Comparing Moment Calculation Between Old and New SciPy Distribution API\nDESCRIPTION: Demonstrates how to calculate the first raw moment (mean) of a Weibull distribution using both the old stats module and the new random variables implementation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstats.weibull_min.moment(1, c), X.moment(1)  # first raw moment of the Weibull distribution with shape c\n```\n\n----------------------------------------\n\nTITLE: Customizing ARPACK-NG Installation with CMake\nDESCRIPTION: Commands to customize the ARPACK-NG installation using CMake, setting the library suffix for architecture-specific installations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ cmake -D LIBSUFFIX=\"64\" ..\n$ make all install\n```\n\n----------------------------------------\n\nTITLE: Automatic PDF Computation for Custom Distributions in SciPy\nDESCRIPTION: Demonstrates how SciPy automatically computes the probability density function (PDF) for a custom distribution when the CDF is defined.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> deterministic.pdf(np.arange(-3, 3, 0.5))\narray([  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,\n         5.83333333e+04,   4.16333634e-12,   4.16333634e-12,\n         4.16333634e-12,   4.16333634e-12,   4.16333634e-12])\n```\n\n----------------------------------------\n\nTITLE: Solving Triangular Packed System of Equations in C\nDESCRIPTION: This prototype is intended for solving a system of equations formulated with a triangular packed matrix in C. Through adjustment of specific parameters, users can perform highly stable and accurate operations guided by BLAS standards.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nvoid ztpsv(char *uplo, char *trans, char *diag, int *n, z *ap, z *x, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Calling CFFI Callback from Python\nDESCRIPTION: This Python code demonstrates calling the CFFI callback within Python using LowLevelCallable.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n\"import os\n   import numpy as np\n   from scipy import ndimage, LowLevelCallable\n   import cffi\n\n   # Construct the FFI object, and copypaste the function declaration\n   ffi = cffi.FFI()\n   ffi.cdef(\\\"\\n   int _transform(intptr_t *output_coordinates, double *input_coordinates,\n                  int output_rank, int input_rank, void *user_data);\n   \\\")\n\n   # Open library\n   lib = ffi.dlopen(os.path.abspath(\\\"example.so\\\"))\n\n   # Do the function call\n   user_data = ffi.new('double *', 0.5)\n   callback = LowLevelCallable(lib._transform, user_data)\n   im = np.arange(12).reshape(4, 3).astype(np.float64)\"\n```\n\n----------------------------------------\n\nTITLE: Importing Matplotlib for Plotting in Python\nDESCRIPTION: This snippet imports the pyplot module from matplotlib, which is essential for creating the mandala figure.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/spatial.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Installing Apple Developer Tools on macOS\nDESCRIPTION: Command to install Apple Developer Tools on macOS, which includes necessary compilers and development utilities.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Defining Log-Uniform Distribution in Python using SciPy\nDESCRIPTION: Example of creating a log-uniform distribution using SciPy's loguniform function. The distribution is defined over the interval [0.1, 10], where all values are equally likely on a logarithmic scale.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loguniform.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nloguniform(10**-1, 10**1)\n```\n\n----------------------------------------\n\nTITLE: Performing Friedman test with SciPy\nDESCRIPTION: This snippet calculates the Friedman chi-square statistic for three sets of data (pulse rates before, immediately after, and five minutes after exercise). It uses `scipy.stats.friedmanchisquare` to perform the test, and then extracts and displays the test statistic.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_friedmanchisquare.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import friedmanchisquare\nbefore = [72, 96, 88, 92, 74, 76, 82]\nimmediately_after = [120, 120, 132, 120, 101, 96, 112]\nfive_min_after = [76, 95, 104, 96, 84, 72, 76]\nres = friedmanchisquare(before, immediately_after, five_min_after)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Importing Necessary Libraries in Python\nDESCRIPTION: The snippet imports the numpy library for numerical operations and the SimpleRatioUniforms class from scipy.stats.sampling for implementing the Simple Ratio-of-Uniforms method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.stats.sampling import SimpleRatioUniforms\n```\n\n----------------------------------------\n\nTITLE: Defining Function with Required Keywords in Python\nDESCRIPTION: Example showing how to define a function that requires explicit keyword arguments after the first parameter using the * syntax. This ensures parameters must be explicitly named when called.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/missing-bits.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(x, *, method='basic', flag=False, rtol=1.5e-8, atol=1-12):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Executing Fligner-Killeen Statistical Test in SciPy\nDESCRIPTION: Performing the Fligner-Killeen statistical test to evaluate variance differences between multiple sample groups using scipy.stats module. Calculates test statistic and p-value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_fligner.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.fligner(small_dose, medium_dose, large_dose)\nres.statistic\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Building ARPACK-NG with Eigen Support\nDESCRIPTION: Commands to build ARPACK-NG with Eigen integration using CMake. This configuration enables the C++ eigensolver based on ISO_C_BINDING and Eigen.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build\n$ cd build\n$ cmake -D EXAMPLES=ON -D ICB=ON -D EIGEN=ON ..\n$ make all check\n```\n\n----------------------------------------\n\nTITLE: Handling ARPACK Convergence Issues with Python Exceptions\nDESCRIPTION: This code snippet demonstrates error handling for ARPACK eigenvalue calculation failures in SciPy. If the eigenvalue iteration fails to converge, it captures partially converged results using a try-except block. Dependencies include NumPy for matrix operations and SciPy's sparse linear algebra module for eigenvalue computations. Expected input is a random matrix, and the output provides partially or fully converged eigenvalues and eigenvectors.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.9.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nfrom scipy.sparse.linalg import eigs, ArpackNoConvergence\n\nm = np.random.randn(30, 30)\ntry:\n    w, v = eigs(m, 6)\nexcept ArpackNoConvergence, err:\n    partially_converged_w = err.eigenvalues\n    partially_converged_v = err.eigenvectors\n```\n\n----------------------------------------\n\nTITLE: Minimizing Negative Log-Likelihood using scipy.optimize\nDESCRIPTION: This snippet demonstrates minimizing the negative log-likelihood function (`nllf`) using `scipy.optimize.minimize`. It defines lower and upper bounds (`lb`, `ub`) for the shape and scale parameters, an initial guess (`x0`), and uses the `Bounds` object to set the parameter constraints. The minimization result is stored in `res_mle`.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n\"from scipy import optimize\neps = 1e-10  # numerical tolerance to avoid invalid parameters\nlb = [eps, eps]  # lower bound on `c` and `scale`\nub = [10, 10]  # upper bound on `c` and `scale`\nx0 = [1, 1]  # guess to get optimization started\nbounds = optimize.Bounds(lb, ub)\nres_mle = optimize.minimize(nllf, x0, bounds=bounds)\nres_mle\"\n```\n\n----------------------------------------\n\nTITLE: Documenting minimize() with CG Method\nDESCRIPTION: This RST code block documents the minimize function when used with the Conjugate Gradient method. It specifies the implementation module and the method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-cg.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._optimize._minimize_cg\n   :method: CG\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy Curve Fit Function - Basic Method\nDESCRIPTION: Demonstrates the recommended way to import and use the curve_fit function from SciPy optimize module using the full namespace approach.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport scipy\nresult = scipy.optimize.curve_fit(...)\n```\n\n----------------------------------------\n\nTITLE: pkg-config File Template for Custom BLAS/LAPACK\nDESCRIPTION: Example pkg-config (.pc) file configuration for custom BLAS/LAPACK libraries in non-standard locations. Shows required fields and formatting.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/blas_lapack.rst#2025-04-14_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nlibdir=/path/to/library-dir      # e.g., /a/random/path/lib\nincludedir=/path/to/include-dir  # e.g., /a/random/path/include\nversion=1.2.3                    # set to actual version\nextralib=-lm -lpthread -lgfortran   # if needed, the flags to link in dependencies\nName: armpl_lp64\nDescription: ArmPL - Arm Performance Libraries\nVersion: ${version}\nLibs: -L${libdir} -larmpl_lp64      # linker flags\nLibs.private: ${extralib}\nCflags: -I${includedir}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dose Groups NumPy Arrays\nDESCRIPTION: Creates three NumPy arrays representing tooth growth measurements for small, medium, and large vitamin C doses in a scientific experiment\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_bartlett.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\\nsmall_dose = np.array([\\n    4.2, 11.5, 7.3, 5.8, 6.4, 10, 11.2, 11.2, 5.2, 7,\\n    15.2, 21.5, 17.6, 9.7, 14.5, 10, 8.2, 9.4, 16.5, 9.7\\n])\\nmedium_dose = np.array([\\n    16.5, 16.5, 15.2, 17.3, 22.5, 17.3, 13.6, 14.5, 18.8, 15.5,\\n    19.7, 23.3, 23.6, 26.4, 20, 25.2, 25.8, 21.2, 14.5, 27.3\\n])\\nlarge_dose = np.array([\\n    23.6, 18.5, 33.9, 25.5, 26.4, 32.5, 26.7, 21.5, 23.3, 29.5,\\n    25.5, 26.4, 22.4, 24.5, 24.8, 30.9, 26.4, 27.3, 29.4, 23\\n])\n```\n\n----------------------------------------\n\nTITLE: Using Interior Point Method with SciPy's Linear Programming Function\nDESCRIPTION: This snippet demonstrates how to call the linprog function from scipy.optimize with the interior-point method specified. The interior-point method is one of the available algorithms for solving linear programming problems in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.linprog-interior-point.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.linprog(method='interior-point')\n```\n\n----------------------------------------\n\nTITLE: Referencing CG Method in SciPy Optimize\nDESCRIPTION: This RST directive creates a reference label for the Conjugate Gradient method in SciPy's optimization module. It allows for easy linking to this specific method within the documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-cg.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.minimize-cg:\n```\n\n----------------------------------------\n\nTITLE: Setting Default Editor in Git\nDESCRIPTION: Command to configure vim as the default editor for Git operations that require text input.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global core.editor vim\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Impact of u_resolution on PDF Evaluations in Python\nDESCRIPTION: This example illustrates the impact of the u_resolution parameter on the number of PDF evaluations during the setup phase. It defines a StandardNormal class that tracks the number of times the PDF is called, and then initializes NumericalInversePolynomial with different u_resolution values, demonstrating the trade-off between setup time and accuracy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_pinv.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats.sampling import NumericalInversePolynomial\n>>> class StandardNormal:\n...     def __init__(self):\n...         self.callbacks = 0\n...     def pdf(self, x):\n...         self.callbacks += 1\n...         return np.exp(-0.5 * x*x)\n... \n>>> dist = StandardNormal()\n>>> urng = np.random.default_rng()\n>>> # u_resolution = 10^-8\n>>> # => less PDF evaluations required\n>>> # => faster setup\n>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-8,\n...                                  random_state=urng)\n>>> dist.callbacks\n    4095        # may vary\n>>> dist.callbacks = 0  # reset the number of callbacks\n>>> # u_resolution = 10^-10 (default)\n>>> # => more PDF evaluations required\n>>> # => slow setup\n>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-10,\n...                                  random_state=urng)\n>>> dist.callbacks\n    11454       # may vary\n>>> dist.callbacks = 0  # reset the number of callbacks\n>>> # u_resolution = 10^-12\n>>> # => lots of PDF evaluations required\n>>> # => very slow setup\n>>> rng = NumericalInversePolynomial(dist, u_resolution=1e-12,\n...                                  random_state=urng)\n    13902     # may vary\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Arguments to Filter Function with generic_filter\nDESCRIPTION: Shows how to pass additional parameters to a filter function using extra_arguments in generic_filter. This approach enables more customizable filter implementations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> def fnc(buffer, weights):\n...     weights = np.asarray(weights)\n...     return (buffer * weights).sum()\n...\n>>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]], extra_arguments = ([1, 3],))\narray([[ 0,  3,  7, 11],\n       [12, 15, 19, 23],\n       [28, 31, 35, 39]])\n```\n\n----------------------------------------\n\nTITLE: Documenting BFGS Method for SciPy's minimize Function\nDESCRIPTION: This reStructuredText snippet defines the documentation structure for the BFGS method in SciPy's minimize function. It specifies the implementation location and method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-bfgs.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _optimize.minimize-bfgs:\n\nminimize(method='BFGS')\n----------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._optimize._minimize_bfgs\n   :method: BFGS\n```\n\n----------------------------------------\n\nTITLE: Setting Index Dtype Before Construction\nDESCRIPTION: Example showing how to select and set the index dtype before constructing a sparse array based on shape parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nshape = (3, 3)\nidx_dtype = scipy.sparse.get_index_dtype(maxval=max(shape))\nindices = np.array([0, 1, 0], dtype=idx_dtype)\nindptr = np.arange(3, dtype=idx_dtype)\nA = csr_array((data, indices, indptr), shape=shape)\n```\n\n----------------------------------------\n\nTITLE: Enabling ISO_C_BINDING with Autotools\nDESCRIPTION: Command to enable ISO_C_BINDING support in ARPACK-NG using Autotools, which provides interoperability between Fortran and C/C++.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --enable-icb\n```\n\n----------------------------------------\n\nTITLE: Burr Distribution Mathematical Equations in LaTeX\nDESCRIPTION: Complete mathematical formulation of the Burr distribution including probability density function, cumulative distribution function, inverse CDF (quantile function), mean, variance, skewness, kurtosis, and mode calculations. The equations are parameterized by shape parameters c and d with support x ≥ 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_burr.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\textrm{Let }k & = & \\Gamma\\left(d\\right)\\Gamma\\left(1-\\frac{2}{c}\\right)\\Gamma\\left(\\frac{2}{c}+d\\right)-\\Gamma^{2}\\left(1-\\frac{1}{c}\\right)\\Gamma^{2}\\left(\\frac{1}{c}+d\\right)\\\\ f\\left(x;c,d\\right) & = & \\frac{cd}{x^{c+1}\\left(1+x^{-c}\\right)^{d+1}} \\\\ F\\left(x;c,d\\right) & = & \\left(1+x^{-c}\\right)^{-d}\\\\ G\\left(q;c,d\\right) & = & \\left(q^{-1/d}-1\\right)^{-1/c}\\\\ \\mu & = & \\frac{\\Gamma\\left(1-\\frac{1}{c}\\right)\\Gamma\\left(\\frac{1}{c}+d\\right)}{\\Gamma\\left(d\\right)}\\\\ \\mu_{2} & = & \\frac{k}{\\Gamma^{2}\\left(d\\right)}\\\\ \\gamma_{1} & = & \\frac{1}{\\sqrt{k^{3}}}\\left[2\\Gamma^{3}\\left(1-\\frac{1}{c}\\right)\\Gamma^{3}\\left(\\frac{1}{c}+d\\right)+\\Gamma^{2}\\left(d\\right)\\Gamma\\left(1-\\frac{3}{c}\\right)\\Gamma\\left(\\frac{3}{c}+d\\right)\\right.\\\\ &  & \\left.-3\\Gamma\\left(d\\right)\\Gamma\\left(1-\\frac{2}{c}\\right)\\Gamma\\left(1-\\frac{1}{c}\\right)\\Gamma\\left(\\frac{1}{c}+d\\right)\\Gamma\\left(\\frac{2}{c}+d\\right)\\right]\\\\ \\gamma_{2} & = & -3+\\frac{1}{k^{2}}\\left[6\\Gamma\\left(d\\right)\\Gamma\\left(1-\\frac{2}{c}\\right)\\Gamma^{2}\\left(1-\\frac{1}{c}\\right)\\Gamma^{2}\\left(\\frac{1}{c}+d\\right)\\Gamma\\left(\\frac{2}{c}+d\\right)\\right.\\\\ &  & -3\\Gamma^{4}\\left(1-\\frac{1}{c}\\right)\\Gamma^{4}\\left(\\frac{1}{c}+d\\right)+\\Gamma^{3}\\left(d\\right)\\Gamma\\left(1-\\frac{4}{c}\\right)\\Gamma\\left(\\frac{4}{c}+d\\right)\\\\ &  & \\left.-4\\Gamma^{2}\\left(d\\right)\\Gamma\\left(1-\\frac{3}{c}\\right)\\Gamma\\left(1-\\frac{1}{c}\\right)\\Gamma\\left(\\frac{1}{c}+d\\right)\\Gamma\\left(\\frac{3}{c}+d\\right)\\right]\\\\ m_{d} & = & \\left(\\frac{cd-1}{c+1}\\right)^{1/c}\\,\\text{if }\\quad cd>1 \\text{, otherwise }\\quad 0\\\\ m_{n} & = & \\left(2^{1/d}-1\\right)^{-1/c}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Swapping Complex Vectors in C\nDESCRIPTION: This function declaration provides a template for exchanging elements between two complex vectors in C. It delineates parameters for element count and stride specifications, maintaining adherence to BLAS operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nvoid zswap(int *n, z *zx, int *incx, z *zy, int *incy)\n```\n\n----------------------------------------\n\nTITLE: Location and Scale Parameter Estimation with Old API\nDESCRIPTION: Shows how to estimate location and scale parameters from data using the fit_loc_scale method for a Weibull distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nrng = np.random.default_rng(91392794601852341588152500276639671056)\ndist = stats.weibull_min\nc, loc, scale = 0.5, 0, 4.\ndata = dist.rvs(size=100, c=c, loc=loc, scale=scale, random_state=rng)\ndist.fit_loc_scale(data, c)\n# compare against 0 (default location) and 4 (specified scale)\n```\n\n----------------------------------------\n\nTITLE: Replace Methods and Attributes During Sparse Array Migration\nDESCRIPTION: This snippet advises on the replaced methods and attributes during migration from spmatrix to sparray, providing alternative methods for each deprecated function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n-  The methods ``get_shape``, ``getrow``, ``getcol``, ``asfptype``, ``getnnz``,\n   ``getH`` and the attributes ``.A`` and ``.H`` are only present on spmatrices,\n   not sparrays. It is recommended that you replace usage of them with\n   alternatives before starting the shift to sparray.\n       ===============  ====================\n       Function         Alternative\n       ===============  ====================\n       M.get_shape()    A.shape\n       M.getformat()    A.format\n       M.asfptype(…)    A.astype(…)\n       M.getmaxprint()  A.maxprint\n       M.getnnz()       A.nnz\n       M.getnnz(axis)   A.count_nonzero(axis)\n       M.getH()         A.conj().T\n       M.getrow(i)      A[i, :]\n       M.getcol(j)      A[:, j]\n       M.A              A.toarray()\n       M.H              A.conj().T\n       ===============  ====================\n```\n\n----------------------------------------\n\nTITLE: Displaying a Plot with Matplotlib\nDESCRIPTION: This snippet displays the current plot in a window using Matplotlib. It is the final step after defining all plot elements to visualize the graphical output.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy Build Dependencies on CentOS/RHEL Linux\nDESCRIPTION: Command to install necessary build dependencies for SciPy on CentOS/RHEL Linux systems using yum package manager.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install gcc-gfortran python3-devel openblas-devel lapack-devel pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Impact of U-Resolution on Number of Intervals\nDESCRIPTION: This example demonstrates how the `u_resolution` affects the number of intervals used in the Hermite interpolation. A lower `u_resolution` leads to a higher number of intervals, improving accuracy but increasing computational cost.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> rng1.intervals\n1022\n>>> rng2.intervals\n5687\n```\n\n----------------------------------------\n\nTITLE: Initializing DiscreteAliasUrn with SciPy's binom Distribution\nDESCRIPTION: This example shows how to efficiently use a vectorized PMF from a SciPy discrete distribution (specifically, binom) with DiscreteAliasUrn. It retrieves the domain and PMF values from the binom distribution and directly passes them as the probability vector and domain to the DiscreteAliasUrn constructor.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dau.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import binom\n>>> from scipy.stats.sampling import DiscreteAliasUrn\n>>> dist = binom(10, 0.2)  # distribution object\n>>> domain = dist.support()  # the domain of your distribution\n>>> x = np.arange(domain[0], domain[1] + 1)\n>>> pv = dist.pmf(x)\n>>> rng = DiscreteAliasUrn(pv, domain=domain)\n```\n\n----------------------------------------\n\nTITLE: Saving Python Dict as MATLAB Struct\nDESCRIPTION: Demonstrates how to save a Python dictionary as a MATLAB struct file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> a_dict = {'field1': 0.5, 'field2': 'a string'}\n>>> sio.savemat('saved_struct.mat', {'a_dict': a_dict})\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for SciPy Development\nDESCRIPTION: Pip commands to install various sets of dependencies for SciPy development, including build, doc, and test dependencies.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# All dependencies\npython -m pip install -r requirements/all.txt\n\n# Alternatively, you can install just the dependencies for certain\n# development tasks:\n\n# Build and dev dependencies (for `python dev.py {build, lint, mypy}`)\npython -m pip install -r requirements/build.txt -r requirements/dev.txt\n\n# Doc dependencies (for `python dev.py {doc, refguide-check}`)\npython -m pip install -r requirements/doc.txt\n\n# Test dependencies (for `python dev.py {test, bench, refguide-check}`)\npython -m pip install -r requirements/test.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing P-value\nDESCRIPTION: This snippet demonstrates how to access the p-value from the result object `res` returned by `scipy.stats.normaltest`. The p-value represents the probability of observing a test statistic as extreme as, or more extreme than, the one calculated from the sample data, assuming the null hypothesis is true.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Accessing Permutation Test P-value\nDESCRIPTION: This snippet retrieves and displays the p-value calculated from the permutation test.  The p-value is used to determine the statistical significance of the observed correlation, based on the distribution of correlations obtained from all possible permutations of the data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nref.pvalue\n```\n\n----------------------------------------\n\nTITLE: Git Fetch and Rebase Operations\nDESCRIPTION: Commands for updating a feature branch with changes from upstream repository, including creating backup branches and rebasing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\n\ngit checkout my-new-feature\ngit branch tmp my-new-feature\ngit rebase upstream/main\n\ngit branch -D tmp\n```\n\n----------------------------------------\n\nTITLE: Building OpenBLAS and FlexiBLAS Dependencies\nDESCRIPTION: Shell commands for cloning and building OpenBLAS and FlexiBLAS libraries required for SciPy compilation. Sets up local installation directories and configures build parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ..\n$ mkdir flexiblas-setup && cd flexiblas-setup\n$ git clone https://github.com/OpenMathLib/OpenBLAS.git openblas\n$ git clone https://github.com/mpimd-csc/flexiblas.git\n$ mkdir built-libs\n```\n\n----------------------------------------\n\nTITLE: Kyle's Analytical Probability Estimation using Normal Distribution\nDESCRIPTION: Calculates probability using normal distribution approximation with mean and standard deviation, demonstrating a mathematical approach to coin flip probability\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/resampling.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmean = p*n\nstd = math.sqrt(n*p*(1-p))\nprob = 0.5 * (1 + math.erf((x - mean) / (std * math.sqrt(2))))\n```\n\n----------------------------------------\n\nTITLE: Accessing Gamma Distribution Parameters in SciPy\nDESCRIPTION: Demonstrates how to check the number and names of shape parameters for the gamma distribution in SciPy, and how to set these parameters to create specific distributions like the exponential.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import gamma\n>>> gamma.numargs\n1\n>>> gamma.shapes\n'a'\n```\n\n----------------------------------------\n\nTITLE: Documenting SciPy's minimize function with trust-exact method\nDESCRIPTION: This snippet defines the documentation structure for the 'trust-exact' method in SciPy's optimize.minimize function. It specifies the implementation path and method name using reStructuredText directives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-trustexact.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._trustregion_exact._minimize_trustregion_exact\n   :method: trust-exact\n```\n\n----------------------------------------\n\nTITLE: Configuring ARPACK-NG on Mac OS with GNU compilers\nDESCRIPTION: This snippet shows how to customize options when configuring ARPACK-NG on Mac OS using GNU compilers. It sets specific environment variables for libraries and compiler flags.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ LIBS=\"-framework Accelerate\" FFLAGS=\"-ff2c -fno-second-underscore\" FCFLAGS=\"-ff2c -fno-second-underscore\" ./configure\n```\n\n----------------------------------------\n\nTITLE: SciPy Build Dependencies\nDESCRIPTION: This snippet specifies the required build-time dependencies for the SciPy project. These packages, including their minimum versions, are necessary for building SciPy from source using tools like Meson.\nSOURCE: https://github.com/scipy/scipy/blob/main/requirements/build.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"meson-python>=0.15.0\nCython>=3.0.8\npybind11>=2.13.2\npythran>=0.14.0\nninja\nnumpy>=1.25.2\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Matrix Exponential for Matrix Batch in Python\nDESCRIPTION: This snippet calculates the matrix exponential for a batch of matrices, showing how the output shape relates to the input batch shape and core shape.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\noutput = linalg.expm(input)\noutput.shape\n```\n\n----------------------------------------\n\nTITLE: Documenting minimize_scalar with golden method in SciPy (reStructuredText)\nDESCRIPTION: This snippet defines the documentation structure for the 'golden' method of the minimize_scalar function in SciPy's optimization module. It specifies the function name, implementation path, and method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize_scalar-golden.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _optimize.minimize_scalar-golden:\n\nminimize_scalar(method='golden')\n-----------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize_scalar\n   :impl: scipy.optimize._optimize._minimize_scalar_golden\n   :method: golden\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for scipy.linalg.interpolative Module\nDESCRIPTION: This reStructuredText directive configures the autodoc extension for the scipy.linalg.interpolative module. It excludes member documentation, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/linalg.interpolative.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.linalg.interpolative\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Listing Available GitHub Actions Jobs\nDESCRIPTION: Lists all available jobs in the GitHub Actions workflows within the current repository.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nact -l\n```\n\n----------------------------------------\n\nTITLE: Performance Improvements in cKDTree\nDESCRIPTION: The `scipy.spatial.cKDTree` has undergone several performance improvements, including faster query methods and support for parallel execution. This is crucial for users working with large spatial data sets.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nscipy.spatial.cKDTree\n```\n\n----------------------------------------\n\nTITLE: Implementing a First-Derivative LinearOperator in SciPy\nDESCRIPTION: This code snippet defines a FirstDerivative class inheriting from LinearOperator, implementing the _matvec and _rmatvec methods to apply a first-derivative stencil operation. It shows how to properly structure a custom LinearOperator with the required interface methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/arpack.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> class FirstDerivative(LinearOperator):\n...     def __init__(self, N, dtype='float32'):\n...         self.N = N\n...         self.shape = (self.N, self.N)\n...         self.dtype = np.dtype(dtype)\n...     def _matvec(self, x):\n...         y = np.zeros(self.N, self.dtype)\n...         y[1:-1] = (0.5*x[2:]-0.5*x[0:-2])\n...         return y\n...     def _rmatvec(self, x):\n...         y = np.zeros(self.N, self.dtype)\n...         y[0:-2] = y[0:-2] - (0.5*x[1:-1])\n...         y[2:] = y[2:] + (0.5*x[1:-1])\n...         return y\n```\n\n----------------------------------------\n\nTITLE: Calculating Kolmogorov-Smirnov Two-Sided Test Statistic Distribution in Python\nDESCRIPTION: The scipy.stats.kstwo function calculates the distribution of the K-S two-sided statistic D_n for a sample size n, using a mixture of exact and asymptotic algorithms.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.5.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import kstwo\n\n# Example usage (not provided in the original text)\nresult = kstwo(n, x)  # where n is the sample size and x is the test statistic\n```\n\n----------------------------------------\n\nTITLE: Templating Method Documentation in reStructuredText\nDESCRIPTION: Template for generating method documentation using Sphinx and reStructuredText. Uses raw HTML for styling class names and includes directives for module context and automatic method documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/method.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n.. raw:: html\n\n   <div class=\"prename\">{{ module }}.{{ class }}.</div>\n   <div class=\"empty\"></div>\n\n{{ name }}\n{{ underline }}\n\n.. currentmodule:: {{ module }}\n\n.. automethod:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Defining First Four Moments of Generalized Extreme Value Distribution in LaTeX\nDESCRIPTION: Explicit formulas for the first four moments of the Generalized Extreme Value Distribution, each with its validity condition.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genextreme.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu_{1}^{\\prime} & = & \\frac{1}{c}\\left(1-\\Gamma\\left(1+c\\right)\\right)\\quad c>-1\\\\\n\\mu_{2}^{\\prime} & = & \\frac{1}{c^{2}}\\left(1-2\\Gamma\\left(1+c\\right)+\\Gamma\\left(1+2c\\right)\\right)\\quad c>-\\frac{1}{2}\\\\\n\\mu_{3}^{\\prime} & = & \\frac{1}{c^{3}}\\left(1-3\\Gamma\\left(1+c\\right)+3\\Gamma\\left(1+2c\\right)-\\Gamma\\left(1+3c\\right)\\right)\\quad c>-\\frac{1}{3}\\\\\n\\mu_{4}^{\\prime} & = & \\frac{1}{c^{4}}\\left(1-4\\Gamma\\left(1+c\\right)+6\\Gamma\\left(1+2c\\right)-4\\Gamma\\left(1+3c\\right)+\\Gamma\\left(1+4c\\right)\\right)\\quad c>-\\frac{1}{4}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Timing Setup Time with Different U-Resolutions\nDESCRIPTION: This code uses the `timeit` module to measure the execution time required to set up `NumericalInverseHermite` with different `u_resolution` values. It demonstrates that the setup time increases as the `u_resolution` decreases.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from timeit import timeit\n>>> f = lambda: NumericalInverseHermite(dist, u_resolution=1e-10)\n>>> timeit(f, number=1)\n0.017409582000254886  # may vary\n>>> f = lambda: NumericalInverseHermite(dist, u_resolution=1e-13)\n>>> timeit(f, number=1)\n0.08671202100003939  # may vary\n```\n\n----------------------------------------\n\nTITLE: LAPACK Complex Matrix Operations Function Declarations - Part 1\nDESCRIPTION: Function declarations for fundamental LAPACK operations on complex matrices including reduction, conversion, and matrix transformations. Functions handle complex double precision (z) data type.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nvoid zlabrd(int *m, int *n, int *nb, z *a, int *lda, d *d, d *e, z *tauq, z *taup, z *x, int *ldx, z *y, int *ldy);\nvoid zlacgv(int *n, z *x, int *incx);\nvoid zlacn2(int *n, z *v, z *x, d *est, int *kase, int *isave);\nvoid zlacon(int *n, z *v, z *x, d *est, int *kase);\nvoid zlacp2(char *uplo, int *m, int *n, d *a, int *lda, z *b, int *ldb);\nvoid zlacpy(char *uplo, int *m, int *n, z *a, int *lda, z *b, int *ldb);\n```\n\n----------------------------------------\n\nTITLE: Specifying Sample Shape in New API\nDESCRIPTION: Demonstrates random sample generation with a specific output shape using the shape parameter in the new API.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nX.sample(shape=(3, 4))\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy from Source using pip\nDESCRIPTION: Commands to install SciPy from source using pip, including options for development versions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npip install scipy --no-build-isolation --no-binary scipy\n\n# To build a development version, you need a local clone of the SciPy git repository:\ngit clone https://github.com/scipy/scipy.git\ncd scipy\ngit submodule update --init\npip install . --no-build-isolation\n```\n\n----------------------------------------\n\nTITLE: Legacy Directive with Custom Message in RST\nDESCRIPTION: Demonstrates how to use the legacy directive with a custom message indicating the recommended replacement API.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. legacy::\n\n   New code should use :mod:`scipy.fft`.\n```\n\n----------------------------------------\n\nTITLE: Vector Strength Computation in Signal Processing with scipy.signal\nDESCRIPTION: The new function `scipy.signal.vectorstrength` computes the vector strength, which is a measure of phase synchrony for a set of events, providing enhanced capabilities in signal analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"The new function `scipy.signal.vectorstrength` computes the vector strength,\\na measure of phase synchrony, of a set of events.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using PMF for Distribution with DiscreteGuideTable\nDESCRIPTION: Demonstrates the use of a custom distribution class with PMF for sampling using DiscreteGuideTable. This snippet illustrates how to define a distribution and sample from it with a bounded domain.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_dgt.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> class Distribution:\n...     def __init__(self, c):\n...             self.c = c\n...     def pmf(self, x):\n...             return x ** self.c\n...     def support(self):\n...             return 0, 10\n... \n>>> dist = Distribution(2)\n>>> rng = DiscreteGuideTable(dist, random_state=urng)\n>>> rng.rvs()\n9     # may vary\n```\n\n----------------------------------------\n\nTITLE: Parallel Optimization with scipy.optimize.differential_evolution in Python\nDESCRIPTION: This code demonstrates how to use parallel processing in SciPy's differential evolution optimization function. The 'workers' parameter can be set to an integer for multi-threading or a Pool object for multi-processing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/parallel_execution.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.optimize import differential_evolution\nfrom multiprocessing import Pool\n\ndef objective(x):\n    return x[0]**2 + x[1]**2\n\nbounds = [(-5, 5), (-5, 5)]\nwith Pool(4) as pool:\n    result = differential_evolution(objective, bounds, workers=pool)\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Ratio-of-Uniforms with PDF Area\nDESCRIPTION: Initializes the SimpleRatioUniforms class with a standard normal PDF, mode, approximate area under the PDF, and a random state for reproducibility. The snippet demonstrates the setup before generating random variates.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_srou.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> urng = np.random.default_rng()\n>>> dist = StdNorm()\n>>> rng = SimpleRatioUniforms(dist, mode=0,\n...                           pdf_area=np.sqrt(2*np.pi),\n...                           random_state=urng)\n```\n\n----------------------------------------\n\nTITLE: Accessing New Special Functions in SciPy\nDESCRIPTION: New special functions added to scipy.special include the Voigt profile, Wright Omega function, Riemann zeta function, and improvements to existing functions like hyp1f1 and ellipk.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.4.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.voigt_profile\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.wrightomega\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.zeta\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.ellipk\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.cython_special\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.special.hyp1f1\n```\n\n----------------------------------------\n\nTITLE: Executing Skewness Test with Scipy in Python\nDESCRIPTION: This snippet uses Scipy to conduct a skewness test on the sample data 'x'. It calculates a test statistic based on the skewness of the data which is compared against a normal distribution. Scipy's 'stats.skewtest' method is employed for this operation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_skewtest.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\nres = stats.skewtest(x)\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: Outputting One-Sided P-Value\nDESCRIPTION: This snippet returns the computed one-sided p-value obtained from the correlation analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue  # one-sided p-value; half of the two-sided p-value\n```\n\n----------------------------------------\n\nTITLE: Specifying Shape Parameters as Keywords in SciPy\nDESCRIPTION: Demonstrates how to use named parameters when creating a distribution instance, using the gamma distribution as an example with the shape parameter 'a'.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> gamma(a=1, scale=2.).stats(moments=\"mv\")\n(array(2.0), array(4.0))\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation\nDESCRIPTION: Sphinx directives for setting the current module context and auto-documenting a function object. Uses template variables for dynamic content insertion.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/function.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{{ name }}\n{{ underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autofunction:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Defining Rayleigh Distribution Properties in LaTeX\nDESCRIPTION: This snippet defines various statistical properties of the Rayleigh distribution, including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (mₐ), and median (mₙ) using LaTeX math notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rayleigh.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\sqrt{\\frac{\\pi}{2}}\\\\\n\\mu_{2} & = & \\frac{4-\\pi}{2}\\\\\n\\gamma_{1} & = & \\frac{2\\left(\\pi-3\\right)\\sqrt{\\pi}}{\\left(4-\\pi\\right)^{3/2}}\\\\\n\\gamma_{2} & = & \\frac{24\\pi-6\\pi^{2}-16}{\\left(4-\\pi\\right)^{2}}\\\\\nm_{d} & = & 1\\\\ m_{n} & = & \\sqrt{2\\log\\left(2\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Freezing a Distribution in SciPy\nDESCRIPTION: Shows how to freeze a distribution with fixed parameters to avoid repeatedly specifying the same parameters in subsequent method calls.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> rv = gamma(1, scale=2.)\n```\n\n----------------------------------------\n\nTITLE: Improving Numerical Integration Accuracy for Custom Distributions\nDESCRIPTION: Shows how adjusting integration intervals can improve the accuracy of numerical integration for automatically generated PDFs of custom distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> quad(deterministic.pdf, -1e-3, 1e-3)  # warning removed\n(1.000076872229173, 0.0010625571718182458)\n```\n\n----------------------------------------\n\nTITLE: Nakagami Distribution Implementation Reference\nDESCRIPTION: Reference to the SciPy implementation of the Nakagami distribution, which provides functionality for working with this generalized chi distribution with shape parameter ν > 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_nakagami.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.nakagami\n```\n\n----------------------------------------\n\nTITLE: Generating Identity Sparse Arrays in SciPy Python\nDESCRIPTION: Introduces eye_array for creating identity matrices as sparse arrays, aligning with the move from sparse matrix methods. Parameters include 'm' and 'n' for dimensions, 'k' for diagonal offset, and optional 'dtype' and 'format' for data type specification. This function helps create identity matrices as sparrays, promoting efficient computation in linear algebra operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef eye_array(m, n=None, *, k=0, dtype=float, format=None):\n```\n\n----------------------------------------\n\nTITLE: Setting PKG_CONFIG_PATH for OpenBLAS on macOS\nDESCRIPTION: Command to find and set the PKG_CONFIG_PATH for OpenBLAS on macOS, which is necessary for the build tools to locate OpenBLAS.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew info openblas | grep PKG_CONFIG_PATH\n```\n\n----------------------------------------\n\nTITLE: Multiple Backend Skip Configuration\nDESCRIPTION: Example demonstrating how to skip multiple specific backends with different reasons using multiple skip_xp_backends markers.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@pytest.mark.skip_xp_backends('array_api_strict', reason='skip reason 1')\n@pytest.mark.skip_xp_backends('cupy', reason='skip reason 2')\ndef test_toto2(self, xp):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Importing Truncated Exponential Distribution from SciPy\nDESCRIPTION: Shows how to import the truncated exponential distribution from SciPy's stats module. This distribution is defined over a region 0 ≤ x ≤ B and is a variation of the standard exponential distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_truncexpon.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import truncexpon\n```\n\n----------------------------------------\n\nTITLE: Configuring Sparse Matrix Class Assignments in SciPy\nDESCRIPTION: Defines the class assignments for various sparse matrix types in SciPy, including BSR, COO, CSC, CSR, DIA, DOK, and LIL matrix formats.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nscipy.sparse.dia_matrix = scipy.sparse._dia.dia_matrix = _strict_dia_matrix\n\nscipy.sparse._compressed.csr_matrix = _strict_csr_matrix\n\nscipy.sparse._construct.bsr_matrix = _strict_bsr_matrix\nscipy.sparse._construct.coo_matrix = _strict_coo_matrix\nscipy.sparse._construct.csc_matrix = _strict_csc_matrix\nscipy.sparse._construct.csr_matrix = _strict_csr_matrix\nscipy.sparse._construct.dia_matrix = _strict_dia_matrix\n\nscipy.sparse._extract.coo_matrix = _strict_coo_matrix\n\nscipy.sparse._matrix.bsr_matrix = _strict_bsr_matrix\nscipy.sparse._matrix.coo_matrix = _strict_coo_matrix\nscipy.sparse._matrix.csc_matrix = _strict_csc_matrix\nscipy.sparse._matrix.csr_matrix = _strict_csr_matrix\nscipy.sparse._matrix.dia_matrix = _strict_dia_matrix\nscipy.sparse._matrix.dok_matrix = _strict_dok_matrix\nscipy.sparse._matrix.lil_matrix = _strict_lil_matrix\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of numpy.random in Examples\nDESCRIPTION: Example showing the incorrect way to use NumPy's random functionality in SciPy documentation. This approach should be avoided in favor of the Generator-based approach.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> sample = np.random.random(10)\n```\n\n----------------------------------------\n\nTITLE: Using Voronoi Plot for Furthest Site Diagrams in Python\nDESCRIPTION: scipy.spatial.voronoi_plot_2d now supports furthest site Voronoi diagrams. The Delaunay and Voronoi classes in scipy.spatial have new attributes to track whether they are furthest site diagrams.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.4.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy.spatial.voronoi_plot_2d\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.spatial.Delaunay\n```\n\nLANGUAGE: Python\nCODE:\n```\nscipy.spatial.Voronoi\n```\n\n----------------------------------------\n\nTITLE: Inspecting MATLAB File Contents in Python\nDESCRIPTION: Shows how to use the whosmat function to inspect the contents of a MATLAB file without loading the data into memory.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> sio.whosmat('octave_a.mat')\n```\n\n----------------------------------------\n\nTITLE: Log Normal Distribution Moments\nDESCRIPTION: Mathematical expressions for the mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) of the log normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_lognorm.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\exp\\left(\\sigma^{2}/2\\right)\\\\ \\mu_{2} & = & \\exp\\left(\\sigma^{2}\\right)\\left[\\exp\\left(\\sigma^{2}\\right)-1\\right]\\\\ \\gamma_{1} & = & \\sqrt{p-1}\\left(2+p\\right)\\\\ \\gamma_{2} & = & p^{4}+2p^{3}+3p^{2}-6\\quad\\quad p=e^{\\sigma^{2}}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Observed Frequencies Using NumPy in Python\nDESCRIPTION: This code snippet initializes a NumPy array with observed frequencies of bird foraging events in different types of trees.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_chisquare.md#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nf_obs = np.array([43, 52, 54, 40])\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Declaration\nDESCRIPTION: Defines a table of contents tree structure for Git development documentation using ReStructuredText directives. Sets maximum depth to 2 levels and lists the included documentation pages.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/gitwash.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   development_setup\n   configure_git\n   useful_git\n   git_resources\n   dot2_dot3\n```\n\n----------------------------------------\n\nTITLE: Defining Moments for Asymmetric Laplace Distribution in LaTeX\nDESCRIPTION: This LaTeX code block defines the moments of the Asymmetric Laplace Distribution, including the mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂). These formulas are expressed in terms of the shape parameter κ.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace_asymmetric.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n\\mu & = & \\kappa^{-1}-\\kappa\\\\\n\\mu_2 & = & \\kappa^{-2}+\\kappa^2\\\\\n\\gamma_1 & = & \\frac{2(1-\\kappa^6)}{(1+\\kappa^4)^{3/2}}\\\\\n\\gamma_2 & = & \\frac{6(1+\\kappa^8)}{(1+\\kappa^4)^2}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Declaring Linear Algebra Functions in C for SciPy\nDESCRIPTION: This code snippet contains C function declarations for numerous linear algebra operations. These functions cover a wide range of operations including matrix manipulations, decompositions, eigenvalue problems, and orthogonal transformations. They are likely part of SciPy's internal implementation, wrapping or implementing LAPACK routines.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nvoid dlarfgp(int *n, d *alpha, d *x, int *incx, d *tau)\nvoid dlarft(char *direct, char *storev, int *n, int *k, d *v, int *ldv, d *tau, d *t, int *ldt)\nvoid dlarfx(char *side, int *m, int *n, d *v, d *tau, d *c, int *ldc, d *work)\nvoid dlargv(int *n, d *x, int *incx, d *y, int *incy, d *c, int *incc)\nvoid dlarnv(int *idist, int *iseed, int *n, d *x)\nvoid dlarra(int *n, d *d, d *e, d *e2, d *spltol, d *tnrm, int *nsplit, int *isplit, int *info)\nvoid dlarrb(int *n, d *d, d *lld, int *ifirst, int *ilast, d *rtol1, d *rtol2, int *offset, d *w, d *wgap, d *werr, d *work, int *iwork, d *pivmin, d *spdiam, int *twist, int *info)\nvoid dlarrc(char *jobt, int *n, d *vl, d *vu, d *d, d *e, d *pivmin, int *eigcnt, int *lcnt, int *rcnt, int *info)\nvoid dlarrd(char *range, char *order, int *n, d *vl, d *vu, int *il, int *iu, d *gers, d *reltol, d *d, d *e, d *e2, d *pivmin, int *nsplit, int *isplit, int *m, d *w, d *werr, d *wl, d *wu, int *iblock, int *indexw, d *work, int *iwork, int *info)\nvoid dlarre(char *range, int *n, d *vl, d *vu, int *il, int *iu, d *d, d *e, d *e2, d *rtol1, d *rtol2, d *spltol, int *nsplit, int *isplit, int *m, d *w, d *werr, d *wgap, int *iblock, int *indexw, d *gers, d *pivmin, d *work, int *iwork, int *info)\nvoid dlarrf(int *n, d *d, d *l, d *ld, int *clstrt, int *clend, d *w, d *wgap, d *werr, d *spdiam, d *clgapl, d *clgapr, d *pivmin, d *sigma, d *dplus, d *lplus, d *work, int *info)\nvoid dlarrj(int *n, d *d, d *e2, int *ifirst, int *ilast, d *rtol, int *offset, d *w, d *werr, d *work, int *iwork, d *pivmin, d *spdiam, int *info)\nvoid dlarrk(int *n, int *iw, d *gl, d *gu, d *d, d *e2, d *pivmin, d *reltol, d *w, d *werr, int *info)\nvoid dlarrr(int *n, d *d, d *e, int *info)\nvoid dlarrv(int *n, d *vl, d *vu, d *d, d *l, d *pivmin, int *isplit, int *m, int *dol, int *dou, d *minrgp, d *rtol1, d *rtol2, d *w, d *werr, d *wgap, int *iblock, int *indexw, d *gers, d *z, int *ldz, int *isuppz, d *work, int *iwork, int *info)\nvoid dlartg(d *f, d *g, d *cs, d *sn, d *r)\nvoid dlartgp(d *f, d *g, d *cs, d *sn, d *r)\nvoid dlartgs(d *x, d *y, d *sigma, d *cs, d *sn)\nvoid dlartv(int *n, d *x, int *incx, d *y, int *incy, d *c, d *s, int *incc)\nvoid dlaruv(int *iseed, int *n, d *x)\nvoid dlarz(char *side, int *m, int *n, int *l, d *v, int *incv, d *tau, d *c, int *ldc, d *work)\nvoid dlarzb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, d *v, int *ldv, d *t, int *ldt, d *c, int *ldc, d *work, int *ldwork)\nvoid dlarzt(char *direct, char *storev, int *n, int *k, d *v, int *ldv, d *tau, d *t, int *ldt)\nvoid dlas2(d *f, d *g, d *h, d *ssmin, d *ssmax)\nvoid dlascl(char *type_bn, int *kl, int *ku, d *cfrom, d *cto, int *m, int *n, d *a, int *lda, int *info)\nvoid dlasd0(int *n, int *sqre, d *d, d *e, d *u, int *ldu, d *vt, int *ldvt, int *smlsiz, int *iwork, d *work, int *info)\nvoid dlasd1(int *nl, int *nr, int *sqre, d *d, d *alpha, d *beta, d *u, int *ldu, d *vt, int *ldvt, int *idxq, int *iwork, d *work, int *info)\nvoid dlasd2(int *nl, int *nr, int *sqre, int *k, d *d, d *z, d *alpha, d *beta, d *u, int *ldu, d *vt, int *ldvt, d *dsigma, d *u2, int *ldu2, d *vt2, int *ldvt2, int *idxp, int *idx, int *idxc, int *idxq, int *coltyp, int *info)\nvoid dlasd3(int *nl, int *nr, int *sqre, int *k, d *d, d *q, int *ldq, d *dsigma, d *u, int *ldu, d *u2, int *ldu2, d *vt, int *ldvt, d *vt2, int *ldvt2, int *idxc, int *ctot, d *z, int *info)\nvoid dlasd4(int *n, int *i, d *d, d *z, d *delta, d *rho, d *sigma, d *work, int *info)\nvoid dlasd5(int *i, d *d, d *z, d *delta, d *rho, d *dsigma, d *work)\nvoid dlasd6(int *icompq, int *nl, int *nr, int *sqre, d *d, d *vf, d *vl, d *alpha, d *beta, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, d *givnum, int *ldgnum, d *poles, d *difl, d *difr, d *z, int *k, d *c, d *s, d *work, int *iwork, int *info)\nvoid dlasd7(int *icompq, int *nl, int *nr, int *sqre, int *k, d *d, d *z, d *zw, d *vf, d *vfw, d *vl, d *vlw, d *alpha, d *beta, d *dsigma, int *idx, int *idxp, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, d *givnum, int *ldgnum, d *c, d *s, int *info)\nvoid dlasd8(int *icompq, int *k, d *d, d *z, d *vf, d *vl, d *difl, d *difr, int *lddifr, d *dsigma, d *work, int *info)\nvoid dlasda(int *icompq, int *smlsiz, int *n, int *sqre, d *d, d *e, d *u, int *ldu, d *vt, int *k, d *difl, d *difr, d *z, d *poles, int *givptr, int *givcol, int *ldgcol, int *perm, d *givnum, d *c, d *s, d *work, int *iwork, int *info)\nvoid dlasdq(char *uplo, int *sqre, int *n, int *ncvt, int *nru, int *ncc, d *d, d *e, d *vt, int *ldvt, d *u, int *ldu, d *c, int *ldc, d *work, int *info)\nvoid dlasdt(int *n, int *lvl, int *nd, int *inode, int *ndiml, int *ndimr, int *msub)\nvoid dlaset(char *uplo, int *m, int *n, d *alpha, d *beta, d *a, int *lda)\nvoid dlasq1(int *n, d *d, d *e, d *work, int *info)\nvoid dlasq2(int *n, d *z, int *info)\nvoid dlasq3(int *i0, int *n0, d *z, int *pp, d *dmin, d *sigma, d *desig, d *qmax, int *nfail, int *iter, int *ndiv, bint *ieee, int *ttype, d *dmin1, d *dmin2, d *dn, d *dn1, d *dn2, d *g, d *tau)\nvoid dlasq4(int *i0, int *n0, d *z, int *pp, int *n0in, d *dmin, d *dmin1, d *dmin2, d *dn, d *dn1, d *dn2, d *tau, int *ttype, d *g)\nvoid dlasq6(int *i0, int *n0, d *z, int *pp, d *dmin, d *dmin1, d *dmin2, d *dn, d *dnm1, d *dnm2)\nvoid dlasr(char *side, char *pivot, char *direct, int *m, int *n, d *c, d *s, d *a, int *lda)\nvoid dlasrt(char *id, int *n, d *d, int *info)\nvoid dlassq(int *n, d *x, int *incx, d *scale, d *sumsq)\nvoid dlasv2(d *f, d *g, d *h, d *ssmin, d *ssmax, d *snr, d *csr, d *snl, d *csl)\nvoid dlaswp(int *n, d *a, int *lda, int *k1, int *k2, int *ipiv, int *incx)\nvoid dlasy2(bint *ltranl, bint *ltranr, int *isgn, int *n1, int *n2, d *tl, int *ldtl, d *tr, int *ldtr, d *b, int *ldb, d *scale, d *x, int *ldx, d *xnorm, int *info)\nvoid dlasyf(char *uplo, int *n, int *nb, int *kb, d *a, int *lda, int *ipiv, d *w, int *ldw, int *info)\nvoid dlat2s(char *uplo, int *n, d *a, int *lda, s *sa, int *ldsa, int *info)\nvoid dlatbs(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, d *ab, int *ldab, d *x, d *scale, d *cnorm, int *info)\nvoid dlatdf(int *ijob, int *n, d *z, int *ldz, d *rhs, d *rdsum, d *rdscal, int *ipiv, int *jpiv)\nvoid dlatps(char *uplo, char *trans, char *diag, char *normin, int *n, d *ap, d *x, d *scale, d *cnorm, int *info)\nvoid dlatrd(char *uplo, int *n, int *nb, d *a, int *lda, d *e, d *tau, d *w, int *ldw)\nvoid dlatrs(char *uplo, char *trans, char *diag, char *normin, int *n, d *a, int *lda, d *x, d *scale, d *cnorm, int *info)\nvoid dlatrz(int *m, int *n, int *l, d *a, int *lda, d *tau, d *work)\nvoid dlauu2(char *uplo, int *n, d *a, int *lda, int *info)\nvoid dlauum(char *uplo, int *n, d *a, int *lda, int *info)\nvoid dopgtr(char *uplo, int *n, d *ap, d *tau, d *q, int *ldq, d *work, int *info)\nvoid dopmtr(char *side, char *uplo, char *trans, int *m, int *n, d *ap, d *tau, d *c, int *ldc, d *work, int *info)\nvoid dorbdb(char *trans, char *signs, int *m, int *p, int *q, d *x11, int *ldx11, d *x12, int *ldx12, d *x21, int *ldx21, d *x22, int *ldx22, d *theta, d *phi, d *taup1, d *taup2, d *tauq1, d *tauq2, d *work, int *lwork, int *info)\nvoid dorcsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, d *x11, int *ldx11, d *x12, int *ldx12, d *x21, int *ldx21, d *x22, int *ldx22, d *theta, d *u1, int *ldu1, d *u2, int *ldu2, d *v1t, int *ldv1t, d *v2t, int *ldv2t, d *work, int *lwork, int *iwork, int *info)\nvoid dorg2l(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *info)\nvoid dorg2r(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *info)\nvoid dorgbr(char *vect, int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorghr(int *n, int *ilo, int *ihi, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorgl2(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *info)\nvoid dorglq(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorgql(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorgqr(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorgr2(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *info)\nvoid dorgrq(int *m, int *n, int *k, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorgtr(char *uplo, int *n, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dorm2l(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *info)\nvoid dorm2r(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *info)\nvoid dormbr(char *vect, char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dormhr(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dorml2(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *info)\nvoid dormlq(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dormql(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dormqr(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dormr2(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *info)\nvoid dormr3(char *side, char *trans, int *m, int *n, int *k, int *l, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *info)\nvoid dormrq(char *side, char *trans, int *m, int *n, int *k, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: SciPy Core Components Reference\nDESCRIPTION: Primary components available in the main SciPy namespace, including LowLevelCallable, show_config, and test functions, along with the __version__ attribute.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/main_namespace.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLowLevelCallable\nshow_config\ntest\n__version__\n```\n\n----------------------------------------\n\nTITLE: Checking Shared Library Dependencies on Linux\nDESCRIPTION: Shows how to use the ldd command on Linux to check dependencies of shared libraries, which can help identify which BLAS implementation is linked to SciPy's linear algebra modules.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ldd build/scipy/linalg/_fblas.cpython-*.so\n...\nlibopenblas.so.0 => /home/user/miniforge/envs/scipy-dev/lib/libopenblas.so.0 (0x0000780d6d000000)\n```\n\n----------------------------------------\n\nTITLE: Creating ReStructuredText Hyperlink for Differential Evolution\nDESCRIPTION: This snippet creates a hyperlink reference in ReStructuredText for the 'differential_evolution' function, pointing to its source code on GitHub.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_10\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _differential_evolution: https://github.com/scipy/scipy/blob/main/scipy/optimize/_differentialevolution.py\n```\n\n----------------------------------------\n\nTITLE: Building SciPy with limited parallelism using dev.py\nDESCRIPTION: Uses the dev.py interface to build SciPy while limiting the number of parallel build jobs to 6. This is an alternative to the pip install method for controlling build parallelism.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py build -j6\n```\n\n----------------------------------------\n\nTITLE: Performing Wilcoxon Signed Rank Test in Python\nDESCRIPTION: The wilcoxon function now uses the exact distribution for inputs up to length 25 and has a new mode parameter to specify how the p-value is computed.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.5.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import wilcoxon\n\n# Example usage (not provided in the original text)\nstatistic, p_value = wilcoxon(x, y, mode=\"auto\")\n```\n\n----------------------------------------\n\nTITLE: Setting Gamma Distribution Parameters in SciPy\nDESCRIPTION: Shows how to set parameters for the gamma distribution in different ways, including using the shape parameter to create an exponential distribution with a specified scale.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> gamma(1, scale=2.).stats(moments=\"mv\")\n(array(2.0), array(4.0))\n```\n\n----------------------------------------\n\nTITLE: Scattered Data Interpolation\nDESCRIPTION: Implementation of scattered data interpolation using bisplrep and bisplev\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/interp_transition_guide.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.interpolate import bisplrep, bisplev\ntck = bisplrep(xxr, yyr, zzr, kx=3, ky=3, s=0)\nff = lambda xnew, ynew: bisplev(xnew, ynew, tck).T\n```\n\n----------------------------------------\n\nTITLE: Python Stream Adapters in C++\nDESCRIPTION: The Python bindings include a C++-based stream adapter (`src/pystreambuf.h`) that enables Python stream objects, like `BytesIO` and `GZipFile`, to be used seamlessly within the C++ environment. This interoperability allows efficient integration of Python streams.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/README.md#2025-04-14_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"src/pystreambuf.h\\\"\\n// Adapter for Python streams...\\n\"\n```\n\n----------------------------------------\n\nTITLE: Loading a MATLAB File in Octave\nDESCRIPTION: Demonstrates how to load a MATLAB file created by Python in Octave and inspect its contents.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_4\n\nLANGUAGE: octave\nCODE:\n```\noctave:8> load np_vector.mat\noctave:9> vect\noctave:10> size(vect)\n```\n\n----------------------------------------\n\nTITLE: Implementing CartesianGridInterpolator for Uniformly Spaced Data in Python\nDESCRIPTION: This code defines a CartesianGridInterpolator class that wraps scipy.ndimage.map_coordinates for efficient interpolation of uniformly spaced data on Cartesian grids.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/ND_regular_grid.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CartesianGridInterpolator:\n    def __init__(self, points, values, method='linear'):\n        self.limits = np.array([[min(x), max(x)] for x in points])\n        self.values = np.asarray(values, dtype=float)\n        self.order = {'linear': 1, 'cubic': 3, 'quintic': 5}[method]\n\n    def __call__(self, xi):\n        xi = np.asarray(xi).T\n\n        ns = self.values.shape\n        coords = [(n-1)*(val - lo) / (hi - lo)\n                  for val, n, (lo, hi) in zip(xi, ns, self.limits)]\n\n        return map_coordinates(self.values, coords, \n                               order=self.order,\n                               cval=np.nan)  # fill_value\n```\n\n----------------------------------------\n\nTITLE: Visualizing Branch Commit Structure in Git\nDESCRIPTION: ASCII diagram showing the commit structure of two branches (topic and main) to illustrate how git diff works. The diagram shows commits A-G with topic branched off main at commit E.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/dot2_dot3.rst#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n        A---B---C topic\n        /\n   D---E---F---G main\n```\n\n----------------------------------------\n\nTITLE: Calculating Expected Values with Old API\nDESCRIPTION: Shows how to compute the expected value of a function with respect to a distribution using the expect method of the old infrastructure.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef f(x): return x**4\nstats.norm.expect(f, lb=-np.inf, ub=np.inf)\n```\n\n----------------------------------------\n\nTITLE: Wrapped Cauchy Distribution Equations in LaTeX\nDESCRIPTION: Mathematical equations defining the Wrapped Cauchy distribution including probability density function f(x;c), auxiliary functions g_c(x) and r_c(q), cumulative distribution function F(x;c), quantile function G(q;c), and entropy h[X].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_wrapcauchy.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\frac{1-c^{2}}{2\\pi\\left(1+c^{2}-2c\\cos x\\right)}\\\\\ng_{c}\\left(x\\right) & = & \\frac{1}{\\pi}\\arctan\\left(\\frac{1+c}{1-c}\\tan\\left(\\frac{x}{2}\\right)\\right)\\\\\nr_{c}\\left(q\\right) & = & 2\\arctan\\left(\\frac{1-c}{1+c}\\tan\\left(\\pi q\\right)\\right)\\\\\nF\\left(x;c\\right) & = & \\left\\{\n          \\begin{array}{ccc}\n            g_{c}\\left(x\\right) &  & 0\\leq x<\\pi\\\\\n            1-g_{c}\\left(2\\pi-x\\right) &  & \\pi\\leq x\\leq2\\pi\n          \\end{array}\n          \\right.\\\\\nG\\left(q;c\\right) & = & \\left\\{\n          \\begin{array}{ccc}\n            r_{c}\\left(q\\right) &  & 0\\leq q<\\frac{1}{2}\\\\\n            2\\pi-r_{c}\\left(1-q\\right) &  & \\frac{1}{2}\\leq q\\leq1\n          \\end{array}\n          \\right.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Computing Confidence Intervals with Old API\nDESCRIPTION: Shows how to calculate a symmetric confidence interval containing a specified percentage of the distribution's probability mass using the interval method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_26\n\nLANGUAGE: python\nCODE:\n```\na = 0.95\ndist.interval(confidence=a)\n```\n\n----------------------------------------\n\nTITLE: Maxwell Distribution Entropy\nDESCRIPTION: Differential entropy formula for the Maxwell distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_maxwell.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=\\log\\left(\\sqrt{\\frac{2\\pi}{e}}\\right)+\\gamma\n```\n\n----------------------------------------\n\nTITLE: Loading Python-created Cell Array in Octave\nDESCRIPTION: Demonstrates how to load and inspect a MATLAB cell array file created by Python in Octave.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_14\n\nLANGUAGE: octave\nCODE:\n```\noctave:16> load np_cells.mat\noctave:17> obj_arr\n```\n\n----------------------------------------\n\nTITLE: Performing Matrix-Matrix Triangular Multiplications in C\nDESCRIPTION: A template for a function aiming to execute efficient triangular matrix-matrix multiplications for complex numbers in C. Among the configuration options specified are transposition and diagonal properties, supporting flexible matrix computation as outlined by BLAS.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nvoid ztrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb)\n```\n\n----------------------------------------\n\nTITLE: Building SciPy with Custom BLAS/LAPACK Libraries\nDESCRIPTION: Commands for building SciPy with specific BLAS/LAPACK implementations using development builds and wheel creation. Shows options for libblas/liblapack and Accelerate.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/blas_lapack.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ # for a development build\n$ python dev.py build -C-Dblas=blas -C-Dlapack=lapack\n\n$ # to build and install a wheel\n$ python -m build -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack\n$ pip install dist/scipy*.whl\n\n$ # Or, with pip>=23.1, this works too:\n$ python -m pip -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack\n```\n\n----------------------------------------\n\nTITLE: Importing Exponential Distribution from SciPy\nDESCRIPTION: This code snippet shows how to import the Exponential Distribution implementation from SciPy's stats module. It is used to create and work with exponential distributions in Python.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_expon.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import expon\n```\n\n----------------------------------------\n\nTITLE: Switching BLAS Libraries with update-alternatives\nDESCRIPTION: Demonstrates how to use the update-alternatives mechanism on Linux to switch between different BLAS library implementations at the system level, useful for distro-provided SciPy packages.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ update-alternatives --config libblas.so.3\n$ update-alternatives --config liblapack.so.3\n```\n\n----------------------------------------\n\nTITLE: Cloning SciPy Repository for Development\nDESCRIPTION: Git commands to clone the SciPy repository and initialize submodules for development purposes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/scipy/scipy.git\ncd scipy\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Submodule\nDESCRIPTION: Command to run tests for a particular submodule using the --submodule option, demonstrated with the optimize module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -s optimize\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DST Type-I Transform Scaling and Inverse Properties in Python\nDESCRIPTION: This snippet shows how the DST Type-I transform works with its inverse. It demonstrates the scaling factor (2*(N+1) = 12) when applying DST twice and shows how idst() can be used to properly invert the transform without scaling issues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/fft.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\narray([ 1. ,  2. ,  1. , -1. ,  1.5])\n>>>  # scaling factor 2*(N+1) = 12\n>>> dst(dst(x, type=1), type=1)\narray([ 12.,  24.,  12., -12.,  18.])\n>>>  # no scaling factor\n>>> idst(dst(x, type=1), type=1)\narray([ 1. ,  2. ,  1. , -1. ,  1.5])\n```\n\n----------------------------------------\n\nTITLE: Timing PDF Calls for Different Distribution Approaches\nDESCRIPTION: Compares execution speeds of pdf calls from new infrastructure instance versus traditional approach using timeit. Highlights performance gains attainable by transitioning to the new SciPy distribution mechanism.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n%timeit X.pdf(x)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit frozen.pdf(x)\n```\n\nLANGUAGE: python\nCODE:\n```\n%timeit dist.pdf(x, loc=mu, scale=sigma)\n```\n\n----------------------------------------\n\nTITLE: LAPACK Double Precision Matrix Manipulation Function Declarations in C\nDESCRIPTION: Declarations of LAPACK function interfaces for various matrix operations, including orthogonal transformations, factorizations, eigenvalue computation, and linear system solvers. These functions operate on double precision matrices with different structures (general, symmetric, banded, etc.) and perform operations such as QR factorization, Cholesky decomposition, and eigenvalue computations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nvoid dormrz(char *side, char *trans, int *m, int *n, int *k, int *l, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dormtr(char *side, char *uplo, char *trans, int *m, int *n, d *a, int *lda, d *tau, d *c, int *ldc, d *work, int *lwork, int *info)\nvoid dpbcon(char *uplo, int *n, int *kd, d *ab, int *ldab, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dpbequ(char *uplo, int *n, int *kd, d *ab, int *ldab, d *s, d *scond, d *amax, int *info)\nvoid dpbrfs(char *uplo, int *n, int *kd, int *nrhs, d *ab, int *ldab, d *afb, int *ldafb, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dpbstf(char *uplo, int *n, int *kd, d *ab, int *ldab, int *info)\nvoid dpbsv(char *uplo, int *n, int *kd, int *nrhs, d *ab, int *ldab, d *b, int *ldb, int *info)\nvoid dpbsvx(char *fact, char *uplo, int *n, int *kd, int *nrhs, d *ab, int *ldab, d *afb, int *ldafb, char *equed, d *s, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dpbtf2(char *uplo, int *n, int *kd, d *ab, int *ldab, int *info)\nvoid dpbtrf(char *uplo, int *n, int *kd, d *ab, int *ldab, int *info)\nvoid dpbtrs(char *uplo, int *n, int *kd, int *nrhs, d *ab, int *ldab, d *b, int *ldb, int *info)\nvoid dpftrf(char *transr, char *uplo, int *n, d *a, int *info)\nvoid dpftri(char *transr, char *uplo, int *n, d *a, int *info)\nvoid dpftrs(char *transr, char *uplo, int *n, int *nrhs, d *a, d *b, int *ldb, int *info)\nvoid dpocon(char *uplo, int *n, d *a, int *lda, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dpoequ(int *n, d *a, int *lda, d *s, d *scond, d *amax, int *info)\nvoid dpoequb(int *n, d *a, int *lda, d *s, d *scond, d *amax, int *info)\nvoid dporfs(char *uplo, int *n, int *nrhs, d *a, int *lda, d *af, int *ldaf, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dposv(char *uplo, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, int *info)\nvoid dposvx(char *fact, char *uplo, int *n, int *nrhs, d *a, int *lda, d *af, int *ldaf, char *equed, d *s, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dpotf2(char *uplo, int *n, d *a, int *lda, int *info)\nvoid dpotrf(char *uplo, int *n, d *a, int *lda, int *info)\nvoid dpotri(char *uplo, int *n, d *a, int *lda, int *info)\nvoid dpotrs(char *uplo, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, int *info)\nvoid dppcon(char *uplo, int *n, d *ap, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dppequ(char *uplo, int *n, d *ap, d *s, d *scond, d *amax, int *info)\nvoid dpprfs(char *uplo, int *n, int *nrhs, d *ap, d *afp, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dppsv(char *uplo, int *n, int *nrhs, d *ap, d *b, int *ldb, int *info)\nvoid dppsvx(char *fact, char *uplo, int *n, int *nrhs, d *ap, d *afp, char *equed, d *s, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dpptrf(char *uplo, int *n, d *ap, int *info)\nvoid dpptri(char *uplo, int *n, d *ap, int *info)\nvoid dpptrs(char *uplo, int *n, int *nrhs, d *ap, d *b, int *ldb, int *info)\nvoid dpstf2(char *uplo, int *n, d *a, int *lda, int *piv, int *rank, d *tol, d *work, int *info)\nvoid dpstrf(char *uplo, int *n, d *a, int *lda, int *piv, int *rank, d *tol, d *work, int *info)\nvoid dptcon(int *n, d *d, d *e, d *anorm, d *rcond, d *work, int *info)\nvoid dpteqr(char *compz, int *n, d *d, d *e, d *z, int *ldz, d *work, int *info)\nvoid dptrfs(int *n, int *nrhs, d *d, d *e, d *df, d *ef, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *info)\nvoid dptsv(int *n, int *nrhs, d *d, d *e, d *b, int *ldb, int *info)\nvoid dptsvx(char *fact, int *n, int *nrhs, d *d, d *e, d *df, d *ef, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *info)\nvoid dpttrf(int *n, d *d, d *e, int *info)\nvoid dpttrs(int *n, int *nrhs, d *d, d *e, d *b, int *ldb, int *info)\nvoid dptts2(int *n, int *nrhs, d *d, d *e, d *b, int *ldb)\nvoid drscl(int *n, d *sa, d *sx, int *incx)\nvoid dsbev(char *jobz, char *uplo, int *n, int *kd, d *ab, int *ldab, d *w, d *z, int *ldz, d *work, int *info)\nvoid dsbevd(char *jobz, char *uplo, int *n, int *kd, d *ab, int *ldab, d *w, d *z, int *ldz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dsbevx(char *jobz, char *range, char *uplo, int *n, int *kd, d *ab, int *ldab, d *q, int *ldq, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid dsbgst(char *vect, char *uplo, int *n, int *ka, int *kb, d *ab, int *ldab, d *bb, int *ldbb, d *x, int *ldx, d *work, int *info)\nvoid dsbgv(char *jobz, char *uplo, int *n, int *ka, int *kb, d *ab, int *ldab, d *bb, int *ldbb, d *w, d *z, int *ldz, d *work, int *info)\nvoid dsbgvd(char *jobz, char *uplo, int *n, int *ka, int *kb, d *ab, int *ldab, d *bb, int *ldbb, d *w, d *z, int *ldz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dsbgvx(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, d *ab, int *ldab, d *bb, int *ldbb, d *q, int *ldq, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid dsbtrd(char *vect, char *uplo, int *n, int *kd, d *ab, int *ldab, d *d, d *e, d *q, int *ldq, d *work, int *info)\nvoid dsfrk(char *transr, char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *beta, d *c)\nvoid dsgesv(int *n, int *nrhs, d *a, int *lda, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *work, s *swork, int *iter, int *info)\nvoid dspcon(char *uplo, int *n, d *ap, int *ipiv, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dspev(char *jobz, char *uplo, int *n, d *ap, d *w, d *z, int *ldz, d *work, int *info)\nvoid dspevd(char *jobz, char *uplo, int *n, d *ap, d *w, d *z, int *ldz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dspevx(char *jobz, char *range, char *uplo, int *n, d *ap, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid dspgst(int *itype, char *uplo, int *n, d *ap, d *bp, int *info)\nvoid dspgv(int *itype, char *jobz, char *uplo, int *n, d *ap, d *bp, d *w, d *z, int *ldz, d *work, int *info)\nvoid dspgvd(int *itype, char *jobz, char *uplo, int *n, d *ap, d *bp, d *w, d *z, int *ldz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dspgvx(int *itype, char *jobz, char *range, char *uplo, int *n, d *ap, d *bp, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid dsposv(char *uplo, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, d *x, int *ldx, d *work, s *swork, int *iter, int *info)\nvoid dsprfs(char *uplo, int *n, int *nrhs, d *ap, d *afp, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dspsv(char *uplo, int *n, int *nrhs, d *ap, int *ipiv, d *b, int *ldb, int *info)\nvoid dspsvx(char *fact, char *uplo, int *n, int *nrhs, d *ap, d *afp, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dsptrd(char *uplo, int *n, d *ap, d *d, d *e, d *tau, int *info)\nvoid dsptrf(char *uplo, int *n, d *ap, int *ipiv, int *info)\nvoid dsptri(char *uplo, int *n, d *ap, int *ipiv, d *work, int *info)\nvoid dsptrs(char *uplo, int *n, int *nrhs, d *ap, int *ipiv, d *b, int *ldb, int *info)\nvoid dstebz(char *range, char *order, int *n, d *vl, d *vu, int *il, int *iu, d *abstol, d *d, d *e, int *m, int *nsplit, d *w, int *iblock, int *isplit, d *work, int *iwork, int *info)\nvoid dstedc(char *compz, int *n, d *d, d *e, d *z, int *ldz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dstegr(char *jobz, char *range, int *n, d *d, d *e, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, int *isuppz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dstein(int *n, d *d, d *e, int *m, d *w, int *iblock, int *isplit, d *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid dstemr(char *jobz, char *range, int *n, d *d, d *e, d *vl, d *vu, int *il, int *iu, int *m, d *w, d *z, int *ldz, int *nzc, int *isuppz, bint *tryrac, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dsteqr(char *compz, int *n, d *d, d *e, d *z, int *ldz, d *work, int *info)\nvoid dsterf(int *n, d *d, d *e, int *info)\nvoid dstev(char *jobz, int *n, d *d, d *e, d *z, int *ldz, d *work, int *info)\nvoid dstevd(char *jobz, int *n, d *d, d *e, d *z, int *ldz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dstevr(char *jobz, char *range, int *n, d *d, d *e, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, int *isuppz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dstevx(char *jobz, char *range, int *n, d *d, d *e, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid dsycon(char *uplo, int *n, d *a, int *lda, int *ipiv, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dsyconv(char *uplo, char *way, int *n, d *a, int *lda, int *ipiv, d *work, int *info)\nvoid dsyequb(char *uplo, int *n, d *a, int *lda, d *s, d *scond, d *amax, d *work, int *info)\nvoid dsyev(char *jobz, char *uplo, int *n, d *a, int *lda, d *w, d *work, int *lwork, int *info)\nvoid dsyevd(char *jobz, char *uplo, int *n, d *a, int *lda, d *w, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dsyevr(char *jobz, char *range, char *uplo, int *n, d *a, int *lda, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, int *isuppz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dsyevx(char *jobz, char *range, char *uplo, int *n, d *a, int *lda, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *lwork, int *iwork, int *ifail, int *info)\n```\n\n----------------------------------------\n\nTITLE: Defining Negative Binomial Distribution Equations in LaTeX\nDESCRIPTION: This LaTeX code block defines the probability mass function, cumulative distribution function, mean, variance, skewness, and kurtosis of the negative binomial distribution. It uses mathematical notation to express these properties in terms of the distribution parameters n and p.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nbinom.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} p\\left(k;n,p\\right) & = & \\left(\\begin{array}{c} k+n-1\\\\ n-1\\end{array}\\right)p^{n}\\left(1-p\\right)^{k}\\quad k\\geq0\\\\ F\\left(x;n,p\\right) & = & \\sum_{i=0}^{\\left\\lfloor x\\right\\rfloor }\\left(\\begin{array}{c} i+n-1\\\\ i\\end{array}\\right)p^{n}\\left(1-p\\right)^{i}\\quad x\\geq0\\\\  & = & I_{p}\\left(n,\\left\\lfloor x\\right\\rfloor +1\\right)\\quad x\\geq0\\\\ \\mu & = & n\\frac{1-p}{p}\\\\ \\mu_{2} & = & n\\frac{1-p}{p^{2}}\\\\ \\gamma_{1} & = & \\frac{2-p}{\\sqrt{n\\left(1-p\\right)}}\\\\ \\gamma_{2} & = & \\frac{p^{2}+6\\left(1-p\\right)}{n\\left(1-p\\right)}.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Cumulative Distribution Functions for Semicircular Distribution\nDESCRIPTION: This LaTeX code defines the probability density function f(x), cumulative distribution function F(x), and inverse cumulative distribution function G(q) for the Semicircular Distribution on the interval [-1, 1].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_semicircular.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{2}{\\pi}\\sqrt{1-x^{2}}\\\\ F\\left(x\\right) & = & \\frac{1}{2}+\\frac{1}{\\pi}\\left[x\\sqrt{1-x^{2}}+\\arcsin x\\right]\\\\ G\\left(q\\right) & = & F^{-1}\\left(q\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in C - chbgvd\nDESCRIPTION: The function 'chbgvd' computes all eigenvalues and optionally eigenvectors for complex Hermitian band matrices using a divide and conquer method. It involves management of memory through workspace parameters and returns eigenvalues in 'w'. Dependencies include LAPACK, with constraints on matrix input validity.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid chbgvd(char *jobz, char *uplo, int *n, int *ka, int *kb, c *ab, int *ldab, c *bb, int *ldbb, s *w, c *z, int *ldz, c *work, int *lwork, s *rwork, int *lrwork, int *iwork, int *liwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density Function for Generalized Normal Distribution in LaTeX\nDESCRIPTION: This LaTeX equation defines the probability density function (PDF) for the Generalized Normal Distribution with shape parameter β.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gennorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f\\left(x; \\beta\\right) & = &\\frac{\\beta}{2\\Gamma(1/\\beta)} e^{-\\left|x\\right|^{\\beta}} \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Compiling SciPy with Ninja\nDESCRIPTION: Command to compile SciPy using Ninja build system in the specified build directory.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/understanding_meson.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nninja -C build\n```\n\n----------------------------------------\n\nTITLE: QMC Helper Functions\nDESCRIPTION: Helper functions are provided to assess point set quality through discrepancy measures and scale points between ranges.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.7.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats.qmc import discrepancy, update_discrepancy, scale\n\n# Example usage\nquality = discrepancy(points)\nscaled_points = scale(points, l_bounds=[0,0], u_bounds=[1,1])\n```\n\n----------------------------------------\n\nTITLE: Running SciPy Full Test Suite\nDESCRIPTION: Demonstrates how to run the complete test suite for SciPy using the new NumPy testing framework. Requires nose version 0.10 or later.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.7.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> import scipy\n>>> scipy.test('full')\n```\n\n----------------------------------------\n\nTITLE: Calculating p-value from Friedman test\nDESCRIPTION: This snippet extracts and displays the p-value from the result of the Friedman test, previously calculated. The p-value is a crucial measure to assess the statistical significance of the observed differences among the groups.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_friedmanchisquare.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Running SciPy Benchmark Against Current Version\nDESCRIPTION: Command to run a benchmark for a specific SciPy submodule using the dev.py script. This does not record the result.\nSOURCE: https://github.com/scipy/scipy/blob/main/benchmarks/README.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py bench --submodule sparse.Arithmetic\n```\n\n----------------------------------------\n\nTITLE: Using numpy.random.Generator in Examples\nDESCRIPTION: Proper way to create and use NumPy's random number generator in SciPy documentation examples. This is the recommended approach for handling randomness in examples.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> rng = np.random.default_rng()\n>>> sample = rng.random(10)\n```\n\n----------------------------------------\n\nTITLE: Reading Header with C++ Library\nDESCRIPTION: The C++ library segment processes the headers of Matrix Market files. Methods in 'header.hpp' and 'types.hpp' are integral to this initial reading phase. It facilitates extraction of necessary metadata before file content handling.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/README.md#2025-04-14_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"header.hpp\\\"\\n#include \\\"types.hpp\\\"\\n// Process Matrix Market file headers...\\n\"\n```\n\n----------------------------------------\n\nTITLE: Introducing Linear Programming Interface - SciPy Python\nDESCRIPTION: The new function `scipy.optimize.linprog` offers a generic solution for linear programming tasks, allowing users to implement simplex algorithm methods and monitor their progress through callback functions. This function is generally used for optimizing linear objective functions subject to linear equality and inequality constraints.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.linprog\n\n```\n\n----------------------------------------\n\nTITLE: Switching BLAS Libraries with Conda-forge\nDESCRIPTION: Explains how to create a conda environment and switch between different BLAS implementations (OpenBLAS, Netlib, MKL) using conda-forge, allowing for easy runtime testing of different BLAS libraries.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ mamba create -n blas-switch scipy threadpoolctl\n$ mamba activate blas-switch\n$ python -m threadpoolctl -i scipy.linalg\n...\n    \"user_api\": \"blas\",\n    \"internal_api\": \"openblas\",\n\n$ mamba install \"libblas=*=*netlib\"\n...\n  libblas                         3.9.0-21_linux64_openblas --> 3.9.0-5_h92ddd45_netlib\n  libcblas                        3.9.0-21_linux64_openblas --> 3.9.0-5_h92ddd45_netlib\n  liblapack                       3.9.0-21_linux64_openblas --> 3.9.0-5_h92ddd45_netlib\n\n$ mamba install \"libblas=*=*mkl\"\n...\n  libblas                           3.9.0-5_h92ddd45_netlib --> 3.9.0-21_linux64_mkl\n  libcblas                          3.9.0-5_h92ddd45_netlib --> 3.9.0-21_linux64_mkl\n  liblapack                         3.9.0-5_h92ddd45_netlib --> 3.9.0-21_linux64_mkl\n\n$ python -m threadpoolctl -i scipy.linalg\n...\n  \"user_api\": \"blas\",\n  \"internal_api\": \"mkl\",\n```\n\n----------------------------------------\n\nTITLE: Running All SciPy Benchmarks with dev.py\nDESCRIPTION: This command runs all SciPy benchmarks using the dev.py script. It builds SciPy and executes the entire benchmark suite.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npython dev.py bench\n```\n\n----------------------------------------\n\nTITLE: Performing Rank-2 Update on Hermitian Packed Matrix in C\nDESCRIPTION: A function is declared here to conduct a rank-2 update on a Hermitian packed matrix using complex operations. The routine specifies necessary vector inputs and associated transformations within a packed format, sticking to BLAS methodology.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid zhpr2(char *uplo, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *ap)\n```\n\n----------------------------------------\n\nTITLE: Defining Moments for R-distribution in LaTeX\nDESCRIPTION: This LaTeX equation defines the nth moment of the R-distribution using the beta function. It shows how the moments depend on the parity of n and the shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rdist.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\frac{\\left(1+\\left(-1\\right)^{n}\\right)}{2}B\\left(\\frac{n+1}{2},\\frac{c}{2}\\right)\n```\n\n----------------------------------------\n\nTITLE: Calculating NLLF with Specific Parameters\nDESCRIPTION: This snippet calculates the negative log-likelihood (NLLF) with specific parameters for the Weibull distribution. It sets the shape parameter to 0.1, location to the minimum of the data, and scale to 10. It's used to demonstrate the potential for MLE to be poorly behaved in some cases.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n\"stats.weibull_min.nnlf((0.1, np.min(data), 10), data)\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing P-value for One-Sided Test\nDESCRIPTION: This snippet visualizes the p-value for a one-sided Spearman's rho test.  It shades the area under the t-distribution curve representing the p-value for the one-sided test.  It also includes annotations to indicate the p-value and shaded area on the plot.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_spearmanr.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 5))\nplot(ax)\npvalue = dist.sf(transformed)\nannotation = (f'p-value={pvalue:.6f}\\n(shaded area)')\nprops = dict(facecolor='black', width=1, headwidth=5, headlength=8)\n_ = ax.annotate(annotation, (3, 0.018), (3.5, 0.03), arrowprops=props)\ni = t_vals >= transformed\nax.fill_between(t_vals[i], y1=0, y2=pdf[i], color='C0')\nax.set_xlim(1, 5)\nax.set_ylim(0, 0.1)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Referencing Power Normal Distribution Implementation in Python\nDESCRIPTION: This line references the implementation of the Power Normal Distribution in the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powernorm.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.powernorm\n```\n\n----------------------------------------\n\nTITLE: Integrating PARPACK in CMake project\nDESCRIPTION: This CMake snippet demonstrates how to integrate PARPACK (parallel ARPACK) into a CMake-based project. It finds both ARPACK and MPI packages and links them to an executable target.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nFIND_PACKAGE(arpackng)\nFIND_PACKAGE(MPI REQUIRED COMPONENTS Fortran)\nADD_EXECUTABLE(main main.f)\nTARGET_INCLUDE_DIRECTORIES(main PUBLIC PARPACK::PARPACK)\nTARGET_LINK_LIBRARIES(main PARPACK::PARPACK)\nTARGET_INCLUDE_DIRECTORIES(main PUBLIC MPI::MPI_Fortran)\nTARGET_LINK_LIBRARIES(main MPI::MPI_Fortran)\n```\n\n----------------------------------------\n\nTITLE: Performing Hermitian Matrix-Matrix Operations in C\nDESCRIPTION: This C function declaration represents a routine for Hermitian matrix-matrix multiplication operations. It supports both left- and right-side operations, depending on the 'side' parameter, involving complex matrices represented by the data type 'z'. No actual computation is performed here - it defines the function's signature, which is expected to be implemented elsewhere in the codebase.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid zhemm(char *side, char *uplo, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy to Local Directory\nDESCRIPTION: Commands to install the built SciPy package to a local directory and set up the Python path for testing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/understanding_meson.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmeson install -C build\nexport PYTHONPATH=$PWD/build-install/lib/python3.11/site-packages/\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for scipy.interpolate Module in reStructuredText\nDESCRIPTION: This snippet configures the autodoc extension in Sphinx to generate documentation for the scipy.interpolate module. It specifies to exclude members, inherited members, and special members from the generated output.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/interpolate.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.interpolate\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Debugging Python Example with GDB\nDESCRIPTION: Example Python script showing how to set up breakpoints for debugging linear algebra operations with GDB.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom scipy import linalg\nn = 40\nrng = np.random.default_rng(1234)\nx = rng.uniform(size=n)\na = x[:, None] @ x[None, :] + np.identity(n)\n\nbreakpoint()      # note a breakpoint\nlinalg.cholesky(a)\n```\n\n----------------------------------------\n\nTITLE: Referencing the hybr method implementation in SciPy's root function\nDESCRIPTION: This is a reStructuredText directive that documents the 'hybr' method for SciPy's root finding function. It specifies that the implementation is in the scipy.optimize._minpack_py._root_hybr module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-hybr.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.root-hybr:\n\nroot(method='hybr')\n----------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._minpack_py._root_hybr\n   :method: hybr\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy Build Dependencies in Conda Environment\nDESCRIPTION: Command to install only the required build dependencies for SciPy in a Conda environment.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmamba install python numpy cython pythran pybind11 compilers openblas meson-python pkg-config\n```\n\n----------------------------------------\n\nTITLE: Calculating Expected Values with scipy.integrate.quad\nDESCRIPTION: Demonstrates how to compute the expected value directly using scipy.integrate.quad by defining an appropriate integrand function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import integrate\ndef f(x): return x**4 * stats.norm.pdf(x)\nintegrate.quad(f, a=-np.inf, b=np.inf)  # integral estimate, estimate of the error\n```\n\n----------------------------------------\n\nTITLE: Defining Power Normal Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Power Normal Distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powernorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & c\\phi\\left(x\\right)\\left(\\Phi\\left(-x\\right)\\right)^{c-1}\\\\ F\\left(x;c\\right) & = & 1-\\left(\\Phi\\left(-x\\right)\\right)^{c}\\\\ G\\left(q;c\\right) & = & -\\Phi^{-1}\\left(\\left(1-q\\right)^{1/c}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Identifying Changes in Sparse Function Naming for Migration\nDESCRIPTION: This snippet lists the functions that have changed names during the migration process along with the original and new names for reference.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n=========\nFunction    New function   Comments\n=========\neye         eye_array\nidentity    eye_array\ndiags       diags_array    keyword-only input\nspdiags     dia_array      shape as 2-tuple\nbmat        block\nrand        random_array   shape as 2-tuple and default_rng\nrandom      random_array   shape as 2-tuple and default_rng\n=========\n```\n\n----------------------------------------\n\nTITLE: Generated File Comment in plaintext\nDESCRIPTION: Comment indicating this file was automatically generated by a Python script called '_cython_signature_generator.py', suggesting the content is machine-generated Cython code.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was generated by _cython_signature_generator.py\n```\n\n----------------------------------------\n\nTITLE: Defining Survival Function for Discrete Distributions in LaTeX\nDESCRIPTION: This LaTeX snippet defines the survival function for a discrete distribution. It shows that the survival function is the complement of the cumulative distribution function, representing the probability that the random variable is strictly larger than k.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\nS\\left(x\\right)=1-F\\left(x\\right)=P\\left[X>k\\right]\n```\n\n----------------------------------------\n\nTITLE: Defining Normal Distribution Moments in LaTeX\nDESCRIPTION: Mathematical expressions for the mean (m), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) of the Normal Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_norm.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} m_{d}=m_{n}=\\mu & = & 0\\\\\\mu_{2} & = & 1\\\\\\gamma_{1} & = & 0\\\\\\gamma_{2} & = & 0\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Implementing Beta Distribution in SciPy\nDESCRIPTION: Reference to the SciPy implementation of the Beta distribution which provides computational functions for all the mathematical properties described in the document.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_beta.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.beta\n```\n\n----------------------------------------\n\nTITLE: Trust-Region Unconstrained Minimization Algorithms\nDESCRIPTION: The `scipy.optimize.minimize` function has been enhanced with new trust-region solvers, `dogleg` and `trust-ncg`, for unconstrained minimization tasks. Dependencies include SciPy and optimization problem definitions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.13.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n# Example of using the dogleg solver for optimization\nfrom scipy.optimize import minimize\n\n# Define an objective function\ndef objective(x):\n    return (x - 1) ** 2\n\n# Perform optimization using the dogleg method\nresult = minimize(objective, x0=0, method='dogleg')\nprint('Optimal value:', result.x)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Support for Fitting with Bounds\nDESCRIPTION: The `scipy.optimize.curve_fit` function now includes support for fitting with bounds, enhancing its usability for users needing constrained optimization during fitting.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.curve_fit\n```\n\n----------------------------------------\n\nTITLE: Adding Remote for Author's Fork in Git Bash\nDESCRIPTION: This Git command adds a new remote pointing to the author's fork of SciPy. It's useful for collaborating on pull requests. REMOTE_NAME and AUTHOR should be replaced with appropriate values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/reviewing_prs.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add REMOTE_NAME https://github.com/AUTHOR/scipy.git\n```\n\n----------------------------------------\n\nTITLE: Comparison of Intervals with Different Orders\nDESCRIPTION: This snippet compares the number of intervals required for cubic and quintic Hermite interpolation. It shows that higher orders of interpolation can result in a fewer number of intervals for a given distribution and u-resolution, potentially improving efficiency.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling_hinv.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> rng3 = NumericalInverseHermite(dist, order=3)\n>>> rng5 = NumericalInverseHermite(dist, order=5)\n>>> rng3.intervals, rng5.intervals\n(3000, 522)\n```\n\n----------------------------------------\n\nTITLE: Analyzing SciPy Build Dependencies in JSON Format\nDESCRIPTION: This JSON snippet shows the detected dependencies for the SciPy build process. It includes information about Python, OpenBLAS, and threading support, detailing their versions, compile arguments, and link arguments. The file provides essential information for understanding the build environment and requirements.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/introspecting_a_build.rst#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n   {\n      \"name\":\"python\",\n      \"version\":\"3.10\",\n      \"compile_args\":[\n         \"-I/home/username/anaconda3/envs/scipy-dev/include/python3.10\"\n      ],\n      \"link_args\":[\n\n      ]\n   },\n   {\n      \"name\":\"openblas\",\n      \"version\":\"0.3.20\",\n      \"compile_args\":[\n         \"-I/home/username/anaconda3/envs/scipy-dev/include\"\n      ],\n      \"link_args\":[\n         \"/home/username/anaconda3/envs/scipy-dev/lib/libopenblas.so\"\n      ]\n   },\n   {\n      \"name\":\"threads\",\n      \"version\":\"unknown\",\n      \"compile_args\":[\n         \"-pthread\"\n      ],\n      \"link_args\":[\n         \"-pthread\"\n      ]\n   }\n]\n```\n\n----------------------------------------\n\nTITLE: Instantiating rv_continuous_frozen and Checking Type\nDESCRIPTION: Instantiates a frozen distribution using the call method and checks its type as 'rv_continuous_frozen'. This involves basic SciPy usage without specific input parameters. Used for fixed distribution behavior applications.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrozen = stats.norm()\ntype(frozen)\n```\n\n----------------------------------------\n\nTITLE: C++ Third-party Thread Pool Implementation\nDESCRIPTION: The `thirdparty/task_thread_pool` is a lightweight thread pool implementation similar to Python's `ThreadPoolExecutor`. It's designed to provide effective task parallelism without relying on more extensive libraries like TBB.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/README.md#2025-04-14_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n\"// Thread pool implementation based on C++ threads\\n#include \\\"thirdparty/task_thread_pool\\\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Building and Testing SciPy in Bash\nDESCRIPTION: This command builds the SciPy code and runs the test suite with verbose output. It uses the dev.py script, which is part of the SciPy development tools.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/reviewing_prs.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -v\n```\n\n----------------------------------------\n\nTITLE: Initializing SciPy Development Environment\nDESCRIPTION: Commands to clone the SciPy repository, initialize submodules, and set up the development environment using conda.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/understanding_meson.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:scipy/scipy.git\ngit submodule update --init\nmamba env create -f environment.yml\nmamba activate scipy-dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving MATLAB Cell Array in Octave\nDESCRIPTION: Shows how to create a cell array in Octave and save it as a MATLAB file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_11\n\nLANGUAGE: octave\nCODE:\n```\noctave:14> my_cells = {1, [2, 3]}\noctave:15> save -6 octave_cells.mat my_cells\n```\n\n----------------------------------------\n\nTITLE: Student t Distribution Entropy in LaTeX\nDESCRIPTION: Mathematical formula for the entropy of the Student t distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_t.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=\\frac{\\nu+1}{2} \\left[\\psi \\left(\\frac{1+\\nu}{2} \\right) -\\psi \\left(\\frac{\\nu}{2} \\right) \\right] + \\ln \\left[ \\sqrt{\\nu} B \\left( \\frac{\\nu}{2}, \\frac{1}{2} \\right) \\right]\n```\n\n----------------------------------------\n\nTITLE: Initializing Vitamin C Tooth Growth Datasets in NumPy\nDESCRIPTION: Creating NumPy arrays to represent tooth growth measurements for small, medium, and large vitamin C dose groups. Each array contains 20 measurements in microns.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_fligner.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nsmall_dose = np.array([\n    4.2, 11.5, 7.3, 5.8, 6.4, 10, 11.2, 11.2, 5.2, 7,\n    15.2, 21.5, 17.6, 9.7, 14.5, 10, 8.2, 9.4, 16.5, 9.7\n])\nmedium_dose = np.array([\n    16.5, 16.5, 15.2, 17.3, 22.5, 17.3, 13.6, 14.5, 18.8, 15.5,\n    19.7, 23.3, 23.6, 26.4, 20, 25.2, 25.8, 21.2, 14.5, 27.3\n])\nlarge_dose = np.array([\n    23.6, 18.5, 33.9, 25.5, 26.4, 32.5, 26.7, 21.5, 23.3, 29.5,\n    25.5, 26.4, 22.4, 24.5, 24.8, 30.9, 26.4, 27.3, 29.4, 23\n])\n```\n\n----------------------------------------\n\nTITLE: Building SciPy submodule with dev.py\nDESCRIPTION: Uses the dev.py interface to build a specific SciPy submodule (linalg in this case) after Meson configuration. This command leverages the previously set Meson configuration.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py -s linalg\n```\n\n----------------------------------------\n\nTITLE: Analyzing Rice Distribution Parameters using SciPy\nDESCRIPTION: This snippet utilizes the SciPy library to analyze the Rice distribution, which is defined by shape parameter 'b' and is applicable for non-negative values. The mathematical functions such as the probability density function (PDF) and cumulative distribution function (CDF) are essential for understanding the distribution's behavior.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rice.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import rice\n\n# Parameters for the Rice distribution\nb = 2.0  # shape parameter\nx = np.linspace(0, 10, 100)  # support range\npdf = rice.pdf(x, b)  # probability density function\ncdf = rice.cdf(x, b)  # cumulative distribution function\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Branch\nDESCRIPTION: Command to set the upstream branch for simplified future pushes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit push --set-upstream origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for scipy.ndimage\nDESCRIPTION: Sphinx autodoc directive configuration that imports the scipy.ndimage module while excluding module members, inherited members, and special members from the documentation output.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/ndimage.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: scipy.ndimage\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run of GitHub Actions\nDESCRIPTION: Simulates the execution of GitHub Actions workflows without actually running them.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nact -n\n```\n\n----------------------------------------\n\nTITLE: Calling minimize with L-BFGS-B method in SciPy\nDESCRIPTION: This snippet demonstrates how to call the minimize function from scipy.optimize using the L-BFGS-B method. The function is implemented in the _minimize_lbfgsb module of scipy.optimize.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-lbfgsb.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.minimize(method='L-BFGS-B')\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy Curve Fit Function - Submodule Method\nDESCRIPTION: Shows an alternative approach to import curve_fit by importing the optimize submodule directly as a namespace.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy import optimize\nresult = optimize.curve_fit(...)\n```\n\n----------------------------------------\n\nTITLE: Reading Shape Parameters of a Distribution Instance\nDESCRIPTION: Accesses and prints shape parameters of an instantiated distribution object as attributes. These parameters are read-only and essential in various probability distribution calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nX.mu, X.sigma\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating NumPy Array for Data\nDESCRIPTION: This snippet imports the NumPy library and creates an array representing weights recorded in a medical study, which is used for normality testing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_shapiro.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nx = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236])\n```\n\n----------------------------------------\n\nTITLE: Matrix Operations Function Declarations (LAPACK)\nDESCRIPTION: Function declarations for LAPACK routines handling various matrix operations including Givens rotations, SVD updates, tridiagonal solvers, and eigenvalue computations. These functions operate on double precision (type d) arrays.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid dgsvj0(char *jobv, int *m, int *n, d *a, int *lda, d *d, d *sva, int *mv, d *v, int *ldv, d *eps, d *sfmin, d *tol, int *nsweep, d *work, int *lwork, int *info);\nvoid dgsvj1(char *jobv, int *m, int *n, int *n1, d *a, int *lda, d *d, d *sva, int *mv, d *v, int *ldv, d *eps, d *sfmin, d *tol, int *nsweep, d *work, int *lwork, int *info);\nvoid dgtcon(char *norm, int *n, d *dl, d *d, d *du, d *du2, int *ipiv, d *anorm, d *rcond, d *work, int *iwork, int *info);\n```\n\n----------------------------------------\n\nTITLE: Johnson SB Distribution Mathematical Equations\nDESCRIPTION: Mathematical equations showing the probability density function (f), cumulative distribution function (F), and quantile function (G) for the Johnson SB distribution with shape parameters a and b. Support is x in [0,1].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_johnsonsb.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;a,b\\right) & = & \\frac{b}{x\\left(1-x\\right)}\\phi\\left(a+b\\log\\frac{x}{1-x}\\right)\\\\\nF\\left(x;a,b\\right) & = & \\Phi\\left(a+b\\log\\frac{x}{1-x}\\right)\\\\\nG\\left(q;a,b\\right) & = & \\frac{1}{1+\\exp\\left(-\\frac{1}{b}\\left(\\Phi^{-1}\\left(q\\right)-a\\right)\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Beta Prime Distribution Primary Functions\nDESCRIPTION: Mathematical definitions of the probability density function (f), cumulative distribution function (F), and inverse CDF (G) for the Beta Prime distribution with shape parameters alpha and beta.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_betaprime.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\alpha,\\beta\\right) & = & \\frac{\\Gamma\\left(\\alpha+\\beta\\right)}{\\Gamma\\left(\\alpha\\right)\\Gamma\\left(\\beta\\right)}x^{\\alpha-1}\\left(1+x\\right)^{-\\alpha-\\beta}\\\\ F\\left(x;\\alpha,\\beta\\right) & = & \\frac{\\Gamma\\left(\\alpha+\\beta\\right)}{\\alpha\\Gamma\\left(\\alpha\\right)\\Gamma\\left(\\beta\\right)}x^{\\alpha}\\,_{2}F_{1}\\left(\\alpha+\\beta,\\alpha;1+\\alpha;-x\\right)\\\\ G\\left(q;\\alpha,\\beta\\right) & = & F^{-1}\\left(x;\\alpha,\\beta\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Using svds function with LobPCG solver in SciPy\nDESCRIPTION: This snippet demonstrates how to call the svds function with the LobPCG solver. The function is part of the scipy.sparse.linalg module and is designed to compute the singular value decomposition of a matrix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.linalg.svds-lobpcg.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsvds(solver='lobpcg')\n```\n\n----------------------------------------\n\nTITLE: Pull Request List in RST Format\nDESCRIPTION: A reStructuredText formatted list of pull requests with links and descriptions of changes made to the SciPy project.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.9.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n* `#16245 <https://github.com/scipy/scipy/pull/16245>`__: DEP: Execute deprecation of pinv2\n* `#16247 <https://github.com/scipy/scipy/pull/16247>`__: DOC:linalg: Remove references to removed pinv2 function\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson build with debug type\nDESCRIPTION: Sets up a Meson build configuration with debug build type and specifies an installation prefix. This is typically used for development and debugging purposes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeson setup build --buildtype debug  --prefix=$PWD/build-install\n```\n\n----------------------------------------\n\nTITLE: Building SciPy with default compiler (GCC)\nDESCRIPTION: Uses the dev.py interface to build SciPy with the default compiler (assumed to be GCC). This command builds in the default 'build' directory.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py build\n```\n\n----------------------------------------\n\nTITLE: Building ARPACK-NG with Python 3 Support\nDESCRIPTION: Commands to build ARPACK-NG with Python 3 support using CMake. This enables the pyarpack module which exposes the C++ eigensolver in Python via Boost.Python.Numpy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build\n$ cd build\n$ cmake -D EXAMPLES=ON -D ICB=ON -D EIGEN=ON -D PYTHON3=ON ..\n$ make all check\n```\n\n----------------------------------------\n\nTITLE: Referencing Discrete Uniform Distribution Implementation in SciPy\nDESCRIPTION: Points to the scipy.stats.randint module for implementation of discrete uniform distribution random variable generation\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_randint.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.randint\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy Stats Package\nDESCRIPTION: Demonstrates how to import the SciPy stats package for working with probability distributions\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/probability_distributions.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy import stats\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import norm\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Function Example\nDESCRIPTION: Example command for running the test_unknown_solvers_and_options function from the test_linprog.py file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.optimize.tests.test_linprog::test_unknown_solvers_and_options\n```\n\n----------------------------------------\n\nTITLE: Basic Git Workflow Commands\nDESCRIPTION: Common Git commands used in the development workflow for checking status, viewing changes, staging, committing, and pushing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit status\ngit diff\ngit add modified_file\ngit commit\ngit push origin my-new-feature\n```\n\n----------------------------------------\n\nTITLE: LAPACK Issue Reproducer in C\nDESCRIPTION: C code example demonstrating how to reproduce a LAPACK issue (from scipy#11577) with direct calls to LAPACK functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_12\n\nLANGUAGE: C\nCODE:\n```\ngcc ggev_repro_gh_11577.c \\\n  -I$PWD/../flexiblas-setup/built-libs/include/ \\\n  -L$PWD/../flexiblas-setup/built-libs/lib -lopenblas\n$ ./a.out\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Array\nDESCRIPTION: A space-separated array of floating point numbers in scientific notation format, with values generally ranging between 11 and 16 with exponent e+01. Each number is formatted to 7 decimal places.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-seuclidean-ml.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1.4330520e+01   1.4635426e+01   1.3450855e+01   1.4761140e+01   1.3508642e+01   1.5434417e+01   1.3887693e+01   1.5166776e+01   1.3966038e+01   1.4950451e+01   1.4564587e+01   1.3834201e+01   1.4347008e+01   1.5641962e+01   1.4689053e+01   1.4418720e+01   1.4545856e+01   1.4151822e+01   1.4669017e+01   1.5150750e+01   1.3770166e+01   1.3288969e+01   1.4048191e+01   1.4049959e+01   1.4164158e+01   1.3727834e+01   1.4074687e+01   1.4321303e+01   1.2497330e+01   1.3820273e+01   1.4441030e+01   1.4780222e+01   1.2504339e+01   1.5022245e+01   1.4263650e+01   1.3704507e+01   1.3694385e+01   1.3667517e+01   1.3177468e+01   1.4391931e+01\n```\n\n----------------------------------------\n\nTITLE: Wald Distribution Statistical Moments in LaTeX\nDESCRIPTION: Mathematical expressions for the statistical moments of the Wald distribution, including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), and median (md).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_wald.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & 1\\\\ \\mu_{2} & = & 1\\\\ \\gamma_{1} & = & 3\\\\ \\gamma_{2} & = & 15\\\\ m_{d} & = & \\frac{1}{2}\\left(\\sqrt{13}-3\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Performing Bartlett's Statistical Test\nDESCRIPTION: Calculates Bartlett's test statistic to determine variance equality across multiple sample groups using SciPy's statistical functions\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_bartlett.md#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\\nres = stats.bartlett(small_dose, medium_dose, large_dose)\\nres.statistic\n```\n\n----------------------------------------\n\nTITLE: 1D Correlation with scipy.ndimage\nDESCRIPTION: Demonstrates the use of correlate1d function from scipy.ndimage to perform 1D correlation. It shows how the origin parameter affects the result.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.ndimage import correlate1d\n>>> a = [0, 0, 0, 1, 0, 0, 0]\n>>> correlate1d(a, [1, 1, 1])\narray([0, 0, 1, 1, 1, 0, 0])\n>>> correlate1d(a, [1, 1, 1], origin = -1)\narray([0, 1, 1, 1, 0, 0, 0])\n```\n\n----------------------------------------\n\nTITLE: Calling Cython Callback from Python\nDESCRIPTION: This Python code demonstrates calling the Cython callback within Python using LowLevelCallable.from_cython\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n\"# script.py\n\n   import ctypes\n   import numpy as np\n   from scipy import ndimage, LowLevelCallable\n\n   import example\n\n   shift = 0.5\n\n   user_data = ctypes.c_double(shift)\n   ptr = ctypes.cast(ctypes.pointer(user_data), ctypes.c_void_p)\n   callback = LowLevelCallable.from_cython(example, \\\"transform\\\", ptr)\n   im = np.arange(12).reshape(4, 3).astype(np.float64)\n   print(ndimage.geometric_transform(im, callback))\"\n```\n\n----------------------------------------\n\nTITLE: Defining Johnson SU Distribution Mathematical Formula in LaTeX\nDESCRIPTION: Mathematical formulation of the Johnson SU Distribution with shape parameters a and b, showing the probability density function f(x;a,b), cumulative distribution function F(x;a,b), and percent point function G(q;a,b).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_johnsonsu.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;a,b\\right) & = & \\frac{b}{\\sqrt{x^{2}+1}}\\phi\\left(a+b\\log\\left(x+\\sqrt{x^{2}+1}\\right)\\right)\\\\\nF\\left(x;a,b\\right) & = & \\Phi\\left(a+b\\log\\left(x+\\sqrt{x^{2}+1}\\right)\\right)\\\\\nG\\left(q;a,b\\right) & = & \\sinh\\left(\\frac{\\Phi^{-1}\\left(q\\right)-a}{b}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Running a Test Method from a Test Class Example\nDESCRIPTION: Example command for running the test_nontrivial_problem_with_guess method from the TestLinprogRSCommon class.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.optimize.tests.test_linprog::TestLinprogRSCommon::test_nontrivial_problem_with_guess\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for scipy.linalg Module\nDESCRIPTION: Sphinx automodule directive configuration that sets up documentation for the scipy.linalg module. It excludes member documentation, inherited members, and special members to generate streamlined module-level documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/linalg.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: scipy.linalg\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Building SciPy using dev.py\nDESCRIPTION: Command to build SciPy using the dev.py developer interface in an activated development environment.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py build\n```\n\n----------------------------------------\n\nTITLE: Scipy Special Module Documentation with automodule\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText to generate documentation for the `scipy.special` module. The `:no-members:`, `:no-inherited-members:`, and `:no-special-members:` options are used to exclude specific types of members from the documentation output. This is commonly used to provide a high-level overview without overwhelming the documentation with implementation details.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/special.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.special\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Checking Shared Library Dependencies on macOS\nDESCRIPTION: Shows how to use the otool command on macOS to examine dependencies of shared libraries, which helps identify which BLAS implementation is linked to SciPy's linear algebra modules.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n% otool -L build/scipy/linalg/_fblas.cpython-310-darwin.so\nbuild/scipy/linalg/_fblas.*.so:\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1336.61.1)\n    @rpath/libopenblas.0.dylib (compatibility version 0.0.0, current version 0.0.0)\n```\n\n----------------------------------------\n\nTITLE: Calculating Negative Log-Likelihood with Old API\nDESCRIPTION: Shows how to compute the negative log-likelihood function for a normal distribution given data and parameters using the nnlf method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nmu = 0\nsigma = 1\ndata = stats.norm.rvs(size=100, loc=mu, scale=sigma)\nstats.norm.nnlf((mu, sigma), data)\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for HalfCauchy Distribution\nDESCRIPTION: This snippet presents the formula for the entropy h[X] of the HalfCauchy distribution, along with its numerical approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfcauchy.rst#2025-04-14_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} h\\left[X\\right] & = & \\log\\left(2\\pi\\right)\\\\  & \\approx & 1.8378770664093454836.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Arrays with Numpy\nDESCRIPTION: This code snippet initializes arrays representing tooth growth measurements for small, medium, and large vitamin C doses using numpy arrays to facilitate statistical testing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nsmall_dose = np.array([\n    4.2, 11.5, 7.3, 5.8, 6.4, 10, 11.2, 11.2, 5.2, 7,\n    15.2, 21.5, 17.6, 9.7, 14.5, 10, 8.2, 9.4, 16.5, 9.7\n])\nmedium_dose = np.array([\n    16.5, 16.5, 15.2, 17.3, 22.5, 17.3, 13.6, 14.5, 18.8, 15.5,\n    19.7, 23.3, 23.6, 26.4, 20, 25.2, 25.8, 21.2, 14.5, 27.3\n])\nlarge_dose = np.array([\n    23.6, 18.5, 33.9, 25.5, 26.4, 32.5, 26.7, 21.5, 23.3, 29.5,\n    25.5, 26.4, 22.4, 24.5, 24.8, 30.9, 26.4, 27.3, 29.4, 23\n])\n```\n\n----------------------------------------\n\nTITLE: Floating Point Data Array\nDESCRIPTION: Large collection of scientific notation numeric values representing complex numerical data\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-correlation-ml-iris.txt#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[\n    4.1316779e-01, 4.7015919e-01, ..., 5.9626248e-01\n]\n```\n\n----------------------------------------\n\nTITLE: Alpha Distribution Log-Likelihood Function in LaTeX\nDESCRIPTION: Mathematical expression for the log-likelihood function of the Alpha distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_alpha.rst#2025-04-14_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\nl_{\\mathbf{x}}\\left(\\alpha\\right)=N\\log\\left[\\Phi\\left(\\alpha\\right)\\sqrt{2\\pi}\\right]+2N\\overline{\\log\\mathbf{x}}+\\frac{N}{2}\\alpha^{2}-\\alpha\\overline{\\mathbf{x}^{-1}}+\\frac{1}{2}\\overline{\\mathbf{x}^{-2}}\n```\n\n----------------------------------------\n\nTITLE: Weibull Min Distribution Statistical Properties in LaTeX\nDESCRIPTION: Defines various statistical properties including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (md), and median (mn).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_weibull_min.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    \\mu & = & \\Gamma\\left(1+\\frac{1}{c}\\right) \\\\\n    \\mu_{2} & = & \\Gamma\\left(1+\\frac{2}{c}\\right) -\n                  \\Gamma^{2}\\left(1+\\frac{1}{c}\\right) \\\\\n    \\gamma_{1} & = & \\frac{\\Gamma\\left(1+\\frac{3}{c}\\right) -\n                           3\\Gamma\\left(1+\\frac{2}{c}\\right)\\Gamma\\left(1+\\frac{1}{c}\\right) +\n                           2\\Gamma^{3}\\left(1+\\frac{1}{c}\\right)}\n                          {\\mu_{2}^{3/2}} \\\\\n    \\gamma_{2} & = & \\frac{\\Gamma\\left(1+\\frac{4}{c}\\right) -\n                           4\\Gamma\\left(1+\\frac{1}{c}\\right)\\Gamma\\left(1+\\frac{3}{c}\\right) +\n                           6\\Gamma^{2}\\left(1+\\frac{1}{c}\\right)\\Gamma\\left(1+\\frac{2}{c}\\right) -\n                           3\\Gamma^{4}\\left(1+\\frac{1}{c}\\right)}\n                          {\\mu_{2}^{2}} - 3 \\\\\n    m_{d} & = & \\begin{cases}\n                    \\left(\\frac{c-1}{c}\\right)^{\\frac{1}{c}} & \\text{if}\\; c > 1 \\\\\n                    0 & \\text{if}\\; c <= 1\n                \\end{cases} \\\\\n    m_{n} & = & \\ln\\left(2\\right)^{\\frac{1}{c}}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Arcsine Distribution Core Functions LaTeX Definition\nDESCRIPTION: Mathematical definitions of the probability density function (f(x)), cumulative distribution function (F(x)), and inverse CDF (G(q)) for the Arcsine distribution defined over [0,1].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_arcsine.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{\\pi\\sqrt{x\\left(1-x\\right)}}\\\\ F\\left(x\\right) & = & \\frac{2}{\\pi}\\arcsin\\left(\\sqrt{x}\\right)\\\\ G\\left(q\\right) & = & \\sin^{2}\\left(\\frac{\\pi}{2}q\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Documentation Reference for scipy.optimize.minimize with COBYLA method\nDESCRIPTION: A reStructuredText directive that documents the COBYLA method for scipy.optimize.minimize function. It references the implementation location in the scipy.optimize._cobyla_py._minimize_cobyla module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-cobyla.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.minimize-cobyla:\n\nminimize(method='COBYLA')\n----------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._cobyla_py._minimize_cobyla\n   :method: COBYLA\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream SciPy Repository\nDESCRIPTION: Adds the main SciPy repository as a remote named 'upstream'. This allows pulling changes from the main project.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/development_setup.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd scipy\ngit remote add upstream https://github.com/scipy/scipy.git\n```\n\n----------------------------------------\n\nTITLE: Installing MinGW-w64 Compilers on Windows with Chocolatey\nDESCRIPTION: Command to install MinGW-w64 compilers on Windows using Chocolatey package manager, which are recommended for building SciPy on Windows.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nchoco install rtools -y --no-progress --force --version=4.0.0.20220206\n```\n\n----------------------------------------\n\nTITLE: Verifying Close Equality of CDF Results\nDESCRIPTION: This snippet checks the closeness of CDF calculation results between the new and old infrastructures using `np.isclose`. It confirms consistency across different methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_68\n\nLANGUAGE: ipython3\nCODE:\n```\nnp.isclose(X.cdf(x), stats.gausshyper.cdf(x, a, b, c, z))\n```\n\n----------------------------------------\n\nTITLE: Installing ARPACK-NG using Autotools\nDESCRIPTION: Complete sequence of commands to configure, build, test, and install ARPACK-NG using the Autotools build system with MPI support enabled.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sh bootstrap\n$ ./configure --enable-mpi\n$ make\n$ make check\n$ sudo make install\n```\n\n----------------------------------------\n\nTITLE: Beta Prime Distribution Statistical Moments\nDESCRIPTION: Definitions of various statistical moments including mean, variance, skewness, and kurtosis for the Beta Prime distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_betaprime.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\frac{\\alpha}{\\beta-1}\\quad\\textrm{for }\\beta>1\\\\ \\mu_{2} & = & \\frac{\\alpha\\left(\\alpha+1\\right)}{\\left(\\beta-2\\right)\\left(\\beta-1\\right)}-\\frac{\\alpha^{2}}{\\left(\\beta-1\\right)^{2}}\\quad\\textrm{for }\\beta>2\\\\ \\gamma_{1} & = & \\frac{\\frac{\\alpha\\left(\\alpha+1\\right)\\left(\\alpha+2\\right)}{\\left(\\beta-3\\right)\\left(\\beta-2\\right)\\left(\\beta-1\\right)}-3\\mu\\mu_{2}-\\mu^{3}}{\\mu_{2}^{3/2}}\\quad\\textrm{for }\\beta>3\\\\ \\gamma_{2} & = & \\frac{\\mu_{4}}{\\mu_{2}^{2}}-3\\\\ \\mu_{4} & = & \\frac{\\alpha\\left(\\alpha+1\\right)\\left(\\alpha+2\\right)\\left(\\alpha+3\\right)}{\\left(\\beta-4\\right)\\left(\\beta-3\\right)\\left(\\beta-2\\right)\\left(\\beta-1\\right)}-4\\mu\\mu_{3}-6\\mu^{2}\\mu_{2}-\\mu^{4}\\quad\\textrm{for }\\beta>4\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-Commit Hook for SciPy Code Style Checking\nDESCRIPTION: Installs a Git pre-commit hook that checks each commit for proper code style according to SciPy guidelines. This should be run from the root of the SciPy repository.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/hacking.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp tools/pre-commit-hook.py .git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Running PEP8 Linting on Specific Files\nDESCRIPTION: Command to run PEP8 linting checks on specific files or directories using the lint.py tool with the --files option.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/pep8.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython tools/lint.py --files scipy/odr/models.py scipy/ndimage\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in C - checon\nDESCRIPTION: The 'checon' function estimates the reciprocal condition number of a complex Hermitian matrix using the factorization obtained from 'chetrf'. It determines numerical stability and inverses, with outputs through condition number estimates. It requires previous matrix factorization and certain LAPACK dependencies.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid checon(char *uplo, int *n, c *a, int *lda, int *ipiv, s *anorm, s *rcond, c *work, int *info)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment for SciPy Development (Windows)\nDESCRIPTION: Commands to create and activate a virtual environment for SciPy development on Windows systems.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nvenv\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Mathematical Definition of Inverted Weibull Distribution\nDESCRIPTION: Provides the formula for probability density function (PDF), cumulative distribution function (CDF), and quantile function of the Inverted Weibull Distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_invweibull.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & cx^{-c-1}\\exp\\left(-x^{-c}\\right)\\\\ F\\left(x;c\\right) & = & \\exp\\left(-x^{-c}\\right)\\\\ G\\left(q;c\\right) & = & \\left(-\\log q\\right)^{-1/c}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy Build Dependencies on Fedora Linux\nDESCRIPTION: Command to install necessary build dependencies for SciPy on Fedora Linux systems using dnf package manager.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install gcc-gfortran python3-devel openblas-devel lapack-devel pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Calculating Moments and Shape Parameters for Anglit Distribution in LaTeX\nDESCRIPTION: This snippet provides the formulas for calculating the mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) of the Anglit distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_anglit.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & 0\\\\ \\mu_{2} & = & \\frac{\\pi^{2}}{16}-\\frac{1}{2}\\\\ \\gamma_{1} & = & 0\\\\ \\gamma_{2} & = & -2\\frac{\\pi^{4}-96}{\\left(\\pi^{2}-8\\right)^{2}}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Levene Test Null Distribution with Matplotlib\nDESCRIPTION: This code generates a plot of the F distribution, which represents the null hypothesis distribution for the Levene test, using Matplotlib for visualization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_levene.md#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nk, n = 3, 60   # number of samples, total number of observations\ndist = stats.f(dfn=k-1, dfd=n-k)\nval = np.linspace(0, 5, 100)\npdf = dist.pdf(val)\nfig, ax = plt.subplots(figsize=(8, 5))\n\ndef plot(ax):  # we'll reuse this\n    ax.plot(val, pdf, color='C0')\n    ax.set_title(\"Levene Test Null Distribution\")\n    ax.set_xlabel(\"statistic\")\n    ax.set_ylabel(\"probability density\")\n    ax.set_xlim(0, 5)\n    ax.set_ylim(0, 1)\n\nplot(ax)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Enabling ILP64 Support with Autotools\nDESCRIPTION: Commands to enable ILP64 support in ARPACK-NG using Autotools, which allows handling large arrays with indices exceeding 32-bit integer limits.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ INTERFACE64=\"1\" ITF64SUFFIX=\"ILP64\" ./configure\n$ make all install\n```\n\n----------------------------------------\n\nTITLE: Log Gamma Distribution Moments Integral\nDESCRIPTION: Definition of the nth raw moment of the Log Gamma distribution as an integral.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loggamma.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\int_{0}^{\\infty}\\left[\\log y\\right]^{n}y^{c-1}\\exp\\left(-y\\right)dy\n```\n\n----------------------------------------\n\nTITLE: Cloning Boost Math Repository\nDESCRIPTION: Clones the boost math repository from github. This is necessary to retrieve the test data needed for the scipy.special function validation. The --depth=1 flag is used to retrieve only the most recent commit, reducing the download size.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/utils/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone --depth=1 https://github.com/boostorg/math.git boostmath\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for scipy.cluster.hierarchy Module\nDESCRIPTION: Sphinx automodule directive that configures documentation generation for the scipy.cluster.hierarchy module. Excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/cluster.hierarchy.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.cluster.hierarchy\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Git Push to Main Repository Commands\nDESCRIPTION: Commands for pushing changes to the main SciPy repository for users with commit rights.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n\ngit fetch upstream\ngit merge --no-ff upstream/main\n\ngit log -p upstream/main..\ngit log --oneline --graph\n\ngit push upstream my-feature-branch:main\n```\n\n----------------------------------------\n\nTITLE: Defining Gumbel Distribution Functions in LaTeX\nDESCRIPTION: Mathematical definitions of the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Gumbel distribution, which is a special case of the Generalized Extreme Value Distribution when c=0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genextreme.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;0\\right) & = & \\exp\\left(-e^{-x}\\right)e^{-x}\\\\\nF\\left(x;0\\right) & = & \\exp\\left(-e^{-x}\\right)\\\\\nG\\left(q;0\\right) & = & -\\log\\left(-\\log q\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Notebook Functionality in SciPy Documentation\nDESCRIPTION: Code snippet demonstrating how to enable interactivity for a notebook in the SciPy documentation website. This creates a button that allows users to open and interact with the notebook in a new tab.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/adding_notebooks.rst#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{eval-rst}\n.. notebooklite:: <filename>.md\n   :new_tab: True\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Array-Valued Parameters in Old API Sampling\nDESCRIPTION: Shows how to generate random samples with array-valued parameters in the old API, where the parameter array shape must be included in the size specification.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndist.rvs(size=(3, 4, 2), loc=[0, 1]).shape  # `loc` has shape (2,)\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Array with NumPy in Python\nDESCRIPTION: This snippet imports NumPy and initializes an array with sample weight data. This array will be used for hypothesis testing with SciPy's kurtosis test.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_kurtosistest.md#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy as np\nx = np.array([148, 154, 158, 160, 161, 162, 166, 170, 182, 195, 236])\n```\n\n----------------------------------------\n\nTITLE: Numerical Matrix Data in Scientific Notation\nDESCRIPTION: Matrix of floating point numbers in scientific notation format, containing 16 rows and 23 columns of numerical data. Values are expressed with high precision using scientific notation (e.g., 7.680465556300619667e-02).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/cdist-X2.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n7.680465556300619667e-02 4.675022344069014180e-01 8.955498989131543963e-01 3.816236071436276411e-01 1.109030077070989329e-01 2.318928815459808668e-02 7.477394240984251983e-01 1.202289789304434864e-01 8.007290497575981769e-01 6.795195698871731027e-01 6.568225762396605605e-01 2.231475263228478445e-01 7.064624077661341151e-02 1.081656666815267176e-02 1.592069359090128033e-01 1.363392203645097389e-01 9.277020735447568667e-01 8.103136564528209407e-01 5.229467676276455812e-02 7.708020259874025504e-01 6.527954747473352359e-02 5.516397414886525796e-01 3.653371861367954443e-01\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for Semicircular Distribution\nDESCRIPTION: This LaTeX equation specifies the entropy of the Semicircular Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_semicircular.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\nh\\left[X\\right]=0.64472988584940017414.\n```\n\n----------------------------------------\n\nTITLE: Defining Gumbel Distribution Properties in LaTeX\nDESCRIPTION: Mathematical definitions of the mean (μ), variance (μ2), skewness (γ1), and kurtosis (γ2) for the Gumbel distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genextreme.rst#2025-04-14_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\gamma=-\\psi_{0}\\left(1\\right)\\\\\n\\mu_{2} & = & \\frac{\\pi^{2}}{6}\\\\\n\\gamma_{1} & = & \\frac{12\\sqrt{6}}{\\pi^{3}}\\zeta\\left(3\\right)\\\\\n\\gamma_{2} & = & \\frac{12}{5}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Expressing Log-Likelihood Function for Anglit Distribution in LaTeX\nDESCRIPTION: This snippet defines the log-likelihood function for the Anglit distribution, which is useful for parameter estimation and statistical inference.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_anglit.rst#2025-04-14_snippet_4\n\nLANGUAGE: LaTeX\nCODE:\n```\nl_{\\mathbf{x}}\\left(\\cdot\\right)=-N\\overline{\\log\\left[\\cos\\left(2\\mathbf{x}\\right)\\right]}\n```\n\n----------------------------------------\n\nTITLE: Documenting root_scalar with brenth method in SciPy using restructuredtext\nDESCRIPTION: This snippet defines the documentation structure for the 'brenth' method option of scipy.optimize.root_scalar function. It includes directive references to the implementation details located in the scipy.optimize._root_scalar._root_scalar_brenth_doc module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-brenth.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _optimize.root_scalar-brenth:\n\nroot_scalar(method='brenth')\n----------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root_scalar\n   :impl: scipy.optimize._root_scalar._root_scalar_brenth_doc\n   :method: brenth\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Sets up the user's email and name for Git commits. This is a necessary step for identifying the author of code changes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/development_setup.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.email you@yourdomain.example.com\ngit config --global user.name \"Your Name Comes Here\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Configuring SciPy Fork\nDESCRIPTION: Clones the user's fork of SciPy, changes to the project directory, adds the upstream repository, and updates submodules. This sets up the local development environment.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/development_setup.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-user-name/scipy.git\ncd scipy\ngit remote add upstream https://github.com/scipy/scipy.git\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Estimating Accuracy by Comparing Integration Methods\nDESCRIPTION: This snippet computes the relative difference between two methods of calculating the CDF, using the survival function and right-tail integration, to estimate accuracy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_65\n\nLANGUAGE: ipython3\nCODE:\n```\nres1 = frozen.sf(x)\nres2 = integrate.quad(frozen.pdf, x, 1)[0]\nabs((res1 - res2) / res1)\n```\n\n----------------------------------------\n\nTITLE: Building Separate Test Package Using Meson Tags\nDESCRIPTION: Commands for building a separate test package using cached builds and Meson install tags.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/redistributable_binaries.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ # apply patch to change the project name in pyproject.toml\n$ python -m build -wnx -Cbuild-dir=build -Cinstall-args=--tags=tests\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Moments of Inverse Normal Distribution in LaTeX\nDESCRIPTION: Mathematical expressions for various statistical moments including mean, variance, skewness, kurtosis, and mode of the Inverse Normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_invgauss.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\mu\\\\ \\mu_{2} & = & \\mu^{3}\\\\ \\gamma_{1} & = & 3\\sqrt{\\mu}\\\\ \\gamma_{2} & = & 15\\mu\\\\ m_{d} & = & \\frac{\\mu}{2}\\left(\\sqrt{9\\mu^{2}+4}-3\\mu\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Running SciPy Code Style Linter Manually\nDESCRIPTION: Runs the SciPy code style linter manually to check for style issues in the codebase.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/hacking.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython dev.py lint\n```\n\n----------------------------------------\n\nTITLE: Box-Cox Transformation Functions in scipy.special\nDESCRIPTION: New functions `scipy.special.boxcox` and `scipy.special.boxcox1p` have been introduced to compute the Box-Cox transformation, enhancing the special functions available in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"The functions `scipy.special.boxcox` and `scipy.special.boxcox1p`, which\\ncompute the Box-Cox transformation, have been added.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy with limited build parallelism\nDESCRIPTION: Installs SciPy using pip while limiting the number of parallel build jobs to 6. This can be useful on systems with limited RAM to prevent out-of-memory errors during compilation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install . -Ccompile-args=\"-j6\"\n```\n\n----------------------------------------\n\nTITLE: Wald Distribution Main Equations in LaTeX\nDESCRIPTION: Mathematical expressions for the probability density function (f(x)), cumulative distribution function (F(x)), and quantile function (G(q)) of the Wald distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_wald.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{\\sqrt{2\\pi x^{3}}}\\exp\\left(-\\frac{\\left(x-1\\right)^{2}}{2x}\\right).\\\\ F\\left(x\\right) & = & \\Phi\\left(\\frac{x-1}{\\sqrt{x}}\\right)+\\exp\\left(2\\right)\\Phi\\left(-\\frac{x+1}{\\sqrt{x}}\\right)\\\\ G\\left(q;\\mu\\right) & = & F^{-1}\\left(q;\\mu\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Checking Library Symbols on Linux\nDESCRIPTION: Demonstrates how to use nm and grep to check whether a shared library contains specific symbols, which can help identify the actual BLAS implementation being used.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nm -gD ~/miniforge/envs/scipy-dev/lib/libblas.so | rg openblas_set_num_threads\n0000000000362990 T openblas_set_num_threads\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Dataset in Plain Text\nDESCRIPTION: A collection of floating point numbers in scientific notation, representing a wide range of magnitudes from very small to very large values. This dataset could be used for testing numerical algorithms, floating point precision, or other mathematical operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rj_data_ipp/ellint_rj_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0.496315487907850183546543121337890625e-5 0.39944501218548349803692032e26 0.72472721302229174342168782629869383526965975761414e-16 0.3013316540734223281106096692383289337158203125e-9 0.19179116640052050131787066719787819821680219530636e-4\n0.5896066795685328543186187744140625e-5 0.83540669756266879012950000386178439626405634044204e-20 0.18486267904e11 0.711416436871559199062176048755645751953125e-8 0.16558524086880113634516369045738181687091036568877e3\n0.741827943784301169216632843017578125e-5 0.57862111028696838884929909418985971569782122969627e-17 0.21186012666429832052017445676028728485107421875e-9 -0.909995069378055632114410400390625e-4 -0.79167347903248615338879018331512795232997106267621e8\n0.1020877971313893795013427734375e-4 0.54233017649833819224649352104539179464381959405728e-19 0.1330528539256192743778228759765625e-4 0.60075625e6 0.22951727888716333518770359128519740944727307583691e-2\n0.115228258437127806246280670166015625e-4 0.14980029664002358913421630859375e-3 0.10872091648e11 0.974692302406765520572662353515625e-4 0.19283669680242463690410992722755728906094253397332e0\n0.12364866051939316093921661376953125e-4 0.256297172992e12 0.89514893312e11 0.92516305455080018876889980106170696672052145004272e-15 0.6956851082506011937598898817563396469969835697595e-7\n0.130162216009921394288539886474609375e-4 0.759344620746560394763946533203125e-4 0.22148209406780902835423848339554340607932845033396e-29 0.1025133774706451157090304e25 0.78168449939778815541125509826645235096454615091998e-21\n0.151082431329996325075626373291015625e-4 0.223869393291817180493772750848e30 0.130767456e9 0.3479859515209682285785675048828125e-4 0.10638852224302699211099006621011974474497792275897e-15\n0.1537743446533568203449249267578125e-4 0.15059710423148686686545261181890964508056640625e-9 0.117395620691240765154361724853515625e-5 -0.2890202999114990234375e1 -0.71323317684118857716768611179394676433168216080032e3\n0.17955519069801084697246551513671875e-4 0.61594795968322388346471996101172408089041709899902e-14 0.17182140399616e14 -0.8879954926669597625732421875e-2 -0.30902793952357142576725810247768489948284393255416e-3\n0.385829116567037999629974365234375e-4 0.87243150589952e14 0.502113922279907786752e21 -0.44867013175405750605515785144168657045844292877374e-29 0.6784291389719445280807556938270976838477737526148e-13\n0.5497968595591373741626739501953125e-4 0.2570904232561588287353515625e-1 0.142555389836268217827210559488e30 0.347529082477997995270422396070359436805186081898e-23 0.15205547141762716339195263933611696099613831306279e-9\n0.67357483203522861003875732421875e-4 0.2024667237879200631521688091840616152694565244019e-17 0.1125503860736e13 -0.28684009472e11 -0.17312469693572017037903718317715643420749673392298e-14\n0.7117705536074936389923095703125e-4 0.5225739073284472832e20 0.188505269646754054144e22 0.37162215e7 0.77884931309600959064671298574702199174386529309389e-23\n0.976757219177670776844024658203125e-4 0.20999384671790071386435906496888593240052529360776e-28 0.2420024555864064e16 -0.30929401675776e14 -0.41122600386595265452718551147832124897352249792332e-19\n0.10531136649660766124725341796875e-3 0.2080037632e10 0.951222915825664e15 -0.2556099821568e13 -0.16183594291792086140042069404303186458320314897362e-18\n0.1337912981398403644561767578125e-3 0.54060063803262892179191112518310546875e-6 0.431251569592525637174387802112e30 -0.40761757983463978673056514048e29 -0.42689657423364442342706084804950806299313503328401e-41\n0.135120135382749140262603759765625e-3 0.15396510045028230750086205123753138601649936845206e-21 0.23207376953125e5 0.4279265340301208198070526123046875e-5 0.11583891006744848427408148566636928242683392055917e4\n0.195464599528349936008453369140625e-3 0.121048798828125e5 0.93744699823914178927300605212876675065986065149559e-24 -0.80269794149945634012159454440908189848597528021079e-27 0.85066182884649426317108513864013994356814573463698e13\n0.237512751482427120208740234375e-3 0.17427138898629124241779209114611148834228515625e-9 0.33052706405189979932401911355555057525634765625e-10 -0.56586559029248e14 -0.27820838535642758409712041258322710540301181627086e-10\n0.371529138647019863128662109375e-3 0.12312668720852486471439889495482766790246387245134e-18 0.2606333696e10 -0.20283999631852400735709807122475467622280120849609e-12 0.51157368515785829729510457458840434162083885872526e1\n0.6058839499019086360931396484375e-3 0.5217478992180805632e19 0.4103625118732452392578125e0 -0.34598269870134102862979652570629696128889918327332e-14 0.11327789817456084957191801849955967708479747758643e-5\n0.7126068812794983386993408203125e-3 0.834977504013651542016e21 0.32316998463633678540817957675549120530669733319939e-24 -0.30853410104558776083649718202650547027587890625e-11 -0.14497478832531455977117278820477686854081973067291e-6\n0.11331872083246707916259765625e-2 0.7652003928866816e17 0.2029340237758464e16 0.46751457751334912e17 0.48218635922355250104615961298328372157645025546126e-24\n0.1283943769522011280059814453125e-2 0.49121531251266280226816e23 0.311947574615478515625e2 -0.1049853937656833303417716736e28 -0.33243523576876450506395708449850694875195152411876e-36\n0.210290006361901760101318359375e-2 0.4932620110638545248192561152e28 0.39087764918804168701171875e-1 -0.97106783192338154528339705536497949989183098296053e-22 0.10716357073204930403806358122863820937624055505006e-9\n0.43084057979285717010498046875e-2 0.7663212560384e13 0.15427949623089271042983806318685344877161824683753e-21 -0.10417810006584787840822059479251038283109664916992e-12 0.17169635051379646499605489602235548137277810862201e-2\n0.47173579223453998565673828125e-2 0.28601321158264026057365024112938563807684451932578e-26 0.40558081566683637682324548023871102486737072467804e-15 0.15528565625e6 0.46209895630262119473421061925210201261400658526527e-2\n0.4801772534847259521484375e-2 0.45398853613796871007741958773072074733645399780696e-27 0.7560605184e10 0.647133457931658995221368968486785888671875e-8 0.97150343363634710498793099113043775255963668957287e1\n0.52362792193889617919921875e-2 0.62775075435638427734375e-1 0.35503316103945850232270764479380886768922209739685e-14 -0.82191520164301076767365827890898799523711204528809e-14 0.94149739510744793867407461448723332321993376907253e9\n0.6464368663728237152099609375e-2 0.34548660250448633356353536e26 0.86745184e8 0.17538673631556802019439568731943899118999076469638e-25 0.18965171138822577964416888446520897074777671876756e-13\n0.8755207993090152740478515625e-2 0.19334258367635594160367929817354861347764157147378e-29 0.19905875479770919489158908039133416469773640855578e-23 0.16162294913370678880369874300115817788991989800707e-19 0.10302469141608676846163602607369970727019331722344e23\n0.105386711657047271728515625e-1 0.10971066146022716822519808e26 0.14238127367174709429046052203053697640243880490063e-25 0.12445412e8 0.81057286137718371719879398529595220079298267815081e-18\n0.1206146739423274993896484375e-1 0.3369771240234375e4 0.151668605394661426544189453125e-2 0.517785288393497467041015625e-1 0.12613012578767509848590874658523101847661158577119e1\n0.12089609168469905853271484375e-1 0.97507090560084943816369411520484629201082488192398e-26 0.399211437727154176e18 -0.43687648e8 -0.12712787183712312314723670820348108729409028012771e-14\n0.1223853044211864471435546875e-1 0.149331171875e5 0.25902370885233137108535751670716469965971562317009e-22 0.1585234087010320425115139642002759501338005065918e-12 0.87548765889989152595921377575214471779646231337304e6\n0.1719185896217823028564453125e-1 0.68342607872e11 0.74717364929222058918122144571648805171440455019649e-24 -0.19811498361971269233094972150865942239761352539063e-11 -0.62931581399346532875402225391415988485126399044258e-3\n0.2028485946357250213623046875e-1 0.43614054590079831541515886783599853515625e-7 0.84901359375e5 -0.402032989501953125e3 -0.14457959445537210532900171961971212086978017332471e-3\n0.244647525250911712646484375e-1 0.15256551424e13 0.54413439958598412815701968192616533315231208689511e-18 0.12193387618025211711902944244911850546486675739288e-14 0.68928140233641690874066639514030215078105803150605e3\n0.2503361739218235015869140625e-1 0.12629954201195087283302254587899482451973653951427e-19 0.18469444489392706000542236672e29 0.2008535602726624347269535064697265625e-5 0.15376107245372323818643874859148652065437313877165e-9\n0.256623141467571258544921875e-1 0.33872525312e11 0.14235380836999617679740726134029336127093459674064e-24 -0.54761008267973783831005426492301530003864451501272e-24 0.6002641543057883014281295950703999178968208670234e8\n0.2816712856292724609375e-1 0.20385418701171875e4 0.70816101925749637511437795979463150075616795220412e-19 -0.71224997471100448542813410313101485371589660644531e-12 0.14555984968538450265872789550217916380493832680261e3\n0.389046929776668548583984375e-1 0.18785430908203125e2 0.59877638017122304e17 -0.70611488161624017152739885005985343013890087604523e-15 0.23617650093748762722636584030199656175041288661882e-6\n0.500512681901454925537109375e-1 0.8265168543968919552e19 0.5917616329149883895863312384e28 0.1813467698915509796864e22 0.73014045504603704166845487809073717258890497149708e-34\n0.552595667541027069091796875e-1 0.24714513671875e5 0.15755500574372884400188753119438633820692530207452e-20 -0.1058852421875e6 -0.1385729677950429487289703993301344498336095174718e-5\n0.59153951704502105712890625e-1 0.28119016669184e16 0.46283060736691983672672256e26 0.33705512178551436908836997015329410971321759480507e-27 0.10567909802110001773228477874638062345056246984665e-17\n0.70532612502574920654296875e-1 0.509380480278670082048e21 0.6086066368937984e16 0.1157226484375e6 0.78636736502206833931370358047905890205013561234128e-20\n0.90219162404537200927734375e-1 0.1235392397312e15 0.312691328e9 -0.59579515824188623238913051216592009495798265561461e-17 0.98185483246869333393733269663055298966868810132828e-9\n```\n\n----------------------------------------\n\nTITLE: Statistical Module Method Updates in SciPy\nDESCRIPTION: Multiple statistical methods were added or updated across various distribution modules, including entropy, PDF, and CDF calculations for different probability distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.11.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.t.entropy()\nscipy.stats.t.logpdf()\nscipy.stats.t.pdf()\nscipy.stats.truncexpon.sf()\nscipy.stats.truncexpon.isf()\nscipy.stats.truncnorm.entropy()\nscipy.stats.truncpareto.fit()\nscipy.stats.vonmises.fit()\n```\n\n----------------------------------------\n\nTITLE: Defining Geometric Distribution Formulas using LaTeX in Python\nDESCRIPTION: This snippet contains LaTeX formulas defining the probability mass function, cumulative distribution function, quantile function, mean, variance, skewness, and kurtosis of the geometric distribution with parameter p.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_geom.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} p\\left(k;p\\right) & = & \\left(1-p\\right)^{k-1}p\\quad k\\geq1\\\\ F\\left(x;p\\right) & = & 1-\\left(1-p\\right)^{\\left\\lfloor x\\right\\rfloor }\\quad x\\geq1\\\\ G\\left(q;p\\right) & = & \\left\\lceil \\frac{\\log\\left(1-q\\right)}{\\log\\left(1-p\\right)}\\right\\rceil \\\\ \\mu & = & \\frac{1}{p}\\\\ \\mu_{2} & = & \\frac{1-p}{p^{2}}\\\\ \\gamma_{1} & = & \\frac{2-p}{\\sqrt{1-p}}\\\\ \\gamma_{2} & = & \\frac{p^{2}-6p+6}{1-p}.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Plotting PDF Comparison\nDESCRIPTION: This snippet generates a plot comparing the probability density functions (PDFs) obtained from numerical optimization and the `weibull_min.fit` method. It also overlays a histogram of the data for visual comparison, enhancing understanding of the fit quality and differences between methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n\"import matplotlib.pyplot as plt\nx = np.linspace(eps, 15, 300)\n\nc_, scale_ = res_mle.x\nX = Weibull(c=c_)*scale_\nplt.plot(x, X.pdf(x), '-', label='numerical optimization')\n\nc_, _, scale_ = stats.weibull_min.fit(data, floc=0)\nY = Weibull(c=c_)*scale_\nplt.plot(x, Y.pdf(x), '--', label='`weibull_min.fit`')\n\nplt.hist(data, bins=np.linspace(0, 20, 30), density=True, alpha=0.1)\nplt.xlabel('x')\nplt.ylabel('pdf(x)')\nplt.legend()\nplt.ylim(0, 0.5)\nplt.show()\"\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Actions with Environment File\nDESCRIPTION: Executes GitHub Actions workflows with environment variables supplied from an env file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nact --env-file my.env\n```\n\n----------------------------------------\n\nTITLE: Cauchy Distribution Entropy Formula in LaTeX\nDESCRIPTION: Mathematical equation showing the entropy formula for the Cauchy distribution with its numerical approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_cauchy.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} h\\left[X\\right] & = & \\log\\left(4\\pi\\right)\\\\ & \\approx & 2.5310242469692907930.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Implementing Noncentral t Distribution in SciPy\nDESCRIPTION: Reference to the SciPy implementation of the Noncentral t Distribution. This snippet indicates where users can find the actual code for working with this distribution in the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_nct.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.nct\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for scipy.io Documentation\nDESCRIPTION: A reStructuredText directive that tells Sphinx to automatically document the scipy.io module. The directive is configured to exclude members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/io.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.io\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing Multibuild Issue for Symbol Stripping\nDESCRIPTION: ReStructuredText directive to link to a GitHub issue discussing improvements in stripping debug symbols in multibuild.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/roadmap-detailed.rst#2025-04-14_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`this issue <https://github.com/multi-build/multibuild/issues/162>`__\n```\n\n----------------------------------------\n\nTITLE: Statistical Moments of Generalized Logistic Distribution\nDESCRIPTION: Definitions of various statistical moments including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (md), and median (mn).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genlogistic.rst#2025-04-14_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\gamma+\\psi_{0}\\left(c\\right)\\\\ \\mu_{2} & = & \\frac{\\pi^{2}}{6}+\\psi_{1}\\left(c\\right)\\\\ \\gamma_{1} & = & \\frac{\\psi_{2}\\left(c\\right)+2\\zeta\\left(3\\right)}{\\mu_{2}^{3/2}}\\\\ \\gamma_{2} & = & \\frac{\\left(\\frac{\\pi^{4}}{15}+\\psi_{3}\\left(c\\right)\\right)}{\\mu_{2}^{2}}\\\\ m_{d} & = & \\log c\\\\ m_{n} & = & -\\log\\left(2^{1/c}-1\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Limits with Matplotlib\nDESCRIPTION: This snippet sets the limits for the x and y axes of the current plot using Matplotlib. It helps in adjusting the view of the plot to ensure all desired data points are visible.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> plt.axis([-0.05, 6.33, -1.05, 1.05])\n```\n\n----------------------------------------\n\nTITLE: Loading Python-created Struct in Octave\nDESCRIPTION: Shows how to load and inspect a MATLAB struct file created by Python in Octave.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/io.rst#2025-04-14_snippet_9\n\nLANGUAGE: octave\nCODE:\n```\noctave:21> load saved_struct\noctave:22> a_dict\n```\n\n----------------------------------------\n\nTITLE: Defining nth Moment for Discrete Laplacian Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the nth moment of the Discrete Laplacian Distribution using the polylogarithm function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_dlaplace.rst#2025-04-14_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=M^{\\left(n\\right)}\\left(0\\right)=\\left[1+\\left(-1\\right)^{n}\\right]\\textrm{Li}_{-n}\\left(e^{-a}\\right)\n```\n\n----------------------------------------\n\nTITLE: Computing Median Absolute Deviation in Python\nDESCRIPTION: The new function median_abs_deviation replaces the deprecated median_absolute_deviation for calculating the median absolute deviation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.5.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import median_abs_deviation\n\n# Example usage (not provided in the original text)\nresult = median_abs_deviation(data)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numeric Data Set in Plaintext Format\nDESCRIPTION: This snippet represents a structured set of numeric data, likely used for mathematical or scientific computations. Each row contains three columns of floating-point numbers in scientific notation, representing different parameters or results of calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_data_ipp/bessel_k_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0.9297769927978515625e2\t0.353451806640625e4\t0.6810640416069074949832134642840700061677e-1536\n0.9297769927978515625e2\t0.80715478515625e4\t0.8880475416546418613925474382495752636196e-3507\n0.9297769927978515625e2 0.1622925e5 0.6836772391670514269657537156841197891453e-7050\n0.9297769927978515625e2 0.3206622265625e5 0.5248314285242353145777820274280636896797e-13928\n0.9297769927978515625e2 0.3636794921875e5 0.2948841983584072578394887812793739973464e-15796\n0.935389862060546875e2\t0.637722015380859375e2\t0.4848538332206214872114685461457208526682e-2\n0.935389862060546875e2\t0.1252804412841796875e3\t0.1407357631531569552447817697356939114967e-40\n0.935389862060546875e2\t0.25554705810546875e3\t0.1789644517979726575647466756527040582949e-104\n0.935389862060546875e2\t0.503011474609375e3\t0.1134297740334902791076613679075967354327e-215\n0.935389862060546875e2\t0.10074598388671875e4\t0.8825347981316688657305249314794392766025e-437\n0.935389862060546875e2\t0.1185395751953125e4\t0.2246641303550294973758291904185796545436e-514\n0.935389862060546875e2\t0.353451806640625e4\t0.6912227290322635031334137954308461354241e-1536\n0.935389862060546875e2\t0.80715478515625e4\t0.893824833574208599253272536219631346374e-3507\n0.935389862060546875e2 0.1622925e5 0.6858858035128739755837136827347333728619e-7050\n0.935389862060546875e2 0.3206622265625e5 0.5256888449089264657997112108384303458607e-13928\n0.935389862060546875e2 0.3636794921875e5 0.2953089268910496653492909777451085521704e-15796\n0.937735595703125e2\t0.637722015380859375e2\t0.6385107666034147877046020721409920794724e-2\n0.937735595703125e2\t0.1252804412841796875e3\t0.1654344599410448916584423239120073465608e-40\n0.937735595703125e2\t0.25554705810546875e3\t0.1946478889917254423807361997687268337342e-104\n0.937735595703125e2\t0.503011474609375e3\t0.1184592506913226623646749833739806823329e-215\n0.937735595703125e2\t0.10074598388671875e4\t0.901953355688788108549058088701948794206e-437\n0.937735595703125e2\t0.1185395751953125e4\t0.2288605393501964892215062020117435573162e-514\n0.937735595703125e2\t0.353451806640625e4\t0.6955313792142442148137724010444647419301e-1536\n0.937735595703125e2\t0.80715478515625e4\t0.8962607682372740535877231935882633914515e-3507\n0.937735595703125e2 0.1622925e5 0.6868148706801060740839033435132304040165e-7050\n0.937735595703125e2 0.3206622265625e5 0.526049123050695967902464958981106803334e-13928\n0.937735595703125e2 0.3636794921875e5 0.295487369292694824273684043549849890813e-15796\n0.98576263427734375e2\t0.637722015380859375e2\t0.1990227834888151454373307286008775674612e1\n0.98576263427734375e2\t0.1252804412841796875e3\t0.4894424029224796393682491693146694616972e-39\n0.98576263427734375e2\t0.25554705810546875e3\t0.1136170375675789312265821779116321329958e-103\n0.98576263427734375e2\t0.503011474609375e3\t0.2948452830082071500214646231076147090724e-215\n0.98576263427734375e2\t0.10074598388671875e4\t0.1425279255280814495079497699158457698546e-436\n0.98576263427734375e2\t0.1185395751953125e4\t0.3377080491094056336148164895290399079231e-514\n0.98576263427734375e2\t0.353451806640625e4\t0.7926042309665472483589245698365986058321e-1536\n0.98576263427734375e2\t0.80715478515625e4\t0.9490411542227230445519501560068255751126e-3507\n0.98576263427734375e2 0.1622925e5 0.706642352671901713112325219552778166628e-7050\n0.98576263427734375e2 0.3206622265625e5 0.5336813326314223870941968492332354768707e-13928\n0.98576263427734375e2 0.3636794921875e5 0.2992641523816122158711374925214774085881e-15796\n0.99292266845703125e2\t0.637722015380859375e2\t0.4765079470941391660151554471287672030993e1\n0.99292266845703125e2\t0.1252804412841796875e3\t0.8211475782164329588746473557436288828796e-39\n0.99292266845703125e2\t0.25554705810546875e3\t0.1488689678947819908654123225405437300755e-103\n0.99292266845703125e2\t0.503011474609375e3\t0.3390847523037554808868465852319867472935e-215\n0.99292266845703125e2\t0.10074598388671875e4\t0.1528876974454391292968555182897209684705e-436\n0.99292266845703125e2\t0.1185395751953125e4\t0.3584703400837929375694495921804618033184e-514\n0.99292266845703125e2\t0.353451806640625e4\t0.8086451033245101399967163404205099861285e-1536\n0.99292266845703125e2\t0.80715478515625e4\t0.9574060247932829286311891259694070669118e-3507\n0.99292266845703125e2 0.1622925e5 0.7097333247638353953239893327006028051669e-7050\n0.99292266845703125e2 0.3206622265625e5 0.5348615672629262632704311334792898428533e-13928\n0.99292266845703125e2 0.3636794921875e5 0.299847616599843593158654409241939580736e-15796\n```\n\n----------------------------------------\n\nTITLE: Statistical Properties in LaTeX\nDESCRIPTION: Key statistical properties including mode, median, mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} m_{d}=m_{n}=\\mu & = & 0\\\\ \\mu_{2} & = & \\frac{\\pi^{2}}{4}\\\\ \\gamma_{1} & = & 0\\\\ \\gamma_{2} & = & 2\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Normal Distribution Entropy in LaTeX\nDESCRIPTION: Mathematical expression for the entropy (h[X]) of the Normal Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_norm.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} h\\left[X\\right] & = & \\log\\left(\\sqrt{2\\pi e}\\right)\\\\& \\approx & 1.4189385332046727418\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Alpha Distribution Moment Generating Function in LaTeX\nDESCRIPTION: Definition of the moment generating function M(t) for the Alpha distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_alpha.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\nM\\left(t\\right)=\\frac{1}{\\Phi\\left(a\\right)\\sqrt{2\\pi}}\\int_{0}^{\\infty}\\frac{e^{xt}}{x^{2}}\\exp\\left(-\\frac{1}{2}\\left(\\alpha-\\frac{1}{x}\\right)^{2}\\right)dx\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SciPy ODR Module in reStructuredText\nDESCRIPTION: This directive instructs Sphinx to auto-document the scipy.odr module but exclude members, inherited members, and special members. This approach creates a cleaner module-level documentation focusing on the main functionality.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/odr.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.odr\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Git Backporting Commands\nDESCRIPTION: Commands for backporting changes from main branch to stable release branches using cherry-pick.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b backport-3324 upstream/maintenance/1.8.x\n\ngit fetch upstream\ngit log upstream/main\ngit cherry-pick aa7a047^..c098283\ngit push -u origin backport-3324\n```\n\n----------------------------------------\n\nTITLE: Configuring Automodule for scipy.fftpack in reStructuredText\nDESCRIPTION: This snippet configures the automodule directive for scipy.fftpack. It excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/fftpack.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.fftpack\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Building SciPy Documentation for Release\nDESCRIPTION: Command to build all documentation artifacts for a SciPy release. This builds SciPy in-place to ensure correct versioning, generates HTML and PDF documentation, and creates a redistributable ZIP archive of the HTML docs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dist\n```\n\n----------------------------------------\n\nTITLE: Using FlexiBLAS for Runtime BLAS Switching\nDESCRIPTION: Shows how to build SciPy against FlexiBLAS and switch between different BLAS implementations at runtime using environment variables, which is useful for efficient debugging of BLAS-related issues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ python dev.py build -C-Dblas=flexiblas -C-Dlapack=flexiblas\n$ FLEXIBLAS=NETLIB python dev.py test -s linalg\n$ FLEXIBLAS=OpenBLAS python dev.py test -s linalg\n# Or export the environment variable to make the selection stick:\n$ export FLEXIBLAS=OpenBLAS\n```\n\n----------------------------------------\n\nTITLE: Defining Noncentral Chi-Squared Distribution Equations in LaTeX\nDESCRIPTION: This LaTeX code block defines the probability density function, cumulative distribution function, inverse CDF, mean, variance, skewness, and kurtosis for the noncentral chi-squared distribution. It uses mathematical notation to express these complex statistical formulas.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_ncx2.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\nu,\\lambda\\right) & = & e^{-\\left(\\lambda+x\\right)/2}\\frac{1}{2}\\left(\\frac{x}{\\lambda}\\right)^{\\left(\\nu-2\\right)/4}I_{\\left(\\nu-2\\right)/2}\\left(\\sqrt{\\lambda x}\\right)\\\\\nF\\left(x;\\nu,\\lambda\\right) & = & \\sum_{j=0}^{\\infty}\\left\\{ \\frac{\\left(\\lambda/2\\right)^{j}}{j!}e^{-\\lambda/2}\\right\\} \\mathrm{Pr}\\left[\\chi_{\\nu+2j}^{2}\\leq x\\right]\\\\\nG\\left(q;\\nu,\\lambda\\right) & = & F^{-1}\\left(q;\\nu,\\lambda\\right)\\\\\n\\mu & = & \\nu+\\lambda\\\\\n\\mu_{2} & = & 2\\left(\\nu+2\\lambda\\right)\\\\\n\\gamma_{1} & = & \\frac{\\sqrt{8}\\left(\\nu+3\\lambda\\right)}{\\left(\\nu+2\\lambda\\right)^{3/2}}\\\\\n\\gamma_{2} & = & \\frac{12\\left(\\nu+4\\lambda\\right)}{\\left(\\nu+2\\lambda\\right)^{2}}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Performing Editable Install of SciPy\nDESCRIPTION: Command to perform an editable install of SciPy, useful for IDE support and automatic rebuilding on code changes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Note: the --no-build-isolation is important! meson-python will\n# auto-rebuild each time SciPy is imported by the Python interpreter.\npip install -e . --no-build-isolation\n\n# To run the tests for, e.g., the `scipy.linalg` module:\npyttest scipy/linalg\n```\n\n----------------------------------------\n\nTITLE: Multivariate Statistical Distribution Method Enhancements\nDESCRIPTION: Added entropy and CDF methods for multivariate distributions and matrix-based statistical methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.11.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.multivariate_t.cdf()\nscipy.stats.multivariate_t.entropy()\nscipय.stats.multivariate_normal.entropy()\nscipय.stats.matrix_normal.entropy()\nscipय.stats.invwishart.entropy()\n```\n\n----------------------------------------\n\nTITLE: Defining NumPy Dependency\nDESCRIPTION: This snippet specifies the minimum required version of NumPy for SciPy.  It ensures that SciPy has the necessary NumPy functionality available at runtime. NumPy version 1.25.2 or higher is required.\nSOURCE: https://github.com/scipy/scipy/blob/main/requirements/default.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"numpy>=1.25.2\"\n```\n\n----------------------------------------\n\nTITLE: Entropy Formula for Inverted Weibull Distribution\nDESCRIPTION: Provides the formula for calculating the entropy of the Inverted Weibull Distribution, where γ represents Euler's constant.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_invweibull.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nh\\left[X\\right]=1+\\gamma+\\frac{\\gamma}{c}-\\log\\left(c\\right)\n```\n\n----------------------------------------\n\nTITLE: Computing Mood's Median Test - SciPy Python\nDESCRIPTION: The `scipy.stats.median_test` function computes Mood's median test, allowing researchers to conduct non-parametric significance testing on median values of two groups.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.median_test\n\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Geometric Distribution\nDESCRIPTION: This snippet indicates the location of the geometric distribution implementation in SciPy's stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_geom.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.geom\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Function\nDESCRIPTION: Command syntax for running a single test function from a test file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.<module>.tests.<test_file>::<test_name>\n```\n\n----------------------------------------\n\nTITLE: Nakagami Distribution Fitting Method Reference\nDESCRIPTION: Reference to the fitting method implementation in SciPy's Nakagami distribution class, used for maximum likelihood estimation of distribution parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_nakagami.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnakagami.fit\n```\n\n----------------------------------------\n\nTITLE: Implementing Log-Uniform Distribution in Python using SciPy\nDESCRIPTION: Reference to the SciPy implementation of the log-uniform distribution, which can be accessed through the scipy.stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loguniform.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.loguniform\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Cumulative Distribution Functions for Skewed Cauchy Distribution\nDESCRIPTION: Mathematical formulas for the probability density function (f) and cumulative distribution function (F) of the Skewed Cauchy Distribution. The functions are defined piecewise for x >= 0 and x < 0, with a shape parameter 'a' where -1 < a < 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_skewcauchy.rst#2025-04-14_snippet_0\n\nLANGUAGE: Math\nCODE:\n```\n\\begin{eqnarray*}\nf(x, a) & = & \\frac{1}{\\pi \\left(\\frac{x^2}{\\left(a x + 1 \\right)^2} + 1 \\right)},\\quad x\\ge0; \\\\\n             & = & \\frac{1}{\\pi \\left(\\frac{x^2}{\\left(-a x + 1 \\right)^2} + 1 \\right)},\\quad x<0. \\\\\nF(x, a) & = & \\frac{1 - a}{2} + \\frac{1 + a}{\\pi} \\arctan\\left(\\frac{x}{1 + a} \\right),\\quad x\\ge0; \\\\\n             & = & \\frac{1 - a}{2} + \\frac{1 - a}{\\pi} \\arctan\\left(\\frac{x}{1 - a} \\right),\\quad x<0.\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Self-Dual 4D Regular Polytope Facet Matrix\nDESCRIPTION: Matrix representation of a 4-dimensional regular polytope's facets, where each row represents a geometric constraint in the form b + Ax >= 0. The matrix contains 24 rows corresponding to octahedron facets, with each row having 5 columns representing the coefficients of the constraint inequalities.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/selfdual-4d-polytope.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# The facets of a self-dual 4-dim regular polytope\n# with 24 octahedron facets. Taken from cddlib.\n# Format b + Ax >= 0\n 1  1  1  1  1\n 1  1  1  1 -1\n 1  1  1 -1  1\n 1  1  1 -1 -1\n 1  1 -1  1  1\n 1  1 -1  1 -1\n 1  1 -1 -1  1\n 1  1 -1 -1 -1\n 1 -1  1  1  1\n 1 -1  1  1 -1\n 1 -1  1 -1  1\n 1 -1  1 -1 -1\n 1 -1 -1  1  1\n 1 -1 -1  1 -1\n 1 -1 -1 -1  1\n 1 -1 -1 -1 -1\n 1  2  0  0  0\n 1  0  2  0  0\n 1  0  0  2  0\n 1  0  0  0  2\n 1 -2  0  0  0\n 1  0 -2  0  0\n 1  0  0 -2  0\n 1  0  0  0 -2\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Jones and Faddy Skew-T Distribution\nDESCRIPTION: The SciPy implementation of the Jones and Faddy Skew-T Distribution is available in the scipy.stats module. This snippet provides the exact location of the implementation for reference.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_jf_skew_t.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.jf_skew_t\n```\n\n----------------------------------------\n\nTITLE: Statistical Properties\nDESCRIPTION: Key statistical properties including mean (μ), variance (μ2), skewness (γ1), and kurtosis (γ2).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_arcsine.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\frac{1}{2}\\\\ \\mu_{2} & = & \\frac{1}{8}\\\\ \\gamma_{1} & = & 0\\\\ \\gamma_{2} & = & -\\frac{3}{2}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Specifying Sample Shape in Old API\nDESCRIPTION: Shows how to generate random samples with a specific output shape using the size parameter in the old API.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndist.rvs(size=(3, 4))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Input Validation with NumPy Arrays\nDESCRIPTION: Shows how the array API standard support rejects certain types of arrays that are not supported, such as numpy.matrix, masked arrays, and arrays with object dtype. This stricter validation is enabled when SCIPY_ARRAY_API=1 is set.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> from scipy.cluster.vq import vq\n>>> code_book = np.array([[1., 1., 1.],\n...                       [2., 2., 2.]])\n>>> features  = np.array([[1.9, 2.3, 1.7],\n...                       [1.5, 2.5, 2.2],\n...                       [0.8, 0.6, 1.7]])\n>>> vq(features, code_book)\n(array([1, 1, 0], dtype=int32), array([0.43588989, 0.73484692, 0.83066239]))\n\n>>> # The above uses numpy arrays; trying to use np.matrix instances or object\n>>> # arrays instead will yield an exception with `SCIPY_ARRAY_API=1`:\n>>> vq(np.asmatrix(features), code_book)\n...\nTypeError: 'numpy.matrix' are not supported\n\n>>> vq(np.ma.asarray(features), code_book)\n...\nTypeError: 'numpy.ma.MaskedArray' are not supported\n\n>>> vq(features.astype(np.object_), code_book)\n...\nTypeError: object arrays are not supported\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data in SciPy\nDESCRIPTION: This dataset contains rows of three floating-point numbers, possibly representing inputs and outputs for mathematical functions or numerical algorithms. The values span a wide range of magnitudes, including very small numbers in scientific notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_prime_data_ipp/bessel_k_prime_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0.826751708984375e2 0.1622925e5 -6.4663267661753335706506210073515689692432301370585e-7051\n0.826751708984375e2 0.3206622265625e5 -5.1023879217726109450620115433577194983362528138656e-13929\n0.826751708984375e2 0.3636794921875e5 -2.8764280102985703123126780438959047264409493344192e-15797\n0.9150136566162109375e2 0.637722015380859375e2 -0.00079326328960639682455560026385982192944109194985948\n0.9150136566162109375e2 0.1252804412841796875e3 -4.3512244779798717227112269652119524511161519994708e-42\n...\n```\n\n----------------------------------------\n\nTITLE: Chi Distribution Mathematical Formulas in LaTeX\nDESCRIPTION: Complete mathematical representation of the Chi distribution including probability density function (f), cumulative distribution function (F), inverse CDF (G), moment generating function (M), mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (md), and median (mn). The distribution has one shape parameter ν (degrees of freedom).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_chi.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\nu\\right) & = & \\frac{x^{\\nu-1}e^{-x^{2}/2}}{2^{\\nu/2-1}\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\\\ F\\left(x;\\nu\\right) & = & \\frac{\\gamma\\left(\\frac{\\nu}{2},\\frac{x^{2}}{2}\\right)}{\\Gamma(\\frac{\\nu}{2})}\\\\ G\\left(q;\\nu\\right) & = & \\sqrt{2\\gamma^{-1}\\left(\\frac{\\nu}{2},q\\Gamma(\\frac{\\nu}{2})\\right)}\\\\ M\\left(t\\right) & = & \\Gamma\\left(\\frac{v}{2}\\right)\\,_{1}F_{1}\\left(\\frac{v}{2};\\frac{1}{2};\\frac{t^{2}}{2}\\right)+\\frac{t}{\\sqrt{2}}\\Gamma\\left(\\frac{1+\\nu}{2}\\right)\\,_{1}F_{1}\\left(\\frac{1+\\nu}{2};\\frac{3}{2};\\frac{t^{2}}{2}\\right)\\\\ \\mu & = & \\frac{\\sqrt{2}\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\Gamma\\left(\\frac{\\nu}{2}\\right)}\\\\ \\mu_{2} & = & \\nu-\\mu^{2}\\\\ \\gamma_{1} & = & \\frac{2\\mu^{3}+\\mu\\left(1-2\\nu\\right)}{\\mu_{2}^{3/2}}\\\\ \\gamma_{2} & = & \\frac{2\\nu\\left(1-\\nu\\right)-6\\mu^{4}+4\\mu^{2}\\left(2\\nu-1\\right)}{\\mu_{2}^{2}}\\\\ m_{d} & = & \\sqrt{\\nu-1}\\quad\\nu\\geq1\\\\ m_{n} & = & \\sqrt{2\\gamma^{-1}\\left(\\frac{\\nu}{2},\\frac{1}{2}{\\Gamma(\\frac{\\nu}{2})}\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Documenting SLSQP Method in SciPy Optimize\nDESCRIPTION: ReStructuredText documentation for the SLSQP optimization method, showing the function reference and implementation path.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-slsqp.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.minimize-slsqp:\n\nminimize(method='SLSQP')\n---------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._slsqp_py._minimize_slsqp\n   :method: SLSQP\n```\n\n----------------------------------------\n\nTITLE: Importing scipy.interpolate module\nDESCRIPTION: This snippet shows how to import the scipy.interpolate module, which is the focus of this tutorial.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: scipy.interpolate\n```\n\n----------------------------------------\n\nTITLE: Git Repository Exploration Commands\nDESCRIPTION: Commands for viewing repository history and structure using gitk and git log.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngitk --all\n\ngit log\n```\n\n----------------------------------------\n\nTITLE: Sphinx Template Configuration for SciPy Property Documentation\nDESCRIPTION: Sphinx ReStructuredText template that configures how property documentation should be displayed. It sets the current module context and uses the autoproperty directive to automatically generate documentation for the specified property.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/property.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n.. raw:: html\n\n   <div class=\"prename\">{{ module }}.{{ class }}.</div>\n   <div class=\"empty\"></div>\n\n{{ fullname }}\n{{ underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoproperty:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Checking Library Symbols on macOS\nDESCRIPTION: Shows how to use nm and grep on macOS to check for specific symbols in a shared library, which can help identify the actual BLAS implementation being used.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n% nm ~/miniforge/envs/scipy-dev/lib/libblas.3.dylib | rg openblas_set_num_threads\n000000000015b6b0 T _openblas_set_num_threads\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimum Compiler Versions for SciPy in reStructuredText\nDESCRIPTION: A reStructuredText table showing the minimum supported compiler versions for building SciPy on different platforms. It includes information for GCC, LLVM, and MSVC compilers.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/toolchain.rst#2025-04-14_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n==========  ===========================  ===============================  ============================\n Compiler    Default Platform (tested)    Secondary Platform (untested)    Minimal Version\n==========  ===========================  ===============================  ============================\n GCC         Linux                        AIX, Alpine Linux, OSX           GCC 9.x\n LLVM        OSX                          Linux, FreeBSD, Windows          LLVM 12.x\n MSVC        Windows                      -                                Visual Studio 2019 (vc142)\n==========  ===========================  ===============================  ============================\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Distribution Functions for Triangular Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Triangular Distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_triang.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n        f\\left(x;c\\right) & = & \\left\\{\n                                    \\begin{array}{ccc}\n                                        2\\frac{x}{c} &  & x < c \\\\\n                                        2\\frac{1-x}{1-c} &  & x \\geq c\n                                    \\end{array}\n                                \\right.\\\\\n        F\\left(x;c\\right) & = & \\left\\{\n                                    \\begin{array}{ccc}\n                                        \\frac{x^{2}}{c} &  & x < c \\\\\n                                        \\frac{x^{2}-2x+c}{c-1} &  & x \\geq c\n                                    \\end{array}\n                                \\right.\\\\\n        G\\left(q;c\\right) & = & \\left\\{\n                                    \\begin{array}{ccc}\n                                        \\sqrt{cq} &  & q < c \\\\\n                                        1-\\sqrt{\\left(1-c\\right)\\left(1-q\\right)} &  & q \\geq c\n                                    \\end{array}\n                                \\right.\n    \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Python Code Example - Lazy Import\nDESCRIPTION: Demonstrates new lazy loading functionality for SciPy subpackages, allowing direct access without explicit imports.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.9.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport scipy as sp\nsp.fft.dct([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy Build Dependencies on Arch Linux\nDESCRIPTION: Command to install necessary build dependencies for SciPy on Arch Linux systems using pacman package manager.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S gcc-fortran openblas pkgconf\n```\n\n----------------------------------------\n\nTITLE: Verifying Predicted Shapes in Batched Linear Algebra Operations\nDESCRIPTION: This code verifies the predicted shapes for eigenvalues and eigenvectors in a batched linear algebra operation with broadcasted input shapes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/linalg_batch.md#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Check predictions\ninput_a = rng.random(batch_shape_a + core_shape_a)\ninput_b = rng.random(batch_shape_b + core_shape_b)\nevals, evecs = linalg.eig(input_a, b=input_b)\nevals.shape, evecs.shape\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Likelihood Estimator for Laplace Distribution in LaTeX\nDESCRIPTION: Mathematical expression for the Maximum Likelihood (ML) estimator of the location parameter for the Laplace distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\hat{L}=\\mathrm{median}\\left(X_{i}\\right)\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Actions with Secret File\nDESCRIPTION: Executes GitHub Actions workflows with environment variables supplied from a secrets file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nact --secret-file my.secrets\n```\n\n----------------------------------------\n\nTITLE: High Precision Numerical Data Table\nDESCRIPTION: Two-column data table with floating point numbers. First column contains values between 45-60 with ~15 decimal precision, second column contains large numbers with ~30 decimal precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/expinti_data_ipp/expinti_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n45.622142791748046875\t1459228779377576203.085179194127347039233\n45.96717071533203125\t2044647179130784910.065675826506375503182\n46.443317413330078125\t3257069147351952822.406316784082908654148\n46.62737274169921875\t3899455212627022627.757193164190203742303\n47.999355316162109375\t14926880987843627550.42423425846631056877\n49.637111663818359375\t74190413685387077283.04485547837473387867\n49.81011962890625\t87890252389194795154.44680392696975525721\n50.171234130859375\t125189140534515913902.5259763391614688736\n50.383525848388671875\t154131408309808097686.7891755712917358669\n50.46710968017578125\t167284637436075321503.8911970981891929543\n50.471343994140625\t167980083475835196141.8258748379299905807\n50.7309112548828125\t216626578190231872367.3411388285205467896\n50.891300201416015625\t253494280682248147653.5031137670581769109\n51.29622650146484375\t376974396494639297221.5916323256511307768\n52.0242156982421875\t769533307813336085464.2719431240758770955\n52.21900177001953125\t931463445412117009569.997805462678793371\n52.4724273681640625\t1194213241460405145426.923208285103882948\n52.739253997802734375\t1551371845141512428417.754279321277408047\n52.741176605224609375\t1554299590225018307998.020329038078465699\n53.40814208984375\t2989698064310689472929.903511572929914131\n54.5244293212890625\t8938496865444328223663.418183347060066178\n55.05193328857421875\t15000102942849475726352.24634597020497441\n55.28836822509765625\t18918195096476420185424.79716369248547301\n55.32575225830078125\t19625295432594734639694.04077946718413513\n55.522052764892578125\t23795829974930383969706.74411638885122467\n55.544170379638671875\t24318128427099146738245.91342763630756375\n55.57183837890625\t24987672558936599326235.83821092811506408\n55.808788299560546875\t31531809737095643566486.71781327383155317\n56.137737274169921875\t43552095758129714470140.32600682101217921\n56.146297454833984375\t43919686479374955504528.98148221455056972\n56.446441650390625\t58972731376406161145451.87899710728216492\n56.5754547119140625\t66937712106290641632239.78290159424299056\n56.765209197998046875\t80648977731394081623112.8051042421861491\n57.47022247314453125\t161184177439288421438465.5484877575634735\n57.791820526123046875\t221066403776152634685122.7495432888528563\n57.92206573486328125\t251241864908534403966454.9934420615252414\n58.059658050537109375\t287606300821348197823323.3455461108172774\n58.620555877685546875\t499047878771232722946891.2015515727402121\n58.721736907958984375\t551216418687710616233343.712210604071037\n58.73737335205078125\t559751492456295202734141.0778013286664605\n59.21694183349609375\t896756596017748427943431.7704197691518272\n59.3475341796875\t1019568455497745443792447.961272554810421\n59.574817657470703125\t1274778904679711262832523.146694528881756\n59.610748291015625\t1320604762679106118330023.701104305685706\n```\n\n----------------------------------------\n\nTITLE: First Four Raw Moments\nDESCRIPTION: Explicit formulas for the first four raw moments of the Generalized Pareto Distribution with their respective constraints on c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genpareto.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{1}^{\\prime} & = & \\frac{1}{1-c}\\quad c<1\\\\\n\\mu_{2}^{\\prime} & = & \\frac{2}{\\left(1-2c\\right)\\left(1-c\\right)}\\quad c<\\frac{1}{2}\\\\\n\\mu_{3}^{\\prime} & = & \\frac{6}{\\left(1-c\\right)\\left(1-2c\\right)\\left(1-3c\\right)}\\quad c<\\frac{1}{3}\\\\\n\\mu_{4}^{\\prime} & = & \\frac{24}{\\left(1-c\\right)\\left(1-2c\\right)\\left(1-3c\\right)\\left(1-4c\\right)}\\quad c<\\frac{1}{4}\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Distribution Functions for HalfCauchy Distribution\nDESCRIPTION: This snippet presents the probability density function (f(x)), cumulative distribution function (F(x)), and quantile function (G(q)) for the standard form of the HalfCauchy distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfcauchy.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{2}{\\pi\\left(1+x^{2}\\right)} \\\\\nF\\left(x\\right) & = & \\frac{2}{\\pi}\\arctan\\left(x\\right)\\\\\nG\\left(q\\right) & = & \\tan\\left(\\frac{\\pi}{2}q\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Checking for Deprecated SciPy Functionality in Python\nDESCRIPTION: This command runs Python code with warnings enabled to check for any usage of deprecated SciPy functionality. It's recommended to run this before upgrading to the new version.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.9.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npython -Wd\n```\n\n----------------------------------------\n\nTITLE: Double Gamma Distribution Mathematical Formulas\nDESCRIPTION: Core mathematical formulas defining the double gamma distribution including PDF, CDF, and quantile functions for α > 0. The distribution is a signed version of the Gamma distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dgamma.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nf(x;α) = 1/(2Γ(α))|x|^(α-1)e^(-|x|)\nF(x;α) = {\n  1/2 - γ(α,|x|)/(2Γ(α)) for x ≤ 0\n  1/2 + γ(α,|x|)/(2Γ(α)) for x > 0\n}\nG(q;α) = {\n  -γ^(-1)(α,|2q-1|Γ(α)) for q ≤ 1/2\n  γ^(-1)(α,|2q-1|Γ(α)) for q > 1/2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SciPy MATLAB I/O Module\nDESCRIPTION: Sphinx directive to automatically generate documentation for the scipy.io.matlab module. The configuration excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/io.matlab.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n.. automodule:: scipy.io.matlab\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Moments of Truncated Weibull Minimum Extreme Value Distribution in LaTeX\nDESCRIPTION: Mathematical definition of the nth moment of the truncated Weibull minimum extreme value distribution. The formula uses the lower incomplete gamma function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_truncweibull_min.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\frac{\\exp\\left(a^{c}\\right)}{1-\\exp\\left(-b^{c}\\right)}\\left[\\gamma\\left(\\frac{n}{c}+1,b^{c}\\right)-\\gamma\\left(\\frac{n}{c}+1,a^{c}\\right)\\right]\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Matrix\nDESCRIPTION: A structured data matrix containing numerical values in scientific notation format. Each row has three columns with high-precision floating point numbers using e notation to represent very large and very small values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_i_data_ipp/bessel_i_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-0.8049192047119140625e2\t0.24750102996826171875e2\t0.4186983670927603951456761016615805321694e29\n-0.8049192047119140625e2\t0.637722015380859375e2\t0.2032477564839492547710163141114983376107e7\n-0.7460263824462890625e2\t0.24750102996826171875e2\t0.7209773983625557491285409746913864781653e24\n```\n\n----------------------------------------\n\nTITLE: Maxwell Distribution Statistical Moments\nDESCRIPTION: Statistical moments including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (md), and median (mn) of the Maxwell distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_maxwell.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & 2\\sqrt{\\frac{2}{\\pi}}\\\\ \\mu_{2} & = & 3-\\frac{8}{\\pi}\\\\ \\gamma_{1} & = & \\sqrt{2}\\frac{32-10\\pi}{\\left(3\\pi-8\\right)^{3/2}}\\\\ \\gamma_{2} & = & \\frac{-12\\pi^{2}+160\\pi-384}{\\left(3\\pi-8\\right)^{2}}\\\\ m_{d} & = & \\sqrt{2}\\\\ m_{n} & = & \\sqrt{2\\gamma^{-1}\\left(\\frac{3}{2},\\frac{1}{2}\\Gamma(\\frac{3}{2})\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: LAPACK Complex Double Precision Matrix Operations in C\nDESCRIPTION: Function declarations for LAPACK routines that operate on complex double precision (z) matrices. These functions handle various matrix operations including factorization, solving linear systems, computing condition numbers, and eigenvalue problems.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nvoid zpbtrf(char *uplo, int *n, int *kd, z *ab, int *ldab, int *info)\nvoid zpbtrs(char *uplo, int *n, int *kd, int *nrhs, z *ab, int *ldab, z *b, int *ldb, int *info)\nvoid zpftrf(char *transr, char *uplo, int *n, z *a, int *info)\nvoid zpftri(char *transr, char *uplo, int *n, z *a, int *info)\nvoid zpftrs(char *transr, char *uplo, int *n, int *nrhs, z *a, z *b, int *ldb, int *info)\nvoid zpocon(char *uplo, int *n, z *a, int *lda, d *anorm, d *rcond, z *work, d *rwork, int *info)\nvoid zpoequ(int *n, z *a, int *lda, d *s, d *scond, d *amax, int *info)\nvoid zpoequb(int *n, z *a, int *lda, d *s, d *scond, d *amax, int *info)\nvoid zporfs(char *uplo, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zposv(char *uplo, int *n, int *nrhs, z *a, int *lda, z *b, int *ldb, int *info)\nvoid zposvx(char *fact, char *uplo, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, char *equed, d *s, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zpotf2(char *uplo, int *n, z *a, int *lda, int *info)\nvoid zpotrf(char *uplo, int *n, z *a, int *lda, int *info)\nvoid zpotri(char *uplo, int *n, z *a, int *lda, int *info)\nvoid zpotrs(char *uplo, int *n, int *nrhs, z *a, int *lda, z *b, int *ldb, int *info)\nvoid zppcon(char *uplo, int *n, z *ap, d *anorm, d *rcond, z *work, d *rwork, int *info)\nvoid zppequ(char *uplo, int *n, z *ap, d *s, d *scond, d *amax, int *info)\nvoid zpprfs(char *uplo, int *n, int *nrhs, z *ap, z *afp, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zppsv(char *uplo, int *n, int *nrhs, z *ap, z *b, int *ldb, int *info)\nvoid zppsvx(char *fact, char *uplo, int *n, int *nrhs, z *ap, z *afp, char *equed, d *s, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zpptrf(char *uplo, int *n, z *ap, int *info)\nvoid zpptri(char *uplo, int *n, z *ap, int *info)\nvoid zpptrs(char *uplo, int *n, int *nrhs, z *ap, z *b, int *ldb, int *info)\nvoid zpstf2(char *uplo, int *n, z *a, int *lda, int *piv, int *rank, d *tol, d *work, int *info)\nvoid zpstrf(char *uplo, int *n, z *a, int *lda, int *piv, int *rank, d *tol, d *work, int *info)\nvoid zptcon(int *n, d *d, z *e, d *anorm, d *rcond, d *rwork, int *info)\nvoid zpteqr(char *compz, int *n, d *d, d *e, z *z, int *ldz, d *work, int *info)\nvoid zptrfs(char *uplo, int *n, int *nrhs, d *d, z *e, d *df, z *ef, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zptsv(int *n, int *nrhs, d *d, z *e, z *b, int *ldb, int *info)\nvoid zptsvx(char *fact, int *n, int *nrhs, d *d, z *e, d *df, z *ef, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zpttrf(int *n, d *d, z *e, int *info)\nvoid zpttrs(char *uplo, int *n, int *nrhs, d *d, z *e, z *b, int *ldb, int *info)\nvoid zptts2(int *iuplo, int *n, int *nrhs, d *d, z *e, z *b, int *ldb)\nvoid zrot(int *n, z *cx, int *incx, z *cy, int *incy, d *c, z *s)\nvoid zspcon(char *uplo, int *n, z *ap, int *ipiv, d *anorm, d *rcond, z *work, int *info)\nvoid zspmv(char *uplo, int *n, z *alpha, z *ap, z *x, int *incx, z *beta, z *y, int *incy)\nvoid zspr(char *uplo, int *n, z *alpha, z *x, int *incx, z *ap)\nvoid zsprfs(char *uplo, int *n, int *nrhs, z *ap, z *afp, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zspsv(char *uplo, int *n, int *nrhs, z *ap, int *ipiv, z *b, int *ldb, int *info)\nvoid zspsvx(char *fact, char *uplo, int *n, int *nrhs, z *ap, z *afp, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zsptrf(char *uplo, int *n, z *ap, int *ipiv, int *info)\nvoid zsptri(char *uplo, int *n, z *ap, int *ipiv, z *work, int *info)\nvoid zsptrs(char *uplo, int *n, int *nrhs, z *ap, int *ipiv, z *b, int *ldb, int *info)\nvoid zstedc(char *compz, int *n, d *d, d *e, z *z, int *ldz, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zstegr(char *jobz, char *range, int *n, d *d, d *e, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, int *isuppz, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid zstein(int *n, d *d, d *e, int *m, d *w, int *iblock, int *isplit, z *z, int *ldz, d *work, int *iwork, int *ifail, int *info)\nvoid zstemr(char *jobz, char *range, int *n, d *d, d *e, d *vl, d *vu, int *il, int *iu, int *m, d *w, z *z, int *ldz, int *nzc, int *isuppz, bint *tryrac, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid zsteqr(char *compz, int *n, d *d, d *e, z *z, int *ldz, d *work, int *info)\nvoid zsycon(char *uplo, int *n, z *a, int *lda, int *ipiv, d *anorm, d *rcond, z *work, int *info)\nvoid zsyconv(char *uplo, char *way, int *n, z *a, int *lda, int *ipiv, z *work, int *info)\nvoid zsyequb(char *uplo, int *n, z *a, int *lda, d *s, d *scond, d *amax, z *work, int *info)\nvoid zsymv(char *uplo, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)\nvoid zsyr(char *uplo, int *n, z *alpha, z *x, int *incx, z *a, int *lda)\nvoid zsyrfs(char *uplo, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zsysv(char *uplo, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, z *work, int *lwork, int *info)\nvoid zsysvx(char *fact, char *uplo, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, int *lwork, d *rwork, int *info)\nvoid zsyswapr(char *uplo, int *n, z *a, int *lda, int *i1, int *i2)\nvoid zsytf2(char *uplo, int *n, z *a, int *lda, int *ipiv, int *info)\nvoid zsytrf(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *lwork, int *info)\nvoid zsytri(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *info)\nvoid zsytri2(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *lwork, int *info)\nvoid zsytri2x(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *nb, int *info)\nvoid zsytrs(char *uplo, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, int *info)\nvoid zsytrs2(char *uplo, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, z *work, int *info)\nvoid ztbcon(char *norm, char *uplo, char *diag, int *n, int *kd, z *ab, int *ldab, d *rcond, z *work, d *rwork, int *info)\nvoid ztbrfs(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, z *ab, int *ldab, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid ztbtrs(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, z *ab, int *ldab, z *b, int *ldb, int *info)\nvoid ztfsm(char *transr, char *side, char *uplo, char *trans, char *diag, int *m, int *n, z *alpha, z *a, z *b, int *ldb)\nvoid ztftri(char *transr, char *uplo, char *diag, int *n, z *a, int *info)\nvoid ztfttp(char *transr, char *uplo, int *n, z *arf, z *ap, int *info)\nvoid ztfttr(char *transr, char *uplo, int *n, z *arf, z *a, int *lda, int *info)\nvoid ztgevc(char *side, char *howmny, bint *select, int *n, z *s, int *lds, z *p, int *ldp, z *vl, int *ldvl, z *vr, int *ldvr, int *mm, int *m, z *work, d *rwork, int *info)\nvoid ztgex2(bint *wantq, bint *wantz, int *n, z *a, int *lda, z *b, int *ldb, z *q, int *ldq, z *z, int *ldz, int *j1, int *info)\nvoid ztgexc(bint *wantq, bint *wantz, int *n, z *a, int *lda, z *b, int *ldb, z *q, int *ldq, z *z, int *ldz, int *ifst, int *ilst, int *info)\nvoid ztgsen(int *ijob, bint *wantq, bint *wantz, bint *select, int *n, z *a, int *lda, z *b, int *ldb, z *alpha, z *beta, z *q, int *ldq, z *z, int *ldz, int *m, d *pl, d *pr, d *dif, z *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid ztgsja(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, z *a, int *lda, z *b, int *ldb, d *tola, d *tolb, d *alpha, d *beta, z *u, int *ldu, z *v, int *ldv, z *q, int *ldq, z *work, int *ncycle, int *info)\nvoid ztgsna(char *job, char *howmny, bint *select, int *n, z *a, int *lda, z *b, int *ldb, z *vl, int *ldvl, z *vr, int *ldvr, d *s, d *dif, int *mm, int *m, z *work, int *lwork, int *iwork, int *info)\nvoid ztgsy2(char *trans, int *ijob, int *m, int *n, z *a, int *lda, z *b, int *ldb, z *c, int *ldc, z *d, int *ldd, z *e, int *lde, z *f, int *ldf, d *scale, d *rdsum, d *rdscal, int *info)\nvoid ztgsyl(char *trans, int *ijob, int *m, int *n, z *a, int *lda, z *b, int *ldb, z *c, int *ldc, z *d, int *ldd, z *e, int *lde, z *f, int *ldf, d *scale, d *dif, z *work, int *lwork, int *iwork, int *info)\nvoid ztpcon(char *norm, char *uplo, char *diag, int *n, z *ap, d *rcond, z *work, d *rwork, int *info)\nvoid ztpmqrt(char *side, char *trans, int *m, int *n, int *k, int *l, int *nb, z *v, int *ldv, z *t, int *ldt, z *a, int *lda, z *b, int *ldb, z *work, int *info)\nvoid ztpqrt(int *m, int *n, int *l, int *nb, z *a, int *lda, z *b, int *ldb, z *t, int *ldt, z *work, int *info)\nvoid ztpqrt2(int *m, int *n, int *l, z *a, int *lda, z *b, int *ldb, z *t, int *ldt, int *info)\nvoid ztprfb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, z *v, int *ldv, z *t, int *ldt, z *a, int *lda, z *b, int *ldb, z *work, int *ldwork)\nvoid ztprfs(char *uplo, char *trans, char *diag, int *n, int *nrhs, z *ap, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid ztptri(char *uplo, char *diag, int *n, z *ap, int *info)\nvoid ztptrs(char *uplo, char *trans, char *diag, int *n, int *nrhs, z *ap, z *b, int *ldb, int *info)\nvoid ztpttf(char *transr, char *uplo, int *n, z *ap, z *arf, int *info)\nvoid ztpttr(char *uplo, int *n, z *ap, z *a, int *lda, int *info)\nvoid ztrcon(char *norm, char *uplo, char *diag, int *n, z *a, int *lda, d *rcond, z *work, d *rwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Standardized Moment Calculation for Normal Distribution in New API\nDESCRIPTION: Demonstrates the standardized fourth moment (non-excess kurtosis) calculation for normal distribution using the new API, which returns 3.0 by mathematical definition.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nstats.Normal().moment(4, kind='standardized') \n```\n\n----------------------------------------\n\nTITLE: Using Interpolative Decompositions in SciPy\nDESCRIPTION: The new `scipy.linalg.interpolative` module includes routines for computing interpolative matrix decompositions. Dependencies include NumPy and SciPy. This feature is useful for applications requiring efficient matrix approximations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.13.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"\n# Example of using scipy.linalg.interpolative\nimport numpy as np\nfrom scipy.linalg.interpolative import isvd\n\n# Create a random matrix\nA = np.random.rand(10, 10)\n\n# Compute interpolative decomposition\nU, s, Vt = isvd(A, 3)\nprint('Approximation:', U @ np.diag(s) @ Vt)\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Skip Invalid Arguments Test\nDESCRIPTION: Example showing how to skip tests that use arguments invalid under SCIPY_ARRAY_API using the skip_xp_invalid_arg decorator.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@skip_xp_invalid_arg\ndef test_toto_masked_array(self):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Parsing High-Precision Floating Point Data\nDESCRIPTION: Represents a matrix of numeric values with extremely high precision, potentially used in scientific computing or numerical analysis applications\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rf_xxx_ipp/ellint_rf_xxx.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n7.2663217782974243164062500000000000000000e-02 7.2663217782974243164062500000000000000000e-02 7.2663217782974243164062500000000000000000e-02 3.7097332873940777060920942909440757608844e+00\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Class Example\nDESCRIPTION: Example command for running tests from the TestLinprogRSCommon class in the test_linprog.py file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.optimize.tests.test_linprog::TestLinprogRSCommon\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Properties of Binomial Distribution in LaTeX\nDESCRIPTION: This LaTeX snippet defines various statistical properties of the binomial distribution, including mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_binom.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & np\\\\ \\mu_{2} & = & np\\left(1-p\\right)\\\\ \\gamma_{1} & = & \\frac{1-2p}{\\sqrt{np\\left(1-p\\right)}}\\\\ \\gamma_{2} & = & \\frac{1-6p\\left(1-p\\right)}{np\\left(1-p\\right)}.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Documenting root_scalar Function with brentq Method in SciPy\nDESCRIPTION: A reStructuredText directive that documents the root_scalar function from scipy.optimize when used with the brentq method. The directive references the implementation from the _root_scalar_brentq_doc module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-brentq.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _optimize.root_scalar-brentq:\n\nroot_scalar(method='brentq')\n----------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root_scalar\n   :impl: scipy.optimize._root_scalar._root_scalar_brentq_doc\n   :method: brentq\n```\n\n----------------------------------------\n\nTITLE: State Space System Representation\nDESCRIPTION: Mathematical formulation of state-space representation for digital and analog systems with multiple inputs and outputs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/signal.rst#2025-04-14_snippet_12\n\nLANGUAGE: math\nCODE:\n```\n\\mathbf{x}[k+1] = A \\mathbf{x}[k] + B \\mathbf{u}[k]\\\\\n\\mathbf{y}[k] = C \\mathbf{x}[k] + D \\mathbf{u}[k]\n```\n\n----------------------------------------\n\nTITLE: Git Diff with Three Dots Notation\nDESCRIPTION: Example of git diff command using three dots notation (main...topic) which shows only the differences in the topic branch (commits A, B, and C) without considering changes in main.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/dot2_dot3.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit diff main...topic\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation Structure\nDESCRIPTION: RestructuredText configuration and structure for SciPy's main documentation page, including theme settings, module declaration, and toctree organization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:html_theme.sidebar_secondary.remove: true\n\n.. module:: scipy\n\n.. toctree::\n   :maxdepth: 1\n   :hidden:\n\n   Installing <https://scipy.org/install/>\n   User Guide <tutorial/index>\n   API reference <reference/index>\n   Building from source <building/index>\n   Development <dev/index>\n   Release notes <release>\n```\n\n----------------------------------------\n\nTITLE: Sparse Linear Algebra Improvements - SciPy Python\nDESCRIPTION: The `scipy.sparse.linalg.svds` function has been modified to accept a `LinearOperator` as its primary input, thereby increasing its flexibility in handling sparse matrices during singular value decomposition.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nscipy.sparse.linalg.svds\n\n```\n\n----------------------------------------\n\nTITLE: Sparse Matrix Performance Enhancements in scipy.sparse\nDESCRIPTION: Significant performance improvements have been made in the CSR, CSC, and DOK indexing speeds within the `scipy.sparse` module, enhancing efficient computation with sparse matrices.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"- Significant performance improvement in CSR, CSC, and DOK indexing speed.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Mass Function for Discrete Laplacian Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the probability mass function p(k) for the Discrete Laplacian Distribution over all integers for a > 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_dlaplace.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\np\\left(k\\right) & = & \\tanh\\left(\\frac{a}{2}\\right)e^{-a\\left|k\\right|},\n```\n\n----------------------------------------\n\nTITLE: Running Python with Deprecation Warnings\nDESCRIPTION: Command to run Python code while checking for deprecated SciPy functionality by enabling deprecation warnings.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.6.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -Wd\n```\n\n----------------------------------------\n\nTITLE: squareform return type change\nDESCRIPTION: The `scipy.spatial.distance.squareform` function now returns arrays with the same data type as the input array, which may be different from the previous behavior of always returning float64. This can affect code that relies on the output array having a specific data type.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"`scipy.spatial.distance.squareform` now returns arrays of the same dtype as\\nthe input, instead of always float64.\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Trust-NCG Method in SciPy Optimization\nDESCRIPTION: This snippet defines a reference for the trust-ncg method in SciPy's optimize.minimize function. It specifies the implementation path and method name for documentation purposes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-trustncg.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._trustregion_ncg._minimize_trust_ncg\n   :method: trust-ncg\n```\n\n----------------------------------------\n\nTITLE: Alpha Distribution Core Equations in LaTeX\nDESCRIPTION: Mathematical definitions of the probability density function (f), cumulative distribution function (F), and inverse CDF (G) for the Alpha distribution with shape parameter α.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_alpha.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\alpha\\right) & = & \\frac{1}{x^{2}\\Phi\\left(\\alpha\\right)\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}\\left(\\alpha-\\frac{1}{x}\\right)^{2}\\right)\\\\ F\\left(x;\\alpha\\right) & = & \\frac{\\Phi\\left(\\alpha-\\frac{1}{x}\\right)}{\\Phi\\left(\\alpha\\right)}\\\\ G\\left(q;\\alpha\\right) & = & \\left[\\alpha-\\Phi^{-1}\\left(q\\Phi\\left(\\alpha\\right)\\right)\\right]^{-1}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Power Normal Distribution Statistics in LaTeX\nDESCRIPTION: This LaTeX code defines expressions for the mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) of the Power Normal Distribution in terms of its moments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powernorm.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\mu_{1}^{\\prime}\\\\ \\mu_{2} & = & \\mu_{2}^{\\prime}-\\mu^{2}\\\\ \\gamma_{1} & = & \\frac{\\mu_{3}^{\\prime}-3\\mu\\mu_{2}-\\mu^{3}}{\\mu_{2}^{3/2}}\\\\ \\gamma_{2} & = & \\frac{\\mu_{4}^{\\prime}-4\\mu\\mu_{3}-6\\mu^{2}\\mu_{2}-\\mu^{4}}{\\mu_{2}^{2}}-3\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules\nDESCRIPTION: Command to fetch and update any submodules that SciPy needs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Mass Function (PMF) for Discrete Distributions in LaTeX\nDESCRIPTION: This LaTeX snippet defines the probability mass function (PMF) for a discrete random variable X. It explains that the PMF is the probability that the random variable takes on a particular value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\np\\left(x_{k}\\right)=P\\left[X=x_{k}\\right]\n```\n\n----------------------------------------\n\nTITLE: Central Moments and Shape Parameters\nDESCRIPTION: Formulas for mean, variance, skewness, and kurtosis in terms of raw moments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genpareto.rst#2025-04-14_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\mu & = & \\mu_{1}^{\\prime}\\\\\n\\mu_{2} & = & \\mu_{2}^{\\prime}-\\mu^{2}\\\\\n\\gamma_{1} & = & \\frac{\\mu_{3}^{\\prime}-3\\mu\\mu_{2}-\\mu^{3}}{\\mu_{2}^{3/2}}\\\\\n\\gamma_{2} & = & \\frac{\\mu_{4}^{\\prime}-4\\mu\\mu_{3}-6\\mu^{2}\\mu_{2}-\\mu^{4}}{\\mu_{2}^{2}}-3\n```\n\n----------------------------------------\n\nTITLE: Handling Input with NaNs in SciPy Stats\nDESCRIPTION: Many functions in `scipy.stats` have been improved to include a `nan_policy` keyword, allowing customized handling of input with NaNs. This feature enhances the robustness of statistical computation in the presence of missing data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats\n```\n\n----------------------------------------\n\nTITLE: Mathematical Formulas for Log-Uniform Distribution in LaTeX\nDESCRIPTION: LaTeX equations defining the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the log-uniform distribution with parameters a and b.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loguniform.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;a,b\\right) & = & \\frac{1}{x\\log\\left(b/a\\right)}\\\\ F\\left(x;a,b\\right) & = & \\frac{\\log\\left(x/a\\right)}{\\log\\left(b/a\\right)}\\\\ G\\left(q;a,b\\right) & = & a\\exp\\left(q\\log\\left(b/a\\right)\\right)=a\\left(\\frac{b}{a}\\right)^{q}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining root_scalar Ridder Method Directive in RST\nDESCRIPTION: This RST directive defines the documentation for the Ridder method option of SciPy's root_scalar function. It uses the scipy-optimize:function directive to document the function and specifies the implementation file and method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-ridder.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.root_scalar-ridder:\n\nroot_scalar(method='ridder')\n----------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root_scalar\n   :impl: scipy.optimize._root_scalar._root_scalar_ridder_doc\n   :method: ridder\n```\n\n----------------------------------------\n\nTITLE: Log Gamma Distribution Core Functions\nDESCRIPTION: Mathematical expressions for the probability density function (f), cumulative distribution function (F), and inverse CDF (G) of the Log Gamma distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loggamma.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\frac{\\exp\\left(cx-e^{x}\\right)}{\\Gamma\\left(c\\right)}\\\\ F\\left(x;c\\right) & = & \\frac{\\gamma\\left(c,e^{x}\\right)}{\\Gamma\\left(c\\right)}\\\\ G\\left(q;c\\right) & = & \\log\\left(\\gamma^{-1}\\left(c,q\\Gamma\\left(c\\right)\\right)\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix\nDESCRIPTION: Matrix of numerical values in scientific notation format. Each row contains 6 columns of data with high precision floating point numbers, suggesting coordinates or calculation results.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/spherical_harmonic_ipp/spherical_harmonic.txt#2025-04-14_snippet_2\n\nLANGUAGE: data\nCODE:\n```\n0.25e2\t0.15e2\t-0.5503502368927001953125e1\t0.17439391613006591796875e1\t-0.20612272315235832711064550794393208299382361965088e0\t-0.34042019972211732597646951568375363155696917414732e0\n0.25e2\t0.19e2\t0.68212032318115234375e-1\t0.5628895282745361328125e1\t-0.12862315073404389959698914161686961550654093238902e-18\t-0.17452067685713628457026780573925765370864488540548e-19\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy Equation for Power-function Distribution in LaTeX\nDESCRIPTION: This LaTeX code block defines the equation for the entropy of the Power-function Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powerlaw.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=1-\\frac{1}{a}-\\log\\left(a\\right)\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK Single Precision Matrix Operations in C\nDESCRIPTION: This snippet declares LAPACK routines for various matrix operations using single precision. It includes functions for bidiagonal and singular value decomposition, as well as operations on general, banded, and triangular matrices.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid sbbcsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, s *theta, s *phi, s *u1, int *ldu1, s *u2, int *ldu2, s *v1t, int *ldv1t, s *v2t, int *ldv2t, s *b11d, s *b11e, s *b12d, s *b12e, s *b21d, s *b21e, s *b22d, s *b22e, s *work, int *lwork, int *info)\nvoid sbdsdc(char *uplo, char *compq, int *n, s *d, s *e, s *u, int *ldu, s *vt, int *ldvt, s *q, int *iq, s *work, int *iwork, int *info)\nvoid sbdsqr(char *uplo, int *n, int *ncvt, int *nru, int *ncc, s *d, s *e, s *vt, int *ldvt, s *u, int *ldu, s *c, int *ldc, s *work, int *info)\nvoid sdisna(char *job, int *m, int *n, s *d, s *sep, int *info)\nvoid sgbbrd(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, s *ab, int *ldab, s *d, s *e, s *q, int *ldq, s *pt, int *ldpt, s *c, int *ldc, s *work, int *info)\n```\n\n----------------------------------------\n\nTITLE: Checking Excess Kurtosis of Normal Distribution in Old API\nDESCRIPTION: Shows the excess (Fisher's) kurtosis for a normal distribution using the old API, which returns 0.0 by convention.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nstats.norm.stats(moments='k')\n```\n\n----------------------------------------\n\nTITLE: GDB Debugging Commands for SciPy\nDESCRIPTION: GDB commands for debugging compiled code in SciPy, showing how to set breakpoints and run the debugger.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/compiled_code.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(gdb) break cephes_hyp2f1\n(gdb) run\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Data Set\nDESCRIPTION: This snippet contains a set of high-precision numerical data, each line consisting of four numbers. The first two numbers in each row are identical and very large (on the order of 10^32 to 10^33), the third number ranges from about 25 to 200, and the fourth number is very small (on the order of 10^-33 to 10^-34).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxz_ipp/ellint_rd_xxz.txt#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 6.1633407592773437500000000000000000000000e+01 1.3723372829748305508427871831946237053240e-33\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.2647183227539062500000000000000000000000e+02 9.5801442151455998796874454482513241844424e-34\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.6294470214843750000000000000000000000000e+02 8.4401240480534191819234381170635324120181e-34\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.6700170898437500000000000000000000000000e+02 8.3369749066577244571146824170958056041267e-34\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.8115838623046875000000000000000000000000e+02 8.0046017664866090143251205970069880389738e-34\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.8267517089843750000000000000000000000000e+02 7.9713006749675130788701084211445556631498e-34\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.9377355957031250000000000000000000000000e+02 7.7396566266640466143683913800449276665605e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 2.5397361755371093750000000000000000000000e+01 1.0493210917310457269854064486030985652322e-33\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 2.7095397949218750000000000000000000000000e+01 1.0159093046166320661735994635763629484111e-33\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 4.4206802368164062500000000000000000000000e+01 7.9534975921511118072569498199954171615310e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 6.1633407592773437500000000000000000000000e+01 6.7358842419680625286869940678948403281373e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 1.2647183227539062500000000000000000000000e+02 4.7022509156565904660880295602046456658203e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 1.6294470214843750000000000000000000000000e+02 4.1426913981598371616552690565262736388178e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 1.6700170898437500000000000000000000000000e+02 4.0920623957477137749277573202349225488389e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 1.8115838623046875000000000000000000000000e+02 3.9289226905814350994839210412774023123645e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 1.8267517089843750000000000000000000000000e+02 3.9125774159622416073097980415761350788085e-34\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 1.9377355957031250000000000000000000000000e+02 3.7988788730405868715932338986967991888257e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 2.5397361755371093750000000000000000000000e+01 4.6127312541610546849641210212785149397298e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 2.7095397949218750000000000000000000000000e+01 4.4658557211192255048920416451074078719090e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 4.4206802368164062500000000000000000000000e+01 3.4962936714335633607728600367370822203049e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 6.1633407592773437500000000000000000000000e+01 2.9610406206626477900363472992392324941539e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.2647183227539062500000000000000000000000e+02 2.0670717413841971147853115344933008984511e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.6294470214843750000000000000000000000000e+02 1.8210938710011131543725308813468116537906e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.6700170898437500000000000000000000000000e+02 1.7988377681138516748270736691492687086743e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.8115838623046875000000000000000000000000e+02 1.7271228638061820885802661067392581651399e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.8267517089843750000000000000000000000000e+02 1.7199376123433129628092410593402075217247e-34\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.9377355957031250000000000000000000000000e+02 1.6699566459241499291562877092138433464802e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 2.5397361755371093750000000000000000000000e+01 3.1615297421485730363800317663226072790198e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 2.7095397949218750000000000000000000000000e+01 3.0608624063512000331422527742044627038336e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 4.4206802368164062500000000000000000000000e+01 2.3963321989660186943685167196210441063302e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 6.1633407592773437500000000000000000000000e+01 2.0294739654494892973943507407364831779446e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.2647183227539062500000000000000000000000e+02 1.4167547228436057228628980462595127199327e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.6294470214843750000000000000000000000000e+02 1.2481634240496495585128099662067737915017e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.6700170898437500000000000000000000000000e+02 1.2329092660800252694011338921477882885786e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.8115838623046875000000000000000000000000e+02 1.1837564343993353121070826565567588385356e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.8267517089843750000000000000000000000000e+02 1.1788317195280353039705317161574112528990e-34\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.9377355957031250000000000000000000000000e+02 1.1445751580314231694822048727675807612535e-34\n```\n\n----------------------------------------\n\nTITLE: Configuring Meson Build\nDESCRIPTION: Command to set up the Meson build configuration with a specified build directory and installation prefix.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/understanding_meson.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmeson setup build --prefix=$PWD/build-install\n```\n\n----------------------------------------\n\nTITLE: Documenting scipy.optimize.root with excitingmixing method in ReStructuredText\nDESCRIPTION: ReStructuredText documentation for the excitingmixing method of scipy.optimize.root function. This specifies the method implementation and creates an appropriate documentation reference.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-excitingmixing.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _optimize.root-excitingmixing:\n\nroot(method='excitingmixing')\n--------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._root._root_excitingmixing_doc\n   :method: excitingmixing\n```\n\n----------------------------------------\n\nTITLE: Running SciPy Tests\nDESCRIPTION: Commands demonstrating different ways to run SciPy tests after installation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/understanding_meson.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd doc\npython -c \"from scipy import constants as s; s.test()\"\npytest --pyargs scipy\n```\n\n----------------------------------------\n\nTITLE: Referencing root(method='df-sane') in SciPy's optimize module using reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the df-sane method of scipy.optimize.root function, referencing its implementation in the _spectral._root_df_sane module. It uses reStructuredText format for the SciPy documentation system.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-dfsane.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.root-dfsane:\n\nroot(method='df-sane')\n--------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._spectral._root_df_sane\n   :method: df-sane\n```\n\n----------------------------------------\n\nTITLE: Git Diff with Two Dots Notation\nDESCRIPTION: Example of git diff command using two dots notation (main..topic) which compares the tip of main (G) to the tip of topic (C), including the effects of commits F and G.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/dot2_dot3.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit diff main..topic\n```\n\n----------------------------------------\n\nTITLE: Multivariate Integration with Ctypes - SciPy Python\nDESCRIPTION: SciPy now enhances `scipy.integrate` routines to integrate multivariate Ctypes functions directly, which allows better performance by avoiding callbacks to Python, thus optimizing execution time in computational tasks.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nscipy.integrate\n\n```\n\n----------------------------------------\n\nTITLE: Publishing and Previewing Benchmark Results with asv\nDESCRIPTION: These commands publish the benchmark results and start a local server to preview them in a web browser.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nasv publish\nasv preview\n```\n\n----------------------------------------\n\nTITLE: Performing Rank-1 Update on Hermitian Packed Matrix in C\nDESCRIPTION: The declared function is set to apply a rank-1 update on a Hermitian packed matrix, leveraging complex arithmetic. Key parameters include complex vectors influencing matrix transformation, and the operation is defined within the BLAS context for efficient matrix handling.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nvoid zhpr(char *uplo, int *n, d *alpha, z *x, int *incx, z *ap)\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules\nDESCRIPTION: Initializes and updates any Git submodules that SciPy depends on, such as Boost libraries.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/development_setup.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Documenting SciPy minimize 'trust-constr' Method in reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for the 'trust-constr' method in SciPy's minimize function. It includes a reference to the implementation file and specifies the method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-trustconstr.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _optimize.minimize-trustconstr:\n\nminimize(method='trust-constr')\n-------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._trustregion_constr._minimize_trustregion_constr\n   :method: trust-constr\n```\n\n----------------------------------------\n\nTITLE: Student t Distribution Core Functions in LaTeX\nDESCRIPTION: Mathematical representation of the probability density function (f), cumulative distribution function (F), and quantile function (G) for the Student t distribution with shape parameter ν.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_t.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nf\\left(x;\\nu\\right) & = & \\frac{\\Gamma\\left(\\frac{\\nu+1}{2}\\right)}{\\sqrt{\\pi\\nu}\\Gamma\\left(\\frac{\\nu}{2}\\right)\\left[1+\\frac{x^{2}}{\\nu}\\right]^{\\frac{\\nu+1}{2}}}\\\\\\nF\\left(x;\\nu\\right) & = & \\left\\{\\begin{array}{ccc}\\frac{1}{2}I\\left(\\frac{\\nu}{\\nu+x^{2}}; \\frac{\\nu}{2},\\frac{1}{2}\\right) &  & x\\leq0\\\\1-\\frac{1}{2}I\\left(\\frac{\\nu}{\\nu+x^{2}}; \\frac{\\nu}{2},\\frac{1}{2}\\right) &  & x\\geq0\\end{array}\\right.\\\\\\nG\\left(q;\\nu\\right) & = & \\left\\{\\begin{array}{ccc}-\\sqrt{\\frac{\\nu}{I^{-1}\\left(2q; \\frac{\\nu}{2},\\frac{1}{2}\\right)}-\\nu} &  & q\\leq\\frac{1}{2}\\\\\\sqrt{\\frac{\\nu}{I^{-1}\\left(2-2q; \\frac{\\nu}{2},\\frac{1}{2}\\right)}-\\nu} &  & q\\geq\\frac{1}{2}\\end{array}\\right.\n```\n\n----------------------------------------\n\nTITLE: Log-Likelihood Function\nDESCRIPTION: Mathematical expression for the log-likelihood function used in parameter estimation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_arcsine.rst#2025-04-14_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nl_{\\mathbf{x}}\\left(\\cdot\\right)=N\\log\\pi+\\frac{N}{2}\\overline{\\log\\mathbf{x}}+\\frac{N}{2}\\overline{\\log\\left(1-\\mathbf{x}\\right)}\n```\n\n----------------------------------------\n\nTITLE: Defining the root method with diagonal Broyden algorithm in SciPy documentation\nDESCRIPTION: ReStructuredText documentation that specifies how to use the diagonal Broyden method in SciPy's root finding functionality. It references the implementation in scipy.optimize._root._root_diagbroyden_doc.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-diagbroyden.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _optimize.root-diagbroyden:\n\nroot(method='diagbroyden')\n--------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._root._root_diagbroyden_doc\n   :method: diagbroyden\n```\n\n----------------------------------------\n\nTITLE: Matrix Data in Scientific Notation\nDESCRIPTION: A dataset containing floating point numbers in scientific notation format, arranged in 4 columns. Each row contains computations or matrix elements with very small magnitude values (10^-20 to 10^-27).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rg_xxx_ipp/ellint_rg_xxx.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n6.3673277743463290223091457894565066834118e-27 0.0000000000000000000000000000000000000000e+00 6.3673277743463290223091457894565066834118e-27 6.2671268449379496857957869775423334277517e-14\n6.3673277743463290223091457894565066834118e-27 6.3673277743463290223091457894565066834118e-27 6.3673277743463290223091457894565066834118e-27 7.9795537308463115720116352056723516561691e-14\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Deriving Moment Generating Function for Anglit Distribution in LaTeX\nDESCRIPTION: This snippet provides the integral form and the closed-form solution for the moment generating function (M(t)) of the Anglit distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_anglit.rst#2025-04-14_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} M\\left(t\\right) & = & \\int_{-\\frac{\\pi}{4}}^{\\frac{\\pi}{4}}\\cos\\left(2x\\right)e^{xt}dx\\\\  & = & \\frac{4\\cosh\\left(\\frac{\\pi t}{4}\\right)}{t^{2}+4}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Folded Normal Distribution Equations in LaTeX\nDESCRIPTION: This LaTeX code block defines the probability density function, cumulative distribution function, inverse cumulative distribution function, moment generating function, and various statistical properties of the Folded Normal Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_foldnorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\sqrt{\\frac{2}{\\pi}}\\cosh\\left(cx\\right)\\exp\\left(-\\frac{x^{2}+c^{2}}{2}\\right)\\\\\nF\\left(x;c\\right) & = & \\Phi\\left(x-c\\right)-\\Phi\\left(-x-c\\right)=\\Phi\\left(x-c\\right)+\\Phi\\left(x+c\\right)-1\\\\\nG\\left(q;c\\right) & = & F^{-1}\\left(q;c\\right)\\\\\nM\\left(t\\right) & = & \\exp\\left(\\frac{t}{2}\\left(t-2c\\right)\\right) \\left(1+e^{2ct}\\right)\\\\\nk & = & \\mathrm{erf}\\left(\\frac{c}{\\sqrt{2}}\\right)\\\\\np & = & \\exp\\left(-\\frac{c^{2}}{2}\\right)\\\\\n\\mu & = & \\sqrt{\\frac{2}{\\pi}}p+ck\\\\\n\\mu_{2} & = & c^{2}+1-\\mu^{2}\\\\\n\\gamma_{1} & = & \\frac{\\sqrt{\\frac{2}{\\pi}}p^{3}\\left(4-\\frac{\\pi}{p^{2}}\\left(2c^{2}+1\\right)\\right)+2ck\\left(6p^{2}+3cpk\\sqrt{2\\pi}+\\pi c\\left(k^{2}-1\\right)\\right)}{\\pi\\mu_{2}^{3/2}}\\\\\n\\gamma_{2} & = & \\frac{c^{4}+6c^{2}+3+6\\left(c^{2}+1\\right)\\mu^{2}-3\\mu^{4}-4p\\mu\\left(\\sqrt{\\frac{2}{\\pi}}\\left(c^{2}+2\\right)+\\frac{ck}{p}\\left(c^{2}+3\\right)\\right)}{\\mu_{2}^{2}}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: SciPy IO Module Function Removals\nDESCRIPTION: Comprehensive list of functions removed from scipy.io in version 0.8.0, with notes on replacements and migration paths\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.8.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nRemoved functions:\n- npfile\n- save\n- load\n- create_module\n- create_shelf\n- objload\n- objsave\n- fopen\n- read_array\n- write_array\n- fread\n- fwrite\n- bswap\n- packbits\n- unpackbits\n- convert_objectarray\n```\n\n----------------------------------------\n\nTITLE: Statistical Measures of Log-Uniform Distribution in LaTeX\nDESCRIPTION: LaTeX equations for various statistical measures of the log-uniform distribution, including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (mₐ), and median (mₙ).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loguniform.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} d & = & \\log\\left(a/b\\right)\\\\ \\mu & = & \\frac{a-b}{d}\\\\ \\mu_{2} & = & \\mu\\frac{a+b}{2}-\\mu^{2}=\\frac{\\left(a-b\\right)\\left[a\\left(d-2\\right)+b\\left(d+2\\right)\\right]}{2d^{2}}\\\\ \\gamma_{1} & = & \\frac{\\sqrt{2}\\left[12d\\left(a-b\\right)^{2}+d^{2}\\left(a^{2}\\left(2d-9\\right)+2abd+b^{2}\\left(2d+9\\right)\\right)\\right]}{3d\\sqrt{a-b}\\left[a\\left(d-2\\right)+b\\left(d+2\\right)\\right]^{3/2}}\\\\ \\gamma_{2} & = & \\frac{-36\\left(a-b\\right)^{3}+36d\\left(a-b\\right)^{2}\\left(a+b\\right)-16d^{2}\\left(a^{3}-b^{3}\\right)+3d^{3}\\left(a^{2}+b^{2}\\right)\\left(a+b\\right)}{3\\left(a-b\\right)\\left[a\\left(d-2\\right)+b\\left(d+2\\right)\\right]^{2}}-3\\\\ m_{d} & = & a\\\\ m_{n} & = & \\sqrt{ab}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Reference Definitions\nDESCRIPTION: Defines document references and section headers in ReStructuredText format for Git development documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/gitwash.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. _using-git:\n.. _git-development:\n\n=====================\n Git for development\n=====================\n```\n\n----------------------------------------\n\nTITLE: Newton Method Error Handling\nDESCRIPTION: Updated scipy.optimize.newton to raise RuntimeError when encountering zero derivatives or failing to converge with default arguments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.3.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.newton()\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Table Analysis\nDESCRIPTION: Structured numerical data representing computational results with multiple columns showing different numeric parameters and outputs\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/gsl/mathieu_mc_ms.txt#2025-04-14_snippet_0\n\nLANGUAGE: numeric_data\nCODE:\n```\n2 1 1.000000000000000062282e-09 0.3332964534549792134932 5.338304929138721452911e-10 -2.059366687557270481079 -1.873253982570236564342\n```\n\n----------------------------------------\n\nTITLE: Defining Cumulative Distribution Function (CDF) for Discrete Distributions in LaTeX\nDESCRIPTION: This LaTeX snippet defines the cumulative distribution function (CDF) for a discrete distribution. It shows how to calculate the probability that the random variable X is less than or equal to a given value x.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\nF\\left(x\\right)=P\\left[X\\leq x\\right]=\\sum_{x_{k}\\leq x}p\\left(x_{k}\\right)\n```\n\n----------------------------------------\n\nTITLE: Defining COBYQA Method Reference in RST\nDESCRIPTION: Sphinx documentation structure defining the minimize function with COBYQA method, including path reference to the implementation file and method specification\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-cobyqa.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _optimize.minimize-cobyqa:\n\nminimize(method='COBYQA')\n-------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._cobyqa_py._minimize_cobyqa\n   :method: COBYQA\n```\n\n----------------------------------------\n\nTITLE: Moments Calculation Formulas\nDESCRIPTION: Mathematical expressions for calculating non-central and central moments of statistical distributions using PDF and PPF.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\n\\mu_{n}^{\\prime}=\\int_{-\\infty}^{\\infty}x^{n}f\\left(x\\right)dx\n\\mu_{n}^{\\prime}=\\int_{0}^{1}G^{n}\\left(q\\right)dq\n```\n\n----------------------------------------\n\nTITLE: Checking out a Pull Request using GitHub CLI in Bash\nDESCRIPTION: This command uses the GitHub CLI to check out a specific pull request into a local branch. It requires the GitHub CLI to be installed and the user to be in the SciPy root directory.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/reviewing_prs.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh pr checkout PULL_REQUEST_ID\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for SciPy Development\nDESCRIPTION: Commands to create and activate a conda environment with all required and optional dependencies for SciPy development.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmamba env create -f environment.yml\nmamba activate scipy-dev\n```\n\n----------------------------------------\n\nTITLE: Entropy Formula\nDESCRIPTION: Formula for the entropy of the Generalized Pareto Distribution when c > 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genpareto.rst#2025-04-14_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=1+c\\quad c>0\n```\n\n----------------------------------------\n\nTITLE: Checking Out Remote Branch in Git Bash\nDESCRIPTION: This Git command creates a local branch that tracks a branch from the specified remote repository. It's used to create a local copy of the author's branch for collaboration or review.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/reviewing_prs.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout --track REMOTE_NAME/BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Legacy numpy.distutils Build Commands\nDESCRIPTION: Common build and development commands using the old numpy.distutils-based system. Includes commands for testing, development builds, and package installation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/distutils_equivalents.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython runtests.py\npython setup.py build_ext -i\nexport PYTHONPATH=/home/username/path/to/scipy/reporoot\npython setup.py develop\npython setup.py bdist_wheel\npip install dist/scipy*.whl\npip install .\npip install . -v --no-build-isolation\n```\n\n----------------------------------------\n\nTITLE: Referencing Dogleg Method in Scipy Optimize Minimize Function\nDESCRIPTION: This snippet defines a reference for the 'dogleg' method in the scipy.optimize.minimize function. It specifies the implementation path and method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-dogleg.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._trustregion_dogleg._minimize_dogleg\n   :method: dogleg\n```\n\n----------------------------------------\n\nTITLE: Referencing High-Level SciPy Roadmap\nDESCRIPTION: ReStructuredText directive to reference the high-level overview of the SciPy roadmap.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/roadmap-detailed.rst#2025-04-14_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:ref:`scipy-roadmap`\n```\n\n----------------------------------------\n\nTITLE: Building SciPy with Accelerate Framework\nDESCRIPTION: Commands for building SciPy development version and wheel with Accelerate framework on macOS 13.3+.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/blas_lapack.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python dev.py build --with-accelerate\n$ python dev.py build --with-scipy-openblas\n\n$ python -m build -Csetup-args=-Dblas=accelerate\n```\n\n----------------------------------------\n\nTITLE: SciPy Pull Request Changes (No Code Snippets)\nDESCRIPTION: This is a changelog-style list of pull requests without actual code snippets. The changes include improvements to signal processing, optimization algorithms, statistical functions, sparse matrix operations, and special mathematical functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Removed Wavelet Functions\nDESCRIPTION: List of wavelet-related functions that have been removed from scipy.signal module. Users are directed to use pywavelets instead.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndaub\nqmf\ncascade\nmorlet\nmorlet2\nricker\ncwt\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results with dev.py\nDESCRIPTION: This command compares benchmark results between the active branch and the main branch using the dev.py script.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython dev.py bench --compare main\n```\n\n----------------------------------------\n\nTITLE: Performing Hermitian Matrix-Vector Operations in C\nDESCRIPTION: This snippet is a C function template for Hermitian matrix-vector multiplication and rank-1 update operations. It uses complex numbers, taking parameters to specify the portion of the matrix, scaling factors, and vectors involved. The function is declared to be called from other parts of the codebase where the actual logic resides.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid zhemv(char *uplo, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)\n```\n\n----------------------------------------\n\nTITLE: Processing Large Numerical Array in Python\nDESCRIPTION: This code snippet represents a large array of 1000 floating-point numbers. It can be used as input for various numerical processing tasks in Python, such as statistical analysis, data visualization, or machine learning algorithms.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-jensenshannon-ml-iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndata = [0.0375526043804, 0.0386582188727, 0.0404030430489, 0.0493940445937, 0.0396161416365, 0.0302144214958, 0.0282464575757, 0.0525063270042, 0.0345543356833, 0.0213910735206, ..., 0.049216782691]\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoModule for scipy.integrate in reStructuredText\nDESCRIPTION: This snippet configures the automodule directive for the scipy.integrate module. It specifies that no members, inherited members, or special members should be included in the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/integrate.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.integrate\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Cumulative Distribution and Probability Density Functions for Asymmetric Laplace Distribution in LaTeX\nDESCRIPTION: This LaTeX code block defines the cumulative distribution function F(x, κ) and probability density function f(x, κ) for the Asymmetric Laplace Distribution. It specifies the functions for both x ≥ 0 and x < 0 cases.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace_asymmetric.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\nF(x, \\kappa) & = & 1-\\frac{\\kappa^{-1}}{\\kappa+\\kappa^{-1}}\\exp(-x\\kappa),\\quad x\\ge0; \\\\\n             & = & \\frac{\\kappa}{\\kappa+\\kappa^{-1}}\\exp(x/\\kappa),\\quad x<0. \\\\\nf(x, \\kappa) & = & \\frac{1}{\\kappa+\\kappa^{-1}}\\exp(-x\\kappa),\\quad x\\ge0; \\\\\n             & = & \\frac{1}{\\kappa+\\kappa^{-1}}\\exp(x/\\kappa),\\quad x<0.\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Referencing Krylov Method in SciPy's root Function Documentation\nDESCRIPTION: This RST code defines a documentation reference for the Krylov subspace method option in SciPy's root function. It creates an anchor for the documentation and specifies the implementation location.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-krylov.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.root-krylov:\n\nroot(method='krylov')\n--------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._root._root_krylov_doc\n   :method: krylov\n```\n\n----------------------------------------\n\nTITLE: Logistic Distribution Core Functions in TeX\nDESCRIPTION: Mathematical expressions for the core functions of the Logistic distribution including probability density function (f(x)), cumulative distribution function (F(x)), quantile function (G(q)), and survival function (S(x)).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_logistic.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{\\exp\\left(-x\\right)}{\\left(1+\\exp\\left(-x\\right)\\right)^{2}}\\\\ F\\left(x\\right) & = & \\frac{1}{1+\\exp\\left(-x\\right)}\\\\ G\\left(q\\right) & = & -\\log\\left(1/q-1\\right)\\\\ S\\left(x\\right) & = & n_F(x)=\\frac{1}{1+\\exp\\left(x\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Basic KStwo Distribution Usage Example\nDESCRIPTION: Demonstrates calculating survival function probabilities for different gap sizes with a sample size of 5.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_kstwo.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from scipy.stats import kstwo\n>>> kstwo.sf([0, 0.5, 1.0], 5)\narray([1.   , 0.112, 0.   ])\n```\n\n----------------------------------------\n\nTITLE: Defining Normal Distribution Functions in LaTeX\nDESCRIPTION: Mathematical expressions for the probability density function (f(x)), cumulative distribution function (F(x)), and inverse cumulative distribution function (G(q)) of the Normal Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_norm.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{e^{-x^{2}/2}}{\\sqrt{2\\pi}}\\\\F\\left(x\\right) & = & \\Phi\\left(x\\right)=\\frac{1}{2}+\\frac{1}{2}\\mathrm{erf}\\left(\\frac{x}{\\sqrt{2}}\\right)\\\\G\\left(q\\right) & = & \\Phi^{-1}\\left(q\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: General nth Moment Formula\nDESCRIPTION: Formula for calculating the nth raw moment of the half-logistic distribution, valid for n ≠ 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halflogistic.rst#2025-04-14_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\mu_{n}^{\\prime}=2(1-2^{1-n})n!\\zeta(n)\\quad n\\neq1\n```\n\n----------------------------------------\n\nTITLE: Tabular Numerical Data for SciPy Calculations\nDESCRIPTION: This snippet contains a table of numerical data with five columns. Each row starts with a value that increments by 0.03 (0.54, 0.57, 0.60). The subsequent columns contain floating-point numbers in scientific notation, with the last column containing very large negative exponents.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yn_data_ipp/bessel_yn_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n0.54e2\t0.677385044097900390625e1\t-0.415400028628792112351061646920744162805e41\n0.54e2\t0.941909885406494140625e1\t-0.9448773063492740921951882034107555889314e33\n0.54e2\t0.110517024993896484375e2\t-0.1976226953367884232990383015948873832395e30\n0.54e2\t0.139249114990234375e2\t-0.1060239929445304895052402195312333832751e25\n0.54e2\t0.15408351898193359375e2\t-0.5524852310470588596167631811840899911653e22\n0.54e2\t0.27344074249267578125e2\t-0.2443271932118273203257306735627770090503e10\n0.54e2\t0.273610286712646484375e2\t-0.2374028629035348856642105835047755802793e10\n0.54e2\t0.316179637908935546875e2\t-0.3530147161153490224199678627355098967203e7\n0.54e2\t0.4073618316650390625e2\t-0.1523687692433405507809303644341462788826e3\n0.54e2\t0.4175042724609375e2\t-0.6588811991238001972711661692129876612553e2\n0.54e2\t0.452895965576171875e2\t-0.5340581063654305505018449302519149157836e1\n0.54e2\t0.45668792724609375e2\t-0.4241843123154779988294497423588841413993e1\n0.54e2\t0.48443389892578125e2\t-0.101007717644958422192422706197265435244e1\n0.57e2\t0.48770198822021484375e1\t-0.2161626205739229156929028218866774547264e53\n0.57e2\t0.6349340915679931640625e1\t-0.6857816478363427954638793152049033022474e46\n0.57e2\t0.677385044097900390625e1\t-0.1757633522876923346308719323318346692964e45\n0.57e2\t0.941909885406494140625e1\t-0.1470724735456049669352892370483504273101e37\n0.57e2\t0.110517024993896484375e2\t-0.1887826470413712223495666019943375481003e33\n0.57e2\t0.139249114990234375e2\t-0.4968500213339560352225854720671631559582e27\n0.57e2\t0.15408351898193359375e2\t-0.1888817184319266555840067091337856309212e25\n0.57e2\t0.27344074249267578125e2\t-0.1288212844049340614131327714502525981742e12\n0.57e2\t0.273610286712646484375e2\t-0.1249013008694464348198848991016934457599e12\n0.57e2\t0.316179637908935546875e2\t-0.1107695891983348156343774480706314333398e9\n0.57e2\t0.4073618316650390625e2\t-0.1713142312580323786184747142248961806243e4\n0.57e2\t0.4175042724609375e2\t-0.6604590530228345805227426149899214659609e3\n0.57e2\t0.452895965576171875e2\t-0.3518710444917558080090981427376821716428e2\n0.57e2\t0.45668792724609375e2\t-0.2663864616630346108683365093711526997299e2\n0.57e2\t0.48443389892578125e2\t-0.4306298772312023516324511417973550342892e1\n0.6e2\t0.48770198822021484375e1\t-0.2892081353968073031088937298478587490074e57\n0.6e2\t0.6349340915679931640625e1\t-0.4142396646874563143741981167064851524547e50\n0.6e2\t0.677385044097900390625e1\t-0.8732096096999191430049139445386679139699e48\n0.6e2\t0.941909885406494140625e1\t-0.2690978379323628746253084206502905589883e40\n0.6e2\t0.110517024993896484375e2\t-0.2121795509181260451828069876653538790412e36\n0.6e2\t0.139249114990234375e2\t-0.2744926792364829807723799177062944239004e30\n0.6e2\t0.15408351898193359375e2\t-0.76223015502590825948030726266442383048e27\n0.6e2\t0.27344074249267578125e2\t-0.8156824115957781369979544049155027772995e13\n0.6e2\t0.273610286712646484375e2\t-0.7891899080153060843746196671232001179968e13\n0.6e2\t0.316179637908935546875e2\t-0.4219761955150242610522454447404911542549e10\n0.6e2\t0.4073618316650390625e2\t-0.2439731391973693955896903470108472114229e5\n0.6e2\t0.4175042724609375e2\t-0.8451812456206044962273070236632882957476e4\n0.6e2\t0.452895965576171875e2\t-0.3079126889383895719027479423955437627905e3\n0.6e2\t0.45668792724609375e2\t-0.2235394837400507231196792387743951216596e3\n0.6e2\t0.48443389892578125e2\t-0.2621645109951344510244589118146666833865e2\n```\n\n----------------------------------------\n\nTITLE: Viewing Remote Branches in Git Bash\nDESCRIPTION: This Git command shows the branches available in the specified remote repository. It's useful for identifying which branches are available in the author's fork.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/reviewing_prs.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit remote show REMOTE_NAME\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Number Array in Python\nDESCRIPTION: A large array of floating-point numbers in scientific notation, likely used for numerical computations or data analysis in SciPy. The array contains hundreds of values, each represented with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-minkowski-5.8-ml-iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndata = [2.8068283e+00, 2.8077255e+00, 2.9323793e+00, 1.6119586e+00, 2.7091848e+00, 4.6187512e+00, 3.7092298e+00, 4.5442576e+00, 4.2099019e+00, 4.4180513e+00, 5.2548586e+00, 3.1079005e+00, 4.9407795e+00, 4.4195588e+00, 4.7516511e+00, 3.7329384e+00, 3.9191954e+00, 4.1389224e+00, 3.6127211e+00, 3.7328453e+00, 3.9318950e+00, 4.1174259e+00, 5.3601143e+00, 5.5513974e+00, 3.6073242e+00, 4.3425018e+00, 3.5138357e+00, 5.3586950e+00, 3.5235095e+00, 4.3257995e+00, 4.6452056e+00, 3.4217238e+00, 3.5154314e+00, 4.2169032e+00, 4.4544908e+00, 4.7602896e+00, 5.1057502e+00, 4.2193718e+00, 3.7147036e+00, 4.2043114e+00, 4.8058872e+00, 4.2239687e+00, 4.1138950e+00, 3.4146523e+00, 4.0526593e+00, 4.2382079e+00, 3.7847403e+00, 3.7092298e+00, 4.5291248e+00, 4.3385161e+00, 3.8547029e+00, 3.6228903e+00, 3.8290678e+00, 4.0228342e+00, 3.7082809e+00, 6.3164977e-01, 3.0026460e-01, 1.2085435e-01, 6.0948506e-01, 1.0143978e+00, 1.3131369e+00, 8.0928056e-01, 4.0246123e-01, 8.5409862e-01, 7.0016860e-01, 5.0477564e-01, 6.0201716e-01, 5.6595908e-01, 4.0363334e-01, 4.1212852e-01, 1.2699992e-01, 3.3818226e-01, 4.1210927e-01, 3.3818226e-01, 2.0181667e-01, 1.2085435e-01, 5.0855077e-01, 1.0001598e+00, 1.1055707e+00, 0.0000000e+00, 3.0026460e-01, 6.0964891e-01, 0.0000000e+00, 5.0043842e-01, 3.0482299e-01, 4.0246123e-01, 8.0254500e-01, 5.0043842e-01, 5.2133802e-01, 7.0556260e-01, 2.0181667e-01, 7.0008735e-01, 3.0026460e-01, 6.0948506e-01, 2.0181667e-01, 3.2490712e+00, 3.0153168e+00, 3.4297841e+00, 2.5067523e+00, 3.1166337e+00, 3.0027816e+00, 3.2112793e+00, 1.8068048e+00, 3.1183051e+00, 2.4116924e+00, 2.0138832e+00, 2.7116615e+00, 2.5059537e+00, 3.2048192e+00, 2.1144760e+00, 2.9351753e+00, 3.0063019e+00, 2.6019122e+00, 3.0106587e+00, 2.4030297e+00, 3.3125861e+00, 2.5120719e+00, 3.4068163e+00, 3.2029877e+00, 2.8162444e+00, 2.9267417e+00, 3.3252407e+00, 3.5189464e+00, 3.0077107e+00, 2.0051350e+00, 2.3037132e+00, 2.2028146e+00, 2.4058620e+00, 3.6044981e+00, 3.0062070e+00, 3.0107283e+00, 3.2237456e+00, 2.9105093e+00, 2.6052541e+00, 2.5062865e+00, 2.9018772e+00, 3.1056084e+00, 2.5048522e+00, 1.8082911e+00, 2.7043948e+00, 2.7029415e+00, 2.7046027e+00, 2.8091099e+00, 1.5248852e+00, 2.6055127e+00, 4.5209020e+00, 3.6112573e+00, 4.4212031e+00, 4.1056541e+00, 4.3138986e+00, 5.1255338e+00, 3.0133997e+00, 4.8167235e+00, 4.3081273e+00, 4.6319211e+00, 3.6205854e+00, 3.8114965e+00, 4.0212972e+00, 3.5173798e+00, 3.6449970e+00, 3.8299342e+00, 4.0081754e+00, 5.2290121e+00, 5.4254411e+00, 3.5039202e+00, 4.2264145e+00, 3.4198378e+00, 5.2270034e+00, 3.4138008e+00, 4.2149806e+00, 4.5183778e+00, 3.3145502e+00, 3.4118179e+00, 4.1129687e+00, 4.3210760e+00, 4.6261633e+00, 4.9512603e+00, 4.1165035e+00, 3.6051692e+00, 4.1014742e+00, 4.6540056e+00, 4.1257291e+00, 4.0071257e+00, 3.3129914e+00, 3.9274863e+00, 4.1301604e+00, 3.6542046e+00, 3.6112573e+00, 4.4192311e+00, 4.2328883e+00, 3.7399948e+00, 3.5155767e+00, 3.7180846e+00, 3.9250546e+00, 3.6083191e+00, 6.0184622e-01, 7.4263078e-01, 1.1138955e+00, 4.2268438e-01, 7.0096708e-01, 2.4170870e-01, 3.0490481e-01, 3.0490481e-01, 3.0017653e-01, 3.0474106e-01, 3.0474106e-01, 8.0879701e-01, 4.2362917e-01, 6.1119267e-01, 7.0462697e-01, 4.1317535e-01, 2.2538848e-01, 3.0482299e-01, 7.1621748e-01, 6.7616723e-01, 3.0474106e-01, 4.0125062e-01, 5.0001522e-01, 6.3164977e-01, 5.2491131e-01, 2.2573593e-01, 6.3164977e-01, 1.0207396e+00, 3.3808272e-01, 4.0246123e-01, 1.4180463e+00, 1.0030868e+00, 4.5148429e-01, 4.1317535e-01, 7.4263078e-01, 3.0017653e-01, 8.0879701e-01, 1.0000000e-01, 4.5078948e-01, 3.2116783e+00, 3.0049285e+00, 3.4072983e+00, 2.5182898e+00, 3.1051604e+00, 3.0020136e+00, 3.2049016e+00, 1.8469618e+00, 3.1036832e+00, 2.4099081e+00, 2.1180493e+00, 2.7068820e+00, 2.5224740e+00, 3.2021231e+00, 2.1097449e+00, 2.9077617e+00, 3.0041462e+00, 2.6022422e+00, 3.0134290e+00, 2.4087504e+00, 3.3085101e+00, 2.5050799e+00, 3.4038679e+00, 3.2010814e+00, 2.8036959e+00, 2.9060895e+00, 3.3058271e+00, 3.5063866e+00, 3.0043212e+00, 2.0122773e+00, 2.3159426e+00, 2.2186306e+00, 2.4051454e+00, 3.6029749e+00, 3.0041461e+00, 3.0062373e+00, 3.2059465e+00, 2.9096170e+00, 2.6032656e+00, 2.5097004e+00, 2.9028411e+00, 3.1023606e+00, 2.5057847e+00, 1.8685354e+00, 2.7039990e+00, 2.7016498e+00, 2.7029428e+00, 2.8028074e+00, 1.5747520e+00, 2.6039937e+00, 4.5157550e+00, 3.6083209e+00, 4.4088451e+00, 4.1031691e+00, 4.3089952e+00, 5.1095334e+00, 3.0117336e+00, 4.8052574e+00, 4.3035619e+00, 4.6175091e+00, 3.6116958e+00, 3.8067089e+00, 4.0107159e+00, 3.5138361e+00, 3.6350483e+00, 3.8210210e+00, 4.0037985e+00, 5.2113565e+00, 5.4105254e+00, 3.5063553e+00, 4.2147222e+00, 3.4147657e+00, 5.2097995e+00, 3.4081036e+00, 4.2080425e+00, 4.5057296e+00, 3.3089414e+00, 3.4074852e+00, 4.1084282e+00, 4.3058539e+00, 4.6088153e+00, 4.9193995e+00, 4.1112251e+00, 3.6020843e+00, 4.1009356e+00, 4.6223848e+00, 4.1190046e+00, 4.0036188e+00, 3.3085886e+00, 3.9129256e+00, 4.1197933e+00, 3.6305006e+00, 3.6083209e+00, 4.4113183e+00, 4.2225427e+00, 3.7249938e+00, 3.5105217e+00, 3.7103007e+00, 3.9184088e+00, 3.6056580e+00, 4.0125062e-01, 5.7609230e-01, 1.0095367e+00, 1.0776296e+00, 6.3322667e-01, 3.0490481e-01, 9.0140221e-01, 4.1212852e-01, 6.0000317e-01, 3.4085233e-01, 6.0035305e-01, 3.3818226e-01, 3.0000000e-01, 4.0122873e-01, 2.2538848e-01, 4.0004442e-01, 4.0122873e-01, 2.0061436e-01, 3.0000000e-01, 6.0017982e-01, 7.0462844e-01, 8.5406616e-01, 3.0026460e-01, 4.0243965e-01, 7.0088477e-01, 3.0026460e-01, 4.5783248e-01, 3.0008832e-01, 3.0490481e-01, 1.1002025e+00, 4.1315633e-01, 4.0125062e-01, 4.2362917e-01, 4.0125062e-01, 4.1209001e-01, 2.4170870e-01, 5.0436965e-01, 2.2573593e-01, 3.1712557e+00, 2.9203034e+00, 3.3425817e+00, 2.4092081e+00, 3.0228582e+00, 2.9024211e+00, 3.1131137e+00, 1.7168003e+00, 3.0276611e+00, 2.3094323e+00, 1.9540727e+00, 2.6109956e+00, 2.4153242e+00, 3.1056218e+00, 2.0123796e+00, 2.8520945e+00, 2.9050328e+00, 2.5029614e+00, 2.9148948e+00, 2.3042831e+00, 3.2109395e+00, 2.4161682e+00, 3.3086859e+00, 3.1042389e+00, 2.7244207e+00, 2.8394157e+00, 3.2369857e+00, 3.4247142e+00, 2.9077271e+00, 1.9085444e+00, 2.2064916e+00, 2.1068047e+00, 2.3066817e+00, 3.5042241e+00, 2.9048033e+00, 2.9102290e+00, 3.1338090e+00, 2.8169587e+00, 2.5042601e+00, 2.4061715e+00, 2.8017212e+00, 3.0065627e+00, 2.4058322e+00, 1.7261843e+00, 2.6037439e+00, 2.6027120e+00, 2.6040234e+00, 2.7127458e+00, 1.4350761e+00, 2.5049231e+00, 4.4189015e+00, 3.5095669e+00, 4.3257995e+00, 4.0057109e+00, 4.2135057e+00, 5.0324952e+00, 2.9113810e+00, 4.7221382e+00, 4.2099962e+00, 4.5353918e+00, 3.5215862e+00, 3.7118930e+00, 3.9240025e+00, 3.4150232e+00, 3.5401623e+00, 3.7282910e+00, 3.9092259e+00, 5.1365012e+00, 5.3314853e+00, 3.4049933e+00, 4.1286955e+00, 3.3168890e+00, 5.1347989e+00, 3.3143385e+00, 4.1161770e+00, 4.4243750e+00, 3.2143454e+00, 3.3110189e+00, 4.0125032e+00, 4.2289520e+00, 4.5343227e+00, 4.8661173e+00, 4.0156353e+00, 3.5063553e+00, 4.0017163e+00, 4.5675364e+00, 4.0235140e+00, 3.9076272e+00, 3.2116700e+00, 3.8321139e+00, 4.0301570e+00, 3.5598557e+00, 3.5095669e+00, 4.3201293e+00, 4.1322798e+00, 3.6413292e+00, 3.4157005e+00, 3.6188994e+00, 3.8226858e+00, 3.5071409e+00, 5.0436235e-01, 1.1269511e+00, 1.4180734e+00, 9.1446938e-01, 5.0476836e-01, 9.6593231e-01, 8.0051115e-01, 6.1119558e-01, 7.0176271e-01, 6.0964891e-01, 4.3213914e-01, 5.2133179e-01, 2.2573593e-01, 4.1420960e-01, 5.2133802e-01, 4.5078948e-01, 2.2608083e-01, 2.0121983e-01, 6.1119558e-01, 1.1005364e+00, 1.2089192e+00, 1.2085435e-01, 2.4195741e-01, 7.1621884e-01, 1.2085435e-01, 4.0004442e-01, 4.1212852e-01, 5.0085236e-01, 7.0096858e-01, 4.0127250e-01, 5.6394820e-01, 8.0967961e-01, 2.0000000e-01, 8.0051115e-01, 2.2573593e-01, 7.1621884e-01, 3.0482299e-01, 3.3545239e+00, 3.1166331e+00, 3.5333785e+00, 2.6054739e+00, 3.2183845e+00, 3.1025789e+00, 3.3116521e+00, 1.9046783e+00, 3.2211369e+00, 2.5096353e+00, 2.1074907e+00, 2.8107054e+00, 2.6064541e+00, 3.3051050e+00, 2.2121875e+00, 3.0393610e+00, 3.1054994e+00, 2.7022579e+00, 3.1107490e+00, 2.5027328e+00, 3.4112739e+00, 2.6129479e+00, 3.5073688e+00, 3.3035252e+00, 2.9185900e+00, 3.0300451e+00, 3.4286400e+00, 3.6205854e+00, 3.1074470e+00, 2.1053074e+00, 2.4030297e+00, 2.3022754e+00, 2.5057763e+00, 3.7043108e+00, 3.1053329e+00, 3.1100313e+00, 3.3265652e+00, 3.0118276e+00, 2.7046025e+00, 2.6052853e+00, 3.0016501e+00, 3.2059133e+00, 2.6047974e+00, 1.9052628e+00, 2.8038694e+00, 2.8028007e+00, 2.8041967e+00, 2.9102290e+00, 1.6179159e+00, 2.7049931e+00, 4.6192199e+00, 3.7100254e+00, 4.5225779e+00, 4.2056438e+00, 4.4133506e+00, 5.2278849e+00, 3.1114444e+00, 4.9186970e+00, 4.4088300e+00, 4.7323336e+00, 3.7201124e+00, 3.9113387e+00, 4.1217116e+00, 3.6152935e+00, 3.7397620e+00, 3.9276515e+00, 4.1085246e+00, 5.3314853e+00, 5.5274937e+00, 3.6037456e+00, 4.3264210e+00, 3.5173586e+00, 5.3296471e+00, 3.5134601e+00, 4.3151165e+00, 4.6204664e+00, 3.4137985e+00, 3.5110031e+00, 4.2123903e+00, 4.4237218e+00, 4.7288133e+00, 5.0555470e+00, 4.2155430e+00, 3.7056457e+00, 4.2016096e+00, 4.7574592e+00, 4.2235569e+00, 4.1072664e+00, 3.4118179e+00, 4.0283196e+00, 4.2288238e+00, 3.7532858e+00, 3.7100254e+00, 4.5190617e+00, 4.3311362e+00, 3.8383398e+00, 3.6148683e+00, 3.8177286e+00, 4.0227665e+00, 3.7075359e+00, 1.5237054e+00, 1.5778323e+00, 1.1528553e+00, 8.0928056e-01, 1.4109657e+00, 9.0296858e-01, 1.1060939e+00, 8.5617086e-01, 6.0184934e-01, 8.2671175e-01, 8.1112984e-01, 7.1621748e-01, 7.2113820e-01, 9.0642722e-01, 9.0166476e-01, 5.2167829e-01]\n```\n\n----------------------------------------\n\nTITLE: Defining Incomplete Beta Integral in LaTeX\nDESCRIPTION: This LaTeX snippet defines the incomplete beta integral used in the cumulative distribution function of the binomial distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_binom.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nI_{x}\\left(a,b\\right)=\\frac{\\Gamma\\left(a+b\\right)}{\\Gamma\\left(a\\right)\\Gamma\\left(b\\right)}\\int_{0}^{x}t^{a-1}\\left(1-t\\right)^{b-1}dt.\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule Documentation for scipy.optimize.elementwise\nDESCRIPTION: Sphinx directive configuration that specifies documentation settings for the scipy.optimize.elementwise module. Excludes documentation of members, inherited members, and special members through directive options.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.elementwise.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.optimize.elementwise\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Generalized Gamma Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and percent point function (G) for the Generalized Gamma Distribution. It includes conditional statements for different values of the shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gengamma.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;a,c\\right) & = & \\frac{\\left|c\\right|x^{ca-1}}{\\Gamma\\left(a\\right)}\\exp\\left(-x^{c}\\right)\\\\\nF\\left(x;a,c\\right) & = &\n  \\left\\{\n    \\begin{array}{cc}\n      \\frac{\\gamma\\left(a,x^{c}\\right)}{\\Gamma\\left(a\\right)} & c>0\\\\\n      1-\\frac{\\gamma\\left(a,x^{c}\\right)}{\\Gamma\\left(a\\right)} & c<0\n    \\end{array}\n  \\right. \\\\\nG\\left(q;a,c\\right) & = &\n  \\left\\{\n    \\begin{array}{cc}\n      \\gamma^{-1} \\left(a, \\Gamma\\left(a\\right) q \\right)^{1/c} &  c>0 \\\\\n      \\gamma^{-1} \\left(a, \\Gamma\\left(a\\right) \\left(1-q\\right) \\right)^{1/c} & c<0\n    \\end{array}\n  \\right. \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Running All SciPy Tests\nDESCRIPTION: Command to run all tests in the SciPy project by navigating to the root directory and executing the dev.py test command.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results with Another Branch\nDESCRIPTION: Command to compare benchmark results between the current branch and the main branch for a specific SciPy submodule.\nSOURCE: https://github.com/scipy/scipy/blob/main/benchmarks/README.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py bench --compare main --submodule sparse.Arithmetic\n```\n\n----------------------------------------\n\nTITLE: Documenting linprog function with HiGHS dual simplex method in SciPy\nDESCRIPTION: This snippet defines the documentation structure for the 'highs-ds' method of the linprog function in SciPy's optimize module. It specifies the implementation and method name for the function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.linprog-highs-ds.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.linprog\n   :impl: scipy.optimize._linprog._linprog_highs_ds_doc\n   :method: highs-ds\n```\n\n----------------------------------------\n\nTITLE: Running Specific Benchmark Module with dev.py\nDESCRIPTION: This command runs benchmarks from a specific module (optimize_linprog.py) using the dev.py script.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npython dev.py bench -t optimize_linprog\n```\n\n----------------------------------------\n\nTITLE: SciPy Module Function References\nDESCRIPTION: List of deprecated and removed functions across various SciPy modules including signal, stats, special, linalg, and interpolate.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nscipy.signal.convolve\nscipy.signal.choose_conv_method\nscipy.signal.lfilter\nscipy.signal.sosfilt\nscipy.stats.linregress\nscipy.stats.trapz\nscipy.special.lpn\nscipy.special.lpmn\nscipy.special.clpmn\nscipy.special.sph_harm\n```\n\n----------------------------------------\n\nTITLE: Integrating ARPACK in CMake project\nDESCRIPTION: This CMake snippet shows how to integrate ARPACK into a CMake-based project. It finds the ARPACK package and links it to an executable target.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nFIND_PACKAGE(arpackng)\nADD_EXECUTABLE(main main.f)\nTARGET_INCLUDE_DIRECTORIES(main PUBLIC ARPACK::ARPACK)\nTARGET_LINK_LIBRARIES(main ARPACK::ARPACK)\n```\n\n----------------------------------------\n\nTITLE: Running a Test Method from a Test Class\nDESCRIPTION: Command syntax for running a specific test method within a test class.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.<module>.tests.<test_file>::<TestClass>::<test_name>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Functions of Generalized Logistic Distribution\nDESCRIPTION: Mathematical definitions of the probability density function (f), cumulative distribution function (F), and quantile function (G) for the Generalized Logistic Distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genlogistic.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\frac{c\\exp\\left(-x\\right)}{\\left[1+\\exp\\left(-x\\right)\\right]^{c+1}}\\\\ F\\left(x;c\\right) & = & \\frac{1}{\\left[1+\\exp\\left(-x\\right)\\right]^{c}}\\\\ G\\left(q;c\\right) & = & -\\log\\left(q^{-1/c}-1\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Solving Triangular Packed Matrix-Vector System in C\nDESCRIPTION: This C function is crafted to solve a system comprised of a triangular packed matrix and a vector using prescribed BLAS operations. It depends on specific parameters highlighting matrix properties for successful and precise computation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid ztbsv(char *uplo, char *trans, char *diag, int *n, int *k, z *a, int *lda, z *x, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Moment of Double Pareto Lognormal Distribution in LaTeX\nDESCRIPTION: This snippet defines the raw moment calculation for the double Pareto lognormal distribution using LaTeX mathematical notation. It is valid for k > α and includes parameters k, α, β, μ, and σ.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dpareto_lognorm.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    \\mu_k' = \\frac{\\alpha \\beta}{(\\alpha - k)(\\beta + k)} \n             \\exp \\left(k \\mu + \\frac{k^2 \\sigma^2}{2} \\right)\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy's root function with linearmixing method in reStructuredText\nDESCRIPTION: Sphinx documentation directive that references the linearmixing method for scipy.optimize.root function. This uses the implementation from scipy.optimize._root._root_linearmixing_doc.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-linearmixing.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._root._root_linearmixing_doc\n   :method: linearmixing\n```\n\n----------------------------------------\n\nTITLE: Initializing SciPy Optimize Root with Broyden's First Method\nDESCRIPTION: Configures the root-finding method using Broyden's first method in SciPy's optimize module for solving nonlinear systems of equations. This method is a quasi-Newton method for finding roots of a vector function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-broyden1.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.optimize.root(method='broyden1')\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Cumulative Distribution Functions for HalfNormal Distribution\nDESCRIPTION: This snippet defines the probability density function (f(x)), cumulative distribution function (F(x)), and inverse cumulative distribution function (G(q)) for the HalfNormal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfnorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\sqrt{\\frac{2}{\\pi}}e^{-x^{2}/2}\\\\ F\\left(x\\right) & = & 2\\Phi\\left(x\\right)-1\\\\ G\\left(q\\right) & = & \\Phi^{-1}\\left(\\frac{1+q}{2}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Referencing R-distribution Implementation in Python\nDESCRIPTION: This code snippet shows how to access the R-distribution implementation in SciPy's stats module. It provides the exact import path for using this distribution in Python code.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rdist.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.rdist\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Number Array (Data)\nDESCRIPTION: A single-line array of 625 floating-point numbers with 8 decimal places of precision. The values range from approximately 0.14 to 4.15. This data could represent results from scientific computations, experimental measurements, or normalized data for analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-euclidean-ml-iris.txt#2025-04-14_snippet_2\n\nLANGUAGE: Data\nCODE:\n```\n2.7604347e+00 2.4372115e+00 1.8411953e+00 3.0033315e+00 2.9291637e+00 2.3958297e+00 1.8520259e+00 2.1656408e+00 2.4879711e+00 1.8439089e+00 1.4142136e-01 4.4721360e-01 1.5099669e+00 1.0099505e+00 1.4106736e+00 1.7029386e+00 1.0246951e+00 7.0710678e-01 3.0000000e-01 6.4031242e-01 1.2041595e+00 4.2426407e-01 7.2111026e-01 5.4772256e-01 7.5498344e-01 7.0000000e-01 1.0148892e+00 9.0000000e-01 5.7445626e-01 2.8722813e+00 1.5842980e+00 2.8861739e+00 2.1494185e+00 2.5632011e+00 3.6891733e+00 1.1045361e+00 3.1984371e+00 2.4372115e+00 3.4029399e+00 2.0346990e+00 1.9467922e+00 2.4372115e+00 1.5165751e+00 1.9052559e+00 2.2671568e+00 2.1771541e+00 4.0521599e+00 3.9912404e+00 1.3747727e+00 2.7658633e+00 1.4798649e+00 3.7709415e+00 1.5588457e+00 2.6191602e+00 2.9765752e+00 1.4628739e+00 1.5556349e+00 2.2825424e+00 2.7386128e+00 3.1144823e+00 3.9102430e+00 2.3280893e+00 1.6278821e+00 1.9313208e+00 3.4539832e+00 2.5632011e+00 2.1633308e+00 1.4491377e+00 2.4515301e+00 2.6191602e+00 2.3622024e+00 1.5842980e+00 2.8600699e+00 2.7964263e+00 2.2803509e+00 1.6522712e+00 2.0322401e+00 2.3430749e+00 1.6431677e+00 5.0990195e-01 1.6309506e+00 1.1224972e+00 1.5000000e+00 1.7832555e+00 1.1090537e+00 7.8740079e-01 4.3588989e-01 7.5498344e-01 1.3000000e+00 5.0990195e-01 6.4807407e-01 6.6332496e-01 8.3066239e-01 7.9372539e-01 1.0908712e+00 8.1853528e-01 6.7082039e-01 2.9983329e+00 1.7175564e+00 2.9949958e+00 2.2671568e+00 2.6851443e+00 3.7934153e+00 1.2247449e+00 3.3000000e+00 2.5495098e+00 3.5128336e+00 2.1447611e+00 2.0663978e+00 2.5495098e+00 1.6552945e+00 2.0420578e+00 2.3874673e+00 2.2891046e+00 4.1521079e+00 4.1000000e+00 1.4933185e+00 2.8792360e+00 1.6155494e+00 3.8729833e+00 1.6763055e+00 2.7313001e+00 3.0757113e+00 1.5811388e+00 1.6733201e+00 2.4062419e+00 2.8319605e+00 3.2155870e+00 4.0012498e+00 2.4535688e+00 1.7349352e+00 2.0420578e+00 3.5566838e+00 2.6851443e+00 2.2759613e+00 1.5684387e+00 2.5592968e+00 2.7386128e+00 2.4698178e+00 1.7175564e+00 2.9765752e+00 2.9154759e+00 2.3958297e+00 1.7748239e+00 2.1470911e+00 2.4637370e+00 1.7663522e+00 1.2806248e+00 8.3666003e-01 1.0246951e+00 1.3038405e+00 8.1853528e-01 4.2426407e-01 3.8729833e-01 5.9160798e-01 8.4261498e-01 1.4142136e-01 1.0954451e+00 3.7416574e-01 4.3588989e-01 3.8729833e-01 6.0827625e-01 1.1618950e+00 2.6457513e-01 2.5903668e+00 1.3892444e+00 2.5670995e+00 1.8814888e+00 2.2781571e+00 3.3808283e+00 1.2083046e+00 2.9000000e+00 2.1954498e+00 3.0495901e+00 1.6792856e+00 1.6763055e+00 2.1118712e+00 1.3784049e+00 1.7000000e+00 1.9442222e+00 1.8708287e+00 3.6959437e+00 3.7188708e+00 1.2609520e+00 2.4310492e+00 1.3000000e+00 3.4785054e+00 1.2688578e+00 2.2847319e+00 2.6419690e+00 1.1575837e+00 1.2409674e+00 2.0174241e+00 2.4124676e+00 2.8106939e+00 3.5369478e+00 2.0639767e+00 1.3379088e+00 1.7406895e+00 3.1224990e+00 2.2516660e+00 1.8547237e+00 1.1401754e+00 2.1047565e+00 2.3021729e+00 2.0049938e+00 1.3892444e+00 2.5416530e+00 2.4698178e+00 1.9493589e+00 1.4106736e+00 1.7058722e+00 2.0273135e+00 1.3784049e+00 9.0553851e-01 9.2195445e-01 9.0553851e-01 9.1104336e-01 1.1575837e+00 1.2609520e+00 9.5393920e-01 6.2449980e-01 1.1916375e+00 2.1817424e+00 1.0295630e+00 1.0723805e+00 1.0148892e+00 9.0000000e-01 2.3473389e+00 1.0908712e+00 1.4387495e+00 3.6055513e-01 1.4798649e+00 6.4807407e-01 1.0908712e+00 2.2693611e+00 1.2727922e+00 1.7916473e+00 1.0295630e+00 2.0149442e+00 8.1240384e-01 5.3851648e-01 1.0677078e+00 5.4772256e-01 8.3066239e-01 9.6953597e-01 7.3484692e-01 2.6495283e+00 2.5748786e+00 5.1961524e-01 1.3820275e+00 6.0827625e-01 2.3706539e+00 4.1231056e-01 1.2083046e+00 1.5937377e+00 4.2426407e-01 4.2426407e-01 8.1853528e-01 1.4212670e+00 1.7492856e+00 2.5826343e+00 8.8317609e-01 3.3166248e-01 5.5677644e-01 2.1142375e+00 1.2124356e+00 7.2111026e-01 4.6904158e-01 1.1445523e+00 1.2409674e+00 1.2083046e+00 3.6055513e-01 1.4212670e+00 1.4212670e+00 1.0392305e+00 4.7958315e-01 7.1414284e-01 1.0535654e+00 3.7416574e-01 7.2801099e-01 1.3190906e+00 1.1618950e+00 4.8989795e-01 7.4161985e-01 5.1961524e-01 7.1414284e-01 8.1240384e-01 1.5297059e+00 5.0990195e-01 5.1961524e-01 4.7958315e-01 8.5440037e-01 1.6583124e+00 5.7445626e-01 2.0371549e+00 8.7749644e-01 2.2825424e+00 1.4560220e+00 1.8411953e+00 3.1000000e+00 7.3484692e-01 2.6362853e+00 1.9287302e+00 2.6758176e+00 1.3638182e+00 1.3747727e+00 1.8220867e+00 9.1651514e-01 1.1704700e+00 1.5231546e+00 1.5165751e+00 3.3555923e+00 3.4423829e+00 1.1180340e+00 2.0904545e+00 7.0000000e-01 3.2280025e+00 1.0723805e+00 1.8920888e+00 2.3706539e+00 9.2736185e-01 8.6023253e-01 1.6155494e+00 2.2226111e+00 2.6000000e+00 3.2787193e+00 1.6552945e+00 1.1000000e+00 1.3674794e+00 2.9137605e+00 1.7291616e+00 1.4491377e+00 7.3484692e-01 1.8520259e+00 1.9287302e+00 1.8055470e+00 8.7749644e-01 2.1447611e+00 2.0542639e+00 1.6792856e+00 1.2124356e+00 1.3964240e+00 1.5000000e+00 8.3666003e-01 7.9372539e-01 1.1832160e+00 7.5498344e-01 1.1832160e+00 1.0295630e+00 4.6904158e-01 1.0440307e+00 2.0024984e+00 9.1104336e-01 7.0710678e-01 7.2111026e-01 6.4807407e-01 2.0297783e+00 8.3666003e-01 1.7776389e+00 9.8994949e-01 1.8920888e+00 1.2609520e+00 1.5684387e+00 2.7166155e+00 1.4247807e+00 2.2847319e+00 1.7406895e+00 2.2022716e+00 9.0000000e-01 1.1747340e+00 1.4317821e+00 1.1445523e+00 1.1832160e+00 1.1532563e+00 1.2041595e+00 2.8722813e+00 3.1272992e+00 1.3038405e+00 1.6673332e+00 9.1651514e-01 2.8722813e+00 8.8317609e-01 1.4798649e+00 1.9416488e+00 7.2801099e-01 6.0827625e-01 1.4071247e+00 1.8138357e+00 2.2293497e+00 2.7459060e+00 1.4456832e+00 9.0553851e-01 1.3784049e+00 2.4698178e+00 1.3928388e+00 1.1357817e+00 5.3851648e-01 1.4000000e+00 1.5588457e+00 1.3228757e+00 9.8994949e-01 1.7691806e+00 1.6583124e+00 1.2767145e+00 1.1135529e+00 1.0295630e+00 1.1575837e+00 7.5498344e-01 9.6436508e-01 1.2727922e+00 1.5264338e+00 1.3674794e+00 6.2449980e-01 1.2806248e+00 2.3958297e+00 1.2884099e+00 1.1618950e+00 1.1532563e+00 7.0000000e-01 2.4433583e+00 1.2206556e+00 1.7000000e+00 1.1357817e+00 1.4035669e+00 1.0488088e+00 1.3228757e+00 2.1886069e+00 1.9183326e+00 1.7464249e+00 1.2884099e+00 1.8601075e+00 6.7823300e-01 8.7749644e-01 1.0099505e+00 1.3038405e+00 1.3674794e+00 1.0488088e+00 8.8317609e-01 2.4454039e+00 2.5942244e+00 1.1789826e+00 1.3000000e+00 1.2609520e+00 2.3108440e+00 6.7082039e-01 1.1832160e+00 1.4282857e+00 6.6332496e-01 7.0710678e-01 1.1618950e+00 1.2165525e+00 1.6431677e+00 2.2516660e+00 1.2165525e+00 6.4031242e-01 1.1958261e+00 1.9000000e+00 1.3674794e+00 9.0553851e-01 7.7459667e-01 9.4339811e-01 1.2727922e+00 9.1651514e-01 1.1357817e+00 1.4491377e+00 1.4282857e+00 9.4868330e-01 8.7749644e-01 7.4161985e-01 1.2124356e+00 9.4868330e-01 1.0344080e+00 9.1651514e-01 8.6023253e-01 7.6157731e-01 7.1414284e-01 1.7291616e+00 8.3066239e-01 9.4868330e-01 8.7177979e-01 6.1644140e-01 1.8654758e+00 8.3666003e-01 2.2360680e+00 1.1224972e+00 2.0049938e+00 1.4317821e+00 1.8165902e+00 2.7676705e+00 1.4730920e+00 2.2847319e+00 1.5524175e+00 2.6134269e+00 1.3527749e+00 1.1575837e+00 1.6093477e+00 1.1180340e+00 1.4832397e+00 1.6217275e+00 1.4106736e+00 3.2109189e+00 3.0495901e+00 7.0710678e-01 1.9646883e+00 1.2165525e+00 2.8266588e+00 8.1240384e-01 1.8681542e+00 2.1047565e+00 8.1853528e-01 1.0148892e+00 1.5297059e+00 1.8303005e+00 2.1702534e+00 3.0495901e+00 1.5842980e+00 8.8317609e-01 1.2569805e+00 2.5179357e+00 1.9646883e+00 1.4525839e+00 9.9498744e-01 1.6248077e+00 1.8574176e+00 1.5779734e+00 1.1224972e+00 2.0760539e+00 2.0712315e+00 1.5132746e+00 8.7177979e-01 1.2884099e+00 1.7944358e+00 1.1789826e+00 5.1961524e-01 5.1961524e-01 7.1414284e-01 4.6904158e-01 1.2569805e+00 3.1622777e-01 1.7320508e-01 1.7320508e-01 6.4031242e-01 1.3228757e+00 2.2360680e-01 2.3727621e+00 1.2206556e+00 2.4758837e+00 1.7320508e+00 2.1236761e+00 3.3000000e+00 1.0295630e+00 2.8266588e+00 2.1447611e+00 2.8913665e+00 1.5297059e+00 1.5905974e+00 2.0099751e+00 1.2489996e+00 1.5132746e+00 1.7663522e+00 1.7378147e+00 3.5524639e+00 3.6619667e+00 1.2845233e+00 2.3000000e+00 1.0816654e+00 3.4205263e+00 1.2124356e+00 2.1213203e+00 2.5416530e+00 1.0677078e+00 1.0677078e+00 1.8894444e+00 2.3537205e+00 2.7640550e+00 3.4219877e+00 1.9339080e+00 1.2529964e+00 1.6340135e+00 3.0675723e+00 2.0273135e+00 1.6911535e+00 9.4868330e-01 2.0074860e+00 2.1633308e+00 1.9235384e+00 1.2206556e+00 2.3916521e+00 2.3021729e+00 1.8493242e+00 1.3820275e+00 1.5842980e+00 1.7916473e+00 1.1575837e+00 4.2426407e-01 9.8994949e-01 3.3166248e-01 9.3273791e-01 3.0000000e-01 5.8309519e-01 4.8989795e-01 8.6023253e-01 1.0954451e+00 3.7416574e-01 2.5922963e+00 1.3038405e+00 2.6570661e+00 1.9000000e+00 2.3021729e+00 3.4727511e+00 8.7749644e-01 2.9899833e+00 2.2203603e+00 3.1543621e+00 1.7860571e+00 1.7029386e+00 2.1977261e+00 1.2369317e+00 1.6124515e+00 1.9974984e+00 1.9364917e+00 3.8249183e+00 3.7762415e+00 1.1747340e+00\n```\n\n----------------------------------------\n\nTITLE: Mathematical Definition of Left-skewed Lévy Distribution in LaTeX\nDESCRIPTION: Mathematical equations defining the probability density function (f(x)), cumulative distribution function (F(x)), and inverse distribution function (G(q)) for the left-skewed Lévy distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_levy_l.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{\\left|x\\right|\\sqrt{2\\pi\\left|x\\right|}}\\exp\\left(-\\frac{1}{2\\left|x\\right|}\\right)\\\\ F\\left(x\\right) & = & 2\\Phi\\left(\\frac{1}{\\sqrt{\\left|x\\right|}}\\right)-1\\\\ G\\left(q\\right) & = & -\\left[\\Phi^{-1}\\left(\\frac{q+1}{2}\\right)\\right]^{-2}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Activating SciPy Development Environment in Bash\nDESCRIPTION: This command activates the conda environment for SciPy development. It assumes the environment has been set up according to the 'building-from-source' instructions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/reviewing_prs.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda activate scipy-dev\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix Format\nDESCRIPTION: Matrix of scientific notation numbers organized in 6 columns. Values appear to be high-precision floating point numbers with varying exponents.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/spherical_harmonic_ipp/spherical_harmonic.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0.23e2\t0.11e2\t0.288183689117431640625e1\t-0.4051367282867431640625e1\t-0.27008054438566323442041866091056043346991294041611e-2\t0.17800897467223742426745667205709769443293791401656e-2\n```\n\n----------------------------------------\n\nTITLE: Displaying SciPy Version Compatibility with Python and NumPy in reStructuredText\nDESCRIPTION: A reStructuredText table showing the compatibility of different SciPy versions with various Python and NumPy versions. It includes information from SciPy 1.2 to 1.13, detailing the supported Python and NumPy version ranges for each SciPy release.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/toolchain.rst#2025-04-14_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=================  ========================    =======================\n SciPy version      Python versions             NumPy versions\n=================  ========================    =======================\n 1.13               >=3.9, <3.13                >=1.22.4, <2.3.0\n 1.12               >=3.9, <3.13                >=1.22.4, <2.0.0\n 1.11               >=3.9, <3.13                >=1.21.6, <1.27.0\n 1.10               >=3.8, <3.12                >=1.19.5, <1.26.0\n 1.9                >=3.8, <3.12                >=1.18.5, <1.26.0\n 1.8                >=3.8, <3.11                >=1.17.3, <1.24.0\n 1.7                >=3.7, <3.11                >=1.16.5, <1.23.0\n 1.6                >=3.7, <3.10                >=1.16.5, <1.21.0\n 1.5                >=3.6, <3.10                >=1.14.5, <1.20.0\n 1.4                >=3.5, <3.9                 >=1.13.3, <1.18.0\n 1.2                2.7, >=3.4, <3.8            >=1.8.2, <1.17.0\n=================  ========================    =======================\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for scipy.cluster\nDESCRIPTION: RST directive configuration that specifies auto-documentation settings for the scipy.cluster module. Excludes member documentation, inherited members, and special members to generate streamlined documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/cluster.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.cluster\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Probability and Distribution Functions in LaTeX\nDESCRIPTION: Core probability density function f(x;c), cumulative distribution function F(x;c), and inverse CDF G(q;c) for the Generalized Pareto Distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genpareto.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nf\\left(x;c\\right) & = & \\left(1+cx\\right)^{-1-\\frac{1}{c}}\\\\\nF\\left(x;c\\right) & = & 1-\\frac{1}{\\left(1+cx\\right)^{1/c}}\\\\\nG\\left(q;c\\right) & = & \\frac{1}{c}\\left[\\left(\\frac{1}{1-q}\\right)^{c}-1\\right]\n```\n\n----------------------------------------\n\nTITLE: Installing Git Pre-commit Hook for PEP8 Checking\nDESCRIPTION: Command to install a pre-commit hook that automatically runs PEP8 linting checks before each commit.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/pep8.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp tools/pre-commit-hook.py .git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy Build Dependencies on Debian/Ubuntu Linux\nDESCRIPTION: Command to install necessary build dependencies for SciPy on Debian/Ubuntu Linux systems using apt package manager.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y gcc g++ gfortran libopenblas-dev liblapack-dev pkg-config python3-pip python3-dev\n```\n\n----------------------------------------\n\nTITLE: Iris Dataset Measurements in Plain Text Format\nDESCRIPTION: This snippet contains the raw numerical data for the Iris dataset. Each line represents a single iris flower specimen with four measurements: sepal length, sepal width, petal length, and petal width, all in centimeters. The data is presented in scientific notation with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n5.099999999999999645e+00 3.500000000000000000e+00 1.399999999999999911e+00 2.000000000000000111e-01\n4.900000000000000355e+00 3.000000000000000000e+00 1.399999999999999911e+00 2.000000000000000111e-01\n4.700000000000000178e+00 3.200000000000000178e+00 1.300000000000000044e+00 2.000000000000000111e-01\n4.599999999999999645e+00 3.100000000000000089e+00 1.500000000000000000e+00 2.000000000000000111e-01\n5.000000000000000000e+00 3.600000000000000089e+00 1.399999999999999911e+00 2.000000000000000111e-01\n5.400000000000000355e+00 3.899999999999999911e+00 1.699999999999999956e+00 4.000000000000000222e-01\n4.599999999999999645e+00 3.399999999999999911e+00 1.399999999999999911e+00 2.999999999999999889e-01\n5.000000000000000000e+00 3.399999999999999911e+00 1.500000000000000000e+00 2.000000000000000111e-01\n4.400000000000000355e+00 2.899999999999999911e+00 1.399999999999999911e+00 2.000000000000000111e-01\n4.900000000000000355e+00 3.100000000000000089e+00 1.500000000000000000e+00 1.000000000000000056e-01\n5.400000000000000355e+00 3.700000000000000178e+00 1.500000000000000000e+00 2.000000000000000111e-01\n4.799999999999999822e+00 3.399999999999999911e+00 1.600000000000000089e+00 2.000000000000000111e-01\n4.799999999999999822e+00 3.000000000000000000e+00 1.399999999999999911e+00 1.000000000000000056e-01\n4.299999999999999822e+00 3.000000000000000000e+00 1.100000000000000089e+00 1.000000000000000056e-01\n5.799999999999999822e+00 4.000000000000000000e+00 1.199999999999999956e+00 2.000000000000000111e-01\n5.700000000000000178e+00 4.400000000000000355e+00 1.500000000000000000e+00 4.000000000000000222e-01\n5.400000000000000355e+00 3.899999999999999911e+00 1.300000000000000044e+00 4.000000000000000222e-01\n5.099999999999999645e+00 3.500000000000000000e+00 1.399999999999999911e+00 2.999999999999999889e-01\n5.700000000000000178e+00 3.799999999999999822e+00 1.699999999999999956e+00 2.999999999999999889e-01\n5.099999999999999645e+00 3.799999999999999822e+00 1.500000000000000000e+00 2.999999999999999889e-01\n5.400000000000000355e+00 3.399999999999999911e+00 1.699999999999999956e+00 2.000000000000000111e-01\n5.099999999999999645e+00 3.700000000000000178e+00 1.500000000000000000e+00 4.000000000000000222e-01\n4.599999999999999645e+00 3.600000000000000089e+00 1.000000000000000000e+00 2.000000000000000111e-01\n5.099999999999999645e+00 3.299999999999999822e+00 1.699999999999999956e+00 5.000000000000000000e-01\n4.799999999999999822e+00 3.399999999999999911e+00 1.899999999999999911e+00 2.000000000000000111e-01\n5.000000000000000000e+00 3.000000000000000000e+00 1.600000000000000089e+00 2.000000000000000111e-01\n5.000000000000000000e+00 3.399999999999999911e+00 1.600000000000000089e+00 4.000000000000000222e-01\n5.200000000000000178e+00 3.500000000000000000e+00 1.500000000000000000e+00 2.000000000000000111e-01\n5.200000000000000178e+00 3.399999999999999911e+00 1.399999999999999911e+00 2.000000000000000111e-01\n4.700000000000000178e+00 3.200000000000000178e+00 1.600000000000000089e+00 2.000000000000000111e-01\n4.799999999999999822e+00 3.100000000000000089e+00 1.600000000000000089e+00 2.000000000000000111e-01\n5.400000000000000355e+00 3.399999999999999911e+00 1.500000000000000000e+00 4.000000000000000222e-01\n5.200000000000000178e+00 4.099999999999999645e+00 1.500000000000000000e+00 1.000000000000000056e-01\n5.500000000000000000e+00 4.200000000000000178e+00 1.399999999999999911e+00 2.000000000000000111e-01\n4.900000000000000355e+00 3.100000000000000089e+00 1.500000000000000000e+00 1.000000000000000056e-01\n5.000000000000000000e+00 3.200000000000000178e+00 1.199999999999999956e+00 2.000000000000000111e-01\n5.500000000000000000e+00 3.500000000000000000e+00 1.300000000000000044e+00 2.000000000000000111e-01\n4.900000000000000355e+00 3.100000000000000089e+00 1.500000000000000000e+00 1.000000000000000056e-01\n4.400000000000000355e+00 3.000000000000000000e+00 1.300000000000000044e+00 2.000000000000000111e-01\n5.099999999999999645e+00 3.399999999999999911e+00 1.500000000000000000e+00 2.000000000000000111e-01\n5.000000000000000000e+00 3.500000000000000000e+00 1.300000000000000044e+00 2.999999999999999889e-01\n4.500000000000000000e+00 2.299999999999999822e+00 1.300000000000000044e+00 2.999999999999999889e-01\n4.400000000000000355e+00 3.200000000000000178e+00 1.300000000000000044e+00 2.000000000000000111e-01\n5.000000000000000000e+00 3.500000000000000000e+00 1.600000000000000089e+00 5.999999999999999778e-01\n5.099999999999999645e+00 3.799999999999999822e+00 1.899999999999999911e+00 4.000000000000000222e-01\n4.799999999999999822e+00 3.000000000000000000e+00 1.399999999999999911e+00 2.999999999999999889e-01\n5.099999999999999645e+00 3.799999999999999822e+00 1.600000000000000089e+00 2.000000000000000111e-01\n4.599999999999999645e+00 3.200000000000000178e+00 1.399999999999999911e+00 2.000000000000000111e-01\n5.299999999999999822e+00 3.700000000000000178e+00 1.500000000000000000e+00 2.000000000000000111e-01\n5.000000000000000000e+00 3.299999999999999822e+00 1.399999999999999911e+00 2.000000000000000111e-01\n7.000000000000000000e+00 3.200000000000000178e+00 4.700000000000000178e+00 1.399999999999999911e+00\n6.400000000000000355e+00 3.200000000000000178e+00 4.500000000000000000e+00 1.500000000000000000e+00\n6.900000000000000355e+00 3.100000000000000089e+00 4.900000000000000355e+00 1.500000000000000000e+00\n5.500000000000000000e+00 2.299999999999999822e+00 4.000000000000000000e+00 1.300000000000000044e+00\n6.500000000000000000e+00 2.799999999999999822e+00 4.599999999999999645e+00 1.500000000000000000e+00\n5.700000000000000178e+00 2.799999999999999822e+00 4.500000000000000000e+00 1.300000000000000044e+00\n6.299999999999999822e+00 3.299999999999999822e+00 4.700000000000000178e+00 1.600000000000000089e+00\n4.900000000000000355e+00 2.399999999999999911e+00 3.299999999999999822e+00 1.000000000000000000e+00\n6.599999999999999645e+00 2.899999999999999911e+00 4.599999999999999645e+00 1.300000000000000044e+00\n5.200000000000000178e+00 2.700000000000000178e+00 3.899999999999999911e+00 1.399999999999999911e+00\n5.000000000000000000e+00 2.000000000000000000e+00 3.500000000000000000e+00 1.000000000000000000e+00\n5.900000000000000355e+00 3.000000000000000000e+00 4.200000000000000178e+00 1.500000000000000000e+00\n6.000000000000000000e+00 2.200000000000000178e+00 4.000000000000000000e+00 1.000000000000000000e+00\n6.099999999999999645e+00 2.899999999999999911e+00 4.700000000000000178e+00 1.399999999999999911e+00\n5.599999999999999645e+00 2.899999999999999911e+00 3.600000000000000089e+00 1.300000000000000044e+00\n6.700000000000000178e+00 3.100000000000000089e+00 4.400000000000000355e+00 1.399999999999999911e+00\n5.599999999999999645e+00 3.000000000000000000e+00 4.500000000000000000e+00 1.500000000000000000e+00\n5.799999999999999822e+00 2.700000000000000178e+00 4.099999999999999645e+00 1.000000000000000000e+00\n6.200000000000000178e+00 2.200000000000000178e+00 4.500000000000000000e+00 1.500000000000000000e+00\n5.599999999999999645e+00 2.500000000000000000e+00 3.899999999999999911e+00 1.100000000000000089e+00\n5.900000000000000355e+00 3.200000000000000178e+00 4.799999999999999822e+00 1.800000000000000044e+00\n6.099999999999999645e+00 2.799999999999999822e+00 4.000000000000000000e+00 1.300000000000000044e+00\n6.299999999999999822e+00 2.500000000000000000e+00 4.900000000000000355e+00 1.500000000000000000e+00\n6.099999999999999645e+00 2.799999999999999822e+00 4.700000000000000178e+00 1.199999999999999956e+00\n6.400000000000000355e+00 2.899999999999999911e+00 4.299999999999999822e+00 1.300000000000000044e+00\n6.599999999999999645e+00 3.000000000000000000e+00 4.400000000000000355e+00 1.399999999999999911e+00\n6.799999999999999822e+00 2.799999999999999822e+00 4.799999999999999822e+00 1.399999999999999911e+00\n6.700000000000000178e+00 3.000000000000000000e+00 5.000000000000000000e+00 1.699999999999999956e+00\n6.000000000000000000e+00 2.899999999999999911e+00 4.500000000000000000e+00 1.500000000000000000e+00\n5.700000000000000178e+00 2.600000000000000089e+00 3.500000000000000000e+00 1.000000000000000000e+00\n5.500000000000000000e+00 2.399999999999999911e+00 3.799999999999999822e+00 1.100000000000000089e+00\n5.500000000000000000e+00 2.399999999999999911e+00 3.700000000000000178e+00 1.000000000000000000e+00\n5.799999999999999822e+00 2.700000000000000178e+00 3.899999999999999911e+00 1.199999999999999956e+00\n6.000000000000000000e+00 2.700000000000000178e+00 5.099999999999999645e+00 1.600000000000000089e+00\n5.400000000000000355e+00 3.000000000000000000e+00 4.500000000000000000e+00 1.500000000000000000e+00\n6.000000000000000000e+00 3.399999999999999911e+00 4.500000000000000000e+00 1.600000000000000089e+00\n6.700000000000000178e+00 3.100000000000000089e+00 4.700000000000000178e+00 1.500000000000000000e+00\n6.299999999999999822e+00 2.299999999999999822e+00 4.400000000000000355e+00 1.300000000000000044e+00\n5.599999999999999645e+00 3.000000000000000000e+00 4.099999999999999645e+00 1.300000000000000044e+00\n5.500000000000000000e+00 2.500000000000000000e+00 4.000000000000000000e+00 1.300000000000000044e+00\n5.500000000000000000e+00 2.600000000000000089e+00 4.400000000000000355e+00 1.199999999999999956e+00\n6.099999999999999645e+00 3.000000000000000000e+00 4.599999999999999645e+00 1.399999999999999911e+00\n5.799999999999999822e+00 2.600000000000000089e+00 4.000000000000000000e+00 1.199999999999999956e+00\n5.000000000000000000e+00 2.299999999999999822e+00 3.299999999999999822e+00 1.000000000000000000e+00\n5.599999999999999645e+00 2.700000000000000178e+00 4.200000000000000178e+00 1.300000000000000044e+00\n5.700000000000000178e+00 3.000000000000000000e+00 4.200000000000000178e+00 1.199999999999999956e+00\n5.700000000000000178e+00 2.899999999999999911e+00 4.200000000000000178e+00 1.300000000000000044e+00\n6.200000000000000178e+00 2.899999999999999911e+00 4.299999999999999822e+00 1.300000000000000044e+00\n5.099999999999999645e+00 2.500000000000000000e+00 3.000000000000000000e+00 1.100000000000000089e+00\n5.700000000000000178e+00 2.799999999999999822e+00 4.099999999999999645e+00 1.300000000000000044e+00\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Module\nDESCRIPTION: Command syntax for running a particular test module using the --test or -t option with the full module path.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.<module>.tests.<test_file>\n```\n\n----------------------------------------\n\nTITLE: Documenting Anderson's Method for Root Finding in SciPy\nDESCRIPTION: This snippet defines the documentation structure for Anderson's method in SciPy's root function. It uses reStructuredText directives to specify the function, implementation, and method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-anderson.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _optimize.root-anderson:\n\nroot(method='anderson')\n--------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._root._root_anderson_doc\n   :method: anderson\n```\n\n----------------------------------------\n\nTITLE: Defining from_chars_result Structure in C++\nDESCRIPTION: Definition of the from_chars_result structure which is returned by the from_chars functions. It contains a pointer to the character after the parsed number and an error code indicating parsing success or failure.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/fast_matrix_market/dependencies/fast_float/README.md#2025-04-14_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct from_chars_result {\n    const char* ptr;\n    std::errc ec;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Specific Benchmark with asv\nDESCRIPTION: This command runs a specific benchmark (KleeMinty from optimize_linprog.py) using asv directly.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nasv run --bench optimize_linprog.KleeMinty\n```\n\n----------------------------------------\n\nTITLE: Accessing SciPy Roadmap Reference\nDESCRIPTION: ReStructuredText directive to reference the detailed SciPy roadmap section.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/roadmap-detailed.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _scipy-roadmap-detailed:\n```\n\n----------------------------------------\n\nTITLE: LAPACK Matrix Operations Function Declarations in C\nDESCRIPTION: Function declarations for LAPACK routines that perform matrix operations like decomposition, eigenvalue calculation, linear system solving, etc. These are low-level C interfaces used by SciPy's linear algebra functionality.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nvoid sgebd2(int *m, int *n, s *a, int *lda, s *d, s *e, s *tauq, s *taup, s *work, int *info);\nvoid sgebrd(int *m, int *n, s *a, int *lda, s *d, s *e, s *tauq, s *taup, s *work, int *lwork, int *info);\nvoid sgecon(char *norm, int *n, s *a, int *lda, s *anorm, s *rcond, s *work, int *iwork, int *info);\n/* Additional function declarations omitted for brevity */\nvoid slaed6(int *kniter, bint *orgati, s *rho, s *d, s *z, s *finit, s *tau, int *info);\n```\n\n----------------------------------------\n\nTITLE: Scipy Optimize Root Function using Levenberg-Marquardt\nDESCRIPTION: This snippet documents the usage of the `scipy.optimize.root` function with the `method` parameter set to 'lm', indicating the Levenberg-Marquardt algorithm. It clarifies that `scipy.optimize._root._root_leastsq` is the underlying function implementing the method.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root-lm.rst#2025-04-14_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.root\n   :impl: scipy.optimize._root._root_leastsq\n   :method: lm\n```\n\n----------------------------------------\n\nTITLE: Skipping CI with Commit Message in Git\nDESCRIPTION: Demonstrates how to skip specific CI workflows by adding special text in the git commit message. This is useful for conserving CI resources when only certain checks are necessary.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/continuous_integration.rst#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDOC: improve QMCEngine examples.\n\n[docs only]\n```\n\n----------------------------------------\n\nTITLE: Log Normal Distribution Entropy\nDESCRIPTION: Mathematical expression for the entropy h[X] of the log normal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_lognorm.rst#2025-04-14_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\nh\\left[X\\right]=\\frac{1}{2}\\left[1+\\log\\left(2\\pi\\right)+2\\log\\left(\\sigma\\right)\\right]\n```\n\n----------------------------------------\n\nTITLE: Displaying Python Version Support Timeline in reStructuredText\nDESCRIPTION: A reStructuredText table showing the timeline of Python versions supported by SciPy from 2018 to 2024. It demonstrates the gradual dropping of support for older Python versions over time.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/toolchain.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n================  =======================================================================\n Date             Pythons supported\n================  =======================================================================\n 2024              Py3.10+\n 2023              Py3.9+\n 2022              Py3.8+\n 2021              Py3.7+\n 2020              Py3.6+\n 2019              Py3.5+\n 2018              Py2.7, Py3.4+\n================  =======================================================================\n```\n\n----------------------------------------\n\nTITLE: Implementing Fatigue Life Distribution in SciPy\nDESCRIPTION: Implementation reference for the Fatigue Life (Birnbaum-Saunders) distribution in SciPy's statistical functions module. This distribution has one shape parameter c>0 and support for x≥0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_fatiguelife.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.fatiguelife\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for scipy.differentiate\nDESCRIPTION: Sphinx directive to generate module documentation for scipy.differentiate while excluding member documentation, inherited members, and special members.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/differentiate.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: scipy.differentiate\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring pybind11 and numpy Dependencies in TOML\nDESCRIPTION: Example TOML configuration showing dependency specifications with version bounds and explanatory comments for pybind11 and numpy requirements.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/redistributable_binaries.rst#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# The upper bound on pybind11 is preemptive only\n\"pybind11>=2.12.0,<2.13.0\",\n\n#   ...\n#   3. The <2.3 upper bound is for matching the numpy deprecation policy,\n#      it should not be loosened.\n\"numpy>=2.0.0rc1,<2.3\"\n```\n\n----------------------------------------\n\nTITLE: Documenting root_scalar Newton Method in SciPy\nDESCRIPTION: reStructuredText documentation for the Newton method implementation of SciPy's root_scalar function. It includes a reference label, function signature, and implementation details using Sphinx directives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-newton.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.root_scalar-newton:\n\nroot_scalar(method='newton')\n----------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root_scalar\n   :impl: scipy.optimize._root_scalar._root_scalar_newton_doc\n   :method: newton\n```\n\n----------------------------------------\n\nTITLE: Importing Lomax Distribution from SciPy\nDESCRIPTION: This code snippet shows how to import the Lomax distribution from SciPy's stats module. The Lomax distribution is a special case of the Pareto distribution with L=-1.0 and one shape parameter c>0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_lomax.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom scipy.stats import lomax\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Array\nDESCRIPTION: Collection of decimal values ranging from approximately 0.003 to 0.078, representing a potentially scientific or statistical dataset\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-jensenshannon-ml-iris.txt#2025-04-14_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\n0.029088245744 0.0394507490162 0.0585960215177...\n```\n\n----------------------------------------\n\nTITLE: Defining Poisson Distribution Moment Generating Function in LaTeX\nDESCRIPTION: Mathematical formula for the moment generating function of the Poisson distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_poisson.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\nM\\left(t\\right)=\\exp\\left[\\lambda\\left(e^{t}-1\\right)\\right].\n```\n\n----------------------------------------\n\nTITLE: Installing act via Homebrew\nDESCRIPTION: Installs the act tool using the Homebrew package manager on macOS.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install act\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix in Scientific Notation\nDESCRIPTION: Matrix of floating-point numbers in scientific notation format. Each row contains four values - three identical large numbers (10^15 to 10^30 range) followed by one very small number (10^-23 to 10^-46 range).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxx_ipp/ellint_rd_xxx.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1.1188403227852800000000000000000000000000e+15 1.1188403227852800000000000000000000000000e+15 1.1188403227852800000000000000000000000000e+15 2.6720700250191111905648529882401078381318e-23\n1.5218330776371200000000000000000000000000e+15 1.5218330776371200000000000000000000000000e+15 1.5218330776371200000000000000000000000000e+15 1.6844164374828786804594696654750101196940e-23\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Verifying New Files in Test Data\nDESCRIPTION: Verifies that all newly converted files are being used in test_data.py. It uses git diff to check for changes and grep to find lines containing \"Bin 0\". This confirms that the new test data is integrated correctly into the SciPy test suite.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/utils/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"git diff --stat HEAD | grep \\\"Bin 0\\\"\"\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"git diff HEAD -- scipy/special/tests/test_data.py\"\n```\n\n----------------------------------------\n\nTITLE: Boltzmann Distribution Core Equations in LaTeX\nDESCRIPTION: Defines the probability mass function p(k;N,λ), cumulative distribution function F(x;N,λ), and generating function G(q,λ) for the Boltzmann distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_boltzmann.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} p\\left(k;N,\\lambda\\right) & = & \\frac{1-e^{-\\lambda}}{1-e^{-\\lambda N}}\\exp\\left(-\\lambda k\\right)\\quad k\\in\\left\\{ 0,1,\\ldots,N-1\\right\\} \\\\ F\\left(x;N,\\lambda\\right) & = & \\left\\{ \\begin{array}{cc} 0 & x<0\\\\ \\frac{1-\\exp\\left[-\\lambda\\left(\\left\\lfloor x\\right\\rfloor +1\\right)\\right]}{1-\\exp\\left(-\\lambda N\\right)} & 0\\leq x\\leq N-1\\\\ 1 & x\\geq N-1\\end{array}\\right.\\\\ G\\left(q,\\lambda\\right) & = & \\left\\lceil -\\frac{1}{\\lambda}\\log\\left[1-q\\left(1-e^{-\\lambda N}\\right)\\right]-1\\right\\rceil \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Moments for Generalized Normal Distribution in LaTeX\nDESCRIPTION: This LaTeX block defines various moments for the Generalized Normal Distribution, including mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gennorm.rst#2025-04-14_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n    \\mu & = & 0 \\\\\n    m_{n} & = & 0 \\\\\n    m_{d} & = & 0 \\\\\n    \\mu_2 &  = & \\frac{\\Gamma\\left(3/\\beta\\right)}{\\gamma\\left(1/\\beta\\right)} \\\\\n    \\gamma_1 & = & 0 \\\\\n    \\gamma_2 & = & \\frac{\\Gamma\\left(5/\\beta\\right) \\Gamma\\left(1/\\beta\\right)}{\\Gamma\\left(3/\\beta\\right)^2} - 3 \\\\\n    \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: SciPy Development Requirements\nDESCRIPTION: This snippet lists the development dependencies for the SciPy project. These packages are used for tasks such as type checking (mypy, typing_extensions, types-psutil), code style enforcement (pycodestyle, ruff, cython-lint), command line interface enhancement (rich-click), task management (doit), and development tools (pydevtool).\nSOURCE: https://github.com/scipy/scipy/blob/main/requirements/dev.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"mypy==1.10.0\ntyping_extensions\ntypes-psutil\npycodestyle\nruff>=0.0.292\ncython-lint>=0.12.2\nrich-click\ndoit>=0.36.0\npydevtool\"\n```\n\n----------------------------------------\n\nTITLE: Large Floating-Point Array for SciPy Processing\nDESCRIPTION: A large array of floating-point numbers in scientific notation, likely representing scientific or numerical data. This data is formatted for use with SciPy or similar scientific computing libraries in Python. The array contains hundreds of values, which could represent measurements, calculations, or other numerical data for analysis or processing.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-euclidean-ml-iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n3.2465366e+00   3.2771939e+00   3.5860842e+00   2.0049938e+00   3.1937439e+00   5.4972721e+00   4.3104524e+00   5.5821143e+00   4.8795492e+00   5.2706736e+00   6.3953108e+00   3.5028560e+00   5.9143892e+00   5.2316345e+00   5.9757845e+00   4.6292548e+00   4.7053161e+00   5.1176166e+00   4.2485292e+00   4.5276926e+00   4.8692915e+00   4.8774994e+00   6.6174013e+00   6.7557383e+00   4.2071368e+00   5.4074023e+00   4.1158231e+00   6.4984614e+00   4.2965102e+00   5.2488094e+00   5.6258333e+00   4.1677332e+00   4.2083251e+00   5.0259327e+00   5.4009258e+00   5.8300943e+00   6.4265076e+00   5.0645829e+00   4.3588989e+00   4.6968074e+00   6.1155539e+00   5.1322510e+00   4.8383882e+00   4.0853396e+00   5.0892043e+00   5.2735187e+00   4.9386233e+00   4.3104524e+00   5.5235858e+00   5.4064776e+00   4.9142650e+00   4.4294469e+00   4.7010637e+00   4.8887626e+00   4.3023250e+00   7.8740079e-01   3.4641016e-01   1.7320508e-01   7.2801099e-01   1.3114877e+00   1.5556349e+00   1.0099505e+00   5.0000000e-01   1.1000000e+00   7.5498344e-01   6.2449980e-01   7.0000000e-01   7.7459667e-01   5.2915026e-01   5.1961524e-01   2.0000000e-01   4.4721360e-01   5.0990195e-01   4.4721360e-01   2.6457513e-01   1.7320508e-01   6.5574385e-01   1.0440307e+00   1.2609520e+00   0.0000000e+00   3.4641016e-01   7.5498344e-01   0.0000000e+00   5.5677644e-01   3.7416574e-01   5.0000000e-01   9.3808315e-01   5.5677644e-01   6.5574385e-01   8.8317609e-01   2.6457513e-01   7.4161985e-01   3.4641016e-01   7.2801099e-01   2.6457513e-01   4.0435133e+00   3.6359318e+00   4.1856899e+00   2.9478806e+00   3.7709415e+00   3.3421550e+00   3.8065733e+00   2.1307276e+00   3.7389838e+00   2.7748874e+00   2.4556058e+00   3.2031235e+00   3.0133038e+00   3.6619667e+00   2.5258662e+00   3.6523965e+00   3.3852622e+00   2.9223278e+00   3.6687873e+00   2.7586228e+00   3.8457769e+00   3.0364453e+00   3.9799497e+00   3.6027767e+00   3.4014703e+00   3.6055513e+00   4.0348482e+00   4.2497059e+00   3.4942810e+00   2.3874673e+00   2.6720778e+00   2.5495098e+00   2.8178006e+00   4.0718546e+00   3.3496268e+00   3.5425979e+00   3.9293765e+00   3.5284558e+00   2.9495762e+00   2.9000000e+00   3.1984371e+00   3.5707142e+00   2.9189039e+00   2.1679483e+00   3.0626786e+00   3.0248967e+00   3.0675723e+00   3.3181320e+00   1.9104973e+00   2.9883106e+00   5.2924474e+00   4.1436699e+00   5.3113087e+00   4.6583259e+00   5.0467812e+00   6.1081912e+00   3.4525353e+00   5.6329388e+00   4.9979996e+00   5.6973678e+00   4.3749286e+00   4.4821870e+00   4.8600412e+00   4.1060930e+00   4.3760713e+00   4.6411206e+00   4.6324939e+00   6.3071388e+00   6.4876806e+00   4.0286474e+00   5.1468437e+00   3.9686270e+00   6.2112801e+00   4.0706265e+00   4.9919936e+00   5.3329167e+00   3.9446166e+00   3.9874804e+00   4.8114447e+00   5.1029403e+00   5.5443665e+00   6.0917978e+00   4.8538644e+00   4.1194660e+00   4.4933284e+00   5.8180753e+00   4.9142650e+00   4.5978256e+00   3.8729833e+00   4.8176758e+00   5.0338852e+00   4.6690470e+00   4.1436699e+00   5.2744668e+00   5.1652686e+00   4.6669048e+00   4.2201896e+00   4.4575778e+00   4.6722586e+00   4.1060930e+00   6.7823300e-01   9.3273791e-01   1.3674794e+00   5.8309519e-01   7.8740079e-01   3.4641016e-01   3.8729833e-01   3.8729833e-01   3.3166248e-01   3.6055513e-01   3.6055513e-01   9.4868330e-01   6.1644140e-01   7.8102497e-01   8.1240384e-01   5.4772256e-01   2.8284271e-01   3.7416574e-01   8.6602540e-01   8.5440037e-01   3.6055513e-01   4.5825757e-01   5.1961524e-01   7.8740079e-01   7.0710678e-01   3.0000000e-01   7.8740079e-01   1.2369317e+00   4.2426407e-01   5.0000000e-01   1.6792856e+00   1.1357817e+00   6.0827625e-01   5.4772256e-01   9.3273791e-01   3.3166248e-01   9.4868330e-01   1.0000000e-01   5.7445626e-01   3.8065733e+00   3.4554305e+00   3.9824616e+00   3.0708305e+00   3.6496575e+00   3.3331667e+00   3.6290495e+00   2.4124676e+00   3.5916570e+00   2.8705400e+00   2.7730849e+00   3.1176915e+00   3.0822070e+00   3.5791060e+00   2.5099801e+00   3.4496377e+00   3.3496268e+00   2.9257478e+00   3.6851052e+00   2.8372522e+00   3.7349699e+00   2.9597297e+00   3.9370039e+00   3.5411862e+00   3.2695565e+00   3.4322005e+00   3.8858718e+00   4.0841156e+00   3.4190642e+00   2.4372115e+00   2.7928480e+00   2.6795522e+00   2.8142495e+00   4.0348482e+00   3.3436507e+00   3.3778692e+00   3.7389838e+00   3.5199432e+00   2.9154759e+00   2.9849623e+00   3.2603681e+00   3.4684290e+00   2.9359837e+00   2.4494897e+00   3.0886890e+00   2.9782545e+00   3.0380915e+00   3.2140317e+00   2.1424285e+00   2.9782545e+00   5.1487863e+00   4.1243181e+00   5.1332251e+00   4.5628938e+00   4.9183331e+00   5.9118525e+00   3.5972211e+00   5.4635154e+00   4.9173163e+00   5.4497706e+00   4.2023803e+00   4.3965896e+00   4.6968074e+00   4.1255303e+00   4.3324358e+00   4.4833024e+00   4.5011110e+00   6.0282667e+00   6.3300869e+00   4.0681691e+00   4.9547957e+00   3.9560081e+00   6.0315835e+00   3.9912404e+00   4.8062459e+00   5.1283526e+00   3.8600518e+00   3.8858718e+00   4.7148701e+00   4.9173163e+00   5.3721504e+00   5.7887823e+00   4.7560488e+00   4.0336088e+00   4.4665423e+00   5.5991071e+00   4.7486840e+00   4.4631827e+00   3.7815341e+00   4.6292548e+00   4.8682646e+00   4.4698993e+00   4.1243181e+00   5.0970580e+00   4.9779514e+00   4.5033321e+00   4.1701319e+00   4.3162484e+00   4.5110974e+00   4.0323690e+00   4.5825757e-01   8.1853528e-01   1.2328828e+00   1.3638182e+00   8.6023253e-01   3.8729833e-01   9.9498744e-01   5.1961524e-01   6.0827625e-01   4.7958315e-01   6.6332496e-01   4.4721360e-01   3.0000000e-01   4.4721360e-01   2.8284271e-01   4.2426407e-01   4.4721360e-01   2.2360680e-01   3.0000000e-01   6.4031242e-01   8.1853528e-01   1.0816654e+00   3.4641016e-01   4.8989795e-01   7.6811457e-01   3.4641016e-01   6.4031242e-01   3.1622777e-01   3.8729833e-01   1.1832160e+00   5.3851648e-01   4.5825757e-01   6.1644140e-01   4.5825757e-01   5.0000000e-01   3.4641016e-01   5.9160798e-01   3.0000000e-01   3.9912404e+00   3.5637059e+00   4.1327957e+00   2.9444864e+00   3.7336309e+00   3.2848135e+00   3.7188708e+00   2.1307276e+00   3.7013511e+00   2.7166155e+00   2.5000000e+00   3.1336879e+00   3.0463092e+00   3.6041643e+00   2.4698178e+00   3.6027767e+00   3.3015148e+00   2.8948230e+00   3.6742346e+00   2.7477263e+00   3.7483330e+00   3.0033315e+00   3.9547440e+00   3.5580894e+00   3.3630343e+00   3.5608988e+00   4.0049969e+00   4.1928511e+00   3.4336569e+00   2.3874673e+00   2.6720778e+00   2.5573424e+00   2.7892651e+00   4.0174619e+00   3.2588341e+00   3.4365681e+00   3.8729833e+00   3.5369478e+00   2.8740216e+00   2.8757608e+00   3.1575307e+00   3.5057096e+00   2.8982753e+00   2.1863211e+00   3.0166206e+00   2.9546573e+00   3.0049958e+00   3.2726136e+00   1.9157244e+00   2.9376862e+00   5.1874849e+00   4.0779897e+00   5.2488094e+00   4.5891176e+00   4.9689033e+00   6.0506198e+00   3.3882149e+00   5.5812185e+00   4.9618545e+00   5.5982140e+00   4.2918527e+00   4.4305756e+00   4.7937459e+00   4.0521599e+00   4.2953463e+00   4.5497253e+00   4.5628938e+00   6.2112801e+00   6.4459289e+00   4.0162171e+00   5.0665570e+00   3.8897301e+00   6.1660360e+00   4.0236799e+00   4.9030603e+00   5.2649786e+00   3.8884444e+00   3.9115214e+00   4.7465777e+00   5.0517324e+00   5.5009090e+00   6.0041652e+00   4.7874837e+00   4.0681691e+00   4.4463468e+00   5.7645468e+00   4.8052055e+00   4.5188494e+00   3.7947332e+00   4.7486840e+00   4.9537864e+00   4.6000000e+00   4.0779897e+00   5.1903757e+00   5.0714889e+00   4.5978256e+00   4.1844952e+00   4.3874822e+00   4.5617979e+00   4.0224371e+00   5.8309519e-01   1.4317821e+00   1.6941074e+00   1.1269428e+00   6.1644140e-01   1.2569805e+00   8.8317609e-01   7.8740079e-01   8.2462113e-01   7.5498344e-01   6.5574385e-01   6.4807407e-01   3.0000000e-01   5.7445626e-01   6.5574385e-01   5.7445626e-01   3.1622777e-01   2.4494897e-01   7.8740079e-01   1.1747340e+00   1.3928388e+00   1.7320508e-01   3.6055513e-01   8.7177979e-01   1.7320508e-01   4.2426407e-01   5.1961524e-01   5.8309519e-01   7.9372539e-01   4.6904158e-01   7.6157731e-01   1.0344080e+00   2.0000000e-01   8.8317609e-01   3.0000000e-01   8.7177979e-01   3.7416574e-01   4.1785165e+00   3.7643060e+00   4.3162484e+00   3.0298515e+00   3.8897301e+00   3.4496377e+00   3.9344631e+00   2.1886069e+00   3.8639358e+00   2.8618176e+00   2.5019992e+00   3.3181320e+00   3.1064449e+00   3.7788887e+00   2.6324893e+00   3.7828561e+00   3.4942810e+00   3.0315013e+00   3.7643060e+00   2.8530685e+00   3.9623226e+00   3.1511903e+00   4.0877867e+00   3.7188708e+00   3.5242020e+00   3.7322915e+00   4.1581246e+00   4.3737855e+00   3.6083237e+00   2.4879711e+00   2.7586228e+00   2.6362853e+00   2.9240383e+00   4.1797129e+00   3.4539832e+00   3.6687873e+00   4.0583248e+00   3.6304270e+00   3.0610456e+00   2.9899833e+00   3.2954514e+00   3.6905284e+00   3.0215890e+00   2.2248595e+00   3.1638584e+00   3.1400637e+00   3.1780497e+00   3.4380227e+00   1.9748418e+00   3.0951575e+00   5.4092513e+00   4.2449971e+00   5.4350713e+00   4.7738873e+00   5.1633323e+00   6.2353829e+00   3.5256205e+00   5.7584720e+00   5.1097945e+00   5.8283788e+00   4.4977772e+00   4.5934736e+00   4.9809638e+00   4.1988094e+00   4.4743715e+00   4.7592016e+00   4.7528939e+00   6.4459289e+00   6.6075714e+00   4.1231056e+00   5.2706736e+00   4.0669399e+00   6.3364028e+00   4.1809090e+00   5.1176166e+00   5.4635154e+00   4.0558600e+00   4.1024383e+00   4.9234135e+00   5.2316345e+00   5.6683331e+00   6.2337790e+00   4.9648766e+00   4.2355637e+00   4.6021734e+00   5.9447456e+00   5.0338852e+00   4.7191101e+00   3.9862263e+00   4.9416596e+00   5.1526692e+00   4.7906158e+00   4.2449971e+00   5.3972215e+00   5.2867760e+00   4.7843495e+00   4.3243497e+00   4.5760245e+00   4.7916594e+00   4.2178193e+00   1.8083141e+00   2.0420578e+00   1.4662878e+00   1.0099505e+00   1.7320508e+00   1.2165525e+00   1.3190906e+00   1.1747340e+00   6.8556546e-01   1.1180340e+00   1.0295630e+00   8.6602540e-01   9.9498744e-01   1.1090537e+00   1.0344080e+00   6.7823300e-01\n```\n\n----------------------------------------\n\nTITLE: Executing Symmetric Matrix-Matrix Operations in C\nDESCRIPTION: The provided function specifically addresses symmetric matrix-matrix operations using complex data types in C. BLAS routines allow for multifunctional evaluations, with options for matrix positioning influenced by specified side and uplo arguments.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nvoid zsymm(char *side, char *uplo, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test Class\nDESCRIPTION: Command syntax for running tests from a specific test class within a test file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.<module>.tests.<test_file>::<TestClass>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for scipy.constants Module in reStructuredText\nDESCRIPTION: This snippet configures the Sphinx autodoc extension for the scipy.constants module. It specifies to document the module while excluding members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/constants.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.constants\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Multiple Commits with asv\nDESCRIPTION: This command runs the KleeMinty benchmark for 10 commits between a specific commit and the current state, tracking performance over time.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nasv run --bench optimize_linprog.KleeMinty --steps 10 7fa17f..\n```\n\n----------------------------------------\n\nTITLE: Defining Moment Generating Function for Discrete Distributions in LaTeX\nDESCRIPTION: This LaTeX snippet defines the moment generating function for discrete distributions. It shows how to calculate the expected value of the exponential of the random variable multiplied by a parameter t.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete.rst#2025-04-14_snippet_5\n\nLANGUAGE: LaTeX\nCODE:\n```\nM_{X}\\left(t\\right)=E\\left[e^{Xt}\\right]=\\sum_{x_{k}}e^{x_{k}t}p\\left(x_{k}\\right)\n```\n\n----------------------------------------\n\nTITLE: LAPACK Complex Matrix Operations Function Declarations in C\nDESCRIPTION: Declarations for LAPACK functions with 'z' prefix that operate on complex matrices. These functions perform operations such as matrix factorization, solving linear systems, eigenvalue calculations, and other numerical linear algebra tasks. The 'z' prefix indicates complex double precision data types.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nvoid zgetc2(int *n, z *a, int *lda, int *ipiv, int *jpiv, int *info)\nvoid zgetf2(int *m, int *n, z *a, int *lda, int *ipiv, int *info)\nvoid zgetrf(int *m, int *n, z *a, int *lda, int *ipiv, int *info)\nvoid zgetri(int *n, z *a, int *lda, int *ipiv, z *work, int *lwork, int *info)\nvoid zgetrs(char *trans, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, int *info)\nvoid zggbak(char *job, char *side, int *n, int *ilo, int *ihi, d *lscale, d *rscale, int *m, z *v, int *ldv, int *info)\nvoid zggbal(char *job, int *n, z *a, int *lda, z *b, int *ldb, int *ilo, int *ihi, d *lscale, d *rscale, d *work, int *info)\nvoid zgges(char *jobvsl, char *jobvsr, char *sort, zselect2 *selctg, int *n, z *a, int *lda, z *b, int *ldb, int *sdim, z *alpha, z *beta, z *vsl, int *ldvsl, z *vsr, int *ldvsr, z *work, int *lwork, d *rwork, bint *bwork, int *info)\nvoid zggesx(char *jobvsl, char *jobvsr, char *sort, zselect2 *selctg, char *sense, int *n, z *a, int *lda, z *b, int *ldb, int *sdim, z *alpha, z *beta, z *vsl, int *ldvsl, z *vsr, int *ldvsr, d *rconde, d *rcondv, z *work, int *lwork, d *rwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid zggev(char *jobvl, char *jobvr, int *n, z *a, int *lda, z *b, int *ldb, z *alpha, z *beta, z *vl, int *ldvl, z *vr, int *ldvr, z *work, int *lwork, d *rwork, int *info)\nvoid zggevx(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, z *a, int *lda, z *b, int *ldb, z *alpha, z *beta, z *vl, int *ldvl, z *vr, int *ldvr, int *ilo, int *ihi, d *lscale, d *rscale, d *abnrm, d *bbnrm, d *rconde, d *rcondv, z *work, int *lwork, d *rwork, int *iwork, bint *bwork, int *info)\nvoid zggglm(int *n, int *m, int *p, z *a, int *lda, z *b, int *ldb, z *d, z *x, z *y, z *work, int *lwork, int *info)\nvoid zgghrd(char *compq, char *compz, int *n, int *ilo, int *ihi, z *a, int *lda, z *b, int *ldb, z *q, int *ldq, z *z, int *ldz, int *info)\nvoid zgglse(int *m, int *n, int *p, z *a, int *lda, z *b, int *ldb, z *c, z *d, z *x, z *work, int *lwork, int *info)\nvoid zggqrf(int *n, int *m, int *p, z *a, int *lda, z *taua, z *b, int *ldb, z *taub, z *work, int *lwork, int *info)\nvoid zggrqf(int *m, int *p, int *n, z *a, int *lda, z *taua, z *b, int *ldb, z *taub, z *work, int *lwork, int *info)\nvoid zgtcon(char *norm, int *n, z *dl, z *d, z *du, z *du2, int *ipiv, d *anorm, d *rcond, z *work, int *info)\nvoid zgtrfs(char *trans, int *n, int *nrhs, z *dl, z *d, z *du, z *dlf, z *df, z *duf, z *du2, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zgtsv(int *n, int *nrhs, z *dl, z *d, z *du, z *b, int *ldb, int *info)\nvoid zgtsvx(char *fact, char *trans, int *n, int *nrhs, z *dl, z *d, z *du, z *dlf, z *df, z *duf, z *du2, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zgttrf(int *n, z *dl, z *d, z *du, z *du2, int *ipiv, int *info)\nvoid zgttrs(char *trans, int *n, int *nrhs, z *dl, z *d, z *du, z *du2, int *ipiv, z *b, int *ldb, int *info)\nvoid zgtts2(int *itrans, int *n, int *nrhs, z *dl, z *d, z *du, z *du2, int *ipiv, z *b, int *ldb)\nvoid zhbev(char *jobz, char *uplo, int *n, int *kd, z *ab, int *ldab, d *w, z *z, int *ldz, z *work, d *rwork, int *info)\nvoid zhbevd(char *jobz, char *uplo, int *n, int *kd, z *ab, int *ldab, d *w, z *z, int *ldz, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zhbevx(char *jobz, char *range, char *uplo, int *n, int *kd, z *ab, int *ldab, z *q, int *ldq, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, z *work, d *rwork, int *iwork, int *ifail, int *info)\nvoid zhbgst(char *vect, char *uplo, int *n, int *ka, int *kb, z *ab, int *ldab, z *bb, int *ldbb, z *x, int *ldx, z *work, d *rwork, int *info)\nvoid zhbgv(char *jobz, char *uplo, int *n, int *ka, int *kb, z *ab, int *ldab, z *bb, int *ldbb, d *w, z *z, int *ldz, z *work, d *rwork, int *info)\nvoid zhbgvd(char *jobz, char *uplo, int *n, int *ka, int *kb, z *ab, int *ldab, z *bb, int *ldbb, d *w, z *z, int *ldz, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zhbgvx(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, z *ab, int *ldab, z *bb, int *ldbb, z *q, int *ldq, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, z *work, d *rwork, int *iwork, int *ifail, int *info)\nvoid zhbtrd(char *vect, char *uplo, int *n, int *kd, z *ab, int *ldab, d *d, d *e, z *q, int *ldq, z *work, int *info)\nvoid zhecon(char *uplo, int *n, z *a, int *lda, int *ipiv, d *anorm, d *rcond, z *work, int *info)\nvoid zheequb(char *uplo, int *n, z *a, int *lda, d *s, d *scond, d *amax, z *work, int *info)\nvoid zheev(char *jobz, char *uplo, int *n, z *a, int *lda, d *w, z *work, int *lwork, d *rwork, int *info)\nvoid zheevd(char *jobz, char *uplo, int *n, z *a, int *lda, d *w, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zheevr(char *jobz, char *range, char *uplo, int *n, z *a, int *lda, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, int *isuppz, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zheevx(char *jobz, char *range, char *uplo, int *n, z *a, int *lda, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, z *work, int *lwork, d *rwork, int *iwork, int *ifail, int *info)\nvoid zhegs2(int *itype, char *uplo, int *n, z *a, int *lda, z *b, int *ldb, int *info)\nvoid zhegst(int *itype, char *uplo, int *n, z *a, int *lda, z *b, int *ldb, int *info)\nvoid zhegv(int *itype, char *jobz, char *uplo, int *n, z *a, int *lda, z *b, int *ldb, d *w, z *work, int *lwork, d *rwork, int *info)\nvoid zhegvd(int *itype, char *jobz, char *uplo, int *n, z *a, int *lda, z *b, int *ldb, d *w, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zhegvx(int *itype, char *jobz, char *range, char *uplo, int *n, z *a, int *lda, z *b, int *ldb, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, z *work, int *lwork, d *rwork, int *iwork, int *ifail, int *info)\nvoid zherfs(char *uplo, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zhesv(char *uplo, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, z *work, int *lwork, int *info)\nvoid zhesvx(char *fact, char *uplo, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, int *lwork, d *rwork, int *info)\nvoid zheswapr(char *uplo, int *n, z *a, int *lda, int *i1, int *i2)\nvoid zhetd2(char *uplo, int *n, z *a, int *lda, d *d, d *e, z *tau, int *info)\nvoid zhetf2(char *uplo, int *n, z *a, int *lda, int *ipiv, int *info)\nvoid zhetrd(char *uplo, int *n, z *a, int *lda, d *d, d *e, z *tau, z *work, int *lwork, int *info)\nvoid zhetrf(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *lwork, int *info)\nvoid zhetri(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *info)\nvoid zhetri2(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *lwork, int *info)\nvoid zhetri2x(char *uplo, int *n, z *a, int *lda, int *ipiv, z *work, int *nb, int *info)\nvoid zhetrs(char *uplo, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, int *info)\nvoid zhetrs2(char *uplo, int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, z *work, int *info)\nvoid zhfrk(char *transr, char *uplo, char *trans, int *n, int *k, d *alpha, z *a, int *lda, d *beta, z *c)\nvoid zhgeqz(char *job, char *compq, char *compz, int *n, int *ilo, int *ihi, z *h, int *ldh, z *t, int *ldt, z *alpha, z *beta, z *q, int *ldq, z *z, int *ldz, z *work, int *lwork, d *rwork, int *info)\nvoid zhpcon(char *uplo, int *n, z *ap, int *ipiv, d *anorm, d *rcond, z *work, int *info)\nvoid zhpev(char *jobz, char *uplo, int *n, z *ap, d *w, z *z, int *ldz, z *work, d *rwork, int *info)\nvoid zhpevd(char *jobz, char *uplo, int *n, z *ap, d *w, z *z, int *ldz, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zhpevx(char *jobz, char *range, char *uplo, int *n, z *ap, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, z *work, d *rwork, int *iwork, int *ifail, int *info)\nvoid zhpgst(int *itype, char *uplo, int *n, z *ap, z *bp, int *info)\nvoid zhpgv(int *itype, char *jobz, char *uplo, int *n, z *ap, z *bp, d *w, z *z, int *ldz, z *work, d *rwork, int *info)\nvoid zhpgvd(int *itype, char *jobz, char *uplo, int *n, z *ap, z *bp, d *w, z *z, int *ldz, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid zhpgvx(int *itype, char *jobz, char *range, char *uplo, int *n, z *ap, z *bp, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, z *z, int *ldz, z *work, d *rwork, int *iwork, int *ifail, int *info)\nvoid zhprfs(char *uplo, int *n, int *nrhs, z *ap, z *afp, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zhpsv(char *uplo, int *n, int *nrhs, z *ap, int *ipiv, z *b, int *ldb, int *info)\nvoid zhpsvx(char *fact, char *uplo, int *n, int *nrhs, z *ap, z *afp, int *ipiv, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info)\nvoid zhptrd(char *uplo, int *n, z *ap, d *d, d *e, z *tau, int *info)\nvoid zhptrf(char *uplo, int *n, z *ap, int *ipiv, int *info)\nvoid zhptri(char *uplo, int *n, z *ap, int *ipiv, z *work, int *info)\nvoid zhptrs(char *uplo, int *n, int *nrhs, z *ap, int *ipiv, z *b, int *ldb, int *info)\nvoid zhsein(char *side, char *eigsrc, char *initv, bint *select, int *n, z *h, int *ldh, z *w, z *vl, int *ldvl, z *vr, int *ldvr, int *mm, int *m, z *work, d *rwork, int *ifaill, int *ifailr, int *info)\nvoid zhseqr(char *job, char *compz, int *n, int *ilo, int *ihi, z *h, int *ldh, z *w, z *z, int *ldz, z *work, int *lwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Documenting Trust-Krylov Method for SciPy Optimization\nDESCRIPTION: This snippet defines the documentation structure for the 'trust-krylov' method in SciPy's optimize.minimize function. It specifies the implementation path and method name using reStructuredText directives.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-trustkrylov.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _optimize.minimize-trustkrylov:\n\nminimize(method='trust-krylov')\n-------------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._trustregion_krylov._minimize_trust_krylov\n   :method: trust-krylov\n```\n\n----------------------------------------\n\nTITLE: Running tests for GCC and Clang builds\nDESCRIPTION: Demonstrates how to run tests for the scipy.linalg submodule on both GCC and Clang builds. This is useful for comparing test results between different compiler builds.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/compilers_and_options.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py -s linalg                          # run tests for the GCC build\npython dev.py --build-dir build-clang -s linalg  # run tests for the Clang build\n```\n\n----------------------------------------\n\nTITLE: Defining Scale Parameter Estimator for Laplace Distribution in LaTeX\nDESCRIPTION: Mathematical expression for the estimator of the scale parameter for the Laplace distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace.rst#2025-04-14_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\hat{S}=\\frac{1}{N}\\sum_{j=1}^{N}\\left|X_{j}-\\hat{L}\\right|.\n```\n\n----------------------------------------\n\nTITLE: Sphinx directive for linprog HiGHS method\nDESCRIPTION: RST documentation directive specifying the implementation and method for scipy.optimize.linprog's HiGHS solver\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.linprog-highs.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.linprog\n   :impl: scipy.optimize._linprog._linprog_highs_doc\n   :method: highs\n```\n\n----------------------------------------\n\nTITLE: Coefficient Definition in LaTeX\nDESCRIPTION: Definition of the coefficient Cm used in the moments calculation, expressed in terms of zeta functions and Bernoulli polynomials.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} C_{m} & = & \\frac{\\left(2m\\right)!\\left[\\zeta\\left(2m+1,\\frac{1}{4}\\right)-\\zeta\\left(2m+1,\\frac{3}{4}\\right)\\right]}{\\pi^{2m+1}2^{2m}}\\\\ & = & 4\\left(-1\\right)^{m-1}\\frac{16^{m}}{2m+1}B_{2m+1}\\left(\\frac{1}{4}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for scipy.optimize.linprog Simplex Method\nDESCRIPTION: ReStructuredText documentation directive that defines the API reference for the simplex method implementation of scipy.optimize.linprog function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.linprog-simplex.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.linprog-simplex:\n\nlinprog(method='simplex')\n----------------------------------------\n\n.. scipy-optimize:function:: scipy.optimize.linprog\n   :impl: scipy.optimize._linprog._linprog_simplex_doc\n   :method: simplex\n```\n\n----------------------------------------\n\nTITLE: Defining Moment Generating Function for HalfCauchy Distribution\nDESCRIPTION: This snippet presents the moment generating function M(t) for the HalfCauchy distribution, involving sine and cosine integrals.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfcauchy.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nM\\left(t\\right)=\\cos t+\\frac{2}{\\pi}\\left[\\mathrm{Si}\\left(t\\right)\\cos t-\\mathrm{Ci}\\left(\\mathrm{-}t\\right)\\sin t\\right]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SciPy Lapack Module\nDESCRIPTION: Sphinx directive configuration that specifies documentation settings for the scipy.linalg.cython_lapack module. It excludes members, inherited members, and special members from being included in the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/linalg.cython_lapack.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.linalg.cython_lapack\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data Table in Plaintext\nDESCRIPTION: This snippet shows a portion of the numerical data table. Each line contains three floating-point numbers, separated by spaces. The numbers use scientific notation and vary widely in scale and precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_j_prime_int_data_ipp/bessel_j_prime_int_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0.28e2 0.3429813683032989501953125e-1 9.6934167323599723375550530190686059345268090063894e-77\n0.28e2 0.96701286733150482177734375e-1 1.3829632821676867764296795343744777696903912067403e-64\n0.28e2 0.159812271595001220703125e0 1.0753460562158684392951992246815136406008646385717e-58\n0.28e2 0.297095477581024169921875e0 2.0045475725123002142901050443842530482907334222436e-51\n0.28e2 0.77344071865081787109375e0 3.3060340756185361079992123698919448202181277586582e-40\n```\n\n----------------------------------------\n\nTITLE: Defining Laplace Distribution Properties in LaTeX\nDESCRIPTION: Mathematical expressions for key statistical properties of the Laplace distribution, including mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} m_{d}=m_{n}=\\mu & = & 0\\\\ \\mu_{2} & = & 2\\\\ \\gamma_{1} & = & 0\\\\ \\gamma_{2} & = & 3\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Basic Legacy Directive Usage in RST\nDESCRIPTION: Shows the basic syntax for using the legacy directive without any additional message.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. legacy::\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data in Scientific Notation\nDESCRIPTION: This snippet shows a sample of the numerical data contained in the file. Each row represents three floating-point values in scientific notation, separated by spaces.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/gammainc.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n7.014169663889852539e+12 6.009842690777838867e+12 0.000000000000000000e+00\n1.551686039878927539e+13 1.329507190730940430e+13 0.000000000000000000e+00\n3.432665136046741797e+13 2.941157466430282812e+13 0.000000000000000000e+00\n7.593797735752165625e+13 6.506476461840562500e+13 0.000000000000000000e+00\n7.652524051825328570e+03 6.437303444473845957e+03 3.234493335195223846e-49\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data Table in Scientific Notation\nDESCRIPTION: This snippet shows a portion of a large numerical data table. Each row contains three values: a base number, an exponent, and a result. The data is formatted in scientific notation with varying levels of precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/binomial_large_data_ipp/binomial_large_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.174e3\t0.4e1\t0.36890001e8\n0.174e3\t0.5e1\t0.1254260034e10\n0.174e3\t0.6e1\t0.35328324291e11\n0.174e3\t0.8e1\t0.17699490469791e14\n0.174e3\t0.9e1\t0.326457268665034e15\n0.174e3\t0.11e2\t0.80308488091598364e17\n0.174e3\t0.13e2\t0.13593756003504784614e20\n0.174e3\t0.22e2\t0.4359346248249975839021623926e28\n0.174e3\t0.25e2\t0.1087562120541667885404612090756e31\n0.174e3\t0.32e2\t0.90596769259248050560796925567405729e35\n```\n\n----------------------------------------\n\nTITLE: Defining Binomial Distribution in LaTeX\nDESCRIPTION: This LaTeX snippet defines the probability mass function and cumulative distribution function of the binomial distribution. It uses the incomplete beta integral in the CDF definition.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_binom.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} p\\left(k;n,p\\right) & = & \\left(\\begin{array}{c} n\\\\ k\\end{array}\\right)p^{k}\\left(1-p\\right)^{n-k}\\,\\, k\\in\\left\\{ 0,1,\\ldots n\\right\\} ,\\\\ F\\left(x;n,p\\right) & = & \\sum_{k\\leq x}\\left(\\begin{array}{c} n\\\\ k\\end{array}\\right)p^{k}\\left(1-p\\right)^{n-k}=I_{1-p}\\left(n-\\left\\lfloor x\\right\\rfloor ,\\left\\lfloor x\\right\\rfloor +1\\right)\\quad x\\geq0\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Double Weibull Distribution PDF and CDF in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (PDF) and cumulative distribution function (CDF) for the Double Weibull Distribution. It includes the shape parameter c and specifies the support for x.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dweibull.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\frac{c}{2}\\left|x\\right|^{c-1}\\exp\\left(-\\left|x\\right|^{c}\\right)\\\\\nF\\left(x;c\\right) & = & \\left\\{\n    \\begin{array}{ccc}\n      \\frac{1}{2}\\exp\\left(-\\left|x\\right|^{c}\\right) &  & x\\leq0\\\\\n      1-\\frac{1}{2}\\exp\\left(-\\left|x\\right|^{c}\\right) &  & x>0\n    \\end{array}\n    \\right.\\\\\nG\\left(q;c\\right) & = & \\left\\{\n    \\begin{array}{ccc}\n      -\\log^{1/c}\\left(\\frac{1}{2q}\\right) &  & q\\leq\\frac{1}{2}\\\\\n      \\log^{1/c}\\left(\\frac{1}{2q-1}\\right) &  & q>\\frac{1}{2}\n    \\end{array}\n    \\right.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK Double Precision Symmetric Eigenvalue Problem Solvers in C\nDESCRIPTION: This snippet declares LAPACK routines for solving symmetric eigenvalue problems using double precision. It includes functions for reducing matrices to tridiagonal form, computing eigenvalues and eigenvectors, and performing related operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nvoid dsygs2(int *itype, char *uplo, int *n, d *a, int *lda, d *b, int *ldb, int *info)\nvoid dsygst(int *itype, char *uplo, int *n, d *a, int *lda, d *b, int *ldb, int *info)\nvoid dsygv(int *itype, char *jobz, char *uplo, int *n, d *a, int *lda, d *b, int *ldb, d *w, d *work, int *lwork, int *info)\nvoid dsygvd(int *itype, char *jobz, char *uplo, int *n, d *a, int *lda, d *b, int *ldb, d *w, d *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid dsygvx(int *itype, char *jobz, char *range, char *uplo, int *n, d *a, int *lda, d *b, int *ldb, d *vl, d *vu, int *il, int *iu, d *abstol, int *m, d *w, d *z, int *ldz, d *work, int *lwork, int *iwork, int *ifail, int *info)\n```\n\n----------------------------------------\n\nTITLE: Viewing Import Path for SciPy Installation\nDESCRIPTION: Command to check which SciPy installation you're using by printing its file path. Useful for troubleshooting when the wrong SciPy installation is being detected during documentation builds.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython -c \"import scipy; print(scipy.__file__)\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests from a Specific Test File\nDESCRIPTION: Example command for running tests from the test_linprog.py file in the scipy.optimize module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/devpy_test.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py test -t scipy.optimize.tests.test_linprog\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Table of Contents for SciPy Release Notes\nDESCRIPTION: A toctree directive that lists all SciPy release note files from version 0.7.0 to 1.16.0. The maxdepth parameter is set to 1 to control the depth of the table of contents.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   release/1.16.0-notes\n   release/1.15.2-notes\n   release/1.15.1-notes\n   release/1.15.0-notes\n   release/1.14.1-notes\n   release/1.14.0-notes\n   release/1.13.1-notes\n   release/1.13.0-notes\n   release/1.12.0-notes\n   release/1.11.4-notes\n   release/1.11.3-notes\n   release/1.11.2-notes\n   release/1.11.1-notes\n   release/1.11.0-notes\n   release/1.10.1-notes\n   release/1.10.0-notes\n   release/1.9.3-notes\n   release/1.9.2-notes\n   release/1.9.1-notes\n   release/1.9.0-notes\n   release/1.8.1-notes\n   release/1.8.0-notes\n   release/1.7.3-notes\n   release/1.7.2-notes\n   release/1.7.1-notes\n   release/1.7.0-notes\n   release/1.6.3-notes\n   release/1.6.2-notes\n   release/1.6.1-notes\n   release/1.6.0-notes\n   release/1.5.4-notes\n   release/1.5.3-notes\n   release/1.5.2-notes\n   release/1.5.1-notes\n   release/1.5.0-notes\n   release/1.4.1-notes\n   release/1.4.0-notes\n   release/1.3.3-notes\n   release/1.3.2-notes\n   release/1.3.1-notes\n   release/1.3.0-notes\n   release/1.2.3-notes\n   release/1.2.2-notes\n   release/1.2.1-notes\n   release/1.2.0-notes\n   release/1.1.0-notes\n   release/1.0.1-notes\n   release/1.0.0-notes\n   release/0.19.1-notes\n   release/0.19.0-notes\n   release/0.18.1-notes\n   release/0.18.0-notes\n   release/0.17.1-notes\n   release/0.17.0-notes\n   release/0.16.1-notes\n   release/0.16.0-notes\n   release/0.15.1-notes\n   release/0.15.0-notes\n   release/0.14.1-notes\n   release/0.14.0-notes\n   release/0.13.2-notes\n   release/0.13.1-notes\n   release/0.13.0-notes\n   release/0.12.1-notes\n   release/0.12.0-notes\n   release/0.11.0-notes\n   release/0.10.1-notes\n   release/0.10.0-notes\n   release/0.9.0-notes\n   release/0.8.0-notes\n   release/0.7.2-notes\n   release/0.7.1-notes\n   release/0.7.0-notes\n```\n\n----------------------------------------\n\nTITLE: Mathematical Definition of Bradford Distribution\nDESCRIPTION: Complete mathematical formulation of the Bradford distribution, including its PDF, CDF, quantile function, moment generating function, moments, skewness, kurtosis, median, mode, and entropy. The distribution has one shape parameter c > 0 with support x ∈ [0,1].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_bradford.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} \\textrm{Let } k & = & \\log\\left(1+c\\right)\\\\\n\\textrm{Then}\\\\\nf\\left(x;c\\right) & = & \\frac{c}{k\\left(1+cx\\right)}\\\\\nF\\left(x;c\\right) & = & \\frac{\\log\\left(1+cx\\right)}{k}\\\\\nG\\left(q\\; c\\right) & = & \\frac{\\left(1+c\\right)^{q}-1}{c}\\\\\nM\\left(t\\right) & = & \\frac{1}{k}e^{-t/c}\\left[\\mathrm{Ei}\\left(t+\\frac{t}{c}\\right)-\\mathrm{Ei}\\left(\\frac{t}{c}\\right)\\right]\\\\\n\\mu & = & \\frac{c-k}{ck}\\\\\n\\mu_{2} & = & \\frac{\\left(c+2\\right)k-2c}{2ck^{2}}\\\\\n\\gamma_{1} & = & \\frac{\\sqrt{2}\\left(12c^{2}-9kc\\left(c+2\\right)+2k^{2}\\left(c\\left(c+3\\right)+3\\right)\\right)}{\\sqrt{c\\left(c\\left(k-2\\right)+2k\\right)}\\left(3c\\left(k-2\\right)+6k\\right)}\\\\\n\\gamma_{2} & = & \\frac{c^{3}\\left(k-3\\right)\\left(k\\left(3k-16\\right)+24\\right)+12kc^{2}\\left(k-4\\right)\\left(k-3\\right)+6ck^{2}\\left(3k-14\\right)+12k^{3}}{3c\\left(c\\left(k-2\\right)+2k\\right)^{2}}\\\\\nm_{d} & = & 0\\\\\nm_{n} & = & \\sqrt{1+c}-1\\\\\nh\\left[X\\right]& = & \\frac{1}{2}\\log\\left(1+c\\right)-\\log\\left(\\frac{c}{\\log\\left(1+c\\right)}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Running the Conversion Script\nDESCRIPTION: Executes the convert.py script, which parses the BOOST data and writes it into CSV text files. This script is located in scipy/special/utils/convert.py and transforms the Boost data into a format suitable for SciPy's test suite.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/utils/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"python scipy/special/utils/convert.py\"\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Negative Binomial Distribution\nDESCRIPTION: This code snippet indicates the location of the negative binomial distribution implementation in SciPy's statistical functions. It provides a direct reference to the specific module and function name for users who want to utilize this distribution in their Python code.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nbinom.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.nbinom\n```\n\n----------------------------------------\n\nTITLE: Half-Logistic Probability Density and Distribution Functions\nDESCRIPTION: Mathematical equations defining the probability density function (f(x)), cumulative distribution function (F(x)), and inverse distribution function (G(q)) for the half-logistic distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halflogistic.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nf(x) = \\frac{2e^{-x}}{(1+e^{-x})^{2}}=\\frac{1}{2}\\mathrm{sech}^{2}(\\frac{x}{2})\nF(x) = \\frac{1-e^{-x}}{1+e^{-x}}=\\tanh(\\frac{x}{2})\nG(q) = \\log(\\frac{1+q}{1-q})=2\\mathrm{arctanh}(q)\n```\n\n----------------------------------------\n\nTITLE: Periodic Wrapping Mode Example\nDESCRIPTION: Demonstrates the data point model implementation where x[0] and x[-1] are co-located in a 1D array under periodic wrapping mode.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/roadmap-detailed.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nx[0] and x[-1]\n```\n\n----------------------------------------\n\nTITLE: Verifying pkg-config Configuration\nDESCRIPTION: Commands to verify correct pkg-config setup for custom BLAS/LAPACK libraries by checking linker and compiler flags.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/blas_lapack.rst#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pkg-config --libs armpl_lp64\n-L/path/to/library-dir -larmpl_lp64\n$ pkg-config --cflags armpl_lp64\n-I/path/to/include-dir\n```\n\n----------------------------------------\n\nTITLE: Weibull Min Distribution Entropy in LaTeX\nDESCRIPTION: Defines the entropy formula for the Weibull Minimum distribution using Euler's constant γ.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_weibull_min.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=-\\frac{\\gamma}{c}-\\log\\left(c\\right)+\\gamma+1\n```\n\n----------------------------------------\n\nTITLE: Configuring automodule directive for Cython BLAS documentation in reStructuredText\nDESCRIPTION: Sphinx automodule directive that specifies the documentation generation settings for the scipy.linalg.cython_blas module. It excludes member documentation, inherited members, and special members to create a concise module reference.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/linalg.cython_blas.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.linalg.cython_blas\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Set Up Triangular Matrix-Vector Multiplication in C\nDESCRIPTION: Designed for triangular matrix-vector multiplication, this declaration roots itself in complex arithmetic with C. It specifies distinct attributes involving matrix orientation and content transformation, promptly adhering to BLAS procedures.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nvoid ztrmv(char *uplo, char *trans, char *diag, int *n, z *a, int *lda, z *x, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Mass Function for Fisher's Noncentral Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the probability mass function for Fisher's Noncentral Hypergeometric Distribution with parameters M, n, N, and ω. It specifies the valid range for x and defines P_0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nchypergeom_fisher.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\np(x; M, n, N, \\omega) = \\frac{\\binom{n}{x}\\binom{M - n}{N-x}\\omega^x}{P_0},\n```\n\n----------------------------------------\n\nTITLE: Embedding reStructuredText in MyST Markdown\nDESCRIPTION: Shows how to include reStructuredText directives within a MyST Markdown file by wrapping them in the eval-rst directive. This is useful when converting from RST to MyST or when needed functionality is only available in reST.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/adding_notebooks.rst#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nSome Markdown here\n\n```{eval-rst}\n.. some_rest_directive_here::\n  :some_option: some_value\n```\n\nSome more Markdown here\n```\n\n----------------------------------------\n\nTITLE: Running Code with Deprecation Warnings in Python\nDESCRIPTION: This snippet shows how to run Python code while checking for deprecation warnings. The `-Wd` flag passed to the Python interpreter configures the interpreter to display deprecation warnings that may indicate the use of outdated or soon-to-be-removed features in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.15.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"python -Wd\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Cython Optimize Module in SciPy\nDESCRIPTION: This snippet uses the Sphinx automodule directive to automatically generate documentation for the scipy.optimize.cython_optimize module. It includes all public classes, functions, and attributes of the module in the documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.cython_optimize.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.optimize.cython_optimize\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Links\nDESCRIPTION: Link references and URLs for various SciPy-related resources and documentation, written in ReStructuredText format. These links provide navigation to testing guidelines, contribution workflows, and community platforms.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/hacking.rst#2025-04-14_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. _scikit-learn: http://scikit-learn.org\n\n.. _scikit-image: http://scikit-image.org/\n\n.. _statsmodels: https://www.statsmodels.org/\n\n.. _testing guidelines: https://docs.scipy.org/doc/numpy/reference/testing.html\n\n.. _formatted correctly: https://docs.scipy.org/doc/numpy/dev/gitwash/development_workflow.html#writing-the-commit-message\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix Output\nDESCRIPTION: A matrix of scientific notation numbers arranged in 4 columns. Each row contains exponential values with high precision, showing computational results likely from a scientific calculation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rg_xxx_ipp/ellint_rg_xxx.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n3.6401757896136402713757954097140157045942e-19 3.6401757896136402713757954097140157045942e-19 3.6401757896136402713757954097140157045942e-19 6.0333869340641830506004336629171162667854e-10\n6.0660607797570928288862987520779768146895e-19 0.0000000000000000000000000000000000000000e+00 6.0660607797570928288862987520779768146895e-19 6.1170673206798078929781737598155185485477e-10\n6.0660607797570928288862987520779768146895e-19 6.0660607797570928288862987520779768146895e-19 6.0660607797570928288862987520779768146895e-19 7.7884920104967000145010276910057744944884e-10\n```\n\n----------------------------------------\n\nTITLE: Defining Beta-Geometric Distribution Probability Mass Function in LaTeX\nDESCRIPTION: This LaTeX equation defines the probability mass function for the beta-geometric distribution, which is a special case of the beta-negative binomial distribution when n = 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_betanbinom.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nf(k; a, b) = \\frac{B(a + 1, b + k)}{B(a, b)}\n```\n\n----------------------------------------\n\nTITLE: Legacy Directive with Function Argument in RST\nDESCRIPTION: Shows how to use the legacy directive with the 'function' argument to indicate a deprecated function rather than a submodule.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/rendering_documentation.rst#2025-04-14_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. legacy:: function\n```\n\n----------------------------------------\n\nTITLE: Numerical Matrix Data\nDESCRIPTION: Matrix of scientific notation numbers arranged in three columns. Each row contains three high-precision floating point values in exponential notation format. Data appears to be part of a scientific computation or analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yv_data_ipp/bessel_yv_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.1252804412841796875e3\t0.3206622265625e5\t0.2427101323753481633835014493220406978017e-2\n0.1252804412841796875e3\t0.3636794921875e5\t-0.4144432737996561571547765270607343786669e-2\n0.25554705810546875e3\t0.25554705810546875e3\t-0.1220899231301180796588329975642599451792e0\n0.25554705810546875e3\t0.503011474609375e3\t-0.2587460388550158251245313556927425626503e-1\n0.25554705810546875e3\t0.10074598388671875e4\t-0.2709588740650161660564368137667279157517e-2\n0.25554705810546875e3\t0.1185395751953125e4\t0.7388450600504248491679263004388188205535e-2\n0.25554705810546875e3\t0.353451806640625e4\t-0.4070364240355399016905231104224278184321e-3\n0.25554705810546875e3\t0.80715478515625e4\t0.8869456474018290057215067339235844280777e-2\n0.25554705810546875e3\t0.1622925e5\t0.6193548860770801980645313593061881324053e-2\n0.25554705810546875e3\t0.3206622265625e5\t-0.3573956395914134221575915050921377055356e-2\n0.25554705810546875e3\t0.3636794921875e5\t0.4150896139122617211447974747314758032795e-2\n0.503011474609375e3\t0.503011474609375e3\t-0.9741864482364844408259833924093581326514e-1\n0.503011474609375e3\t0.10074598388671875e4\t-0.1584672339561671902535695362033324616336e-1\n0.503011474609375e3\t0.1185395751953125e4\t0.5943568069873248119538400255697357733917e-2\n0.503011474609375e3\t0.353451806640625e4\t0.1015104946539387860338179999806441182473e-1\n0.503011474609375e3\t0.80715478515625e4\t0.8883753528547744135823658482106607009966e-2\n0.503011474609375e3\t0.1622925e5\t0.5522874844418632574706826538336184699582e-2\n0.503011474609375e3\t0.3206622265625e5\t0.4455587256750903432452764772837804809816e-2\n0.503011474609375e3\t0.3636794921875e5\t-0.3843435197254867050137588280055312232508e-2\n0.10074598388671875e4\t0.10074598388671875e4\t-0.7728430027806412142852417589285707550701e-1\n0.10074598388671875e4\t0.1185395751953125e4\t0.3043120394295723532238172036669867077737e-1\n0.10074598388671875e4\t0.353451806640625e4\t-0.4742168167846528568912593945029413563666e-2\n0.10074598388671875e4\t0.80715478515625e4\t-0.7420503792165366240145846571768477365506e-2\n0.10074598388671875e4\t0.1622925e5\t-0.1795717524473915811452628563407404683787e-2\n0.10074598388671875e4\t0.3206622265625e5\t0.7500534979641494608228235889183901707366e-3\n0.10074598388671875e4\t0.3636794921875e5\t0.3051253358553692403837737104117441878866e-2\n0.1185395751953125e4\t0.10074598388671875e4\t-0.7251757054382535422878260094266093685031e29\n0.1185395751953125e4\t0.1185395751953125e4\t-0.7320587935179758776740758943706909907242e-1\n0.1185395751953125e4\t0.353451806640625e4\t0.4795852538068195975343600795948509285902e-3\n0.1185395751953125e4\t0.80715478515625e4\t0.1749093092873678394701882014413670671251e-2\n0.1185395751953125e4\t0.1622925e5\t0.4162877531169379039027191426399181611799e-2\n0.1185395751953125e4\t0.3206622265625e5\t-0.3200560495047506921416083730251596135541e-3\n0.1185395751953125e4\t0.3636794921875e5\t-0.4176563093033758974497368789398642132897e-2\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data Series in Plaintext Format\nDESCRIPTION: This snippet contains a series of numerical data points, each row consisting of three values. The data appears to be scientific in nature, possibly representing results from calculations or measurements with varying input parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_i_prime_int_data_ipp/bessel_i_prime_int_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.37e2 0.95070552825927734375e1 5.9001858858606893937118814413721912920024394022728e-18\n0.37e2 0.24750102996826171875e2 0.16182031803861277979226848786561421115178084390837\n0.37e2 0.637722015380859375e2 7620156925871909004013.4511789819332608090859149484\n0.4e2 0.177219114266335964202880859375e-2 2.1934463145098982856482722894618772007386408955866e-166\n0.4e2 0.22177286446094512939453125e-2 1.3792498395120423934684486452597604404348707842772e-162\n0.4e2 0.7444499991834163665771484375e-2 4.4750827254189778755330436710326506163523889802085e-142\n0.4e2 0.1433600485324859619140625e-1 5.6222881809274427763875173260632408250704436858785e-131\n0.4e2 0.1760916970670223236083984375e-1 1.7101422547443159905114096833775090592290767321829e-127\n0.4e2 0.6152711808681488037109375e-1 2.6474147397607258550183244427472642118161245275487e-106\n0.4e2 0.11958599090576171875e0 4.7729492236342102509017782812387711881706287458449e-95\n0.4e2 0.15262925624847412109375e0 6.4737153699907991293058554021804873987255762728477e-91\n0.4e2 0.408089816570281982421875e0 2.9454570864564136977420322683387112229627476337539e-74\n0.4e2 0.6540834903717041015625e0 2.8846886509171748574863377735521386214202206755858e-66\n0.4e2 0.1097540378570556640625e1 1.6941972001909998208906812347963350453047191654302e-57\n0.4e2 0.30944411754608154296875e1 6.4346689071340193649227713397841966987433720786189e-40\n0.4e2 0.51139926910400390625e1 2.3089841179919606378679849343539819497749439614471e-31\n0.4e2 0.95070552825927734375e1 1.102736347295864305334545583894581762444979228683e-20\n0.4e2 0.24750102996826171875e2 0.0042179636760203964867503418195156015892913194089181\n0.4e2 0.637722015380859375e2 1384718401734132335251.2307161144249865361826025353\n0.43e2 0.177219114266335964202880859375e-2 2.2155194558806744336118853845894526377597755033613e-180\n0.43e2 0.22177286446094512939453125e-2 2.7301407262855693718808358405067536530151961222709e-176\n0.43e2 0.7444499991834163665771484375e-2 3.3506150347288365485455030173519989511162460227522e-154\n0.43e2 0.1433600485324859619140625e-1 3.0061756609377494048964736743144427129003213203223e-142\n0.43e2 0.1760916970670223236083984375e-1 1.6945940912316967428473837149944892562616754985489e-138\n0.43e2 0.6152711808681488037109375e-1 1.1190199437049647148982314787349308670836083412719e-115\n0.43e2 0.11958599090576171875e0 1.4812957404734739372437378368931490462014921889916e-103\n0.43e2 0.15262925624847412109375e0 4.1771418376583419694971373044913302025322339896609e-99\n0.43e2 0.408089816570281982421875e0 3.6324851051777819272129739809658943871874407487028e-81\n0.43e2 0.6540834903717041015625e0 1.4646390194930429146922835980901944721928096243995e-72\n0.43e2 0.1097540378570556640625e1 4.0625964334686726052275084650431825087265178224124e-63\n0.43e2 0.30944411754608154296875e1 3.445055402147930375877257131921015119606512508245e-44\n0.43e2 0.51139926910400390625e1 5.5381687600583444906926687040881418784943267264745e-35\n0.43e2 0.95070552825927734375e1 1.6515029191453376830894919269624334980950396009178e-23\n0.43e2 0.24750102996826171875e2 9.07033473684436819050490950252432930934152092096e-05\n0.43e2 0.637722015380859375e2 223349833220390199450.27662394978391334765490925711\n0.46e2 0.177219114266335964202880859375e-2 1.8104378462921870510073243689353670043465780417572e-194\n0.46e2 0.22177286446094512939453125e-2 4.3720650768675253652563392243562531036087038645837e-190\n0.46e2 0.7444499991834163665771484375e-2 2.0295861561067542761383038303516665614408092929621e-166\n0.46e2 0.1433600485324859619140625e-1 1.3003944406199447796291213829678693617876885669235e-153\n0.46e2 0.1760916970670223236083984375e-1 1.358496858602096893203295098466102421151497813062e-149\n0.46e2 0.6152711808681488037109375e-1 3.8266017294469036713813054977133414550613357620995e-125\n0.46e2 0.11958599090576171875e0 3.7192605471161617718716878121485601007325143417766e-112\n0.46e2 0.15262925624847412109375e0 2.1805444805077346331288545875784651786026586254492e-107\n0.46e2 0.408089816570281982421875e0 3.6242559912380282003067476102750491997093042839905e-88\n0.46e2 0.6540834903717041015625e0 6.0163489655614054743164061525225632154707225487227e-79\n0.46e2 0.1097540378570556640625e1 7.8819672414759206147861166344933846001601735395384e-69\n0.46e2 0.30944411754608154296875e1 1.4930590833870162213775836764629326071792693829531e-48\n0.46e2 0.51139926910400390625e1 1.0763470713262935904456505724516010574972799879661e-38\n0.46e2 0.95070552825927734375e1 2.0115846220319402838816743576250278175262193057597e-26\n0.46e2 0.24750102996826171875e2 1.6252200145822910970533586273353022511176623102534e-06\n0.46e2 0.637722015380859375e2 32056296975334433492.887437331135099409690999530645\n0.49e2 0.177219114266335964202880859375e-2 1.2137476169035449224165111313052760780577498154495e-208\n0.49e2 0.22177286446094512939453125e-2 5.744138736848391561405561566827001406807628730672e-204\n0.49e2 0.7444499991834163665771484375e-2 1.0086190601725809485592749250036950039156412980801e-178\n0.49e2 0.1433600485324859619140625e-1 4.6150092654244014484753439347715293478138962384071e-165\n0.49e2 0.1760916970670223236083984375e-1 8.9348715778263801065552292828264974327479981243026e-161\n0.49e2 0.6152711808681488037109375e-1 1.073557969060502670244818681362437101258532544188e-134\n0.49e2 0.11958599090576171875e0 7.6614056528546695457433049939650076449807425863572e-121\n0.49e2 0.15262925624847412109375e0 9.3387316510569269729588388217209165125692830551503e-116\n0.49e2 0.408089816570281982421875e0 2.9667037180399959712795194068438806052231435377161e-95\n0.49e2 0.6540834903717041015625e0 2.027595514156380296893790154872960085404285710906e-85\n0.49e2 0.1097540378570556640625e1 1.254665875782490153416445484836172524618855505355e-74\n0.49e2 0.30944411754608154296875e1 5.3112767401349998228922034188767491632135108874701e-53\n0.49e2 0.51139926910400390625e1 1.7184230106399633928374634149552055310832862291052e-42\n0.49e2 0.95070552825927734375e1 2.0188620523288691423046930654162370151184157582571e-29\n0.49e2 0.24750102996826171875e2 2.4486900820026561561243390823793236131043274568681e-08\n0.49e2 0.637722015380859375e2 4104203373731508351.8091124505391567563692298373867\n0.52e2 0.177219114266335964202880859375e-2 6.7582433736913603419058059256135791361735470637909e-223\n0.52e2 0.22177286446094512939453125e-2 6.2679264331526494370328882789831359414684776971336e-218\n0.52e2 0.7444499991834163665771484375e-2 4.1630106067711993660903358738294501375369753249879e-191\n0.52e2 0.1433600485324859619140625e-1 1.3602875417470081410985454428401245372759992414993e-176\n0.52e2 0.1760916970670223236083984375e-1 4.8806612177325115813521165986700318378662496250041e-172\n0.52e2 0.6152711808681488037109375e-1 2.5014882661113533293597761965233330461237158797651e-144\n0.52e2 0.11958599090576171875e0 1.3107541196311674615336229789222782210248645345988e-129\n0.52e2 0.15262925624847412109375e0 3.321788061274790179806750754248969443658942707425e-124\n0.52e2 0.408089816570281982421875e0 2.0169405302622672394567009913765725797440815303228e-102\n0.52e2 0.6540834903717041015625e0 5.6754178832405837953514458701036195191657065470066e-92\n0.52e2 0.1097540378570556640625e1 1.6588360861872987132698768619041215273305353601283e-80\n0.52e2 0.30944411754608154296875e1 1.5698207694417899021446502648229999500768660780745e-57\n0.52e2 0.51139926910400390625e1 2.2810052462334100092981477624289897510531514533963e-46\n0.52e2 0.95070552825927734375e1 1.6888264677784034501755356452466192541124575722402e-32\n0.52e2 0.24750102996826171875e2 3.1284554770212266533654823889614535495011507388997e-10\n0.52e2 0.637722015380859375e2 469912526052398293.17302112716282663456985359455793\n0.55e2 0.177219114266335964202880859375e-2 3.1593849990997961977974943812146816685612063609753e-237\n0.55e2 0.22177286446094512939453125e-2 5.7423035662670156701155774883438821586276792733737e-232\n0.55e2 0.7444499991834163665771484375e-2 1.4426173536899176398539280108006290466380469104659e-203\n0.55e2 0.1433600485324859619140625e-1 3.3662948625298628408893789499302767949884611521748e-188\n0.55e2 0.1760916970670223236083984375e-1 2.2383721988438966126895088423110749261179727739443e-183\n0.55e2 0.6152711808681488037109375e-1 4.8936711651864414231989567585154845915532624571577e-154\n0.55e2 0.11958599090576171875e0 1.8827710109688701937429883606767323358888834986806e-138\n0.55e2 0.15262925624847412109375e0 9.9201804930062867946547900039207204930607095294563e-133\n0.55e2 0.408089816570281982421875e0 1.1512714886725383721018856342861659745765144062983e-109\n0.55e2 0.6540834903717041015625e0 1.3337792351351849232556965484782506374204938471942e-98\n0.55e2 0.1097540378570556640625e1 1.8414497718532141402443858594087036395047321320979e-86\n0.55e2 0.30944411754608154296875e1 3.8967726654446097204350019896316737688338122273432e-62\n0.55e2 0.51139926910400390625e1 2.5442972422456580268434830211595319738276544262809e-50\n0.55e2 0.95070552825927734375e1 1.1896599721367974831559089457000349605850672303126e-35\n0.55e2 0.24750102996826171875e2 3.4154599781777805873676342450915281728506074263741e-12\n0.55e2 0.637722015380859375e2 48234457604444740.335143147971511893573254691716282\n0.58e2 0.177219114266335964202880859375e-2 1.2520413645388569928887958112848204212138063461708e-251\n0.58e2 0.22177286446094512939453125e-2 4.4595989634686150568429251044625228423529401458671e-246\n0.58e2 0.7444499991834163665771484375e-2 4.2378168989917621180007953130186366290981620423231e-216\n0.58e2 0.1433600485324859619140625e-1 7.0618906988802236107307134052564237747614610667347e-200\n0.58e2 0.1760916970670223236083984375e-1 8.702285916071814227807807229418309354595552484574e-195\n0.58e2 0.6152711808681488037109375e-1 8.1155609568253125349091276265266629388793969141888e-164\n0.58e2 0.11958599090576171875e0 2.2925633886147348167887929308708443895271449574002e-147\n0.58e2 0.15262925624847412109375e0 2.5113943794105648062440017015132938005891936086402e-141\n0.58e2 0.408089816570281982421875e0 5.5707269509534084668880316016301521365616605779226e-117\n```\n\n----------------------------------------\n\nTITLE: Defining Rayleigh Distribution Functions in LaTeX\nDESCRIPTION: This snippet defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Rayleigh distribution using LaTeX math notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rayleigh.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(r\\right) & = & re^{-r^{2}/2}\\\\\nF\\left(r\\right) & = & 1-e^{-r^{2}/2}\\\\\nG\\left(q\\right) & = & \\sqrt{-2\\log\\left(1-q\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Gauss Hypergeometric Distribution Constant\nDESCRIPTION: Mathematical formula defining the constant C used in the Gauss Hypergeometric Distribution calculation. Uses Beta function and hypergeometric function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gausshyper.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\text{Let }C=\\frac{1}{B\\left(\\alpha,\\beta\\right)\\,_{2}F_{1}\\left(\\gamma,\\alpha;\\alpha+\\beta;-z\\right)}\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy Build Dependencies on macOS with Homebrew\nDESCRIPTION: Commands to install necessary build dependencies for SciPy on macOS using Homebrew package manager.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gfortran openblas pkg-config\n```\n\n----------------------------------------\n\nTITLE: Git Branch Deletion Commands\nDESCRIPTION: Commands for deleting branches both locally and on GitHub remote repository.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout main\ngit branch -D my-unwanted-branch\ngit push origin :my-unwanted-branch\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Array with Exponential Values\nDESCRIPTION: Contains a structured matrix of high-precision floating-point numbers spanning extreme positive and negative exponential ranges. Useful for testing numerical precision and computational limits.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipeinc_neg_m.txt#2025-04-14_snippet_1\n\nLANGUAGE: numeric\nCODE:\n```\n9.999999999999999385e-152 -5.000000000000000000e+02 9.999999999999999385e-152\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of KSone Distribution\nDESCRIPTION: This code snippet indicates the location of the KSone distribution implementation in the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_ksone.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.ksone\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Folded Normal Distribution\nDESCRIPTION: This snippet indicates the location of the Folded Normal Distribution implementation in the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_foldnorm.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.foldnorm\n```\n\n----------------------------------------\n\nTITLE: User Section in .gitconfig\nDESCRIPTION: Example of the user section in a .gitconfig file after setting name and email with git config commands.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[user]\n      name = Your Name\n      email = you@yourdomain.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring ARPACK in Autotools project\nDESCRIPTION: This snippet demonstrates how to configure ARPACK in an Autotools project. It uses pkg-config to check for ARPACK modules and sets up the necessary compiler and linker flags.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nPKG_CHECK_MODULES([ARPACK], [arpack])\nAC_SUBST([ARPACK_CFLAGS])\nAC_SUBST([ARPACK_LIBS])\n```\n\n----------------------------------------\n\nTITLE: Calculating Statistical Moments for Relativistic Breit-Wigner Distribution in LaTeX\nDESCRIPTION: LaTeX equations defining the statistical moments (μ, μ2, μ3, μ4) for the Relativistic Breit-Wigner Distribution. The equations use the shape parameter ρ and previously defined variables.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rel_breitwigner.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n    \\mu & = & \\frac{k}{2\\rho} \\left[\\frac{\\pi}{2} + \\tan^{-1}\\left(\\rho\\right)\\right]\\\\\n    \\mu_2 & = & \\frac{k\\pi}{4} \\left[\\frac{1 - \\rho i}{\\sqrt{-1 - \\rho i}} + \\frac{1 + \\rho i}{\\sqrt{-1 + \\rho i}}\\right]\\\\\n    \\mu_3 & = & \\infty\\\\\n    \\mu_4 & = & \\infty\\\\\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Generating SciPy Class Documentation with Jinja2 and RST\nDESCRIPTION: Template that generates documentation for a SciPy class using a combination of RST directives and Jinja2 templating. It creates a documentation page with class title, methods (including selected special methods), and attributes while filtering private members. The template uses autosummary for generating separate pages for individual members.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/class.rst#2025-04-14_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n.. raw:: html\n\n   <div class=\"prename\">{{ module }}.</div>\n   <div class=\"empty\"></div>\n\n{{ name }}\n{{ underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n\n  {% block methods %}\n   .. HACK -- the point here is that we don't want this to appear in the output, but the autosummary should still generate the pages.\n      .. autosummary::\n         :toctree:\n      {% for item in all_methods %}\n         {%- if not item.startswith('_') or item in ['__call__', '__mul__', '__getitem__', '__len__', '__pow__'] %}\n         {{ name }}.{{ item }}\n         {%- endif -%}\n      {%- endfor %}\n      {% for item in inherited_members %}\n         {%- if item in ['__call__', '__mul__', '__getitem__', '__len__', '__pow__'] %}\n         {{ name }}.{{ item }}\n         {%- endif -%}\n      {%- endfor %}\n  {% endblock %}\n\n  {% block attributes %}\n  {% if attributes %}\n   .. HACK -- the point here is that we don't want this to appear in the output, but the autosummary should still generate the pages.\n      .. autosummary::\n         :toctree:\n      {% for item in all_attributes %}\n         {%- if not item.startswith('_') %}\n         {{ name }}.{{ item }}\n         {%- endif -%}\n      {%- endfor %}\n  {% endif %}\n  {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Executing Symmetric Rank-K Update in C\nDESCRIPTION: This function declaration serves symmetric rank-k updates using complex operations within the C language sphere. Dependent on transposition status, the routine modifies matrix components following BLAS norms, leveraging complex factors for alterations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid zsyrk(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *beta, z *c, int *ldc)\n```\n\n----------------------------------------\n\nTITLE: Referencing Poisson Distribution Implementation in SciPy\nDESCRIPTION: Python module path for the Poisson distribution implementation in SciPy's stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_poisson.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.poisson\n```\n\n----------------------------------------\n\nTITLE: Compiling SciPy with FlexiBLAS\nDESCRIPTION: Commands for building SciPy against FlexiBLAS and running tests with different BLAS backends (OpenBLAS and NETLIB).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/debugging_linalg_issues.rst#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ export PKG_CONFIG_PATH=$PWD/flexiblas-setup/built-libs/lib/pkgconfig/\n$ cd scipy\n$ python dev.py build -C-Dblas=flexiblas -C-Dlapack=flexiblas\n$ FLEXIBLAS=OpenBLAS python dev.py test -s linalg\n$ FLEXIBLAS=NETLIB python dev.py test -s linalg\n```\n\n----------------------------------------\n\nTITLE: Defining Beta-Negative Binomial Distribution Probability Mass Function in LaTeX\nDESCRIPTION: This LaTeX equation defines the probability mass function for the beta-negative binomial distribution, which is a negative binomial distribution with a probability of success following a beta distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_betanbinom.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nf(k; n, a, b) = \\binom{n + k - 1}{k} \\frac{B(a + n, b + k)}{B(a, b)}\n```\n\n----------------------------------------\n\nTITLE: Git Interactive Rebase Example\nDESCRIPTION: Example of Git commit history and interactive rebase command for modifying commit history.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline\n\ngit branch tmp HEAD\ngit rebase -i 6ad92e5\n```\n\n----------------------------------------\n\nTITLE: Floating Point Computation Results\nDESCRIPTION: Table of numeric values showing three columns: input value, probability approaching 1, and error term in scientific notation. Values demonstrate high-precision calculations with extremely small error margins.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/erf_data_ipp/erf_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n6.65176868438720703125\t0.9999999999999999999948960492295407549616\t0.5103950770459245038373864424994355232744e-20\n6.67388629913330078125\t0.9999999999999999999962112561597774386166\t0.3788743840222561383427898405609521135209e-20\n6.675098419189453125\t0.9999999999999999999962727294431245722943\t0.3727270556875427705686833997971476711389e-20\n6.73399639129638671875\t0.9999999999999999999983224938408648373451\t0.1677506159135162654937097106857586013789e-20\n6.774074554443359375\t0.9999999999999999999990294388848823039468\t0.9705611151176960532165924022124182051181e-21\n6.839885711669921875\t0.9999999999999999999996075324506377418898\t0.3924675493622581101992853509398975667702e-21\n6.86166667938232421875\t0.9999999999999999999997097026235625653255\t0.2902973764374346745366897115310349140629e-21\n6.86821842193603515625\t0.9999999999999999999997349241430742071849\t0.2650758569257928151403169457718795390422e-21\n6.87017536163330078125\t0.9999999999999999999997420278370314862565\t0.2579721629685137435110698159577792881e-21\n6.9438915252685546875\t0.999999999999999999999907789706111134148\t0.9221029388886585196730336935045033388208e-22\n6.94417095184326171875\t0.9999999999999999999999081504757103419795\t0.9184952428965802049788611864563591946226e-22\n7.02402496337890625\t0.999999999999999999999970229303356580071\t0.2977069664341992903453738993900401285503e-22\n7.04118442535400390625\t0.9999999999999999999999766690647347813976\t0.2333093526521860243876854475410979262103e-22\n7.0728092193603515625\t0.9999999999999999999999851346580378971058\t0.1486534196210289422461831541803890066821e-22\n7.11659526824951171875\t0.9999999999999999999999920618538775044464\t0.7938146122495553642615968497016709781571e-23\n7.18280124664306640625\t0.9999999999999999999999969477254268593726\t0.3052274573140627399432973240733715500213e-23\n7.20355319976806640625\t0.9999999999999999999999977419301284355623\t0.2258069871564437709331260570315365949665e-23\n7.27909374237060546875\t0.9999999999999999999999992515556916792261\t0.7484443083207738734503483608935021035732e-24\n7.28028106689453125\t0.9999999999999999999999992645004451770347\t0.7354995548229653146869970523781527988642e-24\n7.298152923583984375\t0.9999999999999999999999994345631928770567\t0.5654368071229432894992332067407147179749e-24\n7.31467151641845703125\t0.9999999999999999999999995568116259996168\t0.4431883740003831823890539135951501761503e-24\n7.32010936737060546875\t0.9999999999999999999999995910130381669911\t0.4089869618330089157685151201949087925479e-24\n7.34866237640380859375\t0.9999999999999999999999997319906448357093\t0.268009355164290673339087031887057715089e-24\n7.351879119873046875\t0.9999999999999999999999997444791197223142\t0.2555208802776857586959896180952785091403e-24\n7.35590362548828125\t0.9999999999999999999999997592943074733691\t0.2407056925266308623391590746789683246709e-24\n7.390369415283203125\t0.9999999999999999999999998558663763263787\t0.1441336236736213391389793807586759175995e-24\n7.43821620941162109375\t0.9999999999999999999999999295502581038212\t0.7044974189617879705218727765406635153304e-25\n7.43946170806884765625\t0.9999999999999999999999999308550578406467\t0.6914494215935333790398074475111218230458e-25\n7.48311901092529296875\t0.999999999999999999999999964163218913179\t0.3583678108682102561152351850893798856277e-25\n7.49824619293212890625\t0.9999999999999999999999999714868908856129\t0.2851310911438713788012919629820992423858e-25\n7.50188446044921875\t0.9999999999999999999999999730141507157818\t0.2698584928421822020035304290073321597406e-25\n7.52948474884033203125\t0.9999999999999999999999999822420651220879\t0.1775793487791212989839150755243583008096e-25\n7.6320323944091796875\t0.9999999999999999999999999962984458271673\t0.3701554172832712513006017529906907914499e-26\n7.6759738922119140625\t0.9999999999999999999999999981215459672183\t0.1878454032781689292876320094611621328422e-26\n7.67881011962890625\t0.999999999999999999999999998202249704333\t0.1797750295667047232713633441478606640198e-26\n7.69775485992431640625\t0.9999999999999999999999999986598159749852\t0.1340184025014838921678286365792744470017e-26\n7.70757007598876953125\t0.9999999999999999999999999988493273258458\t0.1150672674154231530685408186230565876878e-26\n7.71776866912841796875\t0.9999999999999999999999999990181051135537\t0.9818948864462603043818495768683861311821e-27\n7.79935359954833984375\t0.9999999999999999999999999997259876414039\t0.2740123585961319556857387807076098785701e-27\n7.81407070159912109375\t0.9999999999999999999999999997826446873284\t0.2173553126715507615629930753265485721298e-27\n7.81634521484375\t0.9999999999999999999999999997902963473516\t0.209703652648431358354620963217352346183e-27\n7.84175968170166015625\t0.9999999999999999999999999998595912638039\t0.1404087361960659424532579514219630734144e-27\n7.88610076904296875\t0.9999999999999999999999999999304798650663\t0.6952013493370366965787168537834557597352e-28\n7.89655590057373046875\t0.9999999999999999999999999999411317291543\t0.5886827084565561878281328421149862522402e-28\n7.9050960540771484375\t0.9999999999999999999999999999486179207741\t0.513820792259039401977061154556515432295e-28\n7.93815517425537109375\t0.9999999999999999999999999999696918627742\t0.3030813722580726383815315462367670870671e-28\n7.94338130950927734375\t0.9999999999999999999999999999721239170155\t0.2787608298449905464917225531595312562447e-28\n```\n\n----------------------------------------\n\nTITLE: Parsing Scientific Notation Array in SciPy\nDESCRIPTION: Raw numerical data array containing floating-point values in scientific notation, potentially representing measurements or computational results\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-minkowski-5.8-ml-iris.txt#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = [1.6003257e+00, 1.8055799e+00, 2.6186105e+00, ...]\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data Series in Plain Text Format\nDESCRIPTION: This snippet represents a series of numerical data points, likely used for scientific computations or statistical analysis. Each row contains four values: an integer followed by three floating-point numbers with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/expint_data_ipp/expint_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n4.0 41.75042724609375 0.1615935374358658141804207943438980975221e-19\n4.0 45.2895965576171875 0.4354247531364385282370412155870874729459e-21\n4.0 45.668792724609375 0.2957274440624241525072833419407257387539e-21\n4.0 47.858348846435546875 0.3170947177760355601485650998388087912794e-22\n4.0 47.87534332275390625 0.3116489715084099173766429135693287485266e-22\n4.0 48.244426727294921875 0.2139376242389394458999839246288275641137e-22\n4.0 48.384746551513671875 0.1854295393926703202670956819914488568622e-22\n4.0 48.443389892578125 0.174671955504090738764275756221740743455e-22\n4.0 48.52964019775390625 0.1599740374459969657648642493512931194803e-22\n4.0 49.055484771728515625 0.9361391551875898787221295676691672132525e-23\n4.0 49.64406585693359375 0.5139473709544630951148677282719575763748e-23\n4.0 49.82306671142578125 0.4282811786803278372908574260865777286634e-23\n5.0 4.8770198822021484375 0.0008090099158837604898906936888172388751649\n5.0 5.4930877685546875 0.0004090148087274417520210910367930574632313\n5.0 6.349340915679931640625 0.0001596389799134654726048507249519588776058\n5.0 6.77385044097900390625 0.0001003976005697357306099687053412443350271\n5.0 7.88065433502197265625 0.3017511711201068675323251838790425251912e-4\n5.0 9.41909885406494140625 0.5755497931771290268976871171255759126799e-5\n5.0 11.0517024993896484375 0.1006053298509497058503916645425268119171e-5\n5.0 13.9249114990234375 0.4798668245971076657773285946381030737721e-7\n5.0 14.85147190093994140625 0.1809063660501308306218204407082442296202e-7\n5.0 15.408351898193359375 0.1007664337382455817496374808860947701339e-7\n5.0 24.2687816619873046875 0.9912996399303635030211567487381874151188e-12\n5.0 27.344074249267578125 0.413812224152640511180438734072676845548e-13\n5.0 27.3610286712646484375 0.4066403540989839067091010057150891911274e-13\n5.0 31.6179637908935546875 0.5085678835892274087033816768547012468732e-15\n5.0 36.2919464111328125 0.4206942689817309025544789131663973839276e-17\n5.0 39.905292510986328125 0.1042537738296296350851694256912033892379e-18\n5.0 40.0140228271484375 0.9328580852684247661187048971353424866528e-19\n5.0 40.73618316650390625 0.4459039932480738037635819257031348159139e-19\n5.0 41.75042724609375 0.1581950021119483213567408998546386668924e-19\n5.0 45.2895965576171875 0.426903850637282175635462701543149151497e-21\n5.0 45.668792724609375 0.2899830805886899237442395328381068498603e-21\n5.0 47.858348846435546875 0.3111874025775910046211199125133714641959e-22\n5.0 47.87534332275390625 0.3058449513568358624138910176459503465317e-22\n5.0 48.244426727294921875 0.2099806264053531888235698164244622236054e-22\n5.0 48.384746551513671875 0.1820087347821574367342909711932944943553e-22\n5.0 48.443389892578125 0.1714531002781132518744429689826974525516e-22\n5.0 48.52964019775390625 0.1570307285506838698965558322141851465732e-22\n5.0 49.055484771728515625 0.9190809984386788861150467416642680647729e-23\n5.0 49.64406585693359375 0.5046819941160360787508621437875688569605e-23\n5.0 49.82306671142578125 0.4205850918879917541477872491941196557143e-23\n6.0 4.8770198822021484375 0.0007348260696185603834576913795732830946188\n6.0 5.4930877685546875 0.0003736727523362997115423331115314041736243\n6.0 6.349340915679931640625 0.0001468592924955514085008699771716334763077\n6.0 6.77385044097900390625 0.9264113727703907498810521319589432008524e-4\n6.0 7.88065433502197265625 0.28037195824388660507364001550852931132e-4\n6.0 9.41909885406494140625 0.5389503721106544299725590289899716358093e-5\n6.0 11.0517024993896484375 0.9483045253572759542643841519439208738077e-6\n6.0 13.9249114990234375 0.4563212942767922383568892226977484369735e-7\n6.0 14.85147190093994140625 0.1724249388468742485070009339855517672302e-7\n6.0 15.408351898193359375 0.961650900437351762462998197265812727899e-8\n6.0 24.2687816619873046875 0.9592201336355552215113302343198083359039e-12\n6.0 27.344074249267578125 0.4016444019211161545069669310213329133391e-13\n6.0 27.3610286712646484375 0.3946894296187605365329974057241992827116e-13\n6.0 31.6179637908935546875 0.4952958758365725195977362410738659041004e-15\n6.0 36.2919464111328125 0.410916215654303867381557364216942618476e-17\n6.0 39.905292510986328125 0.102019340191376681036289748145846671601e-18\n6.0 40.0140228271484375 0.9129111959353282162991858049143100584685e-19\n6.0 40.73618316650390625 0.4365151376049397264131977020034384480739e-19\n6.0 41.75042724609375 0.1549340620464580451910710810475113689206e-19\n6.0 45.2895965576171875 0.4187047278085423878484354259906816989868e-21\n6.0 45.668792724609375 0.2844540934343090556224423112487667406125e-21\n6.0 47.858348846435546875 0.3054927923646748372361382966477651827852e-22\n6.0 47.87534332275390625 0.3002498525672266993544813274392433518577e-22\n6.0 48.244426727294921875 0.2061651195327859359343954291567220346365e-22\n6.0 48.384746551513671875 0.1787099406421090115820784217033364291398e-22\n6.0 48.443389892578125 0.1683489319664486144787556546890061473259e-22\n6.0 48.52964019775390625 0.1541921271766257081418510492458292442443e-22\n6.0 49.055484771728515625 0.9026240284769353493713425968649129066268e-23\n6.0 49.64406585693359375 0.4957397908840644569470963403107248313978e-23\n6.0 49.82306671142578125 0.4131566026446901080030652650689496425855e-23\n7.0 4.8770198822021484375 0.000672654406877735071613495945523560886399\n7.0 5.4930877685546875 0.0003437501298932084867867588635538212982312\n7.0 6.349340915679931640625 0.000135906509114986471251070773622260655741\n7.0 6.77385044097900390625 0.8595780144681101204557488646971712080142e-4\n7.0 7.88065433502197265625 0.2617236629752959688705833116147043117834e-4\n7.0 9.41909885406494140625 0.5065809042633238835753956297942265273201e-5\n7.0 11.0517024993896484375 0.8966241478949112626121344025734282320534e-6\n7.0 13.9249114990234375 0.4349126495486544147908841040472484927904e-7\n7.0 14.85147190093994140625 0.164681062003900667485954190660709846632e-7\n7.0 15.408351898193359375 0.9195409551137088883175538637234982868042e-8\n7.0 24.2687816619873046875 0.9291052003784709393851340415426372089189e-12\n7.0 27.344074249267578125 0.3901566406927119154873751482668394384255e-13\n7.0 27.3610286712646484375 0.3834061225742188133379959269343567423503e-13\n7.0 31.6179637908935546875 0.4826855399564605704728941991994489876831e-15\n7.0 36.2919464111328125 0.4015742776059500302706027828290570718399e-17\n7.0 39.905292510986328125 0.9987707148129249110240601256898576971756e-19\n7.0 40.0140228271484375 0.8937852107969616831590817049966824780776e-19\n7.0 40.73618316650390625 0.427506971871212040057762539714930618251e-19\n7.0 41.75042724609375 0.1518026585317356982436234552655098583916e-19\n7.0 45.2895965576171875 0.410809767347114321495216852642389100271e-21\n7.0 45.668792724609375 0.2791287725836654932441581494797041970242e-21\n7.0 47.858348846435546875 0.2999997673229317882545079929955475412819e-22\n7.0 47.87534332275390625 0.2948527563855661673975965369306222271872e-22\n7.0 48.244426727294921875 0.2024837565674984524173938073554829880431e-22\n7.0 48.384746551513671875 0.1755268369337344342563412666014302719106e-22\n7.0 48.443389892578125 0.1653535159410665117678405729311741600246e-22\n7.0 48.52964019775390625 0.1514528232051701632889109286081357834452e-22\n7.0 49.055484771728515625 0.8867374636219634043254094014032434056758e-23\n7.0 49.64406585693359375 0.4871043800957343178888925440753637022755e-23\n7.0 49.82306671142578125 0.4059821880595962128692583716639890264267e-23\n8.0 4.8770198822021484375 0.0006198769823661402847305430993636049506996\n8.0 5.4930877685546875 0.0003181240529577821868814198623479992301558\n8.0 6.349340915679931640625 0.0001264260014783884204820485788410880220829\n8.0 6.77385044097900390625 0.8014553229166674480308998966783856640274e-4\n8.0 7.88065433502197265625 0.2453289638287091931913016952787382575977e-4\n8.0 9.41909885406494140625 0.477768091869632345248951312424622728446e-5\n8.0 11.0517024993896484375 0.85012872059138341359756571809829071518e-6\n8.0 13.9249114990234375 0.4153699114921829088696026023875036052235e-7\n8.0 14.85147190093994140625 0.1575849059087379494831122227451689174666e-7\n8.0 15.408351898193359375 0.8808700838060892266753598951427174682875e-8\n8.0 24.2687816619873046875 0.9007834203217606107821219220771743610314e-12\n8.0 27.344074249267578125 0.379294577163373475153179380847014022067e-13\n8.0 27.3610286712646484375 0.3727370889996716217144753509442193190963e-13\n8.0 31.6179637908935546875 0.4706894832838784051642237906881336922796e-15\n8.0 36.2919464111328125 0.3926403972375257558525214885356744784999e-17\n8.0 39.905292510986328125 0.9782146977154255893321823022709627348926e-19\n8.0 40.0140228271484375 0.8754312672428671889906348507861882703206e-19\n8.0 40.73618316650390625 0.4188571600786610466716060294091025573922e-19\n8.0 41.75042724609375 0.1487933408299988278087183196037528981243e-19\n8.0 45.2895965576171875 0.4032025968884431835849977422771423043559e-21\n8.0 45.668792724609375 0.2739962299460106127310190971865563645926e-21\n8.0 47.858348846435546875 0.2946979589439336784966862865004208582052e-22\n8.0 47.87534332275390625 0.2896434815651884509173994398863766973769e-22\n8.0 48.244426727294921875 0.198929683605768553142692284345115226018e-22\n8.0 48.384746551513671875 0.1724535268256134023522559201136187880287e-22\n8.0 48.443389892578125 0.1624613145792087093429095622020720610363e-22\n8.0 48.52964019775390625 0.1488077679082909868874250086633770624366e-22\n8.0 49.055484771728515625 0.8713925602928477300728434421107655182561e-23\n8.0 49.64406585693359375 0.4787604546359917389355899903701464191616e-23\n8.0 49.82306671142578125 0.3990492092637337902680155516469134417287e-23\n9.0 4.8770198822021484375 0.000574566928154681597771226077492170189848\n9.0 5.4930877685546875 0.0002959543325593133633244469421977219738564\n9.0 6.349340915679931640625 0.0001181471231733983744553312302134841666211\n9.0 6.77385044097900390625 0.7504877100266623384408455718528952916062e-4\n9.0 7.88065433502197265625 0.2308129629627368077047981532497252774647e-4\n9.0 9.41909885406494140625 0.4519709214109043158472039614663564501329e-5\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Dataset\nDESCRIPTION: Structured numerical data in scientific notation format with three columns. Each row contains values with high precision floating point numbers, suggesting computational or analytical results.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_e2_data_ipp/ellint_e2_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.177219114266335964202880859375e-2\t-0.804919183254241943359375e0\t0.17721905416489978459933452744691987573693030723399e-2\n0.177219114266335964202880859375e-2\t-0.74602639675140380859375e0\t0.17721906263793616232304803862551613935165980878975e-2\n0.177219114266335964202880859375e-2\t-0.72904598712921142578125e0\t0.17721906496143189532808590572077500756745196250994e-2\n```\n\n----------------------------------------\n\nTITLE: Processing Numerical Data in Plaintext Format\nDESCRIPTION: This snippet shows a series of numerical calculations with seven columns of data. The first two columns appear to be input parameters, while the remaining five columns are likely calculated results or probabilities. The data suggests high-precision calculations, possibly related to statistical or physical models.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n17.0 25.0 0.632396042346954345703125 0.3875161134822392363264510132203724015409e-12 0.5416166833999327218269840043137238737227e-15 0.9986042883795440739995473383335659413325 0.001395711620455926000452661666434058667451\n17.0 25.0 0.81474220752716064453125 0.3880577293002868033474262095290670830119e-12 0.8653523657008517876956190424026418709787e-21 0.9999999977700421910639856878750000401766 0.2229957808936014312124999959823426791235e-8\n17.0 25.0 0.8350250720977783203125 0.3880577300964208773979263728082734821661e-12 0.6921829165035162441641264324850951527341e-22 0.9999999998216288807832628912014174353462 0.1783711192167371087985825646538207568632e-9\n17.0 25.0 0.905801355838775634765625 0.388057730165638972154206999403000934154e-12 0.1968940709978216851912606030005141820729e-27 0.9999999999999994926165472498663750651681 0.5073834527501336249348318555685731073304e-15\n17.0 25.0 0.913384497165679931640625 0.3880577301656391416096176900781384745912e-12 0.2743866030714654765082337042105642323807e-28 0.9999999999999999292923238626516035897591 0.7070767613734839641024088653989350616353e-16\n17.0 25.0 0.9688708782196044921875 0.388057730165639169048277996699707178075e-12 0.5249789473396122787512390343100361600527e-39 0.9999999999999999999999999986471627633457 0.1352837236654271628642101444763991444219e-26\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density Function for Normal Inverse Gaussian Distribution in LaTeX\nDESCRIPTION: This LaTeX equation defines the probability density function for the Normal Inverse Gaussian Distribution. It uses parameters a and b, where a represents tail heaviness and b represents asymmetry, with constraints a > 0 and |b| ≤ a.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_norminvgauss.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n        f(x; a, b) = \\frac{a \\exp\\left(\\sqrt{a^2 - b^2} + b x \\right)}{\\pi \\sqrt{1 + x^2}} \\, K_1\\left(a * \\sqrt{1 + x^2}\\right),\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Double Gamma Moment Generating Function\nDESCRIPTION: Moment generating function formula for the double gamma distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dgamma.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nM(t) = 1/(2(1-t)^a) + 1/(2(1+t)^a)\n```\n\n----------------------------------------\n\nTITLE: Running Python with Deprecation Warnings\nDESCRIPTION: Command to run Python code with deprecation warnings enabled to check for use of deprecated SciPy functionality.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.8.0-notes.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -Wd\n```\n\n----------------------------------------\n\nTITLE: Using make with MinGW for Qhull compilation\nDESCRIPTION: Simple make commands to compile Qhull using MinGW. Shows how to get help and execute the basic compilation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/qhull_src/README.txt#2025-04-14_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmake help\nmake\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Copyright Notice Template\nDESCRIPTION: Template for displaying copyright and warranty information in interactive programs.\nSOURCE: https://github.com/scipy/scipy/blob/main/tools/wheels/LICENSE_linux.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Maxwell Distribution Core Functions\nDESCRIPTION: Mathematical definition of the probability density function (f), cumulative distribution function (F), and inverse CDF (G) for the Maxwell distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_maxwell.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\sqrt{\\frac{2}{\\pi}}x^{2}e^{-x^{2}/2}\\\\ F\\left(x\\right) & = & \\frac{\\gamma\\left(\\frac{3}{2},\\frac{x^2}{2}\\right)}{\\Gamma(\\frac{3}{2})}\\\\ G\\left(q\\right) & = & \\sqrt{2\\gamma^{-1}\\left(\\frac{3}{2},q\\Gamma(\\frac{3}{2})\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Results in Tabular Format\nDESCRIPTION: This snippet shows a table of numerical results, likely from a scientific computation or statistical analysis. Each row contains six columns of floating-point numbers with varying precision, representing different aspects of the calculation or simulation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n4.0533123016357421875\t2.02665615081787109375\t5.514707456930929301459079955313869438197604073116501578585214366340025188854030716468633857798384298\t0.8592385219195666661138078362450122638220024524868804909958062167776733168925557829786689630134192895\t0.9034259440377497636833413094105611816467198727413520450820086834631330307419832235316748635797245696\t0.1407614780804333338861921637549877361779975475131195090041937832223266831074442170213310369865807105\n4.0533123016357421875\t3.647981166839599609375\t3.31312004338382642184449230231977509243273512126776674881440136854727850356190389201660465913190857\t0.516212399524725097994684175184876436874372793206907921261581372871952489632052496592045138421516394\t3.105013357584852643297928962404655527411588824590086874852821681255879716034110047983704062246200297\t0.483787600475274902005315824815123563125627206793092078738418627128047510367947503407954861578483606\n4.0533123016357421875\t4.0533123016357421875\t2.784885343934578513149804339717137368299390408067016796848041900953216841366437030241554499406837817\t0.4339089217924731861183993826512701012093309775829357321262802724234704087971362274687905192149369188\t3.633248057034100551992616925007293251544933537790836826819181148849941378229576909758754221971271051\t0.5660910782075268138816006173487298987906690224170642678737197275765295912028637725312094807850630812\n4.0533123016357421875\t4.458643436431884765625\t2.306553712479142633820833960152698687620756933527776352577981760649736926199934255571033388056820818\t0.3593807682668325353265411226551952864628632629455109728805051026664326234974500588222530217351917741\t4.11157968848953643132158730457173193222356701233007727108924128915342129339607968442927533332128805\t0.6406192317331674646734588773448047135371367370544890271194948973335673765025499411777469782648082259\n4.0533123016357421875\t8.106624603271484375\t0.2666208775089865235658723894506298859889618919139046778832877954885433336210504108700118485172825721\t0.04154180987711253275131159150161436117019650310762690095170282803753763611183019192983825306101724165\t6.151512523459692541576548875273800733855362053943948945783935254314614885974963388715345260029002709\t0.9584581901228874672486884084983856388298034968923730990482971719624623638881698080701617469389827584\n4.0533123016357421875 405.33123779296875 0.856277210194896595630413928210981825918823933239296642465635762524914381120581031266134384044083328e-168 0.1334153026588166560974220666148576952626885376443753701545306845816344804832677337563827322024911951e-168 6.418133400968679065142421264724430619844323945857853623667223049803158219596013940000308721378108868 1.0\n4.125904560089111328125\t0.0412590466439723968505859375\t7.043701108728780223687961843391756553125884985884330252942520360436988162021941273534800312450456719\t0.9999999354299987690775889622689157338228537326556764531411371319964512403841325237126723152152525859\t0.4548118186280665790814208397404344920716063177183303025540785365853082955621661932085259124362671874e-6\t0.6457000123092241103773108426617714626734432354685886286800354875961586747628732768478474741412221914e-7\n4.125904560089111328125\t2.0629522800445556640625\t6.072072191835942345003502395331628487796947075384854346503939861579817399707683543874382853055509126\t0.8620569933379949084958144772211332547216342276449289652619682285641417368272372653640214768414358773\t0.9716293717046565067510385294809678057634299821057936247688830529357073476225532918266106679208600285\t0.1379430066620050915041855227788667452783657723550710347380317714358582631727627346359785231585641227\n4.125904560089111328125\t3.713314056396484375\t3.645460819462813679506809267954671376912867065616234453478114473126983778850729102493984996098169322\t0.517549016887986978339058286692363497387152223601701127971415378456062142503029155666791422528985886\t3.398240744077785172247731656857924916647509991874413517794708441388540968479507733207008524878199833\t0.482450983112013021660941713307636502612847776398298872028584621543937857496970844333208577471014114\n4.125904560089111328125\t4.125904560089111328125\t3.060437018394927204205753747690008049935223919046361115453354046814747587291189903564916268552459642\t0.4344927153410745578456098812651452153289051685042500852197589537423872535948793029632960570229939795\t3.983264545145671647548787177122588243625153138444286855819468867700777160039046932136077252423909513\t0.5655072846589254421543901187348547846710948314957499147802410462576127464051206970367039429770060205\n4.125904560089111328125\t4.53849506378173828125\t2.53067166889025350190244243571991561404324655614760134290664128572613080628587924183262210511980194\t0.3592815007934807835237693104942265218080115344798406819595849604339747790292814616129198747747177498\t4.513029894650345349852098489092680679517130501343046628366181628789393941044357593868371415856567215\t0.6407184992065192164762306895057734781919884655201593180404150395660252209707185383870801252252822502\n4.125904560089111328125\t8.25180912017822265625\t0.2847671704591532210212992508182019504542348463951231766726582961911245322997866584102488204616215587\t0.04042862518951068067360068919978890036257988112029108744002473477277769872227048076109444781316316523\t6.758934393081445630733241673994394343106142211095524794600164618324400215030449999868027066943372826\t0.9595713748104893193263993108002110996374201188797089125599752652272223012777295192389055521868368348\n4.125904560089111328125 412.5904541015625 0.9849192524234776299068794846278154032022691748510917397291620486958650212318203702782351817912528128e-171 0.1398297817615652167353884353734910667012437119857548398337840556682567999355250879796445061410496292e-171 7.043701563540598851754540924812596293560377057490647971272822914515524747330236835700993520976369155 1.0\n5.0940532684326171875\t0.0509405322372913360595703125\t27.67920294027928923880958239390404343442040936899815307478598799340574231811557367409116092396038856\t0.9999999982379693902044640226314365343521271029087308730060359246592570889283931854443539268908129371\t0.4877160292145176564781609346656380162653242308676730589954979956027538802650302642256952953547903483e-7\t0.1762030609795535977368563465647872897091269126993964075340742911071606814555646073109187062913416189e-8\n5.0940532684326171875\t2.54702663421630859375\t24.74117379934670885485935851992100343082362193634847845591339750099791646326335667650716993806822169\t0.8938542706281541291842093703813781663719803706713169378020847920356047543953828832584130123038596963\t2.938029189704183305401989521799133470160589059182097705639896391957625415127605024087017408461696412\t0.1061457293718458708157906296186218336280196293286830621979152079643952456046171167415869876961403037\n5.0940532684326171875\t4.58464813232421875\t14.7675729987104578095439138929485472282856177526532559945486889320051407963321233374742042261580975\t0.533525947425295841907088598191442498030625003421091351895084173752215277026432917855884840150812328\t12.9116299903404343507174341487715896726985932428773201670046049609504010820588383631199831203718206\t0.466474052574704158092911401808557501969374996578908648104915826247784722973567082144115159849187672\n5.0940532684326171875\t5.0940532684326171875\t12.2077823592235985003120696793331736918834158602172392466220471092575502398077890469114806062483926\t0.4410452990302015213950895634100686065935382954619870959119191902708416268312625047813299941800307603\t15.4714206298272936599492783623869632091007951353133369149312467836979916385831726536827067402815255\t0.5589547009697984786049104365899313934064617045380129040880808097291583731687374952186700058199692397\n5.0940532684326171875\t5.603458404541015625\t9.889218349233061197877388817321731640408509396976489163081870258238303847158703369099418745543914618\t0.3572797364557409966350802086721683228140681945237226616673898786823074886738611252458152925379220831\t17.78998463981783096238395922439840526057570159855408699847142363471723803123225833149476860098600348\t0.6427202635442590033649197913278316771859318054762773383326101213176925113261388747541847074620779169\n5.0940532684326171875\t10.188106536865234375\t0.7822639090209128469017740014404389278213317993585533146649871947711294107004337683013750571158629812\t0.02826179313509692702070705503881066214744470133414852372658706264644174732638031855325556636515647396\t26.89693908002997931335957404027969797316287919617202284688830669818441246769052793229281228941405512\t0.971738206864903072979292944961189337852555298665851476273412937353558252673619681446744433634843526\n5.0940532684326171875 509.40533447265625 0.7152104781583126172577145380526976040514099585854760760296929839567558638220447646872943192480272666e-210 0.2583927284471411991649181400315680779298102709841549255602666891812445052621672738125161953683807107e-211 27.6792029890508921602613480417201369009842109955305761615532938929555418783909617005941873465299181 1.0\n5.596034526824951171875\t0.0559603460133075714111328125\t61.15722298035936537017631415308397274094789448016853597795214965840284033719264656727655832204443666\t0.9999999997257414964174877578408388041720660119221931882256703080064742903832273083681210101174925492\t0.1677288846245549632144093838722156507107886394056152268018954428714206090657606391814637409180190668e-7\t0.2742585035825122421591611958279339880778068117743296919935257096167726916318789898825074508024511567e-9\n5.596034526824951171875\t2.7980172634124755859375\t55.46393259928605398529060926253574732815503627091789196500276832668377548368528636291175384881761946\t0.9069073100635526558798059992027420822892194195122167747431420995473747342347831577133123881324620939\t5.693290397846199847341201211989163800014423280329507953510904011908609140649421110940868391373191292\t0.09309268993644734412019400079725791771078058048778322525685790045262526576521684228668761186753790609\n```\n\n----------------------------------------\n\nTITLE: Raw Moments Expression in LaTeX\nDESCRIPTION: Definition of raw moments for the hyperbolic secant distribution, including special cases for odd and even n.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu_{n}^{\\prime} & = & \\frac{1+\\left(-1\\right)^{n}}{2\\pi2^{2n}}n!\\left[\\zeta\\left(n+1,\\frac{1}{4}\\right)-\\zeta\\left(n+1,\\frac{3}{4}\\right)\\right]\\\\ & = & \\left\\{ \\begin{array}{cc} 0 & n \\text{ odd}\\\\ C_{n/2}\\frac{\\pi^{n}}{2^{n}} & n \\text{ even} \\end{array} \\right.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Moment Generating Function of Binomial Distribution in LaTeX\nDESCRIPTION: This LaTeX snippet defines the moment generating function of the binomial distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_binom.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nM\\left(t\\right)=\\left[1-p\\left(1-e^{t}\\right)\\right]^{n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Directives\nDESCRIPTION: reStructuredText directives for setting up module context and generating attribute documentation\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/attribute.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n.. currentmodule:: {{ module }}\n\n.. autoattribute:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Cloning ARPACK-NG Repository via SSH\nDESCRIPTION: Alternative command to clone the ARPACK-NG source code repository from GitHub using SSH protocol.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:opencollab/arpack-ng.git\n$ cd ./arpack-ng\n```\n\n----------------------------------------\n\nTITLE: Example .gitconfig File Structure\nDESCRIPTION: A sample .gitconfig file showing common configurations including user information, aliases for common commands, editor preference, and merge settings.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[user]\n        name = Your Name\n        email = you@yourdomain.example.com\n\n[alias]\n        ci = commit -a\n        co = checkout\n        st = status -a\n        stat = status -a\n        br = branch\n        wdiff = diff --color-words\n\n[core]\n        editor = vim\n\n[merge]\n        summary = true\n```\n\n----------------------------------------\n\nTITLE: Enabling ISO_C_BINDING with CMake\nDESCRIPTION: Command to enable ISO_C_BINDING support in ARPACK-NG using CMake, which provides interoperability between Fortran and C/C++.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ cmake -D ICB=ON\n```\n\n----------------------------------------\n\nTITLE: Hermitian Packed Matrix-Vector Product in C\nDESCRIPTION: In this function declaration, a packed Hermitian matrix is used to perform a matrix-vector operation within a C environment. It structures parameters for complex matrix storage, vector increment pacing, and operation scaling for both the input and the resultant vectors.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nvoid zhpmv(char *uplo, int *n, z *alpha, z *ap, z *x, int *incx, z *beta, z *y, int *incy)\n```\n\n----------------------------------------\n\nTITLE: Manual Conditional Expected Value Calculation with Old API\nDESCRIPTION: Shows how to manually compute a conditional expected value by explicitly dividing an integral by the probability mass in the interval.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef f(x): return x**4 * stats.norm.pdf(x)\nprob = stats.norm.cdf(b) - stats.norm.cdf(a)\nintegrate.quad(f, a=a, b=b)[0] / prob\n```\n\n----------------------------------------\n\nTITLE: Updating Local Main and Creating Feature Branch\nDESCRIPTION: Alternative commands to update local main branch and create a new feature branch.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout main\ngit rebase upstream/main\ngit checkout -b my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Matrix in Scientific Notation\nDESCRIPTION: A 50x4 matrix of floating-point numbers in scientific notation. Each row contains 4 values, possibly representing different attributes or measurements. The data is formatted with high precision, using 15 decimal places.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n6.299999999999999822e+00 3.299999999999999822e+00 6.000000000000000000e+00 2.500000000000000000e+00\n5.799999999999999822e+00 2.700000000000000178e+00 5.099999999999999645e+00 1.899999999999999911e+00\n7.099999999999999645e+00 3.000000000000000000e+00 5.900000000000000355e+00 2.100000000000000089e+00\n6.299999999999999822e+00 2.899999999999999911e+00 5.599999999999999645e+00 1.800000000000000044e+00\n6.500000000000000000e+00 3.000000000000000000e+00 5.799999999999999822e+00 2.200000000000000178e+00\n7.599999999999999645e+00 3.000000000000000000e+00 6.599999999999999645e+00 2.100000000000000089e+00\n4.900000000000000355e+00 2.500000000000000000e+00 4.500000000000000000e+00 1.699999999999999956e+00\n7.299999999999999822e+00 2.899999999999999911e+00 6.299999999999999822e+00 1.800000000000000044e+00\n6.700000000000000178e+00 2.500000000000000000e+00 5.799999999999999822e+00 1.800000000000000044e+00\n7.200000000000000178e+00 3.600000000000000089e+00 6.099999999999999645e+00 2.500000000000000000e+00\n6.500000000000000000e+00 3.200000000000000178e+00 5.099999999999999645e+00 2.000000000000000000e+00\n6.400000000000000355e+00 2.700000000000000178e+00 5.299999999999999822e+00 1.899999999999999911e+00\n6.799999999999999822e+00 3.000000000000000000e+00 5.500000000000000000e+00 2.100000000000000089e+00\n5.700000000000000178e+00 2.500000000000000000e+00 5.000000000000000000e+00 2.000000000000000000e+00\n5.799999999999999822e+00 2.799999999999999822e+00 5.099999999999999645e+00 2.399999999999999911e+00\n6.400000000000000355e+00 3.200000000000000178e+00 5.299999999999999822e+00 2.299999999999999822e+00\n6.500000000000000000e+00 3.000000000000000000e+00 5.500000000000000000e+00 1.800000000000000044e+00\n7.700000000000000178e+00 3.799999999999999822e+00 6.700000000000000178e+00 2.200000000000000178e+00\n7.700000000000000178e+00 2.600000000000000089e+00 6.900000000000000355e+00 2.299999999999999822e+00\n6.000000000000000000e+00 2.200000000000000178e+00 5.000000000000000000e+00 1.500000000000000000e+00\n6.900000000000000355e+00 3.200000000000000178e+00 5.700000000000000178e+00 2.299999999999999822e+00\n5.599999999999999645e+00 2.799999999999999822e+00 4.900000000000000355e+00 2.000000000000000000e+00\n7.700000000000000178e+00 2.799999999999999822e+00 6.700000000000000178e+00 2.000000000000000000e+00\n6.299999999999999822e+00 2.700000000000000178e+00 4.900000000000000355e+00 1.800000000000000044e+00\n6.700000000000000178e+00 3.299999999999999822e+00 5.700000000000000178e+00 2.100000000000000089e+00\n7.200000000000000178e+00 3.200000000000000178e+00 6.000000000000000000e+00 1.800000000000000044e+00\n6.200000000000000178e+00 2.799999999999999822e+00 4.799999999999999822e+00 1.800000000000000044e+00\n6.099999999999999645e+00 3.000000000000000000e+00 4.900000000000000355e+00 1.800000000000000044e+00\n6.400000000000000355e+00 2.799999999999999822e+00 5.599999999999999645e+00 2.100000000000000089e+00\n7.200000000000000178e+00 3.000000000000000000e+00 5.799999999999999822e+00 1.600000000000000089e+00\n7.400000000000000355e+00 2.799999999999999822e+00 6.099999999999999645e+00 1.899999999999999911e+00\n7.900000000000000355e+00 3.799999999999999822e+00 6.400000000000000355e+00 2.000000000000000000e+00\n6.400000000000000355e+00 2.799999999999999822e+00 5.599999999999999645e+00 2.200000000000000178e+00\n6.299999999999999822e+00 2.799999999999999822e+00 5.099999999999999645e+00 1.500000000000000000e+00\n6.099999999999999645e+00 2.600000000000000089e+00 5.599999999999999645e+00 1.399999999999999911e+00\n7.700000000000000178e+00 3.000000000000000000e+00 6.099999999999999645e+00 2.299999999999999822e+00\n6.299999999999999822e+00 3.399999999999999911e+00 5.599999999999999645e+00 2.399999999999999911e+00\n6.400000000000000355e+00 3.100000000000000089e+00 5.500000000000000000e+00 1.800000000000000044e+00\n6.000000000000000000e+00 3.000000000000000000e+00 4.799999999999999822e+00 1.800000000000000044e+00\n6.900000000000000355e+00 3.100000000000000089e+00 5.400000000000000355e+00 2.100000000000000089e+00\n6.700000000000000178e+00 3.100000000000000089e+00 5.599999999999999645e+00 2.399999999999999911e+00\n6.900000000000000355e+00 3.100000000000000089e+00 5.099999999999999645e+00 2.299999999999999822e+00\n5.799999999999999822e+00 2.700000000000000178e+00 5.099999999999999645e+00 1.899999999999999911e+00\n6.799999999999999822e+00 3.200000000000000178e+00 5.900000000000000355e+00 2.299999999999999822e+00\n6.700000000000000178e+00 3.299999999999999822e+00 5.700000000000000178e+00 2.500000000000000000e+00\n6.700000000000000178e+00 3.000000000000000000e+00 5.200000000000000178e+00 2.299999999999999822e+00\n6.299999999999999822e+00 2.500000000000000000e+00 5.000000000000000000e+00 1.899999999999999911e+00\n6.500000000000000000e+00 3.000000000000000000e+00 5.200000000000000178e+00 2.000000000000000000e+00\n6.200000000000000178e+00 3.399999999999999911e+00 5.400000000000000355e+00 2.299999999999999822e+00\n5.900000000000000355e+00 3.000000000000000000e+00 5.099999999999999645e+00 1.800000000000000044e+00\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Table\nDESCRIPTION: A two-column table containing numerical values, possibly representing input-output pairs or calculation results. First column contains larger decimal values, second column contains corresponding smaller decimal values with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/digamma_data_ipp/digamma_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2.818432331085205078125\t0.8484115700906551606307984398000472347785\n4.6342258453369140625\t1.421713669467331557347601964119226105014\n4.783483982086181640625\t1.457016504476551729585831562031964212238\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Scientific Number Dataset\nDESCRIPTION: Matrix of floating point numbers in scientific notation, including very large and very small values with high precision. Data appears to be formatted for numerical testing or validation purposes.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rj_data_ipp/ellint_rj_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.74762051927350566184369205465550661804385867981182e-22 0.26862682123178615729311180857336192916092225055347e-26 0.84223014588956526247936e23 0.1301752750835069196141448711201873228266493351629e-28 0.77480252682128625415386515944756210480090439704723e14\n0.92533743902997465556179028455896593691187845820423e-22 0.149624073505401611328125e1 0.8923663750663950598930432e25 0.102209814528e12 0.12937126487114329796907026194641071171060108535892e-21\n[...]\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Number Matrix\nDESCRIPTION: Matrix containing scientific notation numbers with varying exponents and mantissas, arranged in a systematic pattern. Used for numerical testing or calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipeinc_neg_m.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n9.999999999999999452e-21 -8.750000000000000182e-04 9.999999999999999452e-21\n9.999999999999999452e-21 -7.500000000000000156e-04 9.999999999999999452e-21\n9.999999999999999452e-21 -6.250000000000000130e-04 9.999999999999999452e-21\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Parsing Large Exponential Numeric Data in Scientific Notation\nDESCRIPTION: A complex matrix representing extremely small and large numeric values spanning multiple orders of magnitude, with consistent structural patterns across rows and columns\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipkinc_neg_m.txt#2025-04-14_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n5.623413251903490364e-125 -4.216965034285822674e-33 5.623413251903490364e-125\n```\n\n----------------------------------------\n\nTITLE: Floating Point Matrix Data\nDESCRIPTION: Large matrix of numerical data containing floating point values with high precision. Data appears to be organized in rows with 6 columns containing decimal numbers in scientific notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_5\n\nLANGUAGE: data\nCODE:\n```\n71.0818023681640625\t35.54090118408203125\t16967276572674003242408646285164667106576416153691486957360779217241205920301041179619357678262895310.0\t0.9999998995789995486563650978302014019583343710567724543227928084695597460102966041515413997494867488\t1703871059467004794074478687887880256405683002162495168814281237292418991935366112646049257678.235089\t0.1004210004513436349021697985980416656289432275456772071915304402539897033958484586002505132512101627e-6\n```\n\n----------------------------------------\n\nTITLE: Defining PDF of Double Pareto Lognormal Distribution in LaTeX\nDESCRIPTION: This snippet defines the probability density function (PDF) of the double Pareto lognormal distribution using LaTeX mathematical notation. It includes parameters x, μ, σ, α, and β, and utilizes the Mills' ratio.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dpareto_lognorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    f(x, \\mu, \\sigma, \\alpha, \\beta) =\n    \\frac{\\alpha \\beta}{(\\alpha + \\beta) x}\n    \\phi\\left( \\frac{\\log x - \\mu}{\\sigma} \\right)\n    \\left( R(y_1) + R(y_2) \\right)\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Distribution Functions for Anglit Distribution in LaTeX\nDESCRIPTION: This snippet defines the probability density function (f(x)), cumulative distribution function (F(x)), and inverse CDF (G(q)) for the Anglit distribution over the interval [-π/4, π/4].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_anglit.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\sin\\left(2x+\\frac{\\pi}{2}\\right)=\\cos\\left(2x\\right)\\\\ F\\left(x\\right) & = & \\sin^{2}\\left(x+\\frac{\\pi}{4}\\right)\\\\ G\\left(q\\right) & = & \\arcsin\\left(\\sqrt{q}\\right)-\\frac{\\pi}{4}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Git Recovery Commands\nDESCRIPTION: Commands for recovering from failed rebases and merges, including aborting rebase and resetting branches to previous states.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/useful_git.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --abort\n\ngit reset --hard tmp\n\ngit reflog show my-feature-branch\n\ngit reset --hard my-feature-branch@{2}\n```\n\n----------------------------------------\n\nTITLE: High-precision Numerical Data Output\nDESCRIPTION: Scientific computing output data containing high-precision floating point numbers arranged in columns. Each row contains values formatted in exponential notation with 18 decimal places of precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/wright_bessel.txt#2025-04-14_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n5.000000000000000000e+00 2.220446049250313081e-14 2.000000000000022204e+00 8.333884481249280440e-02\n5.000000000000000000e+00 2.220446049250313081e-14 8.999999999999978684e+00 3.751116085365637232e-01\n5.000000000000000000e+00 2.220446049250313081e-14 9.000000000000000000e+00 3.751116085365646668e-01\n```\n\n----------------------------------------\n\nTITLE: Tukey-Lambda Distribution Implementation in Python using SciPy\nDESCRIPTION: This implementation provides access to the Tukey-Lambda distribution functions in Python through the SciPy library. It includes definitions for the distribution and methods to compute its properties like mean, variance, and higher moments.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_tukeylambda.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nImplementation: `scipy.stats.tukeylambda`\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix - Scientific Notation\nDESCRIPTION: Matrix of floating point numbers in scientific notation organized in three columns. Each row contains measurements or calculated values with high precision, using exponential notation for representation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_j_data_ipp/bessel_j_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.4430477856658399105072021484375e-3\t0.553809732082299888134002685546875e-4\t0.9956156809860747445801192500664050062602e0\n0.4430477856658399105072021484375e-3\t0.69304020144045352935791015625e-4\t0.9957146107589140226790508756099801328105e0\n0.4430477856658399105072021484375e-3\t0.23264062474481761455535888671875e-3\t0.9962489699005580621378590557841736186861e0\n```\n\n----------------------------------------\n\nTITLE: Defining Exponential Integral Function in LaTeX\nDESCRIPTION: This LaTeX code defines the exponential integral function Ei used in the entropy formula of the Gompertz distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gompertz.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\mathrm{Ei}\\left(n,x\\right)=\\int_{1}^{\\infty}t^{-n}\\exp\\left(-xt\\right)dt\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Properties for HalfNormal Distribution\nDESCRIPTION: This snippet defines various statistical properties of the HalfNormal distribution, including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (mₐ), and median (mₙ).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfnorm.rst#2025-04-14_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\sqrt{\\frac{2}{\\pi}}\\\\ \\mu_{2} & = & 1-\\frac{2}{\\pi}\\\\ \\gamma_{1} & = & \\frac{\\sqrt{2}\\left(4-\\pi\\right)}{\\left(\\pi-2\\right)^{3/2}}\\\\ \\gamma_{2} & = & \\frac{8\\left(\\pi-3\\right)}{\\left(\\pi-2\\right)^{2}}\\\\ m_{d} & = & 0\\\\ m_{n} & = & \\Phi^{-1}\\left(\\frac{3}{4}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Processing Floating Point Numerical Data\nDESCRIPTION: A large dataset containing floating-point values in scientific notation, representing numerical measurements or statistical data\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-cosine-ml-iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = [1.2310531e-01, 1.2187125e-01, ..., 1.4703899e-01]\n```\n\n----------------------------------------\n\nTITLE: Installing ARPACK-NG with ILP64 MKL Support using Bash\nDESCRIPTION: Commands to configure and install ARPACK-NG with Intel MKL ILP64 support for large integer addressing. This example shows how to set the necessary environment variables and configure flags for GNU compilers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bootstrap\n$ export FFLAGS='-DMKL_ILP64 -I/usr/include/mkl'\n$ export FCFLAGS='-DMKL_ILP64 -I/usr/include/mkl'\n$ export LIBS='-Wl,--no-as-needed -L/usr/lib/x86_64-linux-gnu -lmkl_sequential -lmkl_core -lpthread -lm -ldl'\n$ export INTERFACE64=1\n$ ./configure --with-blas=mkl_gf_ilp64 --with-lapack=mkl_gf_ilp64\n$ make all check\n```\n\n----------------------------------------\n\nTITLE: Windows batch command for testing Qhull\nDESCRIPTION: Command for running the q_test.bat batch file and redirecting output to a file named q_test.x.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/qhull_src/README.txt#2025-04-14_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\ncd bin; ..\\eg\\q_test.bat >q_test.x 2>&1\n```\n\n----------------------------------------\n\nTITLE: Generating Givens Rotation for Complex Numbers in C\nDESCRIPTION: This is a template for a C function responsible for generating a Givens rotation of complex numbers. It is part of BLAS routines involving complex vector and scalar parameters, facilitating rotations that transform vector components.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid zrotg(z *ca, z *cb, d *c, z *s)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands to set up Git with your name and email for attribution in commits.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.email you@yourdomain.com\ngit config --global user.name \"Your Name\"\n```\n\n----------------------------------------\n\nTITLE: Basic Python Function Example\nDESCRIPTION: Simple Python function implementation used to demonstrate performance differences between Python and Cython. Contains a basic counting loop for benchmarking purposes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/cython.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef myfun():\n    i = 1\n    while i < 10000000:\n        i += 1\n    return i\n```\n\n----------------------------------------\n\nTITLE: Student t Distribution Moments in LaTeX\nDESCRIPTION: Mathematical representation of the distribution's moments including mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_t.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nm_{n}=m_{d}=\\mu & = & 0\\\\\\n\\mu_{2} & = & \\frac{\\nu}{\\nu-2}\\quad\\nu>2\\\\\\n\\gamma_{1} & = & 0\\quad\\nu>3\\\\\\n\\gamma_{2} & = & \\frac{6}{\\nu-4}\\quad\\nu>4\n```\n\n----------------------------------------\n\nTITLE: Binary Matrix Data in Scientific Notation\nDESCRIPTION: A 4x95 matrix containing binary values (0 and 1) represented in scientific notation format with 18 decimal places of precision. Each value is either 1.000000000000000000e+00 or 0.000000000000000000e+00.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-boolean-inp.txt#2025-04-14_snippet_2\n\nLANGUAGE: data\nCODE:\n```\n1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00...\n1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00...\n0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00...\n1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00...\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix\nDESCRIPTION: Matrix of scientific data containing 4 columns of decimal values with varying exponents and precision. First two columns contain smaller values (0.15e2 and varying exponents), while latter columns contain increasingly large decimal numbers with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre3_ipp/laguerre3.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0.15e2\t0.4e1\t0.99288128662109375e3\t-0.51306067544458847740405180616630837584805819553878e33\n0.15e2\t0.4e1\t0.9964613037109375e3\t-0.54209922817079398591861371120952594311662132988295e33\n0.15e2\t0.5e1\t0.9754039764404296875e2\t-0.1108969523782202948051596666890175276549733744887e17\n```\n\n----------------------------------------\n\nTITLE: Analyzing Data for Patterns\nDESCRIPTION: The content contains a series of numeric values which seem to be results of a certain data analysis or calculation, likely within the context of a scientific computing project.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/test_gamma_data_ipp/near_1.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.5\t1.772453850905516027298167483341145182798\t0.5723649429247000870717136756765293558236\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Data Matrix\nDESCRIPTION: Matrix of numerical data with exponential notation showing high precision scientific calculations or measurements. Each row contains 4 columns with values in exponential format.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/tgamma_delta_ratio_data_ipp/tgamma_delta_ratio_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0.77450408935546875e2\t0.12453912859200499951839447021484375e-4\t0.9999459120233665577802286585312524501998e0\t0.1000054090900285238171580028578737731618e1\n0.77450408935546875e2\t0.199610440176911652088165283203125e-4\t0.9999133095834058087957120351130924672583e0\t0.1000086697927295776376441907775610576512e1\n0.77450408935546875e2\t0.33494274248369038105010986328125e-4\t0.9998545393059763075091744211634193724872e0\t0.100014548184133442289226325091868069725e1\n```\n\n----------------------------------------\n\nTITLE: Moment Generating Function Definition\nDESCRIPTION: LaTeX formula for the moment generating function M(t) of the Arcsine distribution as an infinite series.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_arcsine.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nM\\left(t\\right)=1 + \\sum_{k=1}^\\infty \\left( \\prod_{r=0}^{k-1} \\frac{2r + 1}{2r+2} \\right) \\frac{t^k}{k!}\n```\n\n----------------------------------------\n\nTITLE: Processing Tabular Scientific Data in Plaintext Format\nDESCRIPTION: This snippet represents a portion of a larger dataset containing scientific computation results. Each row contains six columns of floating-point numbers, likely representing different parameters or results from a simulation or calculation. The data includes very small and very large numbers, utilizing scientific notation for precise representation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.6933230899119902090887990198098123073577880859375e-11\t0.1386646179823980418177598039619624614715576171875e-10\t24.42433234455626606652839207807430844427730364925975696592664901632954072382133322942821025011393797\t0.1693395357023288385073728566291731739740606678779075780232085702485998742830572554333144562303028157e-9\t144232900126.4904604059170506290891965113098944877031008797978415736309690021871938082060752449505334\t0.9999999998306604642976711614926271433708268260259393321220924219767914297514001257169427441829599575\n0.6933230899119902090887990198098123073577880859375e-11 100.0 0.3683597761799895153698730317431021061042018369548001861605671269716523992047277326892588602148934185e-45 0.2553923382214215324259769271798839593251938655786213829878574777436759121294679586832258717739493913e-56 144232900150.914792750473316695617588589384202931980404528689238763377628503146861501522530642738347 0.9999999999999999999999999999999999999999999999999999999974460766177857846757402307282011604067480613\n```\n\n----------------------------------------\n\nTITLE: Defining Gompertz Distribution Entropy in LaTeX\nDESCRIPTION: This LaTeX code defines the entropy formula for the Gompertz distribution, which involves the exponential integral function Ei.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gompertz.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=1-\\log\\left(c\\right)-e^{c}\\mathrm{Ei}\\left(1,c\\right),\n```\n\n----------------------------------------\n\nTITLE: Beta Prime Distribution Raw Moments\nDESCRIPTION: Definition of the nth raw moment of the Beta Prime distribution, conditional on the value of beta parameter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_betaprime.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\left\\{ \\begin{array}{ccc} \\frac{\\Gamma\\left(n+\\alpha\\right)\\Gamma\\left(\\beta-n\\right)}{\\Gamma\\left(\\alpha\\right)\\Gamma\\left(\\beta\\right)}=\\frac{\\left(\\alpha\\right)_{n}}{\\left(\\beta-n\\right)_{n}} &  & \\beta>n\\\\ \\infty &  & \\mathrm{otherwise} \\end{array}\\right.\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Update Example\nDESCRIPTION: Shows the renamed environment variable for PROPACK library configuration.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.9.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSCIPY_USE_PROPACK=1\n```\n\n----------------------------------------\n\nTITLE: Adding SciPy Upstream Remote\nDESCRIPTION: Command to add the official SciPy repository as a remote named 'upstream'.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/scipy/scipy.git\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix Output\nDESCRIPTION: Matrix of floating point values in scientific notation format with 18 decimal places precision. Data is arranged in columns with values appearing to represent mathematical calculation results or test data.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/wright_bessel.txt#2025-04-14_snippet_2\n\nLANGUAGE: data\nCODE:\n```\n2.000000000000000000e+00 1.000000000000000082e-05 1.000000000000022169e+02 3.416707330913415717e+03\n2.000000000000000000e+00 1.000000000000000082e-05 5.000000000000000000e+02 2.313518741514566820e+06\n2.000000000000000000e+00 1.000000000000000082e-05 7.097827128933840868e+02 1.577726371511813253e+07\n...\n```\n\n----------------------------------------\n\nTITLE: Cauchy Distribution Core Functions in LaTeX\nDESCRIPTION: Mathematical equations defining the core functions of the Cauchy distribution including probability density function (f(x)), cumulative distribution function (F(x)), quantile function (G(q)), and mode/median values.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_cauchy.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{\\pi\\left(1+x^{2}\\right)}\\\\ F\\left(x\\right) & = & \\frac{1}{2}+\\frac{1}{\\pi}\\tan^{-1}x\\\\ G\\left(q\\right) & = & \\tan\\left(\\pi q-\\frac{\\pi}{2}\\right)\\\\ m_{d} & = & 0\\\\ m_{n} & = & 0\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Interpreting 100.0 Column Value\nDESCRIPTION: The value 100.0 in some lines might represent a flag or special condition. It could indicate that a boundary condition has been reached, a maximum value has been exceeded, or some other significant event has occurred. This requires further investigation to determine its precise meaning.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n\"100.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Mode and Median for HalfCauchy Distribution\nDESCRIPTION: This snippet presents the formulas for the mode (m_d) and median (m_n) of the HalfCauchy distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfcauchy.rst#2025-04-14_snippet_2\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} m_{d} & = & 0\\\\\nm_{n} & = & \\tan\\left(\\frac{\\pi}{4}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Quantile Function for Discrete Laplacian Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the quantile function G(q) for the Discrete Laplacian Distribution, using a piecewise function for different ranges of q.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_dlaplace.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nG\\left(q\\right) & = & \\left\\{ \\begin{array}{cc} \\left\\lceil \\frac{1}{a}\\log\\left[q\\left(e^{a}+1\\right)\\right]-1\\right\\rceil  & q<\\frac{1}{1+e^{-a}},\\\\ \\left\\lceil -\\frac{1}{a}\\log\\left[\\left(1-q\\right)\\left(1+e^{a}\\right)\\right]\\right\\rceil  & q\\geq\\frac{1}{1+e^{-a}}.\\end{array}\\right.\n```\n\n----------------------------------------\n\nTITLE: Matrix Operation Functions (LAPACK S-prefix)\nDESCRIPTION: Function declarations for single precision LAPACK routines that handle matrix operations like generalized Schur, triangular operations, and transformations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nvoid stgsja(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, s *a, int *lda, s *b, int *ldb, s *tola, s *tolb, s *alpha, s *beta, s *u, int *ldu, s *v, int *ldv, s *q, int *ldq, s *work, int *ncycle, int *info);\nvoid stgsna(char *job, char *howmny, bint *select, int *n, s *a, int *lda, s *b, int *ldb, s *vl, int *ldvl, s *vr, int *ldvr, s *s, s *dif, int *mm, int *m, s *work, int *lwork, int *iwork, int *info);\n```\n\n----------------------------------------\n\nTITLE: Installing PRIMA Locally\nDESCRIPTION: The provided command installs the PRIMA package locally in an editable mode using pip. This allows for local development and testing of the package.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/_lib/pyprima/pyprima/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --editable .\n```\n\n----------------------------------------\n\nTITLE: Displaying SciPy Wheel Build Configurations in reStructuredText\nDESCRIPTION: A reStructuredText table showing the build configurations for official SciPy wheels on different platforms. It includes information on the CI environment, compilers used, and build tools for various platforms and architectures.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/toolchain.rst#2025-04-14_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n=========================   ==============================   ====================================   =============================\n Platform                    `CI`_ `Base`_ `Images`_          Compilers                              Comment\n=========================   ==============================   ====================================   =============================\n Linux x86                   ``ubuntu-22.04``                 GCC 10.2.1                             ``cibuildwheel``\n Linux arm                   ``docker-builder-arm64``         GCC 11.3.0                             ``cibuildwheel``\n OSX x86_64 (OpenBLAS)       ``macos-12``                     Apple clang 13.1.6/gfortran 11.3.0     ``cibuildwheel``\n OSX x86_64 (Accelerate)     ``macos-13``                     Apple clang 15.0.0/gfortran 13.2.0     ``cibuildwheel``\n OSX arm64 (OpenBLAS)        ``macos-14``                     Apple clang 15.0.0/gfortran 12.1.0     ``cibuildwheel``\n OSX arm64 (Accelerate)      ``macos-14``                     Apple clang 15.0.0/gfortran 13.2.0     ``cibuildwheel``\n Windows                     ``windows-2019``                 GCC 10.3.0 (`rtools`_)                 ``cibuildwheel``\n=========================   ==============================   ====================================   =============================\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Merge Logging via Command Line\nDESCRIPTION: Git command to enable detailed logs during merge operations through global configuration.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global merge.log true\n```\n\n----------------------------------------\n\nTITLE: Updating Minkowski Distance Calculation in Python\nDESCRIPTION: Deprecates the wminkowski function in scipy.spatial.distance. Users should use the minkowski function with the w keyword argument instead.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.6.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Deprecated:\nfrom scipy.spatial.distance import wminkowski\nwminkowski(x, y, p, w)\n\n# Use instead:\nfrom scipy.spatial.distance import minkowski\nminkowski(x, y, p, w=w)\n```\n\n----------------------------------------\n\nTITLE: Running Manual PEP8 Linting Check\nDESCRIPTION: Command to manually run PEP8 linting checks on the entire SciPy codebase using the development script.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/pep8.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython dev.py lint\n```\n\n----------------------------------------\n\nTITLE: Binary Matrix in Plain Text Format\nDESCRIPTION: A 42×3 binary matrix containing only 0s and 1s. This data structure can be used for testing algorithms, representing adjacency matrices, or as input for various scientific computing operations in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/ndimage/tests/data/label_strels.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 0 1\n1 1 1\n1 0 0\n1 0 0\n1 1 1\n0 0 1\n0 0 0\n1 1 1\n0 0 0\n0 1 1\n0 1 0\n1 1 0\n0 0 0\n0 0 0\n0 0 0\n0 1 1\n1 1 1\n1 1 0\n0 1 0\n1 1 1\n0 1 0\n1 0 0\n0 1 0\n0 0 1\n0 1 0\n0 1 0\n0 1 0\n1 1 1\n1 1 1\n1 1 1\n1 1 0\n0 1 0\n0 1 1\n1 0 1\n0 1 0\n1 0 1\n0 0 1\n0 1 0\n1 0 0\n1 1 0\n1 1 1\n0 1 1\n```\n\n----------------------------------------\n\nTITLE: Numerical Computation Results\nDESCRIPTION: Matrix of numerical values showing scientific notation calculations, probabilities, and floating point arithmetic results. Each row contains 7 columns of varying precision numbers, including exponential notation and decimal values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_large_data_ipp/ibeta_large_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.104760829344741068780422210693359375e-4 39078.1875 0.913384497165679931640625 95444.37547576888548779405522478045372688 0.4076397251031275963346153642645211144346e-41521 1.0 0.4270966445860582673748568606264586002504e-41526\n0.1127331415773369371891021728515625e-4 0.0226620174944400787353515625 0.1355634629726409912109375 88703.20318198098901713372585734808194292 45.9460483635769831377505786833842050448 0.9994822930837981780736860587426162687504 0.0005177069162018219263139412573837312496096\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Matrix of Numerical Computation Results\nDESCRIPTION: A matrix of high-precision numerical computations showing systematic evaluation of mathematical functions. Each row contains computed values with scientific notation, showing function evaluations at different scales from very small (1e-09) to large (1000+) numbers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/gsl/mathieu_ce_se.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1 -1.000000000000000062282e-09 100.2000000000000028422 0.9457292292960813862024 -0.3249557278341803079336\n1 -1.000000000000000062282e-09 10 -0.8390715290571709727985 -0.5440211110128737592717\n1 -1.000000000000000062282e-09 2.5 -0.8011436155036042450206 0.5984721442212065367627\n```\n\n----------------------------------------\n\nTITLE: Floating Point Matrix Data\nDESCRIPTION: Matrix of floating point numbers in scientific notation format with 4 columns. Values appear to be scientific calculations or measurements with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/tgamma_delta_ratio_data_ipp/tgamma_delta_ratio_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0.7806169891357421875e2\t0.36175407469272613525390625e-1\t0.8543532315285289369435241834603932285073e0\t0.1170456306558314979470140026158270065509e1\n0.7806169891357421875e2\t0.10786493122577667236328125e0\t0.6253748905256139210785355621065155762289e0\t0.1598801008545834485221156108475635773861e1\n0.7806169891357421875e2\t0.2463240921497344970703125e0\t0.3422661190575470192331389864724858074024e0\t0.2919418464592603690419564503453166649482e1\n```\n\n----------------------------------------\n\nTITLE: Entropy Formula in LaTeX\nDESCRIPTION: Expression for the entropy of the hyperbolic secant distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=\\log\\left(2\\pi\\right).\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix\nDESCRIPTION: A matrix of numerical values displaying calculations with high precision floating point numbers. Each row contains 6 columns of values with varying decimal places and scientific notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0.001115123392082750797271728515625\t0.001226635766215622425079345703125\t6.10358926752454803303914287923957841459461280215270747928413969329151971770320704193589046351143213\t0.006810630576147588021140262758498336091892334032398841343355219693328993172419541903195723506762135893\t890.082042779636685195912711120408090102656973937144770823945285813986177072630006779693947639791306\t0.9931893694238524119788597372415016639081076659676011586566447803066710068275804580967448107427423296\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Moment Generating Function for Gumbel Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the moment generating function (M) for the Gumbel distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_r.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\nM\\left(t\\right)=\\Gamma\\left(1-t\\right)\n```\n\n----------------------------------------\n\nTITLE: Raw Moments Calculation\nDESCRIPTION: Mathematical derivation of the raw moments (μ'n) using the Beta function representation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_arcsine.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu_{n}^{\\prime} & = & \\frac{1}{\\pi}\\int_{0}^{1} x^{n-1/2}\\left(1-x\\right)^{-1/2} dx\\\\ & = & \\frac{1}{\\pi}B\\left(\\frac{1}{2},n+\\frac{1}{2}\\right)=\\frac{\\left(2n-1\\right)!!}{2^{n}n!}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: block_diag behavior change\nDESCRIPTION: The `scipy.linalg.block_diag` function will now insert rows or columns of zeros of the appropriate size instead of ignoring zero-sized matrices. This resolves an inconsistency in how zero-sized matrices were handled.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"The function `scipy.linalg.block_diag` will not ignore zero-sized matrices anymore.\\nInstead it will insert rows or columns of zeros of the appropriate size.\\nSee gh-4908 for more details.\"\n```\n\n----------------------------------------\n\nTITLE: Git Help Command Example in RST\nDESCRIPTION: Example showing how to access Git command help documentation from the command line.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/git_resources.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\ngit help push\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Data Set\nDESCRIPTION: This snippet represents a dataset of high-precision floating-point numbers, likely used for numerical computations or testing in scientific computing. Each row contains three values with extremely high precision, potentially representing input parameters and corresponding output or error values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_large_data_ipp/owens_t_large_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.0085076256655156612396240234375000000000000000000000000000000000000000000000000000000000000000000000e-05 2.7292557712999874801467125735058620804603383679043180666394039099790140835207208977361304009314720209e-60\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.1678319424390792846679687500000000000000000000000000000000000000000000000000000000000000000000000000e-04 5.3046628524545581627945369556807627910753595607786187036487585640260836055415877450989451471807467005e-60\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.4905200805515050888061523437500000000000000000000000000000000000000000000000000000000000000000000000e-04 6.7704122080718956826805666110747666959560470182769757971231588293495323570917612986948160274856591628e-60\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 3.9852515328675508499145507812500000000000000000000000000000000000000000000000000000000000000000000000e-04 1.8102164773016756342400147510958204379145371940349237041470162278076435448170094253766960519033182067e-59\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.3875340856611728668212890625000000000000000000000000000000000000000000000000000000000000000000000000e-04 2.9013721654782982495163567662309119219835417176093514302559962022033072213565325249175183949848844236e-59\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.0718167759478092193603515625000000000000000000000000000000000000000000000000000000000000000000000000e-03 4.8682983349039406994693033519328350505691610741416576921615226135354229343228520343713982343384524763e-59\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 3.0219145119190216064453125000000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.3721213814096576942464130221608459280048961451383992158824018054289074461266783579157243553165195287e-58\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 4.9941334873437881469726562500000000000000000000000000000000000000000000000000000000000000000000000000e-03 2.2661097694517704130078337028769067194288546266471575598989830552124115054077755932057265260871653550e-58\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.2842318117618560791015625000000000000000000000000000000000000000000000000000000000000000000000000000e-03 4.2019055855873436579795022632061030682446218481634133756344134529805097787424742744282640464405087976e-58\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.4170018732547760009765625000000000000000000000000000000000000000000000000000000000000000000000000000e-02 1.0714051548132491807308266986282447832869049808991954024814332225971975856624460979483409024678542867e-57\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 2.4267955959137451180248412331366621772066730480363293319199961541676213018968564729204239309583553303e-57\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.3933420026693310991167264980555909583755665376042228666041650685677212621663982582109754335339054395e-57\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.4955767393112182617187500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.5776337165680679993459905886581712257248690979471083013357746674391774624864829628322656111213758179e-57\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.5778904711805396320294130240947179501550112277775595286346753751493503962606124774831276551037759079e-57\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.8384737968444824218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.5778904711805596289556229926952595021877356045398060062603228197047833785568400654160032775804172049e-57\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.7306551853835117071866989135742187500000000000000000000000000000000000000000000000000000000000000000e-06 3.1888365101242297103825681239385392957897876567799365354945203826793596118871833839122023554620932611e-220\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.1657506295014172792434692382812500000000000000000000000000000000000000000000000000000000000000000000e-06 3.9905260941571174774974020916015101593049774362841254891745632379061478325284789552053133999562163205e-220\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 7.2700186137808486819267272949218750000000000000000000000000000000000000000000000000000000000000000000e-06 1.3395447453316922052404458542684672983674119245675519838150333790490585535307543715835013996165666128e-219\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.4000004739500582218170166015625000000000000000000000000000000000000000000000000000000000000000000000e-05 2.5795851895383583004463764366840590760308058977890730763037982974071203925069861582587598859412341523e-219\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.7196449334733188152313232421875000000000000000000000000000000000000000000000000000000000000000000000e-05 3.1685493053402500230152547810636952760068021626532662717841282580320386971329000710607622558310677621e-219\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.0085076256655156612396240234375000000000000000000000000000000000000000000000000000000000000000000000e-05 1.1071030977802852136586677112981958489732809307206695826365444478277233293247585289359253750044232722e-218\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.1678319424390792846679687500000000000000000000000000000000000000000000000000000000000000000000000000e-04 2.1517959506598695288592227903970737697333134104340788511892889037336216386710223737002934503109204267e-218\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.4905200805515050888061523437500000000000000000000000000000000000000000000000000000000000000000000000e-04 2.7463631122378937373020915225355900974860871958517157525565555439261558126750385471214310736505665848e-218\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 3.9852515328675508499145507812500000000000000000000000000000000000000000000000000000000000000000000000e-04 7.3428752115379826995320891772265467737476607894851870142379945386776107220197683239479313743686854215e-218\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.3875340856611728668212890625000000000000000000000000000000000000000000000000000000000000000000000000e-04 1.1768630260029775225366080320114600342796489965638227709869024287320205170621581617245057718573869900e-217\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.0718167759478092193603515625000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.9745155411321462381723397225892404159579268252493987459748657793989198573049319348783229772193545760e-217\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 3.0219145119190216064453125000000000000000000000000000000000000000000000000000000000000000000000000000e-03 5.5597436906849344751575900414708625439700721564469548566595466601733751228978954319994917305691053372e-217\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 4.9941334873437881469726562500000000000000000000000000000000000000000000000000000000000000000000000000e-03 9.1645433401644906023893886016954990287191764143466642672390619583124777612556047201285364752375359290e-217\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.2842318117618560791015625000000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.6868309860803034380321729626638316987319987278545970699266609031456618628772024774957092094354780118e-216\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.4170018732547760009765625000000000000000000000000000000000000000000000000000000000000000000000000000e-02 4.0617140487481945977999693167758583728168124944942134161892822376169178725210447625522800901796372113e-216\n3.1314666748046875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 6.9919196979584720058037874302966720807333369331015527050221949769734932134915502556426445680579384122e-216\n```\n\n----------------------------------------\n\nTITLE: Polygamma Function Definition\nDESCRIPTION: Mathematical definition of the polygamma function ψₙ(z) expressed in terms of the Gamma function and the Hurwitz zeta function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genlogistic.rst#2025-04-14_snippet_3\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\psi_{n}\\left(z\\right) & = & \\frac{d^{n+1}}{dz^{n+1}}\\log\\Gamma\\left(z\\right)\\\\ & = & \\left(-1\\right)^{n+1}n!\\sum_{k=0}^{\\infty}\\frac{1}{\\left(z+k\\right)^{n+1}}\\\\ & = & \\left(-1\\right)^{n+1}n!\\zeta\\left(n+1,z\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Parsing Multidimensional Floating Point Data\nDESCRIPTION: Large numerical dataset with 4 columns of scientific notation floating point numbers, representing potentially experimental or computational data\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_pi3_large_data_ipp/ellint_pi3_large_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\nFloat values in scientific notation with high precision decimal representations\n```\n\n----------------------------------------\n\nTITLE: Moment Generating Function\nDESCRIPTION: The moment generating function M(t) for the half-logistic distribution, expressed using the polygamma function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halflogistic.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nM(t)=1-t\\psi_{0}(\\frac{1}{2}-\\frac{t}{2})+t\\psi_{0}(1-\\frac{t}{2})\n```\n\n----------------------------------------\n\nTITLE: Calculating Moments of Generalized Extreme Value Distribution in LaTeX\nDESCRIPTION: Formula for calculating the nth moment of the Generalized Extreme Value Distribution, valid when cn > -1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genextreme.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\frac{1}{c^{n}} \\sum_{k=0}^{n} \\binom{n}{k} \\left(-1\\right)^{k}\\Gamma\\left(ck+1\\right)\\quad\\text{if } cn>-1\n```\n\n----------------------------------------\n\nTITLE: LAPACK Single-Precision Function Declarations for SVD and Matrix Operations in C\nDESCRIPTION: C function declarations for LAPACK routines that perform various matrix operations including SVD decomposition, orthogonal transformations, and matrix factorizations. These declarations use the prefix 's' indicating single-precision floating-point operations with various parameters for matrices, vectors, and control options.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nvoid slasd3(int *nl, int *nr, int *sqre, int *k, s *d, s *q, int *ldq, s *dsigma, s *u, int *ldu, s *u2, int *ldu2, s *vt, int *ldvt, s *vt2, int *ldvt2, int *idxc, int *ctot, s *z, int *info)\nvoid slasd4(int *n, int *i, s *d, s *z, s *delta, s *rho, s *sigma, s *work, int *info)\nvoid slasd5(int *i, s *d, s *z, s *delta, s *rho, s *dsigma, s *work)\nvoid slasd6(int *icompq, int *nl, int *nr, int *sqre, s *d, s *vf, s *vl, s *alpha, s *beta, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, s *givnum, int *ldgnum, s *poles, s *difl, s *difr, s *z, int *k, s *c, s *s, s *work, int *iwork, int *info)\nvoid slasd7(int *icompq, int *nl, int *nr, int *sqre, int *k, s *d, s *z, s *zw, s *vf, s *vfw, s *vl, s *vlw, s *alpha, s *beta, s *dsigma, int *idx, int *idxp, int *idxq, int *perm, int *givptr, int *givcol, int *ldgcol, s *givnum, int *ldgnum, s *c, s *s, int *info)\nvoid slasd8(int *icompq, int *k, s *d, s *z, s *vf, s *vl, s *difl, s *difr, int *lddifr, s *dsigma, s *work, int *info)\nvoid slasda(int *icompq, int *smlsiz, int *n, int *sqre, s *d, s *e, s *u, int *ldu, s *vt, int *k, s *difl, s *difr, s *z, s *poles, int *givptr, int *givcol, int *ldgcol, int *perm, s *givnum, s *c, s *s, s *work, int *iwork, int *info)\nvoid slasdq(char *uplo, int *sqre, int *n, int *ncvt, int *nru, int *ncc, s *d, s *e, s *vt, int *ldvt, s *u, int *ldu, s *c, int *ldc, s *work, int *info)\nvoid slasdt(int *n, int *lvl, int *nd, int *inode, int *ndiml, int *ndimr, int *msub)\nvoid slaset(char *uplo, int *m, int *n, s *alpha, s *beta, s *a, int *lda)\nvoid slasq1(int *n, s *d, s *e, s *work, int *info)\nvoid slasq2(int *n, s *z, int *info)\nvoid slasq3(int *i0, int *n0, s *z, int *pp, s *dmin, s *sigma, s *desig, s *qmax, int *nfail, int *iter, int *ndiv, bint *ieee, int *ttype, s *dmin1, s *dmin2, s *dn, s *dn1, s *dn2, s *g, s *tau)\nvoid slasq4(int *i0, int *n0, s *z, int *pp, int *n0in, s *dmin, s *dmin1, s *dmin2, s *dn, s *dn1, s *dn2, s *tau, int *ttype, s *g)\nvoid slasq6(int *i0, int *n0, s *z, int *pp, s *dmin, s *dmin1, s *dmin2, s *dn, s *dnm1, s *dnm2)\nvoid slasr(char *side, char *pivot, char *direct, int *m, int *n, s *c, s *s, s *a, int *lda)\nvoid slasrt(char *id, int *n, s *d, int *info)\nvoid slassq(int *n, s *x, int *incx, s *scale, s *sumsq)\nvoid slasv2(s *f, s *g, s *h, s *ssmin, s *ssmax, s *snr, s *csr, s *snl, s *csl)\nvoid slaswp(int *n, s *a, int *lda, int *k1, int *k2, int *ipiv, int *incx)\nvoid slasy2(bint *ltranl, bint *ltranr, int *isgn, int *n1, int *n2, s *tl, int *ldtl, s *tr, int *ldtr, s *b, int *ldb, s *scale, s *x, int *ldx, s *xnorm, int *info)\nvoid slasyf(char *uplo, int *n, int *nb, int *kb, s *a, int *lda, int *ipiv, s *w, int *ldw, int *info)\nvoid slatbs(char *uplo, char *trans, char *diag, char *normin, int *n, int *kd, s *ab, int *ldab, s *x, s *scale, s *cnorm, int *info)\nvoid slatdf(int *ijob, int *n, s *z, int *ldz, s *rhs, s *rdsum, s *rdscal, int *ipiv, int *jpiv)\nvoid slatps(char *uplo, char *trans, char *diag, char *normin, int *n, s *ap, s *x, s *scale, s *cnorm, int *info)\nvoid slatrd(char *uplo, int *n, int *nb, s *a, int *lda, s *e, s *tau, s *w, int *ldw)\nvoid slatrs(char *uplo, char *trans, char *diag, char *normin, int *n, s *a, int *lda, s *x, s *scale, s *cnorm, int *info)\nvoid slatrz(int *m, int *n, int *l, s *a, int *lda, s *tau, s *work)\nvoid slauu2(char *uplo, int *n, s *a, int *lda, int *info)\nvoid slauum(char *uplo, int *n, s *a, int *lda, int *info)\n```\n\n----------------------------------------\n\nTITLE: Documenting SciPy's linprog function with revised simplex method\nDESCRIPTION: This ReStructuredText snippet defines the documentation for the 'revised simplex' method of the linprog function in SciPy's optimization module. It specifies the function signature, implementation file, and method name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.linprog-revised_simplex.rst#2025-04-14_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.linprog\n   :impl: scipy.optimize._linprog._linprog_rs_doc\n   :method: revised_simplex\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in C - chbgvx\nDESCRIPTION: This function 'chbgvx' finds selected eigenvalues and optionally eigenvectors of complex Hermitian band matrices based on a predefined range. It uses parameters to specify the range of eigenvalues and matrix properties, returning results through pointers. It depends on standard LAPACK libraries and requires accurate setting of matrix dimensions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid chbgvx(char *jobz, char *range, char *uplo, int *n, int *ka, int *kb, c *ab, int *ldab, c *bb, int *ldbb, c *q, int *ldq, s *vl, s *vu, int *il, int *iu, s *abstol, int *m, s *w, c *z, int *ldz, c *work, s *rwork, int *iwork, int *ifail, int *info)\n```\n\n----------------------------------------\n\nTITLE: First Four Raw Moments\nDESCRIPTION: Explicit formulas for the first four raw moments of the half-logistic distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halflogistic.rst#2025-04-14_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\mu_{1}^{\\prime} = 2\\log(2)\n\\mu_{2}^{\\prime} = 2\\zeta(2)=\\frac{\\pi^{2}}{3}\n\\mu_{3}^{\\prime} = 9\\zeta(3)\n\\mu_{4}^{\\prime} = 42\\zeta(4)=\\frac{7\\pi^{4}}{15}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Aliases via Command Line\nDESCRIPTION: Set of git config commands to create shortcuts (aliases) for commonly used git commands, making development workflow more efficient.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global alias.ci \"commit -a\"\ngit config --global alias.co checkout\ngit config --global alias.st \"status -a\"\ngit config --global alias.stat \"status -a\"\ngit config --global alias.br branch\ngit config --global alias.wdiff \"diff --color-words\"\ngit config --global core.editor vim\ngit config --global merge.summary true\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Backend Test with Skip Marker\nDESCRIPTION: Example showing how to write a test using the xp fixture and skip_xp_backends marker to test array operations across different backends while skipping specific ones.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@pytest.mark.skip_xp_backends(np_only=True, reason='skip reason')\ndef test_toto1(self, xp):\n    a = xp.asarray([1, 2, 3])\n    b = xp.asarray([0, 2, 5])\n    xp_assert_close(toto(a, b), a)\n```\n\n----------------------------------------\n\nTITLE: Gauss Hypergeometric Distribution Formulas\nDESCRIPTION: Mathematical formulas showing the probability density function f(x) and the nth moment of the Gauss Hypergeometric Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gausshyper.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\alpha,\\beta,\\gamma,z\\right) & = & Cx^{\\alpha-1}\\frac{\\left(1-x\\right)^{\\beta-1}}{\\left(1+zx\\right)^{\\gamma}}\\\\ \\mu_{n}^{\\prime} & = & \\frac{B\\left(n+\\alpha,\\beta\\right)}{B\\left(\\alpha,\\beta\\right)}\\frac{\\,_{2}F_{1}\\left(\\gamma,\\alpha+n;\\alpha+\\beta+n;-z\\right)}{\\,_{2}F_{1}\\left(\\gamma,\\alpha;\\alpha+\\beta;-z\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: LAPACK Complex Matrix Function Declarations\nDESCRIPTION: Function declarations for LAPACK routines operating on complex matrices (z prefix). These functions handle various matrix operations including eigenvalue computation, matrix transformations, and decompositions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nvoid ztrevc(char *side, char *howmny, bint *select, int *n, z *t, int *ldt, z *vl, int *ldvl, z *vr, int *ldvr, int *mm, int *m, z *work, d *rwork, int *info);\nvoid ztrexc(char *compq, int *n, z *t, int *ldt, z *q, int *ldq, int *ifst, int *ilst, int *info);\nvoid ztrrfs(char *uplo, char *trans, char *diag, int *n, int *nrhs, z *a, int *lda, z *b, int *ldb, z *x, int *ldx, d *ferr, d *berr, z *work, d *rwork, int *info);\nvoid ztrsen(char *job, char *compq, bint *select, int *n, z *t, int *ldt, z *q, int *ldq, z *w, int *m, d *s, d *sep, z *work, int *lwork, int *info);\nvoid ztrsna(char *job, char *howmny, bint *select, int *n, z *t, int *ldt, z *vl, int *ldvl, z *vr, int *ldvr, d *s, d *sep, int *mm, int *m, z *work, int *ldwork, d *rwork, int *info);\nvoid ztrsyl(char *trana, char *tranb, int *isgn, int *m, int *n, z *a, int *lda, z *b, int *ldb, z *c, int *ldc, d *scale, int *info);\nvoid ztrti2(char *uplo, char *diag, int *n, z *a, int *lda, int *info);\nvoid ztrtri(char *uplo, char *diag, int *n, z *a, int *lda, int *info);\nvoid ztrtrs(char *uplo, char *trans, char *diag, int *n, int *nrhs, z *a, int *lda, z *b, int *ldb, int *info);\nvoid ztrttf(char *transr, char *uplo, int *n, z *a, int *lda, z *arf, int *info);\nvoid ztrttp(char *uplo, int *n, z *a, int *lda, z *ap, int *info);\nvoid ztzrzf(int *m, int *n, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zunbdb(char *trans, char *signs, int *m, int *p, int *q, z *x11, int *ldx11, z *x12, int *ldx12, z *x21, int *ldx21, z *x22, int *ldx22, d *theta, d *phi, z *taup1, z *taup2, z *tauq1, z *tauq2, z *work, int *lwork, int *info);\nvoid zuncsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, z *x11, int *ldx11, z *x12, int *ldx12, z *x21, int *ldx21, z *x22, int *ldx22, d *theta, z *u1, int *ldu1, z *u2, int *ldu2, z *v1t, int *ldv1t, z *v2t, int *ldv2t, z *work, int *lwork, d *rwork, int *lrwork, int *iwork, int *info);\nvoid zung2l(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *info);\nvoid zung2r(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *info);\nvoid zungbr(char *vect, int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zunghr(int *n, int *ilo, int *ihi, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zungl2(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *info);\nvoid zunglq(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zungql(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zungqr(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zungr2(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *info);\nvoid zungrq(int *m, int *n, int *k, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zungtr(char *uplo, int *n, z *a, int *lda, z *tau, z *work, int *lwork, int *info);\nvoid zunm2l(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *info);\nvoid zunm2r(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *info);\nvoid zunmbr(char *vect, char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunmhr(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunml2(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *info);\nvoid zunmlq(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunmql(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunmqr(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunmr2(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *info);\nvoid zunmr3(char *side, char *trans, int *m, int *n, int *k, int *l, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *info);\nvoid zunmrq(char *side, char *trans, int *m, int *n, int *k, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunmrz(char *side, char *trans, int *m, int *n, int *k, int *l, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zunmtr(char *side, char *uplo, char *trans, int *m, int *n, z *a, int *lda, z *tau, z *c, int *ldc, z *work, int *lwork, int *info);\nvoid zupgtr(char *uplo, int *n, z *ap, z *tau, z *q, int *ldq, z *work, int *info);\nvoid zupmtr(char *side, char *uplo, char *trans, int *m, int *n, z *ap, z *tau, z *c, int *ldc, z *work, int *info);\n```\n\n----------------------------------------\n\nTITLE: Binary Matrix Data in Scientific Notation\nDESCRIPTION: A large matrix or set of vectors containing only binary (0 or 1) values, represented using scientific notation with high precision. Each line represents a row or vector of binary data.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-boolean-inp.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00\n```\n\n----------------------------------------\n\nTITLE: Large-Scale Numeric Precision Dataset\nDESCRIPTION: Contains 60 rows of scientific notation values with extremely small decimal values (10^-18 to 10^-32) and correspondingly large exponential values (10^25 to 10^49)\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxx_ipp/ellint_rd_xxx.txt#2025-04-14_snippet_0\n\nLANGUAGE: plain_text\nCODE:\n```\n1.3980121253550848455436022016469058470638e-33 1.3980121253550848455436022016469058470638e-33 1.3980121253550848455436022016469058470638e-33 1.9130820318496712875229216324832408264587e+49\n```\n\n----------------------------------------\n\nTITLE: Displaying High-Precision Numeric Data in Python\nDESCRIPTION: This code snippet shows multiple rows of numeric data, each containing six high-precision floating-point numbers. The numbers likely represent results from complex calculations or simulations, possibly related to scientific computing or numerical analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_big_data_ipp/igamma_big_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n0.1730655412757187150418758392333984375e-5 0.1730655441178896580822765827178955078125e-7 -1.0 0.2993117912029903240422582053899047098779533956541385552546168739467202263345519375546082579259835689e-4 577797.90391619920649973095027584836128926282155274216943338008435801586707772349755359609709258809 0.9999700688208797009675957741794610095290122046604345861444745383126053279773665448062442806862583006\n0.1730655412757187150418758392333984375e-5 0.8653277063785935752093791961669921875e-6 13.38277582367555562294055416847373915500263659346494217875993623821221196887112446988546507684731302 0.2316099655383339755405731669847576162961123204586203558223557251327214945205980959748823352959805302e-4 577801.8158305834504756449335090514614341009677858339594077124115869397920785194231187741120056354752 0.9999768390034461666024459426833015242383703887679541379644177644274867278505479401904023114002150846\n0.1730655412757187150418758392333984375e-5 0.15575898260067333467304706573486328125e-5 12.79500378214091254793715786456975103024623413471734292810881005720669047076428987935745392946724363 0.2214376467251173939070843604623148303831679646741287024258011317172427658231597089388494422353631048e-4 577802.4036026249851187199369053553654222257241882927070069630627131207976000175299533646400167828553 0.9999778562353274882606092915639537685169616832035325871297574198868282757234176840291059234224082336\n```\n\n----------------------------------------\n\nTITLE: Entropy Formula for Log-Uniform Distribution in LaTeX\nDESCRIPTION: LaTeX equation for the entropy of the log-uniform distribution, expressed in terms of parameters a and b.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loguniform.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=\\frac{1}{2}\\log\\left(ab\\right)+\\log\\left[\\log\\left(\\frac{b}{a}\\right)\\right].\n```\n\n----------------------------------------\n\nTITLE: Column 1 & 2: X and Y Coordinates (Potential)\nDESCRIPTION: The first two columns (e.g., 0.008691129274666309356689453125) might represent X and Y coordinates of a point in space. These could be spatial coordinates in a 2D plane or a projection of a higher-dimensional space. The units are unspecified but assumed to be consistent within the dataset.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"0.008691129274666309356689453125\\t0.008691129274666309356689453125\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for Triangular Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the formula for the entropy (h(X)) of the Triangular Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_triang.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} h\\left(X\\right) & = & \\log\\left(\\frac{1}{2}\\sqrt{e}\\right)\\\\  & \\approx & -0.19314718055994530942.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Automodule Directive Configuration (Sphinx)\nDESCRIPTION: This snippet uses the `automodule` directive in Sphinx to document the `scipy.spatial.transform` module. The `:no-members:`, `:no-inherited-members:`, and `:no-special-members:` options are used to exclude specific types of members from the generated documentation, allowing for a more focused documentation page.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/spatial.transform.rst#2025-04-14_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: scipy.spatial.transform\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Name for Test Package in TOML\nDESCRIPTION: TOML configuration to rename the package for building a separate test suite package.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/redistributable_binaries.rst#2025-04-14_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"scipy-tests\"\n```\n\n----------------------------------------\n\nTITLE: Column 6: Convergence Metric or Probability\nDESCRIPTION: The sixth column (e.g., 0.9642899293440333080609589198398429018613484473662412608940468325024064021708455579155247914668146388) could represent a convergence metric, indicating how close the solution is to converging. Alternatively, it might be a probability value associated with the data point. If it is probability, the values are between 0 and 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n\"0.9642899293440333080609589198398429018613484473662412608940468325024064021708455579155247914668146388\"\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for Discrete Laplacian Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the entropy h[X] for the Discrete Laplacian Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_dlaplace.rst#2025-04-14_snippet_5\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=-\\log\\left(\\tanh\\left(\\frac{a}{2}\\right)\\right)+\\frac{a}{\\sinh a}\n```\n\n----------------------------------------\n\nTITLE: Float Matrix Data Representation\nDESCRIPTION: A structured matrix of floating point numbers organized in three columns. Each row contains a base value, a measurement value, and a scientific notation result with high precision (using e notation).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/beta_med_data_ipp/beta_med_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n95.75110626220703125\t18.8463134765625\t0.3600629424874982730347916096502153004189e-22\n95.75110626220703125\t21.200313568115234375\t0.5502103122119598946056513971754344919386e-24\n95.75110626220703125\t22.111194610595703125\t0.1159541352010232229787539147175765740433e-24\n```\n\n----------------------------------------\n\nTITLE: Defining Rayleigh Distribution Moments in LaTeX\nDESCRIPTION: This snippet defines the nth moment of the Rayleigh distribution using LaTeX math notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rayleigh.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\sqrt{2^{n}}\\Gamma\\left(\\frac{n}{2}+1\\right)\n```\n\n----------------------------------------\n\nTITLE: Defining Moment Generating Function for Geometric Distribution using LaTeX in Python\nDESCRIPTION: This snippet contains the LaTeX formula for the moment generating function of the geometric distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_geom.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} M\\left(t\\right) & = & \\frac{p}{e^{-t}-\\left(1-p\\right)}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: LAPACK Matrix Norm Calculation Functions\nDESCRIPTION: Functions for calculating various matrix norms (Frobenius, infinity, 1-norm) for different matrix types including general, banded, Hermitian, and triangular matrices.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nd zlangb(char *norm, int *n, int *kl, int *ku, z *ab, int *ldab, d *work);\nd zlange(char *norm, int *m, int *n, z *a, int *lda, d *work);\nd zlangt(char *norm, int *n, z *dl, z *d, z *du);\nd zlanhb(char *norm, char *uplo, int *n, int *k, z *ab, int *ldab, d *work);\nd zlanhe(char *norm, char *uplo, int *n, z *a, int *lda, d *work);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for LAPACK Module Documentation\nDESCRIPTION: Sphinx autodoc directive that generates documentation for the scipy.linalg.lapack module while excluding regular members, inherited members, and special members from the output.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/linalg.lapack.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.linalg.lapack\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: HTML Styling Divs\nDESCRIPTION: Raw HTML elements providing styling containers for module name display and spacing\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/function.rst#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"prename\">{{ module }}.</div>\n<div class=\"empty\"></div>\n```\n\n----------------------------------------\n\nTITLE: Lévy Distribution Mathematical Formulas\nDESCRIPTION: Mathematical expressions for the probability density function f(x), cumulative distribution function F(x), and quantile function G(q) of the Lévy distribution. The distribution has α=1/2 and β=1 parameters with support for x>0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_levy.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{x\\sqrt{2\\pi x}}\\exp\\left(-\\frac{1}{2x}\\right)\\\\ F\\left(x\\right) & = & 2\\left[1-\\Phi\\left(\\frac{1}{\\sqrt{x}}\\right)\\right]\\\\ G\\left(q\\right) & = & \\left[\\Phi^{-1}\\left(1-\\frac{q}{2}\\right)\\right]^{-2}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining LAPACK Complex Matrix Operations Function Prototypes in C\nDESCRIPTION: This snippet contains function prototypes for LAPACK operations on complex matrices. These include decompositions (LU, QR, SVD), eigenvalue problems, linear equation solvers, and other numerical linear algebra operations. These are low-level C interfaces used by SciPy's linear algebra modules.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n# Do not edit this file directly.\n\nvoid cbbcsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, s *theta, s *phi, c *u1, int *ldu1, c *u2, int *ldu2, c *v1t, int *ldv1t, c *v2t, int *ldv2t, s *b11d, s *b11e, s *b12d, s *b12e, s *b21d, s *b21e, s *b22d, s *b22e, s *rwork, int *lrwork, int *info)\nvoid cbdsqr(char *uplo, int *n, int *ncvt, int *nru, int *ncc, s *d, s *e, c *vt, int *ldvt, c *u, int *ldu, c *c, int *ldc, s *rwork, int *info)\nvoid cgbbrd(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, c *ab, int *ldab, s *d, s *e, c *q, int *ldq, c *pt, int *ldpt, c *c, int *ldc, c *work, s *rwork, int *info)\nvoid cgbcon(char *norm, int *n, int *kl, int *ku, c *ab, int *ldab, int *ipiv, s *anorm, s *rcond, c *work, s *rwork, int *info)\nvoid cgbequ(int *m, int *n, int *kl, int *ku, c *ab, int *ldab, s *r, s *c, s *rowcnd, s *colcnd, s *amax, int *info)\nvoid cgbequb(int *m, int *n, int *kl, int *ku, c *ab, int *ldab, s *r, s *c, s *rowcnd, s *colcnd, s *amax, int *info)\nvoid cgbrfs(char *trans, int *n, int *kl, int *ku, int *nrhs, c *ab, int *ldab, c *afb, int *ldafb, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cgbsv(int *n, int *kl, int *ku, int *nrhs, c *ab, int *ldab, int *ipiv, c *b, int *ldb, int *info)\nvoid cgbsvx(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, c *ab, int *ldab, c *afb, int *ldafb, int *ipiv, char *equed, s *r, s *c, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cgbtf2(int *m, int *n, int *kl, int *ku, c *ab, int *ldab, int *ipiv, int *info)\nvoid cgbtrf(int *m, int *n, int *kl, int *ku, c *ab, int *ldab, int *ipiv, int *info)\nvoid cgbtrs(char *trans, int *n, int *kl, int *ku, int *nrhs, c *ab, int *ldab, int *ipiv, c *b, int *ldb, int *info)\nvoid cgebak(char *job, char *side, int *n, int *ilo, int *ihi, s *scale, int *m, c *v, int *ldv, int *info)\nvoid cgebal(char *job, int *n, c *a, int *lda, int *ilo, int *ihi, s *scale, int *info)\nvoid cgebd2(int *m, int *n, c *a, int *lda, s *d, s *e, c *tauq, c *taup, c *work, int *info)\nvoid cgebrd(int *m, int *n, c *a, int *lda, s *d, s *e, c *tauq, c *taup, c *work, int *lwork, int *info)\nvoid cgecon(char *norm, int *n, c *a, int *lda, s *anorm, s *rcond, c *work, s *rwork, int *info)\nvoid cgeequ(int *m, int *n, c *a, int *lda, s *r, s *c, s *rowcnd, s *colcnd, s *amax, int *info)\nvoid cgeequb(int *m, int *n, c *a, int *lda, s *r, s *c, s *rowcnd, s *colcnd, s *amax, int *info)\nvoid cgees(char *jobvs, char *sort, cselect1 *select, int *n, c *a, int *lda, int *sdim, c *w, c *vs, int *ldvs, c *work, int *lwork, s *rwork, bint *bwork, int *info)\nvoid cgeesx(char *jobvs, char *sort, cselect1 *select, char *sense, int *n, c *a, int *lda, int *sdim, c *w, c *vs, int *ldvs, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, bint *bwork, int *info)\nvoid cgeev(char *jobvl, char *jobvr, int *n, c *a, int *lda, c *w, c *vl, int *ldvl, c *vr, int *ldvr, c *work, int *lwork, s *rwork, int *info)\nvoid cgeevx(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, c *a, int *lda, c *w, c *vl, int *ldvl, c *vr, int *ldvr, int *ilo, int *ihi, s *scale, s *abnrm, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, int *info)\nvoid cgehd2(int *n, int *ilo, int *ihi, c *a, int *lda, c *tau, c *work, int *info)\nvoid cgehrd(int *n, int *ilo, int *ihi, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cgelq2(int *m, int *n, c *a, int *lda, c *tau, c *work, int *info)\nvoid cgelqf(int *m, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cgels(char *trans, int *m, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, c *work, int *lwork, int *info)\nvoid cgelsd(int *m, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, s *s, s *rcond, int *rank, c *work, int *lwork, s *rwork, int *iwork, int *info)\nvoid cgelss(int *m, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, s *s, s *rcond, int *rank, c *work, int *lwork, s *rwork, int *info)\nvoid cgelsy(int *m, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, int *jpvt, s *rcond, int *rank, c *work, int *lwork, s *rwork, int *info)\nvoid cgemqrt(char *side, char *trans, int *m, int *n, int *k, int *nb, c *v, int *ldv, c *t, int *ldt, c *c, int *ldc, c *work, int *info)\nvoid cgeql2(int *m, int *n, c *a, int *lda, c *tau, c *work, int *info)\nvoid cgeqlf(int *m, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cgeqp3(int *m, int *n, c *a, int *lda, int *jpvt, c *tau, c *work, int *lwork, s *rwork, int *info)\nvoid cgeqr2(int *m, int *n, c *a, int *lda, c *tau, c *work, int *info)\nvoid cgeqr2p(int *m, int *n, c *a, int *lda, c *tau, c *work, int *info)\nvoid cgeqrf(int *m, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cgeqrfp(int *m, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cgeqrt(int *m, int *n, int *nb, c *a, int *lda, c *t, int *ldt, c *work, int *info)\nvoid cgeqrt2(int *m, int *n, c *a, int *lda, c *t, int *ldt, int *info)\nvoid cgeqrt3(int *m, int *n, c *a, int *lda, c *t, int *ldt, int *info)\nvoid cgerfs(char *trans, int *n, int *nrhs, c *a, int *lda, c *af, int *ldaf, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cgerq2(int *m, int *n, c *a, int *lda, c *tau, c *work, int *info)\nvoid cgerqf(int *m, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cgesc2(int *n, c *a, int *lda, c *rhs, int *ipiv, int *jpiv, s *scale)\nvoid cgesdd(char *jobz, int *m, int *n, c *a, int *lda, s *s, c *u, int *ldu, c *vt, int *ldvt, c *work, int *lwork, s *rwork, int *iwork, int *info)\nvoid cgesv(int *n, int *nrhs, c *a, int *lda, int *ipiv, c *b, int *ldb, int *info)\nvoid cgesvd(char *jobu, char *jobvt, int *m, int *n, c *a, int *lda, s *s, c *u, int *ldu, c *vt, int *ldvt, c *work, int *lwork, s *rwork, int *info)\nvoid cgesvx(char *fact, char *trans, int *n, int *nrhs, c *a, int *lda, c *af, int *ldaf, int *ipiv, char *equed, s *r, s *c, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cgetc2(int *n, c *a, int *lda, int *ipiv, int *jpiv, int *info)\nvoid cgetf2(int *m, int *n, c *a, int *lda, int *ipiv, int *info)\nvoid cgetrf(int *m, int *n, c *a, int *lda, int *ipiv, int *info)\nvoid cgetri(int *n, c *a, int *lda, int *ipiv, c *work, int *lwork, int *info)\nvoid cgetrs(char *trans, int *n, int *nrhs, c *a, int *lda, int *ipiv, c *b, int *ldb, int *info)\nvoid cggbak(char *job, char *side, int *n, int *ilo, int *ihi, s *lscale, s *rscale, int *m, c *v, int *ldv, int *info)\nvoid cggbal(char *job, int *n, c *a, int *lda, c *b, int *ldb, int *ilo, int *ihi, s *lscale, s *rscale, s *work, int *info)\nvoid cgges(char *jobvsl, char *jobvsr, char *sort, cselect2 *selctg, int *n, c *a, int *lda, c *b, int *ldb, int *sdim, c *alpha, c *beta, c *vsl, int *ldvsl, c *vsr, int *ldvsr, c *work, int *lwork, s *rwork, bint *bwork, int *info)\nvoid cggesx(char *jobvsl, char *jobvsr, char *sort, cselect2 *selctg, char *sense, int *n, c *a, int *lda, c *b, int *ldb, int *sdim, c *alpha, c *beta, c *vsl, int *ldvsl, c *vsr, int *ldvsr, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid cggev(char *jobvl, char *jobvr, int *n, c *a, int *lda, c *b, int *ldb, c *alpha, c *beta, c *vl, int *ldvl, c *vr, int *ldvr, c *work, int *lwork, s *rwork, int *info)\nvoid cggevx(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, c *a, int *lda, c *b, int *ldb, c *alpha, c *beta, c *vl, int *ldvl, c *vr, int *ldvr, int *ilo, int *ihi, s *lscale, s *rscale, s *abnrm, s *bbnrm, s *rconde, s *rcondv, c *work, int *lwork, s *rwork, int *iwork, bint *bwork, int *info)\nvoid cggglm(int *n, int *m, int *p, c *a, int *lda, c *b, int *ldb, c *d, c *x, c *y, c *work, int *lwork, int *info)\nvoid cgghrd(char *compq, char *compz, int *n, int *ilo, int *ihi, c *a, int *lda, c *b, int *ldb, c *q, int *ldq, c *z, int *ldz, int *info)\nvoid cgglse(int *m, int *n, int *p, c *a, int *lda, c *b, int *ldb, c *c, c *d, c *x, c *work, int *lwork, int *info)\nvoid cggqrf(int *n, int *m, int *p, c *a, int *lda, c *taua, c *b, int *ldb, c *taub, c *work, int *lwork, int *info)\nvoid cggrqf(int *m, int *p, int *n, c *a, int *lda, c *taua, c *b, int *ldb, c *taub, c *work, int *lwork, int *info)\nvoid cgtcon(char *norm, int *n, c *dl, c *d, c *du, c *du2, int *ipiv, s *anorm, s *rcond, c *work, int *info)\nvoid cgtrfs(char *trans, int *n, int *nrhs, c *dl, c *d, c *du, c *dlf, c *df, c *duf, c *du2, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cgtsv(int *n, int *nrhs, c *dl, c *d, c *du, c *b, int *ldb, int *info)\nvoid cgtsvx(char *fact, char *trans, int *n, int *nrhs, c *dl, c *d, c *du, c *dlf, c *df, c *duf, c *du2, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid cgttrf(int *n, c *dl, c *d, c *du, c *du2, int *ipiv, int *info)\nvoid cgttrs(char *trans, int *n, int *nrhs, c *dl, c *d, c *du, c *du2, int *ipiv, c *b, int *ldb, int *info)\nvoid cgtts2(int *itrans, int *n, int *nrhs, c *dl, c *d, c *du, c *du2, int *ipiv, c *b, int *ldb)\nvoid chbev(char *jobz, char *uplo, int *n, int *kd, c *ab, int *ldab, s *w, c *z, int *ldz, c *work, s *rwork, int *info)\nvoid chbevd(char *jobz, char *uplo, int *n, int *kd, c *ab, int *ldab, s *w, c *z, int *ldz, c *work, int *lwork, s *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid chbevx(char *jobz, char *range, char *uplo, int *n, int *kd, c *ab, int *ldab, c *q, int *ldq, s *vl, s *vu, int *il, int *iu, s *abstol, int *m, s *w, c *z, int *ldz, c *work, s *rwork, int *iwork, int *ifail, int *info)\nvoid chbgst(char *vect, char *uplo, int *n, int *ka, int *kb, c *ab, int *ldab, c *bb, int *ldbb, c *x, int *ldx, c *work, s *rwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Defining Laplace Distribution Functions in LaTeX\nDESCRIPTION: Mathematical definitions of the probability density function (f(x)), cumulative distribution function (F(x)), and quantile function (G(q)) for the Laplace distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{2}e^{-\\left|x\\right|}\\\\ F\\left(x\\right) & = & \\left\\{ \\begin{array}{ccc} \\frac{1}{2}e^{x} &  & x\\leq0\\\\ 1-\\frac{1}{2}e^{-x} &  & x>0\\end{array}\\right.\\\\ G\\left(q\\right) & = & \\left\\{ \\begin{array}{ccc} \\log\\left(2q\\right) &  & q\\leq\\frac{1}{2}\\\\ -\\log\\left(2-2q\\right) &  & q>\\frac{1}{2}\\end{array}\\right.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Module Deprecation Examples\nDESCRIPTION: List of deprecated module namespaces that are being moved to ensure clear separation between public and private APIs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.8.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nscipy.signal.spline\nscipy.ndimage.filters\nscipy.ndimage.fourier\nscipy.ndimage.measurements\nscipy.ndimage.morphology\nscipy.ndimage.interpolation\nscipy.sparse.linalg.solve\nscipy.sparse.linalg.eigen\nscipy.sparse.linalg.isolve\n```\n\n----------------------------------------\n\nTITLE: Build Steps for _decomp_update Extension Module\nDESCRIPTION: Ninja build rules and commands showing the complete build process for the scipy.linalg._decomp_update extension, from Tempita template to final shared library. Includes compiler rules, Cython compilation, and linking steps.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/introspecting_a_build.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrule c_COMPILER\n command = /home/username/anaconda3/envs/scipy-dev/bin/x86_64-conda-linux-gnu-cc $ARGS -MD -MQ $out -MF $DEPFILE -o $out -c $in\n deps = gcc\n depfile = $DEPFILE_UNQUOTED\n description = Compiling C object $out\n\nrule c_LINKER\n command = /home/username/anaconda3/envs/scipy-dev/bin/x86_64-conda-linux-gnu-cc $ARGS -o $out $in $LINK_ARGS\n description = Linking target $out\n\nbuild scipy/linalg/_decomp_update.pyx: CUSTOM_COMMAND ../scipy/linalg/_decomp_update.pyx.in | ../scipy/_build_utils/tempita.py /home/username/anaconda3/envs/scipy-dev/bin/python3.10\n COMMAND = /home/username/anaconda3/envs/scipy-dev/bin/python3.10 ../scipy/_build_utils/tempita.py ../scipy/linalg/_decomp_update.pyx.in -o scipy/linalg\n description = Generating$ scipy/linalg/_decomp_update$ with$ a$ custom$ command\n\nbuild scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c: CUSTOM_COMMAND scipy/linalg/_decomp_update.pyx | /home/username/code/scipy/scipy/_build_utils/cythoner.py scipy/__init__.py scipy/linalg/__init__.py scipy/linalg/cython_blas.pyx\n DESC = Generating$ 'scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c'.\n COMMAND = /home/username/anaconda3/envs/scipy-dev/bin/python3.10 /home/username/code/scipy/scipy/_build_utils/cythoner.py scipy/linalg/_decomp_update.pyx scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c\n\nbuild scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o: c_COMPILER scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.c\n DEPFILE = scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o.d\n DEPFILE_UNQUOTED = scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o.d\n ARGS = -Iscipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p -Iscipy/linalg -I../scipy/linalg -I/home/username/anaconda3/envs/scipy-dev/lib/python3.10/site-packages/numpy/core/include -I/home/username/anaconda3/envs/scipy-dev/include/python3.10 -fvisibility=hidden -fdiagnostics-color=always -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -std=c99 -O2 -g -Wno-unused-but-set-variable -Wno-unused-function -Wno-conversion -Wno-misleading-indentation -fPIC -Wno-cpp\n\nbuild scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/_decomp_update.cpython-310-x86_64-linux-gnu.so.symbols: SHSYM scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so\n IMPLIB = scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so\n\nbuild scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so: c_LINKER scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so.p/meson-generated__decomp_update.c.o | /home/username/anaconda3/envs/scipy-dev/x86_64-conda-linux-gnu/sysroot/lib64/libm-2.12.so /home/username/anaconda3/envs/scipy-dev/x86_64-conda-linux-gnu/sysroot/usr/lib64/libm.a\n LINK_ARGS = -L/home/username/anaconda3/envs/scipy-dev/lib -Wl,--as-needed -Wl,--allow-shlib-undefined -shared -fPIC -Wl,--start-group -lm -Wl,--end-group -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,--gc-sections -Wl,--allow-shlib-undefined -Wl,-rpath,/home/username/anaconda3/envs/scipy-dev/lib -Wl,-rpath-link,/home/username/anaconda3/envs/scipy-dev/lib\n```\n\n----------------------------------------\n\nTITLE: Defining Noncentral F Distribution Formula in LaTeX\nDESCRIPTION: Mathematical formula expressing the probability density function of the Noncentral F distribution with three shape parameters: ν₁, ν₂ (degrees of freedom), and λ (non-centrality parameter).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_ncf.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*}\n        f\\left(x;\\lambda,\\nu_{1},\\nu_{2}\\right)\n        & = &\n        \\exp\\left[\\frac{\\lambda}{2} +\n                  \\frac{\\left(\\lambda\\nu_{1}x\\right)}\n                  {2\\left(\\nu_{1}x+\\nu_{2}\\right)}\n            \\right]\n        \\nu_{1}^{\\nu_{1}/2}\\nu_{2}^{\\nu_{2}/2}x^{\\nu_{1}/2-1} \\\\\n        &  &\n        \\times\\left(\\nu_{2}+\\nu_{1}x\\right)^{-\\left(\\nu_{1}+\\nu_{2}\\right)/2}\n        \\frac{\\Gamma\\left(\\frac{\\nu_{1}}{2}\\right)\n              \\Gamma\\left(1+\\frac{\\nu_{2}}{2}\\right)\n              L_{\\nu_{2}/2}^{\\nu_{1}/2-1}\n                \\left(-\\frac{\\lambda\\nu_{1}x}\n                            {2\\left(\\nu_{1}x+\\nu_{2}\\right)}\\right)}\n             {B\\left(\\frac{\\nu_{1}}{2},\\frac{\\nu_{2}}{2}\\right)\n              \\Gamma\\left(\\frac{\\nu_{1}+\\nu_{2}}{2}\\right)}\n    \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Processing in Numerical Context\nDESCRIPTION: Raw dataset of floating-point values with multiple precision measurements, potentially representing scientific computation or statistical analysis results\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_large_data_ipp/ibeta_large_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\n2.99237728118896484375 13.7659931182861328125 0.8350250720977783203125 0.0006330260109235047478811608476068694254983 0.8784866862106843248872857887758672368004e-12 0.9999999986122423568188660379383225681103 0.1387757643181133962061677431889710145459e-8\n```\n\n----------------------------------------\n\nTITLE: Processing Scientific Notation Values\nDESCRIPTION: Matrix or table of numeric values in scientific notation with varying magnitudes and precisions. Each line contains 5 columns of numbers represented in exponential format.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rj_data_ipp/ellint_rj_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: numeric\nCODE:\n```\n0.15637035008e11 0.134159215839460458496e21 0.52544137753835862096607467464082219521515071392059e-15 -0.24948805243951710508554242551326751708984375e-8 0.19030304523928762876188956443874663859228088039831e-13\n0.17571876864e11 0.78331889736129170520187100955465240744456415725866e-27 0.29027516841888427734375e1 0.86297228563125827349722385406494140625e-6 0.22453186161261513391158868662040316475654593711161e-1\n```\n\n----------------------------------------\n\nTITLE: Matrix of Large Numbers in Scientific Notation\nDESCRIPTION: A matrix of extremely large numbers represented in scientific notation. Each row contains four columns of data, with the first two columns being identical large values, the third column a smaller value, and the fourth column an extremely small value.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxz_ipp/ellint_rd_xxz.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 2.5397361755371093750000000000000000000000e+01 9.2955275415377474076091269315562848088623e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 2.7095397949218750000000000000000000000000e+01 8.9995455110787287641595409214504224587073e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 4.4206802368164062500000000000000000000000e+01 7.0456942590785593129039131075293574098217e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 6.1633407592773437500000000000000000000000e+01 5.9670579369115356745957557321550646025028e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 1.2647183227539062500000000000000000000000e+02 4.1655412473982919516966688452614921105051e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 1.6294470214843750000000000000000000000000e+02 3.6698492283386157160384400840825354832852e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 1.6700170898437500000000000000000000000000e+02 3.6249989637217007243664661383419524895499e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 1.8115838623046875000000000000000000000000e+02 3.4804798423162781449373421137300532040696e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 1.8267517089843750000000000000000000000000e+02 3.4660001990884781392998576379877670040705e-32\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 1.9377355957031250000000000000000000000000e+02 3.3652790808826649272716104078525258057472e-32\n```\n\n----------------------------------------\n\nTITLE: Referencing Laplace Distribution Implementation in SciPy\nDESCRIPTION: Reference to the SciPy implementation of the Laplace distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.laplace\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Numerical Data Table\nDESCRIPTION: This dataset contains numerical values organized in three columns. The first column represents power values, the second column contains floating point values, and the third column contains very large positive and negative numbers in scientific notation. This data is likely used for testing numerical algorithms or as reference values for mathematical functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre2_ipp/laguerre2.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n0.5e1\t0.9754039764404296875e2\t-0.56218428868911115998451316426215010600803852349048e8\n0.5e1\t0.12698681640625e3\t-0.2243354877625806499089339248835065869040287604245e9\n0.5e1\t0.1354770050048828125e3\t-0.31418973293934559300911242611564538290439848722478e9\n0.5e1\t0.1883819732666015625e3\t-0.17256344438562512861154328485542977773202418102338e10\n0.5e1\t0.2210340576171875e3\t-0.39170586692926680364193521563384606561329196831404e10\n0.5e1\t0.27849822998046875e3\t-0.12743797194803555297871516510157023166259117561797e11\n0.5e1\t0.30816705322265625e3\t-0.21330001890239721242857731991140245635183835676285e11\n0.5e1\t0.5468814697265625e3\t-0.38928352555423736374909603306210170085670252415611e12\n0.5e1\t0.5472205810546875e3\t-0.39050320967058708332723880470821630124002299400132e12\n0.5e1\t0.6323592529296875e3\t-0.8097387851220286833483200510030936982898650914701e12\n0.5e1\t0.81472369384765625e3\t-0.29004794312410106580901353153584987792805041014836e13\n0.5e1\t0.835008544921875e3\t-0.32824640180206380842810590985413965806061220575884e13\n0.5e1\t0.90579193115234375e3\t-0.49421323240476384503475902217971923134518824327159e13\n0.5e1\t0.9133758544921875e3\t-0.51537136874727263493269087352302138644536549927366e13\n0.5e1\t0.9575068359375e3\t-0.65333402285178696166233025823588675962128036189824e13\n0.5e1\t0.96488848876953125e3\t-0.67904577991104770306176706554532355404413293600378e13\n0.5e1\t0.9676949462890625e3\t-0.68903095684447650874743766361869788199054585412876e13\n0.5e1\t0.9688677978515625e3\t-0.69323852072435892067304941218115151610034557760898e13\n0.5e1\t0.99288128662109375e3\t-0.78400756116163888448805990221667549169323386803558e13\n0.5e1\t0.9964613037109375e3\t-0.79831715395647963750699081595768764433417262009011e13\n0.6e1\t0.9754039764404296875e2\t0.80820995722555766966204481326428921093819853380883e9\n0.6e1\t0.12698681640625e3\t0.43287285333593211699487383676400548034517465653989e10\n0.6e1\t0.1354770050048828125e3\t0.65078719322668723671436292885961437403753159577959e10\n0.6e1\t0.1883819732666015625e3\t0.50975971206548972048503974573840505796401940705308e11\n0.6e1\t0.2210340576171875e3\t0.13704228670315682904098855918609456694715553605731e12\n0.6e1\t0.27849822998046875e3\t0.56796012600833411397117536544899859778691289306697e12\n0.6e1\t0.30816705322265625e3\t0.10561318402049538938483073960821297722447423948919e13\n0.6e1\t0.5468814697265625e3\t0.34765288907987505446684019181571310232694381424255e14\n0.6e1\t0.5472205810546875e3\t0.34896286395332650547095052626160857783947143332365e14\n0.6e1\t0.6323592529296875e3\t0.83851035075753307874674729684024391015233495095035e14\n0.6e1\t0.81472369384765625e3\t0.38851567401648686934604173193933429726823924901636e15\n0.6e1\t0.835008544921875e3\t0.45077984162776358272899308358214843622672411937698e15\n0.6e1\t0.90579193115234375e3\t0.73700705849391831486587833923818658629022423687651e15\n0.6e1\t0.9133758544921875e3\t0.77507405395421988441046439866170936792437945158589e15\n0.6e1\t0.9575068359375e3\t0.10306131640131364207923517549718197693249532864712e16\n0.6e1\t0.96488848876953125e3\t0.10795269882491233868704393921117749304908016202882e16\n0.6e1\t0.9676949462890625e3\t0.10986241099950023947147288133858596641922819961585e16\n0.6e1\t0.9688677978515625e3\t0.11066879989104805588335103036958066630483588267248e16\n0.6e1\t0.99288128662109375e3\t0.12829707187512957309933510816037300428272415242332e16\n0.6e1\t0.9964613037109375e3\t0.13111507527148485594511524621819926397653608283432e16\n0.7e1\t0.9754039764404296875e2\t-0.97127257986443053526417273414388194974570607385935e10\n0.7e1\t0.12698681640625e3\t-0.70295995953992755265946027355243029063331213138355e11\n0.7e1\t0.1354770050048828125e3\t-0.11359707497453571901517561189586228142270903451764e12\n0.7e1\t0.1883819732666015625e3\t-0.12757018018175550435561074775586631022961625260251e13\n0.7e1\t0.2210340576171875e3\t-0.40694229451399857384340512241235666223436876850873e13\n0.7e1\t0.27849822998046875e3\t-0.21530849338789697137868260826250260284211997386438e14\n0.7e1\t0.30816705322265625e3\t-0.44515334725225153366608120310697334717448915933102e14\n0.7e1\t0.5468814697265625e3\t-0.26511725480730864342211918127699219873844104369464e16\n0.7e1\t0.5472205810546875e3\t-0.26628530536439102004691253957341772339263353080574e16\n0.7e1\t0.6323592529296875e3\t-0.74184365727412655859533662592614553371253178512618e16\n0.7e1\t0.81472369384765625e3\t-0.44494974059088898431029461327818954373425462460445e17\n0.7e1\t0.835008544921875e3\t-0.52932169558920439326767431099304484428916542881846e17\n0.7e1\t0.90579193115234375e3\t-0.93994900318821345331729187319793077343112028474933e17\n0.7e1\t0.9133758544921875e3\t-0.99689577334518532843192829626785299168262387676718e17\n0.7e1\t0.9575068359375e3\t-0.13905456836803030189577542899606637451372078172117e18\n0.7e1\t0.96488848876953125e3\t-0.14679265295479813112392016144737523708985227232103e18\n0.7e1\t0.9676949462890625e3\t-0.1498299348323053192424220347660666492880084886241e18\n0.7e1\t0.9688677978515625e3\t-0.1511151180165814270743545859553488460065643424192e18\n0.7e1\t0.99288128662109375e3\t-0.17958742259050562450977760208841036922467251612191e18\n0.7e1\t0.9964613037109375e3\t-0.18420258994246922874363794194214384956627167378336e18\n0.9e1\t0.9754039764404296875e2\t-0.88182421198196903206078231205307338249650868832064e12\n0.9e1\t0.12698681640625e3\t-0.11916795524742195589589499951943501492084977319524e14\n0.9e1\t0.1354770050048828125e3\t-0.22344296397638552568674348465205379613306362764566e14\n0.9e1\t0.1883819732666015625e3\t-0.52450137180856257840726851581544345839939827576715e15\n0.9e1\t0.2210340576171875e3\t-0.23696400879105564578477838259302061169946747558952e16\n0.9e1\t0.27849822998046875e3\t-0.2057154069965741250232756687863533313808633945305e17\n0.9e1\t0.30816705322265625e3\t-0.52706299238279057416545711578165684905744102859115e17\n0.9e1\t0.5468814697265625e3\t-0.10373504112979138086350224207396056466588729804516e20\n0.9e1\t0.5472205810546875e3\t-0.10432528153473136570046121526504633952860788360435e20\n0.9e1\t0.6323592529296875e3\t-0.39130711594017381807257779551743819698560088375668e20\n0.9e1\t0.81472369384765625e3\t-0.39417960379424891896054061064677368280593070059738e21\n0.9e1\t0.835008544921875e3\t-0.49304936215932770879646299983700202838606715074253e21\n0.9e1\t0.90579193115234375e3\t-0.10334424643188761615583739852552783075006729859411e22\n0.9e1\t0.9133758544921875e3\t-0.11148197370742169335891238953970561388157054787912e22\n0.9e1\t0.9575068359375e3\t-0.17117643007530823467479808245288438345428761729566e22\n0.9e1\t0.96488848876953125e3\t-0.18354699865344307677650783008677515871579118218563e22\n0.9e1\t0.9676949462890625e3\t-0.18845473402555581720266649838772564615998761460957e22\n0.9e1\t0.9688677978515625e3\t-0.19054005396362814451214549815853296627845049820834e22\n0.9e1\t0.99288128662109375e3\t-0.2379990415149925129095832370169236951708289834945e22\n0.9e1\t0.9964613037109375e3\t-0.2459080438944659678243208011185696524084223075751e22\n0.1e2\t0.9754039764404296875e2\t0.68363285133790726530343716793230261010875353582126e13\n0.1e2\t0.12698681640625e3\t0.12780346463262387447059318050624889749180569846779e15\n0.1e2\t0.1354770050048828125e3\t0.25872514080382692007093467972049926364267470684414e15\n0.1e2\t0.1883819732666015625e3\t0.88592647116085797035522910089956721973984668164933e16\n0.1e2\t0.2210340576171875e3\t0.47780583657418526717172656140732828044696456184005e17\n0.1e2\t0.27849822998046875e3\t0.5331900363941173927045807539300156181950112131739e18\n0.1e2\t0.30816705322265625e3\t0.1522625182085023713301500547784155501632626718952e19\n0.1e2\t0.5468814697265625e3\t0.54743944979053298043671516089410722749901760176246e21\n0.1e2\t0.5472205810546875e3\t0.55090819795558138013756209863788327369928434403532e21\n0.1e2\t0.6323592529296875e3\t0.23996032369722453090472613853380539435510387147265e22\n0.1e2\t0.81472369384765625e3\t0.3136180217844875856210532455123015078868701049189e23\n0.1e2\t0.835008544921875e3\t0.40228366570492581887821535861784155838787837068917e23\n0.1e2\t0.90579193115234375e3\t0.91635424833598371783927550180351600428358564325103e23\n0.1e2\t0.9133758544921875e3\t0.99696710750634214960945727157571811141128625200737e23\n0.1e2\t0.9575068359375e3\t0.16063550635202090204108065161018414051528464203492e24\n0.1e2\t0.96488848876953125e3\t0.17359930740134722080034670472759394163212119095913e24\n0.1e2\t0.9676949462890625e3\t0.17876999613951749665069145752320997385967469183553e24\n0.1e2\t0.9688677978515625e3\t0.18097164614992113510626725680969708377447448480682e24\n0.1e2\t0.99288128662109375e3\t0.23176305706781278086716530835422934581699500133195e24\n0.1e2\t0.9964613037109375e3\t0.24034525959278928207216174690071010414578307080004e24\n0.12e2\t0.9754039764404296875e2\t0.28423596453596289989288243804391945134145720558303e15\n0.12e2\t0.12698681640625e3\t0.10459814166195030538123822665486701112739697771504e17\n0.12e2\t0.1354770050048828125e3\t0.24809961434471699525764703789755549215916991317009e17\n0.12e2\t0.1883819732666015625e3\t0.18432001419367650072987948319941023048367873500947e19\n0.12e2\t0.2210340576171875e3\t0.1425973246788753700961735353907762908357118808801e20\n0.12e2\t0.27849822998046875e3\t0.2648612039362625663502673525170355605919867648175e21\n0.12e2\t0.30816705322265625e3\t0.94207669859466343227329712354536538487224976251934e21\n0.12e2\t0.5468814697265625e3\t0.11416571288332122735760393265732692757218749094333e25\n0.12e2\t0.5472205810546875e3\t0.11503772311632575693339455966945777225801334633802e25\n0.12e2\t0.6323592529296875e3\t0.67682817776609426691165241302499154756436610551448e25\n0.12e2\t0.81472369384765625e3\t0.14925113607158546323278613008648061457814853288569e27\n0.12e2\t0.835008544921875e3\t0.20137386892159007353644931592676274228203562748065e27\n0.12e2\t0.90579193115234375e3\t0.5420836690576459643271287711084458171666413772841e27\n0.12e2\t0.9133758544921875e3\t0.59993957244253616872158941998241312745401619591825e27\n0.12e2\t0.9575068359375e3\t0.10647596238911981020997681650094944029068747024397e28\n0.12e2\t0.96488848876953125e3\t0.11689245133960734996588218891178658140879248121018e28\n0.12e2\t0.9676949462890625e3\t0.1210919349676828488255310851429670495905368349189e28\n0.12e2\t0.9688677978515625e3\t0.12288756773958775796104364572786513910596933472569e28\n0.12e2\t0.99288128662109375e3\t0.16546282318562297815258073400590724827059252937711e28\n```\n\n----------------------------------------\n\nTITLE: Statistical Distribution Transformations in LaTeX\nDESCRIPTION: Mathematical formulas showing transformations of different statistical functions including CDF, PDF, PPF and others with location (L) and scale (S) parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nF\\left(x;L,S\\right)=F\\left(\\frac{\\left(x-L\\right)}{S}\\right)\nf\\left(x;L,S\\right)=\\frac{1}{S}f\\left(\\frac{\\left(x-L\\right)}{S}\\right)\nG\\left(q;L,S\\right)=L+SG\\left(q\\right)\n```\n\n----------------------------------------\n\nTITLE: Removed SciPy Modules\nDESCRIPTION: List of modules and packages that have been removed from the SciPy library, including scipy.stsci and scipy.misc.limits\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.8.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nscipy.stsci: the package was removed\n\nThe module `scipy.misc.limits` was removed.\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Numerical Array Processing\nDESCRIPTION: Raw numerical data in scientific notation, representing extremely small (10^-33) and extremely large (10^+16) magnitude values. Potentially used for mathematical or statistical calculations in scientific computing.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rf_xxx_ipp/ellint_rf_xxx.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n1.3980121253550848455436022016469058470638e-33 1.3980121253550848455436022016469058470638e-33 1.3980121253550848455436022016469058470638e-33 2.6745118773247830750129868545120089618418e+16\n```\n\n----------------------------------------\n\nTITLE: Performing Symmetric Rank-2K Update in C\nDESCRIPTION: In this snippet, a symmetric rank-2k update operation in C is summarized by the function declaration; it makes use of double precision complex numerics. Essential components include transformations governed by BLAS guidelines affecting matrix ranks through complex arithmetic.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nvoid zsyr2k(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Table Output\nDESCRIPTION: Table of floating point numbers with scientific notation organized in 3 columns. Values appear to represent some form of mathematical or scientific calculations with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_j_prime_int_data_ipp/bessel_j_prime_int_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.0 0.1730655412757187150418758392333984375e-5 -8.6532770637826959996036352233123749969269387214742e-07\n0.0 0.216575062950141727924346923828125e-5 -1.082875314750073739565916601264494477250584335342e-06\n0.0 0.72700195232755504548549652099609375e-5 -3.6350097616137599975154414859780356083927094699044e-06\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Properties of Gumbel Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines various statistical properties of the Gumbel distribution, including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (mₐ), and median (mₙ).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_r.rst#2025-04-14_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\gamma=-\\psi_{0}\\left(1\\right)\\\\ \\mu_{2} & = & \\frac{\\pi^{2}}{6}\\\\ \\gamma_{1} & = & \\frac{12\\sqrt{6}}{\\pi^{3}}\\zeta\\left(3\\right)\\\\ \\gamma_{2} & = & \\frac{12}{5}\\\\ m_{d} & = & 0\\\\ m_{n} & = & -\\log\\left(\\log2\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Calculating Statistical Moments for Pareto Distribution in LaTeX\nDESCRIPTION: This LaTeX code provides formulas for calculating various statistical moments of the Pareto distribution, including mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂), with conditions on the shape parameter b.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_pareto.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\frac{b}{b-1}\\quad b>1\\\\ \\mu_{2} & = & \\frac{b}{\\left(b-2\\right)\\left(b-1\\right)^{2}}\\quad b>2\\\\ \\gamma_{1} & = & \\frac{2\\left(b+1\\right)\\sqrt{b-2}}{\\left(b-3\\right)\\sqrt{b}}\\quad b>3\\\\ \\gamma_{2} & = & \\frac{6\\left(b^{3}+b^{2}-6b-2\\right)}{b\\left(b^{2}-7b+12\\right)}\\quad b>4\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Cumulative Distribution Function for Generalized Normal Distribution in LaTeX\nDESCRIPTION: This LaTeX equation defines the cumulative distribution function (CDF) for the Generalized Normal Distribution with shape parameter β, using the lower incomplete gamma function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gennorm.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} F\\left(x; \\beta\\right) & = & \\frac{1}{2} + \\mathrm{sgn}\\left(x\\right) \\frac{\\gamma\\left(1/\\beta, x^{\\beta}\\right)}{2\\Gamma\\left(1/\\beta\\right)} \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Number Array\nDESCRIPTION: Array of floating point numbers in scientific notation (e notation) format with precision of 7 decimal places. Values appear to be normalized between 0.35 and 0.64.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-hamming-ml.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n4.6000000e-01   4.3000000e-01   4.3000000e-01   5.4000000e-01   4.1000000e-01   5.3000000e-01   4.3000000e-01   5.9000000e-01   4.8000000e-01   4.7000000e-01...\n```\n\n----------------------------------------\n\nTITLE: Importing Powell's Method from SciPy Optimize\nDESCRIPTION: This snippet shows how to use the 'Powell' method with SciPy's minimize function. It specifies the implementation path and method name for Powell's optimization algorithm.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.minimize-powell.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. scipy-optimize:function:: scipy.optimize.minimize\n   :impl: scipy.optimize._optimize._minimize_powell\n   :method: Powell\n```\n\n----------------------------------------\n\nTITLE: Moment Generating Function of Generalized Logistic Distribution\nDESCRIPTION: Definition of the moment generating function M(t) using the hypergeometric function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genlogistic.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\nM\\left(t\\right)=\\frac{c}{1-t}\\,_{2}F_{1}\\left(1+c,\\,1-t\\,;\\,2-t\\,;-1\\right)\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in C - chbtrd\nDESCRIPTION: Function 'chbtrd' reduces a complex Hermitian band matrix to tridiagonal form. The operations depend on LAPACK routines, with inputs including matrix vectors and dimensions. It uses information from these to output tridiagonal components and requires appropriate workspace provisions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid chbtrd(char *vect, char *uplo, int *n, int *kd, c *ab, int *ldab, s *d, s *e, c *q, int *ldq, c *work, int *info)\n```\n\n----------------------------------------\n\nTITLE: Moment Generating Function Definition\nDESCRIPTION: Moment generating function M(t) for the Generalized Pareto Distribution, defined piecewise for c > 0 and c < 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genpareto.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nM\\left(t\\right) = \\left\\{\n  \\begin{array}{cc}\n    \\left(-\\frac{t}{c}\\right)^{\\frac{1}{c}}\n    e^{-\\frac{t}{c}}\n    \\left[\n    \\Gamma\\left(1-\\frac{1}{c}\\right)\n    + \\left(\\gamma\\left(-\\frac{1}{c},-\\frac{t}{c}\\right) / \\Gamma\\left(\\frac{1}{-c}\\right)\\right)\n      - \\pi\\csc\\left(\\frac{\\pi}{c}\\right)/\\Gamma\\left(\\frac{1}{c}\\right)\n      \\right] & c>0\\\\\n    \\left(\n    \\frac{\\left|c\\right|}{t}\\right)^{1/\\left|c\\right|}\n    \\Gamma\\left(\\frac{1}{\\left|c\\right|}, \\frac{t}{\\left|c\\right|}\\right)\n    \\frac{1}{\\Gamma\\left(\\frac{1}{|c|}\\right)}\n     & c<0\n  \\end{array}\n  \\right.\n```\n\n----------------------------------------\n\nTITLE: Handling Triangular Matrix-Vector System in C\nDESCRIPTION: By defining the ztrsv function, the solution to triangular matrix-vector systems is achieved with precision as per BLAS protocol. Designated usage involves complex matrix inputs adept at ensuring mathematical transformations and solutions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nvoid ztrsv(char *uplo, char *trans, char *diag, int *n, z *a, int *lda, z *x, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Defining Moments for Discrete Distributions in LaTeX\nDESCRIPTION: This LaTeX snippet defines non-central moments for discrete distributions using the probability density function (PDF). It shows how to calculate expected values of powers of the random variable.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete.rst#2025-04-14_snippet_4\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\mu_{m}^{\\prime}=E\\left[X^{m}\\right]=\\sum_{k}x_{k}^{m}p\\left(x_{k}\\right).\n```\n\n----------------------------------------\n\nTITLE: Wrapped Cauchy Distribution Entropy Formula\nDESCRIPTION: Mathematical formula for the entropy of the Wrapped Cauchy distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_wrapcauchy.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\nh\\left[X\\right]=\\log\\left(2\\pi\\left(1-c^{2}\\right)\\right)\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Matrix Data\nDESCRIPTION: Matrix of high-precision floating point numbers in scientific notation format, organized in columns. Each row contains 4 values with extremely high precision (~30 decimal places).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxz_ipp/ellint_rd_xxz.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n1.2110285949621213703269305548800000000000e+29 1.2110285949621213703269305548800000000000e+29 1.8115838623046875000000000000000000000000e+02 1.8405076850476779023357325541200389889154e-30\n1.2110285949621213703269305548800000000000e+29 1.2110285949621213703269305548800000000000e+29 1.8267517089843750000000000000000000000000e+02 1.8328507251326966902751248423215565084364e-30\n```\n\n----------------------------------------\n\nTITLE: Processing Numerical Data in Python\nDESCRIPTION: This code snippet shows multiple sets of numerical data, each containing six floating-point numbers. The data likely represents results from mathematical operations or scientific calculations, possibly involving logarithms, exponentials, or other complex mathematical functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n17.5330753326416015625 1753.3074951171875 0.1525078674926712724325046135741316924285483407797196656709319277016079224940323060664025421446207901e-707 0.1621539520925027212845478789663506069130441581883635322256007695028305593694715194917682290402460012e-721 94051279987102.18240100970432025704546482165061150419771138328961342912473524539038952681486989843406 1.0\n17.79958343505859375\t0.1779958307743072509765625\t200646434548288.1803732973648961756822217969899666454361919174953042770888400047118860268601562133222\t0.9999999999999999999999999999892454348802443717831552661537772430284126739903635373642751586509937069\t0.2157865146396350693356620837526451991071983648079243830231212124951443152724517908855699547463650661e-14\t0.1075456511975562821684473384622275697158732600963646263572484134900629308198853962196314394464478562e-28\n17.79958343505859375\t8.899791717529296875\t199531613707392.420295729526162639748722194516455867844793882680954915912649536831507942385837030595\t0.9944438542184637529261020525075591701925199375937988328943008080172006538667582596992366567184852758\t1114820840895.760077567838735693798645998824204134212235561266340433159838547124208315686444134170286\t0.00555614578153624707389794749244082980748006240620116710569919198279934613324174030076334328151472422\n17.79958343505859375\t16.0196247100830078125\t128308172215146.9082888540822000688521035773074374380083354439536973477570117441495750735201969422105\t0.6394739707386520932461292690760976255973410271066454985062704736291831592470151764994413295070242544\t72338262333141.27208444328269826469526461603322256404869399999359800131547633980614118455208422255483\t0.3605260292613479067538707309239023744026589728933545014937295263708168407529848235005586704929757456\n17.79958343505859375\t17.79958343505859375\t93997151021443.71328197824764512308243094877481642668850193518342693734196547989100964529017163657909\t0.4684715740554167356222208384955043010759465579672255407962438903792897989589173368784890741660060397\t106649283526844.4670913191172532104649372445658435753685275087638684117305226040647066127821095281862\t0.5315284259445832643777791615044956989240534420327744592037561096207102010410826631215109258339939603\n17.79958343505859375\t19.5795421600341796875\t62822753804144.17601615406480343788265946264743062279962351628667799379086001085251637107778842382228\t0.3131017700143834914270597043128924556480747470294779182930053239846043011264116005124142060364253504\t137823680744144.004357143300094895664708730693229379257405927660617355281628073103199886994492740943\t0.6868982299856165085729402956871075443519252529705220817069946760153956988735883994875857939635746496\n17.79958343505859375\t35.5991668701171875\t72961078040.61425158004818541310957182039210099959885814982678790179322047742655887173823939436135636\t0.0003636300749867310347343015995928063130823651645686545844986292907129182227159103343325792832558191183\t200573473470247.566121717316712920437796372948559002458171294120507447279267606529157386334041770404\t0.9996363699250132689652656984004071936869176348354313454155013707092870817772840896656674207167441809\n17.79958343505859375 1779.9583740234375 0.3833077727689090440442197603122110810470910413352603510498977710837199705333820052849363068763279513e-718 0.1910364236632677523143350442450627110286028423745128398727891350021040842917926379486406410372408591e-732 200646434548288.1803732973648983335473681933406600020570294439472953490724880839557162580722811647653 1.0\n19.0938243865966796875\t0.19093824923038482666015625\t8420554991157188.622117441589298392239929979579651790644845706657614936299648483183291532515113833871\t0.9999999999999999999999999999999035097147668922316044591924481748386859242891570852861242692222360591\t0.8125017529178263925874543405159918263431563290973423565824164184553393998473459664322214972276802618e-15\t0.9649028523310776839554080755182516131407571084291471387573077776394088495776256660776941454172484893e-31\n19.0938243865966796875\t9.54691219329833984375\t8385201272724382.68546065520869263213751421631459844371769498644098772157435311761895932726283502618\t0.9958014978264576979252494756949449800479635061284621136295897294488942078199256252363065371529112978\t35353718432805.93665678638060657260416868109144593438149123620845355788162446290668878766869726303042\t0.004198502173542302074750524305055019952036493871537886370410270551105792180074374763693462847088702226\n19.0938243865966796875\t17.1844425201416015625\t5442403854975547.720138801765720501736563708768580729209495067288277403216769713131776749613276713112\t0.6463236521453592863088470647933202536217943254964650256271813657109922628322831807423097872821133995\t2978151136181640.901978639823578703005119188637463648889691155361163876239207867393871365318255576098\t0.3536763478546407136911529352066797463782056745035349743728186342890077371677168192576902127178866005\n19.0938243865966796875\t19.0938243865966796875\t3953950392845518.673914055855861565915481212881042711148188138494710502216249245571393873043320444407\t0.4695593576667741620927637372758890247156458143610874105297122246958103199068566455714092515132956316\t4466604598311669.948203385733437638826201684525001666950998084154730777239728334954254241888211844804\t0.5304406423332258379072362627241109752843541856389125894702877753041896800931433544285907484867043684\n19.0938243865966796875\t21.0032062530517578125\t2601146605661370.641672635311073248847566616975198349337624254336189260418619173464950543110725118264\t0.3089044140668820652630859920083949304594747006273677663242119384848088219995792270946218097439270492\t5819408385495817.980444806278225955894116280430846028761561968313252019037358407060697571820807170947\t0.6910955859331179347369140079916050695405252993726322336757880615151911780004207729053781902560729508\n19.0938243865966796875\t38.187648773193359375\t1999053759679.564972373240387984591540801142416633090734820183985585999106626058006740475524514130264\t0.0002374016631657726955698024479273050293551709771839963340497860640248008475706025592191812399818887277\t8418555937397509.05714506834891122015014209626362774500845140246545569345687095446764137445600777508\t0.9997625983368342273044301975520726949706448290228160036659502139359751991524293974407808187600181113\n19.0938243865966796875 1909.3824462890625 0.1360733516606079588038269985399818714801767774194133654815920263827438527585305061735104663204259128e-769 0.1615966546189708783008559120800700270335519388348121960241325600976405816373252643533128864683136716e-785 8420554991157188.622117441589299204741682897406044378099186222649441279455977580525648114931532289211 1.0\n19.2440052032470703125\t0.19244004786014556884765625\t13069110641816150.3089434811630667756967353692600753672076252015144340755982652498049001752167375191\t0.9999999999999999999999999999999441520588384130978199003752936786676413101430836332446149341137773325\t0.7298829221584175981610526121546044339042398556150649586818554471146774289377984346124737601805167021e-15\t0.5584794116158690218009962470632133235868985691636675538506588622266753747314459400875018285411934269e-31\n19.2440052032470703125\t9.62200260162353515625\t13015988822643621.78579271188567536709723836383436344908166519117107297777955023022180950431470347737\t0.9959353149094507593771652152507084116713191756674345391294137025403474019425159238700342659705648733\t53121819172528.52315076927739213848241916384331007917857216494779500205857063464804935275748115640221\t0.00406468509054924062283478474929158832868082433256546087058629745965259805748407612996573402943512673\n19.2440052032470703125\t17.3196048736572265625\t8456967416687222.510426831494319897463223822973254467022837672035207206070091511438453352245531882014\t0.6470958620266144721146187618525383336428262946094855322381705095559628781131224878034600750806836747\t4612143225128927.798516649668747608116433704704419061237399684083660773768029353431405504826652751762\t0.3529041379733855278853812381474616663571737053905144677618294904440371218868775121965399249193163253\n19.2440052032470703125\t19.2440052032470703125\t6138279273650026.415028984756172784378581695921527331247681119707043186315129168707920013272823387391\t0.4696784228002388234702590328550799422410372364188997363359818163396204888210813105347086476526344755\t6930831368166123.893914496406894721201075831756146197012556236411824793522991696161938843799361246386\t0.5303215771997611765297409671449200577589627635811002636640181836603795111789186894652913523473655245\n19.2440052032470703125\t21.1684055328369140625\t4030828044735867.37884957879726243520334205996203475132177936182672833902623422104762056486379730542\t0.3084240508178698029348923333144799163671134468781880964846137144684650208070169431371142202784441316\t9038282597080282.930093902365805070376315467715638776938457994292139640811886643822238292208387328356\t0.6915759491821301970651076666855200836328865531218119035153862855315349791929830568628857797215558684\n19.2440052032470703125\t38.488010406494140625\t2953180921674.746802955943278264540059550458310508566621762262633670725792099426951970839069856789339\t0.0002259664794806846712437218310717178154627222780711796677094948858206874466548651950840976303445936347\t13066157460894475.56214052521978924103959797721936301969361559385623430911232876544290688623311477699\t0.9997740335205193153287562781689282821845372777219288203322905051141793125533451348049159023696554064\n19.2440052032470703125 1924.4005126953125 0.1466609950283553788446384788489708049238072785060906049463106594174037106216256843002105464382538672e-775 0.1122195679934764241436958705141835112427296627087805355770888659886154622261761769611565474651347825e-791 13069110641816150.30894348116306750557965752767767352826023735611886797983812086486985885707218463378 1.0\n```\n\n----------------------------------------\n\nTITLE: Parsing High-Precision Numerical Data\nDESCRIPTION: Large array of scientific notation floating-point numbers with extremely precise decimal representations. Contains multiple columns representing different numerical values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rf_xy0_ipp/ellint_rf_xy0.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n4.8841361999511718750000000000000000000000e+00 2.5397361755371093750000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 4.5143564096274274980597660314609846879999e-01\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Properties for Triangular Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines formulas for the mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) of the Triangular Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_triang.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\frac{c}{3}+\\frac{1}{3}\\\\ \\mu_{2} & = & \\frac{1-c+c^{2}}{18}\\\\ \\gamma_{1} & = & \\frac{\\sqrt{2}\\left(2c-1\\right)\\left(c+1\\right)\\left(c-2\\right)}{5\\left(1-c+c^{2}\\right)^{3/2}}\\\\ \\gamma_{2} & = & -\\frac{3}{5}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data in Scientific Notation\nDESCRIPTION: This snippet shows a sample of the numerical data present in the file. Each row contains five columns of floating-point numbers in scientific notation, representing various calculated values or parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre3_ipp/laguerre3.txt#2025-04-14_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n0.47e2\t0.16e2\t0.96488848876953125e3\t-0.27653884835583379075071547248293892229438826686229e80\n0.47e2\t0.16e2\t0.9676949462890625e3\t-0.32019390868445758618136628663568557837215114414119e80\n0.47e2\t0.16e2\t0.9688677978515625e3\t-0.34037456519754288614125946686307202434894956276373e80\n0.47e2\t0.16e2\t0.99288128662109375e3\t-0.11693642962064115379404156842508579672636513953803e81\n0.47e2\t0.16e2\t0.9964613037109375e3\t-0.14017193684850157741222699877112443503550795244699e81\n```\n\n----------------------------------------\n\nTITLE: Defining Cumulative Distribution Function for Discrete Laplacian Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the cumulative distribution function F(x) for the Discrete Laplacian Distribution, using a piecewise function for different ranges of x.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_dlaplace.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nF\\left(x\\right) & = & \\left\\{ \\begin{array}{cc} \\frac{e^{a\\left(\\left\\lfloor x\\right\\rfloor +1\\right)}}{e^{a}+1} & \\left\\lfloor x\\right\\rfloor <0,\\\\ 1-\\frac{e^{-a\\left\\lfloor x\\right\\rfloor }}{e^{a}+1} & \\left\\lfloor x\\right\\rfloor \\geq0.\\end{array}\\right.\n```\n\n----------------------------------------\n\nTITLE: Referencing ReStructuredText Directive for Pull Request Checklist\nDESCRIPTION: This snippet defines a ReStructuredText reference label for the pull request checklist section. It's used for internal document linking and organization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _pr-checklist:\n```\n\n----------------------------------------\n\nTITLE: SciPy weave submodule removal\nDESCRIPTION: The deprecated `scipy.weave` submodule has been removed in this SciPy release. This means that any code relying on this submodule will no longer function and must be updated to use alternative methods.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n\"The deprecated ``scipy.weave`` submodule was removed.\"\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Series Processing\nDESCRIPTION: A two-column dataset of decimal values with incremental first column and corresponding negative/positive second column values\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/digamma_root_data_ipp/digamma_root_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: numeric\nCODE:\n```\n1.39999997615814208984375\t-0.06138456903152256550686860248931989075643\n```\n\n----------------------------------------\n\nTITLE: Function Declaration in C - chbgv\nDESCRIPTION: The function 'chbgv' solves the generalized eigenvalue problem for complex Hermitian band matrices. It requires input matrices and parameters for dimensions and outputs the eigenvalues and optionally eigenvectors depending on 'jobz'. Dependencies include specific LAPACK libraries, and common constraints include matrix properties that must match. The function expects matrix inputs with corresponding dimensions and outputs results through reference pointers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid chbgv(char *jobz, char *uplo, int *n, int *ka, int *kb, c *ab, int *ldab, c *bb, int *ldbb, s *w, c *z, int *ldz, c *work, s *rwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Tabulated Numerical Results\nDESCRIPTION: A set of numerical computation results arranged in rows. Each row contains 6 columns of high-precision decimal numbers, likely representing different mathematical calculations or test cases.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n42.46524810791015625\t84.9304962158203125\t24348327108521101518414501008666294609723236.61824098477188140644477599895081557232651747139912370585\t0.1282664766834679368955418038597182009370967953321035999631116697702154437085777266511155557205717818e-6\t189826091859785114853326190302451053596260703706816.4398966710897666141022837712497109419896602022543\t0.9999998717335233165320631044581961402817990629032046678964000368883302297845562914222733488844442794\n42.46524810791015625 4246.52490234375 0.1582138976529834669433177680858588062216552879141295278678516348608211028079490742605004732613922258e-1693 0.833467495481647495481160914000063543822730002585076733409460509982719856414211333368378429831102885e-1744 189826116208112223374427708716952062262555313430053.0581376558616480205470597702005265143161776736534 1.0\n42.497722625732421875\t0.4249772131443023681640625\t214320796587885406489458353728508854097873289394904.6024158630527288917218602076036150242028043390557\t0.9999999999999999999999999999999999999999999999999999999999999999999883411956140219450400432290945474\t0.2498724243265148933181472014474271661064356718503270820032139724307779458620504172510254476937240104e-17\t0.1165880438597805495995677090545256446620949551376648046928037362511313906278612645727943391506149808e-67\n```\n\n----------------------------------------\n\nTITLE: Defining Binomial Coefficient in LaTeX\nDESCRIPTION: This LaTeX code defines the binomial coefficient used in the Negative Hypergeometric Distribution formulas. It expresses the number of ways to choose k items from n items without replacement and without order.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nhypergeom.rst#2025-04-14_snippet_4\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\binom{n}{k} \\equiv \\frac{n!}{k! (n - k)!}\n```\n\n----------------------------------------\n\nTITLE: Defining Power-function Distribution Equations in LaTeX\nDESCRIPTION: This LaTeX code block defines the mathematical equations for the Power-function Distribution, including its probability density function, cumulative distribution function, inverse CDF, mean, variance, skewness, kurtosis, and mode.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_powerlaw.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;a\\right) & = & ax^{a-1}\\\\ F\\left(x;a\\right) & = & x^{a}\\\\ G\\left(q;a\\right) & = & q^{1/a}\\\\ \\mu & = & \\frac{a}{a+1}\\\\ \\mu_{2} & = & \\frac{a\\left(a+2\\right)}{\\left(a+1\\right)^{2}}\\\\ \\gamma_{1} & = & 2\\left(1-a\\right)\\sqrt{\\frac{a+2}{a\\left(a+3\\right)}}\\\\ \\gamma_{2} & = & \\frac{6\\left(a^{3}-a^{2}-6a+2\\right)}{a\\left(a+3\\right)\\left(a+4\\right)}\\\\ m_{d} & = & 1\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Deriving Moment Generating Function for Discrete Laplacian Distribution in LaTeX\nDESCRIPTION: This LaTeX code shows the derivation of the moment generating function M(t) for the Discrete Laplacian Distribution, including the summation and simplification steps.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_dlaplace.rst#2025-04-14_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nM\\left(t\\right) & = & \\tanh\\left(\\frac{a}{2}\\right)\\sum_{k=-\\infty}^{\\infty}e^{tk}e^{-a\\left|k\\right|}\\\\  & = & C\\left(1+\\sum_{k=1}^{\\infty}e^{-\\left(t+a\\right)k}+\\sum_{1}^{\\infty}e^{\\left(t-a\\right)k}\\right)\\\\  & = & \\tanh\\left(\\frac{a}{2}\\right)\\left(1+\\frac{e^{-\\left(t+a\\right)}}{1-e^{-\\left(t+a\\right)}}+\\frac{e^{t-a}}{1-e^{t-a}}\\right)\\\\  & = & \\frac{\\tanh\\left(\\frac{a}{2}\\right)\\sinh a}{\\cosh a-\\cosh t}.\n```\n\n----------------------------------------\n\nTITLE: Scientific Floating Point Data\nDESCRIPTION: A sequence of floating point numbers in scientific notation (exponential format) with 8 decimal places. Values range approximately between 0.7 and 1.3, stored as space-separated values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-correlation-ml.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n9.2507465e-01   9.6528566e-01   8.7255441e-01   1.1287379e+00   8.7318727e-01   1.0767102e+00   9.1419676e-01   1.1503304e+00   9.8074509e-01   1.0135025e+00   1.0495025e+00   9.4794536e-01   9.6829273e-01   1.1345767e+00   1.1048008e+00   9.2407796e-01   1.0228634e+00   9.3853195e-01   9.9377619e-01   1.0407662e+00   9.5048989e-01   9.0465688e-01   9.8056930e-01   8.9777156e-01   9.6357127e-01   9.3864452e-01   9.9754613e-01   9.7271356e-01   8.4383151e-01   9.6981983e-01   9.7510267e-01   1.0112663e+00   7.8730400e-01   1.0299498e+00   9.9307979e-01   9.0239520e-01   8.5428231e-01   8.8972742e-01   8.5933162e-01   9.6625934e-01   9.4175449e-01   9.9120729e-01   1.0503963e+00   8.8223053e-01   1.3261434e+00   1.1063209e+00   8.4058398e-01   1.0844267e+00   1.1153093e+00   1.0092643e+00   8.9585237e-01   1.0599818e+00   1.2321707e+00   1.1359624e+00   8.3503556e-01   1.1792243e+00   7.9159781e-01   1.0830419e+00   1.2181870e+00   9.9888500e-01   1.0227144e+00   6.8557277e-01   9.6836193e-01   1.1061227e+00   1.0883453e+00   9.5681974e-01   9.9436299e-01   1.0304323e+00   1.1273949e+00   1.0735563e+00   1.0582583e+00   9.6040272e-01   1.0032137e+00   8.4900547e-01   1.1035351e+00   8.7867480e-01   9.6433176e-01   9.1850122e-01   8.9337435e-01   1.0449390e+00   8.9639384e-01   9.6704971e-01   1.0084258e+00   1.0528587e+00   1.1764481e+00   1.0913280e+00   1.0136672e+00   1.2737156e+00   9.5130359e-01   1.0367909e+00   1.1983402e+00   1.1319901e+00   1.1117462e+00   1.0343695e+00   1.0838628e+00   7.5266057e-01   1.0763316e+00   8.8067924e-01   9.6734383e-01   9.8800551e-01   1.2265742e+00   7.8833055e-01   1.0338670e+00   8.6666625e-01   9.9039950e-01   9.7142684e-01   9.3138616e-01   8.5849977e-01   8.5486301e-01   1.0516028e+00   1.1105313e+00   9.5943505e-01   9.8845171e-01   1.0566288e+00   9.9712198e-01   9.5545756e-01   1.1817974e+00   9.9128482e-01   1.0117892e+00   1.0979115e+00   1.0493943e+00   9.1318848e-01   9.3157311e-01   8.7073304e-01   1.2459441e+00   9.3412689e-01   1.0482297e+00   9.4224032e-01   9.5134153e-01   9.0857493e-01   9.7264161e-01   8.2900820e-01   9.3140549e-01   1.1330242e+00   1.0333002e+00   1.0117861e+00   1.2053255e+00   8.5291396e-01   1.0148928e+00   8.6641379e-01   9.7080819e-01   9.5457159e-01   9.5207457e-01   9.3539674e-01   9.0769069e-01   9.5322590e-01   1.1181803e+00   9.9765614e-01   7.5370610e-01   1.0807114e+00   1.0804601e+00   9.0214124e-01   8.7101998e-01   1.0167435e+00   1.2045936e+00   8.7300539e-01   1.1054300e+00   7.9145574e-01   1.0279340e+00   8.7623462e-01   1.0034756e+00   1.0386933e+00   9.3910970e-01   1.0028455e+00   9.9868824e-01   9.8752945e-01   9.8319327e-01   1.3110209e+00   8.6180633e-01   1.0993856e+00   8.5912563e-01   1.1303979e+00   9.8690459e-01   9.6910090e-01   9.1456819e-01   1.1525339e+00   1.1064552e+00   1.1062255e+00   9.7226683e-01   1.1091447e+00   1.1072238e+00   9.6544444e-01   9.6681036e-01   9.3247685e-01   9.6854634e-01   1.1035119e+00   1.1317148e+00   9.5557793e-01   9.8908485e-01   7.4873648e-01\n```\n\n----------------------------------------\n\nTITLE: Numeric Representation of Scientific Notation Values\nDESCRIPTION: Provides a comprehensive list of floating-point numbers using scientific notation, spanning extremely small and large magnitudes\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxx_ipp/ellint_rd_xxx.txt#2025-04-14_snippet_1\n\nLANGUAGE: numeric\nCODE:\n```\n1.0233193632958864486594274811892546495073e-17 ... 5.3459495306015014648437500000000000000000e-02\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density Function for Inverse Gaussian Distribution in LaTeX\nDESCRIPTION: This LaTeX code snippet defines the probability density function (pdf) and cumulative distribution function (cdf) for the Inverse Gaussian Distribution, which is used to derive the Reciprocal Inverse Gaussian Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_recipinvgauss.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f_{IG}\\left(x;\\mu\\right) & = & \\frac{1}{\\sqrt{2\\pi x^{3}}}\\exp\\left(-\\frac{\\left(x-\\mu\\right)^{2}}{2x\\mu^{2}}\\right).\\\\ F_{IG}\\left(x;\\mu\\right) & = & \\Phi\\left(\\frac{1}{\\sqrt{x}}\\frac{x-\\mu}{\\mu}\\right)+\\exp\\left(\\frac{2}{\\mu}\\right)\\Phi\\left(-\\frac{1}{\\sqrt{x}}\\frac{x+\\mu}{\\mu}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK routines in Fortran\nDESCRIPTION: This code snippet declares several LAPACK functions in Fortran, used for operations like matrix factorizations, decompositions, and solving linear equations. The functions take various input parameters, such as matrix dimensions and data pointers, to perform computations on matrices. The outputs include computed factors, solution vectors, and error information.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_8\n\nLANGUAGE: Fortran\nCODE:\n```\nvoid cunmqr(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cunmr2(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *info)\nvoid cunmr3(char *side, char *trans, int *m, int *n, int *k, int *l, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *info)\nvoid cunmrq(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cunmrz(char *side, char *trans, int *m, int *n, int *k, int *l, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cunmtr(char *side, char *uplo, char *trans, int *m, int *n, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cupgtr(char *uplo, int *n, c *ap, c *tau, c *q, int *ldq, c *work, int *info)\nvoid cupmtr(char *side, char *uplo, char *trans, int *m, int *n, c *ap, c *tau, c *c, int *ldc, c *work, int *info)\nvoid dbbcsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, int *m, int *p, int *q, d *theta, d *phi, d *u1, int *ldu1, d *u2, int *ldu2, d *v1t, int *ldv1t, d *v2t, int *ldv2t, d *b11d, d *b11e, d *b12d, d *b12e, d *b21d, d *b21e, d *b22d, d *b22e, d *work, int *lwork, int *info)\nvoid dbdsdc(char *uplo, char *compq, int *n, d *d, d *e, d *u, int *ldu, d *vt, int *ldvt, d *q, int *iq, d *work, int *iwork, int *info)\nvoid dbdsqr(char *uplo, int *n, int *ncvt, int *nru, int *ncc, d *d, d *e, d *vt, int *ldvt, d *u, int *ldu, d *c, int *ldc, d *work, int *info)\nvoid ddisna(char *job, int *m, int *n, d *d, d *sep, int *info)\nvoid dgbbrd(char *vect, int *m, int *n, int *ncc, int *kl, int *ku, d *ab, int *ldab, d *d, d *e, d *q, int *ldq, d *pt, int *ldpt, d *c, int *ldc, d *work, int *info)\nvoid dgbcon(char *norm, int *n, int *kl, int *ku, d *ab, int *ldab, int *ipiv, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dgbequ(int *m, int *n, int *kl, int *ku, d *ab, int *ldab, d *r, d *c, d *rowcnd, d *colcnd, d *amax, int *info)\nvoid dgbequb(int *m, int *n, int *kl, int *ku, d *ab, int *ldab, d *r, d *c, d *rowcnd, d *colcnd, d *amax, int *info)\nvoid dgbrfs(char *trans, int *n, int *kl, int *ku, int *nrhs, d *ab, int *ldab, d *afb, int *ldafb, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dgbsv(int *n, int *kl, int *ku, int *nrhs, d *ab, int *ldab, int *ipiv, d *b, int *ldb, int *info)\nvoid dgbsvx(char *fact, char *trans, int *n, int *kl, int *ku, int *nrhs, d *ab, int *ldab, d *afb, int *ldafb, int *ipiv, char *equed, d *r, d *c, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dgbtf2(int *m, int *n, int *kl, int *ku, d *ab, int *ldab, int *ipiv, int *info)\nvoid dgbtrf(int *m, int *n, int *kl, int *ku, d *ab, int *ldab, int *ipiv, int *info)\nvoid dgbtrs(char *trans, int *n, int *kl, int *ku, int *nrhs, d *ab, int *ldab, int *ipiv, d *b, int *ldb, int *info)\nvoid dgebak(char *job, char *side, int *n, int *ilo, int *ihi, d *scale, int *m, d *v, int *ldv, int *info)\nvoid dgebal(char *job, int *n, d *a, int *lda, int *ilo, int *ihi, d *scale, int *info)\nvoid dgebd2(int *m, int *n, d *a, int *lda, d *d, d *e, d *tauq, d *taup, d *work, int *info)\nvoid dgebrd(int *m, int *n, d *a, int *lda, d *d, d *e, d *tauq, d *taup, d *work, int *lwork, int *info)\nvoid dgecon(char *norm, int *n, d *a, int *lda, d *anorm, d *rcond, d *work, int *iwork, int *info)\nvoid dgeequ(int *m, int *n, d *a, int *lda, d *r, d *c, d *rowcnd, d *colcnd, d *amax, int *info)\nvoid dgeequb(int *m, int *n, d *a, int *lda, d *r, d *c, d *rowcnd, d *colcnd, d *amax, int *info)\nvoid dgees(char *jobvs, char *sort, dselect2 *select, int *n, d *a, int *lda, int *sdim, d *wr, d *wi, d *vs, int *ldvs, d *work, int *lwork, bint *bwork, int *info)\nvoid dgeesx(char *jobvs, char *sort, dselect2 *select, char *sense, int *n, d *a, int *lda, int *sdim, d *wr, d *wi, d *vs, int *ldvs, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid dgeev(char *jobvl, char *jobvr, int *n, d *a, int *lda, d *wr, d *wi, d *vl, int *ldvl, d *vr, int *ldvr, d *work, int *lwork, int *info)\nvoid dgeevx(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, d *a, int *lda, d *wr, d *wi, d *vl, int *ldvl, d *vr, int *ldvr, int *ilo, int *ihi, d *scale, d *abnrm, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *info)\nvoid dgehd2(int *n, int *ilo, int *ihi, d *a, int *lda, d *tau, d *work, int *info)\nvoid dgehrd(int *n, int *ilo, int *ihi, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dgejsv(char *joba, char *jobu, char *jobv, char *jobr, char *jobt, char *jobp, int *m, int *n, d *a, int *lda, d *sva, d *u, int *ldu, d *v, int *ldv, d *work, int *lwork, int *iwork, int *info)\nvoid dgelq2(int *m, int *n, d *a, int *lda, d *tau, d *work, int *info)\nvoid dgelqf(int *m, int *n, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dgels(char *trans, int *m, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, d *work, int *lwork, int *info)\nvoid dgelsd(int *m, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, d *s, d *rcond, int *rank, d *work, int *lwork, int *iwork, int *info)\nvoid dgelss(int *m, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, d *s, d *rcond, int *rank, d *work, int *lwork, int *info)\nvoid dgelsy(int *m, int *n, int *nrhs, d *a, int *lda, d *b, int *ldb, int *jpvt, d *rcond, int *rank, d *work, int *lwork, int *info)\nvoid dgemqrt(char *side, char *trans, int *m, int *n, int *k, int *nb, d *v, int *ldv, d *t, int *ldt, d *c, int *ldc, d *work, int *info)\nvoid dgeql2(int *m, int *n, d *a, int *lda, d *tau, d *work, int *info)\nvoid dgeqlf(int *m, int *n, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dgeqp3(int *m, int *n, d *a, int *lda, int *jpvt, d *tau, d *work, int *lwork, int *info)\nvoid dgeqr2(int *m, int *n, d *a, int *lda, d *tau, d *work, int *info)\nvoid dgeqr2p(int *m, int *n, d *a, int *lda, d *tau, d *work, int *info)\nvoid dgeqrf(int *m, int *n, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dgeqrfp(int *m, int *n, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dgeqrt(int *m, int *n, int *nb, d *a, int *lda, d *t, int *ldt, d *work, int *info)\nvoid dgeqrt2(int *m, int *n, d *a, int *lda, d *t, int *ldt, int *info)\nvoid dgeqrt3(int *m, int *n, d *a, int *lda, d *t, int *ldt, int *info)\nvoid dgerfs(char *trans, int *n, int *nrhs, d *a, int *lda, d *af, int *ldaf, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dgerq2(int *m, int *n, d *a, int *lda, d *tau, d *work, int *info)\nvoid dgerqf(int *m, int *n, d *a, int *lda, d *tau, d *work, int *lwork, int *info)\nvoid dgesc2(int *n, d *a, int *lda, d *rhs, int *ipiv, int *jpiv, d *scale)\nvoid dgesdd(char *jobz, int *m, int *n, d *a, int *lda, d *s, d *u, int *ldu, d *vt, int *ldvt, d *work, int *lwork, int *iwork, int *info)\nvoid dgesv(int *n, int *nrhs, d *a, int *lda, int *ipiv, d *b, int *ldb, int *info)\nvoid dgesvd(char *jobu, char *jobvt, int *m, int *n, d *a, int *lda, d *s, d *u, int *ldu, d *vt, int *ldvt, d *work, int *lwork, int *info)\nvoid dgesvj(char *joba, char *jobu, char *jobv, int *m, int *n, d *a, int *lda, d *sva, int *mv, d *v, int *ldv, d *work, int *lwork, int *info)\nvoid dgesvx(char *fact, char *trans, int *n, int *nrhs, d *a, int *lda, d *af, int *ldaf, int *ipiv, char *equed, d *r, d *c, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dgetc2(int *n, d *a, int *lda, int *ipiv, int *jpiv, int *info)\nvoid dgetf2(int *m, int *n, d *a, int *lda, int *ipiv, int *info)\nvoid dgetrf(int *m, int *n, d *a, int *lda, int *ipiv, int *info)\nvoid dgetri(int *n, d *a, int *lda, int *ipiv, d *work, int *lwork, int *info)\nvoid dgetrs(char *trans, int *n, int *nrhs, d *a, int *lda, int *ipiv, d *b, int *ldb, int *info)\nvoid dggbak(char *job, char *side, int *n, int *ilo, int *ihi, d *lscale, d *rscale, int *m, d *v, int *ldv, int *info)\nvoid dggbal(char *job, int *n, d *a, int *lda, d *b, int *ldb, int *ilo, int *ihi, d *lscale, d *rscale, d *work, int *info)\nvoid dgges(char *jobvsl, char *jobvsr, char *sort, dselect3 *selctg, int *n, d *a, int *lda, d *b, int *ldb, int *sdim, d *alphar, d *alphai, d *beta, d *vsl, int *ldvsl, d *vsr, int *ldvsr, d *work, int *lwork, bint *bwork, int *info)\nvoid dggesx(char *jobvsl, char *jobvsr, char *sort, dselect3 *selctg, char *sense, int *n, d *a, int *lda, d *b, int *ldb, int *sdim, d *alphar, d *alphai, d *beta, d *vsl, int *ldvsl, d *vsr, int *ldvsr, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, int *liwork, bint *bwork, int *info)\nvoid dggev(char *jobvl, char *jobvr, int *n, d *a, int *lda, d *b, int *ldb, d *alphar, d *alphai, d *beta, d *vl, int *ldvl, d *vr, int *ldvr, d *work, int *lwork, int *info)\nvoid dggevx(char *balanc, char *jobvl, char *jobvr, char *sense, int *n, d *a, int *lda, d *b, int *ldb, d *alphar, d *alphai, d *beta, d *vl, int *ldvl, d *vr, int *ldvr, int *ilo, int *ihi, d *lscale, d *rscale, d *abnrm, d *bbnrm, d *rconde, d *rcondv, d *work, int *lwork, int *iwork, bint *bwork, int *info)\nvoid dggglm(int *n, int *m, int *p, d *a, int *lda, d *b, int *ldb, d *d, d *x, d *y, d *work, int *lwork, int *info)\nvoid dgghrd(char *compq, char *compz, int *n, int *ilo, int *ihi, d *a, int *lda, d *b, int *ldb, d *q, int *ldq, d *z, int *ldz, int *info)\nvoid dgglse(int *m, int *n, int *p, d *a, int *lda, d *b, int *ldb, d *c, d *d, d *x, d *work, int *lwork, int *info)\nvoid dggqrf(int *n, int *m, int *p, d *a, int *lda, d *taua, d *b, int *ldb, d *taub, d *work, int *lwork, int *info)\nvoid dggrqf(int *m, int *p, int *n, d *a, int *lda, d *taua, d *b, int *ldb, d *taub, d *work, int *lwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Log Gamma Distribution Statistical Measures\nDESCRIPTION: Expressions for mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) of the Log Gamma distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loggamma.rst#2025-04-14_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\mu_{1}^{\\prime}\\\\ \\mu_{2} & = & \\mu_{2}^{\\prime}-\\mu^{2}\\\\ \\gamma_{1} & = & \\frac{\\mu_{3}^{\\prime}-3\\mu\\mu_{2}-\\mu^{3}}{\\mu_{2}^{3/2}}\\\\ \\gamma_{2} & = & \\frac{\\mu_{4}^{\\prime}-4\\mu\\mu_{3}-6\\mu^{2}\\mu_{2}-\\mu^{4}}{\\mu_{2}^{2}}-3\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Large Floating Point Number Array\nDESCRIPTION: Contains a series of scientific notation floating point numbers spanning multiple lines, likely used for numerical computation or statistical analysis in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-double-inp.txt#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n8.154844535553099627e-01 4.797965609394789777e-01 7.476703385713100447e-01 9.086708404761600910e-01 ...\n```\n\n----------------------------------------\n\nTITLE: Defining Folded Cauchy Distribution Formulas in LaTeX\nDESCRIPTION: This LaTeX code block defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Folded Cauchy Distribution. It uses the shape parameter c and is supported for x ≥ 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_foldcauchy.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\frac{1}{\\pi\\left(1+\\left(x-c\\right)^{2}\\right)}+\\frac{1}{\\pi\\left(1+\\left(x+c\\right)^{2}\\right)}\\\\\nF\\left(x;c\\right) & = & \\frac{1}{\\pi}\\tan^{-1}\\left(x-c\\right)+\\frac{1}{\\pi}\\tan^{-1}\\left(x+c\\right)\\\\\nG\\left(q;c\\right) & = & F^{-1}\\left(q;c\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Parsing Numerical Data Grid\nDESCRIPTION: Dataset with multiple columns representing computational parameters, including multiple sets of values for various configurations\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: numeric_sequence\nCODE:\n```\n25.0 37.0 0.1355634629726409912109375 0.5399201297574950841618974185791274793483e-25 ...\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Data Analysis in Plaintext\nDESCRIPTION: This snippet contains multiple rows of high-precision floating-point numbers, likely representing results from complex mathematical operations or scientific calculations. Each row contains six numbers, suggesting a structured output format for analysis or comparison.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n76.49312591552734375\t152.9862518310546875\t596167200161926734374775279692061483473805848530932854833290675599640521913655128888979470223020001.4\t0.2844412714109440655560631961173337073277138278908972143038962875366176409437369537658248142885273558e-11\t0.2095923693502704061210647396761868250167681901050374053398767397302714414331568758429380891000799233e111\t0.9999999999971555872858905593444393680388266629267228617210910278569610371246338235905626304623417519\n76.49312591552734375 7649.3125 0.1370543781717626238626659521982192432483665212936269130702466193589183695345712305328128312282162477e-3028 0.6539091981079127182312227251265392518337530977209765220846457801683209199242173273269744880301885647e-3139 0.2095923693508665733212266664105616002964602515885112111884076725851047321087565163648517442289689027e111 1.0\n76.66892242431640625 0.766689240932464599609375 0.4488464702502950046259288416482720965186308071384778518157728633611059492520992611162781320049642864e111 1.0 0.8721894906464812908020288700698180546604536334846266549430697676501728524188815019788559904110835842e-11 0.1943180014672083842033261775328204350472782894788191437488951736682953249353282695825697978138267625e-121\n76.66892242431640625\t38.334461212158203125\t0.448846455472120894394405798489075125537304391075684796459845221141614259449743648712749774717318238e111\t0.999999967075213709510484718141138021588117712607774693279636765017436992497533819700804894634778285\t0.1477817411023152304315919697098132641606279305535592764221949168980235561240352835728764604835443201e104\t0.3292478629048951528185886197841188228739222530672036323498256300750246618029919510536522171498388696e-7\n76.66892242431640625\t74.66892242431640625\t0.2586401247543923870698747204830307352368892844471364589497705860380253823565157883651307603675501955e111\t0.5762329480059499157542953888677713666857774551387583623662657389393162741485837032303115672863647067\t0.1902063454959026175560541211652413612817415226913413928660022773230805668955834727511473716374140909e111\t0.4237670519940500842457046111322286333142225448612416376337342610606837258514162967696884327136352933\n76.66892242431640625\t76.66892242431640625\t0.2176060121931860995839566139994411238233069861787977305760201030781773165102945417863382266658339813e111\t0.4848116819807899066241302106664858704043448057989854381936277707919399546154937459796565134629064748\t0.2312404580571089050419722276488309726953238209596801212397527602829286327418047193299399053391303051e111\t0.5151883180192100933758697893335141295956551942010145618063722292080600453845062540203434865370935252\n76.66892242431640625\t78.66892242431640625\t0.1776151359243554714845888887637843469290147016342041202242485959056111440952994130837236204251724154e111\t0.3957146768366253712883556927942301194211761225929087680895714536373640226182000808691584053388276181\t0.271231334325939533141339952884487749589616105504273731591524267455494805156799848032554511579791871e111\t0.6042853231633746287116443072057698805788238774070912319104285463626359773817999191308415946611723819\n76.66892242431640625\t153.3378448486328125\t1208340354750040169673093110162630940646939904953476810111867891477008100681713918881377104158094853.0\t0.2692101720386083368586116719236877857848577387912425077510921207911619506768524998186418313361997967e-11\t0.4488464702490866642711788014785990034084681761978309119108193865509940813606222530155964180860829093e111\t0.9999999999973078982796139166314138832807631221421514226120875749224890787920883804932314750018135817\n76.66892242431640625 7666.89208984375 0.1821123293565225789529725592026371278350411294653651926509483135957711850671254861487385053133806531e-3035 0.4057341238641563885831526096175456837680872294050387714943344891563851270111831763997700135576580181e-3146 0.4488464702502950046259288416482720965186308071384778518157728633611059492520992611162781320049642864e111 1.0\n79.32462310791015625 0.793246209621429443359375 0.4671121597949982795711144175493706605009846561466580157372296518317719005372678466272806286973583136e116 1.0 0.6039168545348148856452350861970003224978502524901460062877985188730753683893012418024349808946731235e-10 0.1292873332177556976975851675496753973570456780369174162484505186987337201864822887596441509654278919e-125\n79.32462310791015625\t39.662311553955078125\t0.4671121507351240492604208198508603377019269254024439937901993046380224468789840420121404558453316837e116\t0.9999999806044992828129231033044713064068338867545802771386030451446152224507990807321593976028763138\t0.9059874230310693597698510322799057730744214021947030347193749453658283804615140172852026629832492352e108\t0.1939550071718707689669552869359316611324541972286139695485538477754920091926784060239712368622000466e-7\n79.32462310791015625\t77.32462310791015625\t0.2685596907607638612260554874823900767470629784663574316924676978828936868056565540764625568568498545e116\t0.5749362013582064993583896500521535492965535315276841309638485958891645153801820177715668270529624124\t0.1985524690342344183450589300669805837539216776803005840447619539488782137316112925508180718405084591e116\t0.4250637986417935006416103499478464507034464684723158690361514041108354846198179822284331729470375876\n79.32462310791015625\t79.32462310791015625\t0.2265812192859111793701268319180181432592332033520631459548418870087313461493587143570358980254121858e116\t0.4850681245064375532830474944621702586601181813161844180209856045192746973602966734348745477845995594\t0.2405309405090871002009875856313525172417514527945948697823877648230405543879091322702447306719461278e116\t0.5149318754935624467169525055378297413398818186838155819790143954807253026397033265651254522154004406\n79.32462310791015625\t81.32462310791015625\t0.1856351400007264179915509790071180444141831443962993101439038589137498188297565091899947197479506563e116\t0.3974102067524771654238415034508869981945050779154473286311149558701105627077748452563626311397099272\t0.2814770197942718615795634385422526160868015117503587055933257929180220817075113374372859089494076573e116\t0.6025897932475228345761584965491130018054949220845526713688850441298894372922251547436373688602900728\n79.32462310791015625\t158.6492462158203125\t0.5477330720068224780701445363285029876343876715557225104230520850538844174288125862419613510382120732e104\t0.1172594334189900631026684846558912506266654225675454569702894665073176239070434312256368453610018499e-11\t0.4671121597944505464991075950713005159646561531590236280656739293213488484522139622098518161111163522e116\t0.9999999999988274056658100993689733151534410874937333457743245454302971053349268237609295656877436315\n79.32462310791015625 7932.46240234375 0.2507976175576844893816025545348994505732738811599451336268458914861545435100080396913936264183100242e-3139 0.5369109159302385766715005099968927909596208804645589535759265880326078668348439316806652406126744246e-3255 0.4671121597949982795711144175493706605009846561466580157372296518317719005372678466272806286973583136e116 1.0\n79.50051116943359375 0.7950050830841064453125 0.1007179855256139495130132385414409112491773013873557959418162063411915085777708335264524976384187991e117 1.0 0.6887000237791040303344447785375139417032139911190313071484984882544945606603220114308768983302289135e-10 0.6837905069139396906610398476672272204595124818016865895753945696678209963279127701144558535997180328e-126\n79.50051116943359375\t39.750255584716796875\t0.1007179836393830335336233439903068878202174926971471695238825534389799961797697618010140027702267658e117\t0.9999999812721540632909521979986548649380838741865786059637062956721161538067683429285376975236657302\t0.1886230915979389894551134023428959808690208626417933652902211512398001071725438494868192033298369219e109\t0.1872784593670904780200134513506191612581342139403629370432788384619323165707146230247633426975256935e-7\n79.50051116943359375\t77.50051116943359375\t0.5789799949107917152570710484848434458064808949077017980685125521673178404641929193096087412095242976e116\t0.5748526361893420229789120569013624245836437256323742750737512004325005902604086693828613549873692166\t0.4281998603453477798730613369295656666852921189658561613496495112445972453135154159549162351746636933e116\t0.4251473638106579770210879430986375754163562743676257249262487995674994097395913306171386450126307834\n79.50051116943359375\t79.50051116943359375\t0.4885674911797652114508761964378804385389577759098921348148099363155387118919106051255954421534190815e116\t0.4850846535800856274945033512970544897150855947006202262011552441697614121488952414904204770326254579\t0.5186123640763742836792561889765286739528152379636658246033521270963763738857977301389295342307689094e116\t0.5149153464199143725054966487029455102849144052993797737988447558302385878511047585095795229673745421\n79.50051116943359375\t81.50051116943359375\t0.4003737369276933595165444490079175288966803252286052829692800846860985237220765734659062956459984663e116\t0.3975196037115663804827922579647907397844393421819002221608464511372100484695665027416987597795269932\t0.6068061183284461356135879364064915835950926886449526764488819787258165620556317617986186807381895246e116\t0.6024803962884336195172077420352092602155606578180997778391535488627899515304334972583012402204730068\n79.50051116943359375\t159.0010223388671875\t0.1117782601617957330465406642863402034183538751360069213080811823615253974473994651893700610377698832e105\t0.1109814295614252587586323883157197260814952349004543110702484673237072021217283859901908230123439344e-11\t0.100717985525502171252851442808394370584890961183937442066680199419883427395409308129005098173229429e117\t0.9999999999988901857043857474124136761168428027391850476509954568892975153267629279787827161400980918\n79.50051116943359375 7950.05126953125 0.332617490333505740193238740221960311618356967098140848780280664105621628940315461991208307850364067e-3146 0.3302463692037571600524407642610776659937268500918407630656802304688906743772950818205739444343777544e-3262 0.1007179855256139495130132385414409112491773013873557959418162063411915085777708335264524976384187991e117 1.0\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Number Series\nDESCRIPTION: List of decimal values with high-precision floating-point representation showing exponential growth and complex numerical patterns\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/expinti_data_double_ipp/expinti_data_double.txt#2025-04-14_snippet_0\n\nLANGUAGE: numeric\nCODE:\n```\n102.87009429931640625\t4654899469800805764672952463660041015404000.0\n```\n\n----------------------------------------\n\nTITLE: Defining Alternative Probability Density Function for Normal Inverse Gaussian Distribution in LaTeX\nDESCRIPTION: This LaTeX equation provides an alternative parametrization of the probability density function for the Normal Inverse Gaussian Distribution. It uses parameters α, β, δ, and μ, which correspond to a, b, scale, and location in the SciPy implementation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_norminvgauss.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n        g(x, \\alpha, \\beta, \\delta, \\mu) = \\frac{\\alpha\\delta K_1 \\left(\\alpha\\sqrt{\\delta^2 + (x - \\mu)^2}\\right)}{\\pi \\sqrt{\\delta^2 + (x - \\mu)^2}} \\,\n        e^{\\delta \\sqrt{\\alpha^2 - \\beta^2} + \\beta (x - \\mu)}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: High Precision Numeric Data Matrix in SciPy\nDESCRIPTION: A numerical dataset with multiple columns of extremely precise floating-point values, representing scientific or computational data with very small numerical variations\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/nccs_big_ipp/nccs_big.txt#2025-04-14_snippet_0\n\nLANGUAGE: numeric\nCODE:\n```\n2.224560546875000000000000000000000000000e2\t1.468006896972656250000000000000000000000e1\t9.485444946289062500000000000000000000000e2\t1.000000000000000000000000000000000000000\t2.880074718448242018542999492358797222097e-81\n```\n\n----------------------------------------\n\nTITLE: Defining P_k for Fisher's Noncentral Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines P_k, a summation used in the distribution's calculations. It involves binomial coefficients and the ω parameter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nchypergeom_fisher.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\nP_k = \\sum_{y=x_l}^{x_u} \\binom{n}{y} \\binom{M - n}{N-y} \\omega^y y^k,\n```\n\n----------------------------------------\n\nTITLE: Defining Burr12 Distribution Equations in LaTeX\nDESCRIPTION: This LaTeX code block defines the key equations for the Burr12 distribution, including its probability density function, cumulative distribution function, quantile function, survival function, mean, nth moment, mode, and median. It uses two shape parameters c and d, with support x ≥ 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_burr12.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\nf\\left(x;c,d\\right) & = & {cd} \\frac{x^{c-1}} {\\left(1+x^{c}\\right)^{d+1}} \\\\\nF\\left(x;c,d\\right) & = & 1 - \\left(1+x^{c}\\right)^{-d}\\\\\nG\\left(q;c,d\\right) & = & \\left((1-q)^{-1/d}-1\\right)^{-1/c}\\\\\nS\\left(x;c,d\\right) & = & \\left(1+x^{c}\\right)^{-d}\\\\\n\\mu & = & d \\,  B\\left(d-\\frac{1}{c}, 1+\\frac{1}{c}\\right)\\\\\n\\mu_{n} & = & d \\, B\\left(d-\\frac{n}{c}, 1+\\frac{n}{c}\\right)\\\\\nm_{d} & = & \\left(\\frac{c-1}{c d + 1}\\right)^{1/c} \\,\\text{if }\\quad c>1 \\text{, otherwise }\\quad 0\\\\\nm_{n} & = & \\left(2^{1/d}-1\\right)^{-1/c}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Importing SciPy FFT Module in Python\nDESCRIPTION: Changes the import behavior for scipy.fft. The submodule must now be explicitly imported, as it no longer aliases numpy.fft.fft.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.6.0-notes.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Old usage (no longer works):\nimport scipy\nscipy.fft(x)\n\n# New usage:\nfrom scipy import fft\nfft.fft(x)\n```\n\n----------------------------------------\n\nTITLE: Numeric Matrix Data in Scientific Notation\nDESCRIPTION: A three-column matrix containing decimal values in scientific notation format with high precision. Values appear to represent related measurements or calculations with consistent patterns.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/beta_exp_data_ipp/beta_exp_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.1730655412757187150418758392333984375e-5\t0.1730655412757187150418758392333984375e-5\t1155631.551635027016649268884796909927277\n0.216575062950141727924346923828125e-5\t0.1730655412757187150418758392333984375e-5\t1039549.452063747329381617654200841254652\n0.216575062950141727924346923828125e-5\t0.216575062950141727924346923828125e-5\t923467.3524924676425690820378921903570447\n```\n\n----------------------------------------\n\nTITLE: LAPACK Function Prototypes for Complex Matrix Operations in C\nDESCRIPTION: This is a collection of LAPACK function prototypes for operations on complex matrices and vectors. These functions are part of the SciPy library's interface to LAPACK and handle various numerical linear algebra operations including solving linear systems, eigenvalue calculations, and matrix transformations. The parameters typically include input/output matrices, dimensions, work arrays, and status information.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid csptrs(char *uplo, int *n, int *nrhs, c *ap, int *ipiv, c *b, int *ldb, int *info)\nvoid csrscl(int *n, s *sa, c *sx, int *incx)\nvoid cstedc(char *compz, int *n, s *d, s *e, c *z, int *ldz, c *work, int *lwork, s *rwork, int *lrwork, int *iwork, int *liwork, int *info)\nvoid cstegr(char *jobz, char *range, int *n, s *d, s *e, s *vl, s *vu, int *il, int *iu, s *abstol, int *m, s *w, c *z, int *ldz, int *isuppz, s *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid cstein(int *n, s *d, s *e, int *m, s *w, int *iblock, int *isplit, c *z, int *ldz, s *work, int *iwork, int *ifail, int *info)\nvoid cstemr(char *jobz, char *range, int *n, s *d, s *e, s *vl, s *vu, int *il, int *iu, int *m, s *w, c *z, int *ldz, int *nzc, int *isuppz, bint *tryrac, s *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid csteqr(char *compz, int *n, s *d, s *e, c *z, int *ldz, s *work, int *info)\nvoid csycon(char *uplo, int *n, c *a, int *lda, int *ipiv, s *anorm, s *rcond, c *work, int *info)\nvoid csyconv(char *uplo, char *way, int *n, c *a, int *lda, int *ipiv, c *work, int *info)\nvoid csyequb(char *uplo, int *n, c *a, int *lda, s *s, s *scond, s *amax, c *work, int *info)\nvoid csymv(char *uplo, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)\nvoid csyr(char *uplo, int *n, c *alpha, c *x, int *incx, c *a, int *lda)\nvoid csyrfs(char *uplo, int *n, int *nrhs, c *a, int *lda, c *af, int *ldaf, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid csysv(char *uplo, int *n, int *nrhs, c *a, int *lda, int *ipiv, c *b, int *ldb, c *work, int *lwork, int *info)\nvoid csysvx(char *fact, char *uplo, int *n, int *nrhs, c *a, int *lda, c *af, int *ldaf, int *ipiv, c *b, int *ldb, c *x, int *ldx, s *rcond, s *ferr, s *berr, c *work, int *lwork, s *rwork, int *info)\nvoid csyswapr(char *uplo, int *n, c *a, int *lda, int *i1, int *i2)\nvoid csytf2(char *uplo, int *n, c *a, int *lda, int *ipiv, int *info)\nvoid csytrf(char *uplo, int *n, c *a, int *lda, int *ipiv, c *work, int *lwork, int *info)\nvoid csytri(char *uplo, int *n, c *a, int *lda, int *ipiv, c *work, int *info)\nvoid csytri2(char *uplo, int *n, c *a, int *lda, int *ipiv, c *work, int *lwork, int *info)\nvoid csytri2x(char *uplo, int *n, c *a, int *lda, int *ipiv, c *work, int *nb, int *info)\nvoid csytrs(char *uplo, int *n, int *nrhs, c *a, int *lda, int *ipiv, c *b, int *ldb, int *info)\nvoid csytrs2(char *uplo, int *n, int *nrhs, c *a, int *lda, int *ipiv, c *b, int *ldb, c *work, int *info)\nvoid ctbcon(char *norm, char *uplo, char *diag, int *n, int *kd, c *ab, int *ldab, s *rcond, c *work, s *rwork, int *info)\nvoid ctbrfs(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, c *ab, int *ldab, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid ctbtrs(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, c *ab, int *ldab, c *b, int *ldb, int *info)\nvoid ctfsm(char *transr, char *side, char *uplo, char *trans, char *diag, int *m, int *n, c *alpha, c *a, c *b, int *ldb)\nvoid ctftri(char *transr, char *uplo, char *diag, int *n, c *a, int *info)\nvoid ctfttp(char *transr, char *uplo, int *n, c *arf, c *ap, int *info)\nvoid ctfttr(char *transr, char *uplo, int *n, c *arf, c *a, int *lda, int *info)\nvoid ctgevc(char *side, char *howmny, bint *select, int *n, c *s, int *lds, c *p, int *ldp, c *vl, int *ldvl, c *vr, int *ldvr, int *mm, int *m, c *work, s *rwork, int *info)\nvoid ctgex2(bint *wantq, bint *wantz, int *n, c *a, int *lda, c *b, int *ldb, c *q, int *ldq, c *z, int *ldz, int *j1, int *info)\nvoid ctgexc(bint *wantq, bint *wantz, int *n, c *a, int *lda, c *b, int *ldb, c *q, int *ldq, c *z, int *ldz, int *ifst, int *ilst, int *info)\nvoid ctgsen(int *ijob, bint *wantq, bint *wantz, bint *select, int *n, c *a, int *lda, c *b, int *ldb, c *alpha, c *beta, c *q, int *ldq, c *z, int *ldz, int *m, s *pl, s *pr, s *dif, c *work, int *lwork, int *iwork, int *liwork, int *info)\nvoid ctgsja(char *jobu, char *jobv, char *jobq, int *m, int *p, int *n, int *k, int *l, c *a, int *lda, c *b, int *ldb, s *tola, s *tolb, s *alpha, s *beta, c *u, int *ldu, c *v, int *ldv, c *q, int *ldq, c *work, int *ncycle, int *info)\nvoid ctgsna(char *job, char *howmny, bint *select, int *n, c *a, int *lda, c *b, int *ldb, c *vl, int *ldvl, c *vr, int *ldvr, s *s, s *dif, int *mm, int *m, c *work, int *lwork, int *iwork, int *info)\nvoid ctgsy2(char *trans, int *ijob, int *m, int *n, c *a, int *lda, c *b, int *ldb, c *c, int *ldc, c *d, int *ldd, c *e, int *lde, c *f, int *ldf, s *scale, s *rdsum, s *rdscal, int *info)\nvoid ctgsyl(char *trans, int *ijob, int *m, int *n, c *a, int *lda, c *b, int *ldb, c *c, int *ldc, c *d, int *ldd, c *e, int *lde, c *f, int *ldf, s *scale, s *dif, c *work, int *lwork, int *iwork, int *info)\nvoid ctpcon(char *norm, char *uplo, char *diag, int *n, c *ap, s *rcond, c *work, s *rwork, int *info)\nvoid ctpmqrt(char *side, char *trans, int *m, int *n, int *k, int *l, int *nb, c *v, int *ldv, c *t, int *ldt, c *a, int *lda, c *b, int *ldb, c *work, int *info)\nvoid ctpqrt(int *m, int *n, int *l, int *nb, c *a, int *lda, c *b, int *ldb, c *t, int *ldt, c *work, int *info)\nvoid ctpqrt2(int *m, int *n, int *l, c *a, int *lda, c *b, int *ldb, c *t, int *ldt, int *info)\nvoid ctprfb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, c *v, int *ldv, c *t, int *ldt, c *a, int *lda, c *b, int *ldb, c *work, int *ldwork)\nvoid ctprfs(char *uplo, char *trans, char *diag, int *n, int *nrhs, c *ap, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid ctptri(char *uplo, char *diag, int *n, c *ap, int *info)\nvoid ctptrs(char *uplo, char *trans, char *diag, int *n, int *nrhs, c *ap, c *b, int *ldb, int *info)\nvoid ctpttf(char *transr, char *uplo, int *n, c *ap, c *arf, int *info)\nvoid ctpttr(char *uplo, int *n, c *ap, c *a, int *lda, int *info)\nvoid ctrcon(char *norm, char *uplo, char *diag, int *n, c *a, int *lda, s *rcond, c *work, s *rwork, int *info)\nvoid ctrevc(char *side, char *howmny, bint *select, int *n, c *t, int *ldt, c *vl, int *ldvl, c *vr, int *ldvr, int *mm, int *m, c *work, s *rwork, int *info)\nvoid ctrexc(char *compq, int *n, c *t, int *ldt, c *q, int *ldq, int *ifst, int *ilst, int *info)\nvoid ctrrfs(char *uplo, char *trans, char *diag, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, c *x, int *ldx, s *ferr, s *berr, c *work, s *rwork, int *info)\nvoid ctrsen(char *job, char *compq, bint *select, int *n, c *t, int *ldt, c *q, int *ldq, c *w, int *m, s *s, s *sep, c *work, int *lwork, int *info)\nvoid ctrsna(char *job, char *howmny, bint *select, int *n, c *t, int *ldt, c *vl, int *ldvl, c *vr, int *ldvr, s *s, s *sep, int *mm, int *m, c *work, int *ldwork, s *rwork, int *info)\nvoid ctrsyl(char *trana, char *tranb, int *isgn, int *m, int *n, c *a, int *lda, c *b, int *ldb, c *c, int *ldc, s *scale, int *info)\nvoid ctrti2(char *uplo, char *diag, int *n, c *a, int *lda, int *info)\nvoid ctrtri(char *uplo, char *diag, int *n, c *a, int *lda, int *info)\nvoid ctrtrs(char *uplo, char *trans, char *diag, int *n, int *nrhs, c *a, int *lda, c *b, int *ldb, int *info)\nvoid ctrttf(char *transr, char *uplo, int *n, c *a, int *lda, c *arf, int *info)\nvoid ctrttp(char *uplo, int *n, c *a, int *lda, c *ap, int *info)\nvoid ctzrzf(int *m, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cunbdb(char *trans, char *signs, int *m, int *p, int *q, c *x11, int *ldx11, c *x12, int *ldx12, c *x21, int *ldx21, c *x22, int *ldx22, s *theta, s *phi, c *taup1, c *taup2, c *tauq1, c *tauq2, c *work, int *lwork, int *info)\nvoid cuncsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, c *x11, int *ldx11, c *x12, int *ldx12, c *x21, int *ldx21, c *x22, int *ldx22, s *theta, c *u1, int *ldu1, c *u2, int *ldu2, c *v1t, int *ldv1t, c *v2t, int *ldv2t, c *work, int *lwork, s *rwork, int *lrwork, int *iwork, int *info)\nvoid cung2l(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *info)\nvoid cung2r(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *info)\nvoid cungbr(char *vect, int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cunghr(int *n, int *ilo, int *ihi, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cungl2(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *info)\nvoid cunglq(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cungql(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cungqr(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cungr2(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *info)\nvoid cungrq(int *m, int *n, int *k, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cungtr(char *uplo, int *n, c *a, int *lda, c *tau, c *work, int *lwork, int *info)\nvoid cunm2l(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *info)\nvoid cunm2r(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *info)\nvoid cunmbr(char *vect, char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cunmhr(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cunml2(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *info)\nvoid cunmlq(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\nvoid cunmql(char *side, char *trans, int *m, int *n, int *k, c *a, int *lda, c *tau, c *c, int *ldc, c *work, int *lwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density and Cumulative Distribution Functions in LaTeX\nDESCRIPTION: LaTeX equations defining the probability density function f(x, ρ) and cumulative distribution function F(x, ρ) for the Relativistic Breit-Wigner Distribution. The equations use the shape parameter ρ and introduce variables c, k for intermediate calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rel_breitwigner.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n    f\\left(x, \\rho\\right) & = & \\frac{k}{\\left(x^2 - \\rho^2\\right)^2 + \\rho^2}\\\\\n    F\\left(x, \\rho\\right) & = & -\\frac{i k\\left(\\frac{\\tan^{-1}\\left(\\frac{x}{c}\\right)}{c} -\n                                 \\frac{\\tan^{-1}\\left(\\frac{x}{\\bar{c}}\\right)}{\\bar{c}}\\right)}{2\\rho}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Fisk Distribution Equations in LaTeX\nDESCRIPTION: This LaTeX code block defines the mathematical equations for various properties of the Fisk (Log Logistic) distribution, including the probability density function, cumulative distribution function, inverse CDF, moments, skewness, kurtosis, mode, and entropy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_fisk.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\\textrm{Let }k & = & \\Gamma\\left(1-\\frac{2}{c}\\right)\\Gamma\\left(\\frac{2}{c}+1\\right)-\\Gamma^{2}\\left(1-\\frac{1}{c}\\right)\\Gamma^{2}\\left(\\frac{1}{c}+1\\right)\\\\\nf\\left(x;c,d\\right) & = & \\frac{cx^{c-1}}{\\left(1+x^{c}\\right)^{2}} \\\\\nF\\left(x;c,d\\right) & = & \\left(1+x^{-c}\\right)^{-1}\\\\\nG\\left(q;c,d\\right) & = & \\left(q^{-1}-1\\right)^{-1/c}\\\\\n\\mu & = & \\Gamma\\left(1-\\frac{1}{c}\\right)\\Gamma\\left(\\frac{1}{c}+1\\right)\\\\\n\\mu_{2} & = & k\\\\\n\\gamma_{1} & = & \\frac{1}{\\sqrt{k^{3}}}\\left[2\\Gamma^{3}\\left(1-\\frac{1}{c}\\right)\\Gamma^{3}\\left(\\frac{1}{c}+1\\right)+\\Gamma\\left(1-\\frac{3}{c}\\right)\\Gamma\\left(\\frac{3}{c}+1\\right)\\right.\\\\  &  & \\left.-3\\Gamma\\left(1-\\frac{2}{c}\\right)\\Gamma\\left(1-\\frac{1}{c}\\right)\\Gamma\\left(\\frac{1}{c}+1\\right)\\Gamma\\left(\\frac{2}{c}+1\\right)\\right]\\\\\n\\gamma_{2} & = & -3+\\frac{1}{k^{2}}\\left[6\\Gamma\\left(1-\\frac{2}{c}\\right)\\Gamma^{2}\\left(1-\\frac{1}{c}\\right)\\Gamma^{2}\\left(\\frac{1}{c}+1\\right)\\Gamma\\left(\\frac{2}{c}+1\\right)\\right.\\\\  &  & -3\\Gamma^{4}\\left(1-\\frac{1}{c}\\right)\\Gamma^{4}\\left(\\frac{1}{c}+1\\right)+\\Gamma\\left(1-\\frac{4}{c}\\right)\\Gamma\\left(\\frac{4}{c}+1\\right)\\\\  &  & \\left.-4\\Gamma\\left(1-\\frac{3}{c}\\right)\\Gamma\\left(1-\\frac{1}{c}\\right)\\Gamma\\left(\\frac{1}{c}+1\\right)\\Gamma\\left(\\frac{3}{c}+1\\right)\\right]\\\\\nm_{d} & = & \\left(\\frac{c-1}{c+1}\\right)^{1/c}\\, \\text{if }c>1, \\text{otherwise } 0\\\\\nm_{n} & = & 1\\\\\nh\\left[X\\right] & = & 2-\\log c\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Moment Generating Function for Gumbel Left-skewed Distribution\nDESCRIPTION: The moment generating function M(t) for the Gumbel Left-skewed distribution expressed in terms of the Gamma function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_l.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nM\\left(t\\right)=\\Gamma\\left(1+t\\right)\n```\n\n----------------------------------------\n\nTITLE: Binary Matrix Data in Scientific Notation\nDESCRIPTION: A matrix of binary values (1.0 and 0.0) formatted in scientific notation with 18 decimal places of precision. Each value is represented in the format 1.000000000000000000e+00 or 0.000000000000000000e+00.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-boolean-inp.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 ...\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Table\nDESCRIPTION: Three-column data table containing scientific notation values. First column appears to be parameters (0.0, 0.1e1, 0.4e1, 0.7e1, 0.1e2), second column contains small decimal values, and third column contains large negative exponential values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_prime_int_data_ipp/bessel_k_prime_int_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.0 0.177219114266335964202880859375e-2 -564.26705890503944938767579913547914444248945617307\n0.0 0.22177286446094512939453125e-2 -450.90433365191537768820321413950713211111795723233\n0.0 0.7444499991834163665771484375e-2 -134.30682303430738211464350075539051302297649874874\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Cosine Distribution in SciPy\nDESCRIPTION: Reference to the SciPy implementation of the Cosine Distribution which approximates the normal distribution with support on [-π,π].\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_cosine.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.cosine\n```\n\n----------------------------------------\n\nTITLE: LAPACK Single-Precision Function Declarations for Orthogonal Matrix Operations in C\nDESCRIPTION: C function declarations for LAPACK routines that handle orthogonal matrices, including generation, multiplication, and transformations. These functions work with single-precision floating-point values and include operations for generating orthogonal matrices from various decompositions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nvoid sopgtr(char *uplo, int *n, s *ap, s *tau, s *q, int *ldq, s *work, int *info)\nvoid sopmtr(char *side, char *uplo, char *trans, int *m, int *n, s *ap, s *tau, s *c, int *ldc, s *work, int *info)\nvoid sorbdb(char *trans, char *signs, int *m, int *p, int *q, s *x11, int *ldx11, s *x12, int *ldx12, s *x21, int *ldx21, s *x22, int *ldx22, s *theta, s *phi, s *taup1, s *taup2, s *tauq1, s *tauq2, s *work, int *lwork, int *info)\nvoid sorcsd(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, int *m, int *p, int *q, s *x11, int *ldx11, s *x12, int *ldx12, s *x21, int *ldx21, s *x22, int *ldx22, s *theta, s *u1, int *ldu1, s *u2, int *ldu2, s *v1t, int *ldv1t, s *v2t, int *ldv2t, s *work, int *lwork, int *iwork, int *info)\nvoid sorg2l(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *info)\nvoid sorg2r(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *info)\nvoid sorgbr(char *vect, int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorghr(int *n, int *ilo, int *ihi, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorgl2(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *info)\nvoid sorglq(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorgql(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorgqr(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorgr2(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *info)\nvoid sorgrq(int *m, int *n, int *k, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorgtr(char *uplo, int *n, s *a, int *lda, s *tau, s *work, int *lwork, int *info)\nvoid sorm2l(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *info)\nvoid sorm2r(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *info)\nvoid sormbr(char *vect, char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sormhr(char *side, char *trans, int *m, int *n, int *ilo, int *ihi, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sorml2(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *info)\nvoid sormlq(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sormql(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sormqr(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sormr2(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *info)\nvoid sormr3(char *side, char *trans, int *m, int *n, int *k, int *l, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *info)\nvoid sormrq(char *side, char *trans, int *m, int *n, int *k, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sormrz(char *side, char *trans, int *m, int *n, int *k, int *l, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\nvoid sormtr(char *side, char *uplo, char *trans, int *m, int *n, s *a, int *lda, s *tau, s *c, int *ldc, s *work, int *lwork, int *info)\n```\n\n----------------------------------------\n\nTITLE: Defining Rayleigh Distribution Entropy in LaTeX\nDESCRIPTION: This snippet defines the entropy of the Rayleigh distribution using LaTeX math notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rayleigh.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right]=\\frac{\\gamma}{2}+\\log\\left(\\frac{e}{\\sqrt{2}}\\right).\n```\n\n----------------------------------------\n\nTITLE: Enhanced Functionality for Univariate and Multivariate Optimization in scipy.optimize\nDESCRIPTION: The `scipy.optimize` module has new features, including benchmarks for the optimize function, custom minimization methods, and more controllable error estimation in the `curve_fit` function using the `absolute_sigma` keyword.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.14.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"A set of benchmarks for optimize, which can be run with ``optimize.bench()``,\\nhas been added. `scipy.optimize.curve_fit` now has more controllable error estimation via the\\n``absolute_sigma`` keyword. Support for passing custom minimization methods to ``optimize.minimize()`\\nand ``optimize.minimize_scalar()`` has been added, currently useful especially\\nfor combining ``optimize.basinhopping()`` with custom local optimizer routines.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Computing Entropy for Anglit Distribution in LaTeX\nDESCRIPTION: This snippet defines the formula for calculating the entropy of the Anglit distribution, along with its approximate numerical value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_anglit.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} h\\left[X\\right] & = & 1-\\log2\\\\  & \\approx & 0.30685281944005469058\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Setting Plot Title with Matplotlib\nDESCRIPTION: This code snippet sets the title of the current plot using Matplotlib. The title provides a description of what is being represented in the plot, improving its clarity.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> plt.title('Spline with Specified Interior Knots')\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Matrix Data in Scientific Notation\nDESCRIPTION: This snippet shows a matrix of numerical data using scientific notation. Each row contains multiple columns, with values ranging from 1 to very large numbers with varying exponents. The data might represent coefficients, calculations, or other numerical relationships.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/binomial_data_ipp/binomial_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.15e2\t0.15e2\t0.1e1\n0.19e2\t0.15e2\t0.3876e4\n0.19e2\t0.19e2\t0.1e1\n0.21e2\t0.15e2\t0.54264e5\n0.21e2\t0.19e2\t0.21e3\n0.21e2\t0.21e2\t0.1e1\n0.29e2\t0.15e2\t0.7755876e8\n0.29e2\t0.19e2\t0.2003001e8\n0.29e2\t0.21e2\t0.4292145e7\n0.29e2\t0.29e2\t0.1e1\n0.33e2\t0.15e2\t0.103715832e10\n0.33e2\t0.19e2\t0.8188092e9\n0.33e2\t0.21e2\t0.35481732e9\n0.33e2\t0.29e2\t0.4092e5\n0.33e2\t0.33e2\t0.1e1\n0.42e2\t0.15e2\t0.98672427616e11\n0.42e2\t0.19e2\t0.4467753108e12\n0.42e2\t0.21e2\t0.53825787444e12\n0.42e2\t0.29e2\t0.2551873128e11\n0.42e2\t0.33e2\t0.44589181e9\n0.42e2\t0.42e2\t0.1e1\n0.46e2\t0.15e2\t0.511738760544e12\n0.46e2\t0.19e2\t0.415424667196e13\n0.46e2\t0.21e2\t0.6943526580276e13\n0.46e2\t0.29e2\t0.174969502686e13\n0.46e2\t0.33e2\t0.10176623079e12\n0.46e2\t0.42e2\t0.163185e6\n0.46e2\t0.46e2\t0.1e1\n0.82e2\t0.15e2\t0.996731056598616e16\n0.82e2\t0.19e2\t0.19710382359693168e19\n0.82e2\t0.21e2\t0.1833065559451464624e20\n0.82e2\t0.29e2\t0.1257660762751009389168e23\n0.82e2\t0.33e2\t0.899986590548788671513e23\n0.82e2\t0.42e2\t0.41467066225715382349482e24\n0.82e2\t0.46e2\t0.23223183395337370425708e24\n0.82e2\t0.82e2\t0.1e1\n0.95e2\t0.15e2\t0.110375347398090219e18\n0.95e2\t0.19e2\t0.45038039715653129145e20\n0.95e2\t0.21e2\t0.611230538998149609825e21\n0.95e2\t0.29e2\t0.2146280142106099437545685e25\n0.95e2\t0.33e2\t0.3780222443838484815806271e26\n0.95e2\t0.42e2\t0.171987522327068244097964157e28\n0.95e2\t0.46e2\t0.308620560869098008873280965e28\n0.95e2\t0.82e2\t0.3489735464257595e16\n0.95e2\t0.95e2\t0.1e1\n0.122e3\t0.15e2\t0.6156937298378625264e19\n0.122e3\t0.19e2\t0.819751088529043274604e22\n0.122e3\t0.21e2\t0.205054879430622110547372e24\n0.122e3\t0.29e2\t0.965499981454662046766678536e28\n0.122e3\t0.33e2\t0.68890617994929806723272437813e30\n0.122e3\t0.42e2\t0.982048893026815201335532502524191e33\n0.122e3\t0.46e2\t0.9517963588769497111427223674615988e34\n0.122e3\t0.82e2\t0.254605268562507644790693611765531e33\n0.122e3\t0.95e2\t0.877923835320476575559398624e27\n0.122e3\t0.122e3\t0.1e1\n0.125e3\t0.15e2\t0.90648078331934398e19\n0.125e3\t0.19e2\t0.1350175763944140060675e23\n0.125e3\t0.21e2\t0.357796577445197116078875e24\n0.125e3\t0.29e2\t0.21471697865846785089593512375e29\n0.125e3\t0.33e2\t0.1743111472200107189546091504625e31\n0.125e3\t0.42e2\t0.339619764433637564049548277312025e34\n0.125e3\t0.46e2\t0.38244450869782214079034893241053e35\n0.125e3\t0.82e2\t0.655545126697486460839825744579025e34\n0.125e3\t0.95e2\t0.687094331707097122866992396e29\n0.125e3\t0.122e3\t0.31775e6\n0.125e3\t0.125e3\t0.1e1\n0.135e3\t0.15e2\t0.307563739414613748e20\n0.135e3\t0.19e2\t0.65183278299357679461e23\n0.135e3\t0.21e2\t0.2070345077412932009547e25\n0.135e3\t0.29e2\t0.2654598483954587033449048188e30\n0.135e3\t0.33e2\t0.322268385697858320141605625441e32\n0.135e3\t0.42e2\t0.165539796634100865734488051471458e36\n0.135e3\t0.46e2\t0.2961867439565318449706072684149998e37\n0.135e3\t0.82e2\t0.1323968752490674447090425029339391282e39\n0.135e3\t0.95e2\t0.319215598884570762368184126129732e35\n0.135e3\t0.122e3\t0.437531400061434e18\n0.135e3\t0.125e3\t0.393812684240976e15\n0.135e3\t0.135e3\t0.1e1\n0.137e3\t0.15e2\t0.388194525997363728e20\n0.137e3\t0.19e2\t0.87968625327656981292e23\n0.137e3\t0.21e2\t0.28916543839848387707556e25\n0.137e3\t0.29e2\t0.4280069137507949602563401336e30\n0.137e3\t0.33e2\t0.560540007685072462740701644251e32\n0.137e3\t0.42e2\t0.3453905364934565879468064249738192e36\n0.137e3\t0.46e2\t0.67381580139170956477318127290699344e37\n0.137e3\t0.95e2\t0.3453905364934565879468064249738192e36\n0.137e3\t0.122e3\t0.388194525997363728e20\n0.137e3\t0.125e3\t0.55587257066498976e17\n0.137e3\t0.135e3\t0.9316e4\n0.137e3\t0.137e3\t0.1e1\n0.143e3\t0.15e2\t0.76435265515004093841e20\n0.143e3\t0.19e2\t0.210374461432936964163e24\n0.143e3\t0.21e2\t0.76395982994646537557478e25\n0.143e3\t0.29e2\t0.17138496567725350060390313738e31\n0.143e3\t0.33e2\t0.27947962468928852152878073112114e33\n0.143e3\t0.42e2\t0.291038363317011408088847346619471914e37\n0.143e3\t0.46e2\t0.728184459077800535203086713053471437e38\n0.143e3\t0.95e2\t0.3005697554491346889987208985795179974e39\n0.143e3\t0.122e3\t0.76395982994646537557478e25\n0.143e3\t0.125e3\t0.31976918137806418552776e23\n0.143e3\t0.135e3\t0.3553074951283e13\n0.143e3\t0.137e3\t0.10679057389e11\n0.143e3\t0.143e3\t0.1e1\n0.144e3\t0.15e2\t0.85323087086516197776e20\n0.144e3\t0.19e2\t0.242351379570743382715776e24\n0.144e3\t0.21e2\t0.89439199603488629335584e25\n0.144e3\t0.29e2\t0.214603783108908731190974363328e31\n0.144e3\t0.33e2\t0.36256816175907700090220202956256e33\n0.144e3\t0.42e2\t0.410877689388721987890137430521607408e37\n0.144e3\t0.46e2\t0.1069985327624523235400453945711223336e39\n0.144e3\t0.122e3\t0.500046434146777336739856e26\n0.144e3\t0.125e3\t0.242351379570743382715776e24\n0.144e3\t0.135e3\t0.56849199220528e14\n0.144e3\t0.137e3\t0.219683466288e12\n0.144e3\t0.143e3\t0.144e3\n0.144e3\t0.144e3\t0.1e1\n0.145e3\t0.15e2\t0.95168058673421912904e20\n0.145e3\t0.19e2\t0.27889642887109357534752e24\n0.145e3\t0.21e2\t0.10458616082666009075532e26\n0.145e3\t0.29e2\t0.26825472888613591398871795416e31\n0.145e3\t0.33e2\t0.4693962808488050458108865561301e33\n0.145e3\t0.42e2\t0.57842004816858920625310609151100072e37\n0.145e3\t0.46e2\t0.156715022732884716296026082957704428e39\n0.145e3\t0.122e3\t0.315246665005577016640344e27\n0.145e3\t0.125e3\t0.1757047501887889524689376e25\n0.145e3\t0.135e3\t0.824313388697656e15\n0.145e3\t0.137e3\t0.398176282647e13\n0.145e3\t0.143e3\t0.1044e5\n0.145e3\t0.144e3\t0.145e3\n0.145e3\t0.145e3\t0.1e1\n0.148e3\t0.15e2\t0.131439605927052712464e21\n0.148e3\t0.19e2\t0.42244624913775365779698e24\n0.148e3\t0.21e2\t0.16608172537529972375104128e26\n0.148e3\t0.29e2\t0.51863815313548295889610045344e31\n0.148e3\t0.33e2\t0.100644585365316213131406856592232e34\n0.148e3\t0.42e2\t0.1587255130729102485141868921944628536e38\n0.148e3\t0.122e3\t0.6418858594895863473128136624e29\n0.148e3\t0.125e3\t0.525225250880542723214261376e27\n0.148e3\t0.135e3\t0.1525832904625819216e19\n0.148e3\t0.137e3\t0.12775329171405528e17\n0.148e3\t0.143e3\t0.552689424e9\n0.148e3\t0.144e3\t0.19190605e8\n0.148e3\t0.145e3\t0.529396e6\n0.148e3\t0.148e3\t0.1e1\n0.149e3\t0.15e2\t0.146152994650230254904e21\n0.149e3\t0.19e2\t0.484188393242502269321154e24\n0.149e3\t0.21e2\t0.19332950844468483467894649e26\n0.149e3\t0.29e2\t0.643975706809891340629324729688e31\n0.149e3\t0.33e2\t0.129276234650276859970513979588298e34\n0.149e3\t0.42e2\t0.2210289854940525890524658592240650952e38\n0.149e3\t0.122e3\t0.35422590023684579907262679888e30\n0.149e3\t0.125e3\t0.3260773432550036073288539376e28\n0.149e3\t0.135e3\t0.16239221627803361656e20\n0.149e3\t0.137e3\t0.158627003878285306e18\n0.149e3\t0.143e3\t0.13725120696e11\n0.149e3\t0.144e3\t0.571880029e9\n0.149e3\t0.145e3\t0.19720001e8\n0.149e3\t0.148e3\t0.149e3\n0.149e3\t0.149e3\t0.1e1\n```\n\n----------------------------------------\n\nTITLE: Processing Scientific Data Table - Plaintext\nDESCRIPTION: Tabular dataset with 6 columns of floating point numbers. Values include scientific notation with varying exponents (e.g., e1, e2) and high-precision decimal places. Data appears to be organized in rows with related measurements or calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/spherical_harmonic_ipp/spherical_harmonic.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.2e2\t0.19e2\t0.53311748504638671875e1\t-0.4181415557861328125e1\t-0.29360794196564600824227400804180898934317317747906e-1\t0.37542019709332888370517420902071583914255531491941e-1\n0.21e2\t0.1e1\t0.2091248035430908203125e1\t0.11432034969329833984375e1\t-0.25963017651416901147198375980087596910425766928618e-1\t-0.56972580737889016141484409524661404467483855145306e-1\n```\n\n----------------------------------------\n\nTITLE: Defining Gompertz Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code block defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Gompertz distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gompertz.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & ce^{x}\\exp\\left(-c\\left(e^{x}-1\\right)\\right)\\\\ F\\left(x;c\\right) & = & 1-\\exp\\left(-c\\left(e^{x}-1\\right)\\right)\\\\ G\\left(q;c\\right) & = & \\log\\left(1-\\frac{1}{c}\\log\\left(1-q\\right)\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Parsing Numeric Data in SciPy Project\nDESCRIPTION: Large dataset with multiple floating-point columns representing potentially computational or scientific measurements with high precision numeric values\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/negative_binomial_quantile_ipp/negative_binomial_quantile_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n16.6650257110595703125\t0.905791938304901123046875\t0.546881496906280517578125\t1.1824353951035366280881382415910759802663629391513\t0.86321874141731574301524061391743570672229255768239\n```\n\n----------------------------------------\n\nTITLE: Implementing Mielke's Beta-Kappa Distribution in SciPy\nDESCRIPTION: The Mielke's Beta-Kappa Distribution is implemented in SciPy's stats module. This distribution is a generalized F distribution with two shape parameters κ and θ, and support for x ≥ 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_mielke.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.mielke\n```\n\n----------------------------------------\n\nTITLE: Building SciPy with g77 ABI Support\nDESCRIPTION: Command for building SciPy with g77 ABI support for compatibility with certain BLAS/LAPACK implementations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/blas_lapack.rst#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m build -C-Duse-g77-abi=true -Csetup-args=-Dblas=blas -Csetup-args=-Dlapack=lapack\n```\n\n----------------------------------------\n\nTITLE: Exponentiated Weibull Distribution Mathematical Functions in LaTeX\nDESCRIPTION: Mathematical expressions defining the probability density function (f), cumulative distribution function (F), and inverse CDF (G) for the Exponentiated Weibull distribution. The distribution has two positive shape parameters a and c, with support on the non-negative real line.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_exponweib.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;a,c\\right) & = & ac\\left[1-\\exp\\left(-x^{c}\\right)\\right]^{a-1}\\exp\\left(-x^{c}\\right)x^{c-1}\\\\ F\\left(x;a,c\\right) & = & \\left[1-\\exp\\left(-x^{c}\\right)\\right]^{a}\\\\ G\\left(q;a,c\\right) & = & \\left[-\\log\\left(1-q^{1/a}\\right)\\right]^{1/c}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Generalized Gamma Distribution Moments in LaTeX\nDESCRIPTION: This LaTeX code defines various moments and properties of the Generalized Gamma Distribution, including raw moments, mean, variance, skewness, kurtosis, and mode.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gengamma.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*}  \\mu_{n}^{\\prime} & = & \\frac{\\Gamma\\left(a+\\frac{n}{c}\\right)}{\\Gamma\\left(a\\right)}\\\\\n\\mu & = & \\frac{\\Gamma\\left(a+\\frac{1}{c}\\right)}{\\Gamma\\left(a\\right)}\\\\\n\\mu_{2} & = & \\frac{\\Gamma\\left(a+\\frac{2}{c}\\right)}{\\Gamma\\left(a\\right)}-\\mu^{2}\\\\\n\\gamma_{1} & = & \\frac{\\Gamma\\left(a+\\frac{3}{c}\\right)/\\Gamma\\left(a\\right)-3\\mu\\mu_{2}-\\mu^{3}}{\\mu_{2}^{3/2}}\\\\\n\\gamma_{2} & = & \\frac{\\Gamma\\left(a+\\frac{4}{c}\\right)/\\Gamma\\left(a\\right)-4\\mu\\mu_{3}-6\\mu^{2}\\mu_{2}-\\mu^{4}}{\\mu_{2}^{2}}-3\\\\\nm_{d} & = & \\left(\\frac{ac-1}{c}\\right)^{1/c}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining MATLAB Object Wrapper Class in reStructuredText\nDESCRIPTION: This snippet defines the documentation structure for a class that wraps native MATLAB objects. It includes directives for module context, class definition, and a brief description of the class's purpose and usage.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/ndarray_subclass.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. raw:: html\n\n   <div class=\"prename\">{{ module }}.</div>\n   <div class=\"empty\"></div>\n\n{{ name }}\n{{ underline }}\n\n.. currentmodule:: {{ module }}\n\n.. class:: {{ objname }}\n\nThis is an ndarray wrapper for a native MATLAB object. This class is not meant\nto be instantiated directly, but can be used for type checking\n:func:`scipy.io.loadmat` outputs.\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Test Data\nDESCRIPTION: Collection of numerical test values organized in three columns, using scientific notation with varying exponents ranging from positive to negative values. Data appears to be used for testing numerical computation accuracy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_data_ipp/bessel_k_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0.93762989044189453125e1\t0.353451806640625e4\t0.2030427297652053795158460484630149203489e-1536\n0.93762989044189453125e1\t0.80715478515625e4\t0.5226939353263804188411440085354658326468e-3507\n0.93762989044189453125e1 0.1622925e5 0.5252465465326302525711470608778783375618e-7050\n```\n\n----------------------------------------\n\nTITLE: Linear System Solver Declarations (LAPACK)\nDESCRIPTION: Function declarations for solving linear systems, including tridiagonal solvers, general banded matrices, and auxiliary routines for condition number estimation and error bounds.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nvoid dgtsv(int *n, int *nrhs, d *dl, d *d, d *du, d *b, int *ldb, int *info);\nvoid dgtsvx(char *fact, char *trans, int *n, int *nrhs, d *dl, d *d, d *du, d *dlf, d *df, d *duf, d *du2, int *ipiv, d *b, int *ldb, d *x, int *ldx, d *rcond, d *ferr, d *berr, d *work, int *iwork, int *info);\nvoid dgttrf(int *n, d *dl, d *d, d *du, d *du2, int *ipiv, int *info);\n```\n\n----------------------------------------\n\nTITLE: Defining Core Functions of Inverse Normal Distribution in LaTeX\nDESCRIPTION: Mathematical definition of the probability density function (f), cumulative distribution function (F), and inverse CDF (G) for the Inverse Normal distribution with parameter μ.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_invgauss.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\mu\\right) & = & \\frac{1}{\\sqrt{2\\pi x^{3}}}\\exp\\left(-\\frac{\\left(x-\\mu\\right)^{2}}{2x\\mu^{2}}\\right).\\\\ F\\left(x;\\mu\\right) & = & \\Phi\\left(\\frac{1}{\\sqrt{x}}\\frac{x-\\mu}{\\mu}\\right)+\\exp\\left(\\frac{2}{\\mu}\\right)\\Phi\\left(-\\frac{1}{\\sqrt{x}}\\frac{x+\\mu}{\\mu}\\right)\\\\ G\\left(q;\\mu\\right) & = & F^{-1}\\left(q;\\mu\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Generalized Extreme Value Distribution\nDESCRIPTION: Indicates the location of the implementation of the Generalized Extreme Value Distribution in SciPy's stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genextreme.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.genextreme\n```\n\n----------------------------------------\n\nTITLE: Raw Moments Formula\nDESCRIPTION: General formula for raw moments of the Generalized Pareto Distribution when cn < 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genpareto.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\frac{\\left(-1\\right)^{n}}{c^{n}}\\sum_{k=0}^{n}\\binom{n}{k}\\frac{\\left(-1\\right)^{k}}{1-ck}\\quad \\text{ if }cn<1\n```\n\n----------------------------------------\n\nTITLE: LAPACK Single-Precision Function Declarations for Matrix Factorizations and Solvers in C\nDESCRIPTION: C function declarations for LAPACK routines that perform matrix factorizations, condition number estimation, and linear system solving. These declarations include functions for handling banded matrices, positive definite matrices, and packed storage formats.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nvoid spbcon(char *uplo, int *n, int *kd, s *ab, int *ldab, s *anorm, s *rcond, s *work, int *iwork, int *info)\nvoid spbequ(char *uplo, int *n, int *kd, s *ab, int *ldab, s *s, s *scond, s *amax, int *info)\nvoid spbrfs(char *uplo, int *n, int *kd, int *nrhs, s *ab, int *ldab, s *afb, int *ldafb, s *b, int *ldb, s *x, int *ldx, s *ferr, s *berr, s *work, int *iwork, int *info)\nvoid spbstf(char *uplo, int *n, int *kd, s *ab, int *ldab, int *info)\nvoid spbsv(char *uplo, int *n, int *kd, int *nrhs, s *ab, int *ldab, s *b, int *ldb, int *info)\nvoid spbsvx(char *fact, char *uplo, int *n, int *kd, int *nrhs, s *ab, int *ldab, s *afb, int *ldafb, char *equed, s *s, s *b, int *ldb, s *x, int *ldx, s *rcond, s *ferr, s *berr, s *work, int *iwork, int *info)\nvoid spbtf2(char *uplo, int *n, int *kd, s *ab, int *ldab, int *info)\nvoid spbtrf(char *uplo, int *n, int *kd, s *ab, int *ldab, int *info)\nvoid spbtrs(char *uplo, int *n, int *kd, int *nrhs, s *ab, int *ldab, s *b, int *ldb, int *info)\nvoid spftrf(char *transr, char *uplo, int *n, s *a, int *info)\nvoid spftri(char *transr, char *uplo, int *n, s *a, int *info)\nvoid spftrs(char *transr, char *uplo, int *n, int *nrhs, s *a, s *b, int *ldb, int *info)\nvoid spocon(char *uplo, int *n, s *a, int *lda, s *anorm, s *rcond, s *work, int *iwork, int *info)\nvoid spoequ(int *n, s *a, int *lda, s *s, s *scond, s *amax, int *info)\nvoid spoequb(int *n, s *a, int *lda, s *s, s *scond, s *amax, int *info)\nvoid sporfs(char *uplo, int *n, int *nrhs, s *a, int *lda, s *af, int *ldaf, s *b, int *ldb, s *x, int *ldx, s *ferr, s *berr, s *work, int *iwork, int *info)\nvoid sposv(char *uplo, int *n, int *nrhs, s *a, int *lda, s *b, int *ldb, int *info)\nvoid sposvx(char *fact, char *uplo, int *n, int *nrhs, s *a, int *lda, s *af, int *ldaf, char *equed, s *s, s *b, int *ldb, s *x, int *ldx, s *rcond, s *ferr, s *berr, s *work, int *iwork, int *info)\nvoid spotf2(char *uplo, int *n, s *a, int *lda, int *info)\nvoid spotrf(char *uplo, int *n, s *a, int *lda, int *info)\nvoid spotri(char *uplo, int *n, s *a, int *lda, int *info)\nvoid spotrs(char *uplo, int *n, int *nrhs, s *a, int *lda, s *b, int *ldb, int *info)\nvoid sppcon(char *uplo, int *n, s *ap, s *anorm, s *rcond, s *work, int *iwork, int *info)\nvoid sppequ(char *uplo, int *n, s *ap, s *s, s *scond, s *amax, int *info)\nvoid spprfs(char *uplo, int *n, int *nrhs, s *ap, s *afp, s *b, int *ldb, s *x, int *ldx, s *ferr, s *berr, s *work, int *iwork, int *info)\nvoid sppsv(char *uplo, int *n, int *nrhs, s *ap, s *b, int *ldb, int *info)\nvoid sppsvx(char *fact, char *uplo, int *n, int *nrhs, s *ap, s *afp, char *equed, s *s, s *b, int *ldb, s *x, int *ldx, s *rcond, s *ferr, s *berr, s *work, int *iwork, int *info)\nvoid spptrf(char *uplo, int *n, s *ap, int *info)\nvoid spptri(char *uplo, int *n, s *ap, int *info)\nvoid spptrs(char *uplo, int *n, int *nrhs, s *ap, s *b, int *ldb, int *info)\nvoid spstf2(char *uplo, int *n, s *a, int *lda, int *piv, int *rank, s *tol, s *work, int *info)\nvoid spstrf(char *uplo, int *n, s *a, int *lda, int *piv, int *rank, s *tol, s *work, int *info)\n```\n\n----------------------------------------\n\nTITLE: Conditional Expected Value with Old API\nDESCRIPTION: Demonstrates calculation of a conditional expected value (restricted to an interval) using the expect method with conditional=True parameter.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_33\n\nLANGUAGE: python\nCODE:\n```\na, b = -1, 3\ndef f(x): return x**4\nstats.norm.expect(f, lb=a, ub=b, conditional=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Trapezoidal Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and quantile function (G) for the Trapezoidal Distribution with shape parameters c and d.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_trapezoid.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    u(c, d) & = & \\frac{2}{d - c + 1} \\\\\n    f\\left(x;c, d\\right) & = & \\left\\{\n                                \\begin{array}{ccc}\n                                    \\frac{ux}{c} &  & x < c \\\\\n                                    u & & c\\leq x \\leq d \\\\\n                                    u\\frac{1-x}{1-d} &  & x > d \\\\\n                                \\end{array}\n                            \\right.\\\\\n    F\\left(x;c, d\\right) & = & \\left\\{\n                                \\begin{array}{ccc}\n                                    \\frac{ux^{2}}{2c} &  & x < c \\\\\n                                    \\frac{uc}{2} + u(x-c) &  & c\\leq x \\leq d \\\\\n                                    1 - \\frac{u(1 - x)^2}{2(1 - d)} &  & x > d \\\\\n                                \\end{array}\n                            \\right.\\\\\n    G\\left(q;c, d\\right) & = & \\left\\{\n                                \\begin{array}{ccc}\n                                    \\sqrt{qc(d-c+1)} &  & q < c \\\\\n                                    \\frac{q}{u}+ \\frac{c}{2} &  & q \\leq d \\\\\n                                    1 - \\sqrt{\\frac{2(1 - q) (1 - d)}{u}} &  & q > d \\\\\n                                \\end{array}\n                            \\right.\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Binomial Distribution\nDESCRIPTION: This code snippet references the SciPy implementation of the binomial distribution in the stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_binom.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.binom\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK Single Precision Real Symmetric Matrix Functions in C\nDESCRIPTION: This snippet declares a series of LAPACK functions for operations on single precision real symmetric matrices. These functions handle tasks such as solving eigenvalue problems, linear equations, and performing matrix decompositions. The functions use single precision floating-point numbers (type 's') and integer parameters for dimensions and options.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nvoid sptcon(int *n, s *d, s *e, s *anorm, s *rcond, s *work, int *info);\nvoid spteqr(char *compz, int *n, s *d, s *e, s *z, int *ldz, s *work, int *info);\nvoid sptrfs(int *n, int *nrhs, s *d, s *e, s *df, s *ef, s *b, int *ldb, s *x, int *ldx, s *ferr, s *berr, s *work, int *info);\nvoid sptsv(int *n, int *nrhs, s *d, s *e, s *b, int *ldb, int *info);\nvoid sptsvx(char *fact, int *n, int *nrhs, s *d, s *e, s *df, s *ef, s *b, int *ldb, s *x, int *ldx, s *rcond, s *ferr, s *berr, s *work, int *info);\nvoid spttrf(int *n, s *d, s *e, int *info);\nvoid spttrs(int *n, int *nrhs, s *d, s *e, s *b, int *ldb, int *info);\nvoid sptts2(int *n, int *nrhs, s *d, s *e, s *b, int *ldb);\nvoid srscl(int *n, s *sa, s *sx, int *incx);\nvoid ssbev(char *jobz, char *uplo, int *n, int *kd, s *ab, int *ldab, s *w, s *z, int *ldz, s *work, int *info);\n// ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SciPy FFT Module\nDESCRIPTION: Sphinx automodule directive for documenting the scipy.fft module. Excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/fft.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.fft\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Mathematical Formulas for Gumbel Left-skewed Distribution\nDESCRIPTION: Mathematical equations defining the probability density function f(x), cumulative distribution function F(x), and quantile function G(q) for the Gumbel Left-skewed distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_l.rst#2025-04-14_snippet_0\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\exp\\left(x-e^{x}\\right)\\\\ F\\left(x\\right) & = & 1-\\exp\\left(-e^{x}\\right)\\\\ G\\left(q\\right) & = & \\log\\left(-\\log\\left(1-q\\right)\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: interp1d output change\nDESCRIPTION: Numerical values returned by `scipy.interpolate.interp1d` with ``kind=\"cubic\"`` and ``\"quadratic\"`` may change relative to previous scipy versions. If your code depended on specific numeric values, you may want to double-check your results.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n\"Numerical values returned by `scipy.interpolate.interp1d` with ``kind=\\\"cubic\\\"``\\nand ``\\\"quadratic\\\"`` may change relative to previous scipy versions. If your\\ncode depended on specific numeric values (i.e., on implementation\\ndetails of the interpolators), you may want to double-check your results.\"\n```\n\n----------------------------------------\n\nTITLE: Boltzmann Distribution Moment Generating Function in LaTeX\nDESCRIPTION: Defines the moment generating function M(t) for the Boltzmann distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_boltzmann.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nM\\left(t\\right)=\\frac{1-e^{N\\left(t-\\lambda\\right)}}{1-e^{t-\\lambda}}\\frac{1-e^{-\\lambda}}{1-e^{-\\lambda N}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plot Legend Using Matplotlib\nDESCRIPTION: This code snippet adds a legend to the current plot with specified labels for different lines. It uses Matplotlib, a popular plotting library in Python, to enhance the graphical representation of data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/smoothing_splines.rst#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> plt.legend(['Linear', 'LSQUnivariateSpline', 'True'])\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Number Array\nDESCRIPTION: A large array of floating point numbers in scientific notation (e+00, e-01 format), possibly representing matrix data or numerical computation results.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-seuclidean-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.1781739e+00   8.4573383e-01   1.1040164e+00   2.6033464e-01   1.0391769e+00   6.5951091e-01   2.6643250e-01   1.6215602e+00   9.6424206e-01   5.8926015e-01...\n```\n\n----------------------------------------\n\nTITLE: High-Precision Floating Point Data Array\nDESCRIPTION: Contains a collection of numerical data with extremely precise decimal representations across multiple columns. Each row represents a set of floating-point values with significant digits.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rg_xy0_ipp/ellint_rg_xy0.txt#2025-04-14_snippet_0\n\nLANGUAGE: numeric\nCODE:\n```\n5.6349325180053710937500000000000000000000e-01 5.4722045898437500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 3.7593577654738257250884646608001249173666e+00\n```\n\n----------------------------------------\n\nTITLE: Defining Statistical Properties of Double Weibull Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines various statistical properties of the Double Weibull Distribution, including moments, mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dweibull.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} m_{n}=\\mu & = & 0\\\\\n\\mu_{2} & = & \\Gamma\\left(\\frac{c+2}{c}\\right)\\\\\n\\gamma_{1} & = & 0\\\\\n\\gamma_{2} & = & \\frac{\\Gamma\\left(1+\\frac{4}{c}\\right)}{\\Gamma^{2}\\left(1+\\frac{2}{c}\\right)}\\\\\nm_{d} & = & \\text{NA bimodal}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Data Set\nDESCRIPTION: This snippet contains a set of high-precision numerical values organized in three columns. Each row likely represents related data points or computed values for scientific or mathematical purposes. The extreme precision suggests these may be used for sensitive calculations or as reference values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_ipp/owens_t.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.2698680162429809570312500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9557556195357063262512619003514625185274064353472423178852901024452656999875624280416702137634510411e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.3547700643539428710937500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9711383594166934108442295450013310087042386864109339727024865071317022776707090728884446523962787645e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.8838196992874145507812500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9958123636720670973175150415830455711860298251347131063221017373645805033650407448114562509323599727e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.2103404998779296875000000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965160415736516114878224347652616441248570285776481929165777330223006625884208523539045865887558752e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.7849817276000976562500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965684058224165658161286419653486321755854347243722330668087364377287599082208927609190552770092082e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 3.0816698074340820312500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685879119483199246815080233994718401425290544426432012588216816363985450917188567201782535543745e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 5.4688143730163574218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708134324770240552814009291817788672782289495375208444995930791831628871692958e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 5.4722046852111816406250000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708182535373738479552224447024588312191943603493971261067796621953246822802129e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.3235926628112792968750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230283305376995684464705428352619057921842285607957649468157621467100551e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 8.1472349166870117187500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557983986067545054455535764305523146436193245438972e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 8.3500838279724121093750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984671106045775646675393816309229880068844981389e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.0579175949096679687500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137646619043980790696360140601523723e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.1337585449218750000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137734378693387067492189594857428585e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.5750665664672851562500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137741374220592630824583003278594369e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.6488833427429199218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137741374221695961308557179059573598e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.6769475936889648437500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137741374221748054871592455334798295e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.6886777877807617187500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137741374221758237725405813638158493e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.9288129806518554687500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137741374221777251000447793495163427e-84\n1.9377349853515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.9646115303039550781250000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.9965685943337075842128708842230286747995771257955557984672332748137741374221777252932176829112981831e-84\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.7540378570556640625000000000000000000000000000000000000000000000000000000000000000000000000000000000e-02 2.2438222857362642328721666762700670180512280358418254668975233507745332654116410436011453686965583320e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.2698680162429809570312500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3401498546424510733553760760713089220194411374612244753632571325026025609278414016278426420435941406e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.3547700643539428710937500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3507442475443941769350296619070755923978988367103893932068275511001366418117131564067482107360261256e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.8838196992874145507812500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3668902899384734364002740136245246666651297141478626576353623717333057222726571690487782253713815225e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.2103404998779296875000000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3672831316167632657724475029929234130566491646454665814596085474916464739333870332873695536029518534e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.7849817276000976562500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673086849227167312500038271366885158855725283973352461790290342204550385443187547817889150752632821e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 3.0816698074340820312500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087529822476518694748438059077395092889307169444313706384386840282580125934385201938096902673118e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 5.4688143730163574218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964023061439759020768926901365903615834775454723918691011603336032390489329245e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 5.4722046852111816406250000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964025388629094045959345392418522712094481659886036526141496643680018703855331e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 6.3235926628112792968750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964055675774880697034171474958911013883381096078358602101190347072844155446614e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 8.1472349166870117187500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964055675774942048518999361543210821948933436165328793679693511805322280998218e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 8.3500838279724121093750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964055675774942048518999361543210822965157609037677948877689026250186946015566e-88\n```\n\n----------------------------------------\n\nTITLE: Meson Target Introspection JSON Output\nDESCRIPTION: JSON output from meson introspect showing build configuration details for the _decomp_update extension module, including compiler parameters, source files, and installation paths.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/introspecting_a_build.rst#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"_decomp_update\",\n    \"id\": \"b4ac6f0@@_decomp_update@cus\",\n    \"type\": \"custom\",\n    \"defined_in\": \"/home/username/code/scipy/scipy/linalg/meson.build\",\n    \"filename\": [\n        \"/home/username/code/scipy/build/scipy/linalg/_decomp_update.pyx\"\n    ],\n    \"build_by_default\": false,\n    \"target_sources\": [\n        {\n            \"language\": \"unknown\",\n            \"compiler\": [\n                \"/home/username/anaconda3/envs/scipy-dev/bin/python3.10\",\n                \"/home/username/code/scipy/scipy/_build_utils/tempita.py\",\n                \"@INPUT@\",\n                \"-o\",\n                \"@OUTDIR@\"\n            ],\n            \"parameters\": [],\n            \"sources\": [\n                \"/home/username/code/scipy/scipy/linalg/_decomp_update.pyx.in\"\n            ],\n            \"generated_sources\": []\n        }\n    ],\n    \"extra_files\": [],\n    \"subproject\": null,\n    \"installed\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KSone Distribution Formula in LaTeX\nDESCRIPTION: This LaTeX code snippet defines the cumulative distribution function (CDF) for the KSone distribution. It includes the formula for finite n and the limit as n approaches infinity.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_ksone.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} F\\left(n, x\\right) & = & 1 - \\sum_{j=0}^{\\lfloor n(1-x)\\rfloor} \\dbinom{n}{j} x \\left(x+\\frac{j}{n}\\right)^{j-1} \\left(1-x-\\frac{j}{n}\\right)^{n-j}\\\\\n    & = & 1 - \\textrm{scipy.special.smirnov}(n, x) \\\\\n    \\lim_{n \\rightarrow\\infty} F\\left(n, \\frac{x}{\\sqrt n}\\right) & = & e^{-2 x^2} \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Structuring Developer Documentation with reStructuredText\nDESCRIPTION: This snippet demonstrates how to organize and structure developer documentation using reStructuredText directives. It creates a hierarchical table of contents with sections for contributing information, roadmap, and SciPy organization.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _scipy-development:\n\nDeveloper Documentation\n-----------------------\n\nBelow you will find general information about contributing.\nFor an overview of where help or new features are desired or planned, see\nthe roadmap. And for a more detailed look at how the SciPy project works, see\nthe organization section.\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Contributing Information\n\n   conduct/code_of_conduct\n   hacking\n   dev_quickstart\n   contributor/development_workflow\n   contributor/contributor_toc\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Roadmap\n\n   roadmap\n   roadmap-detailed\n   toolchain\n\n.. toctree::\n   :maxdepth: 1\n   :caption: SciPy Organization\n\n   core-dev/index\n   api-dev/api-dev-toc\n   governance\n\n.. This toctree defines previous/next for contributor guide documents\n.. toctree::\n   :hidden:\n\n   contributor/development_workflow\n   contributor/pep8\n   contributor/rendering_documentation\n   contributor/devpy_test\n   contributor/benchmarking\n   contributor/cython\n   contributor/public_cython_api\n   contributor/adding_new\n   contributor/continuous_integration\n   contributor/using_act\n   triage\n\n.. These files are not intended to be in any toctree. because they have not\n   been maintained.They should only be reached via the contributor guide if\n   they are specifically sought, not via next/previous links.\n..   dev/gitwash/gitwash\n..   dev/contributor/compiled_code\n```\n\n----------------------------------------\n\nTITLE: Implementing Low-Level C Callback for Numerical Integration in Python\nDESCRIPTION: Shows how to create a C function, compile it to a shared library, and use it as a callback in scipy.integrate.nquad for faster integration. Requires writing C code and compiling a shared library.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/integrate.rst#2025-04-14_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n/* testlib.c */\ndouble f(int n, double *x, void *user_data) {\n    double c = *(double *)user_data;\n    return c + x[0] - x[1] * x[2]; /* corresponds to c + x - y * z */\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport os, ctypes\nfrom scipy import integrate, LowLevelCallable\n\nlib = ctypes.CDLL(os.path.abspath('testlib.so'))\nlib.f.restype = ctypes.c_double\nlib.f.argtypes = (ctypes.c_int, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p)\n\nc = ctypes.c_double(1.0)\nuser_data = ctypes.cast(ctypes.pointer(c), ctypes.c_void_p)\n\nfunc = LowLevelCallable(lib.f, user_data)\n\nintegrate.nquad(func, [[0, 10], [-10, 0], [-1, 1]])\n```\n\n----------------------------------------\n\nTITLE: Complex Matrix Operations (LAPACK Z-prefix)\nDESCRIPTION: Function declarations for double precision complex LAPACK routines handling various matrix computations including SVD, eigenvalue problems, and linear equations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nvoid zgesvd(char *jobu, char *jobvt, int *m, int *n, z *a, int *lda, d *s, z *u, int *ldu, z *vt, int *ldvt, z *work, int *lwork, d *rwork, int *info);\nvoid zgesv(int *n, int *nrhs, z *a, int *lda, int *ipiv, z *b, int *ldb, int *info);\nvoid zgesvx(char *fact, char *trans, int *n, int *nrhs, z *a, int *lda, z *af, int *ldaf, int *ipiv, char *equed, d *r, d *c, z *b, int *ldb, z *x, int *ldx, d *rcond, d *ferr, d *berr, z *work, d *rwork, int *info);\n```\n\n----------------------------------------\n\nTITLE: Defining Cumulative Distribution Function for Negative Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the cumulative distribution function F(x;M,n,r) for the Negative Hypergeometric Distribution. It represents the sum of probabilities for all values of k up to the floor of x.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nhypergeom.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\nF(x;M,n,r) & = & \\sum_{k=0}^{\\left\\lfloor x\\right\\rfloor }p\\left(k;M,n,r\\right),\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Matrix Data\nDESCRIPTION: A 4x100 matrix of floating point numbers in scientific notation format (e.g. 8.278938049410748956e-01), likely representing numerical data for scientific computing or analysis purposes. Numbers appear to be normalized between 0 and 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-double-inp.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n8.278938049410748956e-01 9.035293984476246987e-01 1.862188994679486731e-01...\n8.033694116033356369e-01 8.653264545544031572e-01 7.468340410754038539e-01...\n9.287178470949695175e-01 1.748282433617460718e-01 9.238531711586964734e-01...\n2.599990881903107010e-01 6.767857524909899336e-01 7.188217446352963558e-01...\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for HalfNormal Distribution\nDESCRIPTION: This snippet defines the entropy h[X] for the HalfNormal distribution and provides its approximate numerical value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfnorm.rst#2025-04-14_snippet_3\n\nLANGUAGE: math\nCODE:\n```\n\\begin{eqnarray*} h\\left[X\\right] & = & \\log\\left(\\sqrt{\\frac{\\pi e}{2}}\\right)\\\\  & \\approx & 0.72579135264472743239.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Declaring LAPACK Double Precision Tridiagonal and Banded Matrix Operations in C\nDESCRIPTION: This snippet declares LAPACK routines for operations on tridiagonal and banded matrices using double precision. It includes functions for solving linear systems, computing condition numbers, and performing matrix factorizations for these special matrix types.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid dtbcon(char *norm, char *uplo, char *diag, int *n, int *kd, d *ab, int *ldab, d *rcond, d *work, int *iwork, int *info)\nvoid dtbrfs(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, d *ab, int *ldab, d *b, int *ldb, d *x, int *ldx, d *ferr, d *berr, d *work, int *iwork, int *info)\nvoid dtbtrs(char *uplo, char *trans, char *diag, int *n, int *kd, int *nrhs, d *ab, int *ldab, d *b, int *ldb, int *info)\n```\n\n----------------------------------------\n\nTITLE: Translating Fortran Loop to Python\nDESCRIPTION: Demonstrates how to translate Fortran do-loops to Python for-loops. The example focuses on maintaining equivalent loop structures between Fortran and Python, acknowledging differences in indexing.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/_lib/pyprima/pyprima/README.md#2025-04-14_snippet_1\n\nLANGUAGE: Fortran\nCODE:\n```\ndo i=0:5\n  print *, *\nend do\n```\n\nLANGUAGE: Python\nCODE:\n```\nfor i in range(0, 6):\n  print(i)\n```\n\n----------------------------------------\n\nTITLE: Logistic Distribution Statistical Properties in TeX\nDESCRIPTION: Mathematical expressions for statistical properties including mean (μ), variance (μ₂), skewness (γ₁), kurtosis (γ₂), mode (mₐ), and median (mₙ), using polygamma functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_logistic.rst#2025-04-14_snippet_1\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\gamma+\\psi_{0}\\left(1\\right)=0\\\\ \\mu_{2} & = & \\frac{\\pi^{2}}{6}+\\psi_{1}\\left(1\\right)=\\frac{\\pi^{2}}{3}\\\\ \\gamma_{1} & = & \\frac{\\psi_{2}\\left(1\\right)+2\\zeta\\left(3\\right)}{\\mu_{2}^{3/2}}=0\\\\ \\gamma_{2} & = & \\frac{\\left(\\frac{\\pi^{4}}{15}+\\psi_{3}\\left(1\\right)\\right)}{\\mu_{2}^{2}}=\\frac{6}{5}\\\\ m_{d} & = & \\log1=0\\\\ m_{n} & = & -\\log\\left(2-1\\right)=0\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Scaling Complex Vectors in C\nDESCRIPTION: The function declaration outlines scaling operations applied to complex vectors in C, as defined by BLAS specifications. Parameters include scaling factors and strides for vector elements, enabling efficient manipulation of complex vectors in computational routines.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nvoid zscal(int *n, z *za, z *zx, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Defining Truncated Weibull Minimum Extreme Value Distribution Functions in LaTeX\nDESCRIPTION: Mathematical definitions of the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the truncated Weibull minimum extreme value distribution. The functions are defined for a<x<=b and c>0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_truncweibull_min.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    f\\left(x;c,a,b\\right) & = & \\frac{cx^{c-1}\\exp\\left(-x^{c}\\right)}{\\exp\\left(-a^{c}\\right) - \\exp\\left(-b^{c}\\right)} \\\\\n    F\\left(x;c,a,b\\right) & = & \\frac{\\exp\\left(-a^{c}\\right) - \\exp\\left(-x^{c}\\right)}{\\exp\\left(-a^{c}\\right) - \\exp\\left(-b^{c}\\right)} \\\\\n    G\\left(q;c,a,b\\right) & = & \\left[-\\log\\left(\\left(1-q\\right)\\exp\\left(-a^{c}\\right)+q\\exp\\left(-b^{c}\\right)\\right)\\right]^{1/c}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Importing necessary libraries for MGC analysis in Python\nDESCRIPTION: This snippet demonstrates the necessary imports for using the multiscale_graphcorr function and related plotting functionalities from NumPy and Matplotlib.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/multiscale_graphcorr.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> import matplotlib.pyplot as plt; plt.style.use('classic')\n>>> from scipy.stats import multiscale_graphcorr\n```\n\n----------------------------------------\n\nTITLE: Specifying Statistical Moments for Semicircular Distribution\nDESCRIPTION: This LaTeX code defines key statistical moments of the Semicircular Distribution, including the median, mean, variance, skewness, and kurtosis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_semicircular.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} m_{d}=m_{n}=\\mu & = & 0\\\\ \\mu_{2} & = & \\frac{1}{4}\\\\ \\gamma_{1} & = & 0\\\\ \\gamma_{2} & = & -1\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Matrix Data with Scientific Notation\nDESCRIPTION: A data matrix containing scientific notation numbers organized in three columns. First column contains e2 values, second column contains negative decimal values, and third column contains very precise scientific notation numbers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_i_prime_int_data_ipp/bessel_i_prime_int_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n0.46e2 -0.30944411754608154296875e1 -1.4930590833870162213775836764629326071792693829531e-48\n0.46e2 -0.51139926910400390625e1 -1.0763470713262935904456505724516010574972799879661e-38\n0.46e2 -0.95070552825927734375e1 -2.0115846220319402838816743576250278175262193057597e-26\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy of Laplace Distribution in LaTeX\nDESCRIPTION: Mathematical expression for the entropy of the Laplace distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_laplace.rst#2025-04-14_snippet_4\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} h\\left[X\\right] & = & \\log\\left(2e\\right)\\\\  & \\approx & 1.6931471805599453094.\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: High Precision Scientific Data Matrix\nDESCRIPTION: Matrix of numerical values with extremely high precision (100+ decimal places) in scientific notation. Each row contains three columns with values having various exponents including very large negative powers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_large_data_ipp/owens_t_large_data.txt#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n3.1387406250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+04 2.1657506295014172792434692382812500000000000000000000000000000000000000000000000000000000000000000000e-06 2.7980372303175708629519503157005395955035480860084504850660947581670772932100736721862285533753064708e-213926796\n3.1387406250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+04 7.2700186137808486819267272949218750000000000000000000000000000000000000000000000000000000000000000000e-06 9.3187806748346024411523370745020464683699718722277865926945189587484276690724617184400830103281123912e-213926796\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Issue for Fortran Removal\nDESCRIPTION: ReStructuredText directive to link to a GitHub issue tracking the progress of removing Fortran code from SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/roadmap-detailed.rst#2025-04-14_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`gh-18566 <https://github.com/scipy/scipy/issues/18566>`__\n```\n\n----------------------------------------\n\nTITLE: Cloning ARPACK-NG Repository\nDESCRIPTION: Commands to clone the ARPACK-NG source code repository from GitHub using either HTTPS or SSH protocol.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/opencollab/arpack-ng.git\n$ cd ./arpack-ng\n```\n\n----------------------------------------\n\nTITLE: Simplified Moments Expression in LaTeX\nDESCRIPTION: Simplified expression for raw moments using Bernoulli polynomials.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\left\\{ \\begin{array}{cc} 0 & n \\text{ odd}\\\\ 4\\left(-1\\right)^{n/2-1}\\frac{\\left(2\\pi\\right)^{n}}{n+1}B_{n+1}\\left(\\frac{1}{4}\\right) & n \\text{ even} \\end{array} \\right.\n```\n\n----------------------------------------\n\nTITLE: Implementing Hypergeometric Distribution in SciPy\nDESCRIPTION: This snippet indicates the SciPy module and function used to implement the Hypergeometric Distribution. It's a reference to the actual implementation rather than a code example.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_hypergeom.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.hypergeom\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocumentation for SciPy Cluster Vector Quantization Module\nDESCRIPTION: This snippet configures the autodocumentation settings for the scipy.cluster.vq module. It specifies to include the module but exclude documentation for individual members, inherited members, and special members.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/cluster.vq.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.cluster.vq\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Generalized Gamma Distribution Entropy in LaTeX\nDESCRIPTION: This LaTeX code defines the entropy of the Generalized Gamma Distribution using the digamma function and gamma function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gengamma.rst#2025-04-14_snippet_2\n\nLANGUAGE: tex\nCODE:\n```\nh\\left[X\\right]=a-a\\Psi\\left(a\\right)+\\frac{1}{c}\\Psi\\left(a\\right)+\\log\\Gamma\\left(a\\right)-\\log\\left|c\\right|.\n```\n\n----------------------------------------\n\nTITLE: Computing Triangular Packed Vector Transformations in C\nDESCRIPTION: The function ztpmv is defined to conduct vector transformations relying on triangular packed matrices. Utilized in C, it incorporates BLAS-compliant handling methods for efficient mathematical evaluations of complex vectors.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nvoid ztpmv(char *uplo, char *trans, char *diag, int *n, z *ap, z *x, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Configuring ARPACK-NG with ISO_C_BINDING Support\nDESCRIPTION: Commands to configure ARPACK-NG with ISO_C_BINDING support using either autotools or CMake. ISO_C_BINDING enables seamless interoperability between Fortran and C code.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --enable-icb\n$ cmake -D ICB=ON\n```\n\n----------------------------------------\n\nTITLE: Boltzmann Distribution Statistical Moments in LaTeX\nDESCRIPTION: Defines statistical moments including mean (μ), variance (μ₂), skewness (γ₁), and kurtosis (γ₂) in terms of z = e^(-λ).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_boltzmann.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} \\mu & = & \\frac{z}{1-z}-\\frac{Nz^{N}}{1-z^{N}}\\\\ \\mu_{2} & = & \\frac{z}{\\left(1-z\\right)^{2}}-\\frac{N^{2}z^{N}}{\\left(1-z^{N}\\right)^{2}}\\\\ \\gamma_{1} & = & \\frac{z\\left(1+z\\right)\\left(\\frac{1-z^{N}}{1-z}\\right)^{3}-N^{3}z^{N}\\left(1+z^{N}\\right)}{\\left[z\\left(\\frac{1-z^{N}}{1-z}\\right)^{2}-N^{2}z^{N}\\right]^{3/2}}\\\\ \\gamma_{2} & = & \\frac{z\\left(1+4z+z^{2}\\right)\\left(\\frac{1-z^{N}}{1-z}\\right)^{4}-N^{4}z^{N}\\left(1+4z^{N}+z^{2N}\\right)}{\\left[z\\left(\\frac{1-z^{N}}{1-z}\\right)^{2}-N^{2}z^{N}\\right]^{2}}\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Defining Jones and Faddy Skew-T Distribution Equations in LaTeX\nDESCRIPTION: Mathematical equations for the probability density function, cumulative distribution function, and moments of the Jones and Faddy Skew-T Distribution. These equations are defined for a>0 and b>0, with special conditions for skewness and relation to the t-distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_jf_skew_t.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\nf(x;a,b) & = & C_{a,b}^{-1} \\left(1+\\frac{x}{\\left(a+b+x^2\\right)^{1/2}}\\right)^{a+1/2} \\left(1-\\frac{x}{\\left(a+b+x^2\\right)^{1/2}}\\right)^{b+1/2} \\\\\nF(x;a,b) & = & I\\left(\\frac{1+x(a+b+x^2)^{-1/2}}{2};a,b\\right) \\\\\n\\mu_{n}^{\\prime} & = & \\frac{(a+b)^{n/2}}{2^nB(a,b)}\\sum_{i=0}^{n}{n \\choose i}(-1)^iB\\left(a+\\frac{n}{2}-i, b-\\frac{n}{2}+i\\right)\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Triangular Packed Matrix-Vector Operations in C\nDESCRIPTION: Declared function ztbmv describes operations with triangular packed matrices, executing matrix-vector products using triangular properties to ensure computational efficiency in complete alignment with BLAS standards.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nvoid ztbmv(char *uplo, char *trans, char *diag, int *n, int *k, z *a, int *lda, z *x, int *incx)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for scipy.datasets in reStructuredText\nDESCRIPTION: This snippet configures the Sphinx automodule directive for the scipy.datasets module. It excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/datasets.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: scipy.datasets\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Parsing Numerical Data Array\nDESCRIPTION: Raw numerical data containing floating-point values across multiple ranges and sections\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-seuclidean-ml-iris.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n4.3420582e+00 4.1857666e+00 4.1590662e+00 5.0899438e+00...\n```\n\n----------------------------------------\n\nTITLE: Evaluating Notebooklite Directive in RST\nDESCRIPTION: This snippet showcases an RST directive used within Myst-flavored Markdown to enable notebook rendering with specific options such as opening in a new tab. It's primarily used in documentation environments where embedding executable code cells is required.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/sampling.md#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. notebooklite:: sampling.md\n   :new_tab: True\n```\n\n----------------------------------------\n\nTITLE: Entropy Formula\nDESCRIPTION: Formula for the entropy h[X] of the half-logistic distribution with numerical approximation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halflogistic.rst#2025-04-14_snippet_4\n\nLANGUAGE: math\nCODE:\n```\nh[X] = 2-\\log(2)\n\\approx 1.3068528194400546906\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for SciPy Spatial Distance Module\nDESCRIPTION: ReStructuredText directive for generating module documentation with specific exclusion parameters to control documentation generation\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/spatial.distance.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: scipy.spatial.distance\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Binomial Coefficient for Fisher's Noncentral Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the binomial coefficient used in the distribution's calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nchypergeom_fisher.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\binom{n}{k} \\equiv \\frac{n!}{k! (n - k)!}.\n```\n\n----------------------------------------\n\nTITLE: Performing Hermitian Rank-K Update in C\nDESCRIPTION: This C function declaration is for a Hermitian rank-k update, which allows modification of complex matrices through scaled multiplication products. The process follows the BLAS specification involving symmetric matrices and leverages complex number arithmetic for optimal performance.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nvoid zherk(char *uplo, char *trans, int *n, int *k, d *alpha, z *a, int *lda, d *beta, z *c, int *ldc)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross-shaped Kernel for Image Filtering\nDESCRIPTION: Shows how to create a cross-shaped kernel using a numpy array. This kernel can be used as a footprint parameter in various scipy.ndimage filtering functions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> footprint = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])\n>>> footprint\narray([[0, 1, 0],\n       [1, 1, 1],\n       [0, 1, 0]])\n```\n\n----------------------------------------\n\nTITLE: Defining CDF of Double Pareto Lognormal Distribution in LaTeX\nDESCRIPTION: This snippet defines the cumulative distribution function (CDF) of the double Pareto lognormal distribution using LaTeX mathematical notation. It includes parameters x, μ, σ, α, and β.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_dpareto_lognorm.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    F(x, \\mu, \\sigma, \\alpha, \\beta) =\n    \\Phi \\left(\\frac{\\log x - \\mu}{\\sigma} \\right) -\n    \\phi \\left(\\frac{\\log x - \\mu}{\\sigma} \\right)\n    \\left(\\frac{\\beta R(x_1) - \\alpha R(x_2)}{\\alpha + \\beta} \\right)\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Operating Triangular Matrix-Matrix Solutions in C\nDESCRIPTION: Within the routine defined by ztrsm, the solution of triangular matrix-matrix equations is pursued using complex numerics and C language. The function ensures precision via parameters hinting at matrix features, deploying standard BLAS computational definitions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nvoid ztrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, z *alpha, z *a, int *lda, z *b, int *ldb)\n```\n\n----------------------------------------\n\nTITLE: Importing Beta-Binomial Distribution from SciPy\nDESCRIPTION: Shows how to import the beta-binomial distribution implementation from SciPy's stats module. This distribution combines properties of both beta and binomial distributions.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_betabinom.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy.stats import betabinom\n```\n\n----------------------------------------\n\nTITLE: Installing CMake via pip\nDESCRIPTION: Commands to install CMake build system using Python's pip package manager and verify the installation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -m pip install cmake\n$ which cmake && cmake --version\n```\n\n----------------------------------------\n\nTITLE: Defining Variance for Negative Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the variance (μ₂) of the Negative Hypergeometric Distribution. It expresses the spread of the distribution of red balls drawn.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nhypergeom.rst#2025-04-14_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\mu_{2} & = & \\frac{rn(M+1)}{(M-n+1)(M-n+2)}\\left(1-\\frac{r}{M-n+1}\\right)\n```\n\n----------------------------------------\n\nTITLE: Enabling ILP64 Support with CMake\nDESCRIPTION: Commands to enable ILP64 support in ARPACK-NG using CMake, which allows handling large arrays with indices exceeding 32-bit integer limits.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ cmake -D INTERFACE64=ON -D ITF64SUFFIX=\"ILP64\" ..\n$ make all install\n```\n\n----------------------------------------\n\nTITLE: Updating Hermitian Matrix with Rank-2 Operation in C\nDESCRIPTION: This function declaration is designed for performing a rank-2 update on a Hermitian matrix using complex operations. The function manages two complex vectors and employs them to modify the matrix as outlined by the function parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid zher2(char *uplo, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)\n```\n\n----------------------------------------\n\nTITLE: Defining Log Double Exponential Distribution Formulas in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Log Double Exponential Distribution. It uses piecewise functions to handle different ranges of x and q values, with a shape parameter c > 0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_loglaplace.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\n        f\\left(x;c\\right) & = & \\left\\{\n                                    \\begin{array}{ccc}\n                                        \\frac{c}{2}x^{c-1} &  & 0 < x < 1 \\\\\n                                        \\frac{c}{2}x^{-c-1} &  & x \\geq 1\n                                    \\end{array}\n                                \\right. \\\\\n        F\\left(x;c\\right) & = & \\left\\{\n                                    \\begin{array}{ccc}\n                                        \\frac{1}{2}x^{c} &  & 0 < x < 1 \\\\\n                                        1-\\frac{1}{2}x^{-c} &  & x \\geq 1\n                                    \\end{array}\n                                \\right. \\\\\n        G\\left(q;c\\right) & = & \\left\\{\n                                    \\begin{array}{ccc}\n                                        \\left(2q\\right)^{1/c} &  & 0 \\leq q < \\frac{1}{2} \\\\\n                                        \\left(2-2q\\right)^{-1/c} &  & \\frac{1}{2} \\leq q \\leq 1\n                                    \\end{array}\n                                \\right.\n    \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: SciPy Test Dependencies\nDESCRIPTION: This code snippet lists the test dependencies required for the SciPy project. These dependencies are used for running tests and benchmarks, and are managed by tools like pytest. The file is auto-generated and based on the contents of `pyproject.toml`.\nSOURCE: https://github.com/scipy/scipy/blob/main/requirements/test.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"# Generated via tools/generate_requirements.py.\\n# Do not edit this file; modify `pyproject.toml` instead and run `python tools/generate_requirements.py`.\\npytest\\npytest-cov\\npytest-timeout\\npytest-xdist\\nasv\\nmpmath\\ngmpy2\\nthreadpoolctl\\n# scikit-umfpack  # circular dependency issues\\npooch\\nhypothesis>=6.30\\narray-api-strict>=2.3.1\\nCython\\nmeson\\nninja; sys_platform != \\\"emscripten\\\"\"\n```\n\n----------------------------------------\n\nTITLE: errprint return type change\nDESCRIPTION: The `scipy.special.errprint` function now returns a boolean value, which might be different from its previous return behavior.  Existing code should be reviewed to accommodate this change.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.19.0-notes.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"`scipy.special.errprint` now returns a boolean.\"\n```\n\n----------------------------------------\n\nTITLE: Referencing SciPy Implementation of Reciprocal Inverse Gaussian Distribution\nDESCRIPTION: This code snippet references the SciPy implementation of the Reciprocal Inverse Gaussian Distribution, which can be used for practical applications of the distribution in Python.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_recipinvgauss.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nscipy.stats.recipinvgauss\n```\n\n----------------------------------------\n\nTITLE: Updating Hermitian Matrix with Rank-1 Operation in C\nDESCRIPTION: This C function declaration corresponds to a routine that updates a Hermitian matrix utilizing a complex rank-1 update. It primarily considers complex vector inputs and scaling factors to execute the matrix update algorithm, as defined by BLAS standards.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid zher(char *uplo, int *n, d *alpha, z *x, int *incx, z *a, int *lda)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Functions of Hyperbolic Secant Distribution in LaTeX\nDESCRIPTION: Mathematical definitions of the probability density function (f(x)), cumulative distribution function (F(x)), and inverse function (G(q)) for the hyperbolic secant distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_hypsecant.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x\\right) & = & \\frac{1}{\\pi}\\mathrm{sech}\\left(x\\right)\\\\ F\\left(x\\right) & = & \\frac{2}{\\pi}\\arctan\\left(e^{x}\\right)\\\\ G\\left(q\\right) & = & \\log\\left(\\tan\\left(\\frac{\\pi}{2}q\\right)\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Documentation Requirements\nDESCRIPTION: This lists the packages required to build the documentation for the scipy project. The versions are also specified in some cases. It's automatically generated, and manual edits should be made to `pyproject.toml` instead.\nSOURCE: https://github.com/scipy/scipy/blob/main/requirements/doc.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n\"# Generated via tools/generate_requirements.py.\\n# Do not edit this file; modify `pyproject.toml` instead and run `python tools/generate_requirements.py`.\\nsphinx>=5.0.0,<8.2.0\\nintersphinx_registry\\npydata-sphinx-theme>=0.15.2\\nsphinx-copybutton\\nsphinx-design>=0.4.0\\nmatplotlib>=3.5\\nnumpydoc\\njupytext\\nmyst-nb>=1.2.0\\npooch\\njupyterlite-sphinx>=0.19.1\\njupyterlite-pyodide-kernel\\nlinkify-it-py\"\n```\n\n----------------------------------------\n\nTITLE: Entropy Formula\nDESCRIPTION: Definition of the entropy h[X] for the Arcsine distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_arcsine.rst#2025-04-14_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nh\\left[X\\right] = \\log(\\frac{\\pi}{4}) \\approx-0.24156447527049044468\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density Function for R-distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the probability density function (f) and cumulative distribution function (F) for the R-distribution with shape parameter c. It uses the beta function and hypergeometric function in its formulation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rdist.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\frac{\\left(1-x^{2}\\right)^{c/2-1}}{B\\left(\\frac{1}{2},\\frac{c}{2}\\right)}\\\\ F\\left(x;c\\right) & = & \\frac{1}{2}+\\frac{x}{B\\left(\\frac{1}{2},\\frac{c}{2}\\right)}\\,_{2}F_{1}\\left(\\frac{1}{2},1-\\frac{c}{2};\\frac{3}{2};x^{2}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: CFFI Implementation of the Callback Function\nDESCRIPTION: This C code demonstrates implementing the shared library in C.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_40\n\nLANGUAGE: c\nCODE:\n```\n\"/*\n     example.c\n     Needs to be compiled with \\\"gcc -std=c99 -shared -fPIC -o example.so example.c\\\"\n     or similar\n    */\n\n   #include <stdint.h>\n\n   int\n   _transform(intptr_t *output_coordinates, double *input_coordinates,\n              int output_rank, int input_rank, void *user_data)\n   {\n       int i;\n       double shift = *(double *)user_data;\n\n       for (i = 0; i < input_rank; i++) {\n           input_coordinates[i] = output_coordinates[i] - shift;\n       }\n       return 1;\n   }\"\n```\n\n----------------------------------------\n\nTITLE: Weibull Min Distribution Moments in LaTeX\nDESCRIPTION: Defines the nth moment of the Weibull Minimum distribution using the Gamma function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_weibull_min.rst#2025-04-14_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\mu_{n}^{\\prime}=\\Gamma\\left(1+\\frac{n}{c}\\right)\n```\n\n----------------------------------------\n\nTITLE: HTML Styling for Property Names in SciPy Documentation\nDESCRIPTION: Raw HTML code that creates div elements for styling property names in the SciPy documentation. It uses template variables to display the module, class, and property name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/property.rst#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"prename\">{{ module }}.{{ class }}.</div>\n<div class=\"empty\"></div>\n```\n\n----------------------------------------\n\nTITLE: BLAS Function Declarations in C\nDESCRIPTION: Complete listing of BLAS (Basic Linear Algebra Subprograms) function prototypes used in SciPy. These include complex, double, single precision operations for vector-vector, matrix-vector, and matrix-matrix operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid caxpy(int *n, c *ca, c *cx, int *incx, c *cy, int *incy)\nvoid ccopy(int *n, c *cx, int *incx, c *cy, int *incy)\nc cdotc(int *n, c *cx, int *incx, c *cy, int *incy)\nc cdotu(int *n, c *cx, int *incx, c *cy, int *incy)\nvoid cgbmv(char *trans, int *m, int *n, int *kl, int *ku, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)\nvoid cgemm(char *transa, char *transb, int *m, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)\nvoid cgemv(char *trans, int *m, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)\nvoid cgerc(int *m, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)\nvoid cgeru(int *m, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)\nvoid chbmv(char *uplo, int *n, int *k, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)\nvoid chemm(char *side, char *uplo, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)\nvoid chemv(char *uplo, int *n, c *alpha, c *a, int *lda, c *x, int *incx, c *beta, c *y, int *incy)\nvoid cher(char *uplo, int *n, s *alpha, c *x, int *incx, c *a, int *lda)\nvoid cher2(char *uplo, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *a, int *lda)\nvoid cher2k(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, s *beta, c *c, int *ldc)\nvoid cherk(char *uplo, char *trans, int *n, int *k, s *alpha, c *a, int *lda, s *beta, c *c, int *ldc)\nvoid chpmv(char *uplo, int *n, c *alpha, c *ap, c *x, int *incx, c *beta, c *y, int *incy)\nvoid chpr(char *uplo, int *n, s *alpha, c *x, int *incx, c *ap)\nvoid chpr2(char *uplo, int *n, c *alpha, c *x, int *incx, c *y, int *incy, c *ap)\nvoid crotg(c *ca, c *cb, s *c, c *s)\nvoid cscal(int *n, c *ca, c *cx, int *incx)\nvoid csrot(int *n, c *cx, int *incx, c *cy, int *incy, s *c, s *s)\nvoid csscal(int *n, s *sa, c *cx, int *incx)\nvoid cswap(int *n, c *cx, int *incx, c *cy, int *incy)\nvoid csymm(char *side, char *uplo, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)\nvoid csyr2k(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *b, int *ldb, c *beta, c *c, int *ldc)\nvoid csyrk(char *uplo, char *trans, int *n, int *k, c *alpha, c *a, int *lda, c *beta, c *c, int *ldc)\nvoid ctbmv(char *uplo, char *trans, char *diag, int *n, int *k, c *a, int *lda, c *x, int *incx)\nvoid ctbsv(char *uplo, char *trans, char *diag, int *n, int *k, c *a, int *lda, c *x, int *incx)\nvoid ctpmv(char *uplo, char *trans, char *diag, int *n, c *ap, c *x, int *incx)\nvoid ctpsv(char *uplo, char *trans, char *diag, int *n, c *ap, c *x, int *incx)\nvoid ctrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb)\nvoid ctrmv(char *uplo, char *trans, char *diag, int *n, c *a, int *lda, c *x, int *incx)\nvoid ctrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, c *alpha, c *a, int *lda, c *b, int *ldb)\nvoid ctrsv(char *uplo, char *trans, char *diag, int *n, c *a, int *lda, c *x, int *incx)\nd dasum(int *n, d *dx, int *incx)\nvoid daxpy(int *n, d *da, d *dx, int *incx, d *dy, int *incy)\nd dcabs1(z *z)\nvoid dcopy(int *n, d *dx, int *incx, d *dy, int *incy)\nd ddot(int *n, d *dx, int *incx, d *dy, int *incy)\nvoid dgbmv(char *trans, int *m, int *n, int *kl, int *ku, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)\nvoid dgemm(char *transa, char *transb, int *m, int *n, int *k, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)\nvoid dgemv(char *trans, int *m, int *n, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)\nvoid dger(int *m, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *a, int *lda)\nd dnrm2(int *n, d *x, int *incx)\nvoid drot(int *n, d *dx, int *incx, d *dy, int *incy, d *c, d *s)\nvoid drotg(d *da, d *db, d *c, d *s)\nvoid drotm(int *n, d *dx, int *incx, d *dy, int *incy, d *dparam)\nvoid drotmg(d *dd1, d *dd2, d *dx1, d *dy1, d *dparam)\nvoid dsbmv(char *uplo, int *n, int *k, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)\nvoid dscal(int *n, d *da, d *dx, int *incx)\nd dsdot(int *n, s *sx, int *incx, s *sy, int *incy)\nvoid dspmv(char *uplo, int *n, d *alpha, d *ap, d *x, int *incx, d *beta, d *y, int *incy)\nvoid dspr(char *uplo, int *n, d *alpha, d *x, int *incx, d *ap)\nvoid dspr2(char *uplo, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *ap)\nvoid dswap(int *n, d *dx, int *incx, d *dy, int *incy)\nvoid dsymm(char *side, char *uplo, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)\nvoid dsymv(char *uplo, int *n, d *alpha, d *a, int *lda, d *x, int *incx, d *beta, d *y, int *incy)\nvoid dsyr(char *uplo, int *n, d *alpha, d *x, int *incx, d *a, int *lda)\nvoid dsyr2(char *uplo, int *n, d *alpha, d *x, int *incx, d *y, int *incy, d *a, int *lda)\nvoid dsyr2k(char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *b, int *ldb, d *beta, d *c, int *ldc)\nvoid dsyrk(char *uplo, char *trans, int *n, int *k, d *alpha, d *a, int *lda, d *beta, d *c, int *ldc)\nvoid dtbmv(char *uplo, char *trans, char *diag, int *n, int *k, d *a, int *lda, d *x, int *incx)\nvoid dtbsv(char *uplo, char *trans, char *diag, int *n, int *k, d *a, int *lda, d *x, int *incx)\nvoid dtpmv(char *uplo, char *trans, char *diag, int *n, d *ap, d *x, int *incx)\nvoid dtpsv(char *uplo, char *trans, char *diag, int *n, d *ap, d *x, int *incx)\nvoid dtrmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb)\nvoid dtrmv(char *uplo, char *trans, char *diag, int *n, d *a, int *lda, d *x, int *incx)\nvoid dtrsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, d *alpha, d *a, int *lda, d *b, int *ldb)\nvoid dtrsv(char *uplo, char *trans, char *diag, int *n, d *a, int *lda, d *x, int *incx)\nd dzasum(int *n, z *zx, int *incx)\nd dznrm2(int *n, z *x, int *incx)\nint icamax(int *n, c *cx, int *incx)\nint idamax(int *n, d *dx, int *incx)\nint isamax(int *n, s *sx, int *incx)\nint izamax(int *n, z *zx, int *incx)\nbint lsame(char *ca, char *cb)\ns sasum(int *n, s *sx, int *incx)\nvoid saxpy(int *n, s *sa, s *sx, int *incx, s *sy, int *incy)\ns scasum(int *n, c *cx, int *incx)\ns scnrm2(int *n, c *x, int *incx)\nvoid scopy(int *n, s *sx, int *incx, s *sy, int *incy)\ns sdot(int *n, s *sx, int *incx, s *sy, int *incy)\ns sdsdot(int *n, s *sb, s *sx, int *incx, s *sy, int *incy)\nvoid sgbmv(char *trans, int *m, int *n, int *kl, int *ku, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)\nvoid sgemm(char *transa, char *transb, int *m, int *n, int *k, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)\nvoid sgemv(char *trans, int *m, int *n, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)\nvoid sger(int *m, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *a, int *lda)\ns snrm2(int *n, s *x, int *incx)\nvoid srot(int *n, s *sx, int *incx, s *sy, int *incy, s *c, s *s)\nvoid srotg(s *sa, s *sb, s *c, s *s)\nvoid srotm(int *n, s *sx, int *incx, s *sy, int *incy, s *sparam)\nvoid srotmg(s *sd1, s *sd2, s *sx1, s *sy1, s *sparam)\nvoid ssbmv(char *uplo, int *n, int *k, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)\nvoid sscal(int *n, s *sa, s *sx, int *incx)\nvoid sspmv(char *uplo, int *n, s *alpha, s *ap, s *x, int *incx, s *beta, s *y, int *incy)\nvoid sspr(char *uplo, int *n, s *alpha, s *x, int *incx, s *ap)\nvoid sspr2(char *uplo, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *ap)\nvoid sswap(int *n, s *sx, int *incx, s *sy, int *incy)\nvoid ssymm(char *side, char *uplo, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)\nvoid ssymv(char *uplo, int *n, s *alpha, s *a, int *lda, s *x, int *incx, s *beta, s *y, int *incy)\nvoid ssyr(char *uplo, int *n, s *alpha, s *x, int *incx, s *a, int *lda)\nvoid ssyr2(char *uplo, int *n, s *alpha, s *x, int *incx, s *y, int *incy, s *a, int *lda)\nvoid ssyr2k(char *uplo, char *trans, int *n, int *k, s *alpha, s *a, int *lda, s *b, int *ldb, s *beta, s *c, int *ldc)\nvoid ssyrk(char *uplo, char *trans, int *n, int *k, s *alpha, s *a, int *lda, s *beta, s *c, int *ldc)\nvoid stbmv(char *uplo, char *trans, char *diag, int *n, int *k, s *a, int *lda, s *x, int *incx)\nvoid stbsv(char *uplo, char *trans, char *diag, int *n, int *k, s *a, int *lda, s *x, int *incx)\nvoid stpmv(char *uplo, char *trans, char *diag, int *n, s *ap, s *x, int *incx)\nvoid stpsv(char *uplo, char *trans, char *diag, int *n, s *ap, s *x, int *incx)\nvoid strmm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb)\nvoid strmv(char *uplo, char *trans, char *diag, int *n, s *a, int *lda, s *x, int *incx)\nvoid strsm(char *side, char *uplo, char *transa, char *diag, int *m, int *n, s *alpha, s *a, int *lda, s *b, int *ldb)\nvoid strsv(char *uplo, char *trans, char *diag, int *n, s *a, int *lda, s *x, int *incx)\nvoid zaxpy(int *n, z *za, z *zx, int *incx, z *zy, int *incy)\nvoid zcopy(int *n, z *zx, int *incx, z *zy, int *incy)\nz zdotc(int *n, z *zx, int *incx, z *zy, int *incy)\nz zdotu(int *n, z *zx, int *incx, z *zy, int *incy)\nvoid zdrot(int *n, z *cx, int *incx, z *cy, int *incy, d *c, d *s)\nvoid zdscal(int *n, d *da, z *zx, int *incx)\nvoid zgbmv(char *trans, int *m, int *n, int *kl, int *ku, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)\nvoid zgemm(char *transa, char *transb, int *m, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, z *beta, z *c, int *ldc)\nvoid zgemv(char *trans, int *m, int *n, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)\nvoid zgerc(int *m, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)\nvoid zgeru(int *m, int *n, z *alpha, z *x, int *incx, z *y, int *incy, z *a, int *lda)\nvoid zhbmv(char *uplo, int *n, int *k, z *alpha, z *a, int *lda, z *x, int *incx, z *beta, z *y, int *incy)\n```\n\n----------------------------------------\n\nTITLE: High Precision Scientific Notation Matrix\nDESCRIPTION: Matrix of floating point numbers in scientific notation, arranged in 9 rows and 4 columns. First three columns contain identical values with positive exponents (e+30 to e+33), while the fourth column contains smaller values with negative exponents (e-47 to e-50).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxx_ipp/ellint_rd_xxx.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 6.1705039497420584674312487188888623304008e-47\n1.3591440405379759208451461349376000000000e+31 1.3591440405379759208451461349376000000000e+31 1.3591440405379759208451461349376000000000e+31 1.9957299377906691708015705180778289952633e-47\n3.3548706991994435886603137187840000000000e+31 3.3548706991994435886603137187840000000000e+31 3.3548706991994435886603137187840000000000e+31 5.1461959670542379650843010267432936776139e-48\n6.2057760084058088674091939659776000000000e+31 6.2057760084058088674091939659776000000000e+31 6.2057760084058088674091939659776000000000e+31 2.0455300121306774873511328924430576723673e-48\n1.3704533965093724230190214466764800000000e+32 1.3704533965093724230190214466764800000000e+32 1.3704533965093724230190214466764800000000e+32 6.2330927975790268155461535096378223350591e-49\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 2.1521450871007098580247264140643505142883e-49\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 7.4006893602204152108633305656949585309562e-50\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 2.1569833888237949750965877861010398088413e-50\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.2239268982694768381667683394968955347577e-50\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for SciPy API Guide\nDESCRIPTION: ReStructuredText markup defining the table of contents for the SciPy API Development Guide, including a label definition and section links to nan_policy, special_ufuncs, and array_api documentation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/api-dev-toc.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _api-dev-toc:\n\n===========================\nSciPy API Development Guide\n===========================\n\n.. toctree::\n   :maxdepth: 1\n\n   nan_policy\n   special_ufuncs\n   array_api\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters with generic_filter in Python\nDESCRIPTION: Demonstrates how to use named parameters with the extra_keywords argument in generic_filter. This provides a more descriptive way to pass parameters to the filter function.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> generic_filter(a, fnc, footprint = [[1, 0], [0, 1]], extra_keywords= {'weights': [1, 3]})\narray([[ 0,  3,  7, 11],\n       [12, 15, 19, 23],\n       [28, 31, 35, 39]])\n```\n\n----------------------------------------\n\nTITLE: Entropy of Gumbel Left-skewed Distribution\nDESCRIPTION: The formula for the entropy h[X] of the Gumbel Left-skewed distribution with its approximate numerical value.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_gumbel_l.rst#2025-04-14_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nh\\left[X\\right]\\approx1.0608407169541684911.\n```\n\n----------------------------------------\n\nTITLE: Rendering MyST Markdown Example (Jupyter Notebook Preamble)\nDESCRIPTION: An example of the preamble that appears in a MyST Markdown file after conversion from a Jupyter notebook, indicating that its contents will be executed during documentation build.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/adding_notebooks.rst#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\njupytext:\n   text_representation:\n      extension: .md\n      format_name: myst\n      format_version: 0.13\n      jupytext_version: 1.14.0\nkernelspec:\n   display_name: Python 3 (ipykernel)\n   language: python\n   name: python3\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Inverted Gamma Distribution in SciPy\nDESCRIPTION: Reference to the SciPy implementation of the Inverted Gamma distribution, which can be used for statistical modeling and probability calculations. The implementation is available in the scipy.stats module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_invgamma.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.invgamma\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data in SciPy\nDESCRIPTION: This dataset contains numerical values organized in a tabular format. Each row represents a set of parameters and corresponding calculation results, likely used for testing or benchmarking mathematical functions in SciPy. The data includes scientific notation and high-precision floating-point numbers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre3_ipp/laguerre3.txt#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n0.45e2\t0.19e2\t0.30816705322265625e3\t-0.64412951999386022447089506727656680491124839052783e51\n0.45e2\t0.19e2\t0.5468814697265625e3\t-0.36963537985184819745245085785278975968577388995451e65\n0.45e2\t0.19e2\t0.5472205810546875e3\t-0.38166307767179149895193094308848773942951602864047e65\n0.45e2\t0.19e2\t0.6323592529296875e3\t-0.61605085087986960802381364937894992796161978885499e68\n0.45e2\t0.19e2\t0.81472369384765625e3\t-0.18524624947434368696488150298614456622641748058275e74\n0.45e2\t0.19e2\t0.835008544921875e3\t-0.61876114204970943223574085055633422800684328007007e74\n0.45e2\t0.19e2\t0.90579193115234375e3\t-0.32811491438921383317215468738753124311706991066799e76\n0.45e2\t0.19e2\t0.9133758544921875e3\t-0.49208633339854035783256166523388881338207129152126e76\n0.45e2\t0.19e2\t0.9575068359375e3\t-0.48511656022229745520048845791737654703740031073762e77\n0.45e2\t0.19e2\t0.96488848876953125e3\t-0.70345035039321876833392790636091919048075988828817e77\n```\n\n----------------------------------------\n\nTITLE: Watershed IFT Segmentation with Negative Background Markers\nDESCRIPTION: Shows watershed segmentation using negative markers to explicitly mark background regions, which are processed after normal markers.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/ndimage.rst#2025-04-14_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> markers = np.array([[0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 2, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, 0],\n...                     [0, 0, 0, 0, 0, 0, -1]], np.int8)\n>>> watershed_ift(input, markers)\n```\n\n----------------------------------------\n\nTITLE: Log Normal Distribution Core Equations\nDESCRIPTION: Mathematical expressions for the probability density function (f), cumulative distribution function (F), and inverse CDF (G) of the log normal distribution with shape parameter σ.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_lognorm.rst#2025-04-14_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;\\sigma\\right) & = & \\frac{1}{\\sigma x\\sqrt{2\\pi}}\\exp\\left(-\\frac{1}{2}\\left(\\frac{\\log x}{\\sigma}\\right)^{2}\\right)\\\\ F\\left(x;\\sigma\\right) & = & \\Phi\\left(\\frac{\\log x}{\\sigma}\\right)\\\\ G\\left(q;\\sigma\\right) & = & \\exp\\left( \\sigma\\Phi^{-1}\\left(q\\right)\\right) \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Returning Named Tuples in Describe Function - SciPy Python\nDESCRIPTION: The `scipy.stats.describe` function now returns a namedtuple instead of a basic tuple, improving the usability of its output by allowing access to results both by index and by name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.15.0-notes.rst#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.describe\n\n```\n\n----------------------------------------\n\nTITLE: Processing Numerical Data Output in SciPy\nDESCRIPTION: This snippet shows a sample of the numerical data output, likely generated by a SciPy computation. Each row contains four columns: an index or parameter value, followed by three high-precision floating-point numbers. This format is common in scientific computing for representing complex calculations or simulation results.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/legendre_p_large_ipp/legendre_p_large.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n29.0 -0.74602639675140380859375 0.050915219643735786802064817454102557266509665552523 -0.27118035040452065163236941090242943684321195237749\n29.0 -0.72904598712921142578125 0.15209960929167220423613043592541930303920942697128 -0.1438359066051312703697159687668902900032679225431\n29.0 -0.5579319000244140625 0.15849246733249484229246386045081847903407720368835 -0.046562152771403674797644638451970346262085750814402\n29.0 -0.38366591930389404296875 0.12421123432704035296982084866318407821031736589989 -0.13993608234219292039527623183264127314107515942999\n29.0 0.264718532562255859375 0.14939214703729469665461134129487953904270632801499 0.011880798886655750194841085329195617037793542295307\n```\n\n----------------------------------------\n\nTITLE: Translating Indexed Fortran Loop to Python\nDESCRIPTION: Showcases a Fortran to Python translation where array indexing is involved. It highlights the adjustment needed for Python's zero-based indexing compared to Fortran's one-based indexing.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/_lib/pyprima/pyprima/README.md#2025-04-14_snippet_2\n\nLANGUAGE: Fortran\nCODE:\n```\ndo i=1:5\n  print *, some_array(i)\nend do\n```\n\nLANGUAGE: Python\nCODE:\n```\nfor i in range(1, 6):\n  print(some_array[i-1])\n```\n\n----------------------------------------\n\nTITLE: Defining Mean for Negative Hypergeometric Distribution in LaTeX\nDESCRIPTION: This LaTeX code defines the mean (μ) of the Negative Hypergeometric Distribution. It expresses the expected number of red balls drawn.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete_nhypergeom.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\mu & = & \\frac{rn}{M-n+1},\n```\n\n----------------------------------------\n\nTITLE: Implementing from_chars Functions for Float and Double Types in C++\nDESCRIPTION: Declaration of the from_chars functions that convert ASCII strings to float and double values. These functions follow C++17-like syntax but only require C++11 and provide exact IEEE-compliant parsing with round-to-even convention.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/fast_matrix_market/dependencies/fast_float/README.md#2025-04-14_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nfrom_chars_result from_chars(const char* first, const char* last, float& value, ...);\nfrom_chars_result from_chars(const char* first, const char* last, double& value, ...);\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicates in Sparse Array Construction in Python\nDESCRIPTION: This snippet shows how duplicate entries are handled when constructing a sparse array using coordinate data.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrow = [0,0,1,1,1,2]\ncol = [0,3,1,1,2,2]\ndata = [1,2,1,3,1,5]\ndupes = sp.sparse.coo_array((data, (row, col)))\nprint(dupes)\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Set\nDESCRIPTION: A collection of numerical data in scientific notation format. Each row contains four values, potentially representing different aspects or calculations of a single data point. The data set spans a wide range of magnitudes, suggesting it may be used for high-precision scientific computations or analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rg_xxx_ipp/ellint_rg_xxx.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n2.5675627459944222489782622617600000000000e+29 2.5675627459944222489782622617600000000000e+29 2.5675627459944222489782622617600000000000e+29 5.0671123393846541489352466281789002492906e+14\n3.6940874261654810399932311142400000000000e+29 0.0000000000000000000000000000000000000000e+00 3.6940874261654810399932311142400000000000e+29 4.7735718753944941501879984350680081563380e+14\n3.6940874261654810399932311142400000000000e+29 3.6940874261654810399932311142400000000000e+29 3.6940874261654810399932311142400000000000e+29 6.0779004813878624743462522846953145750545e+14\n7.0959714371010081353141059584000000000000e+29 0.0000000000000000000000000000000000000000e+00 7.0959714371010081353141059584000000000000e+29 6.6160047860102328328306000176101801354634e+14\n7.0959714371010081353141059584000000000000e+29 7.0959714371010081353141059584000000000000e+29 7.0959714371010081353141059584000000000000e+29 8.4237589217053262814786799393410286531134e+14\n2.0307529873257442803568470917120000000000e+30 0.0000000000000000000000000000000000000000e+00 2.0307529873257442803568470917120000000000e+30 1.1192276528156461323268927556498335683568e+15\n2.0307529873257442803568470917120000000000e+30 2.0307529873257442803568470917120000000000e+30 2.0307529873257442803568470917120000000000e+30 1.4250449071259980052477643058534099790454e+15\n3.7318536643073322480964646993920000000000e+30 0.0000000000000000000000000000000000000000e+00 3.7318536643073322480964646993920000000000e+30 1.5172326648677909730236842431091492235703e+15\n3.7318536643073322480964646993920000000000e+30 3.7318536643073322480964646993920000000000e+30 3.7318536643073322480964646993920000000000e+30 1.9318006274735838402003435745062255436601e+15\n6.4040234014314612931042308259840000000000e+30 0.0000000000000000000000000000000000000000e+00 6.4040234014314612931042308259840000000000e+30 1.9875420993567531657222203961314908274387e+15\n6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 6.4040234014314612931042308259840000000000e+30 2.5306171977269618826461640549666162725883e+15\n1.3591440405379759208451461349376000000000e+31 0.0000000000000000000000000000000000000000e+00 1.3591440405379759208451461349376000000000e+31 2.8954936975635066980078481013868564183761e+15\n1.3591440405379759208451461349376000000000e+31 1.3591440405379759208451461349376000000000e+31 1.3591440405379759208451461349376000000000e+31 3.6866570772692921036467400073686746966762e+15\n3.3548706991994435886603137187840000000000e+31 0.0000000000000000000000000000000000000000e+00 3.3548706991994435886603137187840000000000e+31 4.5491239965723457288592628821698758881194e+15\n3.3548706991994435886603137187840000000000e+31 3.3548706991994435886603137187840000000000e+31 3.3548706991994435886603137187840000000000e+31 5.7921245663395772557775326404468940227350e+15\n6.2057760084058088674091939659776000000000e+31 0.0000000000000000000000000000000000000000e+00 6.2057760084058088674091939659776000000000e+31 6.1871113112631529859540522584168184572734e+15\n6.2057760084058088674091939659776000000000e+31 6.2057760084058088674091939659776000000000e+31 6.2057760084058088674091939659776000000000e+31 7.8776747891784723429422650721321049019186e+15\n1.3704533965093724230190214466764800000000e+32 0.0000000000000000000000000000000000000000e+00 1.3704533965093724230190214466764800000000e+32 9.1943708572408456033307961256304486661631e+15\n1.3704533965093724230190214466764800000000e+32 1.3704533965093724230190214466764800000000e+32 1.3704533965093724230190214466764800000000e+32 1.1706636564399581731037604931828863050347e+16\n2.7845325737156862002881598429593600000000e+32 0.0000000000000000000000000000000000000000e+00 2.7845325737156862002881598429593600000000e+32 1.3105875339070502025565113701553064275724e+16\n2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 2.7845325737156862002881598429593600000000e+32 1.6686918750073921901513738713697895637985e+16\n5.6730753221070809445480004793139200000000e+32 0.0000000000000000000000000000000000000000e+00 5.6730753221070809445480004793139200000000e+32 1.8706785060302898834078011189963298841313e+16\n5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 5.6730753221070809445480004793139200000000e+32 2.3818218493638605767562605728696801051402e+16\n1.2905320649443607278078011679703040000000e+33 0.0000000000000000000000000000000000000000e+00 1.2905320649443607278078011679703040000000e+33 2.8214624917675452573079554773847679055568e+16\n1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 1.2905320649443607278078011679703040000000e+33 3.5923976185054470217364639990584664853853e+16\n1.8829105135731812542623926420766720000000e+33 0.0000000000000000000000000000000000000000e+00 1.8829105135731812542623926420766720000000e+33 3.4080402993893805907426551635283326332711e+16\n1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 1.8829105135731812542623926420766720000000e+33 4.3392516792336224828098230893479933035149e+16\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Number Matrix\nDESCRIPTION: Large matrix of floating point numbers in scientific notation format (e.g. 3.1050470e-04), arranged in rows. Values appear to be normalized between approximately 1e-4 and 1e-1.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-cosine-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n3.1050470e-04   1.1530910e-02   8.0837373e-05   2.6173161e-03   2.7612054e-03   2.3974656e-03...\n```\n\n----------------------------------------\n\nTITLE: Running a Specific GitHub Actions Job\nDESCRIPTION: Executes a specific job from the GitHub Actions workflows by name.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nact -j <JOB_NAME>\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Table\nDESCRIPTION: A structured table of numerical values in scientific notation format. Each row contains three columns of numbers with different scales and precisions, showing systematic variation in the exponents.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_int_data_ipp/bessel_k_int_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.34e2 0.3206622265625e5 0.4669897779805891799705998126652967732775e-13928\n0.34e2 0.3636794921875e5 0.2660341539919842585511498286326720170637e-15796\n0.37e2 0.51139926910400390625e1 0.1272972151896897826158274128583844120665e27\n```\n\n----------------------------------------\n\nTITLE: LAPACK Single Precision Function Declarations in C\nDESCRIPTION: Collection of LAPACK single precision function declarations used in SciPy. These functions perform various linear algebra operations including eigenvalue solutions, matrix manipulations, orthogonal transformations, and specialized decompositions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nvoid slaed7(int *icompq, int *n, int *qsiz, int *tlvls, int *curlvl, int *curpbm, s *d, s *q, int *ldq, int *indxq, s *rho, int *cutpnt, s *qstore, int *qptr, int *prmptr, int *perm, int *givptr, int *givcol, s *givnum, s *work, int *iwork, int *info)\nvoid slaed8(int *icompq, int *k, int *n, int *qsiz, s *d, s *q, int *ldq, int *indxq, s *rho, int *cutpnt, s *z, s *dlamda, s *q2, int *ldq2, s *w, int *perm, int *givptr, int *givcol, s *givnum, int *indxp, int *indx, int *info)\nvoid slaed9(int *k, int *kstart, int *kstop, int *n, s *d, s *q, int *ldq, s *rho, s *dlamda, s *w, s *s, int *lds, int *info)\nvoid slaeda(int *n, int *tlvls, int *curlvl, int *curpbm, int *prmptr, int *perm, int *givptr, int *givcol, s *givnum, s *q, int *qptr, s *z, s *ztemp, int *info)\nvoid slaein(bint *rightv, bint *noinit, int *n, s *h, int *ldh, s *wr, s *wi, s *vr, s *vi, s *b, int *ldb, s *work, s *eps3, s *smlnum, s *bignum, int *info)\nvoid slaev2(s *a, s *b, s *c, s *rt1, s *rt2, s *cs1, s *sn1)\nvoid slaexc(bint *wantq, int *n, s *t, int *ldt, s *q, int *ldq, int *j1, int *n1, int *n2, s *work, int *info)\nvoid slag2(s *a, int *lda, s *b, int *ldb, s *safmin, s *scale1, s *scale2, s *wr1, s *wr2, s *wi)\nvoid slag2d(int *m, int *n, s *sa, int *ldsa, d *a, int *lda, int *info)\nvoid slags2(bint *upper, s *a1, s *a2, s *a3, s *b1, s *b2, s *b3, s *csu, s *snu, s *csv, s *snv, s *csq, s *snq)\nvoid slagtf(int *n, s *a, s *lambda, s *b, s *c, s *tol, s *d, int *in, int *info)\nvoid slagtm(char *trans, int *n, int *nrhs, s *alpha, s *dl, s *d, s *du, s *x, int *ldx, s *beta, s *b, int *ldb)\nvoid slagts(int *job, int *n, s *a, s *b, s *c, s *d, int *in, s *y, s *tol, int *info)\nvoid slagv2(s *a, int *lda, s *b, int *ldb, s *alphar, s *alphai, s *beta, s *csl, s *snl, s *csr, s *snr)\nvoid slahqr(bint *wantt, bint *wantz, int *n, int *ilo, int *ihi, s *h, int *ldh, s *wr, s *wi, int *iloz, int *ihiz, s *z, int *ldz, int *info)\nvoid slahr2(int *n, int *k, int *nb, s *a, int *lda, s *tau, s *t, int *ldt, s *y, int *ldy)\nvoid slaic1(int *job, int *j, s *x, s *sest, s *w, s *gamma, s *sestpr, s *s, s *c)\nvoid slaln2(bint *ltrans, int *na, int *nw, s *smin, s *ca, s *a, int *lda, s *d1, s *d2, s *b, int *ldb, s *wr, s *wi, s *x, int *ldx, s *scale, s *xnorm, int *info)\nvoid slals0(int *icompq, int *nl, int *nr, int *sqre, int *nrhs, s *b, int *ldb, s *bx, int *ldbx, int *perm, int *givptr, int *givcol, int *ldgcol, s *givnum, int *ldgnum, s *poles, s *difl, s *difr, s *z, int *k, s *c, s *s, s *work, int *info)\nvoid slalsa(int *icompq, int *smlsiz, int *n, int *nrhs, s *b, int *ldb, s *bx, int *ldbx, s *u, int *ldu, s *vt, int *k, s *difl, s *difr, s *z, s *poles, int *givptr, int *givcol, int *ldgcol, int *perm, s *givnum, s *c, s *s, s *work, int *iwork, int *info)\nvoid slalsd(char *uplo, int *smlsiz, int *n, int *nrhs, s *d, s *e, s *b, int *ldb, s *rcond, int *rank, s *work, int *iwork, int *info)\ns slamch(char *cmach)\nvoid slamrg(int *n1, int *n2, s *a, int *strd1, int *strd2, int *index_bn)\ns slangb(char *norm, int *n, int *kl, int *ku, s *ab, int *ldab, s *work)\ns slange(char *norm, int *m, int *n, s *a, int *lda, s *work)\ns slangt(char *norm, int *n, s *dl, s *d, s *du)\ns slanhs(char *norm, int *n, s *a, int *lda, s *work)\ns slansb(char *norm, char *uplo, int *n, int *k, s *ab, int *ldab, s *work)\ns slansf(char *norm, char *transr, char *uplo, int *n, s *a, s *work)\ns slansp(char *norm, char *uplo, int *n, s *ap, s *work)\ns slanst(char *norm, int *n, s *d, s *e)\ns slansy(char *norm, char *uplo, int *n, s *a, int *lda, s *work)\ns slantb(char *norm, char *uplo, char *diag, int *n, int *k, s *ab, int *ldab, s *work)\ns slantp(char *norm, char *uplo, char *diag, int *n, s *ap, s *work)\ns slantr(char *norm, char *uplo, char *diag, int *m, int *n, s *a, int *lda, s *work)\nvoid slanv2(s *a, s *b, s *c, s *d, s *rt1r, s *rt1i, s *rt2r, s *rt2i, s *cs, s *sn)\nvoid slapll(int *n, s *x, int *incx, s *y, int *incy, s *ssmin)\nvoid slapmr(bint *forwrd, int *m, int *n, s *x, int *ldx, int *k)\nvoid slapmt(bint *forwrd, int *m, int *n, s *x, int *ldx, int *k)\ns slapy2(s *x, s *y)\ns slapy3(s *x, s *y, s *z)\nvoid slaqgb(int *m, int *n, int *kl, int *ku, s *ab, int *ldab, s *r, s *c, s *rowcnd, s *colcnd, s *amax, char *equed)\nvoid slaqge(int *m, int *n, s *a, int *lda, s *r, s *c, s *rowcnd, s *colcnd, s *amax, char *equed)\nvoid slaqp2(int *m, int *n, int *offset, s *a, int *lda, int *jpvt, s *tau, s *vn1, s *vn2, s *work)\nvoid slaqps(int *m, int *n, int *offset, int *nb, int *kb, s *a, int *lda, int *jpvt, s *tau, s *vn1, s *vn2, s *auxv, s *f, int *ldf)\nvoid slaqr0(bint *wantt, bint *wantz, int *n, int *ilo, int *ihi, s *h, int *ldh, s *wr, s *wi, int *iloz, int *ihiz, s *z, int *ldz, s *work, int *lwork, int *info)\nvoid slaqr1(int *n, s *h, int *ldh, s *sr1, s *si1, s *sr2, s *si2, s *v)\nvoid slaqr2(bint *wantt, bint *wantz, int *n, int *ktop, int *kbot, int *nw, s *h, int *ldh, int *iloz, int *ihiz, s *z, int *ldz, int *ns, int *nd, s *sr, s *si, s *v, int *ldv, int *nh, s *t, int *ldt, int *nv, s *wv, int *ldwv, s *work, int *lwork)\nvoid slaqr3(bint *wantt, bint *wantz, int *n, int *ktop, int *kbot, int *nw, s *h, int *ldh, int *iloz, int *ihiz, s *z, int *ldz, int *ns, int *nd, s *sr, s *si, s *v, int *ldv, int *nh, s *t, int *ldt, int *nv, s *wv, int *ldwv, s *work, int *lwork)\nvoid slaqr4(bint *wantt, bint *wantz, int *n, int *ilo, int *ihi, s *h, int *ldh, s *wr, s *wi, int *iloz, int *ihiz, s *z, int *ldz, s *work, int *lwork, int *info)\nvoid slaqr5(bint *wantt, bint *wantz, int *kacc22, int *n, int *ktop, int *kbot, int *nshfts, s *sr, s *si, s *h, int *ldh, int *iloz, int *ihiz, s *z, int *ldz, s *v, int *ldv, s *u, int *ldu, int *nv, s *wv, int *ldwv, int *nh, s *wh, int *ldwh)\nvoid slaqsb(char *uplo, int *n, int *kd, s *ab, int *ldab, s *s, s *scond, s *amax, char *equed)\nvoid slaqsp(char *uplo, int *n, s *ap, s *s, s *scond, s *amax, char *equed)\nvoid slaqsy(char *uplo, int *n, s *a, int *lda, s *s, s *scond, s *amax, char *equed)\nvoid slaqtr(bint *ltran, bint *lreal, int *n, s *t, int *ldt, s *b, s *w, s *scale, s *x, s *work, int *info)\nvoid slar1v(int *n, int *b1, int *bn, s *lambda, s *d, s *l, s *ld, s *lld, s *pivmin, s *gaptol, s *z, bint *wantnc, int *negcnt, s *ztz, s *mingma, int *r, int *isuppz, s *nrminv, s *resid, s *rqcorr, s *work)\nvoid slar2v(int *n, s *x, s *y, s *z, int *incx, s *c, s *s, int *incc)\nvoid slarf(char *side, int *m, int *n, s *v, int *incv, s *tau, s *c, int *ldc, s *work)\nvoid slarfb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, s *v, int *ldv, s *t, int *ldt, s *c, int *ldc, s *work, int *ldwork)\nvoid slarfg(int *n, s *alpha, s *x, int *incx, s *tau)\nvoid slarfgp(int *n, s *alpha, s *x, int *incx, s *tau)\nvoid slarft(char *direct, char *storev, int *n, int *k, s *v, int *ldv, s *tau, s *t, int *ldt)\nvoid slarfx(char *side, int *m, int *n, s *v, s *tau, s *c, int *ldc, s *work)\nvoid slargv(int *n, s *x, int *incx, s *y, int *incy, s *c, int *incc)\nvoid slarnv(int *idist, int *iseed, int *n, s *x)\nvoid slarra(int *n, s *d, s *e, s *e2, s *spltol, s *tnrm, int *nsplit, int *isplit, int *info)\nvoid slarrb(int *n, s *d, s *lld, int *ifirst, int *ilast, s *rtol1, s *rtol2, int *offset, s *w, s *wgap, s *werr, s *work, int *iwork, s *pivmin, s *spdiam, int *twist, int *info)\nvoid slarrc(char *jobt, int *n, s *vl, s *vu, s *d, s *e, s *pivmin, int *eigcnt, int *lcnt, int *rcnt, int *info)\nvoid slarrd(char *range, char *order, int *n, s *vl, s *vu, int *il, int *iu, s *gers, s *reltol, s *d, s *e, s *e2, s *pivmin, int *nsplit, int *isplit, int *m, s *w, s *werr, s *wl, s *wu, int *iblock, int *indexw, s *work, int *iwork, int *info)\nvoid slarre(char *range, int *n, s *vl, s *vu, int *il, int *iu, s *d, s *e, s *e2, s *rtol1, s *rtol2, s *spltol, int *nsplit, int *isplit, int *m, s *w, s *werr, s *wgap, int *iblock, int *indexw, s *gers, s *pivmin, s *work, int *iwork, int *info)\nvoid slarrf(int *n, s *d, s *l, s *ld, int *clstrt, int *clend, s *w, s *wgap, s *werr, s *spdiam, s *clgapl, s *clgapr, s *pivmin, s *sigma, s *dplus, s *lplus, s *work, int *info)\nvoid slarrj(int *n, s *d, s *e2, int *ifirst, int *ilast, s *rtol, int *offset, s *w, s *werr, s *work, int *iwork, s *pivmin, s *spdiam, int *info)\nvoid slarrk(int *n, int *iw, s *gl, s *gu, s *d, s *e2, s *pivmin, s *reltol, s *w, s *werr, int *info)\nvoid slarrr(int *n, s *d, s *e, int *info)\nvoid slarrv(int *n, s *vl, s *vu, s *d, s *l, s *pivmin, int *isplit, int *m, int *dol, int *dou, s *minrgp, s *rtol1, s *rtol2, s *w, s *werr, s *wgap, int *iblock, int *indexw, s *gers, s *z, int *ldz, int *isuppz, s *work, int *iwork, int *info)\nvoid slartg(s *f, s *g, s *cs, s *sn, s *r)\nvoid slartgp(s *f, s *g, s *cs, s *sn, s *r)\nvoid slartgs(s *x, s *y, s *sigma, s *cs, s *sn)\nvoid slartv(int *n, s *x, int *incx, s *y, int *incy, s *c, s *s, int *incc)\nvoid slaruv(int *iseed, int *n, s *x)\nvoid slarz(char *side, int *m, int *n, int *l, s *v, int *incv, s *tau, s *c, int *ldc, s *work)\nvoid slarzb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, int *l, s *v, int *ldv, s *t, int *ldt, s *c, int *ldc, s *work, int *ldwork)\nvoid slarzt(char *direct, char *storev, int *n, int *k, s *v, int *ldv, s *tau, s *t, int *ldt)\nvoid slas2(s *f, s *g, s *h, s *ssmin, s *ssmax)\nvoid slascl(char *type_bn, int *kl, int *ku, s *cfrom, s *cto, int *m, int *n, s *a, int *lda, int *info)\nvoid slasd0(int *n, int *sqre, s *d, s *e, s *u, int *ldu, s *vt, int *ldvt, int *smlsiz, int *iwork, s *work, int *info)\nvoid slasd1(int *nl, int *nr, int *sqre, s *d, s *alpha, s *beta, s *u, int *ldu, s *vt, int *ldvt, int *idxq, int *iwork, s *work, int *info)\nvoid slasd2(int *nl, int *nr, int *sqre, int *k, s *d, s *z, s *alpha, s *beta, s *u, int *ldu, s *vt, int *ldvt, s *dsigma, s *u2, int *ldu2, s *vt2, int *ldvt2, int *idxp, int *idx, int *idxc, int *idxq, int *coltyp, int *info)\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Data Matrix\nDESCRIPTION: Matrix of numerical data arranged in three columns, with values in scientific notation having approximately 100 digits of precision. The data appears to represent some form of computational or scientific calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_large_data_ipp/owens_t_large_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 4.9941334873437881469726562500000000000000000000000000000000000000000000000000000000000000000000000000e-03 7.0449639899870592659696940194165894078221478743636177276452778063686796017172313068286427667602147935e-04\n4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 9.2842318117618560791015625000000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.3096482581986325660863332596784474091662747261270395952952155203741901484600351250819416968434307413e-03\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Values in Sparse Array using sum_duplicates() in Python\nDESCRIPTION: This code shows how to use the sum_duplicates() method to remove duplicate values within a sparse array, reducing the number of stored elements.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/sparse.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n>>> dupes.sum_duplicates()\n>>> dupes\n<COOrdinate sparse array of dtype 'int64'\n     with 5 stored elements and shape (3, 4)>\n```\n\n----------------------------------------\n\nTITLE: Floating Point Data Table\nDESCRIPTION: Table of three-column numeric data with high precision floating point values (96.xx, varying values, and scientific notation numbers with negative exponents).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/beta_med_data_ipp/beta_med_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n96.48920440673828125\t39.228778839111328125\t0.1722243178046887845030102822383146681675e-35\n96.48920440673828125\t39.8798675537109375\t0.7660267171581016219954645276369696381744e-36\n96.48920440673828125\t42.181911468505859375\t0.4638392559345469702960643784702962483204e-37\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Representation\nDESCRIPTION: Raw numeric dataset with three columns representing floating point values, likely from a scientific or mathematical computation\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/expint_1_data_ipp/expint_1_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plain-text\nCODE:\n```\n1.0 0.1690093176520690576580818742513656616211e-8 19.62126651228390287899433646349668926594\n```\n\n----------------------------------------\n\nTITLE: LAPACK Matrix Transformation Functions\nDESCRIPTION: Functions for performing matrix transformations like scaling, permutation, and orthogonal transformations on complex matrices.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_lapack_signatures.txt#2025-04-14_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nvoid zlarf(char *side, int *m, int *n, z *v, int *incv, z *tau, z *c, int *ldc, z *work);\nvoid zlarfb(char *side, char *trans, char *direct, char *storev, int *m, int *n, int *k, z *v, int *ldv, z *t, int *ldt, z *c, int *ldc, z *work, int *ldwork);\nvoid zlarfg(int *n, z *alpha, z *x, int *incx, z *tau);\nvoid zlarft(char *direct, char *storev, int *n, int *k, z *v, int *ldv, z *tau, z *t, int *ldt);\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Arrays with NumPy in Python\nDESCRIPTION: This snippet initializes NumPy arrays for two compounds: free proline and total collagen, recording their measurements to be used for correlation analysis. NumPy is required for this operation.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_pearsonr.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n# total collagen (mg/g dry weight of liver)\nx = np.array([7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4])\n# free proline (μ mole/g dry weight of liver)\ny = np.array([2.8, 2.9, 2.8, 2.6, 3.5, 4.6, 5.0])\n```\n\n----------------------------------------\n\nTITLE: Numerical Matrix Data\nDESCRIPTION: A dataset containing floating-point values arranged in 4 columns, with high precision decimal numbers. Each row appears to contain related numerical calculations or measurements.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_inva_data_ipp/igamma_inva_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0.11342023313045501708984375\t0.097540400922298431396484375\t1.035869900800721563193351335409353423054156223778352824799732510014114331303190861923913851617789576\t0.05862165929221091309602935851268320728966552926925608108837955463403857541085640683871851098187935567\n0.11342023313045501708984375\t0.12698681652545928955078125\t0.93513162632210132756150227031041961003749580131891848591112697892138664595709032559736553036690404\t0.07702073629515159209895492482246819546302457039495283952439305125976814739590655422243170396591695024\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data Matrix in Scientific Notation\nDESCRIPTION: This snippet shows a portion of the numerical data matrix. Each row contains a constant value, a negative exponent, and a calculated result. The data is presented in scientific notation with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipeinc_neg_m.txt#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n3.493035493032383698e-01 -0.000000000000000000e+00 3.493035493032383698e-01\n3.493035493032383698e-01 -1.250000000000000000e+02 7.902022494515505979e-01\n3.493035493032383698e-01 -2.500000000000000000e+02 1.047023725366886371e+00\n3.493035493032383698e-01 -3.750000000000000000e+02 1.249904671032292747e+00\n3.493035493032383698e-01 -5.000000000000000000e+02 1.423236587911341777e+00\n```\n\n----------------------------------------\n\nTITLE: Defining KStwobign Distribution Functions in LaTeX\nDESCRIPTION: This LaTeX code snippet defines the cumulative distribution function (F(x)) and probability density function (f(x)) for the KStwobign distribution. It includes three equivalent forms for F(x) and one form for f(x).\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_kstwobign.rst#2025-04-14_snippet_0\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}  F\\left(x\\right) & = & 1 - 2 \\sum_{k=1}^{\\infty} (-1)^{k-1} e^{-2k^2 x^2}\\\\\n    & = & \\frac{\\sqrt{2\\pi}}{x} \\sum_{k=1}^{\\infty} e^{-(2k-1)^2 \\pi^2/(8x^2)}\\\\\n    & = & 1 - \\textrm{scipy.special.kolmogorov}(n, x) \\\\\n    f\\left(x\\right) & = & 8x \\sum_{k=1}^{\\infty} (-1)^{k-1} k^2 e^{-2k^2 x^2} \\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue Links in reStructuredText Format\nDESCRIPTION: List of issues formatted as reStructuredText hyperlinks, each containing an issue number and brief description\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.11.0-notes.rst#2025-04-14_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n`#17532 <https://github.com/scipy/scipy/issues/17532>`__: DOC: side bar renders over the top of some of the text in the...\n```\n\n----------------------------------------\n\nTITLE: High-Precision Floating-Point Number Sequence\nDESCRIPTION: This snippet presents a sequence of high-precision floating-point numbers, likely used for numerical analysis or testing of mathematical operations. Each row contains six numbers with varying levels of precision and magnitude.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0.2986399704241193830966949462890625e-4 100.0 0.3684105476210905758660119691693999231568920244230418745036699745074355905854317943022531500070237571e-45 0.1100240115387169835703968243867209607905004251861690953489409564307109814718315728157810594225260069e-49 33484.55873120463934731267396383912648082676031659672075924638406707356628389768067886893955635255911 0.9999999999999999999999999999999999999999999999999889975988461283016429603175613279039209499574813831\n```\n\n----------------------------------------\n\nTITLE: Defining ReStructuredText Substitution for Differential Evolution\nDESCRIPTION: This snippet defines a ReStructuredText substitution for the 'differential_evolution' term, which can be used throughout the document for consistent referencing.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/development_workflow.rst#2025-04-14_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |differential_evolution| replace:: ``differential_evolution``\n```\n\n----------------------------------------\n\nTITLE: Accessing P-value from Monte Carlo Test\nDESCRIPTION: This snippet shows how to access the p-value from the result of the Monte Carlo test. This p-value provides a more accurate assessment of normality, especially with small sample sizes.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/hypothesis_normaltest.md#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres.pvalue\n```\n\n----------------------------------------\n\nTITLE: Column 5: Iteration Count or Time Step\nDESCRIPTION: The fifth column (e.g., 110.4026715369488453064104627380846169702601581942999538611195423927551675575860789385377795276185642) might represent the iteration count in an iterative process or the time step in a time-dependent simulation. It indicates the progression of the computation or simulation over time or iterations. The units depend on the specific problem being solved.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\"110.4026715369488453064104627380846169702601581942999538611195423927551675575860789385377795276185642\"\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Set Processing in Scientific Computing\nDESCRIPTION: Raw numeric data representing complex mathematical computations with high-precision floating-point values. Contains multiple columns of numerical sequences, potentially used for scientific or mathematical analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yv_prime_data_ipp/bessel_yv_prime_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: numeric\nCODE:\n```\n-0.22177286446094512939453125e-2 0.11958599090576171875e0 5.4273943005151092051811912552731669123015083187232\n```\n\n----------------------------------------\n\nTITLE: Defining Probability Density Function for Reciprocal Inverse Gaussian Distribution in LaTeX\nDESCRIPTION: This LaTeX code snippet defines the probability density function (pdf) and cumulative distribution function (cdf) for the Reciprocal Inverse Gaussian Distribution, derived from the Inverse Gaussian Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_recipinvgauss.rst#2025-04-14_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*} f_{RIG}\\left(x;\\mu\\right) & = & \\frac{1}{\\sqrt{2\\pi x}}\\exp\\left(-\\frac{\\left(1-\\mu x\\right)^{2}}{2x\\mu^{2}}\\right)\\\\ F_{RIG}\\left(x;\\mu\\right) & = & 1-F_{IG}\\left(\\frac{1}{x},\\mu\\right)\\\\  & = & 1-\\Phi\\left(\\frac{1}{\\sqrt{x}}\\frac{1-\\mu x}{\\mu}\\right)-\\exp\\left(\\frac{2}{\\mu}\\right)\\Phi\\left(-\\frac{1}{\\sqrt{x}}\\frac{1+\\mu x}{\\mu}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Tabular Floating Point Data\nDESCRIPTION: A structured dataset containing high-precision floating point numbers arranged in 4 columns. Each row contains numerical values with up to 72 decimal places of precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_inva_data_ipp/igamma_inva_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n0.476447999477386474609375\t0.54722058773040771484375\t0.6942147568794122696200017270629557570076703163891712593315468480078768034853161200814111932265608757\t0.8574495251440085350859678096982695288723874542394079979930290904412490567933548532369594229447389463\n0.476447999477386474609375\t0.6323592662811279296875\t0.5589786726957033422941602375813373046879722363449824559752641350510778309452479538716704122275528471\t1.023577834553390956652648263292654002446782700792026164932025970575470481406702608985240964104843903\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Complex Backend Skip Configuration with Exceptions\nDESCRIPTION: Example showing how to skip certain backends while making exceptions for specific implementations like JAX.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/api-dev/array_api.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n@pytest.mark.skip_xp_backends(cpu_only=True, exceptions=['jax.numpy'])\n@pytest.mark.skip_xp_backends('array_api_strict', reason='skip reason 1')\n@pytest.mark.skip_xp_backends('cupy', reason='skip reason 2')\ndef test_toto(self, xp):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data for SciPy Computations\nDESCRIPTION: This snippet shows a portion of a larger dataset used in SciPy, a scientific computing library for Python. The data is arranged in three columns of floating-point numbers with high precision, possibly representing inputs and outputs for various mathematical operations or test cases.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipeinc_neg_m.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.000000000000000040e-156 -1.778279410038922677e-15 1.000000000000000040e-156\n1.000000000000000040e-156 -1.333521432163323929e-09 1.000000000000000040e-156\n1.000000000000000040e-156 -1.000000000000000021e-03 1.000000000000000040e-156\n1.000000000000000040e-156 -8.750000000000000182e-04 1.000000000000000040e-156\n1.000000000000000040e-156 -7.500000000000000156e-04 1.000000000000000040e-156\n```\n\n----------------------------------------\n\nTITLE: Performing Hermitian Rank-K Matrix Operations in C\nDESCRIPTION: This declaration defines a Hermitian rank-k update function, which adjusts a matrix based on the product of complex matrix operands conforming to BLAS Level-3 operations. It targets efficient possible k-rank operations while using complex matrices that adhere to a specified transposition configuration.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/linalg/cython_blas_signatures.txt#2025-04-14_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid zher2k(char *uplo, char *trans, int *n, int *k, z *alpha, z *a, int *lda, z *b, int *ldb, d *beta, z *c, int *ldc)\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Matrix\nDESCRIPTION: Matrix of floating point numbers in scientific notation format (e.g., 1.00e-04). Each row contains 4 columns of numerical values with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/wright_bessel.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1.000000000000000048e-04 2.000000000000000000e+00 2.220446049250313081e-14 1.000000000000022204e+00\n1.000000000000000048e-04 2.000000000000000000e+00 9.999999999999777955e-01 2.718166891091747139e+00\n...\n```\n\n----------------------------------------\n\nTITLE: Referencing Bisection Method Implementation in SciPy\nDESCRIPTION: This RST code defines documentation references for the bisection method implementation in scipy.optimize.root_scalar. It connects the function to its implementation file and specifies the method as 'bisect'.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/optimize.root_scalar-bisect.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _optimize.root_scalar-bisect:\n\nroot_scalar(method='bisect')\n----------------------------\n\n.. scipy-optimize:function:: scipy.optimize.root_scalar\n   :impl: scipy.optimize._root_scalar._root_scalar_bisect_doc\n   :method: bisect\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Matrix Data\nDESCRIPTION: Matrix of numerical data with high precision floating point values. Contains multiple columns with values ranging from very small (10^-20) to very large (10^38) numbers. Appears to be output or test data for numerical computing operations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/wright_bessel.txt#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n1.000000000000000000e+01 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00\n1.000000000000000000e+01 0.000000000000000000e+00 2.220446049250313081e-14 6.118954059882917101e-20\n1.000000000000000000e+01 0.000000000000000000e+00 9.999999999999777955e-01 2.755731922402638069e-06\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Set for SciPy Testing\nDESCRIPTION: This snippet contains a portion of a large numerical dataset, likely used for testing or benchmarking in SciPy. Each row contains three floating-point numbers: an incrementing value and two high-precision values. This data could be used to test mathematical functions, numerical algorithms, or performance in scientific computing scenarios.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yn_data_ipp/bessel_yn_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.3e1\t0.48770198822021484375e1\t0.110763167474753768460862899966350902213e0\n0.3e1\t0.6349340915679931640625e1\t0.3354120577583840086404698897976135110485e0\n0.3e1\t0.677385044097900390625e1\t0.3025179709577162581120705977708622170952e0\n0.3e1\t0.941909885406494140625e1\t-0.2526681038602083570260072993947985762425e0\n0.3e1\t0.110517024993896484375e2\t-0.7984312482740648942854070462466960846308e-1\n0.3e1\t0.139249114990234375e2\t0.1365190825919215541308802073699101624338e0\n0.3e1\t0.15408351898193359375e2\t-0.1428229643813645478620540882069209010424e0\n0.3e1\t0.27344074249267578125e2\t-0.2323694273239485669670827936469439230487e-2\n0.3e1\t0.273610286712646484375e2\t-0.4900800934361467422069755250398652540081e-2\n0.3e1\t0.316179637908935546875e2\t0.1283616028850886874076400480565553924498e0\n```\n\n----------------------------------------\n\nTITLE: Numerical Matrix Data\nDESCRIPTION: Large matrix of numerical data in scientific notation format, containing three columns of decimal values. Data appears to be computation results or test data, with the first two columns containing large numbers and the third column containing zeros or very small values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/gammainc.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n9.991815098926849663e+06 7.822393098339641467e+06 0.000000000000000000e+00\n2.210405613920968026e+07 1.730482544730401039e+07 0.000000000000000000e+00\n4.889895308989535272e+07 3.828201676865634322e+07 0.000000000000000000e+00\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Merge Logging\nDESCRIPTION: Example of merge section in .gitconfig file and the equivalent command to enable detailed merge summaries.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[merge]\n   log = true\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Table\nDESCRIPTION: Space-separated data table containing high precision floating point values organized in rows. Each row starts with either 8 or 9 and contains scientific notation values. This appears to be test data or calculation results.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/gsl/mathieu_ce_se.txt#2025-04-14_snippet_2\n\nLANGUAGE: data\nCODE:\n```\n8 -4.999999999999999773741e-08 -1000.899999999999977263 -0.7520206473925571399874 -0.6591395501317168781341\n8 -4.999999999999999773741e-08 -100.2000000000000028422 -0.8805033535913684428209 0.4740399178216068154512\n8 -4.999999999999999773741e-08 -10 -0.1103872409406449900393 0.9938886540823561599467\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data for SciPy Computations\nDESCRIPTION: This data set contains rows of 6 floating-point numbers, possibly representing inputs and outputs for SciPy numerical operations. The numbers vary widely in scale, from very small to very large values, and include both integer and fractional parts.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_big_data_ipp/igamma_big_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n15.848876953125 17.433765411376953125 276418089995.5182977583485870106970920893181614522453054100708596769898091436424991903972703788274048 0.3196273201179456360699084292479660831495832765300870907843636160354702907952999370398452431237945279 588395624594.0771539355132020844898238604873926076617272651897363954332132277109859352380791426607546 0.6803726798820543639300915707520339168504167234699129092156363839645297092047000629601547568762054721\n15.848876953125 31.69775390625 600115680.0552881611631351060216683189405541890544644705063642761972412838246249798196614828552764838 0.0006939247955151567565333562468275434183953541839757314991779604903811767298775213262009267488021013578 864213598909.5401635326986539891652476308649998708525682047542317962257810875288601458156880386328829 0.9993060752044848432434666437531724565816046458160242685008220395096188232701224786737990732511978986\n15.848876953125 1584.8876953125 0.163113107886086212173341867174873538338245524954349590570123573389562869154431409212893994879965561e-640 0.1886106859018683526851896176897136734503221273018007213192423142235257246798335688754957508764658987e-652 864813714589.5954516938617890951869159498055540599070326752605960724230223713534851256353495214881594 1.0\n31.314670562744140625 0.31314671039581298828125 778814717265774041244257106576403.8762726779997758454998199471243191703416382620718627158499147494477 0.9999999999999999999999999999999999999999999999999950959137153087603014420451969750429893744095041344 0.3819374573258768108704504016301750815256621981358015693603312864160916003899145582284112517497628668e-17 0.4904086284691239698557954803024957010625590495865573359650157227911125525690354777910557062747862277e-50\n31.314670562744140625 15.6573352813720703125 778566748518545485819764026092029.3967926151533938708061462099726511062555247902358317612307006611185 0.9996816075226478610969989773281892617240254186595266143385804198244875580182844440178678518270519304 247968747228555424493080484374.4794800628463819785130483104104361727906174881377817698758360696872852 0.0003183924773521389030010226718107382759745813404733856614195801755124419817155559821321481729480695913\n31.314670562744140625 29.314670562744140625 482833004676075172025820076340398.5825076976088758458228145385414356908480478542985227797515278585995 0.6199587578046579563535732598122442716901781651755658652796921025962309785151402994672345926666338678 295981712589698869218437030236005.2937649803909000034963799818416515881980944240750907513550088722062 0.3800412421953420436464267401877557283098218348244341347203078974037690214848597005327654073333661322\n31.314670562744140625 31.314670562744140625 370896755851488155472593493346712.4148522225290894677086951560628033554992036606815816518641978652044 0.4762323407980976323633991971154651466476069357868160897744155471908994651638810938674341752996143168 407917961414285885771663613229691.4614204554706863816104993643202839235469386176920318792423388656014 0.5237676592019023676366008028845348533523930642131839102255844528091005348361189061325658247003856832\n31.314670562744140625 33.314670562744140625 265681367758662399528500798549489.3873078049748167004775392929153103324001665415310450711121021919659 0.341135525393515942422391557029251027725203882426279944364470583016243351049186313788982692413516029 513133349507111641715756308026914.4889648730249591488416552274677769466459757368425684599944345388399 0.658864474606484057577608442970748972274796117573720055635529416983756648950813686211017307586483971\n31.314670562744140625 62.62934112548828125 3510010126637801956668819257.072053526730185083745305267217330129045954120627734398876930280129849447 0.4506861579299091675241191860802733381157752245815262181090987037577205034661630859784327486984048456e-5 778811207255647403442300437757146.8042191512695907655738892531657571500001881577458791322296064506759 0.999995493138420700908324758808139197266618842247754184737818909012962422794965338369140215672513016\n31.314670562744140625 3131.467041015625 0.9949734465011292884466475563156032901596853314020868171193367788975411454622042657355174384631237416e-1254 0.1277548336521214074803527819363002291258891900025277489565447091643729687904056223818620236180077516e-1286 778814717265774041244257106576403.8762726779997758493191945203830872790461422783736135311065367308058 1.0\n35.515575408935546875 0.355155766010284423828125 1839496023049279394690396563357488048160.926936902696873121474514229378668678846124147186118781332621 0.9999999999999999999999999999999999999999999999999999999988311705518566854522503357086930487486812418 0.2150057121482511052324363863657911472278809675549019401721908701625163879196312421165006871524811668e-17 0.1168829448143314547749664291306951251318758167273262927421466644472211354971342245927769000593543944e-56\n35.515575408935546875 17.7577877044677734375 1839250295623752849967374524755040772041.511965420859962594232308478793865855168465893679099785396169 0.9998664158973721457296652833638056718266664745466398849509354664513991159042158535832578423891303598 245727425526544723022038602447276119.4149714818369105293922628720673138760020221171649304682152617598 0.000133584102627854270334716636194328173333525453360115049064533548600884095784146416742157610869640248\n35.515575408935546875 33.515575408935546875 1126716761530690811983406818725232577296.140512385245346121416437687863367701603471251111605815700971 0.6125138339048784673611008444529708074044457722184180569761021928679936686124029766660288710214041085 712779261518588582706989744632255470864.7864245174515270022081336629978120295670167597324244379104599 0.3874861660951215326388991555470291925955542277815819430238978071320063313875970233339711289785958915\n35.515575408935546875 35.515575408935546875 878695297016098993751007321739301720829.4727268066609360575474550081846711938082514413961359329625398 0.4776826293755782058145073704574612504921398873157110358604907120033842521624253362408436148039094658 960800726033180400939389241618186327331.4542100960359370660771163426765085373622365694478943206488914 0.5223173706244217941854926295425387495078601126842889641395092879966157478375746637591563851960905342\n35.515575408935546875 37.515575408935546875 643897589426613602623485968571508913189.7152520524471566296144651913565045824300879927548999957274038 0.3500402182763315670128709273491916384350933712803249530899083839804758189215891746180200615671579888 1195598433622665792066910594785979134971.211684850249716494010106159504675148740400018089130257884027 0.6499597817236684329871290726508083615649066287196750469100916160195241810784108253819799384328420112\n35.515575408935546875 71.03115081787109375 2158910129007642031735750832929901.432294137427407475107438019527761330492604912014324864125358688972 0.1173642183487235327037390685996140001643280328037847481368390684502765726051207257699613803418768997e-5 1839493864139150387048364827606655118259.494642765269465648517133331333418400677883098829705389486072 0.9999988263578165127646729626093140038599983567196719621525186316093154972342739487927423003861965812\n35.515575408935546875 3551.5576171875 0.1340030996194779112296477120665147262826786996479245056900015054289664486503723649859792530476059284e-1419 0.7284772456172253407403713169396491570909000355628240421568270918043560629979548519498562921345492656e-1459 1839496023049279394690396563357488048160.926936902696873123624571350861179731170488010844030253611431 1.0\n95.0640411376953125 0.9506404399871826171875 0.145510476855517573901572383428911247103923229518208566615055995925169354783431079715899205682607104 1.0 0.3338748844030338166357658335733104939045075103209763229768920051823157362177984933932816984293886097e-4 0.2294507527004738159428298921938008182351350879950245832976058440950034518526560630407577127311992909e-150\n95.0640411376953125 47.53202056884765625 0.1455104767317315688714628619298764969395583677721590029196049408676387503309128823706686067571141588 0.9999999991492983343527836690569163403364335708467316108801184271247197504258774844023559647719048361 0.1237860050301095214990347501643648617460495636954510550575306044525181973452305989254929452136627688 0.8507016656472163309430836596635664291532683891198815728752802495741225155976440352280951639280628239e-9\n95.0640411376953125 93.0640411376953125 0.8270953894409340626253014797078388694548935740964212374525082405522401617834178085260777282042004003 0.5684095106513779855100143265286500637194863353225008935081840999467563524252772890135430364314749654 0.6280093791142416763904223545812736015843387210856644286980517186994533860508929886329143286218706396 0.4315904893486220144899856734713499362805136646774991064918159000532436475747227109864569635685250346\n95.0640411376953125 95.0640411376953125 0.7077051625452294911344927408220857430447700121426935420144897510955828892742667812806226323972360384 0.4863602799184931701789661009861255111997908526943918773797582829282683257000441156493062801250089046 0.7473996060099462478812310934670267279944622830393921241360702081561106585600440158783694244288350016 0.5136397200815068298210338990138744888002091473056081226202417170717316742999558843506937198749910954\n95.0640411376953125 97.0640411376953125 0.5907750060751459131633159171875333040151503013593145312641721231743104807411741543193437407980260481 0.406001697500962089288941792982261441414876691538444277046888243696282520680806473204672610497138837 0.8643297624800298258524079171015791670240819938227711348863878360773830670931366428396483160280449919 0.593998302499037910711058207017738558585123308461555722953111756303717479319193526795327389502861163\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Array\nDESCRIPTION: A space-separated series of floating point numbers between 0 and 1, possibly representing experimental data, test results, or benchmark measurements. The data is formatted in rows and appears to contain several hundred values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-jensenshannon-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n96275 0.193689434624 0.229701750232 0.206631480423 0.194727732257 0.195938025333 0.209362001884 0.218147207364 0.211029564766 0.177869147322 0.200327033561 0.193124484677 0.193233901741 0.233604044389 0.215980508747 0.201289146742 0.20219168761 0.219726845187 0.195458087393 0.2103246028 0.212820091698...\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Array\nDESCRIPTION: Dataset containing three columns: a multiplier value, a base value, and a high-precision computation result. Values are expressed in scientific notation with varying levels of precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_prime_int_data_ipp/bessel_k_prime_int_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0.1e2 0.95070552825927734375e1 -0.0048920993505572960222402647401810804498324804265215\n0.1e2 0.24750102996826171875e2 -3.4689222049741036586790338104009980518135677358114e-11\n0.1e2 0.637722015380859375e2 -6.9941732925977905518953049214710822212998739942219e-29\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Data Table in Plaintext\nDESCRIPTION: This snippet shows a portion of the numerical data table. Each row contains three floating-point values separated by tabs. The first column increments by 0.03e2, while the second and third columns contain various numerical values with different exponents.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yn_data_ipp/bessel_yn_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0.27e2\t0.316179637908935546875e2\t0.146919681225764025208625464704925761097e0\n0.27e2\t0.4073618316650390625e2\t0.7870921593406705963080756994997274488282e-1\n0.27e2\t0.4175042724609375e2\t0.1377040623482925264077068216102224276994e0\n0.27e2\t0.452895965576171875e2\t-0.1097401858162375653284138113096804910789e0\n0.27e2\t0.45668792724609375e2\t-0.1260546859890806748764811329954061199216e0\n0.27e2\t0.48443389892578125e2\t0.5070577955058294270091859102131542430449e-1\n```\n\n----------------------------------------\n\nTITLE: Parsing Floating Point Scientific Notation Dataset\nDESCRIPTION: Represents a numeric dataset with three columns of very small decimal values expressed in scientific notation. Each row contains three values with extremely high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/erf_small_data_ipp/erf_small_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.1495718898928958003798630318006718936674e-21\t0.1687738045382474786366114844967457859701e-21\t0.9999999999999999999998312261954617525214\n```\n\n----------------------------------------\n\nTITLE: Updated ndimage Function Requirements\nDESCRIPTION: Modification to binary_erosion, binary_closing, and binary_dilation functions to require integer values for iterations parameter to fix reported issues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/1.3.0-notes.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipy.ndimage.binary_erosion(iterations=int)\nscipy.ndimage.binary_closing(iterations=int)\nscipy.ndimage.binary_dilation(iterations=int)\n```\n\n----------------------------------------\n\nTITLE: Tabulated Numerical Data for SciPy Computations\nDESCRIPTION: This data set contains three columns of numerical values, possibly representing input parameters and results for a specific mathematical or statistical operation in SciPy. The values are in scientific notation with high precision, suggesting they are used for accurate numerical computations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_i_int_data_ipp/bessel_i_int_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.43e2\t0.1760916970670223236083984375e-1\t0.6939626160739405567413386511279574703658e-141\n0.43e2\t0.6152711808681488037109375e-1\t0.1601162868348926363724149071999208219269e-117\n0.43e2\t0.11958599090576171875e0\t0.411957091818736604416055444734691767854e-105\n0.43e2\t0.15262925624847412109375e0\t0.1482674713827075151052028716968653639318e-100\n0.43e2\t0.408089816570281982421875e0\t0.3447244054889731161807594240462186574805e-82\n0.43e2\t0.6540834903717041015625e0\t0.2227646296476468683363124051704462003365e-73\n0.43e2\t0.1097540378570556640625e1\t0.1036615084804202732881289594829753840317e-63\n0.43e2\t0.30944411754608154296875e1\t0.2472940668271158777166795791968979108208e-44\n0.43e2\t0.51139926910400390625e1\t0.6541484773312980997922339761025247990602e-35\n0.43e2\t0.95070552825927734375e1\t0.3567126305847535292621986818143391582414e-23\n0.43e2\t0.24750102996826171875e2\t0.4535966725472100733636605024987920402377e-4\n0.43e2\t0.637722015380859375e2\t0.1860151703327425260186251584987331618812e21\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Matrix Data\nDESCRIPTION: Large matrix of floating point values, formatted in scientific notation. Contains normalized values between 0-1 with high precision (e-01 to e-04 range).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-correlation-ml-iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1.8066071e-01   1.9389274e-01   1.8653629e-01   1.0911288e-01   1.9242842e-01   4.3299781e-01   3.7574545e-01   3.5353088e-01   3.6969868e-01   3.9574789e-01   3.9644649e-01   3.8564737e-01   3.7707427e-01   4.0646475e-01   3.2727058e-01   2.6301141e-01...\n```\n\n----------------------------------------\n\nTITLE: Weibull Min Distribution Core Functions in LaTeX\nDESCRIPTION: Defines the fundamental functions of the Weibull Minimum distribution including probability density function f(x;c), cumulative distribution function F(x;c), and inverse CDF G(q;c) for x>0 and c>0.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_weibull_min.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*}\n    f\\left(x;c\\right) & = & cx^{c-1}\\exp\\left(-x^{c}\\right) \\\\\n    F\\left(x;c\\right) & = & 1 - \\exp\\left(-x^{c}\\right) \\\\\n    G\\left(q;c\\right) & = & \\left[-\\log\\left(1-q\\right)\\right]^{1/c}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: C++ I/O Definition Handlers\nDESCRIPTION: C++ files `parse_handlers.hpp` and `formatters.hpp` define how to handle I/O conversions for various data structures, including dense arrays and coordinate matrices. They optimize the process by allowing parallel, chunk-based processing of file data.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/io/_fast_matrix_market/README.md#2025-04-14_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n\"#include \\\"parse_handlers.hpp\\\"\\n#include \\\"formatters.hpp\\\"\\n// I/O definition handlers...\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining Generalized Extreme Value Distribution Functions in LaTeX\nDESCRIPTION: Mathematical definitions of the probability density function (f), cumulative distribution function (F), and inverse cumulative distribution function (G) for the Generalized Extreme Value Distribution with shape parameter c.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_genextreme.rst#2025-04-14_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\begin{eqnarray*} f\\left(x;c\\right) & = & \\exp\\left(-\\left(1-cx\\right)^{1/c}\\right)\\left(1-cx\\right)^{1/c-1}\\\\\nF\\left(x;c\\right) & = & \\exp\\left(-\\left(1-cx\\right)^{1/c}\\right)\\\\\nG\\left(q;c\\right) & = & \\frac{1}{c}\\left(1-\\left(-\\log q\\right)^{c}\\right)\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: High Precision Numerical Data in SciPy\nDESCRIPTION: This snippet contains rows of three high-precision floating-point numbers. Each row likely represents a set of related values or computation results used in scientific or mathematical operations within SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_large_data_ipp/owens_t_large_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 1.0718167759478092193603515625000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.7025438704529697946898795281570113885098668867524817825497634082970163517484596267002246485308048917e-04\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 3.0219145119190216064453125000000000000000000000000000000000000000000000000000000000000000000000000000e-03 4.8001938645598392212706460694869240090916558885130062516475304910169401363600237562558295185513477906e-04\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 4.9941334873437881469726562500000000000000000000000000000000000000000000000000000000000000000000000000e-03 7.9329452423211453195073781764946770265451284944743200455963617244867248176010241084682903479510018773e-04\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 9.2842318117618560791015625000000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.4747262180034171928093725405729357747889195327284105256085954964259002844329886081520221879258812241e-03\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 2.4170018732547760009765625000000000000000000000000000000000000000000000000000000000000000000000000000e-02 3.8385765166386407107969543680141742306939971040600738083518690749668569179680727341429668779715062185e-03\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 9.8797911833272823538057366001845485433788465662188377372153834872603405933567068008908198298376419025e-03\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.9337667148728319642845504936130600269774910676721646858412695340338820622861236228695792071656439771e-02\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 2.4955767393112182617187500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.8846353552747824138160941980768561494454550977659925010989068180568493957386850056249891291364571250e-02\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 7.2518805582807717474357577444115653653948760682741966109371775924901540665503156349602837174517507732e-02\n6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 9.8384737968444824218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.2340091210530125491815758708426673023859931816811554881116792024770370937248907822993303892861774950e-01\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.7306551853835117071866989135742187500000000000000000000000000000000000000000000000000000000000000000e-06 2.7338859877099258647962835347831117805927694716746447802624741791506840099408446068116316990814649259e-07\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.1657506295014172792434692382812500000000000000000000000000000000000000000000000000000000000000000000e-06 3.4211987164574525905074287427486690675481801223867532229070922020213942750839103366904222569687643524e-07\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 7.2700186137808486819267272949218750000000000000000000000000000000000000000000000000000000000000000000e-06 1.1484322345741356577639320188845817005487172640020579486879183771402127942022452565679785711548532666e-06\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.4000004739500582218170166015625000000000000000000000000000000000000000000000000000000000000000000000e-05 2.2115564732919805645171866050041886311686775545815921109659313088905797186958508016821560101568998713e-06\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.7196449334733188152313232421875000000000000000000000000000000000000000000000000000000000000000000000e-05 2.7164932834122626332239659901445608384049614929205641883362630629482670527685010308428561918503715363e-06\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 6.0085076256655156612396240234375000000000000000000000000000000000000000000000000000000000000000000000e-05 9.4915353004393099496687307408488839645448884341587968217681790703062456646062770500421919379964112810e-06\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.1678319424390792846679687500000000000000000000000000000000000000000000000000000000000000000000000000e-04 1.8448038614386998885069826599316340877307887102090523974280071486240697159194710874306163847040645581e-05\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.4905200805515050888061523437500000000000000000000000000000000000000000000000000000000000000000000000e-04 2.3545487088570595860958156925220690079017620674757727380629494189429173917680221556999192635635879112e-05\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.9852515328675508499145507812500000000000000000000000000000000000000000000000000000000000000000000000e-04 6.2954324085559917236898931782907427089582688982438236863130531285683875018274788519757049298635253888e-05\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 6.3875340856611728668212890625000000000000000000000000000000000000000000000000000000000000000000000000e-04 1.0090275456117930075252872428669222433153568996979611693865057761630979889070464955700632590493022833e-04\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.0718167759478092193603515625000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.6931297230307110039364090035983260762548717999391651090827652278688388189587283847460481704899630718e-04\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.0219145119190216064453125000000000000000000000000000000000000000000000000000000000000000000000000000e-03 4.7736513164354025030090795375347817477625967865377223882402007017772430148351538942900768574913592028e-04\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 4.9941334873437881469726562500000000000000000000000000000000000000000000000000000000000000000000000000e-03 7.8890799957645912426173010199742354100605483191319776520867188672797166473994649575536013844654678327e-04\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 9.2842318117618560791015625000000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.4665715485420465593386920145903002415353672090336338559212498580027777568856739887368670376123129498e-03\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.4170018732547760009765625000000000000000000000000000000000000000000000000000000000000000000000000000e-02 3.8173471501639447927799611450255939062437919860362324869897251293012153969006824538779898504356023371e-03\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 9.8250909404458629926817018986123133996792939721214442202322833189938479061940245904241557086885185744e-03\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.9230210446913048947213513405954389242560487710751566025949626987127251414291041072505342788504794912e-02\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.4955767393112182617187500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 3.8627179609988220911412206620712069618629437372912929214613948359067160844520294023601211869007726128e-02\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 7.2087511086344978631020888067359514456238116464215421335909562646171765016523190127167816583320817566e-02\n1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 9.8384737968444824218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.2253807498877819559475292626709576376976614603602382975781306168889026106627619899530425198653583879e-01\n2.4955767393112182617187500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.7306551853835117071866989135742187500000000000000000000000000000000000000000000000000000000000000000e-06 2.6699735525817186500876252710130390185655111685324997270751191079322150071796211461405309716225510055e-07\n```\n\n----------------------------------------\n\nTITLE: Raw Numerical Data\nDESCRIPTION: Tabulated numerical data with two columns. First column contains exponential notation (e-8 to e0), second column contains decimal values ranging from large negative to small positive numbers. Data appears to be coordinates or related mathematical/scientific values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/digamma_small_data_ipp/digamma_small_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0.1690093176520690576580818742513656616211e-8\t-591683355.0172646248558707395909205014789\n0.2114990849122477811761200428009033203125e-8\t-472815285.0570071002693788265718597340393\n0.7099628440698779741069301962852478027344e-8\t-140852442.1314070676912450420112690472767\n0.136718796284185373224318027496337890625e-7\t-73142832.95860873836229194739144163160831\n0.1679341288252089725574478507041931152344e-7\t-59547157.96538602413887273326920747232618\n0.586768322818898013792932033538818359375e-7\t-17042502.04007390142270552503694442817772\n0.1140460881288163363933563232421875e-6\t-8768385.503057815514505383587592316839882\n0.1455586016163579188287258148193359375e-6\t-6870085.813645861903628134604185829717845\n0.38918477685001562349498271942138671875e-6\t-2569474.152450422201931296992216788786447\n0.623782625552848912775516510009765625e-6\t-1603123.137920326054732670974252040029471\n0.104669607026153244078159332275390625e-5\t-955387.7506368215484908190151041836664367\n0.2951089072666945867240428924560546875e-5\t-338858.5294366592361422006155767583415332\n0.4877083483734168112277984619140625e-5\t-205041.1518328576044816818799248254570363\n0.9066634447663091123104095458984375e-5\t-110295.0867866920189113632829333848561728\n0.2360353755648247897624969482421875e-4\t-42367.10793974013680262660975431753380722\n0.60817910707555711269378662109375e-4\t-16443.10183188331524808941398664226054956\n0.000119476739200763404369354248046875\t-8370.407052088278326658500142471452559876\n0.0002437086659483611583709716796875\t-4103.836730163294582058528454940279573003\n0.00047970912419259548187255859375\t-2085.173007504666107151589993385624082421\n0.000960788573138415813446044921875\t-1041.387348674624002438653075235083900513\n0.00113048148341476917266845703125\t-885.1541983038739901476427277144444120955\n0.0033707791008055210113525390625\t-297.2390039349243537614805191705277299023\n0.007697627879679203033447265625\t-130.474775285766139271184373586979099581\n0.0154774188995361328125\t-65.1622965036480167454852163183367159499\n0.0305807329714298248291015625\t-33.22833448837103737169827250947288832931\n0.0346831791102886199951171875\t-29.35398677269140057359817914882516787732\n0.09283597767353057861328125\t-11.20575716299454988174075282116985360081\n0.22476322948932647705078125\t-4.707226986627979845318377740205580092891\n0.4500701129436492919921875\t-2.233123888225926352977853470362332872207\n0.64851474761962890625\t-1.375098345846253151137062991270963899568\n1.14188635349273681640625\t-0.3652988540135093192143191973421561168173\n2.0095670223236083984375\t0.4289360116443062870701048575669258219731\n5.68704509735107421875\t1.647702940606041030337068005600358865775\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix - Scientific Computing\nDESCRIPTION: Matrix of floating-point numbers arranged in columns, with values in scientific notation. The data appears to be structured in rows with three columns each, containing precise numerical values with varying magnitudes and signs.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yv_prime_data_ipp/bessel_yv_prime_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0.11958599090576171875e0 0.1622925e5 0.0023227013597311819710582480572446504089298495687209\n0.11958599090576171875e0 0.3206622265625e5 -0.0024567419656302508128366677593241788873826542064012\n0.11958599090576171875e0 0.3636794921875e5 0.004162752148050053512734448924102518998011369573107\n```\n\n----------------------------------------\n\nTITLE: Numerical Matrix Data\nDESCRIPTION: A structured collection of floating point numbers representing numerical data, likely used for scientific computing or statistical analysis. The data is arranged in a single row with consistent decimal precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-jensenshannon-ml-iris.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n3 0.0301637294202 0.0380460619309 0.0426550687382 0.0544072702012 0.0218332584664 [...]\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Matrix Data\nDESCRIPTION: Numeric matrix containing floating point values in scientific notation format. Values appear to be computation results or transform coefficients with high precision up to 15 decimal places. Each row contains related calculations using consistent notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_j_large_data_ipp/bessel_j_large_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.725889492034912109375e1\t0.725889492034912109375e1\t0.2307850131230964328215158373258970201933e0\n0.725889492034912109375e1\t0.90838165283203125e1\t0.331270090805281544869225081474258975783e0\n0.725889492034912109375e1\t0.30492671966552734375e2\t0.1392044369140870127137144436194280008198e0\n[...additional matrix rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Floating Point Matrix Data\nDESCRIPTION: A dense matrix of floating point numbers in scientific notation (e.g. 5.0042326e-01) with high precision. Values appear to be normalized between approximately 1e-01 and 5e+00.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-minkowski-5.8-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n5.0042326e-01   4.1210927e-01   5.2133179e-01   1.1269424e-01   4.2362917e-01   5.0001522e-01...\n```\n\n----------------------------------------\n\nTITLE: Alias Section in .gitconfig\nDESCRIPTION: Example of the alias section in a .gitconfig file after setting up common git command shortcuts.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[alias]\n        ci = commit -a\n        co = checkout\n        st = status -a\n        stat = status -a\n        br = branch\n        wdiff = diff --color-words\n```\n\n----------------------------------------\n\nTITLE: Parsing Precise Numeric Data in Scientific Notation\nDESCRIPTION: Represents a structured dataset with three-column numeric data, where columns contain high-precision floating point coordinates and extremely small exponential values\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/beta_med_data_ipp/beta_med_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: numeric\nCODE:\n```\n79.222808837890625\t67.8767242431640625\t0.336671784505587284046240850861790498836e-44\n```\n\n----------------------------------------\n\nTITLE: Defining Percent Point Function (Inverse CDF) for Discrete Distributions in LaTeX\nDESCRIPTION: This LaTeX snippet defines the percent point function, also known as the inverse cumulative distribution function, for discrete distributions. It explains how to handle cases where there is no exact inverse due to the discrete nature of the distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/discrete.rst#2025-04-14_snippet_3\n\nLANGUAGE: LaTeX\nCODE:\n```\nG\\left(q\\right)=F^{-1}\\left(q\\right)\n```\n\n----------------------------------------\n\nTITLE: Defining Intermediate Variables for Relativistic Breit-Wigner Distribution in LaTeX\nDESCRIPTION: LaTeX equations defining the intermediate variables c, c̄ (complex conjugate of c), and k used in the probability density and cumulative distribution functions of the Relativistic Breit-Wigner Distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_rel_breitwigner.rst#2025-04-14_snippet_2\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\begin{eqnarray*}\nc & = & \\sqrt{-\\rho (\\rho + i)}\\\\\n\\bar{c} & = & \\sqrt{-\\rho (\\rho - i)}\\text{ is its complex conjugate}\\\\\nk & = & \\frac{2\\sqrt{2}\\rho^2\\sqrt{\\rho^2 + 1}}{\\pi\\sqrt{\\rho^2 + \\rho\\sqrt{\\rho^2 + 1}}}\n\\end{eqnarray*}\n```\n\n----------------------------------------\n\nTITLE: Matrix of Scientific Notation Values\nDESCRIPTION: A large numerical matrix containing scientific notation values organized in three columns. Values show exponential patterns with high precision floating point numbers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_k_prime_data_ipp/bessel_k_prime_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0.93762989044189453125e1 0.51139926910400390625e1 -6.8588129957849980629420534494689064182426369787787\n0.93762989044189453125e1 0.95070552825927734375e1 -0.0027577094707850600730109884367242014475591075898189\n0.93762989044189453125e1 0.24750102996826171875e2 -2.7224455441410718952197541892429158883708802180594e-11\n...\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Array Initialization in Python\nDESCRIPTION: A large array of floating-point numbers, likely representing scientific or statistical measurements with values ranging from near zero to around 6\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-seuclidean-ml-iris.txt#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = [4.0951447e+00, 4.9940386e+00, 4.2442248e+00, ..., 4.9277939e+00]\n```\n\n----------------------------------------\n\nTITLE: High Precision Numerical Data Table\nDESCRIPTION: A table of high precision floating-point numbers organized in three columns. Each row contains values with up to 100 decimal places of precision, suggesting these may be results from complex mathematical or scientific calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_large_data_ipp/owens_t_large_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n3.4516773223876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 2.4170018732547760009765625000000000000000000000000000000000000000000000000000000000000000000000000000e-02 9.9403182553277208445892808482460430799032462631184042585115333568677935315091318041861124329553170292e-06\n3.4516773223876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 2.5418580357244595430371130651578536370671086013444693032582727135569247923175205141352767365141102134e-05\n3.4516773223876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 4.8689677796792513609266168273000706486952080133835305483655921767025880005424335379469654286983036181e-05\n3.4516773223876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 2.4955767393112182617187500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 8.9705127851647786148580193077987531132157736930492587502483044864817068187860198002410011626361734437e-05\n3.4516773223876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.2946186728124385892865777998408331723153136369907133611183383901797884906144002133642324918324323913e-04\n3.4516773223876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 9.8384737968444824218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 1.3923002576038691798553508608836144074690715242718362171227640048416259724861666146017004133820991180e-04\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.7306551853835117071866989135742187500000000000000000000000000000000000000000000000000000000000000000e-06 8.8775091381537291298802581420839464684632487539863548659443625625032104777638276058215252191064281548e-21\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 2.1657506295014172792434692382812500000000000000000000000000000000000000000000000000000000000000000000e-06 1.1109359719019973419870359580961277522960866802862807459079302402193420347641311028516767703833380998e-20\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 7.2700186137808486819267272949218750000000000000000000000000000000000000000000000000000000000000000000e-06 3.7292036674359947644412642458450691350692957029853295780807084357310399290006591367923006601211352153e-20\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.4000004739500582218170166015625000000000000000000000000000000000000000000000000000000000000000000000e-05 7.1813941218553813142748314331025611291174780878474098899764002823564240987134864507466807987629974627e-20\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.7196449334733188152313232421875000000000000000000000000000000000000000000000000000000000000000000000e-05 8.8210313021662684640222157432566782506358035302370288576392589175457672260850689239981877632139884012e-20\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 6.0085076256655156612396240234375000000000000000000000000000000000000000000000000000000000000000000000e-05 3.0821032258415834621858178494839767533887580869635754889978241524968535296968065563768821807731105505e-19\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.1678319424390792846679687500000000000000000000000000000000000000000000000000000000000000000000000000e-04 5.9904695732637623903371115230763405759911311666890279461289185972954381415213610037567019586452892417e-19\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.4905200805515050888061523437500000000000000000000000000000000000000000000000000000000000000000000000e-04 7.6457185727858420484699945267278656778059161990481478504910475987360928030542537723143944887362145221e-19\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 3.9852515328675508499145507812500000000000000000000000000000000000000000000000000000000000000000000000e-04 2.0442574085006314010188888661933385612450006963670753011418322475200463576859009962989197175044177980e-18\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 6.3875340856611728668212890625000000000000000000000000000000000000000000000000000000000000000000000000e-04 3.2765131612536550276361545706705540700807152358889365779633962830894212140034371798129971122768710800e-18\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.0718167759478092193603515625000000000000000000000000000000000000000000000000000000000000000000000000e-03 5.4978868519864848594832473053857175720475398923669340751707914481963036402894014045770222411820466693e-18\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 3.0219145119190216064453125000000000000000000000000000000000000000000000000000000000000000000000000000e-03 1.5499595534669066889643125676366197299698205162777691609975990728097604957115091842894990444382596431e-17\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 4.9941334873437881469726562500000000000000000000000000000000000000000000000000000000000000000000000000e-03 2.5610907093833923272525518239683008928435490004955632292298001564092676017954027917997226684326204430e-17\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 9.2842318117618560791015625000000000000000000000000000000000000000000000000000000000000000000000000000e-03 4.7580234277664430037187822562288098048293836404536425825824596744800642911535277315597408565126615250e-17\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 2.4170018732547760009765625000000000000000000000000000000000000000000000000000000000000000000000000000e-02 1.2321186497879503036600238746890439284261422515090336992666099604578178066046774628385908015027622883e-16\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 6.2277540564537048339843750000000000000000000000000000000000000000000000000000000000000000000000000000e-02 3.0669367031001267543923686137086472754314780313871226158335462600632425979196652359802822281518128286e-16\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 1.2234416604042053222656250000000000000000000000000000000000000000000000000000000000000000000000000000e-01 5.4012598038320613714860099148253110544644911874784052450555517442477033712005019727755031295526269706e-16\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 2.4955767393112182617187500000000000000000000000000000000000000000000000000000000000000000000000000000e-01 7.6626596813237621192159763379026570215661410472574563674921392686229175202891314201290552889753391299e-16\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 4.9122214317321777343750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 8.0300364202583674278187780260253579635374205171336912174623664325263567297497279039443279855484834853e-16\n7.8823699951171875000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+00 9.8384737968444824218750000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 8.0307290643193835291246514253839652306461366280467030347892448795563459818026127427051435389505579875e-16\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.7306551853835117071866989135742187500000000000000000000000000000000000000000000000000000000000000000e-06 7.8611889442284801164171826707727613955504322536891067455213490405146683921128990938854593117038592759e-62\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 2.1657506295014172792434692382812500000000000000000000000000000000000000000000000000000000000000000000e-06 9.8375315008816372553780195058505124497031394278230077955314868617380512121969438935931863088314143964e-62\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 7.2700186137808486819267272949218750000000000000000000000000000000000000000000000000000000000000000000e-06 3.3022747866487774148704706414221359261513609079662289950695267904114212885604638927845498991466879045e-61\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.4000004739500582218170166015625000000000000000000000000000000000000000000000000000000000000000000000e-05 6.3592495206707220406632522841682184283991574955943257136287593583089099470095957322574461603453715948e-61\n1.5848876953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 1.7196449334733188152313232421875000000000000000000000000000000000000000000000000000000000000000000000e-05 7.8111767648503921161955204636904230194523284472269236204472444865015246531503513209997877798187658540e-61\n```\n\n----------------------------------------\n\nTITLE: Parsing High Precision Numerical Data in Scientific Notation\nDESCRIPTION: A dataset containing precise floating-point measurements with exponential notation, featuring multiple coordinate values and corresponding precision measurements\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/beta_med_data_ipp/beta_med_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n50.371234893798828125\t9.76306438446044921875\t0.230542864828471534336533601357657837158e-11\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Output\nDESCRIPTION: Matrix or table of floating point numbers with high precision, arranged in columns. Each row contains scientific notation and decimal values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n30.5403537750244140625\t28.5403537750244140625\t34383546252121214206917852301252.88984011454685951895533652396117056057206788134549036719509931218776\t0.621499359488426985793184603790969450020073269076592138184145110900525820658429590195441116932913502\t20939996286077450422090154506693.6544467617939422229206024824803661185526459473188386974360626176646\t0.378500640511573014206815396209030549979926730923407861815854889099474179341570409804558883067086498\n```\n\n----------------------------------------\n\nTITLE: Setting Git User Configuration via Command Line\nDESCRIPTION: Git commands for setting up user identification globally, which gets stored in the .gitconfig file.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/configure_git.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email you@yourdomain.example.com\n```\n\n----------------------------------------\n\nTITLE: Parsing Exponential Numerical Dataset\nDESCRIPTION: Dataset containing multiple columns of scientific notation numbers with varying first and second parameters\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_j_prime_int_data_ipp/bessel_j_prime_int_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-0.1e2 0.553809732082299888134002685546875e-4 1.3188100873744963459319007199937751301543239180136e-47\n```\n\n----------------------------------------\n\nTITLE: Representing Binary Matrix in Scientific Notation\nDESCRIPTION: This snippet shows a 4x100 matrix of binary values (0 and 1) represented in scientific notation. Each value is either 1.000000000000000000e+00 (for 1) or 0.000000000000000000e+00 (for 0), providing high precision representation of binary data.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-boolean-inp.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00\n1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00\n1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00\n1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00 0.000000000000000000e+00 0.000000000000000000e+00\n```\n\n----------------------------------------\n\nTITLE: Parsing Scientific Notation Dataset in Python\nDESCRIPTION: Large dataset with extremely precise floating-point numbers representing complex numerical measurements across multiple dimensions. Contains scientific notation values with high precision and multiple columns.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxz_ipp/ellint_rd_xxz.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndataset = [\n  [1.3980121253550848e-33, 1.3980121253550848e-33, 25.397361755371093, 0.9172977406018739],\n  [1.7494794261211793e-33, 1.7494794261211793e-33, 27.095397949218750, 0.8307325293805854]\n]\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Table\nDESCRIPTION: Structured table containing 6-column numeric data with scientific notation and floating point values. Each row contains coordinates, exponents, and probability-like normalized values between 0 and 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n74.441680908203125\t74.441680908203125\t0.1447337648301569631097449705777677492631982520699648787303804900450463831830847437810282680563705929e107\t0.4845861133196542388892450821993280933765419405462445100303210962809583210841960294643589341752718066\t0.1539412505116141462192537506181761019972552031082345701003878297968770219978071810397014601236519482e107\t0.5154138866803457611107549178006719066234580594537554899696789037190416789158039705356410658247281934\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Matrix Data\nDESCRIPTION: Large matrix of numerical values in exponential scientific notation (e.g., 2.5986852e+00). Values appear to be floating point numbers ranging approximately between 0 and 6, stored with high precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-seuclidean-ml-iris.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2.5986852e+00   2.6571682e+00   3.0828753e+00   1.9438939e+00   2.6338308e+00   4.6899445e+00   3.5257224e+00   4.8360835e+00   3.9149039e+00   4.4239486e+00   5.4654338e+00...\n```\n\n----------------------------------------\n\nTITLE: Improved Supporting Functions in SciPy Stats\nDESCRIPTION: Functions like `scipy.stats.binom_test` and `scipy.stats.mannwhitneyu` now include an `alternative` keyword, allowing for hypothesis specification. This improvement is significant for statistical testing and enhances clarity in analysis.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/release/0.17.0-notes.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.binom_test\n```\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.mannwhitneyu\n```\n\n----------------------------------------\n\nTITLE: Matrix of Scientific Notation Values\nDESCRIPTION: A large matrix of numerical values expressed in scientific notation with 8 digits of precision. The values appear to be formatted consistently with e+00 or e-01 notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-euclidean-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n5.3851648e-01   5.0990195e-01   6.4807407e-01   1.4142136e-01   6.1644140e-01   5.1961524e-01   1.7320508e-01   9.2195445e-01...\n```\n\n----------------------------------------\n\nTITLE: Extended Precision Floating Point Constants in SciPy\nDESCRIPTION: Set of high-precision floating point constants with extended precision. These values likely serve as test cases or reference values for numerical computing algorithms in the SciPy library.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_big_data_ipp/igamma_big_data.txt#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1736170.0 173616992.0 0.1028718049106474382663595835099645962497203244264180111334446299544683261400046764833876858973945412e-61095576 0.8149672117199407490039815813486797316083480325648451121983304934903758539219857770713382104685664004e-71174558 0.1262281517971042004488252985099758947734405887636182671673445904506523435537050416445084616475212426 1.0\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix\nDESCRIPTION: Matrix containing scientific computation results with high-precision floating point numbers and scientific notation. Each row contains six columns of numerical data with varying precisions and magnitudes.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n14.6176910400390625\t29.235382080078125\t32971860.19730178971973540202322703289367756075704569326375433484278668485265826215878064441900777299\t0.001046072815281971369803623292538810967586955544013035650202721488810712223514607317283434291440339657\t31486688832.2700269005253770849874486244547926451674571701209043924413523685232888389322467765144235\t0.9989539271847180286301963767074611890324130444559869643497972785111892877764853926827165657085596603\n```\n\n----------------------------------------\n\nTITLE: Installation Plan JSON Configuration\nDESCRIPTION: Meson installation plan JSON showing the final installation path for the compiled _decomp_update extension module.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/building/introspecting_a_build.rst#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"/home/username/code/scipy/build/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so\":{\n   \"destination\":\"{py_platlib}/scipy/linalg/_decomp_update.cpython-310-x86_64-linux-gnu.so\",\n   \"tag\":\"runtime\"\n}\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix Output\nDESCRIPTION: Multi-column matrix of high-precision floating point numbers, possibly representing scientific calculation results or numerical analysis output. The data is arranged in rows with consistent column formatting.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_big_data_ipp/igamma_big_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.1576130390167236328125 1.1576130390167236328125 0.350767915499064649485116118680747323698244021478097988905881585794790293404432604891991000560468547 0.3769413611953594115041815918132996991722140466616286497556462452737080861937062742763079967763701127 0.5797956989228355500115624795681787228987909103748534162258342220751141340400551704088290445505464577 0.6230586388046405884958184081867003008277859533383713502443537547262919138062937257236920032236298873\n```\n\n----------------------------------------\n\nTITLE: Installing ARPACK-NG using CMake\nDESCRIPTION: Complete sequence of commands to configure, build, and install ARPACK-NG using the CMake build system with examples, MPI support, and shared libraries enabled.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build\n$ cd build\n$ cmake -D EXAMPLES=ON -D MPI=ON -D BUILD_SHARED_LIBS=ON ..\n$ make\n$ sudo make install\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Matrix in Scientific Notation\nDESCRIPTION: A large array of floating point numbers in scientific notation format (e.g+00), representing numerical data with precision to 7 decimal places. Values appear to be in the range of approximately 3.1-4.8.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-euclidean-ml.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n4.0515260e+00   4.2121458e+00   3.7357405e+00   4.2313317e+00   3.9136009e+00   4.3843298e+00   3.9811426e+00   4.3624182e+00   4.0642508e+00   4.2105933e+00   4.0747226e+00   3.9068586e+00   4.1637004e+00   4.4303203e+00   4.1841564e+00   4.1063279e+00   4.1862390e+00   4.0719925e+00   4.2227579e+00   4.3173531e+00   3.8811067e+00   3.7577567e+00   4.0623722e+00   3.9882453e+00   4.0432671e+00   3.9085109e+00   4.0283414e+00   4.0846110e+00   3.6459235e+00   3.9544001e+00   4.1134244e+00   4.1805752e+00   3.5121011e+00   4.2747789e+00   4.1048323e+00   3.9269426e+00   3.8932032e+00   3.8281172e+00   3.7288430e+00   4.0863477e+00   4.1527428e+00   4.1646409e+00   4.2027433e+00   3.8441594e+00   4.8419117e+00   4.2455384e+00   3.7622220e+00   4.3967923e+00   4.4663183e+00   4.0435853e+00   4.0421692e+00   4.3124625e+00   4.6499961e+00   4.5595743e+00   3.4230430e+00   4.2612266e+00   3.5676603e+00   4.0866580e+00   4.2307103e+00   3.8521940e+00   3.9951183e+00   3.1022409e+00   3.7290193e+00   4.1931517e+00   4.1127027e+00   3.6633651e+00   4.0235815e+00   3.9729858e+00   4.1980132e+00   4.1579993e+00   3.9948955e+00   3.9081966e+00   3.9031152e+00   3.5069036e+00   4.0015727e+00   3.6763496e+00   3.6614339e+00   3.6227109e+00   3.7357992e+00   4.0170026e+00   3.5216829e+00   3.9322227e+00   3.9094621e+00   4.0170286e+00   4.3264246e+00   4.3435483e+00   4.0788635e+00   4.4761765e+00   3.8468186e+00   4.1490333e+00   4.2800007e+00   4.2260191e+00   4.3031858e+00   4.1897413e+00   4.0530244e+00   3.5893641e+00   4.2186615e+00   3.7979503e+00   4.0915473e+00   4.1343073e+00   4.5063851e+00   3.6394889e+00   4.2508448e+00   3.7160826e+00   4.0105262e+00   4.1578269e+00   4.0290590e+00   3.6971819e+00   3.9414087e+00   4.2522313e+00   4.4091714e+00   4.1542292e+00   3.9594691e+00   4.0923600e+00   4.0855497e+00   3.8253075e+00   4.3034717e+00   4.0976731e+00   4.1316523e+00   4.0872717e+00   4.2643353e+00   3.8887280e+00   3.9411273e+00   3.8848001e+00   4.3481996e+00   3.8716733e+00   3.9084684e+00   3.7546361e+00   3.9354816e+00   3.8293694e+00   3.7568515e+00   3.7184961e+00   3.8404278e+00   4.2570811e+00   4.1423777e+00   4.0291411e+00   4.2094682e+00   3.6127418e+00   4.0459839e+00   3.7737985e+00   3.7647653e+00   3.9762006e+00   3.8999512e+00   3.8509090e+00   3.8975941e+00   3.8432839e+00   4.2109046e+00   4.1339124e+00   3.5898873e+00   4.0794519e+00   4.3504966e+00   3.8862612e+00   3.8332931e+00   4.2190310e+00   4.1366595e+00   3.7220268e+00   4.1250795e+00   3.3169452e+00   4.0757181e+00   3.6487114e+00   3.9513724e+00   4.0735549e+00   3.9137880e+00   3.9656942e+00   3.7724953e+00   4.0505153e+00   3.9062302e+00   4.5671852e+00   3.7542175e+00   4.3731708e+00   3.6733907e+00   4.4667545e+00   4.1004635e+00   4.0530038e+00   4.0346958e+00   4.2145752e+00   4.4298637e+00   4.2982360e+00   4.0878239e+00   4.4061563e+00   4.2115971e+00   3.8263277e+00   3.8603258e+00   3.8572375e+00   4.1051910e+00   4.3787786e+00   4.5309659e+00   4.0047055e+00   4.1308854e+00   3.6283561e+00\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Output\nDESCRIPTION: Tabular data containing floating point values in scientific notation, likely representing computational results. Each row contains 6 columns of numerical values with varying precision and magnitude.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n79.911529541015625\t77.911529541015625\t0.3490939396819543194423472086692488440899329561754645394349542462300088417893174150204567615974322654e117\t0.5746584444068667128455934529286477397106019468883497914927484236710355942777847424911227111339637018\t0.2583868048884510982530251810482005487157514096257963097684335860756769617924320795452146688030032164e117\t0.4253415555931332871544065470713522602893980531116502085072515763289644057222152575088772888660362982\n79.911529541015625\t79.911529541015625\t0.294702921344710284583015687923193164602506977430393597564273919764947267165659436584792585193649268e117\t0.4851230660045307699251807140409752727269029578112530269856327993879109642416421942844061192299068579\t0.3127778232256951331123567017942562282031773883708672516391139125407385364160900579808788452067862138e117\t0.5148769339954692300748192859590247272730970421887469730143672006120890357583578057155938807700931421\n```\n\n----------------------------------------\n\nTITLE: Parsing Floating-Point Benchmark Data\nDESCRIPTION: This data set contains rows of floating-point numbers with varying precision and exponents. Each row likely represents a different test case or computation result from GPU benchmarking. The numbers span a wide range of magnitudes and precisions, indicating comprehensive testing across different numerical scenarios.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rj_data_ipp/ellint_rj_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: data\nCODE:\n```\n0.9570084381103515625e2 0.21871560124697031597619436421586769370151159819216e-20 0.10437099306084773731823749979533318132940422628963e-21 0.31689929654272e15 0.26374911044597243314245848273113923510941888515539e-13\n0.1074904022216796875e3 0.41020025634765625e3 0.424105413258075714111328125e-1 0.12980568876719278392783962772227823734283447265625e-10 0.80632850646709506287902787976369322104798297701048e0\n0.121872039794921875e3 0.13542694460127387585121963575751635744381928816438e-16 0.12486284559632162318061163896272346215674913706846e-28 -0.17388853194235818957341654922288398665841668844223e-15 -0.29929997600778273592083592409674281287091033348276e16\n...\n```\n\n----------------------------------------\n\nTITLE: Evaluating Probability Density on Frozen Distribution\nDESCRIPTION: Calculates the probability density function value for an instance of rv_continuous_frozen distribution at point x using previously fixed parameters. Directed at performance stability and efficiency in statistical calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/rv_infrastructure.md#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrozen.pdf(x)\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Matrix Data\nDESCRIPTION: Large matrix of floating point numbers in scientific notation (e.g. 8.8270219e-04), commonly used in scientific computing applications. The data appears to be normalized with values primarily between 0 and 1.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-correlation-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n8.8270219e-04   3.2743785e-02   7.7572782e-05   1.3417853e-03 [...] 2.2246603e-01\n```\n\n----------------------------------------\n\nTITLE: Column 3: Function Value or Magnitude\nDESCRIPTION: The third column (e.g., 4.08848737420065935929134320387738037551705209754263277179328266373220927403385787131830593805064886) might be a function value at the corresponding X and Y coordinates. Alternatively, it could represent the magnitude of a vector or some other scalar quantity associated with that point. The specific meaning depends on the context of the data generation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"4.08848737420065935929134320387738037551705209754263277179328266373220927403385787131830593805064886\"\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Test Data\nDESCRIPTION: Removes the existing boost test data directory within the scipy source tree. This ensures that the new data being converted is not mixed with any old, potentially outdated, data. The rm -rf command recursively removes the directory and its contents.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/utils/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"rm -rf scipy/special/tests/data/boost/*\"\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Array Representation\nDESCRIPTION: Raw numerical data containing decimal values across multiple ranges, potential scientific or computational dataset\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-minkowski-3.2-ml-iris.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n2.9033203e+00   2.9139413e+00   3.1189900e+00   1.7118795e+00   ... 9.5965467e-01   9.2859317e-01   5.7324170e-01\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Data Matrix\nDESCRIPTION: Large matrix of numerical data containing floating point values and scientific notation numbers. The data appears to be output from numerical computations with high precision, featuring numbers in regular and scientific notation format arranged in 7 columns.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n29.0 33.0 0.221111953258514404296875 0.162388951505564820852236477925874859376e-23 0.1580532472336013724018096163295666212417e-18 0.1027421365451447378901609206658752396105e-4 0.999989725786345485526210983907933412476\n29.0 33.0 0.3082362115383148193359375 0.7180411287496169098026099587173438872645e-21 0.157336829994366811140215528735628536103e-18 0.004542986392303598492085400502265037404981 0.995457013607696401507914599497734962595\n[...]\n```\n\n----------------------------------------\n\nTITLE: Alternative Git Help Command in RST\nDESCRIPTION: Alternative syntax for accessing Git command help documentation using the --help flag.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/gitwash/git_resources.rst#2025-04-14_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\ngit push --help\n```\n\n----------------------------------------\n\nTITLE: Regular Grid Interpolation Setup\nDESCRIPTION: Initial setup for regular grid interpolation example using numpy and scipy.interpolate\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/interpolate/interp_transition_guide.md#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import interp2d, RectBivariateSpline\n\nx = np.arange(-5.01, 5.01, 0.25)\ny = np.arange(-5.01, 7.51, 0.25)\nxx, yy = np.meshgrid(x, y)\nz = np.sin(xx**2 + 2.*yy**2)\nf = interp2d(x, y, z, kind='cubic')\n```\n\n----------------------------------------\n\nTITLE: Processing Numerical Data Output\nDESCRIPTION: Matrix of numerical data containing 7 columns of floating-point values. Each row appears to show calculation results with parameters 37.0 and varying secondary values (5.0, 9.0, 13.0, 17.0, 21.0, 25.0).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n37.0 5.0 0.913384497165679931640625 0.1921105748236999333987355111240336099689e-6 0.7477030823176592052668195729728590249306e-7 0.7198364027586554134457279728266426962175 0.2801635972413445865542720271733573037825\n37.0 5.0 0.9688708782196044921875 0.2645803857305109882287126511078342644041e-6 0.2300497324954865696704817313485248057942e-8 0.9913800595283673677831040165745439103794 0.008619940471632632216895983425456089620629\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Scientific Floating Point Test Data\nDESCRIPTION: Matrix of high-precision floating point numbers in scientific notation format. Data appears to be organized in 4 columns with values ranging from very small to very large exponents, likely used for testing numerical algorithms or floating point calculations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rf_data_ipp/ellint_rf_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0.51905646303429040628284185654450766378431580960751e-16 0.15583587e8 0.46741176605224609375e2 0.19619112423150604296588229321525943450291423624961e-2\n0.54374770505732477601443242143375300656771287322044e-16 0.4562802734375e3 0.10197021348467909816516131089894163913918803398168e-29 0.10848494678596107007991832533984166270247056624275e1\n[...additional lines omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Customizing ARPACK-NG Installation with Autotools\nDESCRIPTION: Commands to customize the ARPACK-NG installation using Autotools, including setting library suffix, enabling ILP64 support, and enabling ISO_C_BINDING.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/sparse/linalg/_eigen/arpack/ARPACK/README.md#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ LIBSUFFIX=\"64\" ./configure\n$ make all install\n```\n\n----------------------------------------\n\nTITLE: Exponential Numerical Data Matrix\nDESCRIPTION: Tabular dataset containing scientific notation values with multiple parameters including decimal and exponential representations\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre3_ipp/laguerre3.txt#2025-04-14_snippet_1\n\nLANGUAGE: numeric\nCODE:\n```\n0.16e2\t0.13e2\t0.96488848876953125e3\t0.16490064389087864897597466441977092128381927959496e35\n```\n\n----------------------------------------\n\nTITLE: Recasting Index Arrays After Construction\nDESCRIPTION: Example demonstrating how to recast index arrays after construction while safely handling potential overflow issues.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/reference/sparse.migration_to_sparray.rst#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nindices, indptr = scipy.sparse.safely_cast_index_arrays(B, np.int32)\nB.indices, B.indptr = indices, indptr\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmarks with asv\nDESCRIPTION: This command runs the entire benchmark suite using asv directly, saving results for future comparison.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/benchmarking.rst#2025-04-14_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nasv run\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data Matrix\nDESCRIPTION: Complex numerical dataset containing multiple floating point values with scientific notation. Values represent various measurements or computational results across different parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre3_ipp/laguerre3.txt#2025-04-14_snippet_2\n\nLANGUAGE: plain text\nCODE:\n```\n0.32e2\t0.16e2\t0.1883819732666015625e3\t0.40204641681549519964288358140203716515970946244517e33\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Data in Scientific Notation\nDESCRIPTION: A structured data table containing high-precision floating-point values in scientific notation. The data is organized in four columns, where each row appears to be a set of numerical parameters or values used for scientific calculations or testing in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rg_xy0_ipp/ellint_rg_xy0.txt#2025-04-14_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n8.1775058593750000000000000000000000000000e+03 8.3500854492187500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 4.5950815849719786139915237169445363502260e+01\n8.1775058593750000000000000000000000000000e+03 9.0579193115234375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 4.6003192477518134850995128505710685116447e+01\n8.1775058593750000000000000000000000000000e+03 9.1337585449218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 4.6008759203361498797605065908487829054802e+01\n8.1775058593750000000000000000000000000000e+03 9.6886779785156250000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 4.6049238990043970288433049090199967860060e+01\n1.6096367187500000000000000000000000000000e+04 9.7540397644042968750000000000000000000000e+00 0.0000000000000000000000000000000000000000e+00 6.3523980500067201063651671937570091680612e+01\n1.6096367187500000000000000000000000000000e+04 1.2698680877685546875000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.3547327696057462663845800415794014516711e+01\n1.6096367187500000000000000000000000000000e+04 1.3547698974609375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.3553926923911836480139222449007659914850e+01\n1.6096367187500000000000000000000000000000e+04 2.2103401184082031250000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.3617938956279344994294928960702781024717e+01\n1.6096367187500000000000000000000000000000e+04 3.0816703796386718750000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.3679714115848755911892937722287115814705e+01\n1.6096367187500000000000000000000000000000e+04 5.4722045898437500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.3838188179333253766182630628653784552720e+01\n1.6096367187500000000000000000000000000000e+04 6.3235916137695312500000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.3891859629276802499472283982167616920363e+01\n1.6096367187500000000000000000000000000000e+04 8.1472351074218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.4003233847373202514712216564324683775565e+01\n1.6096367187500000000000000000000000000000e+04 8.3500854492187500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.4015359443159366993019714343365538430045e+01\n1.6096367187500000000000000000000000000000e+04 9.0579193115234375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.4057304494517823374429697207356837011328e+01\n1.6096367187500000000000000000000000000000e+04 9.1337585449218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.4061766089025490495010155285177065467908e+01\n1.6096367187500000000000000000000000000000e+04 9.6886779785156250000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 6.4094229681699390215680302605558480725590e+01\n3.2238710937500000000000000000000000000000e+04 9.7540397644042968750000000000000000000000e+00 0.0000000000000000000000000000000000000000e+00 8.9842777077266635263855713977790546142085e+01\n3.2238710937500000000000000000000000000000e+04 1.2698680877685546875000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 8.9860694548442189220490474319881899568695e+01\n3.2238710937500000000000000000000000000000e+04 1.3547698974609375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 8.9865766937637155257898213019737887148474e+01\n3.2238710937500000000000000000000000000000e+04 2.2103401184082031250000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 8.9915119681153550533431457187112008569357e+01\n3.2238710937500000000000000000000000000000e+04 3.0816703796386718750000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 8.9962961612964938338061846188658197839612e+01\n3.2238710937500000000000000000000000000000e+04 5.4722045898437500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0086410266099772871179259739042669729882e+01\n3.2238710937500000000000000000000000000000e+04 6.3235916137695312500000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0128410324421292231782287099910845510172e+01\n3.2238710937500000000000000000000000000000e+04 8.1472351074218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0215821897680873231454933851119447604251e+01\n3.2238710937500000000000000000000000000000e+04 8.3500854492187500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0225357914089057673503481098766051776660e+01\n3.2238710937500000000000000000000000000000e+04 9.0579193115234375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0258372359837439078448711416528867734587e+01\n3.2238710937500000000000000000000000000000e+04 9.1337585449218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0261886465982118346629150993123761048085e+01\n3.2238710937500000000000000000000000000000e+04 9.6886779785156250000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.0287469636611002878196676894091461267880e+01\n3.7932656250000000000000000000000000000000e+04 9.7540397644042968750000000000000000000000e+00 0.0000000000000000000000000000000000000000e+00 9.7444386785358161353879501957576954595174e+01\n3.7932656250000000000000000000000000000000e+04 1.2698680877685546875000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7461211690729274560240841285099091055654e+01\n3.7932656250000000000000000000000000000000e+04 1.3547698974609375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7465976359971771178277286432790722692618e+01\n3.7932656250000000000000000000000000000000e+04 2.2103401184082031250000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7512365297821185916338907968934707658879e+01\n3.7932656250000000000000000000000000000000e+04 3.0816703796386718750000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7557376905975087232692864904778368012665e+01\n3.7932656250000000000000000000000000000000e+04 5.4722045898437500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7673665865644620635855641993536656470122e+01\n3.7932656250000000000000000000000000000000e+04 6.3235916137695312500000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7713268108249962669828699643244896575331e+01\n3.7932656250000000000000000000000000000000e+04 8.1472351074218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7795740483555776052944863171877131010676e+01\n3.7932656250000000000000000000000000000000e+04 8.3500854492187500000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7804741510181673658996179228986147639076e+01\n3.7932656250000000000000000000000000000000e+04 9.0579193115234375000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7835909217929228449259818117105822959973e+01\n3.7932656250000000000000000000000000000000e+04 9.1337585449218750000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7839227240213837580774215032300187074292e+01\n3.7932656250000000000000000000000000000000e+04 9.6886779785156250000000000000000000000000e+01 0.0000000000000000000000000000000000000000e+00 9.7863385626763089478205960752617591749891e+01\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Actions with Container Reuse\nDESCRIPTION: Executes a specific job while reusing containers to maintain state between runs.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nact -j <JOB_NAME> --bind --reuse\n```\n\n----------------------------------------\n\nTITLE: Defining Entropy for Pareto Distribution in LaTeX\nDESCRIPTION: This LaTeX equation defines the entropy h(X) for the Pareto distribution, where c is a constant related to the distribution's parameters.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_pareto.rst#2025-04-14_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nh\\left(X\\right)=\\frac{1}{c}+1-\\log\\left(c\\right)\n```\n\n----------------------------------------\n\nTITLE: Installing act via Bash Script\nDESCRIPTION: Downloads and installs the act tool using a bash script from the official Nektos repository.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Scientific Data Matrix Values\nDESCRIPTION: Matrix containing numerical data in scientific notation format. Each row contains exponential values with varying precision and magnitude. Data appears to be part of a test or analysis dataset.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/laguerre3_ipp/laguerre3.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0.45e2\t0.5e1\t0.99288128662109375e3\t-0.55943164112120066996155176980076108543387279108017e78\n0.45e2\t0.5e1\t0.9964613037109375e3\t-0.66374671778835615061106907275595257720512678787067e78\n0.45e2\t0.7e1\t0.9754039764404296875e2\t0.60341102903970817465629836527296942664383007219215e19\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Data Set in Plain Text\nDESCRIPTION: This snippet shows a portion of the numerical data set. Each line contains three floating-point numbers separated by spaces. The data follows a specific pattern, with the first number remaining constant for groups of rows, while the second and third numbers vary.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipeinc_neg_m.txt#2025-04-14_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n1.435074907073601080e+00 -1.778279410038922775e+38 1.153089139181017088e+19\n1.435074907073601080e+00 -1.333521432163323982e+44 9.985340561847295672e+21\n1.435074907073601080e+00 -1.000000000000000076e+50 8.646948683159908953e+24\n1.435074907073601080e+00 -5.623413251903490541e+113 6.484296745896519370e+56\n1.435074907073601080e+00 -3.162277660168379484e+177 4.862536581341086883e+88\n```\n\n----------------------------------------\n\nTITLE: Numerical Dataset Format Sample\nDESCRIPTION: Dataset containing three columns of numerical values in scientific notation. First column contains exponent values (0.28e2 to 0.46e2), second column contains negative decimal values, and third column contains high-precision scientific notation values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_i_prime_int_data_ipp/bessel_i_prime_int_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0.28e2 -0.177219114266335964202880859375e-2 -1.7537290958183525886359463869845381510727973831423e-111\n0.28e2 -0.22177286446094512939453125e-2 -7.4766028276759785646169118728086334339479138785121e-109\n0.28e2 -0.7444499991834163665771484375e-2 -1.185050791595980297563816416170548017342823596371e-94\n```\n\n----------------------------------------\n\nTITLE: Defining Moment Generating Function for HalfNormal Distribution\nDESCRIPTION: This snippet defines the moment generating function M(t) for the HalfNormal distribution.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/tutorial/stats/continuous_halfnorm.rst#2025-04-14_snippet_1\n\nLANGUAGE: math\nCODE:\n```\nM\\left(t\\right)=\\sqrt{2\\pi}e^{t^{2}/2}\\Phi\\left(t\\right)\n```\n\n----------------------------------------\n\nTITLE: Large Magnitude Decimal Values\nDESCRIPTION: Extensive list of scientific notation decimal values with coefficients and exponents\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/erfc_inv_big_data_ipp/erfc_inv_big_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.3802925527627705362359485795331572740116e-1032\n```\n\n----------------------------------------\n\nTITLE: Running GitHub Actions with Verbose Logging\nDESCRIPTION: Executes GitHub Actions workflows with detailed logging enabled.\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/dev/contributor/using_act.rst#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nact -v\n```\n\n----------------------------------------\n\nTITLE: Sphinx HTML Template Header\nDESCRIPTION: HTML template divs for module and class name display in documentation\nSOURCE: https://github.com/scipy/scipy/blob/main/doc/source/_templates/autosummary/attribute.rst#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"prename\">{{ module }}.{{ class }}.</div>\n<div class=\"empty\"></div>\n```\n\n----------------------------------------\n\nTITLE: High Precision Numerical Matrix Data\nDESCRIPTION: Matrix containing three columns of high-precision floating point numbers (approximately 100 decimal places). Each row contains two numbers around 19-20 and one extremely small number in scientific notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/owens_t_ipp/owens_t.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.0579175949096679687500000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964055675774942048518999361543210822966484600396400657620575715736093645266310e-88\n1.9857620239257812500000000000000000000000000000000000000000000000000000000000000000000000000000000000e+01 9.1337585449218750000000000000000000000000000000000000000000000000000000000000000000000000000000000000e-01 2.3673087550081705781915964055675774942048518999361543210822966484600396430678144795337231850694662522e-88\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Header Template\nDESCRIPTION: Template for adding copyright and license notices to source files to comply with GPL requirements.\nSOURCE: https://github.com/scipy/scipy/blob/main/tools/wheels/LICENSE_linux.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Set for SciPy Computations\nDESCRIPTION: This data set contains rows of three floating-point numbers, likely representing input parameters and output results for a specific mathematical operation or algorithm. The values span a wide range of magnitudes, from very small to very large numbers, and include both positive and negative exponents.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipkinc_neg_m.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1.435074907073601080e+00 -3.162277660168379640e+26 1.785962691999749170e-12\n1.435074907073601080e+00 -2.371373705661655435e+32 2.501629128504936361e-15\n1.435074907073601080e+00 -1.778279410038922775e+38 3.396052973118009471e-18\n1.435074907073601080e+00 -1.333521432163323982e+44 4.507425526630108447e-21\n1.435074907073601080e+00 -1.000000000000000076e+50 5.881478166548843540e-24\n1.435074907073601080e+00 -5.623413251903490541e+113 1.763044438259693311e-55\n1.435074907073601080e+00 -3.162277660168379484e+177 3.656223936134570012e-87\n1.435074907073601080e+00 -1.778279410038922862e+241 6.616120335707144354e-119\n1.435074907073601080e+00 -9.999999999999999393e+304 1.114368878675459443e-150\n1.435074907073601080e+00 -1.000000000000000017e+306 3.535456735687262734e-151\n1.435074907073601080e+00 -9.999999999999999860e+306 1.121650292075671218e-151\n1.435074907073601080e+00 -1.000000000000000011e+308 3.558482586617203321e-152\n```\n\n----------------------------------------\n\nTITLE: Floating Point Scientific Data Table\nDESCRIPTION: A table of floating point values organized in rows, likely representing scientific or mathematical calculation results. Each row starts with the value 29.0 followed by another integer (ranging from 13 to 33) and then several high-precision floating point values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: data\nCODE:\n```\n29.0 13.0 0.905801355838775634765625 0.4365371435983209426119374671905038771978e-11 0.2780283802312256737527968726801389365868e-15 0.9999363145432310229592370825274174878031 0.6368545676897704076291747258251219693489e-4\n29.0 13.0 0.913384497165679931640625 0.4365534056698073669658766848136998963361e-11 0.1154076653669821343606206407199475534051e-15 0.9999735646056081578158075310989357911835 0.2643539439184218419246890106420881646051e-4\n29.0 13.0 0.9688708782196044921875 0.4365649463489835883402985521636924647749e-11 0.8736047683901419471407942631655144270752e-21 0.9999999997998912245425726000618215783557 0.2001087754574273999381784216443418938087e-9\n29.0 17.0 0.12707412242889404296875 0.4422990195145064616477830993629497092141e-28 0.5332717222149371050189100799883501524695e-13 0.8294064753282302640287466849573043430296e-15 0.9999999999999991705935246717697359712533\n29.0 17.0 0.1355634629726409912109375 0.2483558378618974475403580846794774653117e-27 0.5332717222149350637595509755203363966718e-13 0.4657209964750325141439854217267115298534e-14 0.9999999999999953427900352496748585601458\n29.0 17.0 0.221111953258514404296875 0.7328808908195017293825934520885245819069e-22 0.5332717214820566564984278651122183481641e-13 0.1374310431791676394046346516466665505932e-8 0.9999999986256895682083236059536534835333\n29.0 17.0 0.3082362115383148193359375 0.1856994687702489576077306114425747498308e-18 0.5332698652202498448283535171886973745051e-13 0.3482267313911723938213482397198008799448e-5 0.9999965177326860882760617865176028019912\n29.0 17.0 0.632396042346954345703125 0.2668006007731591873019856659248746942853e-13 0.2664711214417783600159439285699371059673e-13 0.5003089225601653308472781853721239069024 0.4996910774398346691527218146278760930976\n29.0 17.0 0.81474220752716064453125 0.5322474920477367996505546368580538060038e-13 0.1024230167200747667374957636757994248842e-15 0.9980793465609865450020137033434048914148 0.001920653439013454997986296656595108585174\n29.0 17.0 0.8350250720977783203125 0.5330048775722113950687119294993783954302e-13 0.2668446427261522492176649954334048223904e-16 0.9994996084892373135712686077788946365591 0.0005003915107626864287313922211053634409358\n29.0 17.0 0.905801355838775634765625 0.5332715635261522245187800159802690779464e-13 0.1586887853227991495785145427223062312599e-19 0.9999997024241513056660324488327584127146 0.2975758486943339675511672415872853606108e-6\n29.0 17.0 0.913384497165679931640625 0.5332716748758540842719595303300116787964e-13 0.473390834630459700641648001214561634053e-20 0.9999999112289636014756821705327003589456 0.8877103639852431782946729964105443942224e-7\n29.0 17.0 0.9688708782196044921875 0.5332717222149313671911194692311098004522e-13 0.6180126810125263701999800449037851430522e-27 0.9999999999999884109234510763426287688781 0.1158907654892365737123112190004392238109e-13\n29.0 21.0 0.12707412242889404296875 0.2622688919478594287842185743973347821686e-28 0.1219440377452527350087607157329301141767e-14 0.2150731571606204919024801870635544427316e-13 0.9999999999999784926842839379508097519813\n29.0 21.0 0.1355634629726409912109375 0.1418713501820732224784391138981376672621e-27 0.121944037745241170562661987004970112451e-14 0.1163413585487849764030290406387721998878e-12 0.9999999999998836586414512150235969709594\n29.0 21.0 0.221111953258514404296875 0.2819494097990247934422475322933764686613e-22 0.1219440349257612597074322599047426334286e-14 0.2312121322307084112246080922653764315221e-7 0.9999999768787867769291588775391907734624\n29.0 21.0 0.3082362115383148193359375 0.4590604053823265741515184961715991390153e-19 0.121939447141201534431938679142256240371e-14 0.3764517018382785679447786586291466955818e-4 0.9999623548298161721432055221341370853304\n29.0 21.0 0.632396042346954345703125 0.9403271353207874761066659148355463535727e-15 0.2791132421317661008701360284366332100512e-15 0.7711136622236162268814943102092668892095 0.2288863377763837731185056897907331107905\n29.0 21.0 0.81474220752716064453125 0.1219350630989935903702448811237250100366e-14 0.8974646261767327435313203492946325789025e-19 0.9999264035665235587445776093948409242391 0.7359643347644125542239060515907576093559e-4\n29.0 21.0 0.8350250720977783203125 0.1219425468599243026969437607234555794277e-14 0.1490885331055000736433603762376934659784e-19 0.9999877740202914266004206818657375560257 0.1222597970857339957931813426244397433674e-4\n29.0 21.0 0.905801355838775634765625 0.1219440376474089147245427814030177552889e-14 0.9784644297313741292420020107346672069241e-24 0.999999999197611914593631230018077243295 0.8023880854063687699819227567050143772512e-9\n29.0 21.0 0.913384497165679931640625 0.1219440377243221593955741939275749894347e-14 0.2093319830210600039964296692766610117394e-24 0.9999999998283376646438749173065769931957 0.1716623353561250826934230068043360852858e-9\n29.0 21.0 0.9688708782196044921875 0.1219440377452553576511428139757496126558e-14 0.4653738035146834370659829632125960033463e-33 0.9999999999999999996183710067999693017256 0.3816289932000306982743556024075820476229e-18\n29.0 25.0 0.12707412242889404296875 0.1555808326883127500311456973153521179605e-28 0.4425091249314873563808521106841080173888e-16 0.3515878519168305577869856033854732815277e-12 0.9999999999996484121480831694422130143966\n29.0 25.0 0.1355634629726409912109375 0.8108204696267549526636715760145842245675e-28 0.4425091249308321167439136684814754915101e-16 0.1832324858277232809710125242158988114775e-11 0.9999999999981676751417227671902898747578\n29.0 25.0 0.221111953258514404296875 0.1086668694038661029726216634065449788827e-22 0.4425090162647735333474374508124757565411e-16 0.2455697821387356294375543426541037429617e-6 0.9999997544302178612643705624456573458963\n29.0 25.0 0.3082362115383148193359375 0.114089482338372941935666059958433668607e-19 0.4423950354493045642716047573741807294175e-16 0.0002578240219475633068398152847184694676278 0.9997421759780524366931601847152815305324\n29.0 25.0 0.632396042346954345703125 0.4080242199350978159612788601521934573057e-16 0.3448490499654512125226156328194570578034e-17 0.922069618334147994700070948689252052613 0.07793038166585200529992905131074794738703\n29.0 25.0 0.81474220752716064453125 0.4425082854672210243880321104453083441682e-16 0.8394644219128255083129888308189178650662e-22 0.9999981029443809943972152647456533976069 0.1897055619005602784735254346602393087313e-5\n29.0 25.0 0.8350250720977783203125 0.4425090364473086610412824948891119191047e-16 0.8848433427617225792854502724398142763227e-23 0.9999998000395262135193967130560615022596 0.1999604737864806032869439384977403778204e-6\n29.0 25.0 0.905801355838775634765625 0.442509124931010228309223097482730603167e-16 0.6327089043173259514085599191086274883097e-28 0.9999999999985701788535658686692872933484 0.142982114643413133071270665161492231357e-11\n29.0 25.0 0.913384497165679931640625 0.4425091249315459655620196066845484300374e-16 0.9697165152081674959073304865046625530279e-29 0.9999999999997808595437759694842091843893 0.219140456224030515790815610680732559929e-12\n29.0 25.0 0.9688708782196044921875 0.4425091249316429372135367764785811372145e-16 0.364695555802587153070833977934303334641e-39 0.9999999999999999999999917584624755721392 0.8241537524427860846310497415064245046403e-23\n29.0 29.0 0.12707412242889404296875 0.923316069295911087670981747727498439589e-29 0.2293707585362121777016779926062608013511e-17 0.4025430596230184829070912070050343720885e-11 0.9999999999959745694037698151709290879299\n29.0 29.0 0.1355634629726409912109375 0.4636311737582912101943600370202696652663e-28 0.2293707585324991820333909915919881827286e-17 0.2021317698538406234511919030950089014502e-10 0.9999999999797868230146159376548808096905\n29.0 29.0 0.221111953258514404296875 0.4196338489685137322610015670220356686463e-23 0.2293703389032865252572416426923647610632e-17 0.1829500201528846315094395928451544038661e-5 0.999998170499798471153684905604071548456\n29.0 29.0 0.3082362115383148193359375 0.2852508756228290544114355916643662642067e-20 0.2290855076615126647165624681022674168346e-17 0.001243623544003960208553088239105025948353 0.9987563764559960397914469117608949740516\n29.0 29.0 0.632396042346954345703125 0.2246805164513807231425995277121752202217e-17 0.4690242085754770628374375981756562877118e-19 0.9795516999827359732498061118413741234703 0.02044830001726402675019388815862587652971\n29.0 29.0 0.81474220752716064453125 0.229370750346869012242617646709449563346e-17 0.8190266481528356256984482219752875387485e-25 0.9999999642924558746561455237067644626732 0.357075441253438544762932355373267722163e-7\n29.0 29.0 0.8350250720977783203125 0.2293707579908524292389333977729248225557e-17 0.5462830645320405059210069605431227808573e-26 0.9999999976183404196067285472715027565409 0.2381659580393271452728497243459095045749e-8\n29.0 29.0 0.905801355838775634765625 0.2293707585371350712639828710355343040589e-17 0.4225069910326583974790399088824257728504e-32 0.9999999999999981579736068917702173801735 0.1842026393108229782619826469927511744716e-14\n29.0 29.0 0.913384497165679931640625 0.2293707585371354474096736322666113933706e-17 0.4636130027142732038972823215178859609506e-33 0.9999999999999997978761522736938087008911 0.2021238477263061912991089086787658426483e-15\n29.0 29.0 0.9688708782196044921875 0.2293707585371354937709739036645497747857e-17 0.2938200831315409921330762980283515302148e-45 0.9999999999999999999999999998719016822347 0.1280983177652835155613905687265858630952e-27\n29.0 33.0 0.12707412242889404296875 0.548196806460790775602055554119956915312e-29 0.1580548711176344599854102309383253244491e-18 0.3468395517109841609821669358429932289937e-10 0.9999999999653160448289015839017833064157\n29.0 33.0 0.1355634629726409912109375 0.2652449810146447194046469871415770903927e-28 0.1580548710965919299485536667538811812762e-18 0.1678182893889001598023451597171080242531e-9 0.9999999998321817106110998401976548402829\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data in SciPy\nDESCRIPTION: This dataset contains rows of 7 floating-point numbers, possibly representing inputs and outputs for mathematical functions or statistical analyses in SciPy. Each row may correspond to a specific test case or benchmark scenario.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_large_data_ipp/ibeta_large_data.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n0.04926551878452301025390625 0.0299147777259349822998046875 0.905801355838775634765625 22.37091475699371165610887016365649486326 31.23253834199579451650658398141050636854 0.4173409260720823242228709969532622686722 0.5826590739279176757771290030467377313278\n0.049306534230709075927734375 4.597743988037109375 0.81474220752716064453125 18.41612001008947971188429212832608416516 0.0001095078525055740520832753964766298238141 0.9999940537311180398689483683191900603588 0.594626888196013105163168080993964120443e-5\n0.0493220984935760498046875 0.00032175212982110679149627685546875 0.9688708782196044921875 23.63373039587093996815976313738828491512 3104.544868471964579602419702569680899307 0.007555109035150539698573666668347833707795 0.9924448909648494603014263333316521662922\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Array Processing\nDESCRIPTION: Large dataset of floating-point numbers representing scientific measurements or numeric values, arranged in multiple rows and columns\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/random-double-data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2.493754578342164336e+02 2.275093847135933061e+02 1.466148442335522191e+02 2.261697123059220189e+02 1.213252451599347950e+02 ...\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Array Processing in Python\nDESCRIPTION: A large dataset of floating-point scientific or statistical values, likely representing measurements or simulation results with high numerical precision\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/spatial/tests/data/pdist-seuclidean-ml-iris.txt#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndata = [1.4261046e+00, 1.4313173e+00, 1.9693923e+00, ..., 5.8374436e-01]\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Matrix Data\nDESCRIPTION: Matrix of scientific notation numbers with high precision (approximately 40 decimal places). Each row contains four columns of exponential values, with consistent formatting and precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rd_xxz_ipp/ellint_rd_xxz.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.1445641216000000000000000000000000000000e+10 1.1445641216000000000000000000000000000000e+10 2.7095397949218750000000000000000000000000e+01 5.0350080430168540782360778566898154854650e-11\n1.1445641216000000000000000000000000000000e+10 1.1445641216000000000000000000000000000000e+10 4.4206802368164062500000000000000000000000e+01 3.9417963278380456094748329221664521072363e-11\n1.1445641216000000000000000000000000000000e+10 1.1445641216000000000000000000000000000000e+10 6.1633407592773437500000000000000000000000e+01 3.3382816749288604645892350791997790783047e-11\n```\n\n----------------------------------------\n\nTITLE: High-Precision Numerical Dataset in Scientific Notation Format\nDESCRIPTION: A structured dataset containing numerical values in scientific notation with high precision (approximately 15-16 significant digits). The data is organized in columns, possibly representing input parameters and corresponding output values for numerical testing or verification in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/wright_bessel.txt#2025-04-14_snippet_0\n\nLANGUAGE: data\nCODE:\n```\n9.999999999999778218e-05 0.000000000000000000e+00 2.000000000000022204e+00 1.478067017899946075e-03\n9.999999999999778218e-05 0.000000000000000000e+00 8.999999999999978684e+00 7.296979825049991319e+00\n9.999999999999778218e-05 0.000000000000000000e+00 9.000000000000000000e+00 7.296979825050163626e+00\n9.999999999999778218e-05 0.000000000000000000e+00 9.000000000000021316e+00 7.296979825050336821e+00\n9.999999999999778218e-05 0.000000000000000000e+00 9.999999999999777955e+00 2.204043229132685155e+01\n9.999999999999778218e-05 0.000000000000000000e+00 1.000000000000000000e+01 2.204043229133223392e+01\n9.999999999999778218e-05 0.000000000000000000e+00 1.000000000000022204e+01 2.204043229133761628e+01\n9.999999999999778218e-05 0.000000000000000000e+00 9.999999999999778311e+01 2.703606807965995089e+41\n9.999999999999778218e-05 0.000000000000000000e+00 1.000000000000000000e+02 2.703606807972049003e+41\n9.999999999999778218e-05 0.000000000000000000e+00 1.000000000000022169e+02 2.703606807978102917e+41\n9.999999999999778218e-05 0.000000000000000000e+00 5.000000000000000000e+02 7.209303689281105817e+215\n9.999999999999778218e-05 2.220446049250313081e-14 0.000000000000000000e+00 2.220446049250341480e-14\n9.999999999999778218e-05 2.220446049250313081e-14 2.220446049250313081e-14 2.220668106670621895e-14\n9.999999999999778218e-05 2.220446049250313081e-14 9.999999999999777955e-01 2.718595546888332229e-04\n9.999999999999778218e-05 2.220446049250313081e-14 1.000000000000000000e+00 2.718595546888452575e-04\n9.999999999999778218e-05 2.220446049250313081e-14 1.000000000000022204e+00 2.718595546888573464e-04\n9.999999999999778218e-05 2.220446049250313081e-14 1.500000000000000000e+00 6.723503352710403667e-04\n9.999999999999778218e-05 2.220446049250313081e-14 1.999999999999977796e+00 1.478067018063955506e-03\n9.999999999999778218e-05 2.220446049250313081e-14 2.000000000000000000e+00 1.478067018064004512e-03\n9.999999999999778218e-05 2.220446049250313081e-14 2.000000000000022204e+00 1.478067018064053951e-03\n9.999999999999778218e-05 2.220446049250313081e-14 8.999999999999978684e+00 7.296979825230102357e+00\n9.999999999999778218e-05 2.220446049250313081e-14 9.000000000000000000e+00 7.296979825230274663e+00\n9.999999999999778218e-05 2.220446049250313081e-14 9.000000000000021316e+00 7.296979825230447858e+00\n9.999999999999778218e-05 2.220446049250313081e-14 9.999999999999777955e+00 2.204043229181650076e+01\n9.999999999999778218e-05 2.220446049250313081e-14 1.000000000000000000e+01 2.204043229182188313e+01\n9.999999999999778218e-05 2.220446049250313081e-14 1.000000000000022204e+01 2.204043229182726549e+01\n9.999999999999778218e-05 2.220446049250313081e-14 9.999999999999778311e+01 2.703606807972031594e+41\n9.999999999999778218e-05 2.220446049250313081e-14 1.000000000000000000e+02 2.703606807978085508e+41\n9.999999999999778218e-05 2.220446049250313081e-14 1.000000000000022169e+02 2.703606807984139422e+41\n9.999999999999778218e-05 2.220446049250313081e-14 5.000000000000000000e+02 7.209303689284386538e+215\n9.999999999999778218e-05 1.000000000000000036e-10 0.000000000000000000e+00 1.000000000057721604e-10\n9.999999999999778218e-05 1.000000000000000036e-10 2.220446049250313081e-14 1.000000022263485832e-10\n9.999999999999778218e-05 1.000000000000000036e-10 9.999999999999777955e-01 2.718598264880210886e-04\n9.999999999999778218e-05 1.000000000000000036e-10 1.000000000000000000e+00 2.718598264880331774e-04\n9.999999999999778218e-05 1.000000000000000036e-10 1.000000000000022204e+00 2.718598264880452663e-04\n9.999999999999778218e-05 1.000000000000000036e-10 1.500000000000000000e+00 6.723507834179906885e-04\n9.999999999999778218e-05 1.000000000000000036e-10 1.999999999999977796e+00 1.478067756975973450e-03\n9.999999999999778218e-05 1.000000000000000036e-10 2.000000000000000000e+00 1.478067756976022672e-03\n9.999999999999778218e-05 1.000000000000000036e-10 2.000000000000022204e+00 1.478067756976071895e-03\n9.999999999999778218e-05 1.000000000000000036e-10 8.999999999999978684e+00 7.296980636198849623e+00\n9.999999999999778218e-05 1.000000000000000036e-10 9.000000000000000000e+00 7.296980636199021930e+00\n9.999999999999778218e-05 1.000000000000000036e-10 9.000000000000021316e+00 7.296980636199195125e+00\n9.999999999999778218e-05 1.000000000000000036e-10 9.999999999999777955e+00 2.204043449651146602e+01\n9.999999999999778218e-05 1.000000000000000036e-10 1.000000000000000000e+01 2.204043449651684838e+01\n9.999999999999778218e-05 1.000000000000000036e-10 1.000000000000022204e+01 2.204043449652223430e+01\n9.999999999999778218e-05 1.000000000000000036e-10 9.999999999999778311e+01 2.703606835152144836e+41\n9.999999999999778218e-05 1.000000000000000036e-10 1.000000000000000000e+02 2.703606835158198749e+41\n9.999999999999778218e-05 1.000000000000000036e-10 1.000000000000022169e+02 2.703606835164252663e+41\n9.999999999999778218e-05 1.000000000000000036e-10 5.000000000000000000e+02 7.209303704057797379e+215\n9.999999999999778218e-05 1.000000000000000082e-05 0.000000000000000000e+00 1.000005772091061222e-05\n9.999999999999778218e-05 1.000000000000000082e-05 2.220446049250313081e-14 1.000005772091305506e-05\n9.999999999999778218e-05 1.000000000000000082e-05 9.999999999999777955e-01 2.990456667612395982e-04\n9.999999999999778218e-05 1.000000000000000082e-05 1.000000000000000000e+00 2.990456667612522833e-04\n9.999999999999778218e-05 1.000000000000000082e-05 1.000000000000022204e+00 2.990456667612649685e-04\n9.999999999999778218e-05 1.000000000000000082e-05 1.500000000000000000e+00 7.171752418262360282e-04\n9.999999999999778218e-05 1.000000000000000082e-05 1.999999999999977796e+00 1.551975056693476662e-03\n9.999999999999778218e-05 1.000000000000000082e-05 2.000000000000000000e+00 1.551975056693527619e-03\n9.999999999999778218e-05 1.000000000000000082e-05 2.000000000000022204e+00 1.551975056693578360e-03\n9.999999999999778218e-05 1.000000000000000082e-05 8.999999999999978684e+00 7.378095177185152842e+00\n9.999999999999778218e-05 1.000000000000000082e-05 9.000000000000000000e+00 7.378095177185326925e+00\n9.999999999999778218e-05 1.000000000000000082e-05 9.000000000000021316e+00 7.378095177185501896e+00\n9.999999999999778218e-05 1.000000000000000082e-05 9.999999999999777955e+00 2.226095201996142592e+01\n9.999999999999778218e-05 1.000000000000000082e-05 1.000000000000000000e+01 2.226095201996685802e+01\n9.999999999999778218e-05 1.000000000000000082e-05 1.000000000000022204e+01 2.226095201997229012e+01\n9.999999999999778218e-05 1.000000000000000082e-05 9.999999999999778311e+01 2.706325437906850863e+41\n9.999999999999778218e-05 1.000000000000000082e-05 1.000000000000000000e+02 2.706325437912910966e+41\n9.999999999999778218e-05 1.000000000000000082e-05 1.000000000000022169e+02 2.706325437918971069e+41\n9.999999999999778218e-05 1.000000000000000082e-05 5.000000000000000000e+02 7.210781365179945180e+215\n9.999999999999778218e-05 1.000000000000000056e-01 0.000000000000000000e+00 1.051137006111777933e-01\n9.999999999999778218e-05 1.000000000000000056e-01 2.220446049250313081e-14 1.051137006111801248e-01\n9.999999999999778218e-05 1.000000000000000056e-01 9.999999999999777955e-01 2.860265194735523431e-01\n9.999999999999778218e-05 1.000000000000000056e-01 1.000000000000000000e+00 2.860265194735587269e-01\n9.999999999999778218e-05 1.000000000000000056e-01 1.000000000000022204e+00 2.860265194735650551e-01\n9.999999999999778218e-05 1.000000000000000056e-01 1.500000000000000000e+00 4.718235611195706891e-01\n9.999999999999778218e-05 1.000000000000000056e-01 1.999999999999977796e+00 7.783104061319849887e-01\n9.999999999999778218e-05 1.000000000000000056e-01 2.000000000000000000e+00 7.783104061320023082e-01\n9.999999999999778218e-05 1.000000000000000056e-01 2.000000000000022204e+00 7.783104061320196276e-01\n9.999999999999778218e-05 1.000000000000000056e-01 8.999999999999978684e+00 8.597384449442804453e+02\n9.999999999999778218e-05 1.000000000000000056e-01 9.000000000000000000e+00 8.597384449442987489e+02\n9.999999999999778218e-05 1.000000000000000056e-01 9.000000000000021316e+00 8.597384449443171661e+02\n9.999999999999778218e-05 1.000000000000000056e-01 9.999999999999777955e+00 2.339426453916601076e+03\n9.999999999999778218e-05 1.000000000000000056e-01 1.000000000000000000e+01 2.339426453917120853e+03\n9.999999999999778218e-05 1.000000000000000056e-01 1.000000000000022204e+01 2.339426453917641084e+03\n9.999999999999778218e-05 1.000000000000000056e-01 9.999999999999778311e+01 3.121123127555858088e+42\n9.999999999999778218e-05 1.000000000000000056e-01 1.000000000000000000e+02 3.121123127562784363e+42\n9.999999999999778218e-05 1.000000000000000056e-01 1.000000000000022169e+02 3.121123127569710019e+42\n9.999999999999778218e-05 1.000000000000000056e-01 5.000000000000000000e+02 2.256499899874658039e+216\n9.999999999999778218e-05 1.000000000000000000e+00 0.000000000000000000e+00 1.000000000000000000e+00\n9.999999999999778218e-05 1.000000000000000000e+00 2.220446049250313081e-14 1.000000000000022204e+00\n9.999999999999778218e-05 1.000000000000000000e+00 9.999999999999777955e-01 2.718438696286486156e+00\n9.999999999999778218e-05 1.000000000000000000e+00 1.000000000000000000e+00 2.718438696286546552e+00\n9.999999999999778218e-05 1.000000000000000000e+00 1.000000000000022204e+00 2.718438696286606948e+00\n9.999999999999778218e-05 1.000000000000000000e+00 1.500000000000000000e+00 4.482076995277313181e+00\n9.999999999999778218e-05 1.000000000000000000e+00 1.999999999999977796e+00 7.389908823930305459e+00\n9.999999999999778218e-05 1.000000000000000000e+00 2.000000000000000000e+00 7.389908823930469772e+00\n9.999999999999778218e-05 1.000000000000000000e+00 2.000000000000022204e+00 7.389908823930634085e+00\n9.999999999999778218e-05 1.000000000000000000e+00 8.999999999999978684e+00 8.107288648350633594e+03\n9.999999999999778218e-05 1.000000000000000000e+00 9.000000000000000000e+00 8.107288648350806398e+03\n9.999999999999778218e-05 1.000000000000000000e+00 9.000000000000021316e+00 8.107288648350979201e+03\n```\n\n----------------------------------------\n\nTITLE: Data Point Collection (Plaintext)\nDESCRIPTION: Raw numerical data with two columns of floating-point values, potentially representing x-y coordinates or related measurements\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/erf_inv_data_ipp/erf_inv_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-0.990433037281036376953125\t-1.832184533179510927322805923563700329767\n```\n\n----------------------------------------\n\nTITLE: Numerical Computation Results in SciPy\nDESCRIPTION: This snippet shows multiple rows of numerical data, each containing six floating-point values. The data likely represents results from various mathematical operations or algorithms, possibly used for testing or benchmarking in SciPy.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n92.12703704833984375 0.9212703704833984375 0.2399876453932557709035963058340481135622175286808518995946642268081351389373379385408490973122764218e141 1.0 0.2285161460865770312684052016459511707861475065482028014778375841615432664705606506253415139167093647e-5 0.9521996255770543248507019797080309969664705034667222929863386994113202258092320333410356802674857838e-146\n92.12703704833984375\t46.063518524169921875\t0.2399876450277638485757886841159475759421222612629946380212164618188833289937115257074378242460809734e141\t0.9999999984770385920121252110149154360487429041767187470002014110363695240033054408199869788510190661\t0.3654919223278076217181005376200952674178572615734477649892518099436264128334112730661954483695002139e132\t0.1522961407987874788985084563951257095823281252999798588963630475996694559180013021148980933924946507e-8\n92.12703704833984375\t90.12703704833984375\t0.1366725728706164496211607713524598709187956968742644666129730537246230023910500337211476317361295124e141\t0.5694983699959134525449270791074549310207375095754663587823908208016178743877145827913884183431730345\t0.1033150725226393212824355344815882426434218318065874329816911730835121365462879048197014655761469094e141\t0.4305016300040865474550729208925450689792624904245336412176091791983821256122854172086115816568269655\n92.12703704833984375\t92.12703704833984375\t0.1166686845219986488818554224472973818313047319415121068610232864695809611388847169895474560281645051e141\t0.48614454436110451151996468540273911446245403663453944005499929830226081967028024171591317527262112\t0.1233189608712571220217408833867507317309127967393397927336409403385541777984532215513016412841119167e141\t0.51385545563889548848003531459726088553754596336546055994500070169773918032971975828408682472737888\n92.12703704833984375\t94.12703704833984375\t0.9708984381984547719038796803494227312344065442236234380066800099772773805997925825317171993463153688e140\t0.4045618417596005754006107404734865361987804155104383914748224604608107016638010596702460973672671963\t0.1428978015734102937132083377991058404387768742584895557939962258104074008773586802876773773776448849e141\t0.5954381582403994245993892595265134638012195844895616085251775395391892983361989403297539026327328037\n92.12703704833984375\t184.2540740966796875\t0.5154654025170943048379933630072361646831059286893631784471351458822835474658284543943173832619619619e127\t0.2147883078199408511675238699806345305806230493370052347091621201654187458303302006729866476491097872e-13\t0.2399876453932506162495711348909997336285874563192050685353773331763506675858791157053744390277324786e141\t0.9999999999999785211692180059148832476130019365469419376950662994765290837879834581254169669799327013\n92.12703704833984375 9212.7041015625 0.1740260185610722150132898864030278176879091468564177201588954956804257120622731650947061696398860464e-3639 0.7251457393813105181120231572651733738519794464115866097010846557465806558180663021583787844775357479e-3780 0.2399876453932557709035963058340481135622175286808518995946642268081351389373379385408490973122764218e141 1.0\n93.4323272705078125 0.934323251247406005859375 0.8814967134478776682875380788820907155756713245915086236629259348723005585824778198786951082475439305e143 1.0 0.7439264291879768548103199400435278012420110051886328485273432417984741385778097874396393306578837987e-5 0.8439355675850341606610333856828111362005601766448654572199934359421580463125806995716505409098085548e-148\n93.4323272705078125\t46.71616363525390625\t0.8814967124115816644428110120532236990775480938286720383273278139949431476870563194223429740319097179e143\t0.9999999988243903941611206237710406412358805844735764378231693011616242798809704624019090670629683518\t0.103629600384472706682886701649812323076283658533559812087735741089542150045635213421563421265495188e135\t0.1175609605838879376228959358764119415526423562176830698838375720119029537598090932937031648150732343e-8\n93.4323272705078125\t91.4323272705078125\t0.5015787454101221129295525920738692750796895112434379522282892305449693416283657589264175830475498272e143\t0.569008072019068441378141224129859484843913549106268473388321108632746869660168361088019147327254114\t0.3799179680377555553579854868082214404959818133480706714346367043273312169541120609522775251999941033e143\t0.430991927980931558621858775870140515156086450893731526611678891367253130339831638911980852672745886\n93.4323272705078125\t93.4323272705078125\t0.4286204421291983901657204887758065580849070272358778008816834971857064031129186504368326875862846622e143\t0.486241679169394248977891557118270927040069031656068991568797425507919067660955199856740555894381588\t0.4528762713186792781218175901062841574907642973556308227812424376865941554695591694418624206612592683e143\t0.513758320830605751022108442881729072959930968343931008431202574492080932339044800143259444105618412\n93.4323272705078125\t95.4323272705078125\t0.3571911708923214852825956235373317199244122044271645894800192401985153692143479124758817967531471405e143\t0.4052098725305593197447557452013893919656732535974720385317845783769326496469985662908191758457480378\t0.52430554255555618300494245534475899565125912016434403418290669467378518936812990740281331149439679e143\t0.5947901274694406802552442547986106080343267464025279614682154216230673503530014337091808241542519622\n93.4323272705078125\t186.864654541015625\t0.1259953718851497422185155838432709775415377681234627891274319482880983197650512335906366190780121108e130\t0.1429334562035207942219561580292535457466577078886806996466399874934997762978014383761464213682159646e-13\t0.8814967134478650687503495639078688640172869974937544698861135885933878153876490100467186031241848669e143\t0.9999999999999857066543796479205778043841970746454253342292111319300353360012506500223702198561623854\n93.4323272705078125 9343.232421875 0.1960314045329095653874896587430064105960842290239001554238513241670632927461577447737697784737955613e-3690 0.2223847253680098670168278676241422662084837978009286299217324300789098229947253471418167411428882428e-3833 0.8814967134478776682875380788820907155756713245915086236629259348723005585824778198786951082475439305e143 1.0\n95.04709625244140625 0.950470983982086181640625 0.1347151497701627838023004899030991007135183961667830130160321116038462511703415545257334974334882037e147 1.0 0.3286612795944616265711661159620158180111738426278486839585148422911814462000818729717402563514602976e-4 0.2439675716912239653605419199699105800940081390120250957910020333139694222067332074038136544243711667e-150\n95.04709625244140625\t47.523548126220703125\t0.134715149655174837158908365734295756525909899321280250267181720062970685562896010218651352005874697e147\t0.9999999991464364116465534636328681416670507850803823863855186962459346530413634417636243160462913207\t0.114987946643392124168803344187608496845502762748850391540875565607445544307082145427613506749351943e138\t0.8535635883534465363671318583329492149196176136144813037540653469586365582363756839537086792727480771e-9\n95.04709625244140625\t93.04709625244140625\t0.7657419898087756918044401927859150010110236627212083718551073992050834278986980247942861154148661996e146\t0.5684156467295670833457314748182583026711347615029028702386864296192251088564944072740070382355011149\t0.5814095078928521462185647062450760061241602989466217583052137168333790838047175204630488589200158375e146\t0.4315843532704329166542685251817416973288652384970971297613135703807748911435055927259929617644988851\n95.04709625244140625\t95.04709625244140625\t0.6551993414891400584657331890429218727010636138597867246040294498234147999757611336129285742445526427e146\t0.4863590640005776572938148287895322447425672342498795296867376257066880031162988779311197928274050768\t0.6919521562124877795572717099880691344341203478080434055562916662150477117276544116444064000903293943e146\t0.5136409359994223427061851712104677552574327657501204703132623742933119968837011220688802071725949232\n95.04709625244140625\t97.04709625244140625\t0.5469348543810198898788108400219066674055519288845905559098385193141874425095257183053365380552173915e146\t0.4059935763083396511879930219600213943088317540084712903484937176675430142752990570780958626728778976\t0.8002166433206079481441940590090843397296320327832395742504825967242750691938898269519984362796646455e146\t0.5940064236916603488120069780399786056911682459915287096515062823324569857247009429219041373271221024\n95.04709625244140625\t190.0941925048828125\t0.1163565210751933735917713115824884295377410943134003957027515756150491650147536720126667740467403185e133\t0.8637226122949718303297924930807240476707255995627851606738122984246652433596622525296156940282444593e-14\t0.134715149770161620237089737969363183000402571282487635605088977599889223654585404034083349896768077e147\t0.9999999999999913627738770502816967020750691927595232927440043721483932618770157533475664033774747038\n95.04709625244140625 9504.7099609375 0.1882910792556985454022291750937049650277749642926213574473710789217539816042178440456911801998452087e-3753 0.1397697880134057195925378652333761731239724208573611460809672748666332725027162330835038869860775248e-3899 0.1347151497701627838023004899030991007135183961667830130160321116038462511703415545257334974334882037e147 1.0\n95.7381134033203125 0.95738112926483154296875 0.3131256477376182698644958520288062730120597952997735383909639369911279332348153218599580667846002149e148 1.0 0.6259638796335379154132491067850054630581491227431517134904320208680904887791967705070062451309013877e-4 0.1999082106995146361595919566373510363928443455250615728995542441899260700897608092918146555224762139e-151\n95.7381134033203125\t47.86905670166015625\t0.3131256475045529369814942168364075834643974857802806071524605507825921146892747325138071613543204894e148\t0.9999999992556811153384110140909467483022561115010639504399530543910037541382647473365746503693152161\t0.2330653328830016351923986895476623095194929312385033862085358185455405893461509054302797255478092976e139\t0.7443188846615889859090532516977438884989360495600469456089962458617352526634253496306847838730929468e-9\n```\n\n----------------------------------------\n\nTITLE: Describing the Numerical Data Columns\nDESCRIPTION: This section describes the structure of the numerical data. Each line consists of multiple floating-point numbers, potentially separated by tabs or spaces. Understanding the meaning of each column is crucial for interpreting the data correctly. The columns are described below based on observation and common scientific data conventions.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"0.008691129274666309356689453125\\t0.008691129274666309356689453125\\t4.08848737420065935929134320387738037551705209754263277179328266373220927403385787131830593805064886\\t0.03571007065596669193904108016015709813865155263375873910595316749759359782915444208415216634230658664\\t110.4026715369488453064104627380846169702601581942999538611195423927551675575860789385377795276185642\\t0.9642899293440333080609589198398429018613484473662412608940468325024064021708455579155247914668146388\n0.008691129274666309356689453125\\t0.00956024229526519775390625\\t3.99782079814824918307908619479527349158197798771392975095659098640536858272574657135383729506757053\\t0.03491816168312825922906539505187828450927190406957704260083957374549678225908496848420561100299384268\\t110.4933381130012554826227197471667238541952323041286568819562340700820082488941902385022481706016425\\t0.9650818383168717407709346049481217154907280959304229573991604262545032177409150315154783785776319255\n...\"\n```\n\n----------------------------------------\n\nTITLE: Numerical Data Point Series in Scientific Notation\nDESCRIPTION: A large dataset of floating-point numbers representing scientific computational values with different exponential scales and precision levels\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_j_prime_int_data_ipp/bessel_j_prime_int_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n-0.22e2 -0.1275280676782131195068359375e-1 -7.7040077413676921900756284880421464366458035190456e-67\n```\n\n----------------------------------------\n\nTITLE: Matrix of Numerical Data\nDESCRIPTION: Structured numerical data arranged in rows, containing floating point numbers with high precision. Each row contains 6 columns of numbers including exponents and decimal values.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_med_data_ipp/igamma_med_data.txt#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n87.9038543701171875\t175.807708740234375\t0.1100758471671216571874904945348343816940499403471959777458028574251205738678312487341657941463745706e120\t0.8027204011801507997304939786302172819890582139869213641050430314818326775172541565634952968684280417e-13\t0.1371285032811929388633017878085670183128748019741113008868965388611295992223981255170036721341100041e133\t0.9999999999999197279598819849200269506021369782718010941786013078635894956968518167322482745843436505\n```\n\n----------------------------------------\n\nTITLE: Numerical Matrix Data\nDESCRIPTION: Matrix containing scientific notation values arranged in three columns. Each row follows the pattern of a positive value, negative value, and positive value, with high-precision exponential notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipeinc_neg_m.txt#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1.000000000000000021e-02 -5.623413251903491089e-212 1.000000000000000021e-02\n1.000000000000000021e-02 -1.000000000000000021e-179 1.000000000000000021e-02\n1.000000000000000021e-02 -1.778279410038922677e-147 1.000000000000000021e-02\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Scientific Computing Data Matrix\nDESCRIPTION: Matrix of numerical values in scientific notation format, likely representing calculation results or simulation data. Values are arranged in rows with consistent precision and exponential notation.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_yv_prime_data_ipp/bessel_yv_prime_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: numeric\nCODE:\n```\n0.177219114266335964202880859375e-2 0.177219114266335964202880859375e-2 359.25306691468182462382237111287002162553866747579\n0.177219114266335964202880859375e-2 0.22177286446094512939453125e-2 287.08013716324049922227602244564319388641879278396\n0.177219114266335964202880859375e-2 0.7444499991834163665771484375e-2 85.531475792801076416765903757627138355150815768381\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Data Processing in Python\nDESCRIPTION: Dataset containing high-precision floating point numbers with extended exponential representation, likely used in scientific or numerical computing contexts\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ellint_rf_0yy_ipp/ellint_rf_0yy.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n0.0000000000000000000000000000000000000000e+00 6.4040234014314612931042308259840000000000e+30\n```\n\n----------------------------------------\n\nTITLE: Parsing Numeric CSV/Tabular Data in SciPy\nDESCRIPTION: Dataset containing multiple floating-point measurements, likely representing scientific or computational data points with various numeric properties\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/gamma_inv_data_ipp/gamma_inv_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata = [\n  [18.8381977081298828125, 0.968867778778076171875, 27.71093725208517365530031334759767821069589067584245910071522241255680919312387131304006236541170325, 11.61017672557665827133967679491110764155409662162341161685463542805944124779399300099799766367213288],\n  # ... additional rows\n]\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Test Data Matrix\nDESCRIPTION: A matrix of numerical test data where each row contains 5 columns: a test identifier (2), two input parameters, and two output values that appear to be trigonometric function results. The values use scientific notation with high precision (15-16 decimal places).\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/gsl/mathieu_ce_se.txt#2025-04-14_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n2 1.000000000000000081803e-05 1.000000000000000062282e-09 1.000001666682706513711 1.999996666667534544029e-09\n2 1.000000000000000081803e-05 -1000.899999999999977263 -0.8222269821349921237186 0.5691573148479588395432\n2 1.000000000000000081803e-05 -100.2000000000000028422 0.7888098463530923698528 0.6146394517827455938885\n```\n\n----------------------------------------\n\nTITLE: Numeric Data Matrix Analysis\nDESCRIPTION: A collection of numerical data points representing precision calculations with varying input parameters. The matrix includes columns representing different mathematical transformations and computational results.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: raw_numeric\nCODE:\n```\n1.0 21.0 0.12707412242889404296875 0.04487554463330296498867403464237823454315 0.002743502985744654058945012976669384504466 0.9423864372993622647621547274899429254062 0.05761356270063773523784527251005707459379\n```\n\n----------------------------------------\n\nTITLE: Tabulated Trigonometric Function Results\nDESCRIPTION: This data set contains tabulated results of trigonometric calculations. Each row represents a set of inputs and corresponding outputs, likely for testing or benchmarking mathematical functions in a scientific computing library.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/gsl/mathieu_ce_se.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n10 -4.999999999999999773741e-08 -100.2000000000000028422 -0.9859117115832264355291 -0.1672665434707291676197\n10 -4.999999999999999773741e-08 -10 0.8623188733662051630446 0.506365639069572437414\n10 -4.999999999999999773741e-08 -2.5 0.9912028114719787508236 0.13235175248851574481\n10 -4.999999999999999773741e-08 -1 -0.8390715279154441486043 0.5440211128732204137748\n10 -4.999999999999999773741e-08 0.001000000000010000051134 0.9999500001641016266873 0.009999833336791703539137\n10 -4.999999999999999773741e-08 -1.000000000000000081803e-05 0.9999999947474748074328 -9.999999985858586202658e-05\n10 -4.999999999999999773741e-08 -4.999999999999999773741e-08 0.9999999997473497659328 -5.000000001262417678328e-07\n10 -4.999999999999999773741e-08 -1.000000000000000062282e-09 0.9999999997474747770454 -1.000000000252525192481e-08\n10 -4.999999999999999773741e-08 0 0.9999999997474747770454 0\n```\n\n----------------------------------------\n\nTITLE: Displaying Numerical Computation Results in Matrix Format\nDESCRIPTION: This snippet shows a matrix of numerical results, possibly from scientific calculations or simulations. Each row contains input parameters and corresponding output values, with high precision floating-point numbers.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_big_data_ipp/igamma_big_data.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n95.0640411376953125 190.128082275390625 0.1250182074547620992214675725176948920111523542123681850515412344728775663708689887288190847857890665 0.8591698010782896169858772991337093789443227801953170296511699301738602943099686230052571279996311061e-14 0.1455104768555163237194978358079190324281980525692884550915138722433188393710863509402354969927198158 0.9999999999999914083019892171038301412270086629062105567721980468297034883006982613970569003137699474\n95.0640411376953125 9506.404296875 0.410843456339856518931606427624153949626406539905791201082368440245547080360115104031712516488780225e-3754 0.2823463060655057243296240358288810188079450590292603437426554366141893572584859875591659170203266194e-3900 0.145510476855517573901572383428911247103923229518208566615055995925169354783431079715899205682607104 1.0\n230.1575469970703125 1.0 0.7943512307351483242116753931994555755252863994748982526699162024988971699725221518219249134173513373 1.0 0.001605325555957824512231082175017738406782181505873305483713006465121498687391150947753752042955234629 0.2020926630241566676562263620495817485172495859575490783548984837449311511609113883628635101437863762e-445\n230.1575469970703125 115.07877349853515625 0.7943512307351483242096295671350543391046865291446812785362675126379944308580154078637829951922550169 0.999999999999999999997424532139884915216691694261381644774940945904564087155008373661686631758703312 0.2045826064401236420599870330216974133648689860902739114506743958141918225096320389822784602629423829 0.2575467860115084783308305738618355225059054095435912844991626338313368241296687959051921053402245151e-20\n230.1575469970703125 228.1575469970703125 0.4320352500050499378139047005826494686951628124789491900175458122808307767421127117826956600568476985 0.5438844094258080593135924988903306028970803734274413960639336508587960608083506963680177065156017707 0.3623159807300983863977706926168061068301235869959490626523703902180663932304094400392292533605036387 0.4561155905741919406864075011096693971029196265725586039360663491412039391916493036319822934843982293\n230.1575469970703125 230.1575469970703125 0.3902125711209141749169738822595467642465379627204853447527623692260839529414655887300731747165667578 0.4912343004237358607289747140325946370477956811693055364940306943959659677095875895076435061750962822 0.4041386596142341492947015109399088112787484367544129079171538332728132170310565630918517387007845794 0.5087656995762641392710252859674053629522043188306944635059693056040340322904124104923564938249037178\n230.1575469970703125 232.1575469970703125 0.3487501889396853257613873709625756982927978890960690452261371310879305408861795829594157702393902252 0.4390377649656656899508279604758759349074080513082357116118517884562056435445571208463156984095475396 0.4456010417954629984502880222368798772324885103788292074437790714109666290863425688625091431779611121 0.5609622350343343100491720395241240650925919486917642883881482115437943564554428791536843015904524604\n230.1575469970703125 460.315093994140625 0.4407730519635239782394783554127362184391684954328510668870843466275578363345143797655617743698392878 0.5548843319039131990882691513243314111283345266801758353532094934100654252020248166518909120713686568e-32 0.7943512307351483242116753931994511677947667642351158578863620751367127782875678233112560425738850617 0.9999999999999999999999999999999944511566809608680091173084867566858887166547331982416464679050658993\n230.1575469970703125 23015.75390625 0.9559236409417348208950021152441346378729603969644625960148748982677900217226751345451199820074363395e-8996 0.1203401724520595328794601630545412981309154417499555052010254193737832188451276268511110869475419232e-9438 0.7943512307351483242116753931994555755252863994748982526699162024988971699725221518219249134173513373 1.0\n460.871795654296875 1.0 0.3035697913328577383103573207361433550048171545351043103427946337286406766335561424688872199902627644 1.0 0.0007999570943827548943010381276909696101503474270950161551998016380700161022055691674813276239985866686 0.263516699362756806302924272183408617249859311132449191463747391836511682589270348351185414999011926e-1029\n460.871795654296875 230.4358978271484375 0.3035697913328577383103573207361433550047925351370884076635599897138082095152794906157429847334951853 0.9999999999999999999999999999999999999999189003691447412844502774348028830000232618580279072994806341 0.2461939801590267923464401483246711827665185314423525676757909375351780224332385807676145414825568404 0.8109963085525871554972256519711699997673814197209270051936588154826179820725730567233569656951290491e-40\n460.871795654296875 458.871795654296875 0.1611931483241718379676730539883166095529909983108046890396800612185587953951876268408693414028956011 0.530992058255977856491744157658594549661381367389538808982523985300127763450276738767474706920587693 0.1423766430086859003426842667478267454518261562242996213031145725100818812383685156280178785873671632 0.469007941744022143508255842341405450338618632610461191017476014699872236549723261232525293079412307\n460.871795654296875 460.871795654296875 0.1499044425611669817452516634978304074804845409565096465620306533651905004146763285309824382109683004 0.4938055328331401358749551739774500026079273309328516400413537728779540654346471892486393687796370785 0.1536653487716907565651056572383129475243326135785946637807639803634501762188798139379047817792944639 0.5061944671668598641250448260225499973920726690671483599586462271220459345653528107513606312203629215\n460.871795654296875 462.871795654296875 0.1386645136476389702527676004487322668191450267077516764379529098330836887026073425447155428151335593 0.4567796849575072422528834382064975306821917056574500241896950256666133220324798484185934498637551554 0.164905277685218768057589720287411088185672127827352633904841723895556987930948799924171677175129205 0.5432203150424927577471165617935024693178082943425499758103049743333866779675201515814065501362448446\n460.871795654296875 921.74359130859375 0.214579568282097447843285341234033253132140021796896174619250110179219191931782655042052951085903063 0.7068541548220638744450497903888966495830510626579681233627159150684459468037055060183111727855356285e-63 0.3035697913328577383103573207361433550048171545351043103427946335140611083514586946256018787562295112 0.9999999999999999999999999999999999999999999999999999999999999992931458451779361255549502096111033504\n460.871795654296875 46087.1796875 0.1759948687946540932943422895133578780806254223549085877126768144753543541319766123991600654675160946e-17870 0.5797509298337248254275801202156047189153910514148794160732208629325216030358623936601957024666048442e-18897 0.3035697913328577383103573207361433550048171545351043103427946337286406766335561424688872199902627644 1.0\n664.0791015625 1.0 0.5745703266423053012388846296755759814458236575017295797872518233032217040765801424270951932343892656 1.0 0.000554803499100533461700081675382127658415484012034431099012469964977561860611562701898919933771029858 0.9655972008556621156398909346034920368728235561361941209577148915248010183298024193896373627559762647e-1588\n664.0791015625 332.03955078125 0.5745703266423053012388846296755759814458236575017295797869018458769535952325154619307030524922146164 0.9999999999999999999999999999999999999999999999999999999993908884429982322791299632237165916284594418 0.3499774262681088440646804963921407421746491858377886363583697179665453608787350388997316735168900411 0.6091115570017677208700367762834083715405581683323513398498453028923230365514524283437552918367998412e-57\n664.0791015625 662.0791015625 0.3021167487573438738160129595305571832198618183437747086825419999530854511327755168926331826960039427 0.5258133508614421049922565116779507398294624638695327972751007507697623513933985163278375927725745103 0.2724535778849614274228716701450187982259618391579548711047098233501362529438046255344620105383853229 0.4741866491385578950077434883220492601705375361304672027248992492302376486066014836721624072274254897\n664.0791015625 664.0791015625 0.2843201563499913066053586445117464815121852615133384043443363638833281789611578313103564412744820411 0.494839609994326789934188822741956842775938040001912655673429653876761834997096017421334224252871364 0.2902501702923139946335259851638294999336383959883911754429154594198935251154223111167387519599072244 0.505160390005673210065811177258043157224061959998087344326570346123238165002903982578665775747128636\n664.0791015625 666.0791015625 0.2665770008350486832539682183986178091094039928067551889686056029306641365030303914782037547507298816 0.4639588723505457189002094923711730626394167476456643807276073537522553952201326725769733994829306401 0.3079933258072566179849164112769581723364196646949743908186462203725575675735497509488914384836593839 0.5360411276494542810997905076288269373605832523543356192723926462477446047798673274230266005170693599\n664.0791015625 1328.158203125 0.2815972350463307317319513325546921336811187310092965580873275148483880823923796516975854414779446515 0.490100553385585993788823794136328178072277263551970508868100075216984438630852032648844240985526793e-90 0.5745703266423053012388846296755759814458236575017295797872518233032217040765801424270951929527920305 0.9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999995098994466\n664.0791015625 66407.90625 0.8516936430425091984695352018926240039240039876743845066067885000233245389027299911547740471304411031e-25643 0.1482314006745992402392065908335891607562619332695970947910626860700838612133574022151344757253035352e-27227 0.5745703266423053012388846296755759814458236575017295797872518233032217040765801424270951932343892656 1.0\n```\n\n----------------------------------------\n\nTITLE: Analyzing Numerical Data for Scientific Computing\nDESCRIPTION: This snippet contains rows of numerical data, each with 7 floating-point values. The data likely represents results from mathematical computations or simulations, possibly related to probability distributions or statistical analysis. The precision and range of values suggest this could be used for testing or benchmarking scientific computing algorithms.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_int_data_ipp/ibeta_int_data.txt#2025-04-14_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n37.0 25.0 0.3082362115383148193359375 0.6591079834839574506016947096871578466335e-24 0.4547110470462130090479861973182546137374e-18 0.1449507401202573159070668978058785564683e-5 0.9999985504925987974268409293310219412144\n37.0 25.0 0.632396042346954345703125 0.3237210645255087178872589725932935850287e-18 0.1309906416286877751181778264196707158665e-18 0.7119259525193139248744690384012773103738 0.2880740474806860751255309615987226896262\n37.0 25.0 0.81474220752716064453125 0.4546938349892849959165146004631223823109e-18 0.1787116491149708892219854984191858434934e-22 0.9999606978121090270999489734178963983272 0.3930218789097290005102658210360167278716e-4\n37.0 25.0 0.8350250720977783203125 0.4547094473165351008040658988913111228318e-18 0.2258837661392201370900121653178063368484e-23 0.9999950323740717020140356938715477558239 0.4967625928297985964306128452244176057518e-5\n37.0 25.0 0.905801355838775634765625 0.4547117061244709905492548288621730202575e-18 0.2972550245618197015079128063767961580802e-28 0.9999999999346278047081950274296909639257 0.653721952918049725703090360742526644479e-10\n37.0 25.0 0.913384497165679931640625 0.4547117061493436113293187609028179203e-18 0.485288167611803811014638059520816300323e-29 0.9999999999893275637938549444879816573376 0.1067243620614505551201834266244538095768e-10\n37.0 25.0 0.9688708782196044921875 0.4547117061541964930051507055370937092949e-18 0.2860934758705916002847465492653977221396e-39 0.9999999999999999999993708244762593049649 0.6291755237406950351066449839824147319877e-21\n37.0 29.0 0.12707412242889404296875 0.4766330808725786443659155604415316685681e-36 0.1375136208127610314248295135563600183051e-19 0.3466079054972770261780389909617086325127e-16 0.9999999999999999653392094502722973821961\n37.0 29.0 0.1355634629726409912109375 0.4004006054486037593711343143831791648418e-35 0.1375136208127609961510997774217705248508e-19 0.2911715967349812132453165500933749097082e-15 0.9999999999999997088284032650187867546834\n37.0 29.0 0.221111953258514404296875 0.1753587499707554747005620785876106633731e-28 0.1375136206374022862204048475815843833767e-19 0.1275210040534998938970298246567218844378e-8 0.9999999987247899594650010610297017534328\n37.0 29.0 0.3082362115383148193359375 0.1608786173729871882808705880355057485693e-24 0.1375120120265873063192775135762661069068e-19 0.1169910416307341673298134563086833102055e-4 0.999988300895836926583267018654369131669\n37.0 29.0 0.632396042346954345703125 0.1211817029840737712700634042710214063881e-19 0.1633191782868726492109691801112505557621e-20 0.8812341807876264574086829999902870889094 0.1187658192123735425913170000097129110906\n37.0 29.0 0.81474220752716064453125 0.1375134490666369054158046750705216931691e-19 0.1717461241307753556472116247687952022222e-25 0.9999987510609995163650009753189533339105 0.1248939000483634999024681046666089532256e-5\n37.0 29.0 0.8350250720977783203125 0.1375136070374709087705383773559060076924e-19 0.137752901274206219449262404542718836151e-26 0.9999998998259950832281638040481079049166 0.1001740049167718361959518920950833547538e-6\n37.0 29.0 0.905801355838775634765625 0.1375136208127412908262196047290587793477e-19 0.1974536494071755308768261658782637976138e-32 0.9999999999998564115698211241054490648372 0.1435884301788758945509351628456887462036e-12\n37.0 29.0 0.913384497165679931640625 0.1375136208127587270061499750741568866244e-19 0.2309185010347207989575339864017076569671e-33 0.9999999999999832075906612087444484899632 0.1679240933879125555151003684677899740315e-13\n37.0 29.0 0.9688708782196044921875 0.1375136208127610361911603199804487667413e-19 0.2301697695222936221483666697794390147364e-45 0.9999999999999999999999999832620384684879 0.1673796153151210231687675483695080784991e-25\n37.0 33.0 0.12707412242889404296875 0.2815266604188693653913302322995077909319e-36 0.5720050994072747663256989409539299862616e-21 0.4921750884923820105209519233224389835091e-15 0.9999999999999995078249115076179894790481\n37.0 33.0 0.1355634629726409912109375 0.2277707779163919100908933095549890064306e-35 0.5720050994072727701445801959041944686588e-21 0.3981971107467630507203470725973361693706e-14 0.9999999999999960180288925323694927965293\n37.0 33.0 0.221111953258514404296875 0.6699377276839075532455324311258095644127e-29 0.5720050927078977710132838273679710663338e-21 0.1171209362255882974546065024517529113122e-7 0.9999999882879063774411702545393497548247\n37.0 33.0 0.3082362115383148193359375 0.3941556123526471052080162297773181229352e-25 0.5719656838460397831418385582003176457796e-21 0.6890770952235920510157252810387715473455e-4 0.9999310922904776407948984274718961228453\n37.0 33.0 0.632396042346954345703125 0.5497340418871139522096404153992420609406e-21 0.2227105752016109564271894442405331665125e-22 0.9610649318629521274528570243755901534052 0.03893506813704787254714297562440984659483\n37.0 33.0 0.81474220752716064453125 0.5720050823395897515434476704627684761846e-21 0.1706768529630891168936052690140727778083e-28 0.9999999701616553523826219507757071998362 0.2983834464761737804922429280016380616641e-7\n37.0 33.0 0.8350250720977783203125 0.5720050985407469884566837838946864514369e-21 0.8665280593956755759286089261549931701012e-30 0.9999999984851043106196220087456203622238 0.1514895689380377991254379637776220948978e-8\n37.0 33.0 0.905801355838775634765625 0.572005099407274913436774974821917171636e-21 0.1344155843850013782059558794526739210542e-36 0.9999999999999997650098145553493760303857 0.2349901854446506239696142929776751238858e-15\n37.0 33.0 0.913384497165679931640625 0.5720050994072750365977061126186163585042e-21 0.1125465324720467901908766696294229578058e-37 0.999999999999999980324208195229357614054 0.1967579180477064238594600964257347683977e-16\n37.0 33.0 0.9688708782196044921875 0.5720050994072750478523593598231063318166e-21 0.1890457752154400724263869930444876559631e-51 0.9999999999999999999999999999996695033394 0.3304966606265113541490993068263355840044e-30\n37.0 37.0 0.12707412242889404296875 0.1663315126472082518689392220455877254431e-36 0.3095647894727759768982379894849795807496e-22 0.5373075953841159720995259363454571859457e-14 0.9999999999999946269240461588402790047406\n37.0 37.0 0.1355634629726409912109375 0.1296111998868566405720542382682176670195e-35 0.309564789472764679093375775903441064718e-22 0.4186884435649110798542051137448125301801e-13 0.9999999999999581311556435088920145794886\n37.0 37.0 0.221111953258514404296875 0.2562741045594853507301922042614016365325e-29 0.3095647638453671842648293885482778440017e-22 0.8278528866152636518115304178551121854591e-7 0.9999999172147113384736348188469582144888\n37.0 37.0 0.3082362115383148193359375 0.9697027380656677021427830653945592127811e-26 0.3094678191989710734431501832609588142206e-22 0.0003132471040124351596576730870327977659869 0.999686752895987564840342326912967202234\n37.0 37.0 0.632396042346954345703125 0.3063451207632721012988627372821913143173e-22 0.3219668709505538914501724285306955824562e-24 0.9895993704097000715411905826153733915169 0.01040062959029992845880941738462660848308\n37.0 37.0 0.81474220752716064453125 0.3095647892990086195192122018743245560235e-22 0.1737690206941522596931737141183088624137e-31 0.9999999994386667133878509901348317251675 0.5613332866121490098651682748324536630957e-9\n37.0 37.0 0.8350250720977783203125 0.3095647894672021976547480411236536892802e-22 0.557544255861642044384458086164795234761e-33 0.9999999999819894162765991478047915369078 0.180105837234008521952084630921920026118e-10\n37.0 37.0 0.905801355838775634765625 0.3095647894727776401201650427507053565973e-22 0.9319941881679291354451743800364440933825e-41 0.9999999999999999996989340455175098675848 0.3010659544824901324152261922870847584496e-18\n37.0 37.0 0.913384497165679931640625 0.3095647894727776402077793811087210433219e-22 0.5585080458777226819971826512604809980239e-42 0.9999999999999999999819582825673125691735 0.1804171743268743082647407545766726774271e-19\n37.0 37.0 0.9688708782196044921875 0.3095647894727776402133644615674982685644e-22 0.1577418664709856221006413731479117116045e-57 0.9999999999999999999999999999999999949044 0.5095601044926236696504373430890795334844e-35\n```\n\n----------------------------------------\n\nTITLE: Processing Numerical Data Values\nDESCRIPTION: Raw numerical data output showing multiple columns of floating point values, scientific notation, and probability calculations. Each row contains 7 columns of varying numerical representations.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_large_data_ipp/ibeta_large_data.txt#2025-04-14_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n0.25217834263457916676998138427734375e-4 1832.2723388671875 0.913384497165679931640625 39646.38644935289616324338485234769483149 0.1452763128621285161831040219171995838252e-1949 1.0 0.3664301488048974504586999693295043470729e-1954\n0.252623358392156660556793212890625e-4 0.18408362567424774169921875 0.1355634629726409912109375 39582.74118681315029489567111244553726972 7.044686151999700105392458377191074685903 0.9998220579880223516008255071920565810242 0.0001779420119776483991744928079434189758066\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Test Data Matrix\nDESCRIPTION: Three-column matrix of scientific notation numbers with very small and very large exponents, ranging from approximately 10^-309 to 10^308. Each row contains three numbers in exponential format with high precision decimal places.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/local/ellipkinc_neg_m.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n9.999999999999999729e-155 -1.000000000000000017e+306 9.983407889920755960e-155\n9.999999999999999729e-155 -9.999999999999999860e+306 9.840415210118522097e-155\n9.999999999999999729e-155 -1.000000000000000011e+308 8.813735870195428585e-155\n```\n\n----------------------------------------\n\nTITLE: Column 4: Error Estimate or Variance\nDESCRIPTION: The fourth column (e.g., 0.03571007065596669193904108016015709813865155263375873910595316749759359782915444208415216634230658664) could represent an error estimate or variance associated with the function value in column 3. This provides a measure of the uncertainty or reliability of the calculated value. Lower values indicate higher precision.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/igamma_small_data_ipp/igamma_small_data.txt#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"0.03571007065596669193904108016015709813865155263375873910595316749759359782915444208415216634230658664\"\n```\n\n----------------------------------------\n\nTITLE: Numerical Dataset in Scientific Notation\nDESCRIPTION: A tabular dataset containing numerical values in scientific notation format, organized in three columns. Each row contains floating point numbers with high precision, possibly representing calculation results or test data.\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/bessel_y01_data_ipp/bessel_y01_data.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.0 0.23917420208454132080078125e0 -0.96144387845032600014206252125473909797e0\n0.0 0.1785583972930908203125e1 0.4741447443427281185149710186267060231689e0\n0.0 0.48770198822021484375e1 -0.2878028614684715596290259912770720755831e0\n[...additional rows omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Floating Point Number Matrix\nDESCRIPTION: Matrix of floating point numbers organized in rows, each containing 7 columns of values with high precision decimals and scientific notation\nSOURCE: https://github.com/scipy/scipy/blob/main/scipy/special/tests/data/boost/ibeta_large_data_ipp/ibeta_large_data.txt#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n28.738727569580078125 27.254573822021484375 0.9688708782196044921875 0.9572498697263697862453881461093343605252e-17 0.1347061208111147737313027634003403911828e-42 0.9999999999999999999999999859277995149145 0.1407220048508552589290190367969040450163e-25\n29.614292144775390625 0.435002657468430697917938232421875e-4 0.1355634629726409912109375 0.7737013612359115147454805505018838782536e-27 22984.41718847787840930792802750541434429 0.336619960772278849225161034207510040012e-31 0.9999999999999999999999999999999663380039\n30.21712493896484375 47917.328125 0.913384497165679931640625 0.6776336763750069355502711645477384929586e-110 0.390114760786060488589150194209388553626e-50913 1.0 0.5757015543751819277815605708572541789266e-50803\n```"
  }
]