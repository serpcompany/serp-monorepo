[
  {
    "owner": "microsoft",
    "repo": "fluentui-blazor",
    "content": "TITLE: Registering Fluent UI Services in Blazor\nDESCRIPTION: C# code to register Fluent UI services in a Blazor application's Program.cs file. This is required to use Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddFluentUIComponents();\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent UI Component Providers to MainLayout\nDESCRIPTION: Razor markup to add Fluent UI component providers to the MainLayout.razor file. These providers enable functionality for toasts, dialogs, tooltips, and message bars.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<FluentToastProvider />\n<FluentDialogProvider />\n<FluentTooltipProvider />\n<FluentMessageBarProvider />\n<FluentMenuProvider />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fluent UI Components in Razor\nDESCRIPTION: Example Razor markup demonstrating basic usage of Fluent UI components, including a FluentCard and FluentButton.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<FluentCard>\n  <h2>Hello World!</h2>\n  <FluentButton Appearance=\"@Appearance.Accent\">Click Me</FluentButton>\n</FluentCard>\n```\n\n----------------------------------------\n\nTITLE: Registering Fluent UI Services in ASP.NET Core\nDESCRIPTION: C# code to register Fluent UI services in the ASP.NET Core dependency injection container. This should be added to the Program.cs file.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddFluentUIComponents();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddHttpClient();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Fluent UI Components in Blazor\nDESCRIPTION: Example Razor markup demonstrating basic usage of Fluent UI components in a Blazor application. This shows how to use a FluentCard and FluentButton.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_13\n\nLANGUAGE: razor\nCODE:\n```\n<FluentCard>\n  <h2>Hello World!</h2>\n  <FluentButton Appearance=\"@Appearance.Accent\">Click Me</FluentButton>\n</FluentCard>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Blazor Packages via .NET CLI\nDESCRIPTION: Commands to install the main Fluent UI Blazor NuGet package and optional icon and emoji packages using the .NET CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Icons\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Emoji\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Styles in Blazor App\nDESCRIPTION: HTML link tag to include Fluent UI styles in a Blazor application. This is typically included automatically but can be added manually if needed.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"{PROJECT_NAME}.styles.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fluent UI Blazor Project\nDESCRIPTION: Command to create a new Blazor project using the Fluent UI template. This sets up a project with Fluent UI components pre-configured.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new fluentblazor --name MyApplication\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent UI Providers to Blazor Layout\nDESCRIPTION: Razor markup to add Fluent UI providers to a Blazor application's MainLayout.razor file. These providers are necessary for various Fluent UI components to function correctly.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_11\n\nLANGUAGE: razor\nCODE:\n```\n<FluentToastProvider />\n<FluentDialogProvider />\n<FluentTooltipProvider />\n<FluentMessageBarProvider />\n<FluentMenuProvider />\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Blazor Templates with dotnet CLI\nDESCRIPTION: Command to install the Microsoft.FluentUI.AspNetCore.Templates package using the dotnet CLI, which adds Fluent UI templates to your development environment.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/Templates.md#2025-04-20_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\ndotnet new install Microsoft.FluentUI.AspNetCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fluent UI Blazor Project\nDESCRIPTION: Commands to create new Fluent UI Blazor projects using the installed templates. Includes options for standard and WebAssembly projects.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new fluentblazor --name MyApplication\n```\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new fluentblazorwasm --name MyApplication\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Script in Blazor App\nDESCRIPTION: HTML script tag to include the Fluent UI Web Components script in a Blazor application. This should be added to the App.razor file for optimal loading.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js\" type=\"module\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Emoji Package for .NET\nDESCRIPTION: Command to add the Microsoft.FluentUI.AspNetCore.Components.Emoji NuGet package to a .NET project for using Fluent UI Emoji.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Emoji\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluent Blazor WebAssembly Standalone App\nDESCRIPTION: Command to create a new Fluent Blazor WebAssembly Standalone application using the 'fluentblazorwasm' template, where you specify your desired project name.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/Templates.md#2025-04-20_snippet_2\n\nLANGUAGE: cshtml\nCODE:\n```\ndotnet new fluentblazorwasm -o {your project name}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fluent UI Blazor WebAssembly Project\nDESCRIPTION: Command to create a new standalone Blazor WebAssembly project using the Fluent UI template. This sets up a WebAssembly project with Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new fluentblazorwasm --name MyApplication\n```\n\n----------------------------------------\n\nTITLE: Installing EntityFrameworkAdapter Package for FluentDataGrid\nDESCRIPTION: Command to install the Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter package, which enables efficient asynchronous query resolution for the FluentDataGrid when used with EF Core.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter\n```\n\n----------------------------------------\n\nTITLE: Creating FluentUI Blazor WebAssembly App\nDESCRIPTION: Command to create a new Fluent Blazor WebAssembly Standalone project using the installed template. Replace {your project name} with desired project name.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Templates/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new fluentblazorwasm -o {your project name}\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Blazor Package via .NET CLI\nDESCRIPTION: Command to add the main Fluent UI Blazor NuGet package to an existing project using the .NET CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components\n```\n\n----------------------------------------\n\nTITLE: Implementing Design Tokens as Blazor Components\nDESCRIPTION: Example showing how to use Design Tokens as components in a Blazor page, demonstrating the BaseLayerLuminance token with nested FluentCard and FluentButton components. Requires ParentReference context binding for proper functionality.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/DesignTokens.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<BaseLayerLuminance Value=\"(float?)0.15\">\n\t<FluentCard ParentReference=\"@context\">\n\t\t<div class=\"contents\">\n\t\t\tDark\n\t\t\t<FluentButton Appearance=\"Appearance.Accent\">Accent</FluentButton>\n\t\t\t<FluentButton Appearance=\"Appearance.Stealth\">Stealth</FluentButton>\n\t\t\t<FluentButton Appearance=\"Appearance.Outline\">Outline</FluentButton>\n\t\t\t<FluentButton Appearance=\"Appearance.Lightweight\">Lightweight</FluentButton>\n\t\t</div>\n\t</FluentCard>\n</BaseLayerLuminance>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Blazor Templates via .NET CLI\nDESCRIPTION: Command to install the Microsoft Fluent UI Blazor templates using the .NET CLI. These templates provide pre-configured Blazor projects with Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new install Microsoft.FluentUI.AspNetCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Fluent UI Packages\nDESCRIPTION: Commands to install additional Fluent UI packages for icons and emoji support using the .NET CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Icons\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Emoji\n```\n\n----------------------------------------\n\nTITLE: Installing FluentUI Blazor Templates\nDESCRIPTION: Command to install Microsoft FluentUI AspNetCore Templates package using the dotnet CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Templates/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new install Microsoft.FluentUI.AspNetCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Blazor Templates via .NET CLI\nDESCRIPTION: Command to install Fluent UI Blazor templates using the .NET CLI. These templates provide pre-configured Blazor projects with Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new install Microsoft.FluentUI.AspNetCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Script in Blazor App\nDESCRIPTION: HTML script tag to include the Fluent UI Web Components script in a Blazor application, necessary for certain rendering modes like SSR.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js\" type=\"module\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Emoji Package via .NET CLI\nDESCRIPTION: Command to install the Microsoft FluentUI AspNetCore Components Emoji NuGet package using the dotnet CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Emojis/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Emoji\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluent UI Services in Blazor\nDESCRIPTION: C# code to configure Fluent UI services in a Blazor application's Program.cs file. This example disables class name validation for compatibility with frameworks like Tailwind CSS.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddFluentUIComponents(options =>\n{\n    options.ValidateClassNames = false;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI Namespace in Razor\nDESCRIPTION: Razor directive to import the Fluent UI components namespace. This should be added to the _Imports.razor file to make Fluent UI components available throughout the application.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n@using Microsoft.FluentUI.AspNetCore.Components\n```\n\n----------------------------------------\n\nTITLE: Updating Icon and Emoji Imports in Razor\nDESCRIPTION: Add using statements for Icons and Emojis namespaces in _Imports.razor file to use the new versions of icons and emoji packages.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons\n@* add line below only if you are using the Emoji package *@\n@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentUI Components in C#\nDESCRIPTION: Updates the AddFluentUIComponents() service collection extension in Program.cs. Removes unnecessary icon and emoji configuration options and adds a hosting model setting.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddFluentUIComponents(options =>\n{\n    options.HostingModel = {see remark below};   \n});\n```\n\n----------------------------------------\n\nTITLE: Registering the DataGrid EntityFrameworkAdapter Service in Program.cs\nDESCRIPTION: Code for registering the Entity Framework adapter service in the dependency injection container. This must be added to Program.cs to enable the integration between FluentDataGrid and EF Core.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.EntityFrameworkAdapter/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddDataGridEntityFrameworkAdapter();\n```\n\n----------------------------------------\n\nTITLE: Importing Emojis Namespace in Blazor\nDESCRIPTION: Using directive to import the Emojis namespace in a Blazor _Imports.razor file for easier access to emoji components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_7\n\nLANGUAGE: razor\nCODE:\n```\n@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI Namespace in Blazor\nDESCRIPTION: Razor directive to import the Fluent UI namespace in a Blazor application's _Imports.razor file. This allows using Fluent UI components without fully qualifying their names.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_12\n\nLANGUAGE: razor\nCODE:\n```\n@using Microsoft.FluentUI.AspNetCore.Components\n```\n\n----------------------------------------\n\nTITLE: Installing the FluentUI DataGrid EntityFrameworkAdapter Package\nDESCRIPTION: Command to install the Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter NuGet package using the .NET CLI. This package is required to enable EF Core integration with FluentDataGrid.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.EntityFrameworkAdapter/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.DataGrid.EntityFrameworkAdapter\n```\n\n----------------------------------------\n\nTITLE: Importing Icons Namespace in Blazor\nDESCRIPTION: Using directive to import the Icons namespace in a Blazor _Imports.razor file for easier access to icon components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI Namespace for Icons in Blazor\nDESCRIPTION: Razor directive to import the Microsoft.Fast.Components.FluentUI namespace in the _Imports.razor file. This import is required to use FluentUI components including icons.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/ProjectSetup.md#2025-04-20_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@using Microsoft.Fast.Components.FluentUI\n```\n\n----------------------------------------\n\nTITLE: Binding FluentDataGrid to EF Core DbSet in Blazor\nDESCRIPTION: Basic example showing how to inject an EF Core database context and bind its DbSet property to a FluentDataGrid component. This allows displaying database table data directly in the grid.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.EntityFrameworkAdapter/README.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@inject ApplicationDbContext MyDbContext\n\n<FluentDataGrid Items=\"@MyDbContext.People\">\n    ...\n</FluentDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Creating a Fluent Blazor Web App Project\nDESCRIPTION: Command to create a new Fluent Blazor Web App project using the 'fluentblazor' template, where you specify your desired project name.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/Templates.md#2025-04-20_snippet_1\n\nLANGUAGE: cshtml\nCODE:\n```\ndotnet new fluentblazor -o {your project name}\n```\n\n----------------------------------------\n\nTITLE: Using FluentEmoji Component in Blazor\nDESCRIPTION: Example of using the FluentEmoji component to display an 'Artist' emoji in a Blazor component.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_8\n\nLANGUAGE: razor\nCODE:\n```\n<FluentEmoji Value=\"@(new Emojis.PeopleBody.Color.Default.Artist())\" />\n```\n\n----------------------------------------\n\nTITLE: Registering the OData Adapter Service in Program.cs\nDESCRIPTION: Code required in the Program.cs file to register the DataGrid OData adapter with the dependency injection container. This enables the FluentDataGrid to work with OData queries.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.ODataAdapter/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddDataGridODataAdapter();\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Emoji Component in Blazor\nDESCRIPTION: Example of using a Fluent UI Emoji component in a Blazor component, demonstrating the component syntax and emoji selection.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Emojis/README.md#2025-04-20_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n<FluentSystemEmoji Emoji=\"@(Emojis.PeopleBody.Color.Default.Artist)\" />\n```\n\n----------------------------------------\n\nTITLE: Using FluentIcon Component in Blazor\nDESCRIPTION: Example of using the FluentIcon component to display a 'Save' icon in a Blazor component.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_3\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(new Icons.Regular.Size24.Save())\" />\n```\n\n----------------------------------------\n\nTITLE: Using DataServiceContext with FluentDataGrid in Blazor\nDESCRIPTION: Basic example showing how to bind an OData DataServiceContext to a FluentDataGrid component. This snippet demonstrates supplying a DataServiceQuery directly to the grid's Items parameter.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.ODataAdapter/README.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n@inject DataServiceContext MyServiceContext\n\n<FluentDataGrid Items=\"@MyServiceContext.People\">\n    ...\n</FluentDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Setting FillColor for Layer Context in C#\nDESCRIPTION: Shows how to set the FillColor Design Token to define layer context. This example sets it to NeutralLayer2 for a lower container beneath a Card or Accordion.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/DesignTokens.md#2025-04-20_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nFillColor: Set to NeutralLayer2 for a 'lower' container, like beneath a Card or Accordion.\n```\n\n----------------------------------------\n\nTITLE: Using FluentIcon Component with Regular Icon in Blazor\nDESCRIPTION: Example of using the FluentIcon component with a predefined icon from the Regular variant in Size24. The naming pattern follows Icons.[IconVariant].[IconSize].[IconName].\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/ProjectSetup.md#2025-04-20_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(new @(Icons.Regular.Size24.Save)())\" />\n```\n\n----------------------------------------\n\nTITLE: Registering FluentUI Components in Program.cs\nDESCRIPTION: C# code to register FluentUI components in a Blazor application's Program.cs file. Uses a source-generated configuration to ensure settings remain in sync with the project file.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nLibraryConfiguration config = new(ConfigurationGenerator.GetIconConfiguration(), ConfigurationGenerator.GetEmojiConfiguration());\nbuilder.Services.AddFluentUIComponents(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring EntityFrameworkAdapter in Program.cs\nDESCRIPTION: Code snippet to add the DataGridEntityFrameworkAdapter service to the dependency injection container in the Program.cs file. This should be placed after the FluentUIComponents are added to the services.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddDataGridEntityFrameworkAdapter();\n```\n\n----------------------------------------\n\nTITLE: Using Fluent UI Icon Component with Built-in Icon\nDESCRIPTION: Example of using the FluentIcon component with a built-in icon from the Fluent UI library. The naming pattern follows Icons.[IconVariant].[IconSize].[IconName].\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Icons/README.md#2025-04-20_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Icon=\"@(Icons.Regular.Size24.Save)\" />\n```\n\n----------------------------------------\n\nTITLE: Setting BaseLayerLuminance for Dark Mode in C#\nDESCRIPTION: Demonstrates how to switch to dark mode by setting the BaseLayerLuminance Design Token. The StandardLuminance enum is used with the GetLuminanceValue() extension method to get the correct value.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/DesignTokens.md#2025-04-20_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nBaseLayerLuminance: Set to StandardLuminance.DarkMode to switch into dark mode.\n```\n\n----------------------------------------\n\nTITLE: Using Theory and InlineData for Parameterized Testing in C#\nDESCRIPTION: An example of using parameterized testing with [Theory] and [InlineData] attributes to test multiple scenarios without duplicating test logic, demonstrating how to avoid logic in tests.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Theory]\n[InlineData(\"0,0,0\", 0)]\n[InlineData(\"0,1,2\", 3)]\n[InlineData(\"1,2,3\", 6)]\npublic void Add_MultipleNumbers_ReturnsSumOfNumbers(string input, int expected)\n{\n   var stringCalculator = new StringCalculator();\n\n   var actual = stringCalculator.Add(input);\n\n   Assert.Equal(expected, actual);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Image URL as FluentIcon in Blazor\nDESCRIPTION: Demonstrates how to use a custom image URL as an icon using the FluentIcon component in Blazor.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_4\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(Icon.FromImageUrl(\"/Blazor.png\"))\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom NeutralBaseColor in C#\nDESCRIPTION: Demonstrates how to set a custom NeutralBaseColor using a SwatchRGB object created from a hex color value. This affects color recipes for layers and neutral components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/DesignTokens.md#2025-04-20_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nNeutralBaseColor: Set to SwatchRGB.from(parseColorHexRGB('#A90000')!)\n```\n\n----------------------------------------\n\nTITLE: bUnit Component Test Example\nDESCRIPTION: Example of a Blazor component unit test using bUnit, demonstrating parameter testing and markup verification.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void MyButton_Basic_Width()\n{\n    // Arrange\n    using var ctx = new Bunit.TestContext();\n\n    // Act\n    var button = ctx.RenderComponent<MyButton>(parameters =>\n    {\n        parameters.Add(p => p.Width, \"100px\")\n    });\n\n    // Assert\n    button.MarkupMatches(@\"<fluent-button appearance=\"\"neutral\"\" style=\"\"width: 100px;\"\" />\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icon in Blazor\nDESCRIPTION: Example of using a custom icon defined in the MyIcons class within a Blazor component.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_6\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(new MyIcons.SettingsEmail())\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Emojis Package with .NET CLI\nDESCRIPTION: Command to install the Microsoft.Fast.Components.FluentUI.Emojis NuGet package using the dotnet CLI. This package provides access to Fluent UI Emoji assets for use in Blazor applications.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/ProjectSetup.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.Fast.Components.FluentUI.Emojis\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Exception Handling for the EntityFrameworkAdapter\nDESCRIPTION: Advanced configuration to customize exception handling behavior in the EntityFrameworkAsyncQueryExecutor. This example shows how to ignore specific SQL exceptions during query execution by filtering based on exception class and error number.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.EntityFrameworkAdapter/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddFluentUIComponents()\n    .AddDataGridEntityFrameworkAdapter(ex => ex is SqlException sqlEx\n        && sqlEx.Errors.OfType<SqlError>().Any(e => (e.Class == 11 && e.Number == 0) || (e.Class == 16 && e.Number == 3204)));\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Reboot CSS\nDESCRIPTION: HTML link tag to include the optional Fluent UI Reboot CSS stylesheet in a Blazor application. This provides a consistent baseline for styling.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Using FluentEmoji Component in Blazor\nDESCRIPTION: Example of using the FluentEmoji component with a predefined emoji. The naming pattern follows Emojis.[EmojiGroup].[EmojiStyle].[EmojiSkintone].[EmojiName].\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/ProjectSetup.md#2025-04-20_snippet_5\n\nLANGUAGE: razor\nCODE:\n```\n<FluentEmoji Value=\"@(new Emojis.PeopleBody.Color.Default.Artist())\" />\n```\n\n----------------------------------------\n\nTITLE: Installing FluentUI DataGrid OData Adapter Package\nDESCRIPTION: Command to add the Microsoft.FluentUI.AspNetCore.Components.DataGrid.ODataAdapter package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.ODataAdapter/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.DataGrid.ODataAdapter\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Reboot Styles\nDESCRIPTION: HTML link tag to include Fluent UI Reboot styles in a Blazor application. Reboot provides a consistent baseline for building with Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Using FluentIcon Component with Custom Image URL in Blazor\nDESCRIPTION: Example of using the FluentIcon component with a custom image URL instead of a predefined icon. This approach allows using any image as an icon with a specified width.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/ProjectSetup.md#2025-04-20_snippet_3\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(Icon.FromImageUrl(\"/Blazor.png\"))\" Width=\"32px\" />\n```\n\n----------------------------------------\n\nTITLE: Release Notes - FluentUI Blazor Updates\nDESCRIPTION: Detailed changelog documenting new icons, component fixes, and general improvements across multiple versions (v4.11.5 and v4.11.4) of FluentUI Blazor.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/WHATSNEW.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Icons and Emoji\n- Update to Fluent UI System Icons 1.1.278 (changes since 1.1.273)\n\n**What's new (Name / Size(s) / Variant(s))**\n[...]\n\n## V4.11.5\n\n### General\n- \\[General] Some miscellaneous changes ([#3353](https://github.com/microsoft/fluentui-blazor/pull/3353))\n\n### Components\n- \\[Autocomplete] Fix the second unnecessary call ([#3367](https://github.com/microsoft/fluentui-blazor/pull/3367))\n- \\[Calendar] Add DisabledCheckAllDaysOfMonthYear ([#3351](https://github.com/microsoft/fluentui-blazor/pull/3351))\n- \\[DataGrid] Fix regression with `GridTemplateColumns` ([#3357](https://github.com/microsoft/fluentui-blazor/pull/3357))\n- \\[NumberField] Unsigned integer values and fixes ([#3373](https://github.com/microsoft/fluentui-blazor/pull/3373))\n- \\[Search] Fix non working datalist ([#3354](https://github.com/microsoft/fluentui-blazor/pull/3354))\n- \\[Select] Fix positioning when multiple is true ([#3380](https://github.com/microsoft/fluentui-blazor/pull/3380))\n\n### Demo site and documentation\n- \\[Demo] Fix (most) printing issues when trying to print the page ([#3370](https://github.com/microsoft/fluentui-blazor/pull/3370))\n\n\n## V4.11.4\n\n### General\n- Use latest .NET SDKs (8.0.406 / 9.0.200)\n- Update NuGet packages\n- Set `FluentComponentBase.Element` to a correct value for several elements ([#3222](https://github.com/microsoft/fluentui-blazor/pull/3222))\n```\n\n----------------------------------------\n\nTITLE: Filtering OData Results with LINQ before binding to FluentDataGrid\nDESCRIPTION: Example showing how to apply LINQ filters to an OData DataServiceQuery before passing it to the FluentDataGrid component. This demonstrates using the Where operator to filter by a specific condition.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.ODataAdapter/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n@inject DataServiceContext MyServiceContext\n\n<FluentDataGrid Items=\"@MyServiceContext.Documents.Where(d => d.CategoryId == currentCategoryId)\">\n    ...\n</FluentDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Using FluentIcon Component with Custom Image\nDESCRIPTION: Example of using the FluentIcon component with a custom image by utilizing the Icon.FromImageUrl method and setting additional properties like Width.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Icons/README.md#2025-04-20_snippet_3\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(Icon.FromImageUrl(\"/Blazor.png\"))\" Width=\"32px\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Custom NuGet Feed for Fluent UI Blazor Preview\nDESCRIPTION: Command to add the special Azure DevOps NuGet feed that hosts the latest preview builds of Fluent UI Blazor. This feed is named 'dotnet9' but contains .NET 8 compatible DLLs.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/using-latest-daily.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet nuget add source --name dotnet9 https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Right-to-Left Layout in Fluent UI Blazor\nDESCRIPTION: Razor component for configuring right-to-left layout in a Fluent UI Blazor application. This example shows how to set up a main layout for RTL languages using design tokens.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_14\n\nLANGUAGE: razor\nCODE:\n```\n@* MainRtlLayout.razor *@\n\n@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens\n@inject Direction DirectionDesignToken\n@inherits LayoutComponentBase\n...\n@Body\n...\n<FluentDesignTheme Direction=\"@Direction\" />\n@code {\n    LocalizationDirection Direction { get; set; }\n    protected override async Task OnAfterRenderAsync(bool f)\n    {\n        await base.OnAfterRenderAsync(f);\n        if(!f)\n            return;\n        await DirectionDesignToken.WithDefault(\"rtl\");\n        Direction = LocalizationDirection.RightToLeft;\n        StateHasChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fluent UI Icons Namespace to Blazor Imports\nDESCRIPTION: Razor directive to import the Fluent UI Icons namespace with an alias in the _Imports.razor file for easier access throughout the application.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Icons/README.md#2025-04-20_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons\n```\n\n----------------------------------------\n\nTITLE: Configuring FluentUI Blazor Asset Publishing in .csproj\nDESCRIPTION: XML configuration for the PropertyGroup in a .csproj file that controls which FluentUI icon and emoji assets are published with your application. Includes options for selecting specific icon sizes, variants, emoji groups, and styles.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <!-- \n        The icon component is part of the library. By default, NO icons (static assets) will be included when publishing the project. \n \n        Setting the property 'PublishFluentIconAssets' to false (default), or leaving the property out completely, will disable publishing of the \n        icon static assets (with exception of the icons that are being used by the library itself). \n\n        Setting the property 'PublishFluentIconAssets' to 'true' will enable publishing of the icon static assets. You can limit what icon assets get \n        published by specifying a set of icon sizes and a set of variants in the '<FluentIconSizes>' and '<FluentIconVariants>' properties respectively.\n\n        To determine what icons will be published, the specified options for sizes and variants are combined. Specifying sizes '10' and '16' and \n        variants 'Filled' and 'Regular' means all '10/Filled', all '10/Regular', all '16/Filled' and all '16/Regular' icons assets will be published. \n        It is not possible to specify multiple individual combinations like '10/Filled' and '16/Regular' in the same set. \n\n        When no icon size set is specified in the '<FluentIconSizes>' property, ALL sizes will be included*  \n        When no icon variant set is specified in the '<FluentIconVariants>' property, ALL variants will be included*  \n        * when publishing of icon assets is enabled \n    -->\n    <PublishFluentIconAssets>true</PublishFluentIconAssets>\n\n    <!-- \n        Specify (at least) one or more sizes from the following options (separated by ','):\n        10,12,16,20,24,28,32,48 \n        Leave out the property to have all sizes included.\n    -->\n    <FluentIconSizes>10,12,16,20,24,28,32,48</FluentIconSizes>\n\n    <!-- \n        Specify (at least) one or more variants from the following options (separated by ','):\n        Filled,Regular \n        Leave out the property to have all variants included.\n    -->\n    <FluentIconVariants>Filled,Regular</FluentIconVariants>\n\n    <!-- \n        The emoji component is part of the library. By default, NO emojis (static assets) will be included when publishing the project. \n \n        Setting the property 'PublishFluentEmoji' to false (default), or leaving the property out completely, will disable publishing of the emoji static assets. \n\n        Setting the property 'PublishFluentEmojiAssets' to 'true' will enable publishing of the emoji static assets. You can limit what emoji assets get \n        published by specifying a set of emoji groups and a set of emoji styles in the '<FluentEmojiGroups>' and '<FluentEmojiStyles>' properties respectively.\n\n        To determine what emojis will be published, the specified options for sizes and variants are combined. Specifying emoji groups 'Activities' and 'Flags' \n        and emoji styles 'Color' and 'Flat' means all 'Activities/Color', all 'Activities/Flat', all 'Flags/Color' and all 'Flags/Flat' emoji assets will be published.\n\n        It is not possible to specify multiple individual combinations like 'Activities/Color' and 'Flags/Flat' in the same published set\n\n        When no emoji group set is specified in the '<FluentEmojiGroups>' property, ALL groups will be included*  \n        When no emoji variant set is specified in the '<FluentEmojiStyles>' property, ALL styles will be included*  \n        * when publishing of emoji assets is enabled \n    -->\n    <PublishFluentEmojiAssets>true</PublishFluentEmojiAssets>\n\n    <!-- \n        Specify (at least) one or more groups from the following options (separated by ','):\n        Activities,Animals_Nature,Flags,Food_Drink,Objects,People_Body,Smileys_Emotion,Symbols,Travel_Places \n        Leave out the property to have all groups included.\n    -->\n    <FluentEmojiGroups>Activities,Animals_Nature,Flags,Food_Drink,Objects,People_Body,Smileys_Emotion,Symbols,Travel_Places</FluentEmojiGroups>\n\n    <!-- \n        Specify (at least) one or more styles from the following options (separated by ','): \n        Color,Flat,HighContrast\n        Leave out the property to have all styles included.\n    -->\n    <FluentEmojiStyles>Color,Flat,HighContrast</FluentEmojiStyles>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Updating Icon and Emoji Imports in Razor\nDESCRIPTION: Updates the import statements for FluentUI Icons and Emoji packages starting from version 4.11.0. This change is necessary due to packaging changes for icon variants and emoji categories.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew.md#2025-04-20_snippet_3\n\nLANGUAGE: razor\nCODE:\n```\n@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons;\n@* add line below only if you are using the Emoji package *@\n@using Emoji = Microsoft.FluentUI.AspNetCore.Components.Emoji\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Icons Class in C#\nDESCRIPTION: Example of creating a custom icons class in C# to define and use custom SVG icons in a Blazor application.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MyIcons\n{\n    public class SettingsEmail : Icon { public SettingsEmail() : base(\"SettingsEmail\", IconVariant.Regular, IconSize.Size20, \"<svg width=\\\"20\\\" height=\\\"19\\\" viewBox=\\\"0 0 20 19\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15.6251 2.5H4.37508L4.2214 2.50428C2.79712 2.58396 1.66675 3.76414 1.66675 5.20833V13.125L1.67103 13.2787C1.75071 14.7029 2.93089 15.8333 4.37508 15.8333H9.76425C9.91725 15.4818 10.1354 15.1606 10.4087 14.8873L10.7126 14.5833H4.37508L4.25547 14.5785C3.50601 14.5177 2.91675 13.8902 2.91675 13.125V6.97833L9.709 10.5531L9.78908 10.5883C9.95267 10.647 10.135 10.6353 10.2912 10.5531L17.0834 6.9775V9.17258C17.5072 9.14483 17.9362 9.21517 18.3334 9.38358V5.20833L18.3292 5.05465C18.2494 3.63038 17.0693 2.5 15.6251 2.5ZM4.37508 3.75H15.6251L15.7447 3.75483C16.4942 3.81568 17.0834 4.44319 17.0834 5.20833V5.565L10.0001 9.29375L2.91675 5.56583V5.20833L2.92158 5.08873C2.98242 4.33926 3.60994 3.75 4.37508 3.75ZM15.9167 10.5579L10.9979 15.4766C10.7112 15.7633 10.5077 16.1227 10.4093 16.5162L10.0279 18.0418C9.86208 18.7052 10.4631 19.3062 11.1265 19.1403L12.6521 18.7588C13.0455 18.6605 13.4048 18.4571 13.6917 18.1703L18.6103 13.2516C19.3542 12.5078 19.3542 11.3018 18.6103 10.5579C17.8665 9.814 16.6605 9.814 15.9167 10.5579Z\\\" fill=\\\"#212121\\\"/></svg>\") { } }\n}\n```\n\n----------------------------------------\n\nTITLE: Version 2.4.3 Release Notes\nDESCRIPTION: Details bug fixes for FluentIcon and FluentDataGrid, along with extensive updates to Fluent UI System Icons package from 1.1.204 to 1.1.211. Includes new and updated icons with size and variant specifications.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.4.3\n- Fix [#645](https://github.com/microsoft/fluentui-blazor/issues/645): FluentIcon sometimes  fails to render\n- Fix [#644](https://github.com/microsoft/fluentui-blazor/issues/644): FluentDataGrid column resize isseu (thanks @konvolution)\n- Update Fluent UI System Icons to 1.1.211 (from 1.1.204)\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Icons Package with .NET CLI\nDESCRIPTION: Command to install the Microsoft.Fast.Components.FluentUI.Icons NuGet package using the dotnet CLI. This package provides access to the Fluent UI System Icons for use in Blazor applications.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/ProjectSetup.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.Fast.Components.FluentUI.Icons\n```\n\n----------------------------------------\n\nTITLE: Using FluentIcon Component with New Icon Structure\nDESCRIPTION: Example of how to use the FluentIcon component with the new icon structure after upgrading to v3.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_3\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(new Icons.Regular.Size24.Save())\" />\n```\n\n----------------------------------------\n\nTITLE: FluentUI Component Updates\nDESCRIPTION: Lists component changes and bug fixes in version 3.2.1 including accessibility improvements and design token enhancements.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Design Tokens WithDefault method implemented to allow setting a default value for a token.\n- Fix [#872]: A11y issue in FluentDivider\n- Fix [#864]: A11y issue in FluentAutoComplete\n- Fix [#861]: A11y issue in FluentDataGrid EmptyContent\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Icons Package via .NET CLI\nDESCRIPTION: Command to add the Microsoft.FluentUI.AspNetCore.Components.Icons NuGet package to a Blazor project using the .NET CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Icons/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Icons\n```\n\n----------------------------------------\n\nTITLE: Rendering FluentIcon in Razor\nDESCRIPTION: Demonstrates the new format for using FluentIcon components in Razor pages. Icons are now structured as Icons.[IconVariant].[IconSize].[IconName].\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_6\n\nLANGUAGE: razor\nCODE:\n```\n<FluentIcon Value=\"@(new @(Icons.Regular.Size24.Save)())\" />\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Documentation\nDESCRIPTION: Details important breaking changes in version 4.11.0 regarding DataGrid rendering and Icons/Emoji packaging structure.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking changes and important notes\n- The `DataGrid` **now uses HTML table based rendering**. A lot of changes have been made to the structure of the rendered content and the class names used.\n- As of version 4.11.0 of our Icons and Emoji packages, we are packaging each icon variant (filled, regular, etc.) and emoji category (animals, food, etc.) in its own assembly.\n```\n\n----------------------------------------\n\nTITLE: Installing Fluent UI Icons Package for .NET\nDESCRIPTION: Command to add the Microsoft.FluentUI.AspNetCore.Components.Icons NuGet package to a .NET project for using Fluent UI System Icons.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/IconsAndEmoji.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.FluentUI.AspNetCore.Components.Icons\n```\n\n----------------------------------------\n\nTITLE: Configuring Icons and Emoji Imports in Blazor\nDESCRIPTION: Required import statements for using FluentUI Icons and Emoji packages version 4.11.0 and above. These imports are needed in the _Imports.razor file to properly reference icon variants and emoji categories that are now packaged in separate assemblies.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/WHATSNEW.md#2025-04-20_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons;\n@* add line below only if you are using the Emoji package *@\n@using Emoji = Microsoft.FluentUI.AspNetCore.Components.Emoji\n```\n\n----------------------------------------\n\nTITLE: Icons and Emoji Updates Entry\nDESCRIPTION: Documents updates to the Fluent UI System Icons including new icons, updated icons, and their available sizes and variants.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Icons and Emoji\n- Update to Fluent UI System Icons 1.1.273 (changes since 1.1.270)\n\n  **What's new (Name / Size(s) / Variant(s))**\n  - Design Ideas / 16, 20, 24, 28, 32, 48 / Color\n  - Desk Multiple / 20, 24 / Filled & Regular\n```\n\n----------------------------------------\n\nTITLE: Importing Fluent UI Emoji Namespace in Blazor\nDESCRIPTION: Using directive to import the Fluent UI Emoji namespace in the Blazor _Imports.razor file.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/FluentUI.Emojis/README.md#2025-04-20_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@using Emoji = Microsoft.FluentUI.AspNetCore.Components.Emoji;\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Methods Namespace in C#\nDESCRIPTION: Add a using statement for the Extensions namespace in C# files where extension methods are used.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.FluentUI.AspNetCore.Components.Extensions;\n```\n\n----------------------------------------\n\nTITLE: Icon Library Updates in Markdown\nDESCRIPTION: Documents updates to the Fluent UI System Icons library, including new icons and modifications to existing icons with their sizes and variants.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Before410.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n**What's new (Name / Size(s) / Variant(s))**\n- Classification / 32 / Filled & Regular\n- Document Target / 20, 24, 32 / Filled & Regular\n[...truncated for brevity...]\n\n**What's updated (Name / Size(s) / Variant(s))**\n- Classification / 20, 24 / Filled & Regular\n- Emoji Add / 20 / Filled & Regular\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Rendering FluentEmoji in XML\nDESCRIPTION: Shows the updated syntax for FluentEmoji components. Emojis are structured as Emojis.[EmojiGroup].[EmojiStyle].[EmojiSkintone].[EmojiName].\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<FluentEmoji Value=\"@(new Emojis.PeopleBody.Color.Default.Artist())\" />\n```\n\n----------------------------------------\n\nTITLE: Removing Icon and Emoji Configuration from Project File\nDESCRIPTION: Remove the PropertyGroup that configures icon and emoji assets from the .csproj file when upgrading to v3.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n\t<PublishFluentIconAssets>true</PublishFluentIconAssets>\n\t<FluentIconSizes>10,12,16,20,24,28,32,48</FluentIconSizes>\n\t<FluentIconVariants>Filled,Regular</FluentIconVariants>\n\t<PublishFluentEmojiAssets>true</PublishFluentEmojiAssets>\n\t<FluentEmojiGroups>Activities,Animals_Nature,Flags,Food_Drink,Objects,People_Body,Smileys_Emotion,Symbols,Travel_Places</FluentEmojiGroups>\n\t<FluentEmojiStyles>Color,Flat,HighContrast</FluentEmojiStyles>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Component Updates Changelog in Markdown\nDESCRIPTION: Lists major component updates including new features and enhancements to existing components like Accordion, AppBarItem, Button, and more. Also includes documentation and demo site updates.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Before410.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Components\n- [Accordion] Add expanded value to custom event handler (#1689)\n- [AppBarItem] Add OnClick event callback (#1698)\n- [Button] Avoid padding on loading spinner when no text is shown (#1714)\n- [InputFile] Replace OnInitializedAsync with OnAfterRenderAsync (#1661)\n- [KeyCode] Allow content to avoid using the Anchor property (#1743)\n- [KeyCodeProvider] Add a global service to capture keystrokes (#1740)\n- [MenuButton] Make the menu anchored to the button so can float (#1676)\n- [Pagination] Add Disabled parameter (#1713)\n- [Persona] Manage the empty Name (#1710)\n- [ProfileMenu] Add a new FluentProfileMenu (#1705)\n- [PullToRefresh] Add a new FluentPullToRefresh (#1679)\n- [Wizard] Add the ability to automatically validate an EditForm (#1663)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Methods Namespace in Razor\nDESCRIPTION: Add a using statement for the Extensions namespace in _Imports.razor file to fix conflicts with extension methods.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@using Microsoft.FluentUI.AspNetCore.Components.Extensions\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Script for Blazor Hybrid\nDESCRIPTION: HTML script tags to include the necessary Fluent UI scripts for Blazor Hybrid applications (MAUI/WPF/Windows Forms). This is a temporary workaround for .NET 8.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/README.md#2025-04-20_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script app-name=\"{NAME OF YOUR APP}\" src=\"./_content/Microsoft.FluentUI.AspNetCore.Components/js/initializersLoader.webview.js\"></script>\n<script src=\"_framework/blazor.webview.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Demo Component Files\nDESCRIPTION: New or updated Razor component files added in V2.3.1 for number field and search functionality.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nNumberFieldDefault.razor\nSearchInteractiveWithDebounce.razor\n```\n\n----------------------------------------\n\nTITLE: Implementing the Arrange-Act-Assert Pattern in C# Unit Tests\nDESCRIPTION: A unit test example demonstrating the Arrange-Act-Assert pattern, where the test is clearly structured into three distinct sections for better readability and maintenance.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void Add_EmptyString_ReturnsZero()\n{\n   // Arrange\n   var stringCalculator = new StringCalculator();\n\n   // Act\n   var actual = stringCalculator.Add(\"\");\n\n   // Assert\n   Assert.Equal(0, actual);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HttpClient for Blazor Server\nDESCRIPTION: C# code to register a default HttpClient in a Blazor Server application. This should be done before adding Fluent UI components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddHttpClient();\n```\n\n----------------------------------------\n\nTITLE: Version 2.4.2 Release Notes\nDESCRIPTION: Contains fixes for TextArea rows attribute and Divider vertical orientation issues.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## V2.4.2\n- Fix [#72](https://github.com/microsoft/fluentui-blazor/pull/72): rows attribute in TextArea.\n- Fix [#466](https://github.com/microsoft/fluentui-blazor/pull/466): Divider vertical orientation.\n```\n\n----------------------------------------\n\nTITLE: Including Fluent UI Script for Blazor Hybrid\nDESCRIPTION: HTML script tags to include necessary Fluent UI scripts for Blazor Hybrid applications (MAUI/WPF/Windows Forms). This is a temporary workaround for WebView issues.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/CodeSetup.md#2025-04-20_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script app-name=\"{NAME OF YOUR APP}\" src=\"./_content/Microsoft.FluentUI.AspNetCore.Components/js/initializersLoader.webview.js\"></script>\n<script src=\"_framework/blazor.webview.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Filtering EF Core Data with LINQ Before Binding to FluentDataGrid\nDESCRIPTION: Example demonstrating how to use LINQ operators to filter EF Core data before binding it to a FluentDataGrid. This allows displaying a subset of database records based on specific criteria.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Extensions/DataGrid.EntityFrameworkAdapter/README.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@inject ApplicationDbContext MyDbContext\n\n<FluentDataGrid Items=\"@MyDbContext.Documents.Where(d => d.CategoryId == currentCategoryId)\">\n    ...\n</FluentDataGrid>\n```\n\n----------------------------------------\n\nTITLE: Building Icons for Blazor\nDESCRIPTION: Commands to clean and build FluentUI icons for Blazor integration\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run clean\n```\n\nLANGUAGE: cmd\nCODE:\n```\nnpm run buildforblazor\n```\n\n----------------------------------------\n\nTITLE: Generating Icon Assets via Command Line\nDESCRIPTION: Command to run the FluentAssetsGenerator for icon generation\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nFluentAssetsGenerator.exe --Assets=C:\\Temp\\Icons --Target=./Samples --Library=Icon\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes - FluentUI Blazor 3.0.0\nDESCRIPTION: Markdown changelog documenting the major release of FluentUI Blazor 3.0.0, featuring 26 new components and significant improvements to existing components.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## V3.0.0\n** 26 New components**\n- Header\n- Footer\n- BodyContent\n- Grid\n- Layout\n- MainLayout\n- Spacer\n- Splitter\n- Stack\n- CounterBadge\n- PresenceBadge\n- CodeEditor\n- Date & Time (Calendar, DatePicker, TimePicker)\n- Dialog\n- DragDrop\n- Highlighter\n- Label\n- MessageBox\n- Overflow\n- Overlay\n- Panel\n- Popover\n- SplashScreen\n- Toast\n```\n\n----------------------------------------\n\nTITLE: Displaying Generator Help Documentation\nDESCRIPTION: Command to show the FluentAssetsGenerator help documentation with all available parameters\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\nFluentAssetsGenerator.exe --help\n```\n\n----------------------------------------\n\nTITLE: Building the FluentUI-Blazor Project\nDESCRIPTION: Command to build the FluentUI-Blazor project after cloning the repository. This compiles the source code and ensures that everything builds correctly before making changes.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Creating FluentUI Blazor Web App\nDESCRIPTION: Command to create a new Fluent Blazor Web App project using the installed template. Replace {your project name} with desired project name.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Templates/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new fluentblazor -o {your project name}\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu on WSL2\nDESCRIPTION: Command to install Ubuntu 22.04 on Windows Subsystem for Linux 2\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nwsl --install -d Ubuntu-22.04\n```\n\n----------------------------------------\n\nTITLE: Using ToSwatch() Extension Method for Color Values in C#\nDESCRIPTION: Explains the necessity of using the ToSwatch() extension method on string color values or Swatch constructors when working with Design Tokens that accept color values.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/DesignTokens.md#2025-04-20_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nFor Design Tokens that work with a color value, you must call the ToSwatch() extension method on a string value or use one of the Swatch constructors.\n```\n\n----------------------------------------\n\nTITLE: Uninstalling FluentUI Blazor Templates\nDESCRIPTION: Command to uninstall the Microsoft FluentUI AspNetCore Templates package from both CLI and Visual Studio 2022.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Templates/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new uninstall Microsoft.FluentUI.AspNetCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Generating Emoji Assets via Command Line\nDESCRIPTION: Command to run the FluentAssetsGenerator for emoji generation\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nFluentAssetsGenerator.exe --Assets=C:\\Temp\\Emojis --Target=./Samples --Library=Emoji\n```\n\n----------------------------------------\n\nTITLE: Cloning FluentUI Emoji Repository\nDESCRIPTION: Git command to clone the official FluentUI emoji repository\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\ngit clone https://github.com/microsoft/fluentui-emoji\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Fluent UI Blazor Templates\nDESCRIPTION: Command to uninstall the Microsoft.FluentUI.AspNetCore.Templates package, removing the Fluent UI templates from both the CLI and Visual Studio 2022.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/Templates.md#2025-04-20_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\ndotnet new uninstall Microsoft.FluentUI.AspNetCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Cloning FluentUI System Icons Repository\nDESCRIPTION: Git command to clone the official FluentUI system icons repository\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ngit clone https://github.com/microsoft/fluentui-system-icons.git\n```\n\n----------------------------------------\n\nTITLE: Component Updates Documentation\nDESCRIPTION: Changelog entries for various component updates including AppBar, Autocomplete, Badge, DataGrid and other UI components across versions 4.7.2, 4.7.1, and 4.7.0.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Before410.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Components\n- [AppBar] Allow for omitting Href on AppBarItems and don't show active status when Href is null or not specified\n- [Autocomplete] Accessibility: Tab key to go to the Close Button\n- [Badge] Do not use a div (block element) in an inline element\n[...additional updates...]\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages for Code Coverage\nDESCRIPTION: Required NuGet package references for implementing code coverage in the unit tests project using Coverlet.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"coverlet.msbuild\" Version=\"3.2.0\" />\n<PackageReference Include=\"coverlet.collector\" Version=\"3.2.0\" />\n```\n\n----------------------------------------\n\nTITLE: Cloning the FluentUI-Blazor Repository via HTTPS\nDESCRIPTION: Commands to clone the FluentUI-Blazor repository using HTTPS protocol. This is the first step to get a local copy of the codebase for contributing.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/microsoft/fluentui-blazor.git\n```\n\n----------------------------------------\n\nTITLE: Component Updates Documentation in Markdown\nDESCRIPTION: Details bug fixes and enhancements for various FluentUI Blazor components including AppBar, AutoComplete, ComboBox, and others. Documents implementation changes and feature additions.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Components\n- \\[AppBar\\] Make it work in horizontal orientation as well ([#2760](https://github.com/microsoft/fluentui-blazor/pull/2760))\n- \\[AutoComplete\\] Add KeepOpen property ([#2829](https://github.com/microsoft/fluentui-blazor/pull/2829))\n```\n\n----------------------------------------\n\nTITLE: Using Helper Methods Instead of Setup/Teardown in C# Tests\nDESCRIPTION: An example showing how to use helper methods instead of constructor or Setup/Teardown attributes to create test dependencies, which improves test readability and reduces state sharing between tests.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Bad\n// public StringCalculatorTests()\n// {\n//    stringCalculator = new StringCalculator();\n// }\n\n[Fact]\npublic void Add_TwoNumbers_ReturnsSumOfNumbers()\n{\n   var stringCalculator = CreateDefaultStringCalculator();\n\n   var actual = stringCalculator.Add(\"0,1\");\n\n   Assert.Equal(1, actual);\n}\n\nprivate StringCalculator CreateDefaultStringCalculator()\n{\n   return new StringCalculator();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Security-Policy in web.config for iframe embedding in FluentUI Blazor\nDESCRIPTION: This code snippet shows how to modify the web.config file to allow external sites to embed the Assets Explorer in an iframe. It removes the X-Frame-Options header and adds a Content-Security-Policy header with specific frame-ancestors directives.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/AssetExplorer/ReadMe..md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n...\n<system.webServer>\n  <httpProtocol>\n    <customHeaders>\n      <remove name=\"X-Frame-Options\" />\n      <add name=\"Content-Security-Policy\" value=\"frame-ancestors 'self' https://localhost:7026 https://localhost:7062 https://fluentui-blazor.net https://www.fluentui-blazor.net\" />\n    </customHeaders>\n  </httpProtocol>\n</system.webServer>\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Global Tools for Coverage Analysis\nDESCRIPTION: Commands for installing Coverlet and ReportGenerator tools globally using dotnet CLI.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool install --global coverlet.console --version 3.2.0\ndotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.20\n```\n\n----------------------------------------\n\nTITLE: Writing a Fact Test in C# with Proper Naming Convention\nDESCRIPTION: An example of a test method that follows the naming convention where the name consists of the method being tested, the scenario under which it's being tested, and the expected behavior.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Fact]\npublic void Add_SingleNumber_ReturnsSameNumber()\n```\n\n----------------------------------------\n\nTITLE: Removing Analyzer Configuration in XML\nDESCRIPTION: Instructs to remove the DisableAnalyzers target from the project file when using the library from an RCL, as it's no longer necessary in the new version.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/UpgradeGuide.md#2025-04-20_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"DisableAnalyzers\" BeforeTargets=\"CoreCompile\">\n\t<ItemGroup>\n\t\t<Analyzer Remove=\"@(Analyzer)\" Condition=\"'%(Filename)' == 'Microsoft.Fast.Components.FluentUI.Configuration'\" />\n\t</ItemGroup>\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Cloning the FluentUI-Blazor Repository via SSH\nDESCRIPTION: Commands to clone the FluentUI-Blazor repository using SSH protocol. This alternative approach requires SSH keys to be set up with GitHub.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:microsoft/fluentui-blazor.git\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis\nDESCRIPTION: Command to execute unit tests with code coverage collection in Cobertura format.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura\n```\n\n----------------------------------------\n\nTITLE: Updating Option<TType>.Text Property in Blazor\nDESCRIPTION: Breaking change to the Option<TType>.Text property, changing its type to string?. This modification affects the FluentUI Blazor Option component.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Before410.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nOption<TType>.Text: string?\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Global Tools\nDESCRIPTION: Command to verify installed global .NET tools.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet tool list --global\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Components Script Reference\nDESCRIPTION: Example of web-components.min.js script reference that should be removed when upgrading to V2.3.0+ since the script is now included in the library directly.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"path/to/web-components.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Verified HTML Test Output\nDESCRIPTION: Example of a verified HTML file used for component rendering comparison in unit tests.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- MyToolbar_Render_TwoButtons.verified.html -->\n<div class=\"stack-horizontal\">\n    <div class=\"my-toolbar\">\n        <fluent-button appearance=\"neutral\">Button 1</fluent-button>\n        <fluent-button appearance=\"neutral\">Button 2</fluent-button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Icon Updates Documentation in Markdown\nDESCRIPTION: Lists new and updated icons in FluentUI System Icons 1.1.265, including size variants and fill styles. Documents icon additions and modifications across multiple component releases.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n**What's new (Name / Size(s) / Variant(s))**\n - Arrow Bounce / 12, 28, 48 / Filled & Regular\n - Arrow Clockwise Dashes / 28, 48 / Filled & Regular\n - Arrow Down Left / 12, 28 / Filled & Regular\n```\n\n----------------------------------------\n\nTITLE: Launch Settings Configuration for Emojis\nDESCRIPTION: JSON configuration for Visual Studio launch settings to generate emoji assets\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"profiles\": {\n    \"Microsoft.FLuentUI.AspNetCore.Components.AssetsGenerator\": {\n      \"commandName\": \"Project\",\n      \"commandLineArgs\": \"--Assets=C:/Temp/Icons --Target=./Samples --Library=Emoji\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FluentUI System Icons Update Changelog\nDESCRIPTION: Documentation of new and updated icons in Fluent UI System Icons version 1.1.242 and 1.1.239, including icon names, sizes, and variants.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Before410.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**What's new (Name / Size(s) / Variant(s))**\n- Breakout Room / 32 / Filled & Regular\n- Card UI Portrait Flip / 16, 20, 24 / Filled & Regular\n- Cursor / 28, 32 / Filled & Regular\n- Layout Row Two / 28, 48 / Filled & Regular\n[...additional icons...]\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Command to install development dependencies for the SVG icons package\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nnpm install --only=dev\n```\n\n----------------------------------------\n\nTITLE: FluentUI Icon Updates Changelog\nDESCRIPTION: Documents new and updated icons in FluentUI System Icons version 1.1.221, including size variants and filled/regular styles.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**What's new (Name / Size(s) / Variant(s))**\n- Arrow Download Off / 16, 20, 24, 28, 32, 48 / Filled & Regular\n- Border Inside / 16, 20, 24 / Filled & Regular\n- Chat Lock / 16, 20, 24, 28 / Filled & Regular\n- Error Circle / 48 / Filled & Regular\n```\n\n----------------------------------------\n\nTITLE: Copying Icons with rsync\nDESCRIPTION: Command to synchronize generated icons to a local directory\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nrsync -r -v  .  /mnt/c/Temp/Icons\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes - FluentUI Blazor 3.0.1\nDESCRIPTION: Markdown changelog detailing bug fixes and improvements in FluentUI Blazor version 3.0.1, including fixes for Visual Studio crashes, mobile device compatibility, and various component improvements.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## V3.0.1\n- Fix [#643]: Visual Studio 2022 freezes and then crashes with v3-RC-1\n- Fix [#684]: Make FluentToastContainer work better on mobile devices\n- Fix [#621]: Add area-hidden to FluentSearch clear button\n- Fix [#674]: Collapse FluentNavMenuGroup on click if no custom action/href is assigned\n- Fix [#680]: FluentTextField AutoComplete should be a string or enum and not a boolean\n- Fix [#668]: v3.0.0 IIS debugging/deployments 'Failed to load resource'\n- Fix [#677]: FluentOverflow not working correctly\n- Fix [#667]: FluentTreeItem select area when Text property is used\n- Fix [#660]: Allow FluentMessageBox Text to not show an Icon\n- Fix [#624]: v3 Unhandled exception rendering in NavMenuContent of FluentMainLayout\n- Fix [#655]: ProgressToast rendering error for WASM\n```\n\n----------------------------------------\n\nTITLE: Launch Settings Configuration for Icons\nDESCRIPTION: JSON configuration for Visual Studio launch settings to generate icon assets\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"profiles\": {\n    \"Microsoft.FluentUI.AspNetCore.Components.AssetsGenerator\": {\n      \"commandName\": \"Project\",\n      \"commandLineArgs\": \"--Assets=C:/Temp/Icons --Target=./Samples --Library=Icon\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Version 2.4.0 Release Notes\nDESCRIPTION: Introduces generic FluentSlider supporting multiple numeric types and adds Style property to FluentDesignSystemProvider.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## V2.4.0\n- The `FluentSlider` is now generic which means it also supports `double`, `float`, `decimal`, `long' and `short` values besides `int` \nvalues. An example for this has been added to the demo site\n- Add Style to `FluentDesignSystemProvider` (thanks @luohuaRain)\n- Fix missing `ColumnOptions` button in `FluentDataGrid` when column style = `Align.Center` (thanks @cupsos)\n```\n\n----------------------------------------\n\nTITLE: Installing NVM and Node.js\nDESCRIPTION: Commands to install Node Version Manager and the latest LTS version of Node.js\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Assets/Generator/ReadMe.md#2025-04-20_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash\n```\n\nLANGUAGE: cmd\nCODE:\n```\nnvm install --lts\n```\n\n----------------------------------------\n\nTITLE: Version 2.4.1 Release Notes\nDESCRIPTION: Addresses issues with PaginationState, Slider bugs, and FluentDesignSystemProvider fixes.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Archive.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## V2.4.1\n- Fix [#537](https://github.com/microsoft/fluentui-blazor/issues/537): Make SetTotalItemCountAsync in PaginationState public\n- Fix [#539](https://github.com/microsoft/fluentui-blazor/issues/539): Slider bugs\n- Fix [#528](https://github.com/microsoft/fluentui-blazor/issues/537): FluentDesignSystemProvider fixes\n```\n\n----------------------------------------\n\nTITLE: FluentUI Blazor Release Notes Markdown\nDESCRIPTION: Structured markdown documenting component updates, bug fixes, and new features across multiple releases of the FluentUI Blazor component library. Includes details about breaking changes, component modifications, and icon updates.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/WHATSNEW.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Components\n- \\[Combobox\\] Add EnableClickToClose ([#3186](https://github.com/microsoft/fluentui-blazor/pull/3186))\n- \\[Combobox\\] Fix detachIndicatorClickHandler not found ([#3239](https://github.com/microsoft/fluentui-blazor/pull/3239))\n- \\[Combobox\\] Fix loop when changing value ([#3300](https://github.com/microsoft/fluentui-blazor/pull/3300))\n[...additional content truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Component Updates Changelog Entry\nDESCRIPTION: Lists component-specific changes including fixes and new features for various FluentUI Blazor components like Combobox, DataGrid, Dialog, etc.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Components\n- \\[Combobox\\] Add EnableClickToClose ([#3186](https://github.com/microsoft/fluentui-blazor/pull/3186))\n- \\[Combobox\\] Fix detachIndicatorClickHandler not found ([#3239](https://github.com/microsoft/fluentui-blazor/pull/3239))\n- \\[DataGrid\\] Add AutoItemsPerPage parameter and handling ([#3220](https://github.com/microsoft/fluentui-blazor/pull/3220))\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured changelog entries documenting updates and fixes for multiple releases of FluentUI Blazor library. Covers component updates, documentation changes, and icon additions.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/examples/Demo/Shared/wwwroot/docs/WhatsNew-Before410.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## v4.9.3\n\n### Components\n- \\[General\\] Inject LibraryConfiguring into DesignToken (#2426)\n- \\[Accordion\\] Add Id (#2420)\n- \\[Templates\\] Replace faulty `Appearance.Filled` with `Appearance.Accent` for buttons (#2436)\n\n### Demo site and documentation\n- \\[Docs\\] Fix broken GitHub link (#2442)\n\n## v4.9.2\n### Components\n[...additional changelog content...]\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets at Runtime\nDESCRIPTION: Asynchronous method demonstrating how to load and read content from a deployed MAUI asset file using the FileSystem API and StreamReader.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Templates/templates/maui-blazor-solution/MauiApp.1/Resources/Raw/AboutAssets.txt#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n    using var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n    using var reader = new StreamReader(stream);\n\n    var contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fluent UI Blazor Projects with PowerShell\nDESCRIPTION: This PowerShell script generates a folder structure with Fluent UI Blazor projects for testing and debugging. It requires two parameters: '--interactivity' for render mode and '--auth' for authentication type.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/tests/TemplateValidation/README.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGenerateProjectsForTemplateValidation --interactivity <value> --auth <value>\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Report\nDESCRIPTION: Command to generate HTML coverage report from Cobertura XML files using ReportGenerator.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/docs/unit-tests.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nreportgenerator \"-reports:coverage.cobertura.xml\" \"-targetdir:C:\\Temp\\FluentUI\\Coverage\" -reporttypes:HtmlInline_AzurePipelines -classfilters:\"-Microsoft.FluentUI.AspNetCore.Components.DesignTokens.*\"\n```\n\n----------------------------------------\n\nTITLE: Security Policy Documentation in Markdown\nDESCRIPTION: Comprehensive documentation template detailing Microsoft's security procedures, reporting guidelines, and preferred communication methods for security vulnerabilities\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/SECURITY.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.3 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```\n\n----------------------------------------\n\nTITLE: Important Release Note for FluentMenuProvider\nDESCRIPTION: Documentation note regarding the introduction of FluentMenuProvider in version 4.10 and higher, which requires adding the provider component to applications.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/WHATSNEW.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nWith version 4.10 (and higher), we've introduced a new provider:\n`FluentMenuProvider` which corrects some menu positioning problems.\nSee [#2510](https://github.com/microsoft/fluentui-blazor/pull/2510)\n\nBy default, this provider is enabled. You must therefore add `<FluentMenuProvider />` \nto your application. See [Code Setup](https://www.fluentui-blazor.net/CodeSetup)\npage of the documentation for more information.\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset Build Action in Project File\nDESCRIPTION: MSBuild configuration that automatically handles deployment of raw assets from the Resources/Raw directory to the application package.\nSOURCE: https://github.com/microsoft/fluentui-blazor/blob/dev/src/Templates/templates/maui-blazor-solution/MauiApp.1/Resources/Raw/AboutAssets.txt#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```"
  }
]