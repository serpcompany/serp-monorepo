[
  {
    "owner": "rubenv",
    "repo": "sql-migrate",
    "content": "TITLE: Defining Up and Down SQL Migrations\nDESCRIPTION: This SQL snippet demonstrates the basic structure of a migration file, using comments to denote the 'Up' and 'Down' migration sections. The 'Up' section contains the SQL to apply the migration (creating a table), while the 'Down' section contains the SQL to roll back the migration (dropping the table). Each statement should end with a semicolon.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\n-- +migrate Up\n-- SQL in section 'Up' is executed when this migration is applied\nCREATE TABLE people (id int);\n\n\n-- +migrate Down\n-- SQL section 'Down' is executed when this migration is rolled back\nDROP TABLE people;\n```\n\n----------------------------------------\n\nTITLE: Execute migrations in Go\nDESCRIPTION: Demonstrates how to execute migrations using the `migrate.Exec` function, specifying the database connection, dialect, migration source, and direction (Up).\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ndb, err := sql.Open(\"sqlite3\", filename)\nif err != nil {\n    // Handle errors!\n}\n\nn, err := migrate.Exec(db, \"sqlite3\", migrations, migrate.Up)\nif err != nil {\n    // Handle errors!\n}\nfmt.Printf(\"Applied %d migrations!\\n\", n)\n```\n\n----------------------------------------\n\nTITLE: Using sql-migrate with sqlx in Go\nDESCRIPTION: This Go snippet illustrates how to use the sql-migrate library in conjunction with the sqlx library.  It extracts the underlying `sql.DB` from the `*sqlx.DB` instance and passes it to the `migrate.Exec` function. This allows you to leverage sqlx's convenience features while still using sql-migrate for database migrations.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nn, err := migrate.Exec(db.DB, \"sqlite3\", migrations, migrate.Up)\n                    //   ^^^ <-- Here db is a *sqlx.DB, the db.DB field is the plain sql.DB\nif err != nil {\n    // Handle errors!\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Complex SQL Statements with Boundaries\nDESCRIPTION: This SQL snippet shows how to handle complex SQL statements that contain semicolons, such as stored procedures or functions.  The `-- +migrate StatementBegin` and `-- +migrate StatementEnd` comments are used to indicate the start and end of a multi-statement block, allowing the migration tool to correctly parse the SQL.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\n-- +migrate Up\nCREATE TABLE people (id int);\n\n-- +migrate StatementBegin\nCREATE OR REPLACE FUNCTION do_something()\nreturns void AS $$\nDECLARE\n  create_query text;\nBEGIN\n  -- Do something here\nEND;\n$$\nlanguage plpgsql;\n-- +migrate StatementEnd\n\n-- +migrate Down\nDROP FUNCTION do_something();\nDROP TABLE people;\n```\n\n----------------------------------------\n\nTITLE: Example dbconfig.yml\nDESCRIPTION: Shows an example configuration file (`dbconfig.yml`) that specifies different environments (development and production) with database connection details (dialect, datasource, and migration directory).  The `table` setting is optional and defaults to `gorp_migrations`.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_3\n\nLANGUAGE: yml\nCODE:\n```\ndevelopment:\n  dialect: sqlite3\n  datasource: test.db\n  dir: migrations/sqlite3\n\nproduction:\n  dialect: postgres\n  datasource: dbname=myapp sslmode=disable\n  dir: migrations/postgres\n  table: migrations\n```\n\n----------------------------------------\n\nTITLE: dbconfig.yml with environment variables\nDESCRIPTION: Demonstrates how to use environment variables within the `datasource` field of the `dbconfig.yml` file using `os.ExpandEnv`. This allows for sensitive information like database credentials to be kept out of the configuration file.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\nproduction:\n  dialect: postgres\n  datasource: host=prodhost dbname=proddb user=${DB_USER} password=${DB_PASSWORD} sslmode=require\n  dir: migrations\n  table: migrations\n```\n\n----------------------------------------\n\nTITLE: File-Based Migration Source in Go\nDESCRIPTION: Illustrates how to read migrations from a folder using `migrate.FileMigrationSource`.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// OR: Read migrations from a folder:\nmigrations := &migrate.FileMigrationSource{\n    Dir: \"db/migrations\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Migrations with `EmbedFileSystemMigrationSource` in Go\nDESCRIPTION: This Go snippet demonstrates how to use the `EmbedFileSystemMigrationSource` to access embedded migration files. It creates a `migrate.EmbedFileSystemMigrationSource` instance, passing in the embedded file system (`dbMigrations`) and the root directory for the migrations (`migrations`). This allows the migration tool to find and execute the embedded SQL migrations.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nmigrations := migrate.EmbedFileSystemMigrationSource{\n\tFileSystem: dbMigrations,\n\tRoot:       \"migrations\",\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Migrations with `embed` Package in Go\nDESCRIPTION: This Go snippet shows how to use the `embed` package to embed migration files within a Go application.  The `//go:embed migrations/*` directive tells the Go compiler to include all files in the `migrations` directory into the `dbMigrations` variable, which is of type `embed.FS`. Requires Go 1.16 or later.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nimport \"embed\"\n\n//go:embed migrations/*\nvar dbMigrations embed.FS\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Migration Source in Go\nDESCRIPTION: This Go snippet defines the `MigrationSource` interface, which allows for the creation of custom migration sources.  Implementations of this interface must provide a `FindMigrations` method that returns a slice of `Migration` structs, representing the available migrations.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\ntype MigrationSource interface {\n    FindMigrations() ([]*Migration, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Migrations with `http.FileSystem` in Go\nDESCRIPTION: This Go snippet demonstrates using a library that implements `http.FileSystem` to provide migration files. It creates a `migrate.HttpFileSystemMigrationSource` instance, passing in the `httpFS` filesystem. This enables the migration tool to locate and apply SQL migrations served via an `http.FileSystem` implementation.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nmigrationSource := &migrate.HttpFileSystemMigrationSource{\n    FileSystem: httpFS,\n}\n```\n\n----------------------------------------\n\nTITLE: Running SQL Migrations Outside of a Transaction\nDESCRIPTION: This SQL snippet illustrates how to execute a migration command outside of a transaction using the `notransaction` option. This is necessary for certain SQL commands, such as creating an index concurrently in PostgreSQL. The `-- +migrate Up notransaction` comment indicates that the 'Up' migration should be run without a transaction.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\n-- +migrate Up notransaction\nCREATE UNIQUE INDEX CONCURRENTLY people_unique_id_idx ON people (id);\n\n-- +migrate Down\nDROP INDEX people_unique_id_idx;\n```\n\n----------------------------------------\n\nTITLE: MySQL Datasource Example\nDESCRIPTION: Illustrates the correct `datasource` format for MySQL, including the `?parseTime=true` parameter to enable time parsing.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nproduction:\n  dialect: mysql\n  datasource: root@/dbname?parseTime=true\n  dir: migrations/mysql\n  table: migrations\n```\n\n----------------------------------------\n\nTITLE: In-Memory Migration Source in Go\nDESCRIPTION: Demonstrates how to create an in-memory migration source using `migrate.MemoryMigrationSource` with hardcoded SQL migration scripts.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Hardcoded strings in memory:\nmigrations := &migrate.MemoryMigrationSource{\n    Migrations: []*migrate.Migration{\n        &migrate.Migration{\n            Id:   \"123\",\n            Up:   []string{\"CREATE TABLE people (id int)\"},\n            Down: []string{\"DROP TABLE people\"},\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: HttpFileSystem Migration Source in Go\nDESCRIPTION: Shows how to use migrations from a `http.FileSystem`, using `migrate.HttpFileSystemMigrationSource`.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// OR: Read migrations from a `http.FileSystem`\nmigrationSource := &migrate.HttpFileSystemMigrationSource{\n    FileSystem: httpFS,\n}\n```\n\n----------------------------------------\n\nTITLE: Install sql-migrate via go install (Go 1.18+)\nDESCRIPTION: Installs the sql-migrate library and command-line program using the `go install` command for Go versions 1.18 and later.  This command retrieves the sql-migrate package and its dependencies, making it available for use in Go projects.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/rubenv/sql-migrate/...@latest\n```\n\n----------------------------------------\n\nTITLE: Install sql-migrate via go get\nDESCRIPTION: Installs the sql-migrate library and command-line program using the `go get` command. This command retrieves the sql-migrate package and its dependencies, making it available for use in Go projects.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -v github.com/rubenv/sql-migrate/...\n```\n\n----------------------------------------\n\nTITLE: Install sql-migrate with Oracle (oci8) support\nDESCRIPTION: Shows how to install the sql-migrate tool with Oracle (oci8) support using the `go get` command with the `-tags oracle` flag.  oci8 requires Oracle Office Client (Instant Client).\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngo get -tags oracle -v github.com/rubenv/sql-migrate/...\n```\n\n----------------------------------------\n\nTITLE: Install sql-migrate with Oracle (godror) support\nDESCRIPTION: Shows how to install the sql-migrate tool with Oracle (godror) support using the `go get` command with the `-tags godror` flag. This also requires configuring environment variables such as `LD_LIBRARY_PATH` and downloading Oracle Office Client.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngo get -tags godror -v github.com/rubenv/sql-migrate/...\n```\n\n----------------------------------------\n\nTITLE: Run test integration script\nDESCRIPTION: Demonstrates how to run a test integration script (e.g., `mysql-env.sh`) to set up and test migrations with different database configurations. The user needs to be in the project root directory to execute this command.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Run mysql-env.sh example (you need to be in the project root directory)\n\n./test-integration/mysql-env.sh\n```\n\n----------------------------------------\n\nTITLE: sql-migrate command-line help\nDESCRIPTION: Displays the help message for the sql-migrate command-line tool, showing available commands such as `down`, `new`, `redo`, `status`, and `up`.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sql-migrate --help\nusage: sql-migrate [--version] [--help] <command> [<args>]\n\nAvailable commands are:\n    down      Undo a database migration\n    new       Create a new migration\n    redo      Reapply the last migration\n    status    Show migration status\n    up        Migrates the database to the most recent version available\n```\n\n----------------------------------------\n\nTITLE: sql-migrate up --help\nDESCRIPTION: Displays the help message for the `sql-migrate up` command, showing available options such as `-config`, `-env`, `-limit`, `-version`, and `-dryrun`.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sql-migrate up --help\nUsage: sql-migrate up [options] ...\n\n  Migrates the database to the most recent version available.\n\nOptions:\n\n  -config=dbconfig.yml   Configuration file to use.\n  -env=\"development\"     Environment.\n  -limit=0               Limit the number of migrations (0 = unlimited).\n  -version               Run migrate up to a specific version, eg: the version number of migration 1_initial.sql is 1.\n  -dryrun                Don't apply migrations, just print them.\n```\n\n----------------------------------------\n\nTITLE: sql-migrate status example\nDESCRIPTION: Shows the output of the `sql-migrate status` command, displaying the migration status (applied or not) for each migration file.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sql-migrate status\n+---------------+-----------------------------------------+\n|   MIGRATION   |                 APPLIED                 |\n+---------------+-----------------------------------------+\n| 1_initial.sql | 2014-09-13 08:19:06.788354925 +0000 UTC |\n| 2_record.sql  | no                                      |\n+---------------+-----------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Import sql-migrate in Go code\nDESCRIPTION: Illustrates how to import the sql-migrate library into a Go application.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/rubenv/sql-migrate\"\n```\n\n----------------------------------------\n\nTITLE: Oracle (oci8) dbconfig.yml example\nDESCRIPTION: Demonstrates the configuration for connecting to an Oracle database using the `oci8` dialect.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_10\n\nLANGUAGE: yml\nCODE:\n```\ndevelopment:\n  dialect: oci8\n  datasource: user/password@localhost:1521/sid\n  dir: migrations/oracle\n  table: migrations\n```\n\n----------------------------------------\n\nTITLE: Oracle (godror) dbconfig.yml example\nDESCRIPTION: Demonstrates the configuration for connecting to an Oracle database using the `godror` dialect.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\ndevelopment:\n  dialect: godror\n  datasource: user/password@localhost:1521/sid\n  dir: migrations/oracle\n  table: migrations\n```\n\n----------------------------------------\n\nTITLE: Download Oracle Instant Client (godror example)\nDESCRIPTION: Example of downloading Oracle Instant Client for macOS, used as a prerequisite for Oracle (godror) support.\nSOURCE: https://github.com/rubenv/sql-migrate/blob/master/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nwget https://download.oracle.com/otn_software/mac/instantclient/193000/instantclient-basic-macos.x64-19.3.0.0.0dbru.zip\n```"
  }
]