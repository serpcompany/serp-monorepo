[
  {
    "owner": "fastlane",
    "repo": "docs",
    "content": "TITLE: Defining a Beta Lane in Fastlane.swift\nDESCRIPTION: Example of a Swift lane definition for submitting a beta build to TestFlight. This lane handles code signing synchronization, app building, and TestFlight upload.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc betaLane() {\n    desc(\"Submit a new Beta Build to Apple TestFlight. This will also make sure the profile is up to date\")\n\n    syncCodeSigning(gitUrl: \"URL/for/your/git/repo\", appIdentifier: [appIdentifier], username: appleID)\n    // Build your app - more options available\n    buildIosApp(scheme: \"SchemeName\")\n    uploadToTestflight(username: appleID)\n    // You can also use other beta testing services here (run `fastlane actions`)\n}\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests with Advanced Configuration\nDESCRIPTION: Extended configuration for running iOS tests with additional parameters including workspace and specific test devices.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/running-tests.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane :tests do\n  run_tests(workspace: \"Example.xcworkspace\",\n            devices: [\"iPhone 6s\", \"iPad Air\"],\n            scheme: \"MyAppTests\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a fastlane lane for iOS CI/CD\nDESCRIPTION: A Fastfile example with a beta lane that sets up the CI environment, runs match for code signing, builds the app, and uploads it to TestFlight. The setup_ci step is crucial to create a temporary keychain and prevent build freezes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codebuild.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios do\n  lane :beta do\n    setup_ci\n    match(type: 'appstore')\n    build_app\n    upload_to_testflight(skip_waiting_for_build_processing: true)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Early Lane Termination with next\nDESCRIPTION: Demonstrates how to stop lane execution early using the next keyword\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlane :build do |options|\n  if cached_build_available?\n    UI.important 'Skipping build because a cached build is available!'\n    next # skip doing the rest of this lane\n  end\n  match\n  gym\nend\n\nprivate_lane :cached_build_available? do |options|\n  # ...\n  true\nend\n```\n\n----------------------------------------\n\nTITLE: Uploading iOS App to App Store with fastlane\nDESCRIPTION: This snippet demonstrates a complete lane for capturing screenshots, syncing code signing, building the app, and uploading it to the App Store. It also includes sending a Slack notification upon successful upload.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/appstore-deployment.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  capture_screenshots                  # generate new screenshots for the App Store\n  sync_code_signing(type: \"appstore\")  # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_app_store                  # upload your app to App Store Connect\n  slack(message: \"Successfully uploaded a new App Store build\")\nend\n```\n\n----------------------------------------\n\nTITLE: Using setup_circle_ci Action in Ruby\nDESCRIPTION: This snippet demonstrates how to use the setup_circle_ci action in a Fastfile. It sets up the keychain and match to work with CircleCI, creating a temporary keychain, switching match to readonly mode, and setting up log and test result paths.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_circle_ci.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsetup_circle_ci\n```\n\n----------------------------------------\n\nTITLE: Using Match with Custom Entitlements Templates\nDESCRIPTION: Ruby code showing how to generate profiles with custom entitlements using the template_name parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nmatch(type: \"development\",\n      template_name: \"Apple Pay Pass Suppression Development\")\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Lanes in Ruby\nDESCRIPTION: Example Fastfile configuration showing beta and release deployment lanes. Demonstrates automated tasks like incrementing build numbers, building apps, capturing screenshots, and uploading to TestFlight/App Store.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  increment_build_number\n  build_app\n  upload_to_testflight\nend\n\nlane :release do\n  capture_screenshots\n  build_app\n  upload_to_app_store       # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Committing Build Number in Fastlane\nDESCRIPTION: This Ruby code defines a Fastlane lane that increments the build number, commits the changes to version control, adds a git tag, and pushes the changes to the remote repository. It uses various Fastlane actions to manage the build process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # Ensure that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj: \"Example.xcodeproj\")\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj: \"Example.xcodeproj\")\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend\n```\n\n----------------------------------------\n\nTITLE: Automated Git Changelog Generation\nDESCRIPTION: Generating release notes automatically from git commits with filtering options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  sync_code_signing\n  build_app\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  upload_to_testflight\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Fastlane Cert and Sigh in a Lane\nDESCRIPTION: This code snippet demonstrates how to set up a 'beta' lane in a Fastfile that automatically handles certificate and provisioning profile management using cert and sigh before building the app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  get_certificates           # invokes cert\n  get_provisioning_profile   # invokes sigh\n  build_app\nend\n```\n\n----------------------------------------\n\nTITLE: Basic iOS App Building with Fastlane\nDESCRIPTION: Simple configuration to build an iOS app using the build_app action in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  build_app(scheme: \"MyApp\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Framing to Fastlane Deployment Process\nDESCRIPTION: Ruby code for a Fastfile lane that captures screenshots, frames them, and uploads to the App Store.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nlane :screenshots do\n  capture_screenshots\n  frame_screenshots(white: true)\n  upload_to_app_store\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced iOS App Building with Additional Options\nDESCRIPTION: Extended configuration for building iOS app with workspace and bitcode options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Produce Usage Example\nDESCRIPTION: Simple example of using create_app_online (produce) to create an iOS app with basic configuration options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_app_online(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  app_name: \"MyApp\",\n  language: \"English\",\n  app_version: \"1.0\",\n  sku: \"123\",\n  team_name: \"SunApps GmbH\" # Only necessary when in multiple teams.\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading an APK to Google Play with fastlane\nDESCRIPTION: A complete lane that builds an Android app and uploads it to Google Play Store. This lane uses gradle to build the app and upload_to_play_store to deploy it to all production users.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/release-deployment.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  upload_to_play_store # Uploads the APK built in the gradle step above and releases it to all production users\nend\n```\n\n----------------------------------------\n\nTITLE: Running spaceauth for manual session verification with fastlane\nDESCRIPTION: This command generates a login session for your Apple ID that can be stored in the FASTLANE_SESSION environment variable on CI systems. This allows fastlane to authenticate with Apple services without requiring interactive two-factor authentication prompts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/authentication.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane spaceauth -u user@email.com\n```\n\n----------------------------------------\n\nTITLE: Running a multi-parameter shell command in fastlane\nDESCRIPTION: Example showing how to run a git commit command with multiple parameters. This demonstrates passing multiple arguments that will be properly escaped and combined into a single shell command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sh.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsh(\"git\", \"commit\", \"-m\", \"My message\")\n```\n\n----------------------------------------\n\nTITLE: Basic CocoaPods Installation\nDESCRIPTION: Simple example of running pod install using the cocoapods action\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cocoapods.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncocoapods\n```\n\n----------------------------------------\n\nTITLE: Initializing fastlane for iOS project\nDESCRIPTION: Command to initialize fastlane in an iOS project directory. This sets up the necessary configuration files for fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/setup.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfastlane init\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for iOS project with fastlane in YAML\nDESCRIPTION: This YAML configuration sets up a GitLab CI pipeline for an iOS project using fastlane. It defines stages for unit tests and TestFlight deployment, sets environment variables, installs dependencies, and specifies the commands to run fastlane lanes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/gitlab.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - unit_tests\n  - test_flight\n\nvariables:\n  LC_ALL: \"en_US.UTF-8\"\n  LANG: \"en_US.UTF-8\"\n\nbefore_script:\n  - gem install bundler\n  - bundle install\n\nunit_tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios\n\ntest_flight_build:\n  dependencies: []\n  stage: test_flight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags:\n    - ios\n  only:\n     - /^release-.*$/\n     - master\n```\n\n----------------------------------------\n\nTITLE: Creating a Gemfile for fastlane dependency management\nDESCRIPTION: Ruby code for a Gemfile that defines the fastlane dependency. Using a Gemfile is recommended to manage the fastlane version and its dependencies.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/setup.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n----------------------------------------\n\nTITLE: Fastlane UI Helper Methods for User Interaction\nDESCRIPTION: Demonstrates the usage of the UI helper class to interact with users in a consistent manner across all fastlane tools. Includes methods for displaying messages, getting user input, handling passwords, and providing error messages.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nUI.message \"Neutral message (usually white)\"\nUI.success \"Successfully finished processing (usually green)\"\nUI.error \"Wahaha, what's going on here! (usually red)\"\nUI.important \"Make sure to use Windows (usually yellow)\"\n\nUI.header \"Inputs\" # a big box\n\nname = UI.input(\"What's your name? \")\nif UI.confirm(\"Are you '#{name}'?\")\n  UI.success \"Oh yeah\"\nelse\n  UI.error \"Whoops, invalid\"\nend\n\nUI.password(\"Your password please: \") # password inputs are hidden\n\n###### A \"Dropdown\" for the user\nproject = UI.select(\"Select your project: \", [\"Test Project\", \"Test Workspace\"])\n\nUI.success(\"Okay #{name}, you selected '#{project}'\")\n\n###### To run a command use\nFastlaneCore::CommandExecutor.execute(command: \"ls\",\n                                    print_all: true,\n                                        error: proc do |error_output|\n                                          # handle error here\n                                        end)\n\n###### or if you just want to receive a simple value use this only if the command doesn't take long\ndiff = Helper.backticks(\"git diff\")\n\n###### fastlane \"crash\" because of a user error everything that is caused by the user and is not unexpected\nUI.user_error!(\"You don't have a project in the current directory\")\n\n###### an actual crash when something unexpected happened\nUI.crash!(\"Network timeout\")\n\n###### a deprecation message\nUI.deprecated(\"The '--key' parameter is deprecated\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Matchfile for Multiple Apps\nDESCRIPTION: Example Matchfile configuration for sharing certificates across multiple apps in the same team using a Git repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ngit_url(\"https://github.com/example/example-repo.git\")\ngit_branch(\"master\")\n```\n\n----------------------------------------\n\nTITLE: Prompting for Changelog in Fastlane\nDESCRIPTION: Lane that prompts the user to input a changelog during the Fastlane run, with variants for single-line or multi-line input, then uses it with Crashlytics distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(text: \"Changelog: \")\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \"Changelog: \",\n    multi_line_end_keyword: \"END\"\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots in Swift UI Tests\nDESCRIPTION: Swift code snippet showing how to set up UI tests to automatically capture screenshots using fastlane's snapshot tool. This code should be added to the setUp() method of your UI test class.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n```\n\n----------------------------------------\n\nTITLE: Basic Example of build_app with Scheme and Workspace\nDESCRIPTION: Demonstrates the simplest use of build_app with just scheme and workspace parameters specified.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n```\n\n----------------------------------------\n\nTITLE: Using Commit Count as Build Number in Fastlane\nDESCRIPTION: This Ruby code demonstrates how to use the number of commits as the build number in a Fastlane lane. It uses the 'number_of_commits' action to get the commit count and passes it to the 'increment_build_number' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  increment_build_number(build_number: number_of_commits)\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Teams with Git Branches in Ruby\nDESCRIPTION: Example of using match with multiple teams by specifying different git branches and usernames.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmatch(git_branch: \"team1\", username: \"user@team1.com\")\nmatch(git_branch: \"team2\", username: \"user@team2.com\")\n```\n\n----------------------------------------\n\nTITLE: Building iOS App with fastlane\nDESCRIPTION: This snippet demonstrates how to use the build_app action in fastlane to build an iOS app. It includes a basic example and an advanced example with additional options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/appstore-deployment.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  build_app(scheme: \"MyApp\")\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n```\n\n----------------------------------------\n\nTITLE: Registering New Devices with Match\nDESCRIPTION: Ruby code for a fastlane lane that registers new devices and updates provisioning profiles automatically.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  register_devices(devices_file: \"./devices.txt\")\n  match(type: \"adhoc\", force_for_new_devices: true)\nend\n```\n\n----------------------------------------\n\nTITLE: Syncing Code Signing for App Store\nDESCRIPTION: Ruby code example showing how to sync code signing certificates and profiles for App Store distribution using match (sync_code_signing).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nsync_code_signing(type: \"appstore\", app_identifier: \"tools.fastlane.app\")\n```\n\n----------------------------------------\n\nTITLE: Basic TestFlight Upload in Ruby\nDESCRIPTION: Simple examples of using the upload_to_testflight command and its aliases (testflight and pilot)\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntestflight # alias for \"upload_to_testflight\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\npilot # alias for \"upload_to_testflight\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest TestFlight Build Number for Specific Version in Ruby\nDESCRIPTION: This snippet demonstrates how to use the latest_testflight_build_number action to retrieve the most recent build number for a specific version of an app in TestFlight. It takes a version number as a parameter and returns an integer representing the latest build number.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/latest_testflight_build_number.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlatest_testflight_build_number(version: \"1.3\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastlane in a Project\nDESCRIPTION: Command to initialize Fastlane within a project directory, which creates the necessary configuration files for automating iOS or Android deployment workflows.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/setup-fastlane-header.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane init\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Lane in Ruby Fastfile\nDESCRIPTION: Shows how to define a basic lane in a Fastfile. Lanes are the fundamental building blocks of fastlane automation workflows.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :my_lane do\n  # Whatever actions you like go in here.\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Android App Build with Gradle in Ruby\nDESCRIPTION: Basic example of using the gradle task to assemble an Android app with a specific flavor and build type.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"assemble\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running build_app as a One-off Command\nDESCRIPTION: Basic CLI command to run the build_app action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run build_app\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload Configuration\nDESCRIPTION: Complete lane configuration for building and uploading to TestFlight with code signing and notifications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  sync_code_signing(type: \"appstore\")    # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_testflight\n  slack(message: \"Successfully distributed a new beta build\")\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Screenshot Capture Lane in Fastfile\nDESCRIPTION: Simple Ruby code for a Fastfile lane that captures screenshots using snapshot.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nlane :screenshots do\n  capture_screenshots\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring buildspec.yml for AWS CodeBuild\nDESCRIPTION: A buildspec.yml file that configures the AWS CodeBuild environment, including secret management for match password and fastlane session. It installs the required gems and runs the fastlane beta lane during the build phase.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codebuild.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.2\n\nenv:\n  secrets-manager:\n    MATCH_PASSWORD: <secret-id>:<json-key>:<version-stage>:<version-id>\n    FASTLANE_SESSION: <secret-id>:<json-key>:<version-stage>:<version-id>\n\nphases:\n  install:\n    commands:\n      - bundle install\n  build:\n    commands:\n      - bundle exec fastlane beta\n```\n\n----------------------------------------\n\nTITLE: Using scan with Multiple Devices in a Fastfile\nDESCRIPTION: An example of how to configure scan in a Fastfile to run tests on multiple devices in one command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nscan(\n  workspace: \"Example.xcworkspace\",\n  devices: [\"iPhone 6s\", \"iPad Air\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing after_all Block in Fastfile\nDESCRIPTION: Shows the after_all block that executes after successful lane completion, including Slack notifications and shell script execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nafter_all do |lane|\n  say(\"Successfully finished deployment (#{lane})!\")\n  slack(\n    message: \"Successfully submitted new App Update\"\n  )\n  sh(\"./send_screenshots_to_team.sh\") # Example\nend\n```\n\n----------------------------------------\n\nTITLE: Gradual rollout deployment to Google Play with fastlane\nDESCRIPTION: A lane configuration that demonstrates how to perform a staged rollout of an Android app to the Google Play Store. This example sets up a 50% rollout to users on the rollout track.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/release-deployment.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlane :playstore do\n  # ...\n  upload_to_play_store(\n  \ttrack: 'rollout',\n  \trollout: '0.5'\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Submitting a Build for Review in Fastfile Ruby Script\nDESCRIPTION: Defines a lane in a Fastfile to submit a build for review with specific options. It includes automatic release, skips metadata and screenshots upload, and forces the submission without HTML report verification.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nlane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Using Match in a Fastlane Beta Release Lane\nDESCRIPTION: Ruby code for a fastlane lane that uses match in read-only mode on CI systems before building with gym.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  match(type: \"appstore\", readonly: is_ci)\n\n  gym(scheme: \"Release\")\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation for upload_to_play_store Action in Terminal\nDESCRIPTION: Shows how to display the documentation for the upload_to_play_store action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action upload_to_play_store\n```\n\n----------------------------------------\n\nTITLE: Execute Gym Action via CLI\nDESCRIPTION: Commands to run the gym action directly from the command line, including examples of parameter passing\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run gym\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run gym parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Firebase App Distribution with Fastlane\nDESCRIPTION: Fastlane lane that builds an Android app and distributes it to testers via Firebase App Distribution, specifying the app ID and target testing groups.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  firebase_app_distribution(\n    app: \"1:123456789:android:abcd1234\",\n    groups: \"qa-team, trusted-testers\"\n  )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using API Key JSON File in Ruby Lane\nDESCRIPTION: Example showing how to reference an API key JSON file in a fastlane lane for pilot distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/app-store-connect-api.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  pilot( api_key_path: \"fastlane/D383SF739.json\" )\nend\n```\n\n----------------------------------------\n\nTITLE: Getting upload_to_play_store Action Parameters\nDESCRIPTION: Command to view all available options for the upload_to_play_store action in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action upload_to_play_store\n```\n\n----------------------------------------\n\nTITLE: Example of Shell Command Action\nDESCRIPTION: Shows the built-in shell command utility that can be safely used within custom actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nsh\n```\n\n----------------------------------------\n\nTITLE: Deliver with Parameters in Fastfile\nDESCRIPTION: Implementation of deliver with additional parameters in a Fastfile, including submission for review and forcing execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndeliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Android Apps with Gradle in fastlane\nDESCRIPTION: A basic lane configuration that uses Gradle to build an Android app in Release mode. This snippet demonstrates how to set up a lane called 'playstore' that builds the app using the 'assemble' task.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/release-deployment.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying iOS Build Resources with Fastlane in Ruby\nDESCRIPTION: Example of using the verify_build action in Fastlane to check if an iOS app was built with the expected distribution provisioning profile and bundle identifier. This helps prevent configuration mistakes when building on shared machines.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_build.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nverify_build(\n  provisioning_type: \"distribution\",\n  bundle_identifier: \"com.example.myapp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Build Number with fastlane\nDESCRIPTION: This snippet demonstrates how to use the increment_build_number action in fastlane to automatically increment the build number based on the latest build number from App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/appstore-deployment.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  increment_build_number(\n    build_number: app_store_build_number + 1,\n    xcodeproj: \"Example.xcodeproj\"\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Installing fastlane via Homebrew\nDESCRIPTION: Command to install fastlane using Homebrew package manager on macOS. This method automatically handles Ruby version requirements.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/installing-fastlane.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install fastlane\n```\n\n----------------------------------------\n\nTITLE: Integrating Gym in a Fastlane Workflow\nDESCRIPTION: Example of integrating gym into a Fastlane workflow for a beta deployment, including error handling with Slack notifications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s,\n    success: false,\n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s }\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Submitting a Build for Review in Ruby with Fastlane\nDESCRIPTION: Demonstrates how to submit a previously uploaded build for review using the deliver action in a Fastfile. It specifies the build number, enables automatic release, and skips certain steps for efficiency.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nlane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Travis compatibility in fastlane Fastfile\nDESCRIPTION: This Ruby snippet adds Travis CI compatibility to your fastlane setup. The 'setup_travis' action configures the keychain to work properly with match and gym, and enables readonly mode for match to prevent CI from creating new certificates.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/travis.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsetup_travis\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Pull Requests with Fastlane\nDESCRIPTION: This code snippet demonstrates how to use Fastlane's create_pull_request action to programmatically create a new pull request on GitHub. It shows configuration of required parameters like API token, repository, title, branches, and optional parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_pull_request.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_pull_request(\n  api_token: \"secret\",      # optional, defaults to ENV[\"GITHUB_API_TOKEN\"]\n  repo: \"fastlane/fastlane\",\n  title: \"Amazing new feature\",\n  head: \"my-feature\",       # optional, defaults to current branch name\n  base: \"master\", # optional, defaults to \"master\"\n  body: \"Please pull this in!\",       # optional\n  api_url: \"http://yourdomain/api/v3\" # optional, for GitHub Enterprise, defaults to \"https://api.github.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Xcodebuild Command Used by Gym Internally\nDESCRIPTION: The actual xcodebuild command that gym uses internally to build the application archive, showing the underlying implementation details.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nset -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Google Play Store App with Fastlane\nDESCRIPTION: Example showing how to create a new app on Managed Google Play Store using Fastlane. Requires a JSON key file for authentication, developer account ID, app title, language specification in BCP 47 format, and APK file path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_on_managed_play_store.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_app_on_managed_play_store(\n  json_key: 'path/to/you/json/key/file',\n  developer_account_id: 'developer_account_id', # obtained using the `get_managed_play_store_publishing_rights` action (or looking at the Play Console url)\n  app_title: 'Your app title',\n  language: 'en_US', # primary app language in BCP 47 format\n  apk: '/files/app-release.apk'\n)\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload with Beta App Details in Ruby\nDESCRIPTION: Example demonstrating how to upload to TestFlight with beta app feedback configuration, description, and changelog\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Match in Ruby\nDESCRIPTION: Command to start using match in your project folder. This will create a Matchfile and guide you through the setup process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane match init\n```\n\n----------------------------------------\n\nTITLE: Basic Upload to Play Store Command in Ruby\nDESCRIPTION: Basic example of using the 'upload_to_play_store' method in a Ruby fastlane script to upload an Android app to the Google Play Store.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_play_store\n```\n\n----------------------------------------\n\nTITLE: Fastlane Build Pipeline with Error Handling\nDESCRIPTION: Example of integrating gym into a fastlane pipeline with Slack error notifications\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s,\n    success: false,\n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s }\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Lane with Automatic/Manual Code Signing Toggle\nDESCRIPTION: This code snippet shows how to create a release lane that temporarily disables automatic code signing for the build process and then re-enables it afterward, ensuring controlled certificate usage for release builds.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  sync_code_signing\n  disable_automatic_code_signing(path: \"my_project.xcodeproj\")\n  build_app\n  enable_automatic_code_signing(path: \"my_project.xcodeproj\")\n  upload_to_testflight\nend\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload with Changelog Options\nDESCRIPTION: Examples of uploading to TestFlight with different options like changelog and build processing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # ...\n  build_app\n\n  # Variant 1: Provide a changelog to your build\n  upload_to_testflight(changelog: \"Add rocket emoji\")\n\n  # Variant 2: Skip the \"Waiting for processing\" of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  upload_to_testflight(skip_waiting_for_build_processing: true)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Callback Parameters in Fastlane Actions\nDESCRIPTION: Shows how to define callback parameters that accept Proc objects, allowing actions to execute code blocks provided by the caller under certain conditions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :callback,\n  description: \"Optional callback argument\",\n  optional: true,\n  type: Proc\n)\n```\n\n----------------------------------------\n\nTITLE: Running ADB Shell Command in Fastlane\nDESCRIPTION: Example showing how to execute an ADB shell command using Fastlane's ADB action. This specific example runs 'ls' command on the connected Android device.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nadb(\n  command: \"shell ls\"\n)\n```\n\n----------------------------------------\n\nTITLE: API Key Configuration in JSON Format\nDESCRIPTION: JSON configuration file format for API key authentication showing required and optional fields including key_id, issuer_id, private key content, duration, and in_house flag.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/app-store-connect-api.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"key_id\": \"D383SF739\",\n  \"issuer_id\": \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n  \"key\": \"-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----\",\n  \"duration\": 1200, # optional (maximum 1200)\n  \"in_house\": false # optional but may be required if using match/sigh\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Bundle Identifier in Info.plist using Fastlane\nDESCRIPTION: Sets the CFBundleIdentifier value in Info.plist to a specified bundle identifier. This example shows how to modify a simple key-value pair in the plist file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_info_plist_value.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nset_info_plist_value(path: \"./Info.plist\", key: \"CFBundleIdentifier\", value: \"com.krausefx.app.beta\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Provisioning Profiles in Fastfile for App Store Builds\nDESCRIPTION: This snippet shows how to define a mapping of app targets to provisioning profiles in a Fastfile to ensure reproducible builds. It uses the build_app action with export_options to specify which provisioning profiles should be used for each bundle identifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/xcode-project.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  build_app(\n    export_method: \"app-store\",\n    export_options: {\n      provisioningProfiles: { \n        \"com.example.bundleid\" => \"Provisioning Profile Name\",\n        \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n      }\n    }\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Listing All TestFlight Builds\nDESCRIPTION: Command to list all active and processing builds for a specific application in TestFlight, showing version numbers, build numbers, and installation counts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot builds\n```\n\n----------------------------------------\n\nTITLE: Advanced Build App Configuration\nDESCRIPTION: Comprehensive example showing multiple build_app configuration options including output settings and SDK specification\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Provisioning Profile Generation in Ruby\nDESCRIPTION: Simple example of generating a provisioning profile using the get_provisioning_profile action\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_provisioning_profile\n```\n\n----------------------------------------\n\nTITLE: Uploading Builds to TestFlight using pilot\nDESCRIPTION: Command for uploading a new build to TestFlight. It automatically looks for an IPA file in the current directory and uploads it using the fastlane credentials.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot upload\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest permissions for screengrab\nDESCRIPTION: Required permissions to add to your src/debug/AndroidManifest.xml file to enable screen unlocking, storage access, and locale changing for screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />\n```\n\n----------------------------------------\n\nTITLE: Complete Beta Lane with Upload and Notification\nDESCRIPTION: A full Fastlane lane that builds the app with Gradle, uploads to Google Play's beta track, and sends a Slack notification upon successful distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  gradle(task: 'assemble', build_type: 'Release')\n  upload_to_play_store(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Cert with Sigh in Fastlane Ruby\nDESCRIPTION: A Fastlane lane definition that combines cert and sigh actions to handle both certificate and provisioning profile generation. The force parameter ensures the profile is regenerated on each run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cert.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  cert\n  sigh(force: true)\nend\n```\n\n----------------------------------------\n\nTITLE: Uploading App Privacy Details in Ruby using Fastlane\nDESCRIPTION: This snippet demonstrates how to use the upload_app_privacy_details_to_app_store action in Fastlane to upload app privacy details to App Store Connect. It includes the basic required parameters such as username, team name, and app identifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_app_privacy_details_to_app_store.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)\n```\n\n----------------------------------------\n\nTITLE: Incrementing Build Number Based on Latest TestFlight Build in Ruby\nDESCRIPTION: This example shows how to use the latest_testflight_build_number action in combination with increment_build_number to set the next build number. It fetches the latest build number from TestFlight, increments it by 1, and uses that as the new build number.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/latest_testflight_build_number.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_build_number({\n  build_number: latest_testflight_build_number + 1\n})\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Release with Fastlane\nDESCRIPTION: Example showing how to create a GitHub release with Fastlane, including setting the repository, API token, release name, tag, description, target branch, and uploading assets.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_github_release.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngithub_release = set_github_release(\n  repository_name: \"fastlane/fastlane\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  name: \"Super New actions\",\n  tag_name: \"v1.22.0\",\n  description: (File.read(\"changelog\") rescue \"No changelog provided\"),\n  commitish: \"master\",\n  upload_assets: [\"example_integration.ipa\", \"./pkg/built.gem\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up CircleCI configuration file\nDESCRIPTION: Creates a CircleCI config.yml file that defines the CI workflow. It specifies the macOS and Xcode versions, installs Ruby dependencies, executes fastlane, and collects artifacts and test results.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/circle-ci.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# .circleci/config.yml\n\nversion: 2.1\n\norbs:\n  ruby: circleci/ruby@1.2.0\n\njobs:\n  build:\n    macos:\n      xcode: \"13.1.0\"\n    working_directory: /Users/distiller/project\n    environment:\n      FL_OUTPUT_DIR: output\n      FASTLANE_LANE: test\n    shell: /bin/bash --login -o pipefail\n    steps:\n      - checkout\n      - ruby/install-deps\n      - run:\n          name: fastlane\n          command: bundle exec fastlane $FASTLANE_LANE\n      - store_artifacts:\n          path: output\n      - store_test_results:\n          path: output/scan\n```\n\n----------------------------------------\n\nTITLE: Configuring Semaphore CI Pipeline for iOS App\nDESCRIPTION: This YAML configuration defines a Semaphore CI pipeline for an iOS app. It includes three blocks: running tests, building the app, and taking screenshots. Each block specifies the environment, prologue commands, and jobs to be executed.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/semaphore.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.0\n\nname: Tallest Towers\n\nagent:\n  machine:\n    type: a1-standard-4\n    os_image: macos-mojave-xcode11\n\nblocks:\n  - name: Run tests\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Test\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane test\n\n  - name: Build app\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Build\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane build\n  - name: Take screenshots\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Screenshots\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane screenshots\n            - artifact push project screenshots\n```\n\n----------------------------------------\n\nTITLE: Basic Upload to Play Store Command in Ruby\nDESCRIPTION: A basic example of using the upload_to_play_store action in fastlane to upload an Android app to the Google Play Store with default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_play_store\n```\n\n----------------------------------------\n\nTITLE: Using gym Alias\nDESCRIPTION: Example showing that gym is an alias for the build_app action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ngym    # alias for \"build_app\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Precheck with Fastlane Workflow\nDESCRIPTION: Example Fastfile configuration showing how to integrate precheck into a production deployment lane and how to run it as a standalone lane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :production do\n  # ...\n\n  # by default deliver will call precheck and warn you of any problems\n  # if you want precheck to halt submitting to app review, you can pass\n  # precheck_default_rule_level: :error\n  deliver(precheck_default_rule_level: :error)\n\n  # ...\nend\n\n# or if you prefer, you can run precheck alone\nlane :check_metadata do\n  precheck\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying build_app Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the build_app action in your terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action build_app\n```\n\n----------------------------------------\n\nTITLE: Uploading IPA and Submitting for Review\nDESCRIPTION: Command to upload an IPA file and submit the app for review in App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane deliver --ipa \"App.ipa\" --submit_for_review\n```\n\n----------------------------------------\n\nTITLE: Mapping Bundle IDs to Provisioning Profiles\nDESCRIPTION: Shows how to manually map bundle identifiers to provisioning profiles when the automatic detection doesn't work properly.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  scheme: \"Release\",\n  export_method: \"app-store\",\n  export_options: {\n    provisioningProfiles: {\n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Gemfile for fastlane dependencies\nDESCRIPTION: Ruby code for a Gemfile that defines fastlane as a dependency. Using a Gemfile helps manage the fastlane version and its dependencies consistently.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/setup.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Action in Ruby for fastlane\nDESCRIPTION: This snippet shows the implementation of a custom action for fastlane. It demonstrates that the action runs in the root directory of the project, unlike the Fastfile code.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/fastlane.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef run(params)\n  puts Dir.pwd # => \"[root]\"\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Xcodebuild Documentation in Terminal\nDESCRIPTION: Command to show the complete documentation for the xcodebuild action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcodebuild.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xcodebuild\n```\n\n----------------------------------------\n\nTITLE: Incrementing Build Number Automatically in Ruby\nDESCRIPTION: Automatically increments the build number by one without specifying any parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_build_number # automatically increment by one\n```\n\n----------------------------------------\n\nTITLE: Adding Fastlane as SPM dependency\nDESCRIPTION: Swift Package Manager dependency declaration for Fastlane. This adds the Fastlane package to your Swift project.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n.package(name: \"Fastlane\", url: \"https://github.com/fastlane/fastlane\", from: \"2.179.0\")\n```\n\n----------------------------------------\n\nTITLE: Creating an App Online Using Produce in Ruby\nDESCRIPTION: This example demonstrates how to use the create_app_online method (an alias for Produce) to create an iOS app programmatically with basic configuration options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_app_online(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  app_name: \"MyApp\",\n  language: \"English\",\n  app_version: \"1.0\",\n  sku: \"123\",\n  team_name: \"SunApps GmbH\" # Only necessary when in multiple teams.\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Gym in a Fastlane Workflow\nDESCRIPTION: Example of a complete fastlane workflow that runs tests with scan, builds the app with gym, and uploads to Crashlytics, with error handling for Slack notifications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s,\n    success: false,\n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s }\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Usage in Fastfile - Ruby\nDESCRIPTION: Demonstrates setting environment variables for Crashlytics credentials and using them in a Fastlane lane, allowing for reuse of credentials across multiple actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/keys.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nENV[\"CRASHLYTICS_API_TOKEN\"] = \"123abc\"\nENV[\"CRASHLYTICS_BUILD_SECRET\"] = \"secret_key\"\n\nlane :beta do\n  crashlytics\nend\n```\n\n----------------------------------------\n\nTITLE: Google Play Beta Distribution with Fastlane\nDESCRIPTION: Fastlane lane snippet showing how to build and upload an Android app to Google Play's beta track using the upload_to_play_store action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  upload_to_play_store(track: 'beta')\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Revoking Certificates and Profiles with match nuke\nDESCRIPTION: Commands to revoke all certificates and provisioning profiles for specific environments using match nuke. This is useful for cleaning up messy Apple Developer accounts with invalid or expired certificates.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match nuke development\nfastlane match nuke distribution\nfastlane match nuke enterprise\n```\n\n----------------------------------------\n\nTITLE: Basic Test Execution with fastlane and scan\nDESCRIPTION: Demonstrates how to define a simple test lane using fastlane and scan. This example runs tests for a scheme named 'Example'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nlane :test do\n  scan(scheme: \"Example\")\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced App Building with Multiple Options\nDESCRIPTION: Comprehensive example of building an app with multiple configuration options including workspace, configuration, scheme, output settings, and SDK.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a New iOS Application with Fastlane Produce\nDESCRIPTION: The basic command to create a new iOS application on App Store Connect and Apple Developer Portal using the produce action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce\n```\n\n----------------------------------------\n\nTITLE: Running Match with Force for New Devices Option\nDESCRIPTION: Command to force match to regenerate provisioning profiles when new devices have been added.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match adhoc --force_for_new_devices\n```\n\n----------------------------------------\n\nTITLE: Creating XCFramework with Frameworks and dSYMs\nDESCRIPTION: Creates an XCFramework by combining multiple frameworks with associated dSYM files.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_xcframework.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_xcframework(frameworks_with_dsyms: {'FrameworkA.framework' => {}, 'FrameworkB.framework' => { dsyms: 'FrameworkB.framework.dSYM' } }, output: 'UniversalFramework.xcframework')\n```\n\n----------------------------------------\n\nTITLE: Advanced scan Usage with Parameters\nDESCRIPTION: An example of running scan with specific parameters to control workspace, scheme, device, and cleaning behavior.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane scan --workspace \"Example.xcworkspace\" --scheme \"AppName\" --device \"iPhone 6\" --clean\n```\n\n----------------------------------------\n\nTITLE: Manually Decrypting Fastlane Match Repo using Ruby Console\nDESCRIPTION: Provides a step-by-step guide to manually decrypt the Fastlane match repository using Ruby console. This is useful when manual edits to certificates or profiles are necessary.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'match'\ngit_url = 'https://github.com/fastlane/example-certificate-repo'\nshallow_clone = false\nENV[\"MATCH_PASSWORD\"] = 'example-password'\nbranch = 'master'\nstorage = Match::Storage.from_params({storage_mode: \"git\", git_url: git_url, shallow_clone: shallow_clone, git_branch: branch, clone_branch_directly: false})\nstorage.download\nencryption = Match::Encryption.for_storage_mode(\"git\", { git_url: git_url, working_directory: storage.working_directory})\nencryption.decrypt_files\nstorage.working_directory\n```\n\n----------------------------------------\n\nTITLE: Advanced Info.plist Processing with Custom Logic using Fastlane\nDESCRIPTION: This example shows advanced usage of the update_info_plist action. It uses a custom block to process the plist, finding a specific URL scheme and updating its value. This demonstrates how to perform more complex modifications to the Info.plist file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_info_plist.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_info_plist( # Advanced processing: find URL scheme for particular key and replace value\n  xcodeproj: \"path/to/Example.proj\",\n  plist_path: \"path/to/Info.plist\",\n  block: proc do |plist|\n    urlScheme = plist[\"CFBundleURLTypes\"].find{|scheme| scheme[\"CFBundleURLName\"] == \"com.acme.default-url-handler\"}\n    urlScheme[:CFBundleURLSchemes] = [\"acme-production\"]\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Build App Configuration\nDESCRIPTION: Detailed example showing multiple build_app configuration options including output settings and SDK specification.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Deliver Command Usage in Terminal\nDESCRIPTION: Shows how to run the deliver command in the terminal to upload app metadata from your local machine.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane deliver\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of frameit in a Fastfile\nDESCRIPTION: The simplest way to invoke the frameit action in a Fastfile, which will frame screenshots using default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots\n```\n\n----------------------------------------\n\nTITLE: Basic dSYM Download and Upload Workflow in Ruby\nDESCRIPTION: Example lane showing a complete workflow for downloading dSYMs from App Store Connect, uploading them to Crashlytics, and cleaning up build artifacts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Submission Information\nDESCRIPTION: How to set up the last step of the deployment process regarding third-party content or encryption.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nsubmission_information({\n  add_id_info_serves_ads: true,\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastlane Release Lane with Produce\nDESCRIPTION: Example Fastfile configuration showing how to use produce to create an iOS app with extensive app services configuration. The release lane automates app creation and deployment.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  produce(\n    username: 'felix@krausefx.com',\n    app_identifier: 'com.krausefx.app',\n    app_name: 'MyApp',\n    language: 'English',\n    app_version: '1.0',\n    sku: '123',\n    team_name: 'SunApps GmbH', # only necessary when in multiple teams\n    \n    # Optional\n    # App services can be enabled during app creation\n    enable_services: {\n      access_wifi: \"on\",                        # Valid values: \"on\", \"off\"\n      app_attest: \"on\",                         # Valid values: \"on\", \"off\"\n      app_group: \"on\",                          # Valid values: \"on\", \"off\"\n      apple_pay: \"on\",                          # Valid values: \"on\", \"off\"\n      associated_domains: \"on\",                 # Valid values: \"on\", \"off\"\n      auto_fill_credential: \"on\",               # Valid values: \"on\", \"off\"\n      car_play_audio_app: \"on\",                 # Valid values: \"on\", \"off\"\n      car_play_messaging_app: \"on\",             # Valid values: \"on\", \"off\"\n      car_play_navigation_app: \"on\",            # Valid values: \"on\", \"off\"\n      car_play_voip_calling_app: \"on\",          # Valid values: \"on\", \"off\"\n      class_kit: \"on\",                          # Valid values: \"on\", \"off\"\n      icloud: \"xcode5_compatible\",              # Valid values: \"xcode5_compatible\", \"xcode6_compatible\", \"off\"\n      critical_alerts: \"on\",                    # Valid values: \"on\", \"off\"\n      custom_network_protocol: \"on\",            # Valid values: \"on\", \"off\"\n      data_protection: \"complete\",              # Valid values: \"complete\", \"unlessopen\", \"untilfirstauth\", \"off\"\n      extended_virtual_address_space: \"on\",     # Valid values: \"on\", \"off\"\n      file_provider_testing_mode: \"on\",         # Valid values: \"on\", \"off\"\n      fonts: \"on\",                              # Valid values: \"on\", \"off\"\n      game_center: \"ios\",                       # Valid values: \"ios\", \"macos\", off\"\n      health_kit: \"on\",                         # Valid values: \"on\", \"off\"\n      hls_interstitial_preview: \"on\",           # Valid values: \"on\", \"off\"\n      home_kit: \"on\",                           # Valid values: \"on\", \"off\"\n      hotspot: \"on\",                            # Valid values: \"on\", \"off\"\n      hotspot_helper: \"on\",                     # Valid values: \"on\", \"off\"\n      in_app_purchase: \"on\",                    # Valid values: \"on\", \"off\"\n      inter_app_audio: \"on\",                    # Valid values: \"on\", \"off\"\n      low_latency_hls: \"on\",                    # Valid values: \"on\", \"off\"\n      managed_associated_domains: \"on\",         # Valid values: \"on\", \"off\"\n      maps: \"on\",                               # Valid values: \"on\", \"off\"\n      multipath: \"on\",                          # Valid values: \"on\", \"off\"\n      network_extension: \"on\",                  # Valid values: \"on\", \"off\"\n      nfc_tag_reading: \"on\",                    # Valid values: \"on\", \"off\"\n      passbook: \"on\",                           # Valid values: \"on\", \"off\" (deprecated)\n      personal_vpn: \"on\",                       # Valid values: \"on\", \"off\"\n      push_notification: \"on\",                  # Valid values: \"on\", \"off\"\n      sign_in_with_apple: \"on\",                 # Valid values: \"on\", \"off\"\n      siri_kit: \"on\",                           # Valid values: \"on\", \"off\"\n      system_extension: \"on\",                   # Valid values: \"on\", \"off\"\n      user_management: \"on\",                    # Valid values: \"on\", \"off\"\n      vpn_configuration: \"on\",                  # Valid values: \"on\", \"off\" (deprecated)\n      wallet: \"on\",                             # Valid values: \"on\", \"off\"\n      wireless_accessory: \"on\",                 # Valid values: \"on\", \"off\"\n      driver_kit: \"on\",                         # Valid values: \"on\", \"off\"\n      driver_kit_endpoint_security: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_family_hid_device: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_family_networking: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_family_serial: \"on\",           # Valid values: \"on\", \"off\"\n      driver_kit_hid_event_service: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_transport_hid: \"on\",           # Valid values: \"on\", \"off\"\n      multitasking_camera_access: \"on\",         # Valid values: \"on\", \"off\"\n      sf_universal_link_api: \"on\",              # Valid values: \"on\", \"off\"\n      vp9_decoder: \"on\",                        # Valid values: \"on\", \"off\"\n      music_kit: \"on\",                          # Valid values: \"on\", \"off\"\n      shazam_kit: \"on\",                         # Valid values: \"on\", \"off\"\n      communication_notifications: \"on\",        # Valid values: \"on\", \"off\"\n      group_activities: \"on\",                   # Valid values: \"on\", \"off\"\n      health_kit_estimate_recalibration: \"on\",  # Valid values: \"on\", \"off\"\n      time_sensitive_notifications: \"on\",       # Valid values: \"on\", \"off\"\n    }\n  )\n\n  deliver\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Gemfile for Fastlane Dependency in Ruby\nDESCRIPTION: This snippet shows how to create a Gemfile to specify Fastlane as a dependency for the project. It's a prerequisite for using Fastlane in the GitHub Actions workflow.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/github.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://rubygems.org'\n\ngem 'fastlane'\n```\n\n----------------------------------------\n\nTITLE: Creating Gemfile for fastlane in Ruby\nDESCRIPTION: This snippet shows how to create a Gemfile to include fastlane as a dependency for the project. It specifies the source for gems and lists fastlane as a required gem.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/gitlab.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n----------------------------------------\n\nTITLE: Legacy Xcode Build Commands (Before Gym)\nDESCRIPTION: Example of manual xcodebuild commands required before using gym to build and export an iOS app archive.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nxcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"\n```\n\n----------------------------------------\n\nTITLE: Running Scan with Custom Xcode Version\nDESCRIPTION: Example showing how to specify a different Xcode version when running scan using DEVELOPER_DIR environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" scan\n```\n\n----------------------------------------\n\nTITLE: Signing and Zipaligning Android App in Ruby\nDESCRIPTION: Example showing how to automatically sign and zipalign an Android app by passing signing configuration properties to gradle.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"assemble\",\n  build_type: \"Release\",\n  print_command: false,\n  properties: {\n    \"android.injected.signing.store.file\" => \"keystore.jks\",\n    \"android.injected.signing.store.password\" => \"store_password\",\n    \"android.injected.signing.key.alias\" => \"key_alias\",\n    \"android.injected.signing.key.password\" => \"key_password\",\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating XCFramework from Multiple Frameworks\nDESCRIPTION: Creates an XCFramework by combining multiple frameworks without dSYMs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_xcframework.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_xcframework(frameworks: ['FrameworkA.framework', 'FrameworkB.framework'], output: 'UniversalFramework.xcframework')\n```\n\n----------------------------------------\n\nTITLE: Initializing fastlane with company name for first app creation\nDESCRIPTION: Command to initialize fastlane with a specified company name, necessary when creating the first app on App Store Connect. Uses the PRODUCE_COMPANY_NAME environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/setup.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPRODUCE_COMPANY_NAME=\"YOUR COMPANY NAME\" fastlane init\n```\n\n----------------------------------------\n\nTITLE: Importing Fastfile from Git Repository\nDESCRIPTION: Shows how to import a Fastfile from a remote git repository, with examples for both HTTPS and SSH URLs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nimport_from_git(url: 'https://github.com/fastlane/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage Report with Slather in Fastlane\nDESCRIPTION: This Ruby snippet demonstrates how to use the slather action in a Fastfile to generate a code coverage report. It specifies the build directory, input format, scheme, and project file for the Slather tool to analyze.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slather.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nslather(\n  build_directory: \"foo\",\n  input_format: \"bah\",\n  scheme: \"MyScheme\",\n  proj: \"MyProject.xcodeproj\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Lane for Multiple Target Deployment in Fastlane\nDESCRIPTION: This code snippet defines a Fastlane lane that deploys multiple versions of an app using different environment configurations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndesc \"Deploy both versions\"\nlane :deploy_all do\n    sh \"fastlane deploy --env paid\"\n    sh \"fastlane deploy --env free\"\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Appfile Configuration in Ruby\nDESCRIPTION: A default Appfile configuration that includes bundle identifier and Apple ID. It also shows commented examples for team selection.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Appfile.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp_identifier \"net.sunapps.1\" # The bundle identifier of your app\napple_id \"felix@krausefx.com\"  # Your Apple email address\n\n# You can uncomment the lines below and add your own\n# team selection in case you're in multiple teams\n# team_name \"Felix Krause\"\n# team_id \"Q2CBPJ58CA\"\n\n# To select a team for App Store Connect use\n# itc_team_name \"Company Name\"\n# itc_team_id \"18742801\"\n```\n\n----------------------------------------\n\nTITLE: Adding Alpha Badge to App Icon with Fastlane\nDESCRIPTION: This example shows how to add an alpha badge instead of the default beta badge to the app icon using the badge action in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/badge.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbadge(alpha: true)\n```\n\n----------------------------------------\n\nTITLE: Implementing screenshot capture in JUnit4 Android tests\nDESCRIPTION: Example test class showing how to set up locale switching and screenshot capture using JUnit4 and Espresso with screengrab.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(JUnit4.class)\npublic class ExampleInstrumentedTest {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        // Your custom onView...\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift UI Test Setup for Snapshot\nDESCRIPTION: Code to be added to the setUp() method of a Swift UI Test class to configure and launch the app for taking screenshots with fastlane's snapshot tool.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of build_app with Multiple Parameters\nDESCRIPTION: A more comprehensive example of using build_app with various parameters like configuration, clean mode, output specifications, and SDK version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Match in a Complete Fastlane Workflow\nDESCRIPTION: Ruby code showing how to use match for different certificate types (appstore, development, adhoc, enterprise) in a fastlane workflow.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nmatch(type: \"appstore\")\n\nmatch(type: \"development\")\n\nmatch(type: \"adhoc\",\n      app_identifier: \"tools.fastlane.app\")\n\nmatch(type: \"enterprise\",\n      app_identifier: \"tools.fastlane.app\")\n\n# _match_ should be called before building the app with _gym_\ngym\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Multiple Targets in Fastlane\nDESCRIPTION: This code snippet demonstrates how to set up environment variables for multiple branded applications using the same codebase in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nDLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Code Signing in Xcode Projects with Fastlane\nDESCRIPTION: This snippet shows how to enable automatic code signing for an Xcode project using Fastlane's update_code_signing_settings action. It sets automatic signing to true and specifies the project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_code_signing_settings.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n # automatic code signing\nupdate_code_signing_settings(\n  use_automatic_signing: true,\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Appfile Configuration in Ruby\nDESCRIPTION: Advanced Appfile setup that defines different bundle identifiers per environment using for_platform and for_lane blocks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Appfile.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\napp_identifier \"net.sunapps.1\"\napple_id \"felix@krausefx.com\"\nteam_id \"Q2CBPJ58CC\"\n\nfor_platform :ios do\n  team_id '123' # for all iOS related things\n  for_lane :test do\n    app_identifier 'com.app.test'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Fastlane screenshots lane\nDESCRIPTION: Fastlane lane that captures Android screenshots and uploads them to Google Play in a single command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nlane :screenshots do\n  capture_android_screenshots\n  upload_to_play_store\nend\n```\n\n----------------------------------------\n\nTITLE: Capturing Screenshots in Objective-C UI Tests\nDESCRIPTION: Objective-C code snippet showing how to set up UI tests to automatically capture screenshots using fastlane's snapshot tool. This code should be added to the setUp() method of your UI test class.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n```\n\n----------------------------------------\n\nTITLE: Advanced Screenshot Configuration in Ruby\nDESCRIPTION: Detailed example showing multiple configuration options for Android screenshot capture\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_android_screenshots(\n  locales: [\"en-US\", \"fr-FR\", \"ja-JP\"],\n  clear_previous_screenshots: true,\n  app_apk_path: \"build/outputs/apk/example-debug.apk\",\n  tests_apk_path: \"build/outputs/apk/example-debug-androidTest-unaligned.apk\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up UTF-8 locale environment variables\nDESCRIPTION: Shell commands to set up required environment variables for proper fastlane operation. These ensure that your shell uses UTF-8 encoding to prevent build and upload issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/setup.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Integrating Precheck with Fastfile in Ruby\nDESCRIPTION: Example of integrating the precheck action within a Fastfile, including usage with the deliver action and a standalone check.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/precheck.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane :production do\n  # ...\n\n  # by default deliver will call precheck and warn you of any problems\n  # if you want precheck to halt submitting to app review, you can pass\n  # precheck_default_rule_level: :error\n  deliver(precheck_default_rule_level: :error)\n\n  # ...\nend\n\n# or if you prefer, you can run precheck alone\nlane :check_metadata do\n  precheck\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Private Key in Ruby\nDESCRIPTION: Example of setting a Git private key for match using a parameter or environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmatch(git_private_key: '<PATH TO YOUR KEY>')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nENV['MATCH_GIT_PRIVATE_KEY'] = '<PATH TO YOUR KEY>'\nmatch\n```\n\n----------------------------------------\n\nTITLE: Basic TestFlight Upload in Ruby\nDESCRIPTION: Simple example of uploading to TestFlight using the 'upload_to_testflight' action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight\n```\n\n----------------------------------------\n\nTITLE: Ensuring Environment Variables in Ruby with fastlane\nDESCRIPTION: This code snippet demonstrates how to use the ensure_env_vars action in a Fastfile to check if specific environment variables are set. It raises an exception if the specified environment variables are not set.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_env_vars.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nensure_env_vars(\n  env_vars: ['GITHUB_USER_NAME', 'GITHUB_API_TOKEN']\n)\n```\n\n----------------------------------------\n\nTITLE: Running SwiftLint Validation in Fastlane\nDESCRIPTION: Example configuration for the swiftlint action in a Fastfile. This snippet demonstrates how to run SwiftLint with various options including specific mode, path, output file configuration, custom config file, specific files to lint, and error handling settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/swiftlint.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nswiftlint(\n  mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect\n  path: \"/path/to/lint\",       # Specify path to lint (optional)\n  output_file: \"swiftlint.result.json\", # The path of the output file (optional)\n  config_file: \".swiftlint-ci.yml\",     # The path of the configuration file (optional)\n  files: [# List of files to process (optional)\n    \"AppDelegate.swift\",\n    \"path/to/project/Model.swift\"\n  ],\n  raise_if_swiftlint_error: true,      # Allow fastlane to raise an error if swiftlint fails\n  ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Travis Setup in Fastlane\nDESCRIPTION: Basic usage of the setup_travis action in a Fastfile to configure keychain and match settings for Travis CI integration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_travis.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsetup_travis\n```\n\n----------------------------------------\n\nTITLE: Uploading without Submitting for Testing\nDESCRIPTION: Uploads an IPA file to TestFlight but doesn't distribute it to testers. This is useful when you want to prepare a build but aren't ready for distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload --skip_submission\n```\n\n----------------------------------------\n\nTITLE: Recreating Xcode Schemes with Fastlane\nDESCRIPTION: Basic example showing how to recreate schemes for an Xcode project using the recreate_schemes action. Takes a project path parameter pointing to the .xcodeproj file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/recreate_schemes.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrecreate_schemes(project: \"./path/to/MyApp.xcodeproj\")\n```\n\n----------------------------------------\n\nTITLE: Uploading App Privacy Details in Ruby Fastfile\nDESCRIPTION: This Ruby code demonstrates how to call the upload_app_privacy_details_to_app_store action in a Fastfile. It passes the required parameters for authenticating with App Store Connect and identifying the app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic Code Signing with Project Path in Ruby\nDESCRIPTION: Enables automatic code signing by specifying the Xcode project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nenable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fastlane Lane for Certificate Management\nDESCRIPTION: Ruby code for a fastlane lane that syncs certificates and profiles for multiple app identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nlane :certificates do\n  match(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.app.watchkitapp\"])\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Transporter Protocol for Firewall Issues\nDESCRIPTION: Command to specify a different transporter protocol (DAV) for iTunes Transporter when behind a firewall using environment variables.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...\n```\n\n----------------------------------------\n\nTITLE: Advanced Manual Code Signing Configuration with Fastlane\nDESCRIPTION: This snippet demonstrates advanced manual code signing configuration using Fastlane's update_code_signing_settings action. It specifies multiple parameters including team ID, bundle identifier, code sign identity, SDK, profile name, and entitlements file path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_code_signing_settings.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n # more advanced manual code signing\nupdate_code_signing_settings(\n  use_automatic_signing: false,\n  path: \"demo-project/demo/demo.xcodeproj\",\n  team_id: \"QABC123DEV\",\n  bundle_identifier: \"com.demoapp.QABC123DEV\",\n  code_sign_identity: \"iPhone Distribution\",\n  sdk: \"iphoneos*\",\n  profile_name: \"Demo App Deployment Profile\",\n  entitlements_file_path: \"Demo App/generated/New.entitlements\"\n)\n```\n\n----------------------------------------\n\nTITLE: Calling GitHub API Endpoint in Ruby\nDESCRIPTION: This snippet demonstrates how to use the github_api action to make a GET request to the GitHub API for retrieving a repository's README file. It includes setting the server URL, API token, HTTP method, path, and request body.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/github_api.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nresult = github_api(\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  http_method: \"GET\",\n  path: \"/repos/:owner/:repo/readme\",\n  body: { ref: \"master\" }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing fastlane in terminal\nDESCRIPTION: Command to initialize fastlane in your Android project directory. This creates the necessary configuration files in a fastlane directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/setup.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfastlane init\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastfile for CircleCI integration\nDESCRIPTION: Updates the Fastfile to include the setup_circle_ci action which prepares the CI environment for iOS code signing. This creates a temporary keychain, sets match to readonly mode, and configures log paths.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/circle-ci.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# fastlane/Fastfile\n\n...\nplatform :ios do\n  before_all do\n    setup_circle_ci\n  end\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Running SwiftLint via Fastlane CLI\nDESCRIPTION: Example of how to run the swiftlint action directly from the command line without editing a Fastfile. This shows the basic command and how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/swiftlint.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run swiftlint\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run swiftlint parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Snapfile Configuration for fastlane snapshot\nDESCRIPTION: Example Snapfile that defines the configuration for fastlane's snapshot tool, including target devices, languages, and other options for taking screenshots automatically.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])\n```\n\n----------------------------------------\n\nTITLE: Basic TestFlight Upload Command using fastlane pilot\nDESCRIPTION: The simplest command to upload a build to TestFlight. This automatically looks for an IPA file in the current directory and uses login credentials from your fastlane setup.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload\n```\n\n----------------------------------------\n\nTITLE: Using ensure_git_status_clean in Ruby\nDESCRIPTION: This snippet demonstrates how to use the ensure_git_status_clean action in a Fastlane file. It checks if the Git repository is clean and raises an exception if there are uncommitted changes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_status_clean.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nensure_git_status_clean\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload with Localization\nDESCRIPTION: Upload to TestFlight with localized metadata and review information\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-default\",\n      privacy_policy_url: \"https://example.com/privacy-default\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: CI Setup with No Keychain Timeout\nDESCRIPTION: Sets up CI environment with CircleCI provider and disables keychain timeout by setting it to 0 seconds.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_ci.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsetup_ci(\n  provider: \"circleci\",\n  timeout: 0\n)\n```\n\n----------------------------------------\n\nTITLE: Using Gym with Custom Workspace and Scheme Parameters\nDESCRIPTION: Demonstrates how to build an iOS app with specific workspace and scheme parameters, with the clean flag to ensure a fresh build.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean\n```\n\n----------------------------------------\n\nTITLE: Firebase App Distribution Setup\nDESCRIPTION: Configuration for distributing iOS apps using Firebase App Distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # ...\n  build_app\n\n  firebase_app_distribution(\n    app: \"1:123456789:ios:abcd1234\",\n    groups: \"qa-team, trusted-testers\"\n  )\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Defining lanes in Fastfile.swift\nDESCRIPTION: Example showing how to define lanes in a Fastfile.swift class. Functions that end with 'Lane' become available lanes, while other functions can be used as helpers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass Fastfile: LaneFile {\n    func testLane() {\n        desc(\"This is a lane\")\n    }\n\n    func helper() {\n        // This is not a lane but can be called from a lane\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Available Language Codes for Snapshot\nDESCRIPTION: Ruby array containing all available language codes supported by snapshot. These codes can be used to generate screenshots in different localized versions of your app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Parameters in Fastlane CLI\nDESCRIPTION: Example of running tests with custom parameters using key-value pairs. Shows how to pass multiple parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run run_tests parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Objective-C UI Test Setup for Snapshot\nDESCRIPTION: Code to be added to the setUp() method of an Objective-C UI Test class to configure and launch the app for taking screenshots with fastlane's snapshot tool.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n```\n\n----------------------------------------\n\nTITLE: Skip Submission TestFlight Upload in Ruby\nDESCRIPTION: Example of uploading a build to TestFlight without submitting it for review\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(skip_submission: true) # to only upload the build\n```\n\n----------------------------------------\n\nTITLE: Lane Context Access in Fastlane\nDESCRIPTION: Examples of accessing shared lane context variables\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nlane_context[SharedValues::BUILD_NUMBER]                # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]              # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH]   # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]            # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]             # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]            # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]           # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                   # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]        # Generated by `hockey`\nlane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]      # Generated by `gradle`\nlane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] # Generated by `gradle`\nlane_context[SharedValues::GRADLE_FLAVOR]               # Generated by `gradle`\nlane_context[SharedValues::GRADLE_BUILD_TYPE]           # Generated by `gradle`\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project with SPM in Ruby\nDESCRIPTION: Demonstrates using 'spm' to generate an Xcode project with a custom xcconfig file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spm.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nspm(\n  command: \"generate-xcodeproj\",\n  xcconfig: \"Package.xcconfig\"\n)\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Xcode Project for Info.plist Update using Fastlane\nDESCRIPTION: This snippet demonstrates how to use the update_info_plist action with a specific Xcode project file. It targets a particular xcodeproj file, specifies the Info.plist path, and updates the display name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_info_plist.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_info_plist( # Target a specific `xcodeproj` rather than finding the first available one\n  xcodeproj: \"path/to/Example.proj\",\n  plist_path: \"path/to/Info.plist\",\n  display_name: \"MyApp-Beta\"\n)\n```\n\n----------------------------------------\n\nTITLE: Switching Between Lanes in Fastlane\nDESCRIPTION: Example of switching between lanes and passing parameters between them\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  build_config = (options[:release] ? \"Release\" : \"Staging\")\n  build_ios_app(configuration: build_config)\nend\n```\n\n----------------------------------------\n\nTITLE: Uploading an APK to Google Play Store in Shell\nDESCRIPTION: Command line example for uploading an APK file to Google Play Store using fastlane supply with a specified path to the APK file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/to/app.apk\n```\n\n----------------------------------------\n\nTITLE: Changing Version Code and Name in Android Build with Ruby\nDESCRIPTION: Example demonstrating how to change the version code and version name of an Android app by passing special properties to gradle.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n\n  properties: {\n    \"android.injected.version.code\" => 100,\n    \"android.injected.version.name\" => \"1.0.0\",\n    # ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating string entries in a plist file with Fastlane\nDESCRIPTION: Updates specific string entries (CLIENT_ID and GOOGLE_APP_ID) in a plist file by providing a path to the plist file and a processing block.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_plist.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_plist( # Updates the CLIENT_ID and GOOGLE_APP_ID string entries in the plist-file\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:CLIENT_ID] = \"new_client_id\"\n    plist[:GOOGLE_APP_ID] = \"new_google_app_id\"\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Development Certificate Import in Ruby with Fastlane\nDESCRIPTION: Imports a development certificate file into the default keychain.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_certificate.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nimport_certificate(\n  certificate_path: \"certs/development.cer\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic App Store Connect API Key Configuration in Ruby\nDESCRIPTION: Basic example of configuring an App Store Connect API key with required parameters including key ID, issuer ID and key filepath.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_connect_api_key.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_filepath: \"D83848D23.p8\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Build App Command\nDESCRIPTION: Simple example of using build_app with basic scheme and workspace parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n```\n\n----------------------------------------\n\nTITLE: Bypassing CDN for Corporate Firewalls with Hockey and Fastlane\nDESCRIPTION: Example showing how to bypass the HockeyApp CDN when uploading builds through corporate firewalls that might cause SSL errors, using the bypass_cdn parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hockey.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# You can bypass the CDN if you are uploading to Hockey and receive an SSL error (which can happen on corporate firewalls)\nhockey(\n  api_token: \"...\",\n  ipa: \"./app.ipa\",\n  notes: \"Changelog\",\n  bypass_cdn: true\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Parameters in Fastlane Actions\nDESCRIPTION: Shows how to create parameters that can accept different types of values by using is_string: false and implementing verification logic to handle different types appropriately.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :polymorphic_option,\n  is_string: false,\n  verify_block: ->(value) { verify_option(value) }\n)\n\ndef verify_option(value)\n  case value\n  when String\n    @polymorphic_option = value\n  when Array\n    @polymorphic_option = value.join(\" \")\n  when Hash\n    @polymorphic_option = value.to_s\n  else\n    UI.user_error! \"Invalid option: #{value.inspect}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Fastlane Lane for iOS App Build and TestFlight Upload in Ruby\nDESCRIPTION: This Ruby code defines a Fastlane lane named 'beta' for iOS. It sets up CI environment, runs match for code signing, builds the app, and uploads it to TestFlight. The 'setup_ci' step is crucial for creating a temporary keychain in CI environments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/github.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios do\n  lane :beta do\n    setup_ci if ENV['CI']\n    match(type: 'appstore')\n    build_app\n    upload_to_testflight(skip_waiting_for_build_processing: true)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Push Notifications Certificate with fastlane\nDESCRIPTION: This snippet shows how to use the get_push_certificate action in fastlane to ensure a valid push notification certificate is available during the submission process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/appstore-deployment.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  get_push_certificate\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Badge to App Icon with Fastlane\nDESCRIPTION: This code demonstrates how to add a custom badge or overlay image to the app icon using the badge action in Fastlane. It specifies the path to the custom badge image.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/badge.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbadge(custom: \"/Users/xxx/Desktop/badge.png\")\n```\n\n----------------------------------------\n\nTITLE: Using deliver with default language values in Deliverfile\nDESCRIPTION: Example of setting default release notes in a Deliverfile that will be used for all languages unless overridden by a language-specific value.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nrelease_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})\n```\n\n----------------------------------------\n\nTITLE: Running a simple shell command in fastlane\nDESCRIPTION: Basic example of using the 'sh' action to run a directory listing command. This demonstrates the simplest form of the action with a single string parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sh.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsh(\"ls\")\n```\n\n----------------------------------------\n\nTITLE: Setting Git Basic Authorization in Ruby\nDESCRIPTION: Example of setting Git basic authorization for match using a parameter or environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmatch(git_basic_authorization: '<YOUR BASE64 KEY>')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nENV['MATCH_GIT_BASIC_AUTHORIZATION'] = '<YOUR BASE64 KEY>'\nmatch\n```\n\n----------------------------------------\n\nTITLE: Uploading TestFlight Build without Distribution\nDESCRIPTION: Command to upload an IPA file to TestFlight without distributing it to testers. This skips the submission step, only uploading the binary.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot upload --skip_submission\n```\n\n----------------------------------------\n\nTITLE: Sample Gymfile Configuration\nDESCRIPTION: Example of a Gymfile that defines default parameters for building an iOS app, including scheme, SDK, output directory, and name settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n```\n\n----------------------------------------\n\nTITLE: Using update_project_provisioning to Set Code Signing Settings in Ruby\nDESCRIPTION: Example of using the update_project_provisioning action to update an Xcode project's code signing settings with a specific provisioning profile. The example demonstrates filtering for WatchKit Extension targets in a Release build configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_provisioning.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_project_provisioning(\n  xcodeproj: \"Project.xcodeproj\",\n  profile: \"./watch_app_store.mobileprovision\", # optional if you use sigh\n  target_filter: \".*WatchKit Extension.*\", # matches name or type of a target\n  build_configuration: \"Release\",\n  code_signing_identity: \"iPhone Development\" # optionally specify the codesigning identity\n)\n```\n\n----------------------------------------\n\nTITLE: Dotenv Configuration File - Shell\nDESCRIPTION: Sample dotenv file configuration for storing environment-specific credentials, supporting different configurations for various deployment environments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/keys.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nSLACK_URL=\"https://hooks.slack.com/services/T03NA19Q5/...\"\nCRASHLYTICS_API_TOKEN=\"123abc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Code Signing in Xcode Projects with Fastlane\nDESCRIPTION: This snippet demonstrates how to configure manual code signing for an Xcode project using Fastlane's update_code_signing_settings action. It disables automatic signing and specifies the project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_code_signing_settings.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n # manual code signing\nupdate_code_signing_settings(\n  use_automatic_signing: false,\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration in Fastlane\nDESCRIPTION: Shows how to configure different values based on platform and lane using for_lane and for_platform blocks\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\napp_identifier \"com.default.id\"\n\nfor_lane :enterprise do\n  app_identifier \"com.forlane.enterprise\"\nend\n\nfor_platform :mac do\n  app_identifier \"com.forplatform.mac\"\n\n  for_lane :release do\n    app_identifier \"com.forplatform.mac.forlane.release\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Screenshots Lane in Fastfile\nDESCRIPTION: Ruby code for a fastlane lane that automates both the screenshot capture and upload to App Store Connect. This can be added to your Fastfile to create a single command for the entire screenshot workflow.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :screenshots do\n  capture_screenshots\n  upload_to_app_store\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling Block in Fastfile\nDESCRIPTION: Demonstrates error handling block that executes when errors occur in any block, with Slack error notification example.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nerror do |lane, exception|\n  slack(\n    message: \"Something went wrong with the deployment.\",\n    success: false,\n    payload: { \"Error Info\" => exception.error_info.to_s } \n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced GitHub API Call with Error Handling in Ruby\nDESCRIPTION: This example shows a more advanced use of the github_api action, directly calling GithubApiAction.run with error handling and a block for processing the result. It includes custom error handlers for specific HTTP status codes and a general error handler.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/github_api.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nGithubApiAction.run(\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  http_method: \"GET\",\n  path: \"/repos/:owner/:repo/readme\",\n  error_handlers: {\n    404 => proc do |result|\n      UI.message(\"Something went wrong - I couldn't find it...\")\n    end,\n    '*' => proc do |result|\n      UI.message(\"Handle all error codes other than 404\")\n    end\n  }\n) do |result|\n  UI.message(\"JSON returned: #{result[:json]}\")\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying iOS App Services Using Fastlane Ruby Action\nDESCRIPTION: Example showing how to modify multiple app services including push notifications, associated domains, wallet, Apple Pay, data protection, and multipath using different boolean notation styles (on/off, symbols, true/false).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/modify_services.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodify_services(\n  username: \"test.account@gmail.com\",\n  app_identifier: \"com.someorg.app\",\n  services: {\n    push_notification: \"on\",\n    associated_domains: \"off\",\n    wallet: :on,\n    apple_pay: :off,\n    data_protection: true,\n    multipath: false\n  })\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Scan Action via CLI\nDESCRIPTION: Shows how to pass parameters to the 'scan' action when running it from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run scan parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Building and Archiving iOS App with Xcodebuild in Ruby\nDESCRIPTION: Example showing how to use xcodebuild to create an archive of an iOS app using a workspace and scheme. This demonstrates the basic archive configuration with workspace and scheme parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcodebuild.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcodebuild(\n  archive: true,\n  archive_path: \"./build-dir/MyApp.xcarchive\",\n  scheme: \"MyApp\",\n  workspace: \"MyApp.xcworkspace\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Basic Gym Command in Fastlane\nDESCRIPTION: The simplest way to build an iOS app using fastlane's gym command, which requires no additional parameters if the project is properly set up.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym\n```\n\n----------------------------------------\n\nTITLE: Advanced Carthage Configuration in Ruby\nDESCRIPTION: Comprehensive example showing all major Carthage configuration options including framework specification, build settings, platform selection, and output customization.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/carthage.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncarthage(\n  frameworks: [\"MyFramework1\", \"MyFramework2\"],   # Specify which frameworks to archive (only for the archive command)\n  output: \"MyFrameworkBundle.framework.zip\",      # Specify the output archive name (only for the archive command)\n  command: \"bootstrap\",       # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: [\"Alamofire\", \"Notice\"],# Specify which dependencies to update or build (only for update, build and bootstrap commands)\n  use_ssh: false,   # Use SSH for downloading GitHub repositories.\n  use_submodules: false,      # Add dependencies as Git submodules.\n  use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,  # When bootstrapping Carthage do not build\n  no_skip_current: false,     # Don't skip building the current project (only for frameworks)\n  verbose: false,   # Print xcodebuild output inline\n  platform: \"all\",  # Define which platform to build for (one of 'all', 'Mac', 'iOS', 'watchOS', 'tvOS', or comma-separated values of the formers except for 'all')\n  configuration: \"Release\",   # Build configuration to use when building\n  cache_builds: true,         # By default Carthage will rebuild a dependency regardless of whether its the same resolved version as before.\n  toolchain: \"com.apple.dt.toolchain.Swift_2_3\",  # Specify the xcodebuild toolchain\n  new_resolver: false,        # Use the new resolver to resolve dependency graph\n  log_path: \"carthage.log\"    # Path to the xcode build output\n)\n```\n\n----------------------------------------\n\nTITLE: Setting TestFlight Metadata and Notifications\nDESCRIPTION: Example of uploading to TestFlight with beta app feedback email, description, demo account requirement, and changelog.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)\n```\n\n----------------------------------------\n\nTITLE: Direct Key Content App Store Connect API Configuration in Ruby\nDESCRIPTION: Example showing how to configure the API key using direct key content instead of a file path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_connect_api_key.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\napp_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_content: \"-----BEGIN EC PRIVATE KEY-----\\nfewfawefawfe\\n-----END EC PRIVATE KEY-----\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Verify Build Action with Parameters via Fastlane CLI\nDESCRIPTION: Command to run the verify_build action with specific parameters directly from the terminal. This shows how to pass parameters using the : syntax when not using a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_build.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run verify_build parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Minimum fastlane Version Requirement in Ruby\nDESCRIPTION: Adds a version check to your Fastfile to ensure users are running a minimum required version of fastlane. This is useful when using actions that were recently released.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/min_fastlane_version.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmin_fastlane_version(\"1.50.0\")\n```\n\n----------------------------------------\n\nTITLE: Registering iOS Devices with Hash in Ruby\nDESCRIPTION: This snippet demonstrates how to register iOS devices using a hash of device names and UDIDs. It's a simple way to provide a list of devices directly in the fastlane script.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_devices.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nregister_devices(\n  devices: {\n    \"Luka iPhone 6\" => \"1234567890123456789012345678901234567890\",\n    \"Felix iPad Air 2\" => \"abcdefghijklmnopqrstvuwxyzabcdefghijklmn\"\n  }\n) # Simply provide a list of devices as a Hash\n```\n\n----------------------------------------\n\nTITLE: Creating Keychain with Fastlane in Ruby\nDESCRIPTION: Example showing how to create a new keychain with specific configuration options including setting it as default, unlocking it, setting a timeout, and configuring sleep behavior.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_keychain.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_keychain(\n  name: \"KeychainName\",\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspace, Scheme, and Clean Options\nDESCRIPTION: Demonstrates how to run tests with a specific workspace, scheme, and clean option. This example uses a workspace named 'App.xcworkspace' and a scheme named 'MyTests'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests(\n  workspace: \"App.xcworkspace\",\n  scheme: \"MyTests\",\n  clean: false\n)\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Lanes\nDESCRIPTION: Shows how to return and access values between different lanes\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # => 5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Fastlane\nDESCRIPTION: Command to initialize fastlane in an iOS or Android project directory. This command starts the setup process and creates necessary configuration files.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane init\n```\n\n----------------------------------------\n\nTITLE: Resetting App Ratings in Ruby with Fastlane\nDESCRIPTION: Reset an app's summary rating for all territories using the reset_ratings method. This can be set to true to reset ratings when a new version is released, or false to keep existing ratings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nreset_ratings(true)\n# or\nreset_ratings(false)\n```\n\n----------------------------------------\n\nTITLE: Disable Basic Automatic Code Signing in Ruby\nDESCRIPTION: Basic example of disabling automatic code signing with no additional parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndisable_automatic_code_signing\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Gradle Tasks in Ruby\nDESCRIPTION: Example demonstrating how to run multiple gradle tasks in a single command by passing an array of task names.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  tasks: [\"assembleDebug\", \"bundleDebug\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Git Add with Wildcard and Shell Escape Disabled in Ruby\nDESCRIPTION: Adds all files in the Frameworks directory to Git using a wildcard, with shell escaping disabled.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add(path: \"./Frameworks/*\", shell_escape: false)\n```\n\n----------------------------------------\n\nTITLE: Calling Actions from Custom Actions in Fastfile\nDESCRIPTION: Shows how to call other fastlane actions from within a custom action implementation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nother_action.deliver(text: \"Please input your password:\", \n                      key: 123)\n```\n\n----------------------------------------\n\nTITLE: Basic S3 Upload in Ruby for Fastlane\nDESCRIPTION: A simple example of using the s3 action in a Fastlane file to upload a build to Amazon S3.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/s3.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ns3\n```\n\n----------------------------------------\n\nTITLE: Using build_mac_app Alias\nDESCRIPTION: Example showing that build_mac_app is an alias for build_app with only macOS options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_mac_app    # alias for \"build_app (only macOS options)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Animations in Swift for Faster UI Tests\nDESCRIPTION: Swift code that disables UIView animations when a specific launch argument is detected. This significantly speeds up the screenshot capture process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nif ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage in Matchfile\nDESCRIPTION: Example content of a Matchfile for Google Cloud Storage. Specifies the Google Cloud bucket name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ngoogle_cloud_bucket_name(\"major-key-certificates\")\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Values with Subkeys in Info.plist using Fastlane\nDESCRIPTION: Modifies a nested value in the Info.plist file by specifying both a key and subkey. This example sets the NSAllowsArbitraryLoads value under NSAppTransportSecurity to true and outputs to a different file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_info_plist_value.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nset_info_plist_value(path: \"./MyApp-Info.plist\", key: \"NSAppTransportSecurity\", subkey: \"NSAllowsArbitraryLoads\", value: true, output_file_name: \"./Info.plist\")\n```\n\n----------------------------------------\n\nTITLE: JUnit4 UI Test Example in Kotlin\nDESCRIPTION: Complete example of a JUnit4 test class in Kotlin that takes screenshots with screengrab during the test execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@RunWith(JUnit4.class)\nclass JUnit4StyleTests {\n    @get:Rule\n    var activityRule = ActivityScenarioRule(MainActivity::class.java)\n\n    @Rule @JvmField\n    val localeTestRule = LocaleTestRule()\n\n    @Test\n    fun testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\")\n\n        onView(withId(R.id.fab)).perform(click())\n\n        Screengrab.screenshot(\"after_button_click\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TestFlight with Detailed Review and Localization Info\nDESCRIPTION: Complex example of uploading to TestFlight with beta app review info, localized app info, and localized build info for multiple languages.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-default\",\n      privacy_policy_url: \"https://example.com/privacy-default\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating XCFramework with Libraries and Headers/dSYMs\nDESCRIPTION: Creates an XCFramework by combining multiple libraries with their associated headers and dSYM files.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_xcframework.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_xcframework(libraries_with_headers_or_dsyms: { 'LibraryA.so' => { dsyms: 'libraryA.so.dSYM' }, 'LibraryB.so' => { headers: 'LibraryBHeaders' } }, output: 'UniversalFramework.xcframework')\n```\n\n----------------------------------------\n\nTITLE: Uploading App to Appetize.io with Basic Configuration in Ruby\nDESCRIPTION: Example of using the appetize action to upload an app to Appetize.io with the required parameters. This snippet demonstrates how to specify the app path, API token, and public key.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appetize.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nappetize(\n  path: \"./MyApp.zip\",\n  api_token: \"yourapitoken\", # get it from https://appetize.io/docs#request-api-token\n  public_key: \"your_public_key\" # get it from https://appetize.io/dashboard\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Gradle Tasks Execution in Ruby\nDESCRIPTION: Shows how to execute multiple Gradle tasks in a single command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  tasks: [\"assembleDebug\", \"bundleDebug\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring run_tests with workspace and scheme in Ruby\nDESCRIPTION: Example of run_tests with specific workspace, scheme, and clean parameters. This allows targeting a specific test scheme within an Xcode workspace without cleaning the build.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests(\n  workspace: \"App.xcworkspace\",\n  scheme: \"MyTests\",\n  clean: false\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Phased Release\nDESCRIPTION: Enable or disable the phased releases feature which releases updates over a 7-day period.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nphased_release(true)\n# or\nphased_release(false)\n```\n\n----------------------------------------\n\nTITLE: Using Error Callbacks with Shell Commands\nDESCRIPTION: Demonstrates how to use callbacks for contextual error handling with the built-in sh action, passing a lambda that processes command output to identify specific error conditions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ncallback = lambda do |result|\n  handle_missing_file if result =~ /file not found/i\n  handle_auth_failure if result =~ /login failed/i\nend\n\nsh \"some_cmd\", error_callback: callback\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage in Matchfile\nDESCRIPTION: Ruby code for configuring match to use Google Cloud Storage with project ID and bucket name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nstorage_mode(\"google_cloud\")\ngoogle_cloud_bucket_name(\"my-app-certificates\")\ngoogle_cloud_project_id(\"my-app-project\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Test Example in Ruby\nDESCRIPTION: Example configuration for running Appium UI tests with specific app path, spec path, platform, and capabilities settings. Demonstrates how to set up device version, name and wait time parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appium.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nappium(\n  app_path:  \"appium/apps/TargetApp.app\",\n  spec_path: \"appium/spec\",\n  platform:  \"iOS\",\n  caps: {\n    versionNumber: \"9.1\",\n    deviceName:    \"iPhone 6\"\n  },\n  appium_lib: {\n    wait: 10\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Certificate Generation with Fastlane Cert in Ruby\nDESCRIPTION: The simplest way to invoke the get_certificates action in Fastlane to check for existing certificates and create a new one if needed.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cert.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_certificates\n```\n\n----------------------------------------\n\nTITLE: Extended App Store Connect API Key Configuration in Ruby\nDESCRIPTION: Advanced configuration example that includes additional optional parameters like duration and in_house settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_connect_api_key.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\napp_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_filepath: \"D83848D23.p8\",\n  duration: 200,\n  in_house: true\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Metadata from App Store Connect\nDESCRIPTION: Command to download existing metadata from App Store Connect to your local machine.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane deliver download_metadata\n```\n\n----------------------------------------\n\nTITLE: Uploading an Android App to TestFairy in Ruby\nDESCRIPTION: This snippet demonstrates how to upload an Android APK file to TestFairy using Fastlane. It requires an API key from the TestFairy settings page and accepts an APK file path and a comment which includes the build number from the shared lane context.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testfairy.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ntestfairy(\n  api_key: \"...\",\n  apk: \"../build/app/outputs/apk/qa/release/app-qa-release.apk\",\n  comment: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n )\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Signing with Xcode in Fastlane\nDESCRIPTION: This snippet demonstrates how to enable Xcode's Automatic Signing feature when using fastlane. It passes the -allowProvisioningUpdates flag via the xcargs option to the build_app action, which allows Xcode to automatically update provisioning profiles during the build process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/xcode-project.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  build_app(xcargs: \"-allowProvisioningUpdates\")\nend\n```\n\n----------------------------------------\n\nTITLE: Upload IPA with Review Submission\nDESCRIPTION: Command to upload an IPA file and submit for App Store review\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane deliver --ipa \"App.ipa\" --submit_for_review\n```\n\n----------------------------------------\n\nTITLE: Setting Localized App Metadata in Ruby with Fastlane\nDESCRIPTION: Demonstrates how to set localized app metadata such as description, subtitle, and keywords using Ruby in a Fastfile or Deliverfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndescription({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsubtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nkeywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)\n```\n\nLANGUAGE: ruby\nCODE:\n```\npromotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Gymfile Configuration\nDESCRIPTION: Example of a basic Gymfile configuration specifying build settings like scheme, SDK, output directory and name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n```\n\n----------------------------------------\n\nTITLE: Running Match for Development Certificates and Profiles\nDESCRIPTION: Command to generate and install Apple Development certificates and provisioning profiles using fastlane match.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match development\n```\n\n----------------------------------------\n\nTITLE: Basic TestFlight Upload\nDESCRIPTION: Simple usage of the upload_to_testflight command to upload a build to TestFlight\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight\n```\n\n----------------------------------------\n\nTITLE: Verify Xcode Version Using Fastlane Ruby Action\nDESCRIPTION: Example showing how to verify that Xcode version 12.5 is selected before building. This helps prevent accidental builds with wrong Xcode versions that could cause issues with TestFlight uploads.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_xcode_version.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nensure_xcode_version(version: \"12.5\")\n```\n\n----------------------------------------\n\nTITLE: Skipping Submission in TestFlight Upload\nDESCRIPTION: Example of uploading a build to TestFlight without submitting it for review.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(skip_submission: true) # to only upload the build\n```\n\n----------------------------------------\n\nTITLE: Building Android App with Gradle using Fastlane\nDESCRIPTION: This snippet demonstrates a basic Fastlane lane that builds an Android app using Gradle. It uses the gradle action to run the 'assemble' task with 'Release' build type.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Changing Display Name in Info.plist using Fastlane\nDESCRIPTION: This example shows how to use the update_info_plist action to change the Display Name of an app in the Info.plist file. It specifies the path to the Info.plist file and the new display name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_info_plist.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_info_plist( # Change the Display Name of your app\n  plist_path: \"path/to/Info.plist\",\n  display_name: \"MyApp-Beta\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Launch Arguments for A/B Testing in Ruby\nDESCRIPTION: Example showing how to configure multiple launch argument combinations for comparing different app states in screenshots, such as feature flags.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to Gradle in Ruby\nDESCRIPTION: Example showing how to pass custom properties to the gradle script using a hash of key-value pairs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n\n  properties: {\n    \"exampleNumber\" => 100,\n    \"exampleString\" => \"1.0.0\",\n    # ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastlane Produce in Ruby Fastfile\nDESCRIPTION: This snippet demonstrates how to configure the Produce action in a Fastfile to create an iOS app. It includes various parameters for app details and enables multiple app services.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  produce(\n    username: 'felix@krausefx.com',\n    app_identifier: 'com.krausefx.app',\n    app_name: 'MyApp',\n    language: 'English',\n    app_version: '1.0',\n    sku: '123',\n    team_name: 'SunApps GmbH', # only necessary when in multiple teams\n    \n    # Optional\n    # App services can be enabled during app creation\n    enable_services: {\n      access_wifi: \"on\",                        # Valid values: \"on\", \"off\"\n      app_attest: \"on\",                         # Valid values: \"on\", \"off\"\n      app_group: \"on\",                          # Valid values: \"on\", \"off\"\n      apple_pay: \"on\",                          # Valid values: \"on\", \"off\"\n      associated_domains: \"on\",                 # Valid values: \"on\", \"off\"\n      auto_fill_credential: \"on\",               # Valid values: \"on\", \"off\"\n      car_play_audio_app: \"on\",                 # Valid values: \"on\", \"off\"\n      car_play_messaging_app: \"on\",             # Valid values: \"on\", \"off\"\n      car_play_navigation_app: \"on\",            # Valid values: \"on\", \"off\"\n      car_play_voip_calling_app: \"on\",          # Valid values: \"on\", \"off\"\n      class_kit: \"on\",                          # Valid values: \"on\", \"off\"\n      icloud: \"xcode5_compatible\",              # Valid values: \"xcode5_compatible\", \"xcode6_compatible\", \"off\"\n      critical_alerts: \"on\",                    # Valid values: \"on\", \"off\"\n      custom_network_protocol: \"on\",            # Valid values: \"on\", \"off\"\n      data_protection: \"complete\",              # Valid values: \"complete\", \"unlessopen\", \"untilfirstauth\", \"off\"\n      extended_virtual_address_space: \"on\",     # Valid values: \"on\", \"off\"\n      file_provider_testing_mode: \"on\",         # Valid values: \"on\", \"off\"\n      fonts: \"on\",                              # Valid values: \"on\", \"off\"\n      game_center: \"ios\",                       # Valid values: \"ios\", \"macos\", off\"\n      health_kit: \"on\",                         # Valid values: \"on\", \"off\"\n      hls_interstitial_preview: \"on\",           # Valid values: \"on\", \"off\"\n      home_kit: \"on\",                           # Valid values: \"on\", \"off\"\n      hotspot: \"on\",                            # Valid values: \"on\", \"off\"\n      hotspot_helper: \"on\",                     # Valid values: \"on\", \"off\"\n      in_app_purchase: \"on\",                    # Valid values: \"on\", \"off\"\n      inter_app_audio: \"on\",                    # Valid values: \"on\", \"off\"\n      low_latency_hls: \"on\",                    # Valid values: \"on\", \"off\"\n      managed_associated_domains: \"on\",         # Valid values: \"on\", \"off\"\n      maps: \"on\",                               # Valid values: \"on\", \"off\"\n      multipath: \"on\",                          # Valid values: \"on\", \"off\"\n      network_extension: \"on\",                  # Valid values: \"on\", \"off\"\n      nfc_tag_reading: \"on\",                    # Valid values: \"on\", \"off\"\n      passbook: \"on\",                           # Valid values: \"on\", \"off\" (deprecated)\n      personal_vpn: \"on\",                       # Valid values: \"on\", \"off\"\n      push_notification: \"on\",                  # Valid values: \"on\", \"off\"\n      sign_in_with_apple: \"on\",                 # Valid values: \"on\", \"off\"\n      siri_kit: \"on\",                           # Valid values: \"on\", \"off\"\n      system_extension: \"on\",                   # Valid values: \"on\", \"off\"\n      user_management: \"on\",                    # Valid values: \"on\", \"off\"\n      vpn_configuration: \"on\",                  # Valid values: \"on\", \"off\" (deprecated)\n      wallet: \"on\",                             # Valid values: \"on\", \"off\"\n      wireless_accessory: \"on\",                 # Valid values: \"on\", \"off\"\n      driver_kit: \"on\",                         # Valid values: \"on\", \"off\"\n      driver_kit_endpoint_security: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_family_hid_device: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_family_networking: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_family_serial: \"on\",           # Valid values: \"on\", \"off\"\n      driver_kit_hid_event_service: \"on\",       # Valid values: \"on\", \"off\"\n      driver_kit_transport_hid: \"on\",           # Valid values: \"on\", \"off\"\n      multitasking_camera_access: \"on\",         # Valid values: \"on\", \"off\"\n      sf_universal_link_api: \"on\",              # Valid values: \"on\", \"off\"\n      vp9_decoder: \"on\",                        # Valid values: \"on\", \"off\"\n      music_kit: \"on\",                          # Valid values: \"on\", \"off\"\n      shazam_kit: \"on\",                         # Valid values: \"on\", \"off\"\n      communication_notifications: \"on\",        # Valid values: \"on\", \"off\"\n      group_activities: \"on\",                   # Valid values: \"on\", \"off\"\n      health_kit_estimate_recalibration: \"on\",  # Valid values: \"on\", \"off\"\n      time_sensitive_notifications: \"on\",       # Valid values: \"on\", \"off\"\n    }\n  )\n\n  deliver\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Fastfile.swift with class structure\nDESCRIPTION: Basic structure for a Fastfile.swift file with a class that inherits from LaneFile. This is the main configuration file for defining fastlane lanes in Swift.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport Fastlane\n\n// Create a class with: \nclass FastFile: LaneFile {\n    // Your lanes goes here.\n}\n```\n\n----------------------------------------\n\nTITLE: Gradual Rollout for APK\nDESCRIPTION: Command line example demonstrating how to gradually roll out a new APK build to the beta track with a 50% rollout rate.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --track beta --rollout 0.5\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables in Codemagic YAML\nDESCRIPTION: This snippet shows how to import a group of environment variables named 'fastlane' into a Codemagic workflow. This is useful for securely storing and accessing sensitive information like API keys and passwords.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codemagic.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  workflow-name:\n    environment:\n      groups:\n        - fastlane\n```\n\n----------------------------------------\n\nTITLE: Naming Fastlane Actions with Step Names\nDESCRIPTION: Demonstrates how to specify custom step names for actions to disambiguate multiple usages of the same action in different contexts. This helps make the fastlane output more readable and allows better identification of each step.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nyarn(step_name: 'install_dependencies')\nyarn(command: 'build', step_name: 'building_project')\nyarn(command: 'test', step_name: 'testing_project')\nyarn(command: 'publish-coverage', step_name: 'publishing_project')\n```\n\n----------------------------------------\n\nTITLE: JUnit4 UI Test Class Example in Kotlin\nDESCRIPTION: Complete Kotlin example of a JUnit4 test class that uses screengrab to capture screenshots during UI testing with Espresso.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\n@RunWith(JUnit4.class)\nclass JUnit4StyleTests {\n    @get:Rule\n    var activityRule = ActivityScenarioRule(MainActivity::class.java)\n\n    @Rule @JvmField\n    val localeTestRule = LocaleTestRule()\n\n    @Test\n    fun testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\")\n\n        onView(withId(R.id.fab)).perform(click())\n\n        Screengrab.screenshot(\"after_button_click\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a Build with Changelog\nDESCRIPTION: Uploads an IPA to TestFlight with a specified changelog that will be shown to testers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload --changelog \"Something that is new here\"\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Fastlane in .env File\nDESCRIPTION: Shows how to define environment variables in a .env file for use with Fastlane. These variables can be used to store sensitive information or configuration details.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token\n```\n\n----------------------------------------\n\nTITLE: Implementing Verify Blocks for Parameter Validation\nDESCRIPTION: Shows how to use verify blocks to provide custom validation logic for action parameters, such as validating a URL format with proper error handling.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nverify_block = lambda do |value|\n  # Has to be a String to get this far\n  uri = URI(value)\n  UI.error \"Invalid scheme #{uri.scheme}\" unless uri.scheme == \"http\" || uri.scheme == \"https\"\nend\n\nFastlaneCore::ConfigItem.new(\n  key: :url,\n  type: String,\n  verify_block: verify_block\n)\n```\n\n----------------------------------------\n\nTITLE: Basic scan Usage in Fastlane\nDESCRIPTION: The simplest way to run scan, which automatically detects project, schemes, and other settings without requiring additional parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane scan\n```\n\n----------------------------------------\n\nTITLE: Building Android App Bundle (AAB) in Ruby\nDESCRIPTION: Demonstrates how to build an Android App Bundle using the bundle task.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"bundle\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting TestFlight Testers to CSV\nDESCRIPTION: Command to export all external testers to a CSV file, useful for importing tester information to another system or account.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot export\n```\n\n----------------------------------------\n\nTITLE: Syncing Code Signing in Read-Only Mode\nDESCRIPTION: Ruby code example showing how to sync development certificates and profiles in read-only mode, useful for CI environments where you don't need to modify profiles.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nsync_code_signing(type: \"development\", readonly: true)\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Sources in Pluginfile\nDESCRIPTION: Examples of how to specify plugin sources in the fastlane/Pluginfile. This includes fetching from RubyGems.org, GitHub, local directory, and specifying version requirements.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/using-plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Fetched from RubyGems.org\ngem \"fastlane-plugin-xcversion\"\n\n# Fetched from GitHub\ngem \"fastlane-plugin-xcversion\", git: \"https://github.com/fastlane/fastlane-plugin-xcversion\"\ngem \"fastlane-plugin-xcversion\", git: \"https://github.com/fastlane/fastlane-plugin-xcversion\", branch: \"xcode-14-support\"\ngem \"fastlane-plugin-xcversion\", git: \"https://github.com/fastlane/fastlane-plugin-xcversion\", tag: \"2.0.0\"\n\n# Fetched from a local directory\ngem \"fastlane-plugin-xcversion\", path: \"../fastlane-plugin-xcversion\"\n\n# Specify a version requirements\ngem \"fastlane-plugin-xcversion\", \"1.1.0\"\ngem \"fastlane-plugin-xcversion\", \">= 1.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Match in Read-Only Mode\nDESCRIPTION: Command to run match in read-only mode, which ensures it won't create new certificates or profiles.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match development --readonly\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of get_push_certificate with Options in Ruby\nDESCRIPTION: Demonstrates a more complex usage of the get_push_certificate action with various options, including forcing a new profile creation, specifying an app identifier, and handling the new profile with a custom block.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_push_certificate.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget_push_certificate(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \"net.sunapps.9\", # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Bash Profile Environment Variables - Shell\nDESCRIPTION: Example of storing Fastlane credentials in bash profile as environment variables, making them available system-wide without storing in version control.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/keys.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport SLACK_URL=\"https://hooks.slack.com/services/T03NA19Q5/...\"\nexport CRASHLYTICS_API_TOKEN=\"123abc\"\n```\n\n----------------------------------------\n\nTITLE: Uploading Files via SCP in Fastlane\nDESCRIPTION: Example showing how to upload files using SCP with Fastlane. Demonstrates transferring a directory from local system to a remote server with specified host and credentials.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scp.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nscp(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  upload: {\n    src: \"/root/dir1\",\n    dst: \"/tmp/new_dir\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of push_to_git_remote with Custom Parameters in Ruby\nDESCRIPTION: Comprehensive example showing how to use push_to_git_remote with various parameters including custom remote, branch specification, force options, and upstream settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_to_git_remote.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npush_to_git_remote(\n  remote: \"origin\",         # optional, default: \"origin\"\n  local_branch: \"develop\",  # optional, aliased by \"branch\", default is set to current branch\n  remote_branch: \"develop\", # optional, default is set to local_branch\n  force: true,    # optional, default: false\n  force_with_lease: true,   # optional, default: false\n  tags: false,    # optional, default: true\n  no_verify: true,# optional, default: false\n  set_upstream: true        # optional, default: false\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Fastlane in Codemagic Workflow\nDESCRIPTION: This snippet demonstrates how to install dependencies and run a Fastlane lane named 'beta' in a Codemagic workflow. It uses Bundler to ensure consistent gem versions across different environments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codemagic.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  - bundle install\n  - bundle exec fastlane beta\n```\n\n----------------------------------------\n\nTITLE: Using conditional logic in update_plist processing block\nDESCRIPTION: Shows how to incorporate conditional logic inside the processing block to set different values based on environment conditions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_plist.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_plist( # The block can contain logic too\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    if options[:environment] == \"production\"\n      plist[:CLIENT_ID] = \"new_client_id_production\"\n    else\n      plist[:CLIENT_ID] = \"new_client_id_development\"\n    end\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Storing Build Number in a Variable in Ruby\nDESCRIPTION: Increments the build number and stores the new value in a variable for later use in the fastlane workflow.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_number = increment_build_number\n```\n\n----------------------------------------\n\nTITLE: Basic Gym Configuration File Example\nDESCRIPTION: Sample Gymfile showing common configuration options including scheme, SDK, clean build and output settings\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Git Commit Information in Ruby\nDESCRIPTION: This snippet demonstrates how to use the last_git_commit action to retrieve various details about the most recent git commit, including the commit message, author, email, and hash.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/last_git_commit.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncommit = last_git_commit\npilot(changelog: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nauthor_email = commit[:author_email] # email of the author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Release Notes from Git Commits\nDESCRIPTION: Lane snippet showing how to generate changelog from Git commit messages and use it for Crashlytics distribution. This automatically summarizes work done since the last tag.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Running upload_to_play_store Action from CLI\nDESCRIPTION: Demonstrates how to run the upload_to_play_store action directly from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run upload_to_play_store\n```\n\n----------------------------------------\n\nTITLE: Using match Alias for Code Signing\nDESCRIPTION: Ruby code example showing the match command, which is an alias for sync_code_signing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nmatch   # alias for \"sync_code_signing\"\n```\n\n----------------------------------------\n\nTITLE: Getting Build Number from Xcode Project using Ruby\nDESCRIPTION: Retrieves the build number from a specified Xcode project file. This code demonstrates the basic usage of the get_build_number action within a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_number = get_build_number(xcodeproj: \"Project.xcodeproj\")\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode using fastlane xcode_install action\nDESCRIPTION: Example showing how to install a specific version of Xcode using the xcode_install fastlane action. This snippet demonstrates installing Xcode version 7.1.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_install.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcode_install(version: \"7.1\")\n```\n\n----------------------------------------\n\nTITLE: Creating XCFramework from Multiple Libraries\nDESCRIPTION: Creates an XCFramework by combining multiple libraries without headers or dSYMs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_xcframework.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_xcframework(libraries: ['LibraryA.so', 'LibraryB.so'], output: 'UniversalFramework.xcframework')\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for iOS App Build in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to build an iOS app using Fastlane. It specifies the trigger conditions, runner environment, and steps to execute the 'fastlane beta' command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/github.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: build-ios-app\non:\n  push:\n    branches:\n      - 'master'\njobs:\n  build:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v2\n      - run: fastlane beta\n        env:\n          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}\n```\n\n----------------------------------------\n\nTITLE: Adding custom launch arguments to screengrab tests\nDESCRIPTION: Example of passing custom arguments to tests with screengrab and accessing them in the test code via InstrumentationRegistry.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nlaunch_arguments([\n  \"username hjanuschka\",\n  \"build_number 201\"\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Development Certificates with Fastlane Cert in Ruby\nDESCRIPTION: Generating a development certificate instead of the default distribution certificate by specifying parameters. This example creates a development certificate for a specific user account.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cert.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget_certificates(\n  development: true,\n  username: \"user@email.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Number of Commits Usage in Ruby\nDESCRIPTION: Example showing how to use number_of_commits to set the build number based on the number of commits in the current branch.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/number_of_commits.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_build_number(build_number: number_of_commits)\n```\n\n----------------------------------------\n\nTITLE: Scanfile Configuration Example\nDESCRIPTION: A sample Scanfile that defines default parameters for scan, including scheme, devices, clean flag, and output types.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby-skip-tests\nCODE:\n```\nscheme(\"Example\")\ndevices([\"iPhone 6s\", \"iPad Air\"])\n\nclean(true)\n\noutput_types(\"html\")\n```\n\n----------------------------------------\n\nTITLE: Setting Localized App Descriptions in Fastlane Deliver\nDESCRIPTION: Specifies localized app descriptions for different territories/languages. Uses a hash with language codes as keys and description strings as values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\ndescription({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Artifact Copying with IPA Output in Ruby\nDESCRIPTION: Example demonstrating how to conditionally copy artifacts based on lane context variables, specifically copying the IPA file generated by the gym action if it exists.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/copy_artifacts.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Copy the .ipa created by _gym_ if it was successfully created\nartifacts = []\nartifacts << lane_context[SharedValues::IPA_OUTPUT_PATH] if lane_context[SharedValues::IPA_OUTPUT_PATH]\ncopy_artifacts(\n   artifacts: artifacts\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Fastfile Deliver Configuration\nDESCRIPTION: Extended configuration of deliver action with additional options in Fastfile\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndeliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enable Basic Automatic Code Signing in Ruby\nDESCRIPTION: Basic example of enabling automatic code signing with no additional parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nenable_automatic_code_signing\n```\n\n----------------------------------------\n\nTITLE: Basic Hockey Upload in Ruby with Fastlane\nDESCRIPTION: A simple example showing how to upload an IPA file to HockeyApp using the hockey action with an API token and changelog notes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hockey.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhockey(\n  api_token: \"...\",\n  ipa: \"./app.ipa\",\n  notes: \"Changelog\"\n)\n```\n\n----------------------------------------\n\nTITLE: Incrementing build number using GitLab CI job ID in Ruby\nDESCRIPTION: This fastlane lane demonstrates how to auto-increment the build number using the GitLab CI job ID. It uses the `increment_build_number` action and sets the build number to the value of the CI_JOB_ID environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/gitlab.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_JOB_ID'])\nend\n```\n\n----------------------------------------\n\nTITLE: Building for Testing with Custom Derived Data Path\nDESCRIPTION: Shows how to build for testing using a custom derived data path. This is useful when you want to separate the build process from the test execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests(\n   derived_data_path: \"my_folder\",\n   build_for_testing: true\n)\n```\n\n----------------------------------------\n\nTITLE: Decrypting Private Key from match Repository\nDESCRIPTION: Command to decrypt the private key file stored in the match repository into a PEM format file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nopenssl aes-256-cbc -k \"<password>\" -in \"certs/distribution/<unique-id>.p12\" -out \"key.pem\" -a -d -md [md5|sha256]\n```\n\n----------------------------------------\n\nTITLE: Building Android App Bundle (AAB) with Gradle in Ruby\nDESCRIPTION: Example showing how to create an Android App Bundle (AAB) instead of an APK using the bundle task.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"bundle\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n```\n\n----------------------------------------\n\nTITLE: Listing All TestFlight Builds\nDESCRIPTION: Displays a list of all builds for a specific application, showing version numbers, build numbers, and installation counts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot builds\n```\n\n----------------------------------------\n\nTITLE: Creating a New OneSignal Application with Fastlane\nDESCRIPTION: This example demonstrates how to create a new OneSignal application with optional configurations for Android GCM, FCM JSON, and Apple push notifications. It requires an auth token and app name, with several optional parameters for platform-specific configurations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/onesignal.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nonesignal(\n  auth_token: \"Your OneSignal Auth Token\",\n  app_name: \"Name for OneSignal App\",\n  android_token: \"Your Android GCM key (optional)\",\n  android_gcm_sender_id: \"Your Android GCM Sender ID (optional)\",\n  fcm_json: \"Path to FCM Service Account JSON File (optional)\",\n  apns_p12: \"Path to Apple .p12 file (optional)\",\n  apns_p12_password: \"Password for .p12 file (optional)\",\n  apns_env: \"production/sandbox (defaults to production)\",\n  organization_id: \"Onesignal organization id (optional)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Version Code and Name Configuration in Ruby\nDESCRIPTION: Shows how to modify Android app version code and name using Gradle properties.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n\n  properties: {\n    \"android.injected.version.code\" => 100,\n    \"android.injected.version.name\" => \"1.0.0\",\n    # ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Application Services with Produce in Bash\nDESCRIPTION: This command enables specific application services (HomeKit and HealthKit) for an existing App ID using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce enable_services --homekit --healthkit\n```\n\n----------------------------------------\n\nTITLE: App Store Build Number Query with Authentication - Ruby\nDESCRIPTION: Retrieves build number using app identifier and Apple ID credentials.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_build_number.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\napp_store_build_number(\n  app_identifier: \"app.identifier\",\n  username: \"user@host.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Arguments for Snapshot in Ruby\nDESCRIPTION: Ruby code for providing additional arguments to your app during snapshot execution. These arguments will be available in your app through ProcessInfo.processInfo.arguments or as key-value pairs in UserDefaults.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ConfigItem for Fastlane Actions\nDESCRIPTION: Shows how to define configuration parameters for fastlane actions using FastlaneCore::ConfigItem. This example creates a file parameter that is required and accepts a string value.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :file,\n  env_name: \"MY_NEW_ACTION_FILE\",\n  description: \"A file to operate on\",\n  type: String,\n  optional: false\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase App Distribution Plugin\nDESCRIPTION: Command to add the Firebase App Distribution plugin to Fastlane for distributing apps to Firebase testers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane add_plugin firebase_app_distribution\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Parameters with Default Values\nDESCRIPTION: Shows how to define optional parameters with default values using FastlaneCore::ConfigItem.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :build_configuration,\n  description: \"Which build configuration to use\",\n  type: String,\n  optional: true,\n  default_value: \"Release\"\n),\nFastlaneCore::ConfigItem.new(\n  key: :offset,\n  description: \"Offset to start from\",\n  type: Integer,\n  optional: true,\n  default_value: 0\n),\nFastlaneCore::ConfigItem.new(\n  key: :workspace,\n  description: \"Optional workspace path\",\n  type: String,\n  optional: true\n  # Not every project has a workspace, so nil is a good default value here.\n)\n```\n\n----------------------------------------\n\nTITLE: Associating an App with an App Group using Produce in Bash\nDESCRIPTION: This command associates an existing app with a specified App Group using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce associate_group -a com.krausefx.app group.krausefx\n```\n\n----------------------------------------\n\nTITLE: Basic Version Number Retrieval with Fastlane\nDESCRIPTION: Simple example of getting a project version number by specifying the Xcode project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_version_number.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nversion = get_version_number(xcodeproj: \"Project.xcodeproj\")\n```\n\n----------------------------------------\n\nTITLE: Running build_app with Parameters via CLI\nDESCRIPTION: Example of running build_app action with custom parameters through the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run build_app parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Mailgun Email Configuration in Ruby\nDESCRIPTION: Comprehensive example of the mailgun action with all major parameters including custom API credentials, template usage, custom placeholders, and file attachment. This demonstrates the full flexibility of the mailgun integration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/mailgun.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmailgun(\n  postmaster: \"MY_POSTMASTER\",\n  apikey: \"MY_API_KEY\",\n  to: \"DESTINATION_EMAIL\",\n  from: \"EMAIL_FROM_NAME\",\n  reply_to: \"EMAIL_REPLY_TO\",\n  success: true,\n  message: \"Mail Body\",\n  app_link: \"http://www.myapplink.com\",\n  ci_build_link: \"http://www.mycibuildlink.com\",\n  template_path: \"HTML_TEMPLATE_PATH\",\n  custom_placeholders: {\n    :var1 => 123,\n    :var2 => \"string\"\n  },\n  attachment: \"dirname/filename.ext\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Supply Action from CLI\nDESCRIPTION: Command to execute the 'supply' action directly from the terminal without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run supply\n```\n\n----------------------------------------\n\nTITLE: Detailed S3 Upload Configuration in Ruby for Fastlane\nDESCRIPTION: A comprehensive example of using the s3 action in a Fastlane file, showcasing various configuration options including access keys, bucket, file paths, and metadata upload settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/s3.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ns3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV[\"S3_ACCESS_KEY\"],     # Required from user.\n  secret_access_key: ENV[\"S3_SECRET_ACCESS_KEY\"], # Required from user.\n  bucket: ENV[\"S3_BUCKET\"],   # Required from user.\n  ipa: \"AppName.ipa\",         # Optional if you use `ipa` to build\n  dsym: \"AppName.app.dSYM.zip\",         # Optional if you use `ipa` to build\n  path: \"v{CFBundleShortVersionString}_b{CFBundleVersion}/\", # This is actually the default.\n  upload_metadata: true,      # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name: \"app_version.json\",# Name of the file to upload to S3. Defaults to \"version.json\"\n  version_template_path: \"path/to/erb\"  # Path to an ERB to configure the structure of the version JSON file\n)\n```\n\n----------------------------------------\n\nTITLE: App Signing and Zipalign Configuration in Ruby\nDESCRIPTION: Configures automatic signing and zipaligning of Android apps using Gradle properties.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"assemble\",\n  build_type: \"Release\",\n  print_command: false,\n  properties: {\n    \"android.injected.signing.store.file\" => \"keystore.jks\",\n    \"android.injected.signing.store.password\" => \"store_password\",\n    \"android.injected.signing.key.alias\" => \"key_alias\",\n    \"android.injected.signing.key.password\" => \"key_password\",\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Utility Actions in Fastlane Plugins\nDESCRIPTION: Demonstrates how to call built-in utility actions like git commands from within custom actions using the other_action prefix. These are simple utility functions that are safe to use within custom actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nother_action.git_add\n```\n\nLANGUAGE: ruby\nCODE:\n```\nother_action.git_commit\n```\n\n----------------------------------------\n\nTITLE: Invoking Callback Parameters in Fastlane Actions\nDESCRIPTION: Shows how to safely invoke a callback parameter within an action, checking first if it was provided and then calling it with any required arguments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nparams[:callback].call(result) if params[:callback]\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload with Beta Metadata\nDESCRIPTION: Upload to TestFlight with beta testing information and changelog\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Devices from File in Ruby\nDESCRIPTION: This example shows how to register devices using a standard UDID export .txt file. This method is useful when you have a large number of devices or want to manage the device list separately from your fastlane script.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_devices.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nregister_devices(\n  devices_file: \"./devices.txt\"\n) # Alternatively provide a standard UDID export .txt file, see the Apple Sample (http://devimages.apple.com/downloads/devices/Multiple-Upload-Samples.zip)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fastlane Lane for Building APKs and Running Screengrab\nDESCRIPTION: Ruby code for creating a Fastlane lane that builds debug and test APKs before running the screengrab command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndesc \"Build debug and test APK for screenshots\"\nlane :build_and_screengrab do\n  build_android_app(\n    task: 'assemble',\n    build_type: 'Debug'\n  )\n  build_android_app(\n    task: 'assemble',\n    build_type: 'AndroidTest'\n  )\n  screengrab()\nend\n```\n\n----------------------------------------\n\nTITLE: Downloading JSON File Using Fastlane Download Action in Ruby\nDESCRIPTION: This snippet demonstrates how to use the 'download' action in Fastlane to retrieve a JSON file from a remote server. The content of the downloaded file is stored in the 'data' variable and is automatically parsed into a Ruby data structure.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndata = download(url: \"https://host.com/api.json\")\n```\n\n----------------------------------------\n\nTITLE: Setting Git Bearer Authorization in Ruby\nDESCRIPTION: Example of setting Git bearer authorization for match on Azure DevOps using a parameter or environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmatch(git_bearer_authorization: '<YOUR TOKEN>')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nENV['MATCH_GIT_BEARER_AUTHORIZATION'] = '<YOUR TOKEN>'\nmatch\n```\n\n----------------------------------------\n\nTITLE: Uploading an iOS App to TestFairy in Ruby\nDESCRIPTION: This snippet demonstrates how to upload an iOS IPA file to TestFairy using Fastlane. It requires an API key from the TestFairy settings page and accepts an IPA file path and a comment which includes the build number from the shared lane context.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testfairy.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntestfairy(\n  api_key: \"...\",\n  ipa: \"./ipa_file.ipa\",\n  comment: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced sigh Usage with Options in Ruby\nDESCRIPTION: This example demonstrates advanced usage of sigh (get_provisioning_profile) with additional options. It generates an ad hoc profile, forces regeneration, and specifies a custom filename for the provisioning profile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sigh.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget_provisioning_profile(\n  adhoc: true,\n  force: true,\n  filename: \"myFile.mobileprovision\"\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading an IPA to Installr with Fastlane\nDESCRIPTION: Example of using the installr action to upload an IPA file to Installr. The snippet demonstrates setting the API token, IPA path, release notes, notification groups, and groups to add.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/installr.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ninstallr(\n  api_token: \"...\",\n  ipa: \"test.ipa\",\n  notes: \"The next great version of the app!\",\n  notify: \"dev,qa\",\n  add: \"exec,ops\"\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing Code Signing for Multiple App Identifiers\nDESCRIPTION: Ruby code example showing how to sync code signing for multiple app identifiers in a single command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nsync_code_signing(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.sleepy\"])\n```\n\n----------------------------------------\n\nTITLE: Basic App Building with Scheme and Workspace\nDESCRIPTION: Simple example of building an app by specifying the scheme and workspace parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n```\n\n----------------------------------------\n\nTITLE: Generic Automatic Code Signing Enable Action in Ruby\nDESCRIPTION: Uses the generic automatic_code_signing action to enable automatic signing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nautomatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: true\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests from an Existing XCTestRun Package\nDESCRIPTION: Shows how to run tests using an existing .xctestrun package. This allows for more control over the test execution environment.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests(\n   xctestrun: \"/path/to/mytests.xctestrun\"\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for Play Store Upload\nDESCRIPTION: Example of running the upload action from terminal with custom parameters using key:value syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store_internal_app_sharing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run upload_to_play_store_internal_app_sharing parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Associating an app with a merchant identifier using fastlane produce\nDESCRIPTION: Command to associate an iOS app with a specific Apple Pay Merchant Identifier using fastlane produce.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production\n```\n\n----------------------------------------\n\nTITLE: Passing Array Parameters in Fastlane\nDESCRIPTION: Shows different ways to pass array parameters to fastlane actions, including using comma-separated strings that get automatically converted to arrays.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmy_new_action(files: \"file1.txt,file2.txt\")\n```\n\n----------------------------------------\n\nTITLE: Number of Commits with All Option in Ruby\nDESCRIPTION: Example demonstrating how to get the total number of all commits across all branches and use it as the build number.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/number_of_commits.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_number = number_of_commits(all: true)\nincrement_build_number(build_number: build_number)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of sigh in Ruby\nDESCRIPTION: This snippet demonstrates the basic usage of the sigh action, which is an alias for get_provisioning_profile. It will create, repair, or download an App Store provisioning profile by default.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sigh.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_provisioning_profile\n```\n\n----------------------------------------\n\nTITLE: Migrating Match from Git Repo to Google Cloud\nDESCRIPTION: Command to migrate all existing code signing identities and profiles from a Git repository to Google Cloud Storage.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match migrate\n```\n\n----------------------------------------\n\nTITLE: Resigning IPA with Multiple Provisioning Profiles in Ruby\nDESCRIPTION: This example shows how to use the 'resign' action with multiple provisioning profiles for nested applications or app extensions. It uses a hash to associate provisioning profile paths with bundle identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/resign.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nresign(\n  ipa: \"path/to/ipa\", # can omit if using the `ipa` action\n  signing_identity: \"iPhone Distribution: Luka Mirosevic (0123456789)\",\n  provisioning_profile: {\n    \"com.example.awesome-app\" => \"path/to/profile\",\n    \"com.example.awesome-app.app-extension\" => \"path/to/app-extension/profile\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane in Verbose Mode\nDESCRIPTION: Command to execute fastlane with additional debug output by enabling verbose mode. Used for troubleshooting code signing and build issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane [lane] --verbose\n```\n\n----------------------------------------\n\nTITLE: Generate App Privacy Details JSON without Uploading in Ruby Fastfile\nDESCRIPTION: This Ruby code demonstrates how to call the upload_app_privacy_details_to_app_store action with skip_upload set to true in a Fastfile. It will save privacy details to a JSON file without uploading to App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  skip_upload: true\n)\n```\n\n----------------------------------------\n\nTITLE: Fastlane Lane with Error Handling\nDESCRIPTION: Example of a Fastlane lane that uses gym to build an app and includes error handling with Slack notifications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_app.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s,\n    success: false,\n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s }\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Pushing Podspec with Private Dependencies in Ruby\nDESCRIPTION: This example shows how to push a Podspec that has dependencies on private pods. It includes specifying additional sources for linting to succeed.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_push.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npod_push(path: \"TMessages.podspec\", repo: \"MyRepo\", sources: [\"https://github.com/username/Specs\", \"https://github.com/CocoaPods/Specs\"])\n```\n\n----------------------------------------\n\nTITLE: Basic Screenshot Capture in Ruby\nDESCRIPTION: Simple example of capturing Android screenshots using screengrab\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_android_screenshots\n```\n\n----------------------------------------\n\nTITLE: Using xcode_select in Fastfile\nDESCRIPTION: Example of how to use the xcode_select action in a Fastfile to specify a particular Xcode installation path. This changes the Xcode path for building iOS or macOS applications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_select.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcode_select(\"/Applications/Xcode-8.3.2.app\")\n```\n\n----------------------------------------\n\nTITLE: Running ensure_git_status_clean from CLI\nDESCRIPTION: This snippet shows how to run the ensure_git_status_clean action directly from the command line interface. It allows for one-off execution without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_status_clean.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run ensure_git_status_clean\n```\n\n----------------------------------------\n\nTITLE: Advanced CocoaPods Installation\nDESCRIPTION: Example showing how to run pod install with custom options like clean install and custom Podfile path\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cocoapods.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncocoapods(\n  clean_install: true,\n  podfile: \"./CustomPodfile\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running build_ios_app with Parameters\nDESCRIPTION: Example of running build_ios_app action with custom parameters from terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_21\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run build_ios_app parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Most Recent Git Tag in Ruby\nDESCRIPTION: This snippet demonstrates how to use the last_git_tag action to retrieve the most recent git tag. It can be used without any parameters to get the latest tag across all branches.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/last_git_tag.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlast_git_tag\n```\n\n----------------------------------------\n\nTITLE: Importing TestFlight Testers\nDESCRIPTION: Imports external testers from a CSV file, which should be formatted with name, email, and group information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot import\n```\n\n----------------------------------------\n\nTITLE: Initializing Snapshot in Swift UI Tests\nDESCRIPTION: Core setup code required in Swift UI Test class setUp() method to initialize snapshot functionality.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n```\n\n----------------------------------------\n\nTITLE: Configuring SPM Build Command in Ruby\nDESCRIPTION: Shows how to use the 'spm' action with custom build settings, including command, scratch path, and configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spm.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nspm(\n  command: \"build\",\n  scratch_path: \"./build\",\n  configuration: \"release\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Credentials using Fastlane CredentialsManager CLI\nDESCRIPTION: Shows how to add credentials to the system keychain using Fastlane's CredentialsManager command-line interface, useful for CI environments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane fastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of get_push_certificate in Ruby\nDESCRIPTION: Demonstrates the simplest way to use the get_push_certificate action in a Fastfile. This will generate a new push certificate if needed.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_push_certificate.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_push_certificate\n```\n\n----------------------------------------\n\nTITLE: Configuring Precheckfile with Custom Rules\nDESCRIPTION: Example Precheckfile configuration showing how to customize rules by skipping, warning, or erroring on different types of metadata issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# indicates that your metadata will not be checked by this rule\nnegative_apple_sentiment(level: :skip)\n\n# when triggered, this rule will warn you of a potential problem\ncurse_words(level: :warn)\n\n# show error and prevent any further commands from running after fastlane precheck finishes\nreachable_urls(level: :error)\n\n# pass in whatever words you want to check for\ncustom_text(data: [\"chrome\", \"webos\"], \n           level: :warn)\n```\n\n----------------------------------------\n\nTITLE: Uploading dSYM Symbolication Files to Sentry in Ruby\nDESCRIPTION: This example shows how to upload dSYM files to Sentry using the upload_symbols_to_sentry action. It requires an authentication token, organization slug, project slug, and the path to the dSYM zip file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_sentry.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupload_symbols_to_sentry(\n  auth_token: \"...\",\n  org_slug: \"...\",\n  project_slug: \"...\",\n  dsym_path: \"./App.dSYM.zip\"\n)\n```\n\n----------------------------------------\n\nTITLE: Rolling Out APK to Beta Track with Percentage in Shell\nDESCRIPTION: Example showing how to upload an APK to the beta track with a 50% rollout using the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --track beta --rollout 0.5\n```\n\n----------------------------------------\n\nTITLE: CLI Command for GitHub Release Creation\nDESCRIPTION: Command line instructions for running the set_github_release action directly from terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_github_release.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run set_github_release\n```\n\n----------------------------------------\n\nTITLE: Customized Git Tag Addition in Ruby\nDESCRIPTION: Example showing how to add a git tag with custom grouping, prefix, postfix, and build number parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_git_tag.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nadd_git_tag(\n  grouping: \"fastlane-builds\",\n  includes_lane: true,\n  prefix: \"v\",\n  postfix: \"-RC1\",\n  build_number: 123\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring check_app_store_metadata with Custom Rule Levels\nDESCRIPTION: Example showing how to use the check_app_store_metadata action with custom rule levels for specific checks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ncheck_app_store_metadata(\n  negative_apple_sentiment: [level: :skip], # Set to skip to not run the `negative_apple_sentiment` rule\n  curse_words: [level: :warn] # Set to warn to only warn on curse word check failures\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Command Line Parameters in Fastlane\nDESCRIPTION: Demonstrates how to pass and access parameters from command line to Fastlane lanes\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n```\n\n----------------------------------------\n\nTITLE: Authenticated TestFlight Upload with Provider in Ruby\nDESCRIPTION: Example showing how to upload to TestFlight with specific username, app identifier, and iTunes provider configuration\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n```\n\n----------------------------------------\n\nTITLE: Running update_project_code_signing Action with Parameters\nDESCRIPTION: Example of running the update_project_code_signing action with custom parameters from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_code_signing.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run update_project_code_signing parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running XCTest with Custom Simulator - Ruby\nDESCRIPTION: Example showing how to run XCTest on a specific iOS simulator using the xctest action. The destination parameter specifies the target simulator device and OS version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctest.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxctest(\n  destination: \"name=iPhone 7s,OS=10.0\"\n)\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Xcode Version with xcversion in Ruby\nDESCRIPTION: Selects a specific Xcode version (8.1) using the xcversion action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcversion.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcversion(version: \"8.1\") # Selects Xcode 8.1.0\n```\n\n----------------------------------------\n\nTITLE: Updating URL Schemes with a Custom Block in Ruby\nDESCRIPTION: This example shows how to use the update_url_schemes action with a custom block to modify the existing URL schemes. The block receives the current schemes as a parameter and can add or modify them as needed.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_url_schemes.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_url_schemes(\n  path: \"path/to/Info.plist\",\n  update_url_schemes: proc do |schemes|\n    schemes + [\"anotherscheme\"]\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing test launch arguments in Android tests\nDESCRIPTION: Java code showing how to retrieve custom arguments provided through launch_arguments in your instrumentation tests.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload with Authentication\nDESCRIPTION: Upload to TestFlight with specific account credentials and app identifier\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n```\n\n----------------------------------------\n\nTITLE: Using External Export Options Plist File\nDESCRIPTION: Shows how to specify an external plist file for export options when building an iOS app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nexport_options(\"./ExportOptions.plist\")\n```\n\n----------------------------------------\n\nTITLE: Uploading a Build with Changelog to TestFlight\nDESCRIPTION: Command to upload a build to TestFlight with a specified changelog, which will be displayed to testers when they receive the build.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload --changelog \"Something that is new here\"\n```\n\n----------------------------------------\n\nTITLE: Executing a fastlane lane from command line\nDESCRIPTION: Command to run the 'playstore' lane in fastlane from the terminal. This will execute the Gradle build tasks defined in the lane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/release-deployment.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane playstore\n```\n\n----------------------------------------\n\nTITLE: Integrating scan in a fastlane lane in Ruby\nDESCRIPTION: Example of including the scan action within a fastlane workflow. This defines a 'test' lane that runs the scan action with a specific scheme parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nlane :test do\n  scan(scheme: \"Example\")\nend\n```\n\n----------------------------------------\n\nTITLE: Searching for Xcode Distribution Log Files\nDESCRIPTION: Command to find all Xcode distribution log files in the system, which contain detailed error information useful for debugging code signing issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/common-issues.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo find /private/var -name \"*.xcdistributionlogs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Appfile with Google Play Store Credentials in Ruby\nDESCRIPTION: This snippet shows how to configure the fastlane Appfile with your Google Play Store API credentials. It specifies the path to the JSON key file and the package name of your Android application.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/google-credentials.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\njson_key_file(\"path/to/your/play-store-credentials.json\")\npackage_name(\"my.package.name\")\n```\n\n----------------------------------------\n\nTITLE: Removing a Tester from Specific TestFlight Groups\nDESCRIPTION: Command to remove a beta tester from specific groups in TestFlight while keeping them in other groups they might belong to.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot remove felix@krausefx.com -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Setting Localized App Keywords in Fastlane Deliver\nDESCRIPTION: Specifies keywords for App Store search optimization in different languages. Keywords should be comma-separated within a string for each language code.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nkeywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Available Parameters for Enabling Services in Fastlane Produce\nDESCRIPTION: Complete list of available command line parameters for enabling different iOS app capabilities and services through the 'produce enable_services' command, including options for iCloud, Apple Pay, Game Center, and many other Apple services.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\n--access-wifi                         Enable Access Wifi\n--app-attest                          Enable App Attest\n--app-group                           Enable App Group\n--apple-pay                           Enable Apple Pay\n--associated-domains                  Enable Associated Domains\n--auto-fill-credential                Enable Auto Fill Credential\n--class-kit                           Enable Class Kit\n--icloud STRING                        Enable iCloud, suitable values are \"xcode5_compatible\" and \"xcode6_compatible\"\n--custom-network-protocol             Enable Custom Network Protocol\n--data-protection STRING              Enable Data Protection, suitable values are \"complete\", \"unlessopen\" and \"untilfirstauth\"\n--extended-virtual-address-space      Enable Extended Virtual Address Space\n--game-center STRING                  Enable Game Center, suitable values are \"ios\" and \"macos\n--health-kit                          Enable Health Kit\n--hls-interstitial-preview            Enable Hls Interstitial Preview\n--home-kit                            Enable Home Kit\n--hotspot                             Enable Hotspot\n--in-app-purchase                     Enable In App Purchase\n--inter-app-audio                     Enable Inter App Audio\n--low-latency-hls                     Enable Low Latency Hls\n--managed-associated-domains          Enable Managed Associated Domains\n--maps                                Enable Maps\n--multipath                           Enable Multipath\n--network-extension                   Enable Network Extension\n--nfc-tag-reading                     Enable NFC Tag Reading\n--personal-vpn                        Enable Personal VPN\n--passbook                            Enable Passbook (deprecated)\n--push-notification                   Enable Push Notification\n--sign-in-with-apple                  Enable Sign In With Apple\n--siri-kit                            Enable Siri Kit\n--system-extension                    Enable System Extension\n--user-management                     Enable User Management\n--vpn-configuration                   Enable Vpn Configuration (deprecated)\n--wallet                              Enable Wallet\n--wireless-accessory                  Enable Wireless Accessory\n--car-play-audio-app                  Enable Car Play Audio App\n--car-play-messaging-app              Enable Car Play Messaging App\n--car-play-navigation-app             Enable Car Play Navigation App\n--car-play-voip-calling-app           Enable Car Play Voip Calling App\n--critical-alerts                     Enable Critical Alerts\n--hotspot-helper                      Enable Hotspot Helper\n--driver-kit                          Enable DriverKit\n--driver-kit-endpoint-security        Enable DriverKit Endpoint Security\n--driver-kit-family-hid-device        Enable DriverKit Family HID Device\n--driver-kit-family-networking        Enable DriverKit Family Networking\n--driver-kit-family-serial            Enable DriverKit Family Serial\n--driver-kit-hid-event-service        Enable DriverKit HID EventService\n--driver-kit-transport-hid            Enable DriverKit Transport HID\n--multitasking-camera-access          Enable Multitasking Camera Access\n--sf-universal-link-api               Enable SFUniversalLink API\n--vp9-decoder                         Enable VP9 Decoder\n--music-kit                           Enable MusicKit\n--shazam-kit                          Enable ShazamKit\n--communication-notifications         Enable Communication Notifications\n--group-activities                    Enable Group Activities\n--health-kit-estimate-recalibration   Enable HealthKit Estimate Recalibration\n--time-sensitive-notifications        Enable Time Sensitive Notifications\n```\n\n----------------------------------------\n\nTITLE: Using Non-Boolean Age Rating Values in App Store Submissions\nDESCRIPTION: Non-boolean age rating values and their corresponding keys for App Store Connect submissions. Includes both legacy numeric values and newer string constants.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_34\n\nLANGUAGE: markdown\nCODE:\n```\n**Values**\n\n- 0: None (Legacy value, use `NONE` instead)\n- 1: Infrequent/Mild (Legacy value, use `INFREQUENT_OR_MILD` instead)\n- 2: Frequent/Intense (Legacy value, use `FREQUENT_OR_INTENSE`instead)\n\n- `NONE`\n- `INFREQUENT_OR_MILD`\n- `FREQUENT_OR_INTENSE`\n\n**Keys**\n\n- 'alcoholTobaccoOrDrugUseOrReferences'\n- 'contests'\n- 'gamblingSimulated'\n- 'medicalOrTreatmentInformation'\n- 'profanityOrCrudeHumor'\n\n- 'sexualContentGraphicAndNudity'\n- 'sexualContentOrNudity'\n- 'horrorOrFearThemes'\n- 'matureOrSuggestiveThemes'\n- 'unrestrictedWebAccess'\n- 'violenceCartoonOrFantasy'\n- 'violenceRealisticProlongedGraphicOrSadistic'\n- 'violenceRealistic'\n- 'kidsAgeBand'\n```\n\n----------------------------------------\n\nTITLE: Shell Command Execution Examples\nDESCRIPTION: Demonstrates different methods for executing shell commands in Fastlane actions including system calls and command output capture.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_26\n\nLANGUAGE: Ruby\nCODE:\n```\nsystem \"cat fastlane/Fastfile\"\n\npod_cmd = `which pod`\nUI.important \"'pod' command not found\" if pod_cmd.empty?\n\nsh \"pwd\"\n\nsh \"ls\", \"-la\" do |status, result, command|\n  unless status.success?\n    UI.error \"Command #{command} (pid #{status.pid}) failed with status #{status.exitstatus}\"\n  end\n  UI.message \"Output is #{result.inspect}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using Existing Derived Data\nDESCRIPTION: Demonstrates how to run tests using derived data from a previous build. This can speed up the testing process by skipping the build phase.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests(\n   derived_data_path: \"my_folder\",\n   test_without_building: true\n)\n```\n\n----------------------------------------\n\nTITLE: Running tests without building using run_tests in Ruby\nDESCRIPTION: Example demonstrating how to run tests using previously built artifacts from a derived data path. This skips the build phase and directly runs tests, saving time in the testing process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# run tests using derived data from prev. build\nrun_tests(\n   derived_data_path: \"my_folder\",\n   test_without_building: true\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading App Privacy Details in Swift Fastfile\nDESCRIPTION: This Swift code shows how to call the uploadAppPrivacyDetailsToAppStore action in a Fastfile.swift file. It includes the necessary parameters for authenticating with App Store Connect and identifying the app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nuploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\")\n```\n\n----------------------------------------\n\nTITLE: Using Filename Pattern to Force Landscape Orientation\nDESCRIPTION: Example showing how to use force_orientation_block to detect the word 'landscape' in filenames and apply landscape_right orientation to those screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# It frames the screenshots in landscape right whenever the filename contains `landscape` word\nframeit(\n  silver: true,\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    f = filename.downcase\n    if f.include?(\"landscape\")\n      :landscape_right\n    end\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Provisioning Profile with Fastlane Ruby Action\nDESCRIPTION: Example showing how to install an iOS/macOS provisioning profile from a specified file path using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/install_provisioning_profile.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ninstall_provisioning_profile(path: \"profiles/profile.mobileprovision\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Specific Xcode Installation Path in Ruby\nDESCRIPTION: This example shows how to use the verify_xcode action with a specific Xcode installation path. It verifies the Xcode installation located at the provided path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_xcode.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nverify_xcode(xcode_path: \"/Applications/Xcode.app\")\n```\n\n----------------------------------------\n\nTITLE: Customizing snapshot Build Configuration\nDESCRIPTION: Ruby code showing how to customize the build configuration for snapshot, including scheme, configuration, and SDK.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_screenshots(scheme: \"UITests\", configuration: \"Release\", sdk: \"iphonesimulator\")\n```\n\n----------------------------------------\n\nTITLE: Basic Download from Play Store with Fastlane in Ruby\nDESCRIPTION: Simple example showing how to download metadata and binaries from Google Play Store using the download_from_play_store action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_from_play_store.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_from_play_store\n```\n\n----------------------------------------\n\nTITLE: Importing TestFlight Testers from CSV\nDESCRIPTION: Command to import external testers from a CSV file with format 'firstname,lastname,email,group-1;group-2'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot import\n```\n\n----------------------------------------\n\nTITLE: Passing Launch Arguments to App During Snapshot Testing\nDESCRIPTION: Ruby code example showing how to provide additional arguments to your app during snapshot testing. These arguments will be available through ProcessInfo or UserDefaults.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n```\n\n----------------------------------------\n\nTITLE: Framefile Configuration Example\nDESCRIPTION: Example JSON configuration for customizing frame parameters including background, text, and device specifications\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    ...\n  },\n  \"data\": [\n     ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing OneSignal Application with Fastlane\nDESCRIPTION: This example shows how to update an existing OneSignal application using its app ID. Similar to creating a new app, it supports updating the name and various push notification configurations for both iOS and Android platforms.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/onesignal.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nonesignal(\n  app_id: \"Your OneSignal App ID\",\n  auth_token: \"Your OneSignal Auth Token\",\n  app_name: \"New Name for OneSignal App\",\n  android_token: \"Your Android GCM key (optional)\",\n  android_gcm_sender_id: \"Your Android GCM Sender ID (optional)\",\n  fcm_json: \"Path to FCM Service Account JSON File (optional)\",\n  apns_p12: \"Path to Apple .p12 file (optional)\",\n  apns_p12_password: \"Password for .p12 file (optional)\",\n  apns_env: \"production/sandbox (defaults to production)\",\n  organization_id: \"Onesignal organization id (optional)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Data with lcov in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the lcov action in a Fastfile to generate coverage data. It specifies the project name, scheme, and output directory for the coverage reports.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lcov.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlcov(\n  project_name: \"ProjectName\",\n  scheme: \"yourScheme\",\n  output_dir: \"cov_reports\" # This value is optional. Default is coverage_reports\n)\n```\n\n----------------------------------------\n\nTITLE: Using pem Alias for get_push_certificate in Ruby\nDESCRIPTION: Shows how to use the 'pem' alias for the get_push_certificate action in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_push_certificate.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npem # alias for \"get_push_certificate\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Xcode Version for Build\nDESCRIPTION: Shows how to use a specific Xcode installation by setting the DEVELOPER_DIR environment variable before running the gym command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym\n```\n\n----------------------------------------\n\nTITLE: Creating an Apple Pay Merchant with Fastlane Produce\nDESCRIPTION: Example command showing how to create a new Apple Pay Merchant Identifier using the 'produce merchant' command. The command specifies a merchant identifier and reference name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce merchant -o merchant.com.example.production -r \"Example Merchant Production\"\n```\n\n----------------------------------------\n\nTITLE: Advanced plist processing with find and update operations\nDESCRIPTION: Demonstrates an advanced example of finding a specific URL scheme entry by name and updating its URL schemes array.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_plist.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_plist( # Advanced processing: find URL scheme for particular key and replace value\n  plist_path: \"path/to/Info.plist\",\n  block: proc do |plist|\n    urlScheme = plist[\"CFBundleURLTypes\"].find{|scheme| scheme[\"CFBundleURLName\"] == \"com.acme.default-url-handler\"}\n    urlScheme[:CFBundleURLSchemes] = [\"acme-production\"]\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Export Options as Hash in Gymfile\nDESCRIPTION: Example of specifying export options directly in the Gymfile as a hash, including method, app thinning, and manifest configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nexport_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})\n```\n\n----------------------------------------\n\nTITLE: Fastlane Integration Example\nDESCRIPTION: Example showing how to integrate cert and sigh in a Fastlane configuration\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  cert\n  sigh(force: true)\nend\n```\n\n----------------------------------------\n\nTITLE: Changing the Repository Password\nDESCRIPTION: Command to change the password used for encrypting and decrypting certificates and profiles in the match repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match change_password\n```\n\n----------------------------------------\n\nTITLE: Downloading App Privacy Details with Basic Configuration in Ruby\nDESCRIPTION: Downloads app privacy details from App Store Connect using email, team name, and app identifier. This example demonstrates the minimal required parameters for the action to function.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_app_privacy_details_from_app_store.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_app_privacy_details_from_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Sources for pod_lib_lint in Ruby\nDESCRIPTION: Shows how to provide custom sources when the podspec has dependencies on private pods.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_lib_lint.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: [\"https://github.com/username/Specs\", \"https://github.com/CocoaPods/Specs\"])\n```\n\n----------------------------------------\n\nTITLE: Importing Certificates without Developer Portal Verification\nDESCRIPTION: Command to import certificates and profiles without verifying them against the Apple Developer Portal, useful when access to the portal is not available.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match import --skip_certificate_matching true\n```\n\n----------------------------------------\n\nTITLE: Accessing Launch Arguments in Swift via UserDefaults\nDESCRIPTION: Shows how to access the launch arguments passed by snapshot in your Swift code using UserDefaults.standard.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n```\n\n----------------------------------------\n\nTITLE: Committing Multiple Files with Git in Ruby\nDESCRIPTION: This example shows how to commit multiple specific files using the git_commit action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_commit.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngit_commit(path: [\"./version.txt\", \"./changelog.txt\"], message: \"Version Bump\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating with App Store Connect API Key in Ruby\nDESCRIPTION: Example showing how to use the app_store_connect_api_key action to authenticate with the App Store Connect API and use the return value with pilot.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/app-store-connect-api.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  api_key = app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional (maximum 1200)\n    in_house: false # optional but may be required if using match/sigh\n  )\n\n  pilot(api_key: api_key)\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in Lane Blocks\nDESCRIPTION: Shows how to access passed parameters in different lane blocks including before_all, before_each, after_all, and error handlers\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/lanes.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts \"Hi :)\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing before_all Block in Fastfile\nDESCRIPTION: Demonstrates the before_all block that executes before any lane runs. Shows example with Cocoapods integration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_all do |lane|\n  cocoapods\nend\n```\n\n----------------------------------------\n\nTITLE: Cleaning Gradle Build Directory in Ruby\nDESCRIPTION: Executes the Gradle clean task to remove build artifacts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"clean\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using appstore alias for App Store uploads\nDESCRIPTION: Example showing the 'appstore' alias which is equivalent to the 'upload_to_app_store' command in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nappstore  # alias for \"upload_to_app_store\"\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Scanfile for fastlane scan in Ruby\nDESCRIPTION: Example of a basic Scanfile configuration that defines the scheme, devices, cleaning behavior, and output types for iOS tests. This file is created with 'fastlane scan init' and stores default parameters for test execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"Example\")\ndevices([\"iPhone 6s\", \"iPad Air\"])\n\nclean(true)\n\noutput_types(\"html\")\n```\n\n----------------------------------------\n\nTITLE: Basic Xcodebuild Formatter Usage in Fastlane\nDESCRIPTION: Shows how xcodebuild output is piped to a formatter in Fastlane. This demonstrates the basic pattern of how Fastlane connects xcodebuild with formatting tools.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/xcodebuild-formatters.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\n$ xcodebuild [flags] | xcbeautify\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of push_to_git_remote in Ruby\nDESCRIPTION: Simple example of using the push_to_git_remote action to push the master branch to the origin remote.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_to_git_remote.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npush_to_git_remote # simple version. pushes \"master\" branch to \"origin\" remote\n```\n\n----------------------------------------\n\nTITLE: Running scan with a Specific Xcode Version\nDESCRIPTION: How to specify a different Xcode installation using the DEVELOPER_DIR environment variable when running scan.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" scan\n```\n\n----------------------------------------\n\nTITLE: Initializing supply for Google Play metadata\nDESCRIPTION: Command to initialize supply, which downloads your app's metadata from Google Play Console to the fastlane/metadata/android directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/setup.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane supply init\n```\n\n----------------------------------------\n\nTITLE: Uploading App to Enterprise-Hosted Appetize.io in Ruby\nDESCRIPTION: Example showing how to use the appetize action with an enterprise-hosted Appetize.io solution. This includes specifying a custom API host in addition to the standard parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appetize.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nappetize(\n  path: \"./MyApp.zip\",\n  api_host: \"company.appetize.io\", # only needed for enterprise hosted solution\n  api_token: \"yourapitoken\", # get it from https://appetize.io/docs#request-api-token\n  public_key: \"your_public_key\" # get it from https://appetize.io/dashboard\n)\n```\n\n----------------------------------------\n\nTITLE: Example JSON for App Not Collecting Data\nDESCRIPTION: This is an example of the JSON configuration file that would be generated for an app that doesn't collect any user data. It contains a single object with a data_protections array that includes the DATA_NOT_COLLECTED flag.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    \"data_protections\": [\n      \"DATA_NOT_COLLECTED\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Slack Notification with Fastlane\nDESCRIPTION: This snippet demonstrates how to send a simple success message to a Slack channel using Fastlane's slack action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slack.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nslack(message: \"App successfully released!\")\n```\n\n----------------------------------------\n\nTITLE: Registering an iOS Device with Basic Parameters in Ruby\nDESCRIPTION: This snippet demonstrates how to register an iOS device using the minimum required parameters: name and UDID. This will add the device to the Apple Developer Portal so it can be included in provisioning profiles.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_device.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nregister_device(\n  name: \"Luka iPhone 6\",\n  udid: \"1234567890123456789012345678901234567890\"\n) # Simply provide the name and udid of the device\n```\n\n----------------------------------------\n\nTITLE: Executing match_nuke with API Key in Ruby\nDESCRIPTION: This example shows how to use match_nuke with an App Store Connect API key for authentication when revoking development certificates and profiles.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match_nuke.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmatch_nuke(type: \"development\", api_key: app_store_connect_api_key)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapfile for FastLane Screenshot Automation\nDESCRIPTION: Example configuration file (Snapfile) showing various options for controlling the screenshot capture process, including device selection, languages, and output settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])\n```\n\n----------------------------------------\n\nTITLE: Uploading an App to Appaloosa Store using Fastlane\nDESCRIPTION: This code snippet demonstrates how to upload an iOS or Android application to the Appaloosa Store using the Fastlane plugin. It includes parameters for specifying the binary path, store credentials, user group visibility, and screenshot configurations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appaloosa.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nappaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store's id at the bottom of the \"Settings\" page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \"Settings\" page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like 'iphone6-s1.png' if device specified\n  screenshots: '/path/to_your/screenshots'\n)\n```\n\n----------------------------------------\n\nTITLE: Zip with Include and Exclude Patterns\nDESCRIPTION: Compresses only Swift files while excluding specific paths and files\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/zip.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nzip(\n  path: \"./\",\n  output_path: \"Swift Code.zip\",\n  include: [\"**/*.swift\"],\n  exclude: [\"Package.swift\", \"vendor/*\", \"Pods/*\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Message commit_version_bump with Xcodeproj Specification\nDESCRIPTION: Creates a version bump commit with a custom message and specifies the Xcode project file path, useful when you have multiple project files.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  message: \"Version Bump\",# create a commit with a custom message\n  xcodeproj: \"./path/to/MyProject.xcodeproj\"  # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of verify_xcode Action in Ruby\nDESCRIPTION: This snippet demonstrates the basic usage of the verify_xcode action without any parameters. It verifies the default Xcode installation on the system.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_xcode.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nverify_xcode\n```\n\n----------------------------------------\n\nTITLE: Advanced get_push_certificate Configuration in Ruby\nDESCRIPTION: Example showing how to use get_push_certificate with various parameters including forcing certificate creation, specifying an app identifier, saving the private key, and handling the new profile with a block.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pem.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget_push_certificate(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \"net.sunapps.9\", # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Associating an App with an iCloud Container\nDESCRIPTION: Command to associate an existing app with a specific iCloud Container using their respective identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app\n```\n\n----------------------------------------\n\nTITLE: Updating OpenSSL using Homebrew in Ruby\nDESCRIPTION: This command updates and upgrades OpenSSL using Homebrew to resolve SSL certificate verification errors.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbrew update && brew upgrade openssl\n```\n\n----------------------------------------\n\nTITLE: Git Repository Reset with Skipping Clean in Fastlane\nDESCRIPTION: Resets git repository while skipping the 'git clean' step, which prevents deletion of untracked files like '.env'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_git_repo.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nreset_git_repo(skip_clean: true) # If you want \"git clean\" to be skipped, thus NOT deleting untracked files like \".env\". Optional, defaults to false.\n```\n\n----------------------------------------\n\nTITLE: Suppressing Command Output in Gradle Build with Ruby\nDESCRIPTION: Example showing how to hide the generated gradle command from being printed before execution, useful for commands containing sensitive information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n  print_command: false\n)\n```\n\n----------------------------------------\n\nTITLE: Building with Workspace and Scheme Parameters\nDESCRIPTION: Example of building an application by explicitly specifying the workspace, scheme, and enabling the clean option.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Code Signing with Team ID in Ruby\nDESCRIPTION: Disables automatic code signing and sets a specific team ID for the project.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  team_id: \"XXXX\"\n)\n```\n\n----------------------------------------\n\nTITLE: Skip Submission Upload\nDESCRIPTION: Upload a build to TestFlight without submitting it for review\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(skip_submission: true) # to only upload the build\n```\n\n----------------------------------------\n\nTITLE: Using xcpretty to Format xcodebuild Output\nDESCRIPTION: An example command showing how to use xcpretty to format xcodebuild output into a more readable format, while generating an HTML report.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nset -o pipefail &&\n  xcodebuild \\\n    -workspace MyApp.xcworkspace \\\n    -scheme \"MyApp\" \\\n    -sdk iphonesimulator \\\n    -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n    test \\\n  | xcpretty \\\n    -r \"html\" \\\n    -o \"tests.html\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Podspec to Trunk in Ruby\nDESCRIPTION: This example demonstrates pushing a Podspec to Trunk without specifying a path. Trunk will attempt to find the first Podspec in the current directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_push.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod_push\n```\n\n----------------------------------------\n\nTITLE: Running fastlane in Jenkins Build Step\nDESCRIPTION: Example command for executing a fastlane lane in a Jenkins 'Execute shell' build step.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/jenkins.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane appstore\n```\n\n----------------------------------------\n\nTITLE: Basic Certificate Import in Ruby with Fastlane\nDESCRIPTION: Imports a basic certificate file into the default keychain without password protection.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_certificate.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nimport_certificate(certificate_path: \"certs/AppleWWDRCA6.cer\")\n```\n\n----------------------------------------\n\nTITLE: Executing Remote Commands via SSH in Ruby\nDESCRIPTION: This snippet demonstrates how to use the SSH action in Fastlane to execute remote commands on a server. It connects to a host using a username and runs two commands: displaying the date and writing to a file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ssh.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nssh(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  commands: [\n    \"date\",\n    \"echo 1 > /tmp/file1\"\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Set Specific Version Number in Ruby\nDESCRIPTION: Setting a specific version number instead of incrementing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_version_number(\n  version_number: \"2.1.1\" # Set a specific version number\n)\n```\n\n----------------------------------------\n\nTITLE: Available parameters for enabling iOS app services with fastlane produce\nDESCRIPTION: Complete list of command-line parameters for enabling various iOS app services including iCloud, Apple Pay, Push Notifications, and other capabilities using fastlane produce.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\n--access-wifi                         Enable Access Wifi\n--app-attest                          Enable App Attest\n--app-group                           Enable App Group\n--apple-pay                           Enable Apple Pay\n--associated-domains                  Enable Associated Domains\n--auto-fill-credential                Enable Auto Fill Credential\n--class-kit                           Enable Class Kit\n--icloud STRING                        Enable iCloud, suitable values are \"xcode5_compatible\" and \"xcode6_compatible\"\n--custom-network-protocol             Enable Custom Network Protocol\n--data-protection STRING              Enable Data Protection, suitable values are \"complete\", \"unlessopen\" and \"untilfirstauth\"\n--extended-virtual-address-space      Enable Extended Virtual Address Space\n--game-center STRING                  Enable Game Center, suitable values are \"ios\" and \"macos\n--health-kit                          Enable Health Kit\n--hls-interstitial-preview            Enable Hls Interstitial Preview\n--home-kit                            Enable Home Kit\n--hotspot                             Enable Hotspot\n--in-app-purchase                     Enable In App Purchase\n--inter-app-audio                     Enable Inter App Audio\n--low-latency-hls                     Enable Low Latency Hls\n--managed-associated-domains          Enable Managed Associated Domains\n--maps                                Enable Maps\n--multipath                           Enable Multipath\n--network-extension                   Enable Network Extension\n--nfc-tag-reading                     Enable NFC Tag Reading\n--personal-vpn                        Enable Personal VPN\n--passbook                            Enable Passbook (deprecated)\n--push-notification                   Enable Push Notification\n--sign-in-with-apple                  Enable Sign In With Apple\n--siri-kit                            Enable Siri Kit\n--system-extension                    Enable System Extension\n--user-management                     Enable User Management\n--vpn-configuration                   Enable Vpn Configuration (deprecated)\n--wallet                              Enable Wallet\n--wireless-accessory                  Enable Wireless Accessory\n--car-play-audio-app                  Enable Car Play Audio App\n--car-play-messaging-app              Enable Car Play Messaging App\n--car-play-navigation-app             Enable Car Play Navigation App\n--car-play-voip-calling-app           Enable Car Play Voip Calling App\n--critical-alerts                     Enable Critical Alerts\n--hotspot-helper                      Enable Hotspot Helper\n--driver-kit                          Enable DriverKit\n--driver-kit-endpoint-security        Enable DriverKit Endpoint Security\n--driver-kit-family-hid-device        Enable DriverKit Family HID Device\n--driver-kit-family-networking        Enable DriverKit Family Networking\n--driver-kit-family-serial            Enable DriverKit Family Serial\n--driver-kit-hid-event-service        Enable DriverKit HID EventService\n--driver-kit-transport-hid            Enable DriverKit Transport HID\n--multitasking-camera-access          Enable Multitasking Camera Access\n--sf-universal-link-api               Enable SFUniversalLink API\n--vp9-decoder                         Enable VP9 Decoder\n--music-kit                           Enable MusicKit\n--shazam-kit                          Enable ShazamKit\n--communication-notifications         Enable Communication Notifications\n--group-activities                    Enable Group Activities\n--health-kit-estimate-recalibration   Enable HealthKit Estimate Recalibration\n--time-sensitive-notifications        Enable Time Sensitive Notifications\n```\n\n----------------------------------------\n\nTITLE: Using update_fastlane in Fastfile\nDESCRIPTION: This example demonstrates how to use the update_fastlane action in a Fastfile. It's recommended to place this action at the top of the before_all block to ensure Fastlane is up-to-date before running other actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_fastlane.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_all do\n  update_fastlane\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of clean_cocoapods_cache in Ruby\nDESCRIPTION: A simple example showing how to use the clean_cocoapods_cache action without any parameters, which removes all cached pods.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_cocoapods_cache.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclean_cocoapods_cache\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for fastlane in shell profile\nDESCRIPTION: Shell commands to set up required environment variables for fastlane. These ensure proper UTF-8 locale settings, which are necessary for building and uploading apps.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/setup.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Capture Options in Ruby\nDESCRIPTION: More advanced example of the snapshot command with additional parameters to skip opening the summary and perform a clean run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Pre-Generated App Privacy Details in Ruby Fastfile\nDESCRIPTION: This Ruby code demonstrates how to upload previously generated app privacy details from a JSON file to App Store Connect using a Fastfile. It specifies the path to the JSON file containing the privacy details.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  json_path: \"fastlane/app_privacy_details.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for Get Build Number\nDESCRIPTION: Demonstrates how to pass parameters to the get_build_number action when running from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run get_build_number parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Rolling Out AAB to Beta Track with Percentage in Shell\nDESCRIPTION: Example showing how to upload an Android App Bundle to the beta track with a 50% rollout using the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --aab path/app.aab --track beta --rollout 0.5\n```\n\n----------------------------------------\n\nTITLE: Enabling Clean Status Bar for Screenshots\nDESCRIPTION: Java code to enable and disable the clean status bar feature in the @BeforeClass and @AfterClass methods.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@BeforeClass\npublic static void beforeAll() {\n    CleanStatusBar.enableWithDefaults();\n}\n\n@AfterClass\npublic static void afterAll() {\n    CleanStatusBar.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Build App Example\nDESCRIPTION: Simple example of using build_app with workspace and scheme parameters\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n```\n\n----------------------------------------\n\nTITLE: Committing Multiple Files Using Wildcards with Git in Ruby\nDESCRIPTION: This snippet illustrates how to use wildcards to commit multiple files matching certain patterns.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_commit.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngit_commit(path: [\"./*.txt\", \"./*.md\"], message: \"Update documentation\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of get_certificates with Parameters in Ruby\nDESCRIPTION: Demonstrates how to use get_certificates with specific parameters for development certificates and user authentication.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_certificates.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget_certificates(\n  development: true,\n  username: \"user@email.com\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting In-App Update Priority for APK\nDESCRIPTION: Command line example showing how to set the in-app update priority level when uploading an APK to the beta track.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --track beta --in_app_update_priority 3\n```\n\n----------------------------------------\n\nTITLE: Password-Protected Certificate Import in Ruby with Fastlane\nDESCRIPTION: Imports a password-protected p12 certificate file using an environment variable or default password.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_certificate.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nimport_certificate(\n  certificate_path: \"certs/dist.p12\",\n  certificate_password: ENV[\"CERTIFICATE_PASSWORD\"] || \"default\"\n)\n```\n\n----------------------------------------\n\nTITLE: Resigning IPA with Single Provisioning Profile in Ruby\nDESCRIPTION: This snippet demonstrates how to use the 'resign' action to codesign an IPA file with a single provisioning profile. It specifies the IPA path, signing identity, and provisioning profile path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/resign.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nresign(\n  ipa: \"path/to/ipa\", # can omit if using the `ipa` action\n  signing_identity: \"iPhone Distribution: Luka Mirosevic (0123456789)\",\n  provisioning_profile: \"path/to/profile\", # can omit if using the _sigh_ action\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Git Tags with a Pattern in Ruby\nDESCRIPTION: This example shows how to use the last_git_tag action with a pattern parameter to filter tags. It retrieves the most recent git tag that matches the specified pattern, in this case, tags starting with 'release/v1.0/'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/last_git_tag.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlast_git_tag(pattern: \"release/v1.0/\")\n```\n\n----------------------------------------\n\nTITLE: Registering Mac Devices in Ruby\nDESCRIPTION: This example shows how to register Mac devices using a hash of device names and UDIDs. It demonstrates the use of the 'platform' parameter to specify Mac devices instead of iOS devices.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_devices.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nregister_devices(\n  devices: {\n    \"Luka MacBook\" => \"12345678-1234-1234-1234-123456789012\",\n    \"Felix MacBook Pro\" => \"ABCDEFGH-ABCD-ABCD-ABCD-ABCDEFGHIJKL\"\n  },\n  platform: \"mac\"\n) # Register devices for Mac\n```\n\n----------------------------------------\n\nTITLE: Setting Launch Arguments for Snapshot Testing in Ruby\nDESCRIPTION: Code demonstrating how to provide additional arguments to your app during snapshot testing. These arguments are passed to the app and can be accessed via ProcessInfo or UserDefaults.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n```\n\n----------------------------------------\n\nTITLE: Setting App Copyright Information in Fastlane Deliver\nDESCRIPTION: Configures the copyright information for the app. This example dynamically sets the copyright year to the current year along with the author's name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\ncopyright(\"#{Time.now.year} Felix Krause\")\n```\n\n----------------------------------------\n\nTITLE: A/B Testing with Different Launch Arguments\nDESCRIPTION: Ruby code snippet for a Snapfile demonstrating how to generate screenshots with different feature flags to compare variants of the same screen.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n```\n\n----------------------------------------\n\nTITLE: Specifying App Version in Deliverfile\nDESCRIPTION: How to specify which app version should be created or edited on App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\napp_version(\"2.0\")\n```\n\n----------------------------------------\n\nTITLE: Uploading dSYM Files to Crashlytics with Ruby in fastlane\nDESCRIPTION: This example demonstrates how to upload a dSYM zip file to Crashlytics using the upload_symbols_to_crashlytics action in a fastlane workflow. It specifies the path to the dSYM zip file that will be uploaded for crash reporting purposes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_crashlytics.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupload_symbols_to_crashlytics(dsym_path: \"./App.dSYM.zip\")\n```\n\n----------------------------------------\n\nTITLE: Uploading dSYM to Splunk MINT using Ruby\nDESCRIPTION: Example showing how to upload a dSYM file to Splunk MINT using the splunkmint fastlane action. Requires an API key and token from Splunk MINT, and the path to the dSYM zip file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/splunkmint.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsplunkmint(\n  dsym: \"My.app.dSYM.zip\",\n  api_key: \"43564d3a\",\n  api_token: \"e05456234c4869fb7e0b61\"\n)\n```\n\n----------------------------------------\n\nTITLE: Example Gymfile Configuration\nDESCRIPTION: A simple Gymfile configuration that defines default parameters for the gym command, including scheme, SDK, clean option, output directory and output name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n```\n\n----------------------------------------\n\nTITLE: Uploading Artifact to Artifactory using Username/Password in Ruby\nDESCRIPTION: This snippet demonstrates how to use the artifactory action in Fastlane to upload an artifact to Artifactory using username and password authentication. It specifies the endpoint, file to upload, repository, and repository path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/artifactory.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nartifactory(\n  username: \"username\",\n  password: \"password\",\n  endpoint: \"https://artifactory.example.com/artifactory/\",\n  file: \"example.ipa\",  # File to upload\n  repo: \"mobile_artifacts\",       # Artifactory repo\n  repo_path: \"/ios/appname/example-major.minor.ipa\"   # Path to place the artifact including its filename\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Team Name in Ruby for iOS Projects\nDESCRIPTION: This snippet demonstrates how to use the team_name action in a Fastfile to set a team by its name. It's used for iOS projects and takes a string parameter representing the team name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/team_name.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nteam_name(\"Felix Krause\")\n```\n\n----------------------------------------\n\nTITLE: Passing Boolean Parameters to Gym\nDESCRIPTION: Demonstrates how to correctly pass boolean parameters to the gym command for bitcode inclusion and symbol generation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --include_bitcode true --include_symbols false\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Keychain and Adding to Search List in Ruby (Fastlane)\nDESCRIPTION: Unlocks an existing keychain file using a password and adds it to the keychain search list. This is the basic usage of the unlock_keychain action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nunlock_keychain( # Unlock an existing keychain and add it to the keychain search list\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Storage in Matchfile\nDESCRIPTION: Example content of a Matchfile for Git storage. Specifies the Git URL, app identifier, and username for Apple Developer account.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngit_url(\"https://github.com/fastlane/certificates\")\n\napp_identifier(\"tools.fastlane.app\")\nusername(\"user@fastlane.tools\")\n```\n\n----------------------------------------\n\nTITLE: Using Specific Bundler Version in Codemagic Workflow\nDESCRIPTION: This snippet shows how to install a specific version of Bundler before running Fastlane in a Codemagic workflow. This is useful when you need to match the Bundler version specified in your Gemfile.lock.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codemagic.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nscripts:\n  - gem install bundler:2.2.27\n  - bundle install\n  - bundle exec fastlane beta\n```\n\n----------------------------------------\n\nTITLE: Adding a Tester to TestFlight with App Identifier\nDESCRIPTION: Command to add a tester to specific testing groups for a particular app using its bundle identifier, useful when working with multiple apps.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot add email@email.com -a com.krausefx.app -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Advanced Changelog Generation with Custom Parameters in Ruby\nDESCRIPTION: Extended example showing changelog generation with custom parameters including commit range, format pattern, date formatting, and merge commit filtering options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/changelog_from_git_commits.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nchangelog_from_git_commits(\n  between: [\"7b092b3\", \"HEAD\"],  # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty: \"- (%ae) %s\",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  date_format: \"short\",# Optional, lets you provide an additional date format to dates within the pretty-formatted string\n  match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  merge_commit_filtering: \"exclude_merges\" # Optional, lets you filter out merge commits\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot with Snapfile\nDESCRIPTION: Sample Snapfile configuration showing how to specify test scheme, devices, languages, and other snapshot options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nscheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])\n```\n\n----------------------------------------\n\nTITLE: Using build_ios_app Alias\nDESCRIPTION: Example showing that build_ios_app is an alias for build_app with only iOS options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_ios_app    # alias for \"build_app (only iOS options)\"\n```\n\n----------------------------------------\n\nTITLE: Export Options Plist for Development Distribution\nDESCRIPTION: XML configuration used by Xcode to specify the distribution method when exporting an archive. This example shows a simple plist for development distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/common-issues.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>method</key>\n\t<string>development</string>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Parameters via Environment Variables\nDESCRIPTION: Shows examples of setting boolean parameters through environment variables in the shell, supporting common truthy and falsy string representations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nMY_NEW_ACTION_COMMIT=true\nMY_NEW_ACTION_COMMIT=false\nMY_NEW_ACTION_COMMIT=yes\nMY_NEW_ACTION_COMMIT=no\n```\n\n----------------------------------------\n\nTITLE: Suppressing Command Execution Output in Ruby\nDESCRIPTION: Demonstrates how to suppress the output generated by the Gradle command execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n  print_command_output: false\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode for Debugging\nDESCRIPTION: Using verbose mode with gym to get detailed information during the build process, useful for troubleshooting issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --verbose\n```\n\n----------------------------------------\n\nTITLE: Checking CI Environment in Ruby\nDESCRIPTION: Example showing how to use the is_ci condition to determine if code is running in a CI environment and execute different logic accordingly.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/is_ci.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nif is_ci\n  puts \"I'm a computer\"\nelse\n  say \"Hi Human!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Status Bar Override for iOS Screenshots\nDESCRIPTION: Ruby examples showing how to customize the status bar in iOS screenshots using the override_status_bar options. Controls time, battery level, network status, and carrier name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# Sets the time to 9:41AM with full battery and reception, with the default carrier name: Carrier\ncapture_ios_screenshots(\n\toverride_status_bar: true\n)\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Set the time to 9:41AM, battery at 75% and charging, on the TELUS LTE network\ncapture_ios_screenshots(\n\toverride_status_bar: true,\n\toverride_status_bar_arguments: \"--time 9:41 --dataNetwork lte --cellularMode active --cellularBars 4 --batteryState charging --batteryLevel 75 --operatorName TELUS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a New Tester to Specific Groups\nDESCRIPTION: Adds a new tester to your App Store Connect account and associates them with specific testing groups for your app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot add email@invite.com -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Multi-line Changelog Input with Fastlane Prompt in Ruby\nDESCRIPTION: This example shows how to use the 'prompt' action for multi-line input. It sets up a prompt for a changelog with a specific end keyword, then uses the input in a 'pilot' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/prompt.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nchangelog = prompt(\n  text: \"Changelog: \",\n  multi_line_end_keyword: \"END\"\n)\n\npilot(changelog: changelog)\n```\n\n----------------------------------------\n\nTITLE: Basic Frameit Usage Examples in Fastlane\nDESCRIPTION: Collection of simple usage examples for the frame_screenshots (alias frameit) action in Fastlane, showing different options like platform selection, frame color, and screenshot path customization.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots\n```\n\nLANGUAGE: ruby\nCODE:\n```\nframeit # alias for \"frame_screenshots\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(use_platform: \"ANDROID\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(silver: true)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(path: \"/screenshots\")\n```\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(rose_gold: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gemfile for Fastlane with Plugins\nDESCRIPTION: Shows the recommended Gemfile configuration for Fastlane projects using plugins. It includes the Fastlane gem and dynamically loads the Pluginfile if it exists.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/plugins-troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"fastlane\"\n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval_gemfile(plugins_path) if File.exist?(plugins_path)\n```\n\n----------------------------------------\n\nTITLE: Creating a New iCloud Container\nDESCRIPTION: Command to create a new iCloud Container on the Apple Developer Portal with a specified identifier and name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce cloud_container -g iCloud.com.krausefx.app -n \"Example iCloud Container\"\n```\n\n----------------------------------------\n\nTITLE: Committing a File to GitHub Repository using Fastlane\nDESCRIPTION: This example demonstrates how to use the commit_github_file action to commit a new file to a GitHub repository. It includes specifying the repository, API token, commit message, branch, and file path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_github_file.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nresponse = commit_github_file(\n  repository_name: \"fastlane/fastlane\",\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  message: \"Add my new file\",\n  branch: \"master\",\n  path: \"assets/my_new_file.xcarchive\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating App Identifier in Info.plist using Fastlane\nDESCRIPTION: This snippet demonstrates how to use the update_info_plist action to update the app identifier string in an Info.plist file. It specifies the path to the Info.plist file and the new app identifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_info_plist.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_info_plist( # update app identifier string\n  plist_path: \"path/to/Info.plist\",\n  app_identifier: \"com.example.newappidentifier\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using backup_xcarchive in Fastlane to save xcarchive files\nDESCRIPTION: This example demonstrates how to use the backup_xcarchive action in your Fastfile to back up an xcarchive file to another location. It shows various configuration options including specifying the source archive, destination path, filename, compression options, and versioned subfolder creation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/backup_xcarchive.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbackup_xcarchive(\n  xcarchive: \"/path/to/file.xcarchive\", # Optional if you use the `xcodebuild` action\n  destination: \"/somewhere/else/\", # Where the backup should be created\n  zip_filename: \"file.xcarchive\", # The name of the backup file\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive\n)\n```\n\n----------------------------------------\n\nTITLE: Installing IPA on iOS Device using install_on_device in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the install_on_device action in a Fastfile to install an IPA file on a specific iOS device. It specifies the device ID and the path to the IPA file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/install_on_device.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ninstall_on_device(\n  device_id: \"a3be6c9ff7e5c3c6028597513243b0f933b876d4\",\n  ipa: \"./app.ipa\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest Permissions for Screengrab\nDESCRIPTION: XML configuration for the required permissions in src/debug/AndroidManifest.xml to allow screengrab to function properly, including storage, locale changes, and system UI permissions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <!-- Allows storing screenshots on external storage, where it can be accessed by ADB -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"18\" />\n\n    <!-- Allows changing locales -->\n    <uses-permission\n            android:name=\"android.permission.CHANGE_CONFIGURATION\"\n            tools:ignore=\"ProtectedPermissions\" />\n\n    <!-- Allows changing SystemUI demo mode -->\n    <uses-permission\n            android:name=\"android.permission.DUMP\"\n            tools:ignore=\"ProtectedPermissions\" />\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Using push_git_tags Action in Ruby\nDESCRIPTION: Basic example of using the push_git_tags action in a Fastfile to push local Git tags to the remote repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_git_tags.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npush_git_tags\n```\n\n----------------------------------------\n\nTITLE: Accessing Launch Arguments in Java Tests\nDESCRIPTION: Java code demonstrating how to retrieve launch arguments from InstrumentationRegistry in Android tests\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Scan Configuration\nDESCRIPTION: Example showing scan with custom workspace, scheme, device and clean parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane scan --workspace \"Example.xcworkspace\" --scheme \"AppName\" --device \"iPhone 6\" --clean\n```\n\n----------------------------------------\n\nTITLE: Advanced Provisioning Profile Generation\nDESCRIPTION: Example showing advanced options including adhoc distribution, force regeneration, and custom filename specification\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget_provisioning_profile(\n  adhoc: true,\n  force: true,\n  filename: \"myFile.mobileprovision\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a TestFlight Tester with Groups\nDESCRIPTION: Command to add a new tester to TestFlight and associate them with specific testing groups. Creates a new tester or adds an existing one to the specified groups.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot add email@invite.com -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Removing a TestFlight Tester\nDESCRIPTION: Command to remove a beta tester from all internal and external groups of the application.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot remove felix@krausefx.com\n```\n\n----------------------------------------\n\nTITLE: Basic XcodeBuild Usage in Ruby\nDESCRIPTION: Simple example showing how to invoke the xcbuild action in a Fastfile to build an Xcode project.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcbuild.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcbuild\n```\n\n----------------------------------------\n\nTITLE: Disabling Animations in Swift for Faster Snapshots\nDESCRIPTION: Swift code that disables UIView animations when a specific launch argument is detected. This can significantly speed up the screenshot capture process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nif ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CI Setup with CircleCI Provider\nDESCRIPTION: Sets up CI environment with CircleCI as the provider. Creates temporary keychain and configures match for readonly mode.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_ci.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsetup_ci(\n  provider: \"circleci\"\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Setup CI\nDESCRIPTION: Shows how to run the setup_ci action directly from command line without Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_ci.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run setup_ci\n```\n\n----------------------------------------\n\nTITLE: Accessing Snapshot Documentation via CLI in fastlane\nDESCRIPTION: Command to display the snapshot action documentation in the terminal using fastlane's CLI interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action snapshot\n```\n\n----------------------------------------\n\nTITLE: Adding a Mercurial Tag Using Fastlane\nDESCRIPTION: Example of how to add a Mercurial tag '1.3' to the current branch using the hg_add_tag action in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_add_tag.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhg_add_tag(tag: \"1.3\")\n```\n\n----------------------------------------\n\nTITLE: Running sigh with parameters from command line\nDESCRIPTION: Command example demonstrating how to run the sigh action with specific parameters passed directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sigh.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run sigh parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Installing bundler and updating dependencies\nDESCRIPTION: Command to install the Bundler gem and update all dependencies specified in the Gemfile. This creates a Gemfile.lock that should be committed to version control.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/circle-ci.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngem install bundler && bundle update\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from Info.plist Using FastLane in Ruby\nDESCRIPTION: Example showing how to get a value from Info.plist file using the get_info_plist_value action. This snippet demonstrates fetching the bundle identifier from the Info.plist file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_info_plist_value.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nidentifier = get_info_plist_value(path: \"./Info.plist\", key: \"CFBundleIdentifier\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Force Orientation for Screenshots in Frameit\nDESCRIPTION: Ruby code example showing how to customize frame orientation for specific screenshots. This custom block overrides the default orientation detection based on filename patterns.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# It matches the filename to the framed device orientation\nframeit(\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    case filename\n      when \"iPad Pro (12.9-inch)-01LoginScreen\"\n        :landscape_right\n      when \"iPhone 6 Plus-01LoginScreen\"\n        :portrait\n      # and so on\n    end\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Using deliver with itc_provider option for multiple App Store Connect teams\nDESCRIPTION: Example of uploading to App Store Connect with force option enabled and a specific itc_provider value for teams with multiple accounts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n```\n\n----------------------------------------\n\nTITLE: Download dSYMs with Minimum Version\nDESCRIPTION: Example showing how to download dSYMs for all versions after a minimum version number.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_dsyms(min_version: \"1.2.3\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Framefile.json with Device Frame Settings for iOS and Android\nDESCRIPTION: Example Framefile.json configuration showing how to set up device frames with custom fonts, colors, and platform-specific settings. This configuration supports different filter types with varying keyword colors and includes an Android-specific entry.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    \"keyword\": {\n      \"font\": \"./fonts/MyFont-Rg.otf\"\n    },\n    \"title\": {\n      \"font\": \"./fonts/MyFont-Th.otf\",\n      \"font_size\": 128,\n      \"color\": \"#545454\"\n    },\n    \"background\": \"./background.jpg\",\n    \"padding\": 50,\n    \"show_complete_frame\": false,\n    \"stack_title\" : false,\n    \"title_below_image\": true,\n    \"frame\": \"WHITE\",\n    \"use_platform\": \"IOS\"\n  },\n\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    },\n    {\n      \"filter\": \"Organizing\",\n      \"keyword\": {\n        \"color\": \"#feb909\"\n      },\n      \"frame\": \"ROSE_GOLD\"\n    },\n    {\n      \"filter\": \"Sharing\",\n      \"keyword\": {\n        \"color\": \"#aa4dbc\"\n      }\n    },\n    {\n      \"filter\": \"Styling\",\n      \"keyword\": {\n        \"color\": \"#31bb48\"\n      }\n    },\n    {\n      \"filter\": \"Android\",\n      \"use_platform\": \"ANDROID\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting In-App Update Priority for AAB\nDESCRIPTION: Command line example showing how to set the in-app update priority level when uploading an Android App Bundle to the beta track.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --aab path/app.aab --track beta --in_app_update_priority 3\n```\n\n----------------------------------------\n\nTITLE: Build Number Increment from TestFlight\nDESCRIPTION: Automatically incrementing build numbers based on the latest TestFlight build.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/beta-deployment.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  increment_build_number(\n    build_number: latest_testflight_build_number + 1,\n    xcodeproj: \"Example.xcodeproj\"\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Uploading TestFlight Build with Changelog\nDESCRIPTION: Command to upload a build to TestFlight with a specified changelog that describes what's new in this version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot upload --changelog \"Something that is new here\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Android App to DeployGate using fastlane\nDESCRIPTION: This code snippet demonstrates how to use the deploygate action to upload an Android APK file to DeployGate. It requires an API token and username, and allows optional parameters like distribution key and name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deploygate.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndeploygate(\n  api_token: \"...\",\n  user: \"target username or organization name\",\n  apk: \"./apk_file.apk\",\n  message: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n  distribution_key: \"(Optional) Target Distribution Key\",\n  distribution_name: \"(Optional) Target Distribution Name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting TestFlight Testers\nDESCRIPTION: Exports all external testers to a CSV file, which is useful for importing tester information to another system or account.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot export\n```\n\n----------------------------------------\n\nTITLE: Running update_code_signing_settings from Terminal with Fastlane\nDESCRIPTION: This snippet shows how to run the update_code_signing_settings action directly from the terminal using the fastlane run command without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_code_signing_settings.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run update_code_signing_settings\n```\n\n----------------------------------------\n\nTITLE: Getting Podspec Version in Ruby\nDESCRIPTION: Retrieves the version number from a specified podspec file using the version_get_podspec action. This example shows how to get the version from a TSMessages.podspec file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_get_podspec.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nversion = version_get_podspec(path: \"TSMessages.podspec\")\n```\n\n----------------------------------------\n\nTITLE: Uploading Pre-Generated App Privacy Details in Swift Fastfile\nDESCRIPTION: This Swift code shows how to upload previously generated app privacy details from a JSON file to App Store Connect using a Fastfile.swift file. It specifies the path to the JSON file containing the privacy details.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nuploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\",\n                                  jsonPath: \"fastlane/app_privacy_details.json\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Provisioning Profiles Mapping\nDESCRIPTION: Example of how to manually map bundle identifiers to provisioning profiles when building an app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_app(\n  scheme: \"Release\",\n  export_method: \"app-store\",\n  export_options: {\n    provisioningProfiles: {\n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Snapshot in Objective-C UI Tests\nDESCRIPTION: Core setup code required in Objective-C UI Test class setUp() method to initialize snapshot functionality.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n```\n\n----------------------------------------\n\nTITLE: Downloading Files via SCP in Fastlane\nDESCRIPTION: Example showing how to download files using SCP with Fastlane. Demonstrates transferring a directory from remote server to the local system with specified host and credentials.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scp.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nscp(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  download: {\n    src: \"/root/dir1\",\n    dst: \"/tmp/new_dir\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting App Icons in Ruby with Fastlane\nDESCRIPTION: Specifies paths to app icons for both the main app and Apple Watch app. Icons must be exactly 1024x1024px.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\napp_icon('./AppIcon.png')\n```\n\nLANGUAGE: ruby\nCODE:\n```\napple_watch_app_icon('./AppleWatchAppIcon.png')\n```\n\n----------------------------------------\n\nTITLE: Providing Launch Arguments for snapshot\nDESCRIPTION: Ruby code demonstrating how to provide additional launch arguments to the app when running snapshot.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n```\n\n----------------------------------------\n\nTITLE: Sample Screengrabfile Configuration\nDESCRIPTION: Ruby configuration file for screengrab that defines app package, test packages, APK paths, locales, and other options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# remove the leading '#' to uncomment lines\n\n# app_package_name('your.app.package')\n# use_tests_in_packages(['your.screenshot.tests.package'])\n\n# app_apk_path('path/to/your/app.apk')\n# tests_apk_path('path/to/your/tests.apk')\n\nlocales(['en-US', 'fr-FR', 'it-IT'])\n\n# clear all previously generated screenshots in your local output directory before creating new ones\nclear_previous_screenshots(true)\n```\n\n----------------------------------------\n\nTITLE: Setting up fastlane Lane for Building APKs and Running Screengrab\nDESCRIPTION: Ruby code for a fastlane lane that builds the necessary debug and test APKs before running screengrab.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndesc \"Build debug and test APK for screenshots\"\nlane :build_and_screengrab do\n  build_android_app(\n    task: 'assemble',\n    build_type: 'Debug'\n  )\n  build_android_app(\n    task: 'assemble',\n    build_type: 'AndroidTest'\n  )\n  screengrab()\nend\n```\n\n----------------------------------------\n\nTITLE: Reset Specific iOS Simulator Versions in Ruby\nDESCRIPTION: Example of how to reset only simulators with specific iOS versions using the os_versions parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_simulator_contents.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nreset_simulator_contents(os_versions: [\"10.3.1\",\"12.2\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Git Repository Remote Information in Bamboo\nDESCRIPTION: Ruby script to configure git user information and set the remote URL for the repository. This addresses Bamboo's anonymous shallow clone issue that doesn't preserve git remote information or tags.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/bamboo.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name \"<COMMITTER USERNAME>\"')\nsh('git config user.email <COMMITTER EMAIL>')\n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)\n```\n\n----------------------------------------\n\nTITLE: Specifying Team ID for Apple Developer Portal in Ruby\nDESCRIPTION: This snippet demonstrates how to use the team_id action in a Fastfile to specify the Team ID for the Apple Developer Portal. It takes a string parameter representing the Team ID.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/team_id.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nteam_id(\"Q2CBPK58CA\")\n```\n\n----------------------------------------\n\nTITLE: Basic Carthage Usage in Ruby\nDESCRIPTION: Simple example showing basic Carthage command execution through Fastlane\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/carthage.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncarthage\n```\n\n----------------------------------------\n\nTITLE: Accessing lane parameters in Swift\nDESCRIPTION: Swift code showing how to access parameters passed to a lane. Uses withOptions parameter to receive a dictionary of parameter values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nclass Fastfile: LaneFile {\n    func deployLane(withOptions options:[String: String]?) {\n        // ...\n        if let submit = options?[\"submit\"], submit == \"true\" {\n            // Only when submit is true\n        }\n        // ...\n        incrementBuildNumber(buildNumber: options?[\"build_number\"])\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Conflict Handling with Proc Block\nDESCRIPTION: Demonstrates implementing custom conflict handling logic using a Proc block with UI feedback.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\nconflict_block = Proc.new do |other|\n  UI.user_error! \"Unexpected conflict with option #{other}\" unless [:text, :text_file].include?(other)\n  UI.message \"Ignoring :text_file in favor of :text\"\nend\n\nFastlaneCore::ConfigItem.new(\n  key: :text,\n  type: String,\n  optional: true,\n  conflicting_options: [:text_file],\n  conflict_block: conflict_block\n),\nFastlaneCore::ConfigItem.new(\n  key: :text_file,\n  type: String,\n  optional: true,\n  conflicting_options: [:text],\n  conflict_block: conflict_block\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring the Snapfile for Screenshot Generation\nDESCRIPTION: Example configuration file (Snapfile) generated by running 'fastlane snapshot init'. This Ruby configuration file defines devices, languages, and other settings for automated screenshot capture.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# A list of devices you want to take the screenshots from\n# devices([\n#  \"iPad (7th generation)\",\n#  \"iPad Air (3rd generation)\",\n#  \"iPad Pro (11-inch)\",\n#  \"iPad Pro (12.9-inch) (3rd generation)\",\n#  \"iPad Pro (9.7-inch)\",\n#  \"iPhone 11\",\n#  \"iPhone 11 Pro\",\n#  \"iPhone 11 Pro Max\",\n#  \"iPhone 8\",\n#  \"iPhone 8 Plus\"\n# ])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\"\n])\n\n# The name of the scheme which contains the UI Tests\n# scheme \"SchemeName\"\n\n# Where should the resulting screenshots be stored?\n# output_directory \"./screenshots\"\n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project \"./Project.xcodeproj\"\n# workspace \"./Project.xcworkspace\"\n\n# For more information about all available options run\n# fastlane action snapshot\n```\n\n----------------------------------------\n\nTITLE: Configuring LocaleTestRule in Kotlin UI Tests\nDESCRIPTION: Kotlin implementation showing how to add the LocaleTestRule to your JUnit tests with proper JvmField annotation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Rule @JvmField\nval localeTestRule = LocaleTestRule()\n```\n\n----------------------------------------\n\nTITLE: Terminal Command for Unlock Keychain Action Documentation (Fastlane)\nDESCRIPTION: Command to display the documentation for the unlock_keychain action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action unlock_keychain\n```\n\n----------------------------------------\n\nTITLE: Getting Available Deliver Options\nDESCRIPTION: Command to see all available options for the deliver action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action deliver\n```\n\n----------------------------------------\n\nTITLE: Running Screenshot Capture via CLI\nDESCRIPTION: Commands to run the screenshot capture action directly from CLI, including examples of parameter passing\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run capture_ios_screenshots\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run capture_ios_screenshots parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Git Branch Check in Ruby\nDESCRIPTION: Basic usage of ensure_git_branch that defaults to checking for the master branch.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_branch.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nensure_git_branch # defaults to `master` branch\n```\n\n----------------------------------------\n\nTITLE: Committing Files While Skipping Git Hooks in Ruby\nDESCRIPTION: This example demonstrates how to commit files while skipping Git hooks using the skip_git_hooks parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_commit.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngit_commit(path: [\"./*.txt\", \"./*.md\"], message: \"Update documentation\", skip_git_hooks: true)\n```\n\n----------------------------------------\n\nTITLE: Version Number Retrieval with Target Specification\nDESCRIPTION: Extended example showing how to get a version number for a specific target in the Xcode project.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_version_number.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nversion = get_version_number(\n  xcodeproj: \"Project.xcodeproj\",\n  target: \"App\"\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Screengrabfile Configuration\nDESCRIPTION: Ruby configuration file for screengrab showing common settings including locales and cleanup options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# remove the leading '#' to uncomment lines\n\n# app_package_name('your.app.package')\n# use_tests_in_packages(['your.screenshot.tests.package'])\n\n# app_apk_path('path/to/your/app.apk')\n# tests_apk_path('path/to/your/tests.apk')\n\nlocales(['en-US', 'fr-FR', 'it-IT'])\n\n# clear all previously generated screenshots in your local output directory before creating new ones\nclear_previous_screenshots(true)\n```\n\n----------------------------------------\n\nTITLE: Basic Git Import in Ruby with Fastlane\nDESCRIPTION: Basic example of importing a Fastfile from a git repository with version constraint using optimistic match operator.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_from_git.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nimport_from_git(\n  url: \"git@github.com:fastlane/fastlane.git\", # The URL of the repository to import the Fastfile from.\n  branch: \"HEAD\", # The branch to checkout on the repository.\n  path: \"fastlane/Fastfile\", # The path of the Fastfile in the repository.\n  version: \"~> 1.0.0\" # The version to checkout on the repository. Optimistic match operator can be used to select the latest version within constraints.\n)\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests with xcpretty\nDESCRIPTION: Example showing how to use xcpretty to format xcodebuild output in a more readable way with HTML report generation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset -o pipefail &&\n  xcodebuild \\\n    -workspace MyApp.xcworkspace \\\n    -scheme \"MyApp\" \\\n    -sdk iphonesimulator \\\n    -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n    test \\\n  | xcpretty \\\n    -r \"html\" \\\n    -o \"tests.html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Framefile.json for macOS Screenshots\nDESCRIPTION: Example configuration for framing macOS application screenshots. It defines the background image, offset positioning, and title height to properly position screenshots on a Mac device image.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"title\": {\n      \"color\": \"#545454\"\n    },\n    \"background\": \"Mac.jpg\",\n    \"offset\": {\n      \"offset\": \"+676+479\",\n      \"titleHeight\": 320\n    }\n  },\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Attempts for snapshot\nDESCRIPTION: Ruby code to set the number of retry attempts for UI Tests in snapshot.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_screenshots(number_of_retries: 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring LocaleTestRule in Java UI Tests\nDESCRIPTION: Java implementation showing how to add the LocaleTestRule to your JUnit tests to handle automatic switching of locales.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ClassRule\npublic static final LocaleTestRule localeTestRule = new LocaleTestRule();\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Builds in HockeyApp with Fastlane\nDESCRIPTION: Example showing how to create and update an app in HockeyApp with specific version information. This includes setting create_update flag to true and specifying bundle version information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hockey.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nhockey(\n  api_token: \"...\",\n  create_update: true,\n  public_identifier: \"....\",\n  bundle_short_version: \"1.0.2\",\n  bundle_version: \"1.0.2.145\",\n  ipa: \"./my.msi\",\n  notes: \"Changelog\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Match with Multiple Bundle Identifiers\nDESCRIPTION: Command to generate certificates and profiles for multiple app identifiers in a single match command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match appstore -a tools.fastlane.app,tools.fastlane.app.watchkitapp\n```\n\n----------------------------------------\n\nTITLE: Initializing Snapshot in Objective-C UI Tests\nDESCRIPTION: Setup code required in Objective-C UI Tests to initialize snapshot functionality. Should be placed in the setUp() method of the test class.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n```\n\n----------------------------------------\n\nTITLE: Download dSYMs After Specific Date\nDESCRIPTION: Example showing how to download dSYMs uploaded after a specific date and time.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_dsyms(after_uploaded_date: \"2020-09-11T19:00:00+01:00\")\n```\n\n----------------------------------------\n\nTITLE: Git Submodule Update with Initialization in Ruby\nDESCRIPTION: Executes a git submodule update command with the init option enabled, which initializes submodules before updating them.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_submodule_update.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngit_submodule_update(init: true)\n```\n\n----------------------------------------\n\nTITLE: Adding Media to Simulator Before Running snapshot\nDESCRIPTION: Ruby code to add photos and videos to the simulator before running snapshot.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_screenshots(add_photos: \"MyTestApp/demo.jpg\", add_videos: \"MyTestApp/demo.mp4\")\n```\n\n----------------------------------------\n\nTITLE: Executing Precheck with Custom Parameters in Ruby\nDESCRIPTION: Examples of running the precheck action with custom rule levels for specific checks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/precheck.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncheck_app_store_metadata(\n  negative_apple_sentiment: [level: :skip], # Set to skip to not run the `negative_apple_sentiment` rule\n  curse_words: [level: :warn] # Set to warn to only warn on curse word check failures\n)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nprecheck   # alias for \"check_app_store_metadata\"\n```\n\n----------------------------------------\n\nTITLE: Using cert Alias for get_certificates in Ruby\nDESCRIPTION: Shows how to use the 'cert' alias for the get_certificates action in a fastlane lane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_certificates.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncert # alias for \"get_certificates\"\n```\n\n----------------------------------------\n\nTITLE: Gradual Rollout for AAB\nDESCRIPTION: Command line example demonstrating how to gradually roll out a new Android App Bundle build to the beta track with a 50% rollout rate.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --aab path/app.aab --track beta --rollout 0.5\n```\n\n----------------------------------------\n\nTITLE: Running tests from an xctestrun package in Ruby\nDESCRIPTION: Example showing how to run tests from an existing xctestrun package file. This allows executing tests that have been previously defined and packaged in an Xcode test bundle.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# or run it from an existing xctestrun package\nrun_tests(\n   xctestrun: \"/path/to/mytests.xctestrun\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic App Store Build Number Query - Ruby\nDESCRIPTION: Simple usage of app_store_build_number action without any parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_build_number.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp_store_build_number\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Default Configuration\nDESCRIPTION: Shows the simplest way to run tests using scan or its alias run_tests without any additional parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests\n```\n\nLANGUAGE: ruby\nCODE:\n```\nscan # alias for \"run_tests\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Directory Behavior in Ruby Fastfile\nDESCRIPTION: This code snippet shows how fastlane handles directory paths in a Fastfile. It demonstrates that user code in the Fastfile runs inside the ./fastlane directory, while actions run in the root of the project.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/fastlane.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsh \"pwd\" # => \"[root]/fastlane\"\nputs Dir.pwd # => \"[root]/fastlane\"\n\nlane :something do\n  sh \"pwd\" # => \"[root]/fastlane\"\n  puts Dir.pwd # => \"[root]/fastlane\"\n\n  my_action\nend\n```\n\n----------------------------------------\n\nTITLE: Git Pull with Rebase in Fastlane\nDESCRIPTION: Executes git pull with the rebase parameter set to true, which uses the --rebase flag to rebase local changes on top of the remote branch instead of merging.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_pull.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngit_pull(rebase: true) # use --rebase with pull\n```\n\n----------------------------------------\n\nTITLE: Using the frameit Alias in a Fastfile\nDESCRIPTION: Using the alias 'frameit' instead of 'frame_screenshots' in a Fastfile. Both commands perform the same function.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nframeit # alias for \"frame_screenshots\"\n```\n\n----------------------------------------\n\nTITLE: Submitting a Build with Compliance Settings in Fastlane CLI\nDESCRIPTION: Submits a build for review with specific compliance and IDFA settings. Uses JSON to specify export compliance and IDFA usage information required by App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_31\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"\n```\n\n----------------------------------------\n\nTITLE: Show Available Precheck Options\nDESCRIPTION: Command to display all available options for the precheck action to customize metadata checking.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action precheck\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for HipChat Action\nDESCRIPTION: Demonstrates how to pass parameters to the HipChat action when running it from the command line. Parameters are passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hipchat.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run hipchat parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Android Tests in Fastlane\nDESCRIPTION: A simple lane configuration for running Android tests with fastlane. It uses the gradle action to execute the test task.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/running-tests.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :tests do\n  gradle(task: \"test\")\nend\n```\n\n----------------------------------------\n\nTITLE: Separate Credentials Configuration in Ruby\nDESCRIPTION: Appfile configuration that uses different credentials for Apple Developer Portal and App Store Connect, along with team IDs for both platforms.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Appfile.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\napp_identifier \"tools.fastlane.app\"       # The bundle identifier of your app\n\napple_dev_portal_id \"portal@company.com\"  # Apple Developer Account\nitunes_connect_id \"tunes@company.com\"     # App Store Connect Account\n\nteam_id \"Q2CBPJ58CA\" # Developer Portal Team ID\nitc_team_id \"18742801\" # App Store Connect Team ID\n```\n\n----------------------------------------\n\nTITLE: Creating a New Fastlane Plugin\nDESCRIPTION: This snippet demonstrates how to create a new Fastlane plugin using the 'fastlane new_plugin' command. It initializes the directory structure required for a valid Ruby gem.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/create-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ~/new/folder/\n\nfastlane new_plugin [plugin_name]\n```\n\n----------------------------------------\n\nTITLE: Using verify_pod_keys in Fastfile (Ruby)\nDESCRIPTION: Basic example of how to use the verify_pod_keys action in a Fastfile. This action runs a check against all keys specified in your Podfile to ensure they're more than a single character long.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_pod_keys.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nverify_pod_keys\n```\n\n----------------------------------------\n\nTITLE: Running upload_symbols_to_crashlytics from CLI\nDESCRIPTION: This command shows how to run the upload_symbols_to_crashlytics action directly from the terminal without adding it to a Fastfile. It's useful for one-off symbol uploads.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_crashlytics.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run upload_symbols_to_crashlytics\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for TestFlight Upload in Ruby\nDESCRIPTION: Examples of using aliases 'testflight' and 'pilot' for the 'upload_to_testflight' action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ntestflight # alias for \"upload_to_testflight\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\npilot # alias for \"upload_to_testflight\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic iOS Tests with Fastlane\nDESCRIPTION: Basic configuration for running iOS tests using fastlane's run_tests action with a specified scheme.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/running-tests.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :tests do\n  run_tests(scheme: \"MyAppTests\")\nend\n```\n\n----------------------------------------\n\nTITLE: Incrementing Build Number with Custom Xcode Project Path in Ruby\nDESCRIPTION: Sets a specific build number and specifies a custom path to the Xcode project. This is useful when the Xcode project is not in the root directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj: \"./path/to/MyApp.xcodeproj\" # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a GitHub-hosted Fastlane Plugin\nDESCRIPTION: This Ruby code snippet demonstrates how to add a Fastlane plugin hosted on GitHub to a project's Pluginfile. It specifies the gem name and the GitHub repository URL.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/create-plugin.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"fastlane-plugin-[plugin_name]\", git: \"https://github.com/[user]/[plugin_name]\"\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Command in Ruby\nDESCRIPTION: Simple Ruby command to capture iOS screenshots using the default snapshot settings. This is the most basic way to invoke snapshot in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_ios_screenshots\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of commit_version_bump in Fastlane\nDESCRIPTION: The simplest way to create a version bump commit in a Fastlane workflow, using default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump\n```\n\n----------------------------------------\n\nTITLE: Running OCLint Analysis with Fastlane\nDESCRIPTION: Example configuration for running OCLint static code analysis. Shows how to set compilation database, file selection patterns, report types, violation thresholds, and rule customization. Includes options for enabling Clang Static Analyzer and global analysis.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/oclint.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\noclint(\n  compile_commands: \"commands.json\",    # The JSON compilation database, use xctool reporter \"json-compilation-database\"\n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,    # Exclude all files matching this regex\n  report_type: \"pmd\",         # The type of the report (default: html)\n  max_priority_1: 10,         # The max allowed number of priority 1 violations\n  max_priority_2: 100,        # The max allowed number of priority 2 violations\n  max_priority_3: 1000,       # The max allowed number of priority 3 violations\n  thresholds: [     # Override the default behavior of rules\n    \"LONG_LINE=200\",\n    \"LONG_METHOD=200\"\n  ],\n  enable_rules: [   # List of rules to pick explicitly\n    \"DoubleNegative\",\n    \"SwitchStatementsDon'TNeedDefaultWhenFullyCovered\"\n  ],\n  disable_rules: [\"GotoStatement\"],     # List of rules to disable\n  list_enabled_rules: true,   # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true,    # Allow duplicated violations in the OCLint report\n  extra_arg: \"-Wno-everything\"# Additional argument to append to the compiler command line\n)\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Tester\nDESCRIPTION: Searches for a tester by email address and displays their details, including personal information, latest version tested, and devices used.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot find felix@krausefx.com\n```\n\n----------------------------------------\n\nTITLE: App Store Build Number Query with API Key - Ruby\nDESCRIPTION: Retrieves build number using App Store Connect API key authentication.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_build_number.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\napi_key = app_store_connect_api_key(\n  key_id: \"MyKeyID12345\",\n  issuer_id: \"00000000-0000-0000-0000-000000000000\",\n  key_filepath: \"./AuthKey.p8\"\n)\nbuild_num = app_store_build_number(\n  api_key: api_key\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Transporter Parameters for Firewall Issues\nDESCRIPTION: Command to specify additional parameters for iTunes Transporter when uploading through a firewall, using environment variables to set the transport mode.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...\n```\n\n----------------------------------------\n\nTITLE: Using xcexport in Fastfile (Ruby)\nDESCRIPTION: Basic usage example of the xcexport action in a Fastfile. This action exports the project using xcodebuild with default parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcexport.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcexport\n```\n\n----------------------------------------\n\nTITLE: Using fastlane_require for Dependencies\nDESCRIPTION: Demonstrates how to properly require third-party gems in Fastfile using fastlane_require.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nfastlane_require 'hike'\n\nlane :release do\n  # Do stuff with hike\nend\n```\n\n----------------------------------------\n\nTITLE: CLI Run Command with Parameters\nDESCRIPTION: Example of running increment_version_number with parameters from terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run increment_version_number parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Registering Devices with Additional Options in Ruby\nDESCRIPTION: This snippet demonstrates registering devices with additional options such as specifying a team ID and overriding the Apple Member Center username. It's useful for users who are members of multiple teams or want to use a different account.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_devices.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nregister_devices(\n  devices_file: \"./devices.txt\", # You must pass in either `devices_file` or `devices`.\n  team_id: \"XXXXXXXXXX\",         # Optional, if you\"re a member of multiple teams, then you need to pass the team ID here.\n  username: \"luka@goonbee.com\"   # Optional, lets you override the Apple Member Center username.\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Git Import in Ruby with Fastlane\nDESCRIPTION: Advanced example of importing a Fastfile with multiple version constraints and custom cache path to prevent repeated cloning.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_from_git.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nimport_from_git(\n  url: \"git@github.com:fastlane/fastlane.git\", # The URL of the repository to import the Fastfile from.\n  branch: \"HEAD\", # The branch to checkout on the repository.\n  path: \"fastlane/Fastfile\", # The path of the Fastfile in the repository.\n  version: [\">= 1.1.0\", \"< 2.0.0\"], # The version to checkout on the repository. Multiple conditions can be used to select the latest version within constraints.\n  cache_path: \"~/.cache/fastlane/imported\" # A directory in which the repository will be added, which means that it will not be cloned again on subsequent calls.\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Appfile Values in Fastfile\nDESCRIPTION: Code snippet demonstrating how to access Appfile configuration values from within a Fastfile using the CredentialsManager.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Appfile.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nidentifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)\nteam_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)\n```\n\n----------------------------------------\n\nTITLE: Running Notarize Action with Parameters\nDESCRIPTION: Example of running the notarize action from the terminal with custom parameters to specify package path, bundle ID, and other options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notarize.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run notarize parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting an array entry with mixed types in a plist file with Fastlane\nDESCRIPTION: Demonstrates how to set an array containing multiple data types (string, boolean, number) in a plist file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_plist.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_plist( # Sets an array-entry with multiple sub-types\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:array_entry] = [\"entry_01\", true, 1243]\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scan in Fastfile\nDESCRIPTION: Example of configuring scan in a Fastfile to run tests on multiple devices.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nscan(\n  workspace: \"Example.xcworkspace\",\n  devices: [\"iPhone 6s\", \"iPad Air\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Patch Expansion Files When Uploading APK in Shell\nDESCRIPTION: Command for uploading an APK while referencing existing patch expansion files from a previous version on Google Play.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --obb_patch_references_version 21 --obb_patch_file_size 666154207\n```\n\n----------------------------------------\n\nTITLE: Importing Certificates and Profiles\nDESCRIPTION: Command to import and encrypt certificates, private keys, and provisioning profiles into the match repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match import\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters Example\nDESCRIPTION: Example showing how to run the changelog_from_git_commits action with parameters from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/changelog_from_git_commits.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run changelog_from_git_commits parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Nexus 2 Repository with Fastlane in Ruby\nDESCRIPTION: Example showing how to upload a file to a Nexus 2 repository using the nexus_upload action. This snippet includes required parameters such as file path, repository details, and authentication credentials.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/nexus_upload.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# for Nexus 2\nnexus_upload(\n  file: \"/path/to/file.ipa\",\n  repo_id: \"artefacts\",\n  repo_group_id: \"com.fastlane\",\n  repo_project_name: \"ipa\",\n  repo_project_version: \"1.13\",\n  repo_classifier: \"dSYM\", # Optional\n  endpoint: \"http://localhost:8081\",\n  username: \"admin\",\n  password: \"admin123\"\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Enabling Services in Fastlane Produce\nDESCRIPTION: Command to display all available options for enabling various app services and capabilities using the 'produce enable_services' command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce enable_services --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Flavors in Gradle\nDESCRIPTION: Gradle configuration to add screengrab-specific product flavors for runtime detection\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_15\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n...\n    flavorDimensions \"mode\"\n    productFlavors {\n        screengrab {\n            dimension \"mode\"\n        }\n        regular {\n            dimension \"mode\"\n        }\n    }\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Running create_app_online from Terminal\nDESCRIPTION: Command to execute the create_app_online action directly from the terminal as a one-off operation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run create_app_online\n```\n\n----------------------------------------\n\nTITLE: Incrementing Podspec Version with Patch Bump Type in Ruby\nDESCRIPTION: This example shows how to increment the version number of a podspec file using the 'patch' bump type. It updates the version in the specified podspec file and returns the new version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_bump_podspec.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nversion = version_bump_podspec(path: \"TSMessages.podspec\", bump_type: \"patch\")\n```\n\n----------------------------------------\n\nTITLE: Triggering IFTTT Event with Fastlane\nDESCRIPTION: Example of how to use the ifttt action in Fastlane to trigger an event on IFTTT's Maker Channel. The action requires an API key and event name, and supports three optional values to send additional data.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ifttt.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nifttt(\n  api_key: \"...\",\n  event_name: \"...\",\n  value1: \"foo\",\n  value2: \"bar\",\n  value3: \"baz\"\n)\n```\n\n----------------------------------------\n\nTITLE: Associating an App with an App Group\nDESCRIPTION: Command to associate an existing app with a specific App Group using their respective identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_group -a com.krausefx.app group.krausefx\n```\n\n----------------------------------------\n\nTITLE: Using make_changelog_from_jenkins with Fastlane\nDESCRIPTION: Example of how to use the make_changelog_from_jenkins action in a Fastfile to generate a changelog from Jenkins, with an optional fallback if no changelog is available.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/make_changelog_from_jenkins.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmake_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog: \"Bug fixes and performance enhancements\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding App Review Attachment File\nDESCRIPTION: How to provide additional information to the app review team as a file attachment.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\napp_review_attachment_file: \"./readme.txt\"\n```\n\n----------------------------------------\n\nTITLE: Basic Google Play Version Code Retrieval in Ruby\nDESCRIPTION: Simple example showing how to retrieve version codes from a Google Play track using the google_play_track_version_codes action. Returns an array of integers representing version codes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_version_codes.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngoogle_play_track_version_codes\n```\n\n----------------------------------------\n\nTITLE: Setting In-App Update Priority for AAB Release in Shell\nDESCRIPTION: Command for uploading an Android App Bundle to the beta track while specifying an in-app update priority level of 3 (on a scale of 0-5).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --aab path/app.aab --track beta --in_app_update_priority 3\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Capture Example\nDESCRIPTION: Simple Ruby example showing the most basic way to capture iOS screenshots using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_ios_screenshots\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Tests in CI Environment\nDESCRIPTION: Command to execute fastlane tests in a continuous integration environment.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/running-tests.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane tests\n```\n\n----------------------------------------\n\nTITLE: Basic Frameit Usage Command\nDESCRIPTION: Basic command to frame iOS/Mac OS screenshots using frameit\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit\n```\n\n----------------------------------------\n\nTITLE: Adding a TestFlight Tester with App Identifier and Groups\nDESCRIPTION: Command to add a tester to TestFlight with explicit app identifier and testing groups specification.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot add email@email.com -a com.krausefx.app -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to HipChat Using Fastlane\nDESCRIPTION: This example demonstrates how to send a success message to a HipChat room or user using the Fastlane HipChat action. The message format is set to HTML and includes notification of successful app release.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hipchat.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhipchat(\n  message: \"App successfully released!\",\n  message_format: \"html\", # or \"text\", defaults to \"html\"\n  channel: \"Room or @username\",\n  success: true\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Transporter Parameters in Fastfile\nDESCRIPTION: Code snippet showing how to set iTunes Transporter parameters in a Fastfile for use with the pilot action to handle firewall issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...\n```\n\n----------------------------------------\n\nTITLE: Uploading APK with References to Existing Expansion Files in Shell\nDESCRIPTION: Example showing how to upload an APK while referencing existing expansion files from a previous version without re-uploading them.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --obb_main_references_version 21 --obb_main_file_size 666154207\n```\n\n----------------------------------------\n\nTITLE: Basic Precheck Usage with Command Line\nDESCRIPTION: Example showing how to run the precheck tool from the command line to scan App Store metadata for potential issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane precheck\n```\n\n----------------------------------------\n\nTITLE: Passing CLI Flags to Gradle in Ruby\nDESCRIPTION: Example showing how to pass additional command line flags to the gradle command execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n\n  flags: \"--exitcode --xml file.xml\"\n)\n```\n\n----------------------------------------\n\nTITLE: Framing Screenshots with Landscape Detection in Frameit\nDESCRIPTION: Ruby example that applies landscape right orientation to any screenshot containing 'landscape' in its filename. Demonstrates using simple pattern matching in the orientation block.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# It frames the screenshots in landscape right whenever the filename contains `landscape` word\nframeit(\n  silver: true,\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    f = filename.downcase\n    if f.include?(\"landscape\")\n      :landscape_right\n    end\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Tester to TestFlight Groups\nDESCRIPTION: Command to add a new or existing tester to specific testing groups in TestFlight, creating the tester if they don't exist and associating them with the specified groups.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot add email@invite.com -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Available parameters for disabling iOS app services with fastlane produce\nDESCRIPTION: Complete list of command-line parameters for disabling various iOS app services including iCloud, Apple Pay, Push Notifications, and other capabilities using fastlane produce.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\n--access-wifi                         Disable Access Wifi\n--app-attest                          Disable App Attest\n--app-group                           Disable App Group\n--apple-pay                           Disable Apple Pay\n--associated-domains                  Disable Associated Domains\n--auto-fill-credential                Disable Auto Fill Credential\n--class-kit                           Disable Class Kit\n--icloud STRING                        Disable iCloud\n--custom-network-protocol             Disable Custom Network Protocol\n--data-protection STRING              Disable Data Protection\n--extended-virtual-address-space      Disable Extended Virtual Address Space\n--game-center STRING                  Disable Game Center\n--health-kit                          Disable Health Kit\n--hls-interstitial-preview            Disable Hls Interstitial Preview\n--home-kit                            Disable Home Kit\n--hotspot                             Disable Hotspot\n--in-app-purchase                     Disable In App Purchase\n--inter-app-audio                     Disable Inter App Audio\n--low-latency-hls                     Disable Low Latency Hls\n--managed-associated-domains          Disable Managed Associated Domains\n--maps                                Disable Maps\n--multipath                           Disable Multipath\n--network-extension                   Disable Network Extension\n--nfc-tag-reading                     Disable NFC Tag Reading\n--personal-vpn                        Disable Personal VPN\n--passbook                            Disable Passbook (deprecated)\n--push-notification                   Disable Push Notification\n--sign-in-with-apple                  Disable Sign In With Apple\n--siri-kit                            Disable Siri Kit\n--system-extension                    Disable System Extension\n--user-management                     Disable User Management\n--vpn-configuration                   Disable Vpn Configuration (deprecated)\n--wallet                              Disable Wallet\n--wireless-accessory                  Disable Wireless Accessory\n--car-play-audio-app                  Disable Car Play Audio App\n--car-play-messaging-app              Disable Car Play Messaging App\n--car-play-navigation-app             Disable Car Play Navigation App\n--car-play-voip-calling-app           Disable Car Play Voip Calling App\n--critical-alerts                     Disable Critical Alerts\n--hotspot-helper                      Disable Hotspot Helper\n--driver-kit                          Disable DriverKit\n--driver-kit-endpoint-security        Disable DriverKit Endpoint Security\n--driver-kit-family-hid-device        Disable DriverKit Family HID Device\n--driver-kit-family-networking        Disable DriverKit Family Networking\n--driver-kit-family-serial            Disable DriverKit Family Serial\n--driver-kit-hid-event-service        Disable DriverKit HID EventService\n--driver-kit-transport-hid            Disable DriverKit Transport HID\n--multitasking-camera-access          Disable Multitasking Camera Access\n--sf-universal-link-api               Disable SFUniversalLink API\n--vp9-decoder                         Disable VP9 Decoder\n--music-kit                           Disable MusicKit\n--shazam-kit                          Disable ShazamKit\n--communication-notifications         Disable Communication Notifications\n--group-activities                    Disable Group Activities\n--health-kit-estimate-recalibration   Disable HealthKit Estimate Recalibration\n--time-sensitive-notifications        Disable Time Sensitive Notifications\n```\n\n----------------------------------------\n\nTITLE: Fetching Changelog from File System or Remote Server\nDESCRIPTION: Lane demonstrating how to read changelog content from a local file or download it from a remote server before using it with Crashlytics distribution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\"../Changelog.txt\")\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \"https://lookatmycms.com/changelog.txt\")\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Git Branch Check in Ruby\nDESCRIPTION: Example showing how to check for a specific git branch using the branch parameter. This checks if the current branch is 'develop'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_branch.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nensure_git_branch(\n  branch: 'develop'\n)\n```\n\n----------------------------------------\n\nTITLE: Running Match with Verbose Output\nDESCRIPTION: Command to run match with detailed output for troubleshooting and understanding the process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match --verbose\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Code Signing for Specific Targets in Ruby\nDESCRIPTION: Disables automatic code signing for specific targets in the Xcode project.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: false,\n  targets: [\"demo\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Running xcov with Parameters from Command Line\nDESCRIPTION: This example demonstrates how to pass parameters to the xcov action when running it directly from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcov.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcov parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Associating a Single Merchant with an App in Fastlane Produce\nDESCRIPTION: Example command showing how to associate an existing Apple Pay Merchant Identifier with an iOS app using the 'produce associate_merchant' command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production\n```\n\n----------------------------------------\n\nTITLE: Running appstore action from command line\nDESCRIPTION: Command to run the appstore action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run appstore\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running Xcode Version Check\nDESCRIPTION: Terminal command to run the ensure_xcode_version action directly from CLI without adding to Fastfile. Shows both basic usage and how to pass parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_xcode_version.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ensure_xcode_version\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ensure_xcode_version parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Parameters for Gym Action\nDESCRIPTION: Command to display all available parameters for the gym action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action gym\n```\n\n----------------------------------------\n\nTITLE: Updating URL Schemes with Specific Values in Ruby\nDESCRIPTION: This snippet demonstrates how to use the update_url_schemes action to set specific URL schemes for an app. It requires the path to the Info.plist file and an array of new URL schemes to be set.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_url_schemes.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_url_schemes(\n  path: \"path/to/Info.plist\",\n  url_schemes: [\"com.myapp\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Registering an iOS Device with Advanced Options in Ruby\nDESCRIPTION: This snippet shows how to register a device with additional optional parameters such as team_id and username. These parameters are useful when working with multiple Apple Developer teams or when needing to override the default Apple ID.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_device.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nregister_device(\n  name: \"Luka iPhone 6\",\n  udid: \"1234567890123456789012345678901234567890\",\n  team_id: \"XXXXXXXXXX\",         # Optional, if you\"re a member of multiple teams, then you need to pass the team ID here.\n  username: \"luka@goonbee.com\"   # Optional, lets you override the Apple Member Center username.\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Gradle Task Execution in Ruby\nDESCRIPTION: Executes a basic Gradle assemble task with flavor and build type specifications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"assemble\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using clean_build_artifacts Action in Ruby\nDESCRIPTION: This snippet demonstrates how to use the clean_build_artifacts action in a Fastfile. It deletes files created by gym, cert, sigh, or download_dsyms, excluding the fastlane/report.xml file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_build_artifacts.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclean_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Setting App Icon Path in Fastlane Deliver\nDESCRIPTION: Specifies the path to a new app icon file, which must be exactly 1024x1024 pixels in size. This icon will be used for the App Store listing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\napp_icon('./AppIcon.png')\n```\n\n----------------------------------------\n\nTITLE: Custom Tag Text in Ruby\nDESCRIPTION: Example demonstrating how to specify a custom tag text, which overrides all other parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_git_tag.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Alternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.\nadd_git_tag(\n  tag: \"my_custom_tag\"\n)\n```\n\n----------------------------------------\n\nTITLE: Bypassing Git Hooks in Version Bump Commit\nDESCRIPTION: Creates a version bump commit with the '--no-verify' flag to bypass git hooks, useful in CI/CD pipelines or when hooks might interfere with the commit process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  no_verify: true # optional, default: false\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading a Build to Tryouts using Fastlane\nDESCRIPTION: This code snippet demonstrates how to use the 'tryouts' action in a Fastlane script to upload a new build to Tryouts. It requires an API token, application ID, and the path to the build file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/tryouts.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntryouts(\n  api_token: \"...\",\n  app_id: \"application-id\",\n  build_file: \"test.ipa\",\n)\n```\n\n----------------------------------------\n\nTITLE: Inline Export Options in Gymfile\nDESCRIPTION: Example showing how to provide export options directly in the Gymfile as a hash, including method, manifest, and thinning options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nexport_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of fastlane gym\nDESCRIPTION: The simplest way to build an application using fastlane gym without any parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym\n```\n\n----------------------------------------\n\nTITLE: Using git_branch Action in Ruby\nDESCRIPTION: Simple example showing how to use the git_branch action in a Fastlane file to get the current git branch name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_branch.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngit_branch\n```\n\n----------------------------------------\n\nTITLE: Snapshot with Custom Options in Ruby\nDESCRIPTION: Ruby code for capturing iOS screenshots with custom options. This example skips opening the summary and cleans the project before running.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Age Rating Keys in App Store Submissions\nDESCRIPTION: Boolean age rating keys that can be used for App Store Connect submissions. These keys accept true/false values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_35\n\nLANGUAGE: markdown\nCODE:\n```\n**Keys**\n\n- `gambling`\n- 'seventeenPlus'\n- `unrestrictedWebAccess`\n```\n\n----------------------------------------\n\nTITLE: Running frameit Action from CLI\nDESCRIPTION: Command to run the frameit action directly from the command line interface without adding it to a Fastfile. This is useful for one-off executions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run frameit\n```\n\n----------------------------------------\n\nTITLE: Using sigh Alias in Ruby\nDESCRIPTION: This snippet shows the use of the 'sigh' alias for the get_provisioning_profile action. It performs the same function as the previous example.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sigh.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsigh # alias for \"get_provisioning_profile\"\n```\n\n----------------------------------------\n\nTITLE: Generating Code Count Reports with Cloc Action in Ruby for Fastlane\nDESCRIPTION: This example shows how to use the cloc action in a Fastfile to generate a code count report. It specifies directories to exclude, where to output the report, and the source directory to analyze. This is useful for code metrics and integrating with CI/CD pipelines like Jenkins.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cloc.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncloc(\n   exclude_dir: \"ThirdParty,Resources\",\n   output_directory: \"reports\",\n   source_directory: \"MyCoolApp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Available Parameters for Disabling Services in Fastlane Produce\nDESCRIPTION: Complete list of available command line parameters for disabling different iOS app capabilities and services through the 'produce disable_services' command, including options for iCloud, Apple Pay, Game Center, and many other Apple services.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\n--access-wifi                         Disable Access Wifi\n--app-attest                          Disable App Attest\n--app-group                           Disable App Group\n--apple-pay                           Disable Apple Pay\n--associated-domains                  Disable Associated Domains\n--auto-fill-credential                Disable Auto Fill Credential\n--class-kit                           Disable Class Kit\n--icloud STRING                        Disable iCloud\n--custom-network-protocol             Disable Custom Network Protocol\n--data-protection STRING              Disable Data Protection\n--extended-virtual-address-space      Disable Extended Virtual Address Space\n--game-center STRING                  Disable Game Center\n--health-kit                          Disable Health Kit\n--hls-interstitial-preview            Disable Hls Interstitial Preview\n--home-kit                            Disable Home Kit\n--hotspot                             Disable Hotspot\n--in-app-purchase                     Disable In App Purchase\n--inter-app-audio                     Disable Inter App Audio\n--low-latency-hls                     Disable Low Latency Hls\n--managed-associated-domains          Disable Managed Associated Domains\n--maps                                Disable Maps\n--multipath                           Disable Multipath\n--network-extension                   Disable Network Extension\n--nfc-tag-reading                     Disable NFC Tag Reading\n--personal-vpn                        Disable Personal VPN\n--passbook                            Disable Passbook (deprecated)\n--push-notification                   Disable Push Notification\n--sign-in-with-apple                  Disable Sign In With Apple\n--siri-kit                            Disable Siri Kit\n--system-extension                    Disable System Extension\n--user-management                     Disable User Management\n--vpn-configuration                   Disable Vpn Configuration (deprecated)\n--wallet                              Disable Wallet\n--wireless-accessory                  Disable Wireless Accessory\n--car-play-audio-app                  Disable Car Play Audio App\n--car-play-messaging-app              Disable Car Play Messaging App\n--car-play-navigation-app             Disable Car Play Navigation App\n--car-play-voip-calling-app           Disable Car Play Voip Calling App\n--critical-alerts                     Disable Critical Alerts\n--hotspot-helper                      Disable Hotspot Helper\n--driver-kit                          Disable DriverKit\n--driver-kit-endpoint-security        Disable DriverKit Endpoint Security\n--driver-kit-family-hid-device        Disable DriverKit Family HID Device\n--driver-kit-family-networking        Disable DriverKit Family Networking\n--driver-kit-family-serial            Disable DriverKit Family Serial\n--driver-kit-hid-event-service        Disable DriverKit HID EventService\n--driver-kit-transport-hid            Disable DriverKit Transport HID\n--multitasking-camera-access          Disable Multitasking Camera Access\n--sf-universal-link-api               Disable SFUniversalLink API\n--vp9-decoder                         Disable VP9 Decoder\n--music-kit                           Disable MusicKit\n--shazam-kit                          Disable ShazamKit\n--communication-notifications         Disable Communication Notifications\n--group-activities                    Disable Group Activities\n--health-kit-estimate-recalibration   Disable HealthKit Estimate Recalibration\n--time-sensitive-notifications        Disable Time Sensitive Notifications\n```\n\n----------------------------------------\n\nTITLE: Passing CLI Flags to Gradle in Ruby\nDESCRIPTION: Shows how to pass additional CLI flags to the Gradle command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n\n  flags: \"--exitcode --xml file.xml\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Match for App Store Certificates and Profiles\nDESCRIPTION: Command to generate and install Apple App Store certificates and provisioning profiles using fastlane match.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfastlane match appstore\n```\n\n----------------------------------------\n\nTITLE: Complete Package.swift example for Fastlane SPM integration\nDESCRIPTION: Full Package.swift configuration for a Fastlane Swift project. This defines an executable package with Fastlane as a dependency.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.2\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"fastlaneRunner\",\n    products: [\n        .executable(name: \"fastlaneRunner\", targets: [\"fastlaneRunner\"])\n    ],\n    dependencies: [\n        .package(name: \"Fastlane\", url: \"https://github.com/fastlane/fastlane\", from: \"2.179.0\")\n    ],\n    targets: [\n        .target(\n            name: \"fastlaneRunner\",\n            dependencies: [\"Fastlane\"],\n            path: \"Sources/Thingy\"\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Keychain in Ruby (Fastlane)\nDESCRIPTION: Unlocks a keychain and sets it as the default keychain using the set_default parameter. This determines which keychain is used by default for operations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nunlock_keychain( # In addition, the keychain can be selected as a default keychain\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\",\n  set_default: true\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transporter Protocol in Fastfile\nDESCRIPTION: Sets additional parameters for iTunes Transporter to help with firewall issues when using pilot within a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\nENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...\n```\n\n----------------------------------------\n\nTITLE: JUnit4 UI Test Class Example in Java\nDESCRIPTION: Complete Java example of a JUnit4 test class that uses screengrab to capture screenshots during UI testing with Espresso.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(JUnit4.class)\npublic class JUnit4StyleTests {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityScenarioRule<MainActivity> activityRule = new ActivityScenarioRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload with Localized Info in Ruby\nDESCRIPTION: Complex example showing TestFlight upload with beta app review info and localized app/build information\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-default\",\n      privacy_policy_url: \"https://example.com/privacy-default\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating App Identifier in Ruby using fastlane\nDESCRIPTION: This code snippet demonstrates how to use the update_app_identifier action in fastlane to update an app's bundle identifier. It specifies the Xcode project file, the path to the Info.plist file, and the new app identifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_identifier.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_app_identifier(\n  xcodeproj: \"Example.xcodeproj\", # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path: \"Example/Info.plist\", # Path to info plist file, relative to xcodeproj\n  app_identifier: \"com.test.example\" # The App Identifier\n)\n```\n\n----------------------------------------\n\nTITLE: JUnit4 UI Test Example in Java\nDESCRIPTION: Complete example of a JUnit4 test class in Java that takes screenshots with screengrab during the test execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(JUnit4.class)\npublic class JUnit4StyleTests {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityScenarioRule<MainActivity> activityRule = new ActivityScenarioRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Precheckfile Configuration in Ruby\nDESCRIPTION: Example of a Precheckfile configuration for the precheck action, setting rule levels and custom text checks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/precheck.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nnegative_apple_sentiment(level: :skip)\n\ncurse_words(level: :warn)\n\nunreachable_urls(level: :error)\n\ncustom_text(data: [\"chrome\", \"webos\"], \n           level: :warn)\n```\n\n----------------------------------------\n\nTITLE: Listing TestFlight Builds\nDESCRIPTION: Command to list all active and processing builds for a specific application in TestFlight.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot builds\n```\n\n----------------------------------------\n\nTITLE: Running Create Keychain from CLI\nDESCRIPTION: Commands showing how to run the create_keychain action directly from the command line, including an example with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_keychain.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run create_keychain\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run create_keychain parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Installing screengrab via gem\nDESCRIPTION: Command to install the screengrab gem globally on your system using sudo.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install screengrab\n```\n\n----------------------------------------\n\nTITLE: Handling Version Bumps with GitLab CI Skip\nDESCRIPTION: Ruby code snippet for incrementing build numbers and committing changes with [ci-skip] tag to prevent Jenkins from triggering infinite build loops when using GitLab webhooks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/jenkins.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_number = increment_build_number\ncommit_version_bump(message:\"[ci-skip] Version Bump to #{build_number}\")\ngit_commit(path:\"./CHANGELOG.md\", message:\"[ci-skip] Updated CHANGELOG for Build #{build_number}\")\npush_to_git_remote\n```\n\n----------------------------------------\n\nTITLE: Including Settings Bundle in Version Bump Commit\nDESCRIPTION: Includes the Settings.bundle/Root.plist file in the version bump commit, useful for apps that display version information in settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  settings: true # Include Settings.bundle/Root.plist\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Connected Android Devices with ADB in Ruby\nDESCRIPTION: Example showing how to iterate through connected Android devices and retrieve the model information for each device using ADB commands. The code demonstrates using the adb_devices action along with individual ADB shell commands.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb_devices.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nadb_devices.each do |device|\n  model = adb(command: \"shell getprop ro.product.model\",\n    serial: device.serial).strip\n\n  puts \"Model #{model} is connected\"\nend\n```\n\n----------------------------------------\n\nTITLE: Posting Tweet with Fastlane Twitter Action in Ruby\nDESCRIPTION: Example showing how to post a tweet using Fastlane's Twitter action. Requires consumer and access token credentials from Twitter developer account.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/twitter.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntwitter(\n  access_token: \"XXXX\",\n  access_token_secret: \"xxx\",\n  consumer_key: \"xxx\",\n  consumer_secret: \"xxx\",\n  message: \"You rock!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Plugin from URL in Ruby\nDESCRIPTION: This snippet demonstrates how to use the install_xcode_plugin action to install an Xcode plugin from a URL. It requires the url parameter to be set to the ZIP file location of the plugin.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/install_xcode_plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ninstall_xcode_plugin(url: \"https://example.com/clubmate/plugin.zip\")\n```\n\n----------------------------------------\n\nTITLE: Running xcarchive as a Standalone Command (Shell)\nDESCRIPTION: Commands to run the xcarchive action directly from the terminal without adding it to a Fastfile. Includes examples of how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcarchive.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run xcarchive\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run xcarchive parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Using Silver Device Frames with frameit\nDESCRIPTION: This command applies silver-colored device frames to the screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit silver\n```\n\n----------------------------------------\n\nTITLE: Creating an iCloud Container with Produce in Bash\nDESCRIPTION: This command creates a new iCloud Container with a specified identifier and name using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce cloud_container -g iCloud.com.krausefx.app -n \"Example iCloud Container\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Tester to a Specific App and Groups\nDESCRIPTION: Adds a tester to specific testing groups for a particular app identified by its bundle identifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot add email@email.com -a com.krausefx.app -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Displaying macOS Notification with Fastlane\nDESCRIPTION: This Ruby code snippet demonstrates how to use the 'notification' action in Fastlane to display a macOS notification with a custom subtitle and message.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notification.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nnotification(subtitle: \"Finished Building\", message: \"Ready to upload...\")\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Deliver Action via CLI\nDESCRIPTION: Demonstrates how to pass parameters to the 'deliver' action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_18\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run deliver parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dark Badge to App Icon with Fastlane\nDESCRIPTION: This snippet demonstrates how to add a dark-flavored badge to the app icon using the badge action in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/badge.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbadge(dark: true)\n```\n\n----------------------------------------\n\nTITLE: Exporting Distribution Certificate as P12 File\nDESCRIPTION: Commands to decrypt certificate and private key files from match storage, then repackage them into a single .p12 file for other uses.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nopenssl aes-256-cbc -k \"<password>\" -in \"certs/<type>/<unique-id>.cer\" -out \"cert.der\" -a -d -md [md5|sha256]\nopenssl x509 -inform der -in cert.der -out cert.pem\n```\n\n----------------------------------------\n\nTITLE: Using spaceship_stats Action in Ruby\nDESCRIPTION: Basic usage example of the spaceship_stats action in a Fastfile. This action prints out statistics about Spaceship API requests made during the current session, showing the number of requests to each domain.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_stats.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nspaceship_stats\n```\n\n----------------------------------------\n\nTITLE: Basic Danger Integration with Fastlane\nDESCRIPTION: Simple example of using Danger within a fastlane workflow without any custom parameters. This runs Danger with all default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/danger.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndanger\n```\n\n----------------------------------------\n\nTITLE: CLI Parameters Example\nDESCRIPTION: Example showing how to pass parameters when running cocoapods action from CLI\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cocoapods.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run cocoapods parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Deliver Usage in Fastfile\nDESCRIPTION: Simple implementation of the deliver action in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndeliver\n```\n\n----------------------------------------\n\nTITLE: Running upload_symbols_to_crashlytics with Parameters from CLI\nDESCRIPTION: This example demonstrates how to run the upload_symbols_to_crashlytics action from the terminal with specific parameters. It uses the colon syntax to pass parameter values to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_crashlytics.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run upload_symbols_to_crashlytics parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting a key-value pair using set_pod_key in Fastlane\nDESCRIPTION: Example of how to use the set_pod_key action to add an API token to cocoapods-keys for a specific project. This action securely stores sensitive information like API keys for iOS/macOS projects.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_pod_key.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nset_pod_key(\n  key: \"APIToken\",\n  value: \"1234\",\n  project: \"MyProject\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using scan alias for run_tests in Ruby\nDESCRIPTION: Example showing the scan action, which is an alias for run_tests. Both commands perform the same function of running tests for iOS or macOS applications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nscan # alias for \"run_tests\"\n```\n\n----------------------------------------\n\nTITLE: Associating an App with Multiple iCloud Containers\nDESCRIPTION: Command to associate an existing app with multiple iCloud Containers at once.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app1 iCloud.com.krausefx.app2\n```\n\n----------------------------------------\n\nTITLE: Using Export Options with a Plist File\nDESCRIPTION: Example showing how to specify a custom export options plist file in the Gymfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nexport_options(\"./ExportOptions.plist\")\n```\n\n----------------------------------------\n\nTITLE: Basic Git Tag Addition in Ruby\nDESCRIPTION: Simple example of adding a git tag with default values using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_git_tag.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nadd_git_tag # simple tag with default values\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Mode for Debugging\nDESCRIPTION: Enables verbose output when uploading to TestFlight, which provides more detailed information for troubleshooting issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_14\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload --verbose\n```\n\n----------------------------------------\n\nTITLE: Basic Changelog Generation in Ruby\nDESCRIPTION: Simple example of generating a changelog from git commits using default parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/changelog_from_git_commits.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nchangelog_from_git_commits\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running Appium Action\nDESCRIPTION: Command line instruction for running the Appium action directly from terminal without adding it to Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appium.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run appium\n```\n\n----------------------------------------\n\nTITLE: Copying URL to Clipboard in Ruby with Fastlane\nDESCRIPTION: This snippet demonstrates how to use the clipboard action to copy a URL to the clipboard. It's a simple example of the action's basic usage.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clipboard.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclipboard(value: \"https://docs.fastlane.tools/\")\n```\n\n----------------------------------------\n\nTITLE: Uploading APK with Expansion File References\nDESCRIPTION: Command line example for uploading an APK while referencing existing expansion files from a previous version rather than uploading new ones.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --obb_main_references_version 21 --obb_main_file_size 666154207\n```\n\n----------------------------------------\n\nTITLE: Displaying set_pod_key documentation in terminal\nDESCRIPTION: Command to show the complete documentation for the set_pod_key action in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_pod_key.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action set_pod_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI YAML for iOS projects with fastlane\nDESCRIPTION: Configuration of Travis CI for iOS projects using fastlane. This sets up macOS environment with Xcode 8.3, installs bundle dependencies, and runs the 'beta' lane from your fastlane configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/travis.md#2025-04-17_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nos: osx\nlanguage: objective-c\nosx_image: xcode8.3\ninstall:\n  - bundle install\nscript:\n  - fastlane beta\n```\n\n----------------------------------------\n\nTITLE: Deploying iOS App to DeployGate using fastlane\nDESCRIPTION: This code snippet demonstrates how to use the deploygate action to upload an iOS IPA file to DeployGate. It requires an API token and username, and allows optional parameters like distribution key and name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deploygate.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndeploygate(\n  api_token: \"...\",\n  user: \"target username or organization name\",\n  ipa: \"./ipa_file.ipa\",\n  message: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n  distribution_key: \"(Optional) Target Distribution Key\",\n  distribution_name: \"(Optional) Target Distribution Name\"\n)\n```\n\n----------------------------------------\n\nTITLE: Resetting Specific Files in Git Repository using Fastlane\nDESCRIPTION: Forces a reset of the git repository but only for specific files provided in an array, leaving other changes intact.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_git_repo.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nreset_git_repo(\n  force: true,\n  files: [\n    \"./file.txt\"\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Pushing Specific Podspec File in Ruby\nDESCRIPTION: This example shows how to push a specific Podspec file by supplying its path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_push.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npod_push(path: \"TSMessages.podspec\")\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to update_code_signing_settings via CLI\nDESCRIPTION: This snippet demonstrates how to pass parameters to the update_code_signing_settings action when running it directly from the terminal using the fastlane run command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_code_signing_settings.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run update_code_signing_settings parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting DecorView Screenshot Strategy for Older Devices\nDESCRIPTION: Java code to set the DecorView screenshot strategy when working with older Android devices (below API 18).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nScreengrab.setDefaultScreenshotStrategy(new DecorViewScreenshotStrategy());\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode for TestFlight Uploads\nDESCRIPTION: Command to upload a build to TestFlight with verbose output, useful for debugging issues with the upload process by providing more detailed logs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload --verbose\n```\n\n----------------------------------------\n\nTITLE: Running setup_circle_ci Action from CLI in Ruby\nDESCRIPTION: This snippet shows how to run the setup_circle_ci action from the command line interface. It demonstrates the basic usage and how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_circle_ci.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run setup_circle_ci\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run setup_circle_ci parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running version_bump_podspec from CLI with Parameters\nDESCRIPTION: This command demonstrates how to run the version_bump_podspec action from the command line with specific parameters passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_bump_podspec.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run version_bump_podspec parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Deliver Command Usage\nDESCRIPTION: Basic command line usage of the deliver action for uploading app metadata and builds\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfastlane deliver\n```\n\n----------------------------------------\n\nTITLE: Running Match Action from CLI\nDESCRIPTION: Command to execute the match action directly from the terminal without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run match\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Code Signing with Project Path in Ruby\nDESCRIPTION: Disables automatic code signing by specifying the Xcode project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters via Environment Variables\nDESCRIPTION: Shows how to pass parameters to fastlane actions using environment variables instead of specifying them in the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nMY_NEW_ACTION_FILE=file.txt fastlane run my_new_action\n```\n\n----------------------------------------\n\nTITLE: Example JSON for App Collecting Data\nDESCRIPTION: This is an example of the JSON configuration file for an app that collects user data. It shows payment information used for app functionality and name information used for personalization and functionality, with different data protection settings for each.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n[\n  {\n    \"category\": \"PAYMENT_INFORMATION\",\n    \"purposes\": [\n      \"APP_FUNCTIONALITY\"\n    ],\n    \"data_protections\": [\n      \"DATA_NOT_LINKED_TO_YOU\"\n    ]\n  },\n  {\n    \"category\": \"NAME\",\n    \"purposes\": [\n      \"PRODUCT_PERSONALIZATION\",\n      \"APP_FUNCTIONALITY\"\n    ],\n    \"data_protections\": [\n      \"DATA_LINKED_TO_YOU\",\n      \"DATA_USED_TO_TRACK_YOU\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Viewing Action Documentation via CLI\nDESCRIPTION: Command to display the install_provisioning_profile action documentation in terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/install_provisioning_profile.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action install_provisioning_profile\n```\n\n----------------------------------------\n\nTITLE: Configuring SPM for macOS Simulator with ARM64 Architecture in Ruby\nDESCRIPTION: Shows how to configure the 'spm' action for use with the macOS simulator on ARM64 architecture.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spm.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nspm(\n  simulator: \"macosx\",\n  simulator_arch: \"arm64\"\n)\n```\n\n----------------------------------------\n\nTITLE: Copying Hockey Download Link to Clipboard in Ruby with Fastlane\nDESCRIPTION: This example shows how to copy a Hockey download link to the clipboard using the clipboard action. It uses the lane_context to access the HOCKEY_DOWNLOAD_LINK shared value, falling back to an empty string if not available.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clipboard.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] || \"\")\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of set_build_number_repository in Ruby\nDESCRIPTION: A simple example showing how to use the set_build_number_repository action with no parameters. This will use default behavior of detecting the repository type and setting the build number based on the current HEAD.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_build_number_repository.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nset_build_number_repository\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Arguments in Ruby\nDESCRIPTION: Example showing how to pass launch arguments to test cases that can be accessed through InstrumentationRegistry\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nscreengrab(\n  launch_arguments: [\n    \"username hjanuschka\",\n    \"build_number 201\"\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting UI Automator screenshot strategy\nDESCRIPTION: Code to enable UI Automator screenshot strategy which improves Material UI rendering, multi-window capture, and Android N compatibility. Requires API level >= 18.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nScreengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n```\n\n----------------------------------------\n\nTITLE: App Review Information Configuration\nDESCRIPTION: Configuration for app review team contact information and demo credentials\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\napp_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using deliver alias for App Store uploads\nDESCRIPTION: Example showing the 'deliver' alias which is equivalent to the 'upload_to_app_store' command in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\ndeliver   # alias for \"upload_to_app_store\"\n```\n\n----------------------------------------\n\nTITLE: Passing Single Item to Array Parameters\nDESCRIPTION: Demonstrates how a parameter accepting an array can also take a single string value, which is automatically wrapped in an array by fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nmy_new_action(files: \"file.txt\")\n```\n\n----------------------------------------\n\nTITLE: Specifying CSV File Path for Export and Import\nDESCRIPTION: Commands to export testers to a specific CSV file location and import testers from a specific CSV file location.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv\n```\n\n----------------------------------------\n\nTITLE: CLI Command Example for Version Number Retrieval\nDESCRIPTION: Example showing how to run the get_version_number action from command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_version_number.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run get_version_number\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Frames with Framefile.json in Fastlane\nDESCRIPTION: Example configuration for the Framefile.json which controls how frameit applies device frames to screenshots. It demonstrates setting default styles and filter-specific configurations for keywords, frames, and platforms.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    \"keyword\": {\n      \"font\": \"./fonts/MyFont-Rg.otf\"\n    },\n    \"title\": {\n      \"font\": \"./fonts/MyFont-Th.otf\",\n      \"font_size\": 128,\n      \"color\": \"#545454\"\n    },\n    \"background\": \"./background.jpg\",\n    \"padding\": 50,\n    \"show_complete_frame\": false,\n    \"stack_title\" : false,\n    \"title_below_image\": true,\n    \"frame\": \"WHITE\",\n    \"use_platform\": \"IOS\"\n  },\n\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    },\n    {\n      \"filter\": \"Organizing\",\n      \"keyword\": {\n        \"color\": \"#feb909\"\n      },\n      \"frame\": \"ROSE_GOLD\"\n    },\n    {\n      \"filter\": \"Sharing\",\n      \"keyword\": {\n        \"color\": \"#aa4dbc\"\n      }\n    },\n    {\n      \"filter\": \"Styling\",\n      \"keyword\": {\n        \"color\": \"#31bb48\"\n      }\n    },\n    {\n      \"filter\": \"Android\",\n      \"use_platform\": \"ANDROID\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Fastlane Deliver File\nDESCRIPTION: This code snippet shows how to use environment variables in a Fastlane Deliver file for configuring app review information and categories.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\napp_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']\n```\n\n----------------------------------------\n\nTITLE: Creating a P12 File from Certificate and Private Key\nDESCRIPTION: Command to create an encrypted P12 file by combining the previously extracted certificate and private key PEM files.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out \"cert.p12\" -inkey \"key.pem\" -in \"cert.pem\" -password pass:<password>\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Helper Files via Command Line\nDESCRIPTION: Command to update the SnapshotHelper.swift files to the latest version. This is useful when new versions of snapshot require helper file updates.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane snapshot update\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Viewing Action Documentation\nDESCRIPTION: Command to display the documentation for the download_from_play_store action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_from_play_store.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action download_from_play_store\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of update_project_team in Ruby for fastlane\nDESCRIPTION: Simple example showing how to use the update_project_team action without any parameters. This will use default values for the path and teamid parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_team.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_project_team\n```\n\n----------------------------------------\n\nTITLE: Running Appaloosa from Command Line with Fastlane\nDESCRIPTION: These commands show how to run the Appaloosa plugin directly from the command line using Fastlane's run command. It demonstrates both basic execution and passing parameters to the plugin.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appaloosa.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run appaloosa\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run appaloosa parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Using the precheck Alias\nDESCRIPTION: Example showing how to use the 'precheck' alias which is equivalent to calling check_app_store_metadata.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nprecheck   # alias for \"check_app_store_metadata\"\n```\n\n----------------------------------------\n\nTITLE: Capture Screenshots with Additional Options\nDESCRIPTION: Ruby example showing how to capture iOS screenshots with additional options like skipping the summary and cleaning before running.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing a Fastlane Plugin to RubyGems\nDESCRIPTION: This code snippet shows the commands to publish a Fastlane plugin to RubyGems.org. It includes steps for installing dependencies, building the gem, and releasing it.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/create-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbundle install\nrake install\nrake release\n```\n\n----------------------------------------\n\nTITLE: Using Rsync in Fastlane to Copy a Remote File\nDESCRIPTION: Example of using the rsync action in a Fastfile to copy a file from a remote host to a local destination. This demonstrates the basic usage with source and destination parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rsync.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrsync(\n  source: \"root@host:/tmp/1.txt\",\n  destination: \"/tmp/local_file.txt\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to a fastlane Project\nDESCRIPTION: Command to add a plugin to a fastlane project. This will update necessary files and install required dependencies.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/using-plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane add_plugin [name]\n```\n\n----------------------------------------\n\nTITLE: Loading External Actions in Fastfile\nDESCRIPTION: Shows how to load custom actions from an external folder.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nactions_path '../custom_actions_folder/'\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version for fastlane Installation\nDESCRIPTION: Command to verify the installed Ruby version. fastlane requires Ruby version 2.5 or newer.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/installing-fastlane.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ruby --version\nruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-darwin19]\n```\n\n----------------------------------------\n\nTITLE: Using the Snapshot Alias in Ruby\nDESCRIPTION: Alternative syntax using the 'snapshot' alias instead of the full 'capture_ios_screenshots' command. Both perform the same function.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nsnapshot # alias for \"capture_ios_screenshots\"\n```\n\n----------------------------------------\n\nTITLE: Associating an App with an iCloud Container using Produce in Bash\nDESCRIPTION: This command associates an existing app with a specified iCloud Container using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app\n```\n\n----------------------------------------\n\nTITLE: Passing parameters to produce action via CLI\nDESCRIPTION: Example of how to pass parameters to the produce action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_24\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run produce parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting a boolean entry in a plist file with Fastlane\nDESCRIPTION: Demonstrates how to set a boolean value in a plist file using the update_plist action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_plist.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_plist( # Sets a boolean entry\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:boolean_entry] = true\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of get_certificates in Ruby\nDESCRIPTION: Demonstrates the simplest way to use the get_certificates action in a fastlane lane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_certificates.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_certificates\n```\n\n----------------------------------------\n\nTITLE: Setting App Identifier in Configuration\nDESCRIPTION: Example showing how to set the bundle identifier for an app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nipa(\"App.ipa\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Product Flavors for Screengrab Detection\nDESCRIPTION: Gradle configuration to add product flavors for detecting screengrab at runtime, allowing apps to display specific data for screenshots\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_14\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n...\n    flavorDimensions \"mode\"\n    productFlavors {\n        screengrab {\n            dimension \"mode\"\n        }\n        regular {\n            dimension \"mode\"\n        }\n    }\n...\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nif (BuildConfig.FLAVOR == \"screengrab\") {\n    System.out.println(\"screengrab is running!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Upload to Play Store Internal App Sharing - Ruby\nDESCRIPTION: Simple example of uploading an app to Google Play Internal App Sharing using fastlane. This action returns a download URL for the uploaded APK/AAB.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store_internal_app_sharing.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_play_store_internal_app_sharing\n```\n\n----------------------------------------\n\nTITLE: Running hg_add_tag as a Standalone Command\nDESCRIPTION: Command to run the hg_add_tag action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_add_tag.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run hg_add_tag\n```\n\n----------------------------------------\n\nTITLE: Reading a Specific Podspec File Path in Ruby\nDESCRIPTION: This example demonstrates how to read a podspec from a specific file path rather than automatically detecting one in the current directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/read_podspec.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nspec = read_podspec(path: \"./XcodeServerSDK.podspec\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Snapshot Mode in Swift\nDESCRIPTION: Swift code to check whether the app is running in snapshot mode. This is useful for altering app behavior specifically for screenshot generation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n```\n\n----------------------------------------\n\nTITLE: Running Register Device Action with Parameters from Command Line\nDESCRIPTION: This command shows how to run the register_device action from the terminal while passing specific parameters to it using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_device.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run register_device parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Arguments in Screengrab\nDESCRIPTION: Example showing how to pass launch arguments to test cases that can be accessed through InstrumentationRegistry.getArguments()\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nscreengrab(\n  launch_arguments: [\n    \"username hjanuschka\",\n    \"build_number 201\"\n  ]\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}\n```\n\n----------------------------------------\n\nTITLE: Download dSYMs for Specific Version and Build\nDESCRIPTION: Example showing how to download dSYMs for a specific version and build number using string parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_dsyms(version: \"1.0.0\", build_number: \"345\")\n```\n\n----------------------------------------\n\nTITLE: Running xctool with Custom Configuration in Fastlane\nDESCRIPTION: Example of using the xctool action with explicit build configuration parameters instead of using the .xctool-args file. This includes workspace, scheme, configuration, SDK, and architecture specifications.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctool.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# If you prefer to have the build configuration stored in the `Fastfile`:\nxctool(:test, [\n  \"--workspace\", \"'AwesomeApp.xcworkspace'\",\n  \"--scheme\", \"'Schema Name'\",\n  \"--configuration\", \"Debug\",\n  \"--sdk\", \"iphonesimulator\",\n  \"--arch\", \"i386\"\n].join(\" \"))\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Install with Parameters\nDESCRIPTION: Example of running bundle_install action with custom parameters from the command line\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/bundle_install.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run bundle_install parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Specifying CSV Path for TestFlight Tester Import\nDESCRIPTION: Command to import TestFlight testers from a specific CSV file path, allowing you to control where the import data is read from.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_14\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot import -c ~/Desktop/testers.csv\n```\n\n----------------------------------------\n\nTITLE: Using build_ios_app Alias\nDESCRIPTION: Shows that build_ios_app is an alias for build_app that only presents iOS-specific options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_ios_app    # alias for \"build_app (only iOS options)\"\n```\n\n----------------------------------------\n\nTITLE: Basic Mailgun Email Notification in Ruby\nDESCRIPTION: Simple example of sending a success email notification using the mailgun action with minimal parameters. This requires default mailgun credentials to be configured.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/mailgun.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmailgun(\n  to: \"fastlane@krausefx.com\",\n  success: true,\n  message: \"This is the mail's content\"\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing fastlane Action Details\nDESCRIPTION: This command shows how to view detailed information about a specific fastlane action, including all available parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/appstore-deployment.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action [action_name]\n```\n\n----------------------------------------\n\nTITLE: Passing Boolean Parameters to Gym\nDESCRIPTION: Example of how to correctly pass boolean parameters to the gym command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --include_bitcode true --include_symbols false\n```\n\n----------------------------------------\n\nTITLE: Running Basic Test with xctool in Fastlane\nDESCRIPTION: Simple example of using the xctool action to run tests with default parameters. This requires having xctool installed via Homebrew.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctool.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxctool(:test)\n```\n\n----------------------------------------\n\nTITLE: Running Tests with xcodebuild Before Using scan\nDESCRIPTION: An example of the verbose xcodebuild command required to run tests before using scan, showing how complex and difficult to read the command can be.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nxcodebuild \\\n  -workspace MyApp.xcworkspace \\\n  -scheme \"MyApp\" \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n  test\n```\n\n----------------------------------------\n\nTITLE: Uploading Android App Bundle (AAB) to Google Play in Shell\nDESCRIPTION: Command line example for uploading an Android App Bundle (AAB) file to Google Play Store using fastlane supply.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --aab path/to/app.aab\n```\n\n----------------------------------------\n\nTITLE: Uploading APK with Command Line\nDESCRIPTION: Command line example showing how to upload an APK to the Google Play Store using the supply command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/to/app.apk\n```\n\n----------------------------------------\n\nTITLE: Jazzy Documentation Generation with Custom Config and Version in Ruby\nDESCRIPTION: Invokes the jazzy action with a custom configuration file and specific module version for the generated documentation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jazzy.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njazzy(config: \".jazzy.yaml\", module_version: \"2.1.37\")\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running update_project_team with Parameters\nDESCRIPTION: Command to run the update_project_team action from the terminal with custom parameters passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_team.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run update_project_team parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific TestFlight Tester\nDESCRIPTION: Command to search for and display information about a specific tester by their email address.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot find felix@krausefx.com\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables for Fastlane in Bash\nDESCRIPTION: Shows how to export environment variables in a bash shell before running Fastlane commands, allowing for persistent variable setting across multiple commands.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport DELIVER_USER=\"felix@krausefx.com\";\nfastlane test\n```\n\n----------------------------------------\n\nTITLE: Using ensure_bundle_exec in Fastlane\nDESCRIPTION: Adds a check that verifies fastlane is being run with bundle exec. This can be placed in the before_all block to ensure proper execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_bundle_exec.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nensure_bundle_exec\n```\n\n----------------------------------------\n\nTITLE: Validating Google Play Store JSON Key in Ruby\nDESCRIPTION: This snippet demonstrates how to use the validate_play_store_json_key action in a Fastfile. It validates a Google Play Store JSON key file by specifying the path to the file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/validate_play_store_json_key.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nvalidate_play_store_json_key(\n  json_key: 'path/to/you/json/key/file'\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Screenshots from App Store Connect\nDESCRIPTION: Command to download existing screenshots from App Store Connect to your local machine.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane deliver download_screenshots\n```\n\n----------------------------------------\n\nTITLE: Uploading Android App Bundle (AAB)\nDESCRIPTION: Command line example showing how to upload an Android App Bundle (AAB) to the Google Play Store.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --aab path/to/app.aab\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for increment_build_number\nDESCRIPTION: Shows how to run the increment_build_number action directly from the command line using fastlane run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run increment_build_number\n```\n\n----------------------------------------\n\nTITLE: Running gcovr with HTML Output in Ruby\nDESCRIPTION: This example demonstrates how to use the gcovr action in a Fastfile to generate an HTML code coverage report with detailed information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gcovr.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngcovr(\n  html: true,\n  html_details: true,\n  output: \"./code-coverage/report.html\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing match_nuke for Development Certificates in Ruby\nDESCRIPTION: This snippet demonstrates how to use the match_nuke action to revoke development certificates and provisioning profiles.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match_nuke.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmatch_nuke(type: \"development\")\n```\n\n----------------------------------------\n\nTITLE: Checking Git Tag Existence in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the git_tag_exists action in a Fastlane file. It checks if a specific git tag exists and prints a message if found.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_tag_exists.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nif git_tag_exists(tag: \"1.1.0\")\n  UI.message(\"Found it 🚀\")\nend\n```\n\n----------------------------------------\n\nTITLE: Zip with Symlinks Preservation\nDESCRIPTION: Compresses a file while preserving symbolic links in the archive\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/zip.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nzip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\",\n  verbose: false,\n  symlinks: true\n)\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Settings Plists in Version Bump Commit\nDESCRIPTION: Includes multiple plist files from the Settings.bundle in the version bump commit by providing an array of file names.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  settings: %w[About.plist Root.plist] # Include more than one plist from Settings.bundle\n)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Command Output in Ruby\nDESCRIPTION: Shows how to suppress the printing of the generated Gradle command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n  print_command: false\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Git Add in Ruby\nDESCRIPTION: Adds all files to Git using the git_add action without specifying any parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add\n```\n\n----------------------------------------\n\nTITLE: Manually Encrypting and Decrypting Files\nDESCRIPTION: Commands to manually encrypt or decrypt files using the match_file companion script, which prompts for the password interactively.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nmatch_file encrypt \"<fileYouWantToEncryptPath>\" [\"<encryptedFilePath>\"]\n\nmatch_file decrypt \"<fileYouWantToDecryptPath>\" [\"<decryptedFilePath>\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying update_app_identifier Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the update_app_identifier action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_identifier.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action update_app_identifier\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Helper to Skip Animation Wait Time\nDESCRIPTION: Swift code to configure the snapshot helper to not wait for animations to complete, which should be used in conjunction with animation disabling for maximum efficiency.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nsetupSnapshot(app, waitForAnimations: false)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fastlane lane for building test APKs\nDESCRIPTION: Example Fastlane lane that builds debug and AndroidTest APKs needed for running screengrab.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndesc \"Build debug and test APK for screenshots\"\nlane :build_for_screengrab do\n  gradle(\n    task: 'clean'\n  )\n  build_android_app(\n    task: 'assemble',\n    build_type: 'Debug'\n  )\n  build_android_app(\n    task: 'assemble',\n    build_type: 'AndroidTest'\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Basic dSYM Download Example\nDESCRIPTION: Simple example of downloading dSYM files with default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_dsyms\n```\n\n----------------------------------------\n\nTITLE: Setting Localized App Subtitles in Fastlane Deliver\nDESCRIPTION: Configures localized subtitles for the app across different languages. Uses a hash with language codes as keys and subtitle strings as values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nsubtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Podio Item with Fastlane\nDESCRIPTION: This snippet demonstrates how to use the podio_item action to create or update an item in a Podio app. It specifies a unique identifying value and provides additional field values in a hash structure.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/podio_item.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npodio_item(\n  identifying_value: \"Your unique value\",\n  other_fields: {\n    \"field1\" => \"fieldValue\",\n    \"field2\" => \"fieldValue2\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Conflicting Options in Fastlane ConfigItem\nDESCRIPTION: Shows how to define conflicting configuration options using FastlaneCore::ConfigItem with basic conflict handling.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :text,\n  type: String,\n  optional: true,\n  conflicting_options: [:text_file]\n),\nFastlaneCore::ConfigItem.new(\n  key: :text_file,\n  type: String,\n  optional: true,\n  conflicting_options: [:text]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pod_lib_lint in Ruby\nDESCRIPTION: Demonstrates the simplest way to use the pod_lib_lint action in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_lib_lint.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod_lib_lint\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for copy_artifacts\nDESCRIPTION: Command line example showing how to run the copy_artifacts action with custom parameters directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/copy_artifacts.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run copy_artifacts parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Using the say Action in Fastlane\nDESCRIPTION: Basic example of using the \"say\" action in a Fastfile to speak text out loud. The action takes a string as input and uses the system's text-to-speech functionality to vocalize it.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/say.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsay(\"I can speak\")\n```\n\n----------------------------------------\n\nTITLE: Running OCLint via CLI\nDESCRIPTION: Example showing how to run OCLint directly from command line using fastlane run command. Demonstrates parameter passing syntax for CLI usage.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/oclint.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run oclint parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing git_branch Documentation\nDESCRIPTION: Command to display the full documentation for the git_branch action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_branch.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action git_branch\n```\n\n----------------------------------------\n\nTITLE: Manually Encrypting and Pushing Changes to Fastlane Match Repo\nDESCRIPTION: Shows how to manually encrypt and push changes to the Fastlane match repository after making manual edits. This process ensures the repository remains secure and up-to-date.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nencryption.encrypt_files\nfiles_to_commit = Dir[File.join(storage.working_directory, \"**\", \"*.{cer,p12,mobileprovision}\")]\nstorage.save_changes!(files_to_commit: files_to_commit)\n```\n\n----------------------------------------\n\nTITLE: Git Add Ignored File with Force Option in Ruby\nDESCRIPTION: Adds a specific file (tmp/.keep) to Git, forcing the addition even if the file is ignored.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add(path: \"./tmp/.keep\", force: true)\n```\n\n----------------------------------------\n\nTITLE: Pushing Podspec to Private Repository in Ruby\nDESCRIPTION: This example demonstrates pushing a Podspec to a private repository instead of Trunk by specifying the repo parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_push.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npod_push(path: \"TSMessages.podspec\", repo: \"MyRepo\")\n```\n\n----------------------------------------\n\nTITLE: Showing Documentation for update_project_code_signing Action\nDESCRIPTION: Command to display the documentation for the update_project_code_signing action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_code_signing.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action update_project_code_signing\n```\n\n----------------------------------------\n\nTITLE: Basic Jira Comment Creation in Ruby\nDESCRIPTION: Basic example of creating a Jira comment using direct URL access with username and password authentication.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jira.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\njira(\n  url: \"https://bugs.yourdomain.com\",\n  username: \"Your username\",\n  password: \"Your password or API token\",\n  ticket_id: \"IOS-123\",\n  comment_text: \"Text to post as a comment\"\n)\n```\n\n----------------------------------------\n\nTITLE: Submitting a Build for Review in Fastlane CLI\nDESCRIPTION: Uses the fastlane CLI to submit a previously uploaded build (identified by build number) to App Store Connect for review.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_29\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane deliver submit_build --build_number 830\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of reset_git_repo in Fastlane\nDESCRIPTION: Simple invocation of the reset_git_repo action to reset the git repository to a clean state by discarding uncommitted changes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_git_repo.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nreset_git_repo\n```\n\n----------------------------------------\n\nTITLE: Running set_build_number_repository from Command Line\nDESCRIPTION: Command to run the set_build_number_repository action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_build_number_repository.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run set_build_number_repository\n```\n\n----------------------------------------\n\nTITLE: Sending Advanced Slack Notification with Fastlane\nDESCRIPTION: This example shows how to send a more complex Slack notification with custom channel, payload, and attachment properties using Fastlane's slack action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slack.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nslack(\n  message: \"App successfully released!\",\n  channel: \"#channel\",  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {  # Optional, lets you specify any number of your own Slack attachments.\n    \"Build Date\" => Time.new.to_s,\n    \"Built by\" => \"Jenkins\",\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify default payloads to include. Pass an empty array to suppress all the default payloads.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).\n       # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url: \"http://example.com/path/to/thumb.png\",\n    fields: [{\n      title: \"My Field\",\n      value: \"My Value\",\n      short: true\n    }]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Transporter Protocol for Firewall Issues via Command Line\nDESCRIPTION: Sets additional parameters for iTunes Transporter to help with firewall issues when using pilot directly from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...\n```\n\n----------------------------------------\n\nTITLE: Using Debug Action in Fastlane\nDESCRIPTION: Simple example of using the debug action in a Fastfile to print out an overview of the lane context values for debugging purposes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/debug.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndebug\n```\n\n----------------------------------------\n\nTITLE: Basic Git Pull Command in Fastlane\nDESCRIPTION: Executes a simple git pull command to fetch and merge changes from a remote repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_pull.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngit_pull\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Action from CLI\nDESCRIPTION: Examples of running the create_app_on_managed_play_store action directly from the command line, including how to pass parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_on_managed_play_store.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run create_app_on_managed_play_store\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run create_app_on_managed_play_store parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Building for testing with run_tests in Ruby\nDESCRIPTION: Example showing how to use run_tests to build for testing without actually running the tests. This saves the build artifacts to a specified derived data path for later use.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# Build For Testing\nrun_tests(\n   derived_data_path: \"my_folder\",\n   build_for_testing: true\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Debug Text Check in Ruby\nDESCRIPTION: Simple example checking for TODO comments in source code\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nensure_no_debug_code(text: \"// TODO\")\n```\n\n----------------------------------------\n\nTITLE: Running Supply Action with Parameters from CLI\nDESCRIPTION: Example of running the 'supply' action from the terminal with custom parameter values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run supply parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to Nexus 3 Repository with Fastlane in Ruby\nDESCRIPTION: Example demonstrating the upload of a file to a Nexus 3 repository with the nexus_upload action. This example specifies the nexus_version as 3 and includes an empty mount_path which is typical for Nexus 3 installations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/nexus_upload.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# for Nexus 3\nnexus_upload(\n  nexus_version: 3,\n  mount_path: \"\",\n  file: \"/path/to/file.ipa\",\n  repo_id: \"artefacts\",\n  repo_group_id: \"com.fastlane\",\n  repo_project_name: \"ipa\",\n  repo_project_version: \"1.13\",\n  repo_classifier: \"dSYM\", # Optional\n  endpoint: \"http://localhost:8081\",\n  username: \"admin\",\n  password: \"admin123\"\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running Update iCloud Container Identifiers\nDESCRIPTION: Command line instruction for running the update_icloud_container_identifiers action directly from terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_icloud_container_identifiers.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_icloud_container_identifiers\n```\n\n----------------------------------------\n\nTITLE: Specifying iOS Simulator for SPM in Ruby\nDESCRIPTION: Demonstrates how to specify the iOS simulator for Swift Package Manager operations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spm.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nspm(\n  simulator: \"iphonesimulator\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using get_build_number_repository in Fastlane\nDESCRIPTION: Basic usage example of the get_build_number_repository action in a Fastfile. This action retrieves the build number based on the SCM HEAD of the current repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number_repository.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_build_number_repository\n```\n\n----------------------------------------\n\nTITLE: CSV Format for Importing Testers\nDESCRIPTION: Example of the CSV format used for importing testers, showing name, surname, email, and group assignments separated by semicolons.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nJohn,Appleseed,appleseed_john@mac.com,group-1;group-2\n```\n\n----------------------------------------\n\nTITLE: Importing Another Fastfile in Ruby\nDESCRIPTION: This example demonstrates how to import another Fastfile to access its lanes. The path must be relative to the Fastfile this is called from.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nimport(\"./path/to/other/Fastfile\")\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Fastlane Plugin Development\nDESCRIPTION: Shows the command to install all required development dependencies when building a Fastlane plugin. This ensures all necessary tools are available for plugin development.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/plugins-troubleshooting.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbundle install --with development\n```\n\n----------------------------------------\n\nTITLE: CLI Command Example\nDESCRIPTION: Example of running the increment_version_number action from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action increment_version_number\n```\n\n----------------------------------------\n\nTITLE: View Setup CI Documentation\nDESCRIPTION: Shows the command to view setup_ci action documentation in terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_ci.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action setup_ci\n```\n\n----------------------------------------\n\nTITLE: Running spaceship_stats from CLI\nDESCRIPTION: Example of how to run the spaceship_stats action directly from the command line. This shows the syntax for executing the action outside of a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_stats.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run spaceship_stats\n```\n\n----------------------------------------\n\nTITLE: Viewing Help Documentation for Produce\nDESCRIPTION: Command to display all available parameters and options for the produce action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce --help\n```\n\n----------------------------------------\n\nTITLE: Setting a numeric entry in a plist file with Fastlane\nDESCRIPTION: Shows how to set a numeric value in a plist file using the update_plist action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_plist.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_plist( # Sets a number entry\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:number_entry] = 13\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON key file path in Appfile\nDESCRIPTION: Ruby code for the Appfile to specify the path to your Google Play API credentials JSON key file. This is required for supply to authenticate with Google Play.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/setup.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njson_key_file \"/path/to/your/downloaded/key.json\"\n```\n\n----------------------------------------\n\nTITLE: Force Reset of Git Repository in Fastlane\nDESCRIPTION: Forces reset of the git repository even if it started in a non-clean state. This will discard all changes, including valuable uncommitted changes, so use with caution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_git_repo.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nreset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Info.plist Value from IPA File using Fastlane in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the get_ipa_info_plist_value action in Fastlane to retrieve a specific value from the Info.plist file inside an IPA. It requires specifying the path to the IPA file and the key to read.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_ipa_info_plist_value.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_ipa_info_plist_value(ipa: \"path.ipa\", key: \"KEY_YOU_READ\")\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Install from CLI\nDESCRIPTION: Basic command to run the bundle_install action directly from the command line\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/bundle_install.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run bundle_install\n```\n\n----------------------------------------\n\nTITLE: Associating an app with multiple merchant identifiers using fastlane produce\nDESCRIPTION: Command to associate an iOS app with multiple Apple Pay Merchant Identifiers (production and sandbox) using fastlane produce.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production merchant.com.example.sandbox\n```\n\n----------------------------------------\n\nTITLE: Download Live Version dSYMs\nDESCRIPTION: Example showing how to download dSYMs for the live version of the app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_dsyms(version: \"live\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Clean Status Bar for Screenshots\nDESCRIPTION: Java code showing how to customize the clean status bar to display specific elements like Bluetooth and mobile network data type.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nnew CleanStatusBar()\n    .setBluetoothState(BluetoothState.DISCONNECTED)\n    .setMobileNetworkDataType(MobileDataType.LTE)\n    .enable();\n```\n\n----------------------------------------\n\nTITLE: Including Additional Files in Version Bump Commit\nDESCRIPTION: Adds custom files to be included in the version bump commit, useful for non-standard project configurations or files that also track version information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  include: %w[package.json custom.cfg] # include other updated files as part of the version bump\n)\n```\n\n----------------------------------------\n\nTITLE: Using the Supply Alias in Ruby\nDESCRIPTION: Example showing the alternative 'supply' command which is an alias for the upload_to_play_store action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsupply # alias for \"upload_to_play_store\"\n```\n\n----------------------------------------\n\nTITLE: Using Shared Lane Context for API Key Authentication\nDESCRIPTION: Demonstrates how to use the app_store_connect_api_key action with shared lane context for automatic API key loading in subsequent actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/app-store-connect-api.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane :release do\n  app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional (maximum 1200)\n    in_house: false # optional but may be required if using match/sigh\n  )\n\n  # Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]\n  pilot\nend\n```\n\n----------------------------------------\n\nTITLE: CLI Parameters Example\nDESCRIPTION: Example showing how to pass parameters when running import_from_git from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_from_git.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run import_from_git parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running appstore action with parameters\nDESCRIPTION: Example of running the appstore action from the command line with custom parameter values. Demonstrates how to pass primitive types to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run appstore parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Recursive Git Submodule Update in Ruby\nDESCRIPTION: Executes a git submodule update command with the recursive option enabled, which updates nested submodules.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_submodule_update.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngit_submodule_update(recursive: true)\n```\n\n----------------------------------------\n\nTITLE: Running get_build_number_repository with Parameters via CLI\nDESCRIPTION: Example of running the get_build_number_repository action from the terminal with custom parameters, demonstrating the syntax for parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number_repository.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run get_build_number_repository parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin from Pluginfile\nDESCRIPTION: Example of how to remove a plugin from the fastlane/Pluginfile by deleting the corresponding gem line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/using-plugins.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"fastlane-plugin-[plugin_name]\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fastlane Plugin Action Class in Ruby\nDESCRIPTION: Demonstrates the correct class definition for a Fastlane plugin action. The class name should be capitalized, end with 'Action', and inherit from the Action class.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/plugins-troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass [ActionName]Action < Action\n```\n\n----------------------------------------\n\nTITLE: Uploading a TestFlight Build Without Submission\nDESCRIPTION: Command to upload an IPA file to TestFlight without distributing it to testers immediately, useful for preparing a build but waiting to distribute it.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload --skip_submission\n```\n\n----------------------------------------\n\nTITLE: Running Apteligent Action from CLI\nDESCRIPTION: Command to show the apteligent action documentation in the terminal using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/apteligent.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action apteligent\n```\n\n----------------------------------------\n\nTITLE: Replacing Keychain Search List in Ruby (Fastlane)\nDESCRIPTION: Unlocks a keychain and replaces the existing search list with this keychain instead of adding to it. Uses the add_to_search_list parameter with :replace value.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nunlock_keychain( # By default the keychain is added to the existing. To replace them with the selected keychain you may use `:replace`\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\",\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Ruby Fastfile\nDESCRIPTION: This code snippet demonstrates how to manually change the working directory within a Fastfile using a Ruby block. This can be useful when migrating code from a Fastfile to a custom action or plugin.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/fastlane.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nDir.chdir(\"..\") do\n  # code here runs in the parent directory\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Fastlane Version in Ruby\nDESCRIPTION: This example shows how to specify a minimum required fastlane version in your Fastfile. Use this when you need features from a specific version of fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/fastlane_version.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmin_fastlane_version(\"1.50.0\")\n```\n\n----------------------------------------\n\nTITLE: Generate App Privacy Details JSON without Uploading in Swift Fastfile\nDESCRIPTION: This Swift code shows how to call the uploadAppPrivacyDetailsToAppStore action with skipUpload set to true in a Fastfile.swift file. It will save privacy details to a JSON file without uploading to App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nuploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\",\n                                  skipUpload: true)\n```\n\n----------------------------------------\n\nTITLE: Using the Deliver Alias for App Store Upload\nDESCRIPTION: Example showing the 'deliver' alias for the 'upload_to_app_store' command. This is a shorthand way to invoke the same functionality.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ndeliver   # alias for \"upload_to_app_store\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Gym Parameters\nDESCRIPTION: Command to display all available parameters for the gym action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action gym\n```\n\n----------------------------------------\n\nTITLE: Setting Export Method for Non-App Store Distribution\nDESCRIPTION: Specifies a non-default export method (ad-hoc) when building an iOS app, which is needed for certain distribution methods.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --export_method ad-hoc\n```\n\n----------------------------------------\n\nTITLE: Configuring LocaleTestRule in Kotlin Tests\nDESCRIPTION: Kotlin code showing how to add LocaleTestRule to test classes with the required JvmField annotation for proper functioning.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n@Rule @JvmField\nval localeTestRule = LocaleTestRule()\n```\n\n----------------------------------------\n\nTITLE: Git Add Multiple Files in Ruby\nDESCRIPTION: Adds multiple specific files (version.txt and changelog.txt) to Git using the git_add action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add(path: [\"./version.txt\", \"./changelog.txt\"])\n```\n\n----------------------------------------\n\nTITLE: Running xcexport with Parameters via CLI\nDESCRIPTION: Example of running the xcexport action with custom parameters from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcexport.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xcexport parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Importing TestFlight Testers from CSV\nDESCRIPTION: Command to import external testers from a CSV file that contains tester information in a specific format.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot import\n```\n\n----------------------------------------\n\nTITLE: Git Add Single File in Ruby\nDESCRIPTION: Adds a specific file (version.txt) to Git using the git_add action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add(path: \"./version.txt\")\n```\n\n----------------------------------------\n\nTITLE: Viewing frameit Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the frameit action in the terminal. This provides detailed information about the action's parameters and usage.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action frameit\n```\n\n----------------------------------------\n\nTITLE: Viewing Available pilot Command Options\nDESCRIPTION: Command to display all available options and parameters for the pilot action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action pilot\n```\n\n----------------------------------------\n\nTITLE: Enabling Force Mode\nDESCRIPTION: Option to skip HTML report generation before uploading.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nforce(true)\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of dsym_zip Action with Custom Archive Path in Ruby\nDESCRIPTION: Example of using the dsym_zip action with a custom archive_path parameter. This allows specifying the path to the xcarchive file explicitly.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/dsym_zip.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndsym_zip(\n  archive_path: \"MyApp.xcarchive\"\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for HipChat Action in Fastlane\nDESCRIPTION: Shows how to run the HipChat action directly from the command line. This can be used for one-off operations outside of a Fastfile workflow.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hipchat.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run hipchat\n```\n\n----------------------------------------\n\nTITLE: Setting Default Platform in Ruby\nDESCRIPTION: Sets the default platform for Fastlane execution to Android. This eliminates the need to specify the platform in subsequent commands.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/default_platform.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndefault_platform(:android)\n```\n\n----------------------------------------\n\nTITLE: CLI Command Example for Changelog Generation\nDESCRIPTION: Example showing how to run the changelog_from_git_commits action directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/changelog_from_git_commits.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run changelog_from_git_commits\n```\n\n----------------------------------------\n\nTITLE: Associating Multiple Merchants with an App in Fastlane Produce\nDESCRIPTION: Example command showing how to associate multiple Apple Pay Merchant Identifiers with a single iOS app using the 'produce associate_merchant' command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production merchant.com.example.sandbox\n```\n\n----------------------------------------\n\nTITLE: Displaying Scan Action Documentation in Terminal\nDESCRIPTION: Shows how to display the documentation for the 'scan' action in the terminal using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action scan\n```\n\n----------------------------------------\n\nTITLE: Generic Automatic Code Signing Disable Action in Ruby\nDESCRIPTION: Uses the generic automatic_code_signing action to disable automatic signing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/automatic_code_signing.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nautomatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: false\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins on Another Machine\nDESCRIPTION: Command to ensure all plugins specified in the Pluginfile are installed on the local machine.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/using-plugins.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane install_plugins\n```\n\n----------------------------------------\n\nTITLE: Using Action Parameters in Fastlane\nDESCRIPTION: Shows how to call a custom action with parameters defined in the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmy_new_action(file: \"file.txt\")\n```\n\n----------------------------------------\n\nTITLE: Running push_git_tags with Parameters from CLI\nDESCRIPTION: Example of running the push_git_tags action from the terminal with specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_git_tags.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run push_git_tags parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Carthage CLI Parameters Usage\nDESCRIPTION: Example showing how to pass parameters to Carthage action via CLI\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/carthage.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run carthage parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: NSLog Check in Specific Directory\nDESCRIPTION: Searches for NSLog statements in Objective-C files within the lib directory\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nensure_no_debug_code(text: \"NSLog\",\n path: \"./lib\",\n      extension: \"m\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TestFlight Upload with Account Details\nDESCRIPTION: Example of uploading to TestFlight with specific account, app identifier, and iTMSTransporter provider options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n```\n\n----------------------------------------\n\nTITLE: Using get_managed_play_store_publishing_rights Action in Fastlane\nDESCRIPTION: This example demonstrates how to use the get_managed_play_store_publishing_rights action in a Fastfile to obtain publishing rights for custom apps on the Managed Google Play Store. It requires a JSON key file for authentication with Google's services.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_managed_play_store_publishing_rights.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_managed_play_store_publishing_rights(\n  json_key: \"path/to/your/json/key/file\"\n)\n# it is probably easier to execute this action directly in the command line:\n# $ fastlane run get_managed_play_store_publishing_rights\n```\n\n----------------------------------------\n\nTITLE: Detecting Snapshot Mode in Swift\nDESCRIPTION: Code snippet showing how to check if the app is running in snapshot mode by looking for the FASTLANE_SNAPSHOT flag in UserDefaults.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an App Group with Produce in Bash\nDESCRIPTION: This command creates a new App Group with a specified identifier and name using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce group -g group.krausefx -n \"Example App Group\"\n```\n\n----------------------------------------\n\nTITLE: Configuring update_project_team with Custom Parameters in Ruby\nDESCRIPTION: Advanced example showing how to use the update_project_team action with custom parameters. This specifies both the project path and the team ID to use.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_team.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_project_team(\n  path: \"Example.xcodeproj\",\n  teamid: \"A3ZZVJ7CNY\"\n)\n```\n\n----------------------------------------\n\nTITLE: Tester CSV File Format Example\nDESCRIPTION: Shows the required format for a CSV file when importing testers, including first name, last name, email, and group assignments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nJohn,Appleseed,appleseed_john@mac.com,group-1;group-2\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Inline for Fastlane Commands\nDESCRIPTION: Demonstrates how to set environment variables directly when running Fastlane commands, useful for quick, one-time configurations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDELIVER_USER=\"felix@krausefx.com\" fastlane test\n```\n\n----------------------------------------\n\nTITLE: Configuring snapshot for Error Handling and HTML Summary\nDESCRIPTION: Ruby code demonstrating how to configure snapshot to stop after the first error and skip opening the HTML summary.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_screenshots(stop_after_first_error: true)\n\ncapture_screenshots(skip_open_summary: true)\n```\n\n----------------------------------------\n\nTITLE: Verifying Minimum Ruby Version in Fastlane\nDESCRIPTION: This example shows how to specify a minimum Ruby version requirement in a Fastfile. This ensures that fastlane is executed with a compatible Ruby version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ruby_version.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nruby_version(\"2.4.0\")\n```\n\n----------------------------------------\n\nTITLE: Running the say Action with Parameters from CLI\nDESCRIPTION: Example of running the \"say\" action from the terminal with custom parameters. Shows how to pass values to parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/say.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run say parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Match Action Documentation\nDESCRIPTION: Command to show all available options for the match action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action match\n```\n\n----------------------------------------\n\nTITLE: Using Keychain Name from Standard Location in Ruby (Fastlane)\nDESCRIPTION: Demonstrates how to unlock a keychain by just providing its name when it's located in the standard location (~/Library/Keychains). Only requires the keychain name rather than full path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nunlock_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.\n  path: \"KeychainName\",\n  password: \"mysecret\"\n)\n```\n\n----------------------------------------\n\nTITLE: A/B Testing Configuration in Snapfile\nDESCRIPTION: Ruby code for Snapfile configuration that generates screenshots with different feature flags. This allows comparing the same screenshots with different feature settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n```\n\n----------------------------------------\n\nTITLE: Running SSH Action from Command Line\nDESCRIPTION: These commands demonstrate how to run the SSH action directly from the command line using Fastlane, including passing parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ssh.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run ssh\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run ssh parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running the environment_variable action with parameters\nDESCRIPTION: Example of running the environment_variable action with parameter values from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/environment_variable.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run environment_variable parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Git Add Multiple File Types with Shell Escape Disabled in Ruby\nDESCRIPTION: Adds all .h and .m files to Git using wildcards, with shell escaping disabled.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add(path: [\"*.h\", \"*.m\"], shell_escape: false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package File Path\nDESCRIPTION: How to specify the path to a signed pkg file for macOS app submissions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\npkg(\"MacApp.pkg\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Fastlane Action Documentation in Terminal\nDESCRIPTION: Shows how to view the documentation for the capture_screenshots action directly in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action capture_screenshots\n```\n\n----------------------------------------\n\nTITLE: Set Build Number with Custom Xcode Project Path in Ruby\nDESCRIPTION: Example showing how to specify a custom Xcode project path when using the set_build_number_repository action. This is useful when your project file is not in the default location.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_build_number_repository.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nset_build_number_repository(\n  xcodeproj: \"./path/to/MyApp.xcodeproj\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Podspec Version Number in Ruby\nDESCRIPTION: This example demonstrates how to set a specific version number in a podspec file. It replaces the current version with the provided version number in the specified podspec file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_bump_podspec.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nversion = version_bump_podspec(path: \"TSMessages.podspec\", version_number: \"1.4\")\n```\n\n----------------------------------------\n\nTITLE: Using Supply Alias in Ruby\nDESCRIPTION: Example showing the use of 'supply', which is an alias for the 'upload_to_play_store' action in fastlane Ruby scripts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsupply # alias for \"upload_to_play_store\"\n```\n\n----------------------------------------\n\nTITLE: Committing a Single File with Git in Ruby\nDESCRIPTION: This snippet demonstrates how to use the git_commit action to commit a single file with a specified message.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_commit.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngit_commit(path: \"./version.txt\", message: \"Version Bump\")\n```\n\n----------------------------------------\n\nTITLE: Installing Semaphore Fastlane Plugin\nDESCRIPTION: This command installs the Semaphore Fastlane plugin in the app's project directory. The plugin creates a temporary keychain, sets 'match' to read-only mode, and can redirect log output from 'scan' and 'gym'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/semaphore.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane add_plugin semaphore\n```\n\n----------------------------------------\n\nTITLE: Using xcov Action in Fastlane\nDESCRIPTION: This snippet demonstrates how to use the xcov action in a Fastfile to generate code coverage reports. It specifies the workspace, scheme, and output directory for the coverage report.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcov.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcov(\n  workspace: \"YourWorkspace.xcworkspace\",\n  scheme: \"YourScheme\",\n  output_directory: \"xcov_output\"\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Default Git Remote Branch\nDESCRIPTION: Basic usage of git_remote_branch to query git for the first available remote name. Returns nil if no default remote branch is found.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_remote_branch.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngit_remote_branch\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to update_app_identifier Action via CLI\nDESCRIPTION: This example shows how to pass parameters to the update_app_identifier action when running it from the command line interface (CLI).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_identifier.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_app_identifier parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running upload_symbols_to_sentry Action\nDESCRIPTION: Command line instruction to view the documentation for the upload_symbols_to_sentry action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_sentry.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action upload_symbols_to_sentry\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax Using Sigh Alias\nDESCRIPTION: Shows the alternative syntax using the sigh alias for get_provisioning_profile\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsigh # alias for \"get_provisioning_profile\"\n```\n\n----------------------------------------\n\nTITLE: Basic Google Play Track Release Names Example - Ruby\nDESCRIPTION: Simple example showing how to call the google_play_track_release_names action to retrieve release names from a Google Play track.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_release_names.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngoogle_play_track_release_names\n```\n\n----------------------------------------\n\nTITLE: Configuring App Review Information\nDESCRIPTION: Setting up contact information for the App Store review team.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\napp_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)\n```\n\n----------------------------------------\n\nTITLE: Force Upload to App Store with Provider Specification\nDESCRIPTION: Example showing how to upload to App Store with force flag and explicit provider specification. The force flag skips HTML preview verification.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nupload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n```\n\n----------------------------------------\n\nTITLE: Listing All TestFlight Testers\nDESCRIPTION: Command to list all internal and external testers for your app in TestFlight, showing names, emails, and device counts for each tester.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot list\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Testers with Custom File Path\nDESCRIPTION: Commands to export testers to a custom CSV file location and import testers from a specified CSV file path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv\n```\n\n----------------------------------------\n\nTITLE: Setting Transporter Protocol in Fastfile\nDESCRIPTION: Code snippet showing how to set the Transporter protocol in a Fastfile when using pilot via the fastlane action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Echo Action via CLI in Fastlane\nDESCRIPTION: This snippet illustrates how to pass parameters to the 'echo' action when running it from the command line. It uses the colon syntax to specify parameter names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/echo.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run echo parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Updating App Group Identifiers in iOS Entitlements File with Fastlane\nDESCRIPTION: This example demonstrates how to use the update_app_group_identifiers action to modify app group identifiers in an iOS entitlements file. It specifies the path to the entitlements file and provides an array of app group identifiers to be set.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_group_identifiers.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_app_group_identifiers(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  app_group_identifiers: [\"group.your.app.group.identifier\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of reset_simulator_contents in Ruby\nDESCRIPTION: Simple example of how to use the reset_simulator_contents action in a Fastfile to reset all iOS simulators.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_simulator_contents.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nreset_simulator_contents\n```\n\n----------------------------------------\n\nTITLE: Creating Gemfile for fastlane Installation\nDESCRIPTION: Ruby Gemfile configuration to define fastlane dependency using Bundler. This ensures consistent versioning and dependency management.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/installing-fastlane.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n----------------------------------------\n\nTITLE: Viewing appstore action documentation in terminal\nDESCRIPTION: Command to display the documentation for the appstore action in your terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action appstore\n```\n\n----------------------------------------\n\nTITLE: Jira Documentation Command\nDESCRIPTION: Command to display the Jira action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jira.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action jira\n```\n\n----------------------------------------\n\nTITLE: Running DeployGate action from CLI\nDESCRIPTION: This command shows how to run the deploygate action directly from the command line interface without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deploygate.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run deploygate\n```\n\n----------------------------------------\n\nTITLE: Specifying Formatters in Fastlane Configuration\nDESCRIPTION: Demonstrates how to specify different xcodebuild formatters in Ruby code for Fastlane's scan action. Shows various examples including default formatters and custom paths.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/xcodebuild-formatters.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nscan(\n  xcodebuild_formatter: \"xcbeautify\"\n)\n\nscan(\n  xcodebuild_formatter: \"xcpretty\"\n)\n\n# Specify a local installation of xcbeautify\nscan(\n  xcodebuild_formatter: \"/custom/path/to/xcbeautify\"\n)\n\n# Specify your own custom formatter\nscan(\n  xcodebuild_formatter: \"/custom/path/to/my_formatter\"\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Execution\nDESCRIPTION: Command to run the action directly from terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_branch.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run ensure_git_branch\n```\n\n----------------------------------------\n\nTITLE: Generating Apple-like Documentation with Appledoc in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the appledoc action in a Fastlane file to generate Apple-like source code documentation. It specifies project details, input sources, ignored paths, and additional options for documentation generation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appledoc.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nappledoc(\n  project_name: \"MyProjectName\",\n  project_company: \"Company Name\",\n  input: [\n    \"MyProjectSources\",\n    \"MyProjectSourceFile.h\"\n  ],\n  ignore: [\n    \"ignore/path/1\",\n    \"ignore/path/2\"\n  ],\n  options: \"--keep-intermediate-files --search-undocumented-doc\",\n  warnings: \"--warn-missing-output-path --warn-missing-company-id\"\n)\n```\n\n----------------------------------------\n\nTITLE: Removing a Tester from TestFlight\nDESCRIPTION: Command to remove a beta tester from all internal and external groups in TestFlight using their email address.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot remove felix@krausefx.com\n```\n\n----------------------------------------\n\nTITLE: Handling Test Failures with Hipchat Notifications\nDESCRIPTION: Error handler configuration that sends a notification to Hipchat when tests fail. This can be added to your Fastfile to improve visibility of build issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/running-tests.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nerror do |ex|\n  hipchat(message: \"Tests have failed!\",\n          channel: \"Room or @username\",\n          success: false)\nend\n```\n\n----------------------------------------\n\nTITLE: Skipping Animation Wait Time in Snapshot Setup\nDESCRIPTION: Swift code to configure snapshot to skip waiting for animations to finish, further optimizing test execution time.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nsetupSnapshot(app, waitForAnimations: false)\n```\n\n----------------------------------------\n\nTITLE: Run Git Pull Action with Parameters via Fastlane CLI\nDESCRIPTION: Command to execute the git_pull action with custom parameters from the command line interface using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_pull.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run git_pull parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Warnings in pod_lib_lint in Ruby\nDESCRIPTION: Demonstrates how to configure pod_lib_lint to allow warnings during the linting process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_lib_lint.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)\n```\n\n----------------------------------------\n\nTITLE: Uploading Builds to TestFlight using fastlane\nDESCRIPTION: Basic command to upload a build to TestFlight using fastlane. This automatically looks for an IPA file in the current directory and uploads it using credentials from your fastlane setup.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot upload\n```\n\n----------------------------------------\n\nTITLE: Running Rsync as a One-off Command with Fastlane Run\nDESCRIPTION: Examples of how to run the rsync action directly from the terminal as a one-off command, with and without parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rsync.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run rsync\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run rsync parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Git Pull Only Tags in Fastlane\nDESCRIPTION: Executes git pull with the only_tags parameter set to true, which only pulls the tags without bringing new commits to the current branch.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_pull.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngit_pull(only_tags: true) # only the tags, no commits\n```\n\n----------------------------------------\n\nTITLE: Displaying last_git_commit Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the last_git_commit action in the terminal using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/last_git_commit.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action last_git_commit\n```\n\n----------------------------------------\n\nTITLE: Running Scan Action from CLI\nDESCRIPTION: Demonstrates how to run the 'scan' action directly from the command line interface without using a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scan.md#2025-04-17_snippet_14\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run scan\n```\n\n----------------------------------------\n\nTITLE: Running Unlock Keychain from CLI (Fastlane)\nDESCRIPTION: Command to run the unlock_keychain action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run unlock_keychain\n```\n\n----------------------------------------\n\nTITLE: Basic Screengrab Usage Examples\nDESCRIPTION: Examples of different ways to capture Android screenshots using screengrab, including basic usage and configuration with multiple locales\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_android_screenshots\n```\n\nLANGUAGE: ruby\nCODE:\n```\nscreengrab # alias for \"capture_android_screenshots\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_android_screenshots(\n  locales: [\"en-US\", \"fr-FR\", \"ja-JP\"],\n  clear_previous_screenshots: true,\n  app_apk_path: \"build/outputs/apk/example-debug.apk\",\n  tests_apk_path: \"build/outputs/apk/example-debug-androidTest-unaligned.apk\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Localized Promotional Text in Fastlane Deliver\nDESCRIPTION: Configures promotional text that appears at the top of the app description in the App Store for different languages. Can be updated without submitting a new app version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\npromotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Danger Configuration in Fastlane\nDESCRIPTION: A more complex example showing how to configure Danger with custom parameters including a specific danger identifier, custom Dangerfile location, GitHub API token, and enabling verbose output.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/danger.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndanger(\n  danger_id: \"unit-tests\",\n  dangerfile: \"tests/MyOtherDangerFile\",\n  github_api_token: ENV[\"GITHUB_API_TOKEN\"],\n  verbose: true\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Application Services with Produce in Bash\nDESCRIPTION: This command disables a specific application service (iCloud) for an existing App ID using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce disable_services --icloud\n```\n\n----------------------------------------\n\nTITLE: Setting Apple Watch App Icon Path in Fastlane Deliver\nDESCRIPTION: Specifies the path to a new Apple Watch app icon file, which must be exactly 1024x1024 pixels in size. This icon will be used for the Watch app in the App Store.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\napple_watch_app_icon('./AppleWatchAppIcon.png')\n```\n\n----------------------------------------\n\nTITLE: Configuring App Rating Reset in Fastlane Deliver\nDESCRIPTION: Sets whether to reset your app's summary rating for all territories when a new version is released. The parameter accepts a boolean value, where true resets ratings and false maintains existing ratings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nreset_ratings(true)\n# or\nreset_ratings(false)\n```\n\n----------------------------------------\n\nTITLE: Skipping Animation Wait Time in Swift\nDESCRIPTION: Swift code to configure snapshot to not wait for animations to finish. Should be used in conjunction with animation disabling for faster tests.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nsetupSnapshot(app, waitForAnimations: false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Launch Arguments for A/B Testing\nDESCRIPTION: Ruby code for a Snapfile demonstrating how to specify multiple launch argument combinations for A/B test comparisons.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter Command Usage Pattern\nDESCRIPTION: Shows the command pattern that Fastlane uses to pipe xcodebuild output to the specified formatter. This illustrates how Fastlane connects the tools together.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/xcodebuild-formatters.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\n$ xcodebuild [flags] | <xcodebuild_formatter>\n```\n\n----------------------------------------\n\nTITLE: Running Apteligent Action with Parameters\nDESCRIPTION: Example of how to pass parameters to the apteligent action when running it directly from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/apteligent.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run apteligent parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running modify_services from CLI\nDESCRIPTION: Command to execute the modify_services action directly from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/modify_services.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run modify_services\n\nfastlane run modify_services parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Actions Directly from Command Line\nDESCRIPTION: Shows how to run a specific fastlane action directly from the command line without adding it to the Fastfile, which is useful for testing actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run notification message:\"My Text\" title:\"The Title\"\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Example\nDESCRIPTION: Command line interface usage examples for running upload_to_testflight\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_24\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run upload_to_testflight\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run upload_to_testflight parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running SPM Tests in Parallel in Ruby\nDESCRIPTION: Shows how to run Swift Package Manager tests in parallel using the 'spm' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spm.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nspm(\n  command: \"test\",\n  parallel: true\n)\n```\n\n----------------------------------------\n\nTITLE: Running Notarize Action from Terminal\nDESCRIPTION: Command to execute the notarize action directly from the terminal, outside of a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notarize.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run notarize\n```\n\n----------------------------------------\n\nTITLE: Generate Output Using ERB Template in Ruby\nDESCRIPTION: Example demonstrating how to use the ERB action in Fastlane to generate an output file from a template. Shows template syntax with variables, loops, and how to specify placeholders and destination file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/erb.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Example `erb` template:\n\n# Variable1 <%= var1 %>\n# Variable2 <%= var2 %>\n# <% for item in var3 %>\n#        <%= item %>\n# <% end %>\n\nerb(\n  template: \"1.erb\",\n  destination: \"/tmp/rendered.out\",\n  placeholders: {\n    :var1 => 123,\n    :var2 => \"string\",\n    :var3 => [\"element1\", \"element2\"]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing skip_docs in a Fastfile\nDESCRIPTION: This example shows how to use the skip_docs action in a Fastfile to prevent Fastlane from automatically creating a README.md file in the fastlane directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/skip_docs.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nskip_docs\n```\n\n----------------------------------------\n\nTITLE: Basic run_tests usage in Ruby\nDESCRIPTION: Simplest form of the run_tests action invocation without any parameters. This uses default project configuration to run tests.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrun_tests\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to upload_to_play_store Action via CLI\nDESCRIPTION: Shows how to pass parameters to the upload_to_play_store action when running it from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run upload_to_play_store parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Copyright Information in Ruby with Fastlane\nDESCRIPTION: Sets the up-to-date copyright information for the app using Ruby string interpolation to include the current year.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ncopyright(\"#{Time.now.year} Felix Krause\")\n```\n\n----------------------------------------\n\nTITLE: Running create_app_online with Parameters\nDESCRIPTION: Example showing how to pass parameters when running the create_app_online action directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run create_app_online parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing xcov Documentation in Terminal\nDESCRIPTION: This command shows how to display the xcov action documentation directly in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcov.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xcov\n```\n\n----------------------------------------\n\nTITLE: Enabling Clean Status Bar in UI Tests\nDESCRIPTION: Java code showing how to enable and disable the clean status bar feature in test setup and teardown methods.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@BeforeClass\npublic static void beforeAll() {\n    CleanStatusBar.enableWithDefaults();\n}\n\n@AfterClass\npublic static void afterAll() {\n    CleanStatusBar.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Example of running Appium action from command line with custom parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appium.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run appium parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Gemfile for fastlane dependency\nDESCRIPTION: A basic Gemfile that specifies fastlane as a dependency for your project. This file is required to install fastlane and its dependencies using Bundler within the AWS CodeBuild environment.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codebuild.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://rubygems.org'\n\ngem 'fastlane'\n```\n\n----------------------------------------\n\nTITLE: Uploading Artifact to Artifactory using API Key in Ruby\nDESCRIPTION: This snippet shows how to use the artifactory action in Fastlane to upload an artifact to Artifactory using an API key for authentication. It specifies the endpoint, file to upload, repository, and repository path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/artifactory.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nartifactory(\n  api_key: \"api_key\",\n  endpoint: \"https://artifactory.example.com/artifactory/\",\n  file: \"example.ipa\",  # File to upload\n  repo: \"mobile_artifacts\",       # Artifactory repo\n  repo_path: \"/ios/appname/example-major.minor.ipa\"   # Path to place the artifact including its filename\n)\n```\n\n----------------------------------------\n\nTITLE: Running Snapshot Action via CLI in fastlane\nDESCRIPTION: Command to execute the snapshot action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run snapshot\n```\n\n----------------------------------------\n\nTITLE: Running spaceship_logs from Terminal\nDESCRIPTION: Command to run the spaceship_logs action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run spaceship_logs\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Fastfile\nDESCRIPTION: Demonstrates how to set environment variables directly in the Fastfile, though this approach is not recommended as it defeats the purpose of using environment variables for sensitive information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nENV[\"DELIVER_USER\"] = \"felix@krausefx.com\"\n```\n\n----------------------------------------\n\nTITLE: Adding screengrab Gradle dependency\nDESCRIPTION: Add the screengrab dependency to your app's build.gradle file in the androidTest configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/screenshots.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nandroidTestImplementation 'tools.fastlane:screengrab:x.x.x'\n```\n\n----------------------------------------\n\nTITLE: Setting Release Notes with Default Values in Deliverfile\nDESCRIPTION: Example showing how to set release notes with default values in a Deliverfile. The default value is used for localizations that don't have a specific value defined.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrelease_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Launch Arguments in Swift\nDESCRIPTION: Swift code showing how to access launch arguments passed from snapshot as UserDefaults values. This example retrieves the firstName parameter passed via launch arguments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n```\n\n----------------------------------------\n\nTITLE: Handling Test Failures with Hipchat Notifications\nDESCRIPTION: Error handling configuration to send notifications to Hipchat when tests fail during fastlane execution.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/running-tests.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nerror do |ex|\n  hipchat(message: \"Tests have failed!\",\n          channel: \"Room or @username\",\n          success: false)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Zip Compression in Ruby\nDESCRIPTION: Simple example of using the zip action with no parameters\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/zip.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nzip\n```\n\n----------------------------------------\n\nTITLE: Running sigh action from terminal using fastlane CLI\nDESCRIPTION: Command to display the documentation for the sigh action in the terminal, providing a quick reference to available options and parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sigh.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action sigh\n```\n\n----------------------------------------\n\nTITLE: Sending Message to ChatWork using Fastlane\nDESCRIPTION: Example showing how to send a success message to a ChatWork room using the chatwork action. Requires ChatWork API token and room ID.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/chatwork.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nchatwork(\n  message: \"App successfully released!\",\n  roomid: 12345,\n  success: true,\n  api_token: \"Your Token\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Version Number Increment in Ruby\nDESCRIPTION: Simple example of incrementing the version number automatically without any parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_version_number # Automatically increment version number\n```\n\n----------------------------------------\n\nTITLE: Selecting Latest Xcode Version from a Set with xcversion in Ruby\nDESCRIPTION: Selects the latest installed version from the Xcode 8.1.x set using a version requirement specifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcversion.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nxcversion(version: \"~> 8.1.0\") # Selects the latest installed version from the 8.1.x set\n```\n\n----------------------------------------\n\nTITLE: Getting Shell Command Output in Fastlane\nDESCRIPTION: Demonstrates how to capture output from shell commands executed within fastlane scripts, allowing integration with external tools and commands.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\noutput = sh(\"pod update\")\n```\n\n----------------------------------------\n\nTITLE: Running the environment_variable action directly from CLI\nDESCRIPTION: Command to run the environment_variable action without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/environment_variable.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run environment_variable\n```\n\n----------------------------------------\n\nTITLE: Running reset_simulator_contents from CLI\nDESCRIPTION: Command line example showing how to run the reset_simulator_contents action as a one-off command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_simulator_contents.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run reset_simulator_contents\n```\n\n----------------------------------------\n\nTITLE: Uploading App Privacy Details via CLI\nDESCRIPTION: This command runs the upload_app_privacy_details_to_app_store action from the command line. It provides the necessary parameters including username, team name, and app identifier to authenticate and identify the app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\"\n```\n\n----------------------------------------\n\nTITLE: Run Git Pull Action via Fastlane CLI\nDESCRIPTION: Command to execute the git_pull action directly from the command line interface without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_pull.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run git_pull\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of frameit for iOS and macOS Screenshots\nDESCRIPTION: This command runs frameit to add frames to iOS and macOS screenshots in the current directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit\n```\n\n----------------------------------------\n\nTITLE: Legacy iOS Build Command Without Gym\nDESCRIPTION: Example of manual xcodebuild commands needed before gym was available\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nxcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"\n```\n\n----------------------------------------\n\nTITLE: Running frameit Action with Parameters\nDESCRIPTION: Example of how to pass parameters to the frameit action when running it from the CLI. Parameters are passed using the colon syntax and support primitive types and comma-delimited arrays.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run frameit parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Fastlane plugin using terminal command\nDESCRIPTION: Command to add a plugin to a Fastlane project. This will automatically generate the Swift API for the plugin.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec fastlane add_plugin ascii_art\n```\n\n----------------------------------------\n\nTITLE: Running sigh directly from command line\nDESCRIPTION: Basic command to run the sigh action directly from terminal without adding it to a Fastfile, useful for one-off provisioning profile generations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/sigh.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run sigh\n```\n\n----------------------------------------\n\nTITLE: Running Slather from Command Line with Fastlane\nDESCRIPTION: This command line example shows how to run the slather action directly from the terminal using fastlane run. It can be used for one-off operations without adding the action to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slather.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run slather\n```\n\n----------------------------------------\n\nTITLE: Customizing iOS Status Bar with Detailed Parameters\nDESCRIPTION: Advanced example of configuring snapshot with specific status bar settings including time, network type, signal strength, battery level and carrier name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# Set the time to 9:41AM, battery at 75% and charging, on the TELUS LTE network\ncapture_ios_screenshots(\n\toverride_status_bar: true,\n\toverride_status_bar_arguments: \"--time 9:41 --dataNetwork lte --cellularMode active --cellularBars 4 --batteryState charging --batteryLevel 75 --operatorName TELUS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of dsym_zip Action in Ruby\nDESCRIPTION: Simple example of using the dsym_zip action without any parameters. This will create a zipped dSYM in the project root from the .xcarchive.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/dsym_zip.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndsym_zip\n```\n\n----------------------------------------\n\nTITLE: Setting Falcon Screenshot Strategy\nDESCRIPTION: Java code for configuring screengrab to use the Falcon screenshot strategy which works well for multi-window situations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nScreengrab.setDefaultScreenshotStrategy(new FalconScreenshotStrategy(activityRule.getActivity()));\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for SCP Action\nDESCRIPTION: Example showing how to pass parameters when running the SCP action from CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scp.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run scp parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running get_provisioning_profile from Command Line\nDESCRIPTION: Example showing how to run the get_provisioning_profile action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run get_provisioning_profile\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools for Fastlane\nDESCRIPTION: This command installs the latest version of Xcode command line tools, which is a prerequisite for using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/fastlane/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Configuring Deliver with Produce App ID\nDESCRIPTION: Example showing how to configure the Deliverfile to use the app ID generated by Produce for app delivery to App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\napple_id(ENV['PRODUCE_APPLE_ID'])\n```\n\n----------------------------------------\n\nTITLE: CLI Parameters Example for GitHub Release\nDESCRIPTION: Example showing how to pass parameters when running the set_github_release action from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_github_release.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run set_github_release parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Resetting Xcode Simulators\nDESCRIPTION: Command to delete and re-create all iOS simulators, useful for resolving simulator issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nfastlane snapshot reset_simulators\n```\n\n----------------------------------------\n\nTITLE: Passing Animation Skip Flag in Ruby Snapshot Configuration\nDESCRIPTION: Ruby code showing how to pass the SKIP_ANIMATIONS flag to the app during snapshot testing, which works with the Swift code to disable animations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nsnapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])\n```\n\n----------------------------------------\n\nTITLE: Displaying Produce Help Information in Bash\nDESCRIPTION: This command shows all available parameters and options for the 'produce' action, including commands for creating apps, modifying services, and managing app groups.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce --help\n```\n\n----------------------------------------\n\nTITLE: Enabling Application Services for an iOS App\nDESCRIPTION: Example command to enable specific application services (HomeKit and HealthKit) for an existing iOS app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce enable_services --homekit --healthkit\n```\n\n----------------------------------------\n\nTITLE: Finding All Spaceship Logs and Printing Details in Ruby\nDESCRIPTION: Example of using spaceship_logs to find all logs (not just the latest) and print their contents and paths.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nspaceship_logs(\n  latest: false,\n  print_contents: true,\n  print_paths: true\n)\n```\n\n----------------------------------------\n\nTITLE: Zip with Exclusion Pattern\nDESCRIPTION: Compresses a directory while excluding git-related files\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/zip.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nzip(\n  path: \"./\",\n  output_path: \"Source Code.zip\",\n  exclude: [\".git/*\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Running min_fastlane_version Action from Command Line\nDESCRIPTION: Command to execute the min_fastlane_version action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/min_fastlane_version.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run min_fastlane_version\n```\n\n----------------------------------------\n\nTITLE: Viewing Recreate Schemes Documentation via CLI\nDESCRIPTION: Command to display the recreate_schemes action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/recreate_schemes.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action recreate_schemes\n```\n\n----------------------------------------\n\nTITLE: Running Debug Action Directly via CLI\nDESCRIPTION: Command to run the debug action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/debug.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run debug\n```\n\n----------------------------------------\n\nTITLE: Running xcov from Command Line\nDESCRIPTION: This example shows how to run the xcov action directly from the command line using fastlane's run command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcov.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcov\n```\n\n----------------------------------------\n\nTITLE: Uploading APK with Patch Expansion References\nDESCRIPTION: Command line example for uploading an APK while referencing existing patch expansion files from a previous version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --obb_patch_references_version 21 --obb_patch_file_size 666154207\n```\n\n----------------------------------------\n\nTITLE: Export Archive Command for Xcode 7+\nDESCRIPTION: The command gym uses to export the archive into an IPA file for Xcode 7 and above, showing how it uses xcrun with a generated plist file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'\n```\n\n----------------------------------------\n\nTITLE: Running get_provisioning_profile with Parameters\nDESCRIPTION: Example demonstrating how to run the get_provisioning_profile action with custom parameters passed through the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run get_provisioning_profile parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Backing up a file using the backup_file action in Ruby\nDESCRIPTION: This example demonstrates how to use the backup_file action to create a backup of a file. The action takes a path parameter that specifies the location of the file to be backed up. The resulting backup will be created at '[path].back'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/backup_file.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbackup_file(path: \"/path/to/file\")\n```\n\n----------------------------------------\n\nTITLE: Running XcodeBuild from CLI\nDESCRIPTION: Examples of running xcbuild directly from command line, including basic usage and passing parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcbuild.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcbuild\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcbuild parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Including CocoaPods in Gemfile for Fastlane\nDESCRIPTION: This snippet demonstrates how to include both Fastlane and CocoaPods gems in your Gemfile. This is necessary when using CocoaPods dependencies to prevent scope conflict issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/codemagic.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"fastlane\"\ngem \"cocoapods\"\n```\n\n----------------------------------------\n\nTITLE: Using Cert Alias in Fastlane Ruby\nDESCRIPTION: Using the shorthand 'cert' alias instead of the full 'get_certificates' action name. This performs exactly the same function as the get_certificates action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cert.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncert # alias for \"get_certificates\"\n```\n\n----------------------------------------\n\nTITLE: Running Frame Screenshots from CLI\nDESCRIPTION: Command to execute the frame_screenshots action directly from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run frame_screenshots\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Screenshot Path with frameit\nDESCRIPTION: Configuring frameit to look for screenshots in a specific directory path instead of using the default location.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(path: \"/screenshots\")\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for push_to_git_remote\nDESCRIPTION: Example showing how to pass parameters to the push_to_git_remote action when running it directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_to_git_remote.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run push_to_git_remote parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving IPA Output Path from Lane Context in Ruby\nDESCRIPTION: This example shows how to retrieve the IPA_OUTPUT_PATH shared value from the lane context in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lane_context.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nlane_context[SharedValues::IPA_OUTPUT_PATH]\n```\n\n----------------------------------------\n\nTITLE: Displaying Deliver Action Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the 'deliver' action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action deliver\n```\n\n----------------------------------------\n\nTITLE: User Interface Interaction Methods\nDESCRIPTION: Shows various UI methods for displaying messages and getting user input in Fastlane actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_25\n\nLANGUAGE: Ruby\nCODE:\n```\nUI.message \"Hello from my_new_action.\"\nUI.important \"Warning: This is a new action.\"\nUI.error \"Something unexpected happened in my_new_action. Attempting to continue.\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Play Store Internal App Sharing Upload\nDESCRIPTION: Command line instruction for running the upload action directly from terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store_internal_app_sharing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run upload_to_play_store_internal_app_sharing\n```\n\n----------------------------------------\n\nTITLE: Running last_git_commit Action from CLI\nDESCRIPTION: This command demonstrates how to run the last_git_commit action directly from the command line interface using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/last_git_commit.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run last_git_commit\n```\n\n----------------------------------------\n\nTITLE: Framing Android Screenshots with frameit\nDESCRIPTION: This command specifically frames Android screenshots using frameit.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit android\n```\n\n----------------------------------------\n\nTITLE: Running Notification Action from CLI\nDESCRIPTION: These commands show how to run the 'notification' action directly from the command line interface, including how to pass parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notification.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run notification\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run notification parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Restoring a File Using Fastlane's restore_file Action in Ruby\nDESCRIPTION: This code snippet demonstrates how to use the 'restore_file' action in a Fastfile to restore a previously backed up file. It specifies the path of the file to be restored.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/restore_file.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrestore_file(path: \"/path/to/file\")\n```\n\n----------------------------------------\n\nTITLE: Removing a Tester from Specific Groups\nDESCRIPTION: Command to remove a tester from specific testing groups while keeping them in other groups.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot remove felix@krausefx.com -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Jira Comment Creation with Context Path\nDESCRIPTION: Example of creating a Jira comment when the Jira instance is accessed through a context path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jira.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njira(\n  url: \"https://yourserverdomain.com\",\n  context_path: \"/jira\",\n  username: \"Your username\",\n  password: \"Your password or API token\",\n  ticket_id: \"IOS-123\",\n  comment_text: \"Text to post as a comment\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of xcarchive in Fastfile (Ruby)\nDESCRIPTION: Simple example of using the xcarchive action in a Fastfile to archive an iOS or macOS project using xcodebuild.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcarchive.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcarchive\n```\n\n----------------------------------------\n\nTITLE: Downloading Latest Frames\nDESCRIPTION: Command to download the latest device frames\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit download_frames\n```\n\n----------------------------------------\n\nTITLE: Recursive Git Submodule Update with Initialization in Ruby\nDESCRIPTION: Executes a git submodule update command with both recursive and init options enabled, which initializes and recursively updates all submodules.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_submodule_update.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngit_submodule_update(recursive: true, init: true)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of get_push_certificate in Ruby\nDESCRIPTION: Simple example showing how to call the get_push_certificate action in a Fastfile with no parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pem.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget_push_certificate\n```\n\n----------------------------------------\n\nTITLE: Running produce action as a one-off command\nDESCRIPTION: Command to run the produce action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_23\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run produce\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of hg_push in Ruby\nDESCRIPTION: Demonstrates the simplest way to use the hg_push action in a Fastfile to push local changes to the default remote Mercurial repository.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_push.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhg_push\n```\n\n----------------------------------------\n\nTITLE: Setting Up Device Frames for frameit\nDESCRIPTION: Command to download the latest device frames for use with frameit.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nfastlane frameit setup\n```\n\n----------------------------------------\n\nTITLE: Running gcovr Action with Parameters from Command Line\nDESCRIPTION: This example demonstrates how to pass parameters to the gcovr action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gcovr.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run gcovr parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Jira CLI Command Usage\nDESCRIPTION: Command line example showing how to run the Jira action directly from terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jira.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run jira\n```\n\n----------------------------------------\n\nTITLE: Adding Shield to App Icon without Badge using Fastlane\nDESCRIPTION: This example illustrates how to add a shield from shields.io to the app icon without including the default beta badge. It specifies the shield text and disables the standard badge.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/badge.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbadge(shield: \"Version-0.0.3-blue\", no_badge: true)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Get Build Number Action\nDESCRIPTION: Shows how to run the get_build_number action directly from the command line without using a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run get_build_number\n```\n\n----------------------------------------\n\nTITLE: Running Unlock Keychain with Parameters from CLI (Fastlane)\nDESCRIPTION: Example of running the unlock_keychain action from the terminal with custom parameters using the proper syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/unlock_keychain.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run unlock_keychain parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Using a Different Xcode Installation\nDESCRIPTION: Example showing how to specify a different Xcode installation using the DEVELOPER_DIR environment variable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Actions with Parameters\nDESCRIPTION: Example showing how to pass parameters to Fastlane actions when running from the command line. Parameters are passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_bundle_exec.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ensure_bundle_exec parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing XcodeBuild Documentation in Terminal\nDESCRIPTION: Command to display the xcbuild action documentation in the terminal using fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcbuild.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xcbuild\n```\n\n----------------------------------------\n\nTITLE: Setting DecorView Screenshot Strategy\nDESCRIPTION: Java code for configuring screengrab to use the DecorView screenshot strategy for older Android devices.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nScreengrab.setDefaultScreenshotStrategy(new DecorViewScreenshotStrategy());\n```\n\n----------------------------------------\n\nTITLE: Java Log Check with Extension\nDESCRIPTION: Checks for Log.v debug statements in Java files\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nensure_no_debug_code(text: \"Log.v\",\n      extension: \"java\")\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from DotGPG File in Ruby\nDESCRIPTION: Basic example of using dotgpg_environment action to load secrets from a GPG file into environment variables. Requires a path to the GPG file as input.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/dotgpg_environment.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndotgpg_environment(dotgpg_file: './path/to/gpgfile')\n```\n\n----------------------------------------\n\nTITLE: TestFlight Build Number Query - Ruby\nDESCRIPTION: Queries TestFlight build number for a specific version, with live flag set to false.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/app_store_build_number.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\napp_store_build_number(\n  live: false,\n  app_identifier: \"app.identifier\",\n  version: \"1.2.9\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running git_tag_exists Action from CLI\nDESCRIPTION: This command shows how to run the git_tag_exists action directly from the command line interface, allowing for one-off executions without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_tag_exists.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run git_tag_exists\n```\n\n----------------------------------------\n\nTITLE: Running frameit to Add Device Frames to Screenshots\nDESCRIPTION: This command automatically adds device frames around all screenshots in the current directory and its subdirectories.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfastlane frameit\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific TestFlight Tester\nDESCRIPTION: Command to find information about a specific tester by email address, showing their personal details, latest version installed, and devices used for testing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot find felix@krausefx.com\n```\n\n----------------------------------------\n\nTITLE: Running ADB Action via CLI\nDESCRIPTION: Demonstrates how to execute the ADB action and pass parameters using Fastlane's command-line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run adb\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run adb parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Files in Fastlane Actions\nDESCRIPTION: Demonstrates how to implement configuration file support in custom actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_24\n\nLANGUAGE: Ruby\nCODE:\n```\ndef self.run(params)\n  params.load_configuration_file(\"MyNewActionfile\")\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Getting Help with TestFlight Upload Options\nDESCRIPTION: Command to view all available options for the pilot/testflight action in fastlane, showing all parameters that can be used with this command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action pilot\n```\n\n----------------------------------------\n\nTITLE: Posting a Message to Typetalk using Fastlane\nDESCRIPTION: This code snippet demonstrates how to use the typetalk action in Fastlane to post a message to Typetalk. It includes parameters for the message, note path, topic ID, success status, and Typetalk token.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/typetalk.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntypetalk(\n  message: \"App successfully released!\",\n  note_path: \"ChangeLog.md\",\n  topicId: 1,\n  success: true,\n  typetalk_token: \"Your Typetalk Token\"\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing version_bump_podspec Documentation in Terminal\nDESCRIPTION: This command shows how to display the full documentation for the version_bump_podspec action in the terminal using the fastlane action command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_bump_podspec.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action version_bump_podspec\n```\n\n----------------------------------------\n\nTITLE: Running Verify Build Action via Fastlane CLI\nDESCRIPTION: Command to run the verify_build action directly from the terminal without adding it to a Fastfile. This is useful for one-off verification tasks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_build.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run verify_build\n```\n\n----------------------------------------\n\nTITLE: Running set_build_number_repository with Parameters from Command Line\nDESCRIPTION: Command showing how to run the set_build_number_repository action from the terminal with custom parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_build_number_repository.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run set_build_number_repository parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Version Check from CLI\nDESCRIPTION: Command to run the fastlane_version action directly from the command line without adding it to your Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/fastlane_version.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run fastlane_version\n```\n\n----------------------------------------\n\nTITLE: Downloading App Privacy Details with Custom Output Path in Ruby\nDESCRIPTION: Downloads app privacy details from App Store Connect and saves them to a specific JSON file path. This example shows how to customize the output location of the privacy details JSON file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_app_privacy_details_from_app_store.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_app_privacy_details_from_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  output_json_path: \"fastlane/app_data_usages.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running check_app_store_metadata from CLI\nDESCRIPTION: Command line example showing how to run the check_app_store_metadata action directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run check_app_store_metadata\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to Gradle in Ruby\nDESCRIPTION: Demonstrates how to pass custom properties to Gradle tasks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gradle.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n\n  properties: {\n    \"exampleNumber\" => 100,\n    \"exampleString\" => \"1.0.0\",\n    # ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Parameters in Fastlane Actions\nDESCRIPTION: Shows how to properly define boolean parameters for fastlane actions, which requires special handling since Ruby doesn't have a specific Boolean class.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :commit,\n  env_name: \"MY_NEW_ACTION_COMMIT\",\n  description: \"Commit the results if true\",\n  optional: true,\n  default_value: false,\n  is_string: false\n)\n```\n\n----------------------------------------\n\nTITLE: Running clean_build_artifacts from CLI in Ruby\nDESCRIPTION: This snippet shows how to run the clean_build_artifacts action from the command line interface. It can be used for one-off executions without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_build_artifacts.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run clean_build_artifacts\n```\n\n----------------------------------------\n\nTITLE: Associating an App with Multiple iCloud Containers using Produce in Bash\nDESCRIPTION: This command associates an existing app with multiple specified iCloud Containers using the 'produce' action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app1 iCloud.com.krausefx.app2\n```\n\n----------------------------------------\n\nTITLE: Using Silver Device Frames with frameit\nDESCRIPTION: Setting frameit to use silver-colored device frames instead of the default black frames for screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(silver: true)\n```\n\n----------------------------------------\n\nTITLE: Running Xcodebuild from CLI\nDESCRIPTION: Commands showing how to run xcodebuild directly from the command line, including examples of passing parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcodebuild.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcodebuild\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcodebuild parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Bar for iOS Screenshots\nDESCRIPTION: Example showing how to configure snapshot to use a clean status bar with default settings of 9:41AM, full battery and reception.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# Sets the time to 9:41AM with full battery and reception, with the default carrier name: Carrier\ncapture_ios_screenshots(\n\toverride_status_bar: true\n)\n```\n\n----------------------------------------\n\nTITLE: Running Default Platform via CLI\nDESCRIPTION: Commands to run the default_platform action directly from the command line, including examples of parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/default_platform.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run default_platform\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run default_platform parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Snapshot Action with Parameters via CLI in fastlane\nDESCRIPTION: Command demonstrating how to pass parameters to the snapshot action when running it directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run snapshot parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Show Git Pull Action Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the git_pull action in the terminal using Fastlane's built-in documentation system.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_pull.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action git_pull\n```\n\n----------------------------------------\n\nTITLE: Configuring frameit with Framefile.json\nDESCRIPTION: This JSON structure defines the configuration for frameit, including device frame version, default settings, and specific data for individual screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    ...\n  },\n  \"data\": [\n     ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running git_branch Action from CLI\nDESCRIPTION: Command to run the git_branch action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_branch.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run git_branch\n```\n\n----------------------------------------\n\nTITLE: Searching for fastlane Plugins\nDESCRIPTION: Commands to search for available fastlane plugins. The first command lists all plugins, while the second allows searching for specific plugins.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/using-plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane search_plugins\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane search_plugins [query]\n```\n\n----------------------------------------\n\nTITLE: Setting Falcon Screenshot Strategy\nDESCRIPTION: Java code to set the Falcon screenshot strategy which may work better than UI Automator in some situations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nScreengrab.setDefaultScreenshotStrategy(new FalconScreenshotStrategy(activityRule.getActivity()));\n```\n\n----------------------------------------\n\nTITLE: Viewing XCTest Documentation via CLI - Shell\nDESCRIPTION: Command to display the xctest action documentation in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctest.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xctest\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running Danger with Fastlane\nDESCRIPTION: Command-line example showing how to run the danger action directly from terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/danger.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run danger\n```\n\n----------------------------------------\n\nTITLE: Customizing Clean Status Bar in UI Tests\nDESCRIPTION: Java code demonstrating how to customize the status bar appearance with Bluetooth and mobile network indicators.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nnew CleanStatusBar()\n    .setBluetoothState(BluetoothState.DISCONNECTED)\n    .setMobileNetworkDataType(MobileDataType.LTE)\n    .enable();\n```\n\n----------------------------------------\n\nTITLE: Running Download Action from Command Line Interface\nDESCRIPTION: These commands show how to run the 'download' action directly from the command line interface. The first command displays the action's documentation, while the second demonstrates how to execute the action with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action download\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Specifying CSV Path for TestFlight Tester Export\nDESCRIPTION: Command to export TestFlight testers to a specific CSV file path, allowing you to control where the export is saved.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot export -c ~/Desktop/testers.csv\n```\n\n----------------------------------------\n\nTITLE: Custom Mercurial Version Bump Commit\nDESCRIPTION: Advanced example showing how to commit a version bump with a custom commit message and specific Xcode project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_commit_version_bump.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nhg_commit_version_bump(\n  message: \"Version Bump\",       # create a commit with a custom message\n  xcodeproj: \"./path/MyProject.xcodeproj\", # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage with Parameters\nDESCRIPTION: Demonstrates how to pass parameters to the increment_build_number action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run increment_build_number parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Demonstrates how to run the version_get_podspec action from the command line while passing specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_get_podspec.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run version_get_podspec parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Jira Comment Creation with Error Handling\nDESCRIPTION: Example of creating a Jira comment with custom error handling behavior by setting fail_on_error to false.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jira.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\njira(\n  ticket_id: \"IOS-123\",\n  comment_text: \"Text to post as a comment\",\n  fail_on_error: false\n)\n```\n\n----------------------------------------\n\nTITLE: Using the pem alias in Ruby\nDESCRIPTION: Example showing how to use the 'pem' alias which is equivalent to calling 'get_push_certificate'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pem.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npem # alias for \"get_push_certificate\"\n```\n\n----------------------------------------\n\nTITLE: Running Slather with Parameters from Command Line\nDESCRIPTION: This command line example demonstrates how to run the slather action with specific parameters directly from the terminal. Parameters are passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slather.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run slather parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command Example\nDESCRIPTION: Shows how to run the action from command line\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run ensure_no_debug_code\n```\n\n----------------------------------------\n\nTITLE: Running download_universal_apk_from_google_play action with parameters\nDESCRIPTION: Example of how to run the download_universal_apk_from_google_play action from the terminal with custom parameter values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_universal_apk_from_google_play.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download_universal_apk_from_google_play parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to check_app_store_metadata via CLI\nDESCRIPTION: Example showing how to pass parameters to the check_app_store_metadata action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/check_app_store_metadata.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run check_app_store_metadata parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Using build_mac_app Alias\nDESCRIPTION: Shows that build_mac_app is an alias for build_app that only presents macOS-specific options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nbuild_mac_app    # alias for \"build_app (only macOS options)\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Number from Lane Context in Ruby\nDESCRIPTION: This snippet demonstrates how to access the BUILD_NUMBER shared value from the lane context in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lane_context.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane_context[SharedValues::BUILD_NUMBER]\n```\n\n----------------------------------------\n\nTITLE: Displaying Create Keychain Documentation in Terminal\nDESCRIPTION: Command to show the create_keychain action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_keychain.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action create_keychain\n```\n\n----------------------------------------\n\nTITLE: Running Git Remote Branch from CLI\nDESCRIPTION: Commands to run the git_remote_branch action directly from the command line, including an example with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_remote_branch.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run git_remote_branch\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run git_remote_branch parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Available Language Codes for Snapshot Localization\nDESCRIPTION: List of all language codes available for localization in Fastlane snapshot, used to generate screenshots in different languages.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]\n```\n\n----------------------------------------\n\nTITLE: Running Jazzy Action from Command Line\nDESCRIPTION: Command to run the jazzy action directly from the terminal without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jazzy.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run jazzy\n```\n\n----------------------------------------\n\nTITLE: Zip File with Custom Output Path\nDESCRIPTION: Compresses an app file to a specified output location\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/zip.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nzip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running version_bump_podspec from CLI\nDESCRIPTION: This command shows how to run the version_bump_podspec action directly from the command line interface without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_bump_podspec.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run version_bump_podspec\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools\nDESCRIPTION: Command to install the latest Xcode command line tools, which is a prerequisite for using Fastlane on macOS.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/setup-fastlane-header.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Printing a Message with Echo Action in Ruby\nDESCRIPTION: This snippet demonstrates how to use the 'echo' action (alias for 'puts') to print a message in a Fastfile. It's a simple way to output text during the execution of a Fastlane lane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/echo.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nputs \"Hi there\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command Examples for IPA Action\nDESCRIPTION: Examples of how to run the IPA action directly from the command line. Shows both basic invocation and how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ipa.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action ipa\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ipa\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ipa parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest Permissions for Screengrab\nDESCRIPTION: XML configuration for the required permissions in debug AndroidManifest.xml file to allow screengrab to function properly with storage and locale permissions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <!-- Allows storing screenshots on external storage, where it can be accessed by ADB -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" android:maxSdkVersion=\"18\" />\n\n    <!-- Allows changing locales -->\n    <uses-permission\n            android:name=\"android.permission.CHANGE_CONFIGURATION\"\n            tools:ignore=\"ProtectedPermissions\" />\n\n    <!-- Allows changing SystemUI demo mode -->\n    <uses-permission\n            android:name=\"android.permission.DUMP\"\n            tools:ignore=\"ProtectedPermissions\" />\n\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Running XCTest via CLI - Shell\nDESCRIPTION: Commands demonstrating how to run the xctest action directly from the command line, including examples of parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctest.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xctest\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xctest parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Firebase for App Distribution\nDESCRIPTION: Command to authenticate with Firebase before using the Firebase App Distribution service in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run firebase_app_distribution_login\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Usage Tracking in Fastlane Ruby\nDESCRIPTION: This code snippet demonstrates how to opt out of usage tracking in Fastlane. By adding this line at the top of your Fastfile, you disable metrics collection for your Fastlane workflows.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_usage.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nopt_out_usage # add this to the top of your Fastfile\n```\n\n----------------------------------------\n\nTITLE: Exporting TestFlight Testers to CSV\nDESCRIPTION: Command to export all external testers to a CSV file, useful for backing up tester information or transferring to another system.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/testflight.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot export\n```\n\n----------------------------------------\n\nTITLE: Removing a Tester from All Groups\nDESCRIPTION: Removes a beta tester from all internal and external groups associated with your app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot remove felix@krausefx.com\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to last_git_commit Action via CLI\nDESCRIPTION: This example shows how to pass parameters to the last_git_commit action when running it from the command line interface using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/last_git_commit.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run last_git_commit parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Detecting snapshot Mode in Swift\nDESCRIPTION: Swift code to detect when the app is running in snapshot mode using a runtime check.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Credentials using Fastlane CredentialsManager CLI\nDESCRIPTION: Demonstrates how to remove credentials from the system keychain using Fastlane's CredentialsManager command-line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/other.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane fastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.\n```\n\n----------------------------------------\n\nTITLE: CLI Execution Commands\nDESCRIPTION: Commands showing how to run the number_of_commits action directly from the command line, including parameter passing syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/number_of_commits.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run number_of_commits\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run number_of_commits parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Clubmate Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the 'clubmate' action in the terminal using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clubmate.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action clubmate\n```\n\n----------------------------------------\n\nTITLE: Silent Zip Compression\nDESCRIPTION: Compresses a file with verbose output disabled\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/zip.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nzip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\",\n  verbose: false\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for ADB Devices\nDESCRIPTION: Example showing how to run the adb_devices action from the command line while passing parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb_devices.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run adb_devices parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Animations for Faster Snapshot Tests\nDESCRIPTION: Swift code to disable UIView animations when the app is run with a specific launch argument, helping to speed up UI tests.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nif ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud for Match\nDESCRIPTION: Command to authenticate with Google Cloud for accessing match storage using application default credentials.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Running Jazzy Action with Parameters from Command Line\nDESCRIPTION: Example of running the jazzy action from the command line with custom parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jazzy.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run jazzy parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running get_build_number_repository via CLI\nDESCRIPTION: Command to execute the get_build_number_repository action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number_repository.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run get_build_number_repository\n```\n\n----------------------------------------\n\nTITLE: Getting help for disabling services with fastlane produce\nDESCRIPTION: Command to view all available options for disabling services with the fastlane produce tool.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce disable_services --help\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Version Action with Parameters\nDESCRIPTION: Example showing how to run the ruby_version action with parameters directly from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ruby_version.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run ruby_version parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Store Version Number in Variable in Ruby\nDESCRIPTION: Storing the new version number in a variable for later use.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nversion = increment_version_number\n```\n\n----------------------------------------\n\nTITLE: Using Default Xcode Version from .xcode-version File with xcversion in Ruby\nDESCRIPTION: Uses xcversion without specifying a version, which defaults to the version specified in the .xcode-version file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcversion.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nxcversion # When missing, the version value defaults to the value specified in the .xcode-version file\n```\n\n----------------------------------------\n\nTITLE: Running pilot in Verbose Mode for Debugging\nDESCRIPTION: Command to run pilot with verbose output for debugging issues during the upload process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot upload --verbose\n```\n\n----------------------------------------\n\nTITLE: Using Produce Alias in Ruby\nDESCRIPTION: This snippet shows the use of the 'produce' alias, which is equivalent to calling 'create_app_online' for creating an iOS app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nproduce   # alias for \"create_app_online\"\n```\n\n----------------------------------------\n\nTITLE: Running set_pod_key as a standalone command\nDESCRIPTION: Command to run the set_pod_key action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_pod_key.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run set_pod_key\n```\n\n----------------------------------------\n\nTITLE: Displaying team_name Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the team_name action in the terminal using fastlane. It's useful for quick reference when working with the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/team_name.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action team_name\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to fastlane Command Line Tools\nDESCRIPTION: These shell commands demonstrate how to pass parameters to fastlane command line tools. Options are appended to the command with their names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/fastlane.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane [tool] --[option]=[value]\n\nfastlane deliver --skip_screenshots=true\nfastlane snapshot --screenshots_path=xxxxx --schema=xxxx\n```\n\n----------------------------------------\n\nTITLE: Running xcode_select with Parameters\nDESCRIPTION: Example of running the xcode_select action from the terminal with parameters. This demonstrates how to pass values to the action parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_select.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcode_select parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Runtime Detection in Java\nDESCRIPTION: Java code to detect if the app is running under screengrab\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nif (BuildConfig.FLAVOR == \"screengrab\") {\n    System.out.println(\"screengrab is running!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Running git_branch Action with Parameters\nDESCRIPTION: Example showing how to run the git_branch action from the terminal with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_branch.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run git_branch parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Listing TestFlight Testers\nDESCRIPTION: Command to list all TestFlight testers (both internal and external) associated with the application.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pilot.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane pilot list\n```\n\n----------------------------------------\n\nTITLE: Running Deliver Action from CLI\nDESCRIPTION: Example of running the 'deliver' action directly from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run deliver\n```\n\n----------------------------------------\n\nTITLE: Specifying Export Method\nDESCRIPTION: Example showing how to specify a different export method (ad-hoc in this case) instead of the default App Store or TestFlight export.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --export_method ad-hoc\n```\n\n----------------------------------------\n\nTITLE: Removing a Tester from Specific Groups\nDESCRIPTION: Removes a beta tester only from specified groups while keeping them in other groups they might be part of.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot remove felix@krausefx.com -g group-1,group-2\n```\n\n----------------------------------------\n\nTITLE: Configuring LocaleTestRule in Java Tests\nDESCRIPTION: Java code showing how to add LocaleTestRule to test classes to handle automatic switching of locales for screenshot capturing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@ClassRule\npublic static final LocaleTestRule localeTestRule = new LocaleTestRule();\n```\n\n----------------------------------------\n\nTITLE: Customizing Screenshot Orientation with force_orientation_block\nDESCRIPTION: Using the force_orientation_block parameter to customize the orientation of device frames based on filename patterns. This example specifically handles iPad Pro and iPhone 6 Plus screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# It matches the filename to the framed device orientation\nframeit(\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    case filename\n      when \"iPad Pro (12.9-inch)-01LoginScreen\"\n        :landscape_right\n      when \"iPhone 6 Plus-01LoginScreen\"\n        :portrait\n      # and so on\n    end\n  end\n)\n```\n\n----------------------------------------\n\nTITLE: Produce Alias Example\nDESCRIPTION: Shows the alias command for create_app_online, which can be used as a shorthand.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nproduce   # alias for \"create_app_online\"\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Capture Command in Ruby\nDESCRIPTION: Simplest form of the fastlane command to capture iOS screenshots. This uses default settings defined in the Snapfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_ios_screenshots\n```\n\n----------------------------------------\n\nTITLE: TestFlight Upload Alias Commands\nDESCRIPTION: Alternative command aliases that can be used instead of upload_to_testflight\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\ntestflight # alias for \"upload_to_testflight\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\npilot # alias for \"upload_to_testflight\"\n```\n\n----------------------------------------\n\nTITLE: Running build_mac_app Action from CLI\nDESCRIPTION: Command to run the build_mac_app action directly from the command line interface using fastlane run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_18\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run build_mac_app\n```\n\n----------------------------------------\n\nTITLE: Running IFTTT Action with Parameters from CLI\nDESCRIPTION: Example of running the ifttt action from the command line with custom parameters passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ifttt.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run ifttt parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running update_app_group_identifiers Action\nDESCRIPTION: This command demonstrates how to run the update_app_group_identifiers action directly from the terminal without modifying the Fastfile. It's useful for one-off execution of the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_group_identifiers.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_app_group_identifiers\n```\n\n----------------------------------------\n\nTITLE: Running verify_pod_keys with Parameters (Command Line)\nDESCRIPTION: Example of running the verify_pod_keys action from the terminal with parameters. Parameters are passed using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_pod_keys.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run verify_pod_keys parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Latest Device Frames for frameit\nDESCRIPTION: This command updates frameit by downloading the latest available device frames.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit download_frames\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation for update_app_group_identifiers in Terminal\nDESCRIPTION: This command shows how to view the documentation for the update_app_group_identifiers action directly in the terminal using fastlane's built-in help system.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_group_identifiers.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action update_app_group_identifiers\n```\n\n----------------------------------------\n\nTITLE: Installing xcbeautify Using Homebrew\nDESCRIPTION: Command to install the recommended xcbeautify formatter using Homebrew package manager. This is required as xcbeautify is not bundled with Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/xcodebuild-formatters.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\n$ brew install xcbeautify\n```\n\n----------------------------------------\n\nTITLE: Accessing Fastlane Plugin Source Code\nDESCRIPTION: Shows the file path structure for accessing a Fastlane plugin's source code. This is useful for inspecting the implementation of specific actions within a plugin.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/plugins-troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlib/fastlane/plugin/[plugin_name]/actions/[action_name].rb\n```\n\n----------------------------------------\n\nTITLE: Running Action via CLI\nDESCRIPTION: Commands showing how to run the install_provisioning_profile action directly from CLI, including example with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/install_provisioning_profile.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run install_provisioning_profile\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run install_provisioning_profile parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Application Services for an iOS App\nDESCRIPTION: Example command to disable specific application services (iCloud in this case) for an existing iOS app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce disable_services --icloud\n```\n\n----------------------------------------\n\nTITLE: Running set_pod_key with parameters via CLI\nDESCRIPTION: Example of running the set_pod_key action from the terminal with specific parameters passed directly to the command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_pod_key.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run set_pod_key parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running team_id Action from CLI\nDESCRIPTION: This command shows how to run the team_id action directly from the command line interface. It can be used for one-off executions without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/team_id.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run team_id\n```\n\n----------------------------------------\n\nTITLE: Running upload_symbols_to_sentry as a One-off Command\nDESCRIPTION: Command line instruction to run the upload_symbols_to_sentry action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_sentry.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run upload_symbols_to_sentry\n```\n\n----------------------------------------\n\nTITLE: Running is_ci via CLI\nDESCRIPTION: Commands showing how to run the is_ci action directly from the command line, including examples of parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/is_ci.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run is_ci\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run is_ci parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Snapshot Mode in Swift\nDESCRIPTION: Swift code to detect when an app is being run by snapshot. Snapshot includes a FASTLANE_SNAPSHOT flag that can be checked to implement conditional logic for screenshot capture.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n```\n\n----------------------------------------\n\nTITLE: Using Rose Gold Device Frames with frameit\nDESCRIPTION: Setting frameit to use rose gold colored device frames for a more premium appearance in screenshots.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(rose_gold: true)\n```\n\n----------------------------------------\n\nTITLE: Listing All TestFlight Testers\nDESCRIPTION: Shows all internal and external testers associated with your app, including their email addresses and device counts.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane pilot list\n```\n\n----------------------------------------\n\nTITLE: Setting Price Tier\nDESCRIPTION: How to set the app's price tier as a number.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nprice_tier 0\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for xcode_install\nDESCRIPTION: Example showing how to run xcode_install from the command line while passing parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_install.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xcode_install parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Example of running setup_travis action from command line with custom parameter values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_travis.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run setup_travis parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Git Remote Branch\nDESCRIPTION: Advanced usage of git_remote_branch that specifies a particular remote repository name to check using the remote_name parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_remote_branch.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngit_remote_branch(remote_name:\"upstream\")\n```\n\n----------------------------------------\n\nTITLE: Creating a New App Group\nDESCRIPTION: Command to create a new App Group on the Apple Developer Portal with a specified identifier and name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce group -g group.krausefx -n \"Example App Group\"\n```\n\n----------------------------------------\n\nTITLE: Creating Proc Objects with Proc.new in Ruby\nDESCRIPTION: Shows how to create Proc objects using the Proc.new constructor for use with fastlane action callbacks and verification blocks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nverify_block = Proc.new do |value|\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Creating entry point for Fastlane SPM package\nDESCRIPTION: Swift code to create an entry point for a Fastlane SPM package. This initializes the Fastlane runloop with your Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport Fastlane\n\nMain().run(with: Fastfile())\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Hash Redirect Logic in JavaScript\nDESCRIPTION: A closure-wrapped JavaScript function that handles URL hash-based redirects for documentation pages that have been moved to new locations. Uses a mapping object to match old hash values to new URLs and performs client-side redirection.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function () {\n    var anchorMap = {\n        \"jenkins-integration\": \"/best-practices/continuous-integration/jenkins/\",\n        \"circleci-integration\": \"/best-practices/continuous-integration/circle-ci/\",\n        \"travis-integration\": \"/best-practices/continuous-integration/travis/\",\n        \"bamboo-integration\": \"/best-practices/continuous-integration/bamboo/\",\n        \"gitlab-ci-integration\": \"/best-practices/continuous-integration/gitlab/\",\n        \"visual-studio-team-services\": \"/best-practices/continuous-integration/azure-devops/\",\n        \"nevercode-integration\": \"/best-practices/continuous-integration/nevercode/\",\n        \"codebuild-integration\": \"/best-practices/continuous-integration/codebuild/\"\n    }\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Running parallel lanes with custom socket ports\nDESCRIPTION: Command line syntax for specifying a custom socket port when running Fastlane lanes in parallel.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfastlane [lane] --swift_server_port [socket port]\n```\n\n----------------------------------------\n\nTITLE: Running update_keychain_access_groups Action from CLI\nDESCRIPTION: This command-line example shows how to run the update_keychain_access_groups action directly from the terminal using fastlane run. It demonstrates passing parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_keychain_access_groups.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_keychain_access_groups parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Helper Files with Fastlane\nDESCRIPTION: Command to update the SnapshotHelper.swift files to the latest version when Fastlane snapshot notifies about required updates.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane snapshot update\n```\n\n----------------------------------------\n\nTITLE: Running update_project_code_signing Action from CLI\nDESCRIPTION: Command to run the update_project_code_signing action directly from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_code_signing.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run update_project_code_signing\n```\n\n----------------------------------------\n\nTITLE: Displaying get_provisioning_profile Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the get_provisioning_profile action in the terminal using fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_provisioning_profile.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action get_provisioning_profile\n```\n\n----------------------------------------\n\nTITLE: Using Silver Frame Version\nDESCRIPTION: Command to use silver version of device frames\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit silver\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of hg_push with Custom Parameters in Ruby\nDESCRIPTION: Shows how to use the hg_push action with custom parameters, specifying a destination repository and forcing the push operation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_push.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nhg_push(\n  destination: \"ssh://hg@repohost.com/owner/repo\",\n  force: true\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Disabling Services in Fastlane Produce\nDESCRIPTION: Command to display all available options for disabling various app services and capabilities using the 'produce disable_services' command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce disable_services --help\n```\n\n----------------------------------------\n\nTITLE: Uploading macOS Package File\nDESCRIPTION: Command to specify a package file path for macOS app submissions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane deliver --pkg \"MacApp.pkg\"\n```\n\n----------------------------------------\n\nTITLE: Viewing update_code_signing_settings Documentation in Terminal\nDESCRIPTION: This snippet shows how to display the documentation for the update_code_signing_settings action directly in the terminal using the fastlane action command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_code_signing_settings.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action update_code_signing_settings\n```\n\n----------------------------------------\n\nTITLE: Verbose Output for pod_lib_lint in Ruby\nDESCRIPTION: Shows how to enable verbose output when using pod_lib_lint for more detailed console information.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/pod_lib_lint.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Allow output detail in console\npod_lib_lint(verbose: true)\n```\n\n----------------------------------------\n\nTITLE: Displaying SSH Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the SSH action in the terminal using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ssh.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action ssh\n```\n\n----------------------------------------\n\nTITLE: Running Trainer Action from CLI\nDESCRIPTION: Command to run the trainer action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/trainer.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run trainer\n```\n\n----------------------------------------\n\nTITLE: Creating Proc Objects with Proc Literal Notation in Ruby\nDESCRIPTION: Shows how to create Proc objects using the -> literal notation for use with fastlane action callbacks and verification blocks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nverify_block = ->(value) { ... }\n```\n\n----------------------------------------\n\nTITLE: Enabling Tab Auto-Complete for Fastlane Lane Names\nDESCRIPTION: This command enables tab auto-completion for Fastlane lane names in supported shells (bash, zsh, fish).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane enable_auto_complete\n```\n\n----------------------------------------\n\nTITLE: Running ensure_env_vars Action from CLI in fastlane\nDESCRIPTION: This code snippet shows how to run the ensure_env_vars action directly from the command line using fastlane. It demonstrates the syntax for running the action and passing parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_env_vars.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ensure_env_vars\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ensure_env_vars parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Snapshot in Swift UI Tests\nDESCRIPTION: Setup code required in Swift UI Tests to initialize snapshot functionality. Should be placed in the setUp() method of the test class.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n```\n\n----------------------------------------\n\nTITLE: Running Frame Screenshots with Parameters\nDESCRIPTION: Example showing how to pass parameters when running frame_screenshots from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run frame_screenshots parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Match Action with Parameters\nDESCRIPTION: Example showing how to pass parameters to the match action when running it directly from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run match parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Executing clean_cocoapods_cache as a One-Off Command\nDESCRIPTION: Command to run the clean_cocoapods_cache action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_cocoapods_cache.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run clean_cocoapods_cache\n```\n\n----------------------------------------\n\nTITLE: Running git_tag_exists Action with Parameters\nDESCRIPTION: This command demonstrates how to run the git_tag_exists action from the CLI while passing parameters. It uses the colon symbol to separate parameter names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_tag_exists.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run git_tag_exists parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Basic Test Command in Fastlane CLI\nDESCRIPTION: Basic command to execute tests using Fastlane's run_tests action from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run run_tests\n```\n\n----------------------------------------\n\nTITLE: Running xcversion Action with Parameters from Terminal\nDESCRIPTION: Command to run the xcversion action from the terminal CLI with specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcversion.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcversion parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying create_pull_request Action Documentation\nDESCRIPTION: Command to display the full documentation for the create_pull_request action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_pull_request.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action create_pull_request\n```\n\n----------------------------------------\n\nTITLE: Sample Pluginfile for Fastlane\nDESCRIPTION: Provides an example of a Fastlane Pluginfile, which is used to specify plugin dependencies. This file is typically auto-generated by Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/plugins-troubleshooting.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'\n```\n\n----------------------------------------\n\nTITLE: Showing println Documentation in Terminal\nDESCRIPTION: Command to display the complete documentation for the println action in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/println.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action println\n```\n\n----------------------------------------\n\nTITLE: CLI Usage for Import From Git\nDESCRIPTION: Command to run the import_from_git action directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_from_git.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run import_from_git\n```\n\n----------------------------------------\n\nTITLE: Viewing hg_ensure_clean_status documentation in terminal\nDESCRIPTION: Command to display the documentation for the hg_ensure_clean_status action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_ensure_clean_status.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action hg_ensure_clean_status\n```\n\n----------------------------------------\n\nTITLE: CLI Documentation Command\nDESCRIPTION: Command to show the number_of_commits action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/number_of_commits.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action number_of_commits\n```\n\n----------------------------------------\n\nTITLE: Running appetize_viewing_url_generator with Parameters\nDESCRIPTION: Example showing how to pass parameters when running the appetize_viewing_url_generator action from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appetize_viewing_url_generator.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run appetize_viewing_url_generator parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Submit for Review\nDESCRIPTION: Setting to automatically submit the app for review after uploading metadata/binary.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nsubmit_for_review(true)\n```\n\n----------------------------------------\n\nTITLE: Showing skip_docs documentation in terminal\nDESCRIPTION: Command to display the documentation for the skip_docs action directly in the terminal. This helps users understand the action's functionality without leaving their development environment.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/skip_docs.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action skip_docs\n```\n\n----------------------------------------\n\nTITLE: Running hg_add_tag with Parameters\nDESCRIPTION: Example of running hg_add_tag from the terminal with custom parameters, demonstrating the syntax for passing values to parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_add_tag.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run hg_add_tag parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying build_ios_app Documentation\nDESCRIPTION: Command to show the documentation for the build_ios_app action in terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_19\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action build_ios_app\n```\n\n----------------------------------------\n\nTITLE: Viewing upload_symbols_to_crashlytics Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the upload_symbols_to_crashlytics action directly in the terminal, providing a quick reference for its parameters and usage.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_crashlytics.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action upload_symbols_to_crashlytics\n```\n\n----------------------------------------\n\nTITLE: Copying Spaceship Logs to Clipboard in Ruby\nDESCRIPTION: Example of using spaceship_logs to find logs and copy their contents to the clipboard.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nspaceship_logs(\n  copy_to_clipboard: true\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Splunk MINT Upload\nDESCRIPTION: Command line instructions for running the splunkmint action directly from the terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/splunkmint.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run splunkmint\n```\n\n----------------------------------------\n\nTITLE: Running skip_docs with parameters\nDESCRIPTION: Example of how to run the skip_docs action with parameters from the command line. This demonstrates the syntax for passing parameters to any Fastlane action, though skip_docs itself doesn't accept parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/skip_docs.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run skip_docs parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running the Import Action Documentation Command\nDESCRIPTION: This command shows the documentation for the import action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action import\n```\n\n----------------------------------------\n\nTITLE: Deleting Keychain by Path in Ruby\nDESCRIPTION: Shows how to delete a keychain by specifying its full path in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/delete_keychain.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndelete_keychain(keychain_path: \"/keychains/project.keychain\")\n```\n\n----------------------------------------\n\nTITLE: Running ensure_bundle_exec from CLI\nDESCRIPTION: Command to run the ensure_bundle_exec action directly from the command line without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_bundle_exec.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run ensure_bundle_exec\n```\n\n----------------------------------------\n\nTITLE: Displaying xcversion Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the xcversion action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcversion.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xcversion\n```\n\n----------------------------------------\n\nTITLE: Running Installr Action from CLI\nDESCRIPTION: Example of running the installr action directly from the command line interface without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/installr.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run installr\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to team_id Action via CLI\nDESCRIPTION: This example demonstrates how to pass parameters to the team_id action when running it from the command line interface. It uses the colon syntax to specify parameter names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/team_id.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run team_id parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Documentation Command\nDESCRIPTION: Command to show cocoapods action documentation in terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cocoapods.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action cocoapods\n```\n\n----------------------------------------\n\nTITLE: Ignoring Fastlane Version Bump Commits in Bamboo\nDESCRIPTION: Regular expression pattern to exclude commit messages made by Fastlane during version bumping from triggering Bamboo builds. This pattern matches commit messages containing the phrase 'Build Version bump by fastlane'.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/bamboo.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\n^.*Build Version bump by fastlane.*$\n```\n\n----------------------------------------\n\nTITLE: Running min_fastlane_version with Parameters from Command Line\nDESCRIPTION: Command to execute the min_fastlane_version action from the terminal with custom parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/min_fastlane_version.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run min_fastlane_version parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Printing Spaceship Logs Content and Paths in Ruby\nDESCRIPTION: Example of using spaceship_logs to find logs and print both their contents and file paths.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nspaceship_logs(\n  print_contents: true,\n  print_paths: true\n)\n```\n\n----------------------------------------\n\nTITLE: View Action Documentation Command\nDESCRIPTION: Command to display the full documentation for this action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store_internal_app_sharing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action upload_to_play_store_internal_app_sharing\n```\n\n----------------------------------------\n\nTITLE: Basic XCClean Usage in Ruby\nDESCRIPTION: Basic example of using the xcclean command in a Fastfile to clean an Xcode project\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcclean.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcclean\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Delete Keychain Action\nDESCRIPTION: Terminal command to view the delete_keychain action documentation in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/delete_keychain.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action delete_keychain\n```\n\n----------------------------------------\n\nTITLE: Viewing xcode_install Documentation\nDESCRIPTION: Command to display the documentation for the xcode_install action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_install.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action xcode_install\n```\n\n----------------------------------------\n\nTITLE: Generating New Fastlane Action in Ruby\nDESCRIPTION: This command generates a new custom action for Fastlane. It creates a Ruby file in the 'fastlane/actions' directory with the specified action name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/create-action.md#2025-04-17_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nfastlane new_action\n```\n\n----------------------------------------\n\nTITLE: Updating Keychain Access Groups in Entitlements File using Ruby\nDESCRIPTION: This code snippet demonstrates how to use the update_keychain_access_groups action in a fastlane lane. It updates the keychain access groups in a specified entitlements file with new identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_keychain_access_groups.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_keychain_access_groups(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  identifiers: [\"your.keychain.access.groups.identifiers\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Running build_ios_app from CLI\nDESCRIPTION: Basic command to run the build_ios_app action directly from terminal without Fastfile\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_20\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run build_ios_app\n```\n\n----------------------------------------\n\nTITLE: CLI Command Execution\nDESCRIPTION: Shows how to run the version_get_podspec action directly from the command line using fastlane run command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_get_podspec.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run version_get_podspec\n```\n\n----------------------------------------\n\nTITLE: Updating snapshot Helper Files\nDESCRIPTION: Command to update the SnapshotHelper.swift files used by snapshot.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nfastlane snapshot update\n```\n\n----------------------------------------\n\nTITLE: Running DeployGate action from CLI with parameters\nDESCRIPTION: This command demonstrates how to run the deploygate action from the command line interface with specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deploygate.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run deploygate parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Viewing xcode_server_get_assets Documentation\nDESCRIPTION: This command shows how to display the documentation for the xcode_server_get_assets action directly in the terminal using fastlane's action command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_server_get_assets.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action xcode_server_get_assets\n```\n\n----------------------------------------\n\nTITLE: Running xctool with Parameters from Command Line\nDESCRIPTION: Example of running the xctool action with parameters directly from the terminal using the fastlane run command with parameter syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctool.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xctool parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Screengrab Alias Usage in Ruby\nDESCRIPTION: Alternative syntax for capturing Android screenshots using the screengrab alias\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nscreengrab # alias for \"capture_android_screenshots\"\n```\n\n----------------------------------------\n\nTITLE: Suppressing Command Execution Output in Gradle with Ruby\nDESCRIPTION: Example demonstrating how to prevent the output generated by running the gradle command from being printed to the console.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  # ...\n  print_command_output: false\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Array Parameters in Fastlane Actions\nDESCRIPTION: Shows how to define parameters that accept arrays, using the Array type in ConfigItem. This allows parameters to accept comma-separated strings that get converted to arrays automatically.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nFastlaneCore::ConfigItem.new(\n  key: :files,\n  env_name: \"MY_NEW_ACTION_FILES\",\n  description: \"One or more files to operate on\",\n  type: Array,\n  optional: false\n)\n```\n\n----------------------------------------\n\nTITLE: CLI Command for reset_simulator_contents\nDESCRIPTION: Command line example showing how to run the reset_simulator_contents action directly from the terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_simulator_contents.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action reset_simulator_contents\n```\n\n----------------------------------------\n\nTITLE: Running the Import Action from CLI\nDESCRIPTION: This command demonstrates how to run the import action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run import\n```\n\n----------------------------------------\n\nTITLE: Running Delete Keychain via CLI\nDESCRIPTION: Commands to execute the delete_keychain action directly from the terminal, including an example with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/delete_keychain.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run delete_keychain\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run delete_keychain parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic SPM Usage in Ruby\nDESCRIPTION: Demonstrates the simplest usage of the 'spm' action in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spm.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nspm\n```\n\n----------------------------------------\n\nTITLE: Viewing Get Build Number Documentation\nDESCRIPTION: Shows the command to display the full documentation for the get_build_number action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action get_build_number\n```\n\n----------------------------------------\n\nTITLE: Displaying Nexus Upload Documentation with Fastlane\nDESCRIPTION: Command-line instruction to display the documentation for the nexus_upload action in the terminal using the fastlane action command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/nexus_upload.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action nexus_upload\n```\n\n----------------------------------------\n\nTITLE: Using Game Subcategories in App Store Submissions\nDESCRIPTION: List of available game subcategories that can be used when categorizing games in App Store Connect. Includes both MZGenre format and GAMES_* format constants.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n- `MZGenre.Action`\n- `MZGenre.Adventure`\n- `MZGenre.Arcade`\n- `MZGenre.Board`\n- `MZGenre.Card`\n- `MZGenre.Casino`\n- `MZGenre.Dice`\n- `MZGenre.Educational`\n- `MZGenre.Family`\n- `MZGenre.Music`\n- `MZGenre.Puzzle`\n- `MZGenre.Racing`\n- `MZGenre.RolePlaying`\n- `MZGenre.Simulation`\n- `MZGenre.Sports`\n- `MZGenre.Strategy`\n- `MZGenre.Trivia`\n- `MZGenre.Word`\n\n- `GAMES_SPORTS`\n- `GAMES_WORD`\n- `GAMES_MUSIC`\n- `GAMES_ADVENTURE`\n- `GAMES_ACTION`\n- `GAMES_ROLE_PLAYING`\n- `GAMES_CASUAL`\n- `GAMES_BOARD`\n- `GAMES_TRIVIA`\n- `GAMES_CARD`\n- `GAMES_PUZZLE`\n- `GAMES_CASINO`\n- `GAMES_STRATEGY`\n- `GAMES_SIMULATION`\n- `GAMES_RACING`\n- `GAMES_FAMILY`\n```\n\n----------------------------------------\n\nTITLE: Running Notify Action with Parameters from CLI\nDESCRIPTION: Example showing how to pass parameters to the notify action when running it from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notify.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run notify parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running upload_symbols_to_sentry with Parameters\nDESCRIPTION: Command line instruction showing how to pass parameters when running the upload_symbols_to_sentry action directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_symbols_to_sentry.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run upload_symbols_to_sentry parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running team_name Action from CLI\nDESCRIPTION: These commands demonstrate how to run the team_name action directly from the command line interface. The first example shows a basic run, while the second shows how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/team_name.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run team_name\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run team_name parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running get_info_plist_value Action\nDESCRIPTION: Command line instructions for running the get_info_plist_value action directly from terminal without adding it to Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_info_plist_value.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action get_info_plist_value\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run get_info_plist_value\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run get_info_plist_value parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing spaceship_logs Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the spaceship_logs action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action spaceship_logs\n```\n\n----------------------------------------\n\nTITLE: Running clean_cocoapods_cache from Terminal\nDESCRIPTION: Command to show the documentation for the clean_cocoapods_cache action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_cocoapods_cache.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action clean_cocoapods_cache\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Release Information in Ruby\nDESCRIPTION: This snippet demonstrates how to use the get_github_release action to retrieve information about a specific GitHub release. It specifies the repository URL and version, then prints the release name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_github_release.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrelease = get_github_release(url: \"fastlane/fastlane\", version: \"1.0.0\")\nputs release[\"name\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Fastlane Action Documentation\nDESCRIPTION: Command to show the documentation for the modify_services action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/modify_services.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action modify_services\n```\n\n----------------------------------------\n\nTITLE: CLI Command for set_build_number_repository\nDESCRIPTION: Command to show the documentation for the set_build_number_repository action in the terminal. This is helpful for quick reference when using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_build_number_repository.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action set_build_number_repository\n```\n\n----------------------------------------\n\nTITLE: Mailgun CLI Usage with Parameters\nDESCRIPTION: Example of running the mailgun action from the command line while passing specific parameters. Shows the proper syntax for parameter passing in the CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/mailgun.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run mailgun parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Frame Screenshots Documentation in Terminal\nDESCRIPTION: Command to display the frame_screenshots action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action frame_screenshots\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running Danger with Parameters\nDESCRIPTION: Command-line example showing how to run the danger action with custom parameters directly from terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/danger.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run danger parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Example of running update_icloud_container_identifiers from command line with parameter values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_icloud_container_identifiers.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_icloud_container_identifiers parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running fastlane Release Lane\nDESCRIPTION: This command shows how to run the release lane in fastlane from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/appstore-deployment.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane release\n```\n\n----------------------------------------\n\nTITLE: Running Installr Action with Parameters from CLI\nDESCRIPTION: Example of running the installr action from the command line interface with parameters passed directly.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/installr.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run installr parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Opt Out Usage Action in Fastlane CLI\nDESCRIPTION: This example shows how to pass parameters to the opt_out_usage action when running it from the command line. It uses the colon syntax to specify parameter names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_usage.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run opt_out_usage parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running DotGPG Environment Action from CLI\nDESCRIPTION: Commands demonstrating how to run the dotgpg_environment action directly from the command line, including examples of parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/dotgpg_environment.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run dotgpg_environment\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run dotgpg_environment parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Fastlane Commands to Avoid When Using Carthage in Bamboo\nDESCRIPTION: Ruby code snippets showing Fastlane commands that should be avoided when using the two-plan approach with Carthage in Bamboo. These commands would either fail the build or delete the Carthage directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/bamboo.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nreset_git_repo(force: true)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nensure_git_status_clean\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Example showing how to pass parameters when running the action from terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_branch.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run ensure_git_branch parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running hg_ensure_clean_status with parameters from CLI\nDESCRIPTION: Command showing how to run the hg_ensure_clean_status action with parameters from the terminal, although this specific action doesn't have any parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_ensure_clean_status.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run hg_ensure_clean_status parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Plugin from GitHub in Ruby\nDESCRIPTION: This snippet shows how to use the install_xcode_plugin action to install an Xcode plugin from a GitHub repository. It requires the github parameter to be set to the GitHub repository URL of the plugin.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/install_xcode_plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ninstall_xcode_plugin(github: \"https://github.com/contentful/ContentfulXcodePlugin\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation for hg_add_tag in Terminal\nDESCRIPTION: Command to show the documentation for the hg_add_tag action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_add_tag.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action hg_add_tag\n```\n\n----------------------------------------\n\nTITLE: CLI Command for xcode_install Action\nDESCRIPTION: Terminal command to run the xcode_install action directly from the command line without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_install.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xcode_install\n```\n\n----------------------------------------\n\nTITLE: CLI Parameters Example\nDESCRIPTION: Demonstrates passing parameters via command line\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run ensure_no_debug_code parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running capture_screenshots Action with Parameters\nDESCRIPTION: Shows how to run the capture_screenshots action with custom parameters passed via the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run capture_screenshots parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Debug Check\nDESCRIPTION: Uses regex to check for DEBUG definitions and NSLog calls in Objective-C files\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nensure_no_debug_code(text: \"(^#define DEBUG|NSLog)\",\n path: \"./lib\",\n      extension: \"m\")\n```\n\n----------------------------------------\n\nTITLE: Running Twitter Action from CLI\nDESCRIPTION: Commands showing how to run the Twitter action directly from command line, including example of passing parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/twitter.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run twitter\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run twitter parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running gcovr Action from Command Line\nDESCRIPTION: This example shows how to run the gcovr action directly from the command line using fastlane run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gcovr.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run gcovr\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Using copy_artifacts\nDESCRIPTION: Command line example showing how to run the copy_artifacts action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/copy_artifacts.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run copy_artifacts\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Unused Gems in Ruby\nDESCRIPTION: This command removes unused gems from the system to potentially improve Fastlane startup time.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n[sudo] gem cleanup\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Fastlane Documentation\nDESCRIPTION: Command to display the import_from_git action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import_from_git.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action import_from_git\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to clean_cocoapods_cache via CLI\nDESCRIPTION: Example showing how to pass parameters to the clean_cocoapods_cache action when running it directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_cocoapods_cache.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run clean_cocoapods_cache parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Fastfile Deliver Integration\nDESCRIPTION: Simple integration of deliver action in a Fastfile\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndeliver\n```\n\n----------------------------------------\n\nTITLE: Getting information about the upload_to_play_store action in fastlane\nDESCRIPTION: Command to display documentation for the 'upload_to_play_store' action in fastlane, showing all available parameters and options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/release-deployment.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action upload_to_play_store\n```\n\n----------------------------------------\n\nTITLE: Running xcversion Action from Terminal\nDESCRIPTION: Command to run the xcversion action from the terminal CLI instead of in a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcversion.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcversion\n```\n\n----------------------------------------\n\nTITLE: CLI Command for ERB Action\nDESCRIPTION: Command line interface examples for running the ERB action directly from terminal, including how to pass parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/erb.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action erb\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run erb\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run erb parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Git Add Single File Type with Shell Escape Disabled in Ruby\nDESCRIPTION: Adds all .txt files to Git using a wildcard, with shell escaping disabled.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_add.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ngit_add(path: \"*.txt\", shell_escape: false)\n```\n\n----------------------------------------\n\nTITLE: Running backup_file with parameters from the command line\nDESCRIPTION: This command demonstrates how to execute the backup_file action with parameters directly from the terminal, passing the path parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/backup_file.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run backup_file parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command Example for Version Code Retrieval\nDESCRIPTION: Command line example showing how to run the google_play_track_version_codes action directly from terminal without using a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_version_codes.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run google_play_track_version_codes\n```\n\n----------------------------------------\n\nTITLE: Basic Git Submodule Update in Ruby\nDESCRIPTION: Executes a basic git submodule update command without any options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_submodule_update.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngit_submodule_update\n```\n\n----------------------------------------\n\nTITLE: Deleting Keychain by Name in Ruby\nDESCRIPTION: Demonstrates how to delete a keychain using its name parameter in Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/delete_keychain.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndelete_keychain(name: \"KeychainName\")\n```\n\n----------------------------------------\n\nTITLE: Getting help for merchant association with fastlane produce\nDESCRIPTION: Command to view all available parameters for associating apps with Apple Pay merchant identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_merchant --help\n```\n\n----------------------------------------\n\nTITLE: CLI Execution Command\nDESCRIPTION: Command to run cocoapods action directly from terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/cocoapods.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run cocoapods\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to add_extra_platforms via CLI\nDESCRIPTION: This command shows how to run the add_extra_platforms action with parameters directly from the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_extra_platforms.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run add_extra_platforms parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Rocket Action with Parameters via CLI\nDESCRIPTION: Example of how to run the rocket action with parameters from the terminal. The action itself doesn't take parameters, but this shows the syntax for actions that do.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rocket.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run rocket parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Application with Produce in Bash\nDESCRIPTION: This command runs the 'produce' action to create a new iOS application. It uses default settings and prompts for any required information not provided.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane produce\n```\n\n----------------------------------------\n\nTITLE: Viewing Fastlane Action Documentation\nDESCRIPTION: Command to display the build_and_upload_to_appetize action documentation in the terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_and_upload_to_appetize.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action build_and_upload_to_appetize\n```\n\n----------------------------------------\n\nTITLE: Viewing Installr Action Documentation\nDESCRIPTION: Command to display the installr action documentation directly in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/installr.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action installr\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to build_mac_app Action via CLI\nDESCRIPTION: Example of how to pass parameters to the build_mac_app action when running it from the command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_19\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run build_mac_app parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Framing Android Screenshots\nDESCRIPTION: Command to specifically frame Android screenshots\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane frameit android\n```\n\n----------------------------------------\n\nTITLE: Multiple Extension Check\nDESCRIPTION: Checks for merge conflict markers across multiple file types\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_no_debug_code.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nensure_no_debug_code(text: \"<<<<<<\",\n     extensions: [\"m\", \"swift\", \"java\"])\n```\n\n----------------------------------------\n\nTITLE: Displaying Verify Build Action Documentation in Terminal\nDESCRIPTION: Command to show the complete documentation for the verify_build action directly in the terminal. This provides quick access to all parameters and usage examples.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_build.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action verify_build\n```\n\n----------------------------------------\n\nTITLE: Displaying build_mac_app Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the build_mac_app action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action build_mac_app\n```\n\n----------------------------------------\n\nTITLE: Showing copy_artifacts Documentation in Terminal\nDESCRIPTION: Command to display the full documentation for the copy_artifacts action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/copy_artifacts.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action copy_artifacts\n```\n\n----------------------------------------\n\nTITLE: Updating iCloud Container Identifiers with Fastlane\nDESCRIPTION: Example showing how to update iCloud container identifiers in an entitlements file. Takes a path to the entitlements file and an array of container identifiers as parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_icloud_container_identifiers.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_icloud_container_identifiers(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  icloud_container_identifiers: [\"iCloud.com.companyname.appname\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Trainer Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the trainer action in the terminal using Fastlane's CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/trainer.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action trainer\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Apple Pay Merchant Commands in Fastlane Produce\nDESCRIPTION: Command to display the help information for the 'produce merchant' command, which provides details on all available parameters for creating Apple Pay merchants.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_14\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce merchant --help\n```\n\n----------------------------------------\n\nTITLE: Uploading Pre-Generated App Privacy Details via CLI\nDESCRIPTION: This CLI command uploads previously generated app privacy details from a JSON file to App Store Connect. It specifies the path to the JSON file containing the privacy details along with authentication parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nfastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\" \\\n  json_path:\"fastlane/app_privacy_details.json\"\n```\n\n----------------------------------------\n\nTITLE: View Action Documentation\nDESCRIPTION: Command to display the setup_travis action documentation in terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_travis.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action setup_travis\n```\n\n----------------------------------------\n\nTITLE: CLI Command for SCP Action\nDESCRIPTION: Terminal command to run the SCP action directly from CLI without adding it to Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/scp.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run scp\n```\n\n----------------------------------------\n\nTITLE: Using Stickers Subcategories in App Store Submissions\nDESCRIPTION: List of available stickers subcategories that can be used when categorizing sticker packs in App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_33\n\nLANGUAGE: markdown\nCODE:\n```\n- `STICKERS_PLACES_AND_OBJECTS`\n- `STICKERS_EMOJI_AND_EXPRESSIONS`\n- `STICKERS_CELEBRATIONS`\n- `STICKERS_CELEBRITIES`\n- `STICKERS_MOVIES_AND_TV`\n- `STICKERS_SPORTS_AND_ACTIVITIES`\n- `STICKERS_EATING_AND_DRINKING`\n- `STICKERS_CHARACTERS`\n- `STICKERS_ANIMALS`\n- `STICKERS_FASHION`\n- `STICKERS_ART`\n- `STICKERS_GAMING`\n- `STICKERS_KIDS_AND_FAMILY`\n- `STICKERS_PEOPLE`\n- `STICKERS_MUSIC`\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Fastlane Documentation\nDESCRIPTION: Command to display the create_app_on_managed_play_store action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_on_managed_play_store.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane action create_app_on_managed_play_store\n```\n\n----------------------------------------\n\nTITLE: Getting help for enabling services with fastlane produce\nDESCRIPTION: Command to view all available options for enabling services with the fastlane produce tool.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce enable_services --help\n```\n\n----------------------------------------\n\nTITLE: Display Notarize Action Documentation in Terminal\nDESCRIPTION: Command to show documentation for the notarize action directly in the terminal using fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notarize.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action notarize\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Pod from Cache in Ruby\nDESCRIPTION: An example showing how to remove a specific pod named 'CACHED_POD' from the CocoaPods cache using the name parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_cocoapods_cache.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclean_cocoapods_cache(name: \"CACHED_POD\")\n```\n\n----------------------------------------\n\nTITLE: Running add_extra_platforms from CLI\nDESCRIPTION: This command demonstrates how to run the add_extra_platforms action directly from the command line without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_extra_platforms.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run add_extra_platforms\n```\n\n----------------------------------------\n\nTITLE: Running hg_ensure_clean_status from CLI\nDESCRIPTION: Command to run the hg_ensure_clean_status action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_ensure_clean_status.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run hg_ensure_clean_status\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Version Bump Commit\nDESCRIPTION: Command line interface example for running the hg_commit_version_bump action directly from terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_commit_version_bump.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action hg_commit_version_bump\n```\n\n----------------------------------------\n\nTITLE: Updating Urban Airship Configuration in Ruby\nDESCRIPTION: Example showing how to update Urban Airship configuration by setting production keys and secrets in the AirshipConfig.plist file. This allows for runtime configuration of the Urban Airship SDK.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_urban_airship_configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nupdate_urban_airship_configuration(\n  plist_path: \"AirshipConfig.plist\",\n  production_app_key: \"PRODKEY\",\n  production_app_secret: \"PRODSECRET\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Screengrab Ruby Gem\nDESCRIPTION: Command to install the fastlane gem which includes the screengrab functionality.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install fastlane\n```\n\n----------------------------------------\n\nTITLE: Running xcexport via CLI\nDESCRIPTION: Command to run the xcexport action directly from the terminal using fastlane run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcexport.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xcexport\n```\n\n----------------------------------------\n\nTITLE: Displaying Supply Action Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the 'supply' action directly in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/supply.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action supply\n```\n\n----------------------------------------\n\nTITLE: Initializing fastlane with Swift configuration (Beta)\nDESCRIPTION: Command to initialize fastlane with Swift configuration. This is a beta feature that sets up the Fastfile in Swift instead of Ruby.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/setup.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane init swift\n```\n\n----------------------------------------\n\nTITLE: Running Nexus Upload from CLI with Fastlane\nDESCRIPTION: Command-line instructions for running the nexus_upload action directly from the terminal without editing the Fastfile. This example shows the basic command and how to pass parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/nexus_upload.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run nexus_upload\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run nexus_upload parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running download_universal_apk_from_google_play action from CLI\nDESCRIPTION: Command to execute the download_universal_apk_from_google_play action directly from the terminal without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_universal_apk_from_google_play.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download_universal_apk_from_google_play\n```\n\n----------------------------------------\n\nTITLE: Running lcov Action from Command Line\nDESCRIPTION: This command shows how to run the lcov action directly from the command line using fastlane. It demonstrates passing parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lcov.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run lcov parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running clean_build_artifacts with Parameters from CLI in Ruby\nDESCRIPTION: This snippet demonstrates how to run the clean_build_artifacts action from the CLI with parameters. It shows the syntax for passing primitive types as parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/clean_build_artifacts.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run clean_build_artifacts parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Example of running the make_changelog_from_jenkins action from the terminal with custom parameters using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/make_changelog_from_jenkins.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run make_changelog_from_jenkins parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing say Action Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the \"say\" action in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/say.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action say\n```\n\n----------------------------------------\n\nTITLE: Setting Automatic Release Option\nDESCRIPTION: Control whether the app should be released to all users automatically once approved.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nautomatic_release(true)\n# or\nautomatic_release(false)\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Build Number in Ruby\nDESCRIPTION: Sets the build number to a specific value (75) by passing the build_number parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_build_number(\n  build_number: \"75\" # set a specific number\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing Action Documentation\nDESCRIPTION: Command to display the documentation for update_icloud_container_identifiers action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_icloud_container_identifiers.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action update_icloud_container_identifiers\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation for push_to_git_remote\nDESCRIPTION: Command to show the documentation for the push_to_git_remote action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_to_git_remote.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action push_to_git_remote\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation with mkdocs\nDESCRIPTION: Command to locally preview documentation changes using mkdocs serve. This launches a local web server that renders the documentation site with your changes.\nSOURCE: https://github.com/fastlane/docs/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Installing Jenkins via Homebrew on macOS\nDESCRIPTION: Command to install Jenkins LTS version on macOS using Homebrew package manager.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/jenkins.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nbrew update && brew install jenkins-lts\n```\n\n----------------------------------------\n\nTITLE: Running download_app_privacy_details_from_app_store via CLI\nDESCRIPTION: Demonstrates how to run the action directly from the command line without editing the Fastfile. This example shows the CLI command format for one-off executions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_app_privacy_details_from_app_store.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download_app_privacy_details_from_app_store\n```\n\n----------------------------------------\n\nTITLE: Carthage CLI Execution Command\nDESCRIPTION: Command to run Carthage action directly from terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/carthage.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run carthage\n```\n\n----------------------------------------\n\nTITLE: Running update_app_identifier Action from CLI\nDESCRIPTION: This command demonstrates how to run the update_app_identifier action directly from the command line interface (CLI) using fastlane run.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_identifier.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_app_identifier\n```\n\n----------------------------------------\n\nTITLE: Installing Fastlane Using RubyGems or Homebrew\nDESCRIPTION: Commands to install Fastlane either via RubyGems (with sudo privileges) or alternatively using Homebrew package manager.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/setup-fastlane-header.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Version Action from CLI\nDESCRIPTION: Command to run the ruby_version action directly from the command line without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ruby_version.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run ruby_version\n```\n\n----------------------------------------\n\nTITLE: Using hg_ensure_clean_status in Ruby for fastlane\nDESCRIPTION: A basic example of how to use the hg_ensure_clean_status action in a Fastfile. This action checks if the Mercurial repository is clean and will raise an exception if there are uncommitted changes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_ensure_clean_status.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhg_ensure_clean_status\n```\n\n----------------------------------------\n\nTITLE: Viewing Podio Item Action Documentation\nDESCRIPTION: This command shows how to display the documentation for the podio_item action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/podio_item.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action podio_item\n```\n\n----------------------------------------\n\nTITLE: Extracting Version from Podspec using read_podspec in Ruby\nDESCRIPTION: This example shows how to read a podspec file in the current directory, extract its version, and output it. This is useful when basing release workflows on a version stored only in the podspec.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/read_podspec.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nspec = read_podspec\nversion = spec[\"version\"]\nputs \"Using Version #{version}\"\n```\n\n----------------------------------------\n\nTITLE: Updating SSL Certificates for RVM in Ruby\nDESCRIPTION: This command updates SSL certificates for RVM (Ruby Version Manager) to resolve SSL-related issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrvm osx-ssl-certs update all\n```\n\n----------------------------------------\n\nTITLE: Viewing Debug Action Documentation via CLI\nDESCRIPTION: Command to display the documentation for the debug action in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/debug.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action debug\n```\n\n----------------------------------------\n\nTITLE: Viewing Documentation for opt_out_crash_reporting Action\nDESCRIPTION: Command to display documentation for the opt_out_crash_reporting action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_crash_reporting.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action opt_out_crash_reporting\n```\n\n----------------------------------------\n\nTITLE: Running executable with lane parameter\nDESCRIPTION: Command line syntax for executing a specific lane with an SPM-built Fastlane executable.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmyExecutable lane myLane\n```\n\n----------------------------------------\n\nTITLE: Uploading dSYM to Apteligent using Fastlane in Ruby\nDESCRIPTION: Example demonstrating how to use the apteligent action in a Fastfile to upload a dSYM file to Apteligent (Crittercism). The example requires app_id and api_key parameters to authenticate with the Apteligent service.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/apteligent.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napteligent(\n  app_id: \"...\",\n  api_key: \"...\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running capture_screenshots Action from CLI\nDESCRIPTION: Demonstrates how to execute the capture_screenshots action directly from the command line without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run capture_screenshots\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running update_project_team\nDESCRIPTION: Command to run the update_project_team action directly from the terminal without adding it to your Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_team.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run update_project_team\n```\n\n----------------------------------------\n\nTITLE: Running lane_context Action from Terminal\nDESCRIPTION: This command demonstrates how to run the lane_context action directly from the terminal using Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lane_context.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run lane_context\n```\n\n----------------------------------------\n\nTITLE: Building iOS App with IPA Action in Ruby\nDESCRIPTION: Example of using the legacy 'ipa' action to build an iOS application. This demonstrates configuring workspace, scheme, cleaning, destination directory, and other parameters for app building and signing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ipa.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nipa(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  # (optionals)\n  clean: true, # This means \"Do Clean\". Cleans project before building (the default if not specified).\n  destination: \"path/to/dir\",      # Destination directory. Defaults to current directory.\n  ipa: \"my-app.ipa\",     # specify the name of the .ipa file to generate (including file extension)\n  xcargs: \"MY_ADHOC=0\",  # pass additional arguments to xcodebuild when building the app.\n  embed: \"my.mobileprovision\",     # Sign .ipa file with .mobileprovision\n  identity: \"MyIdentity\",# Identity to be used along with --embed\n  sdk: \"10.0\", # use SDK as the name or path of the base SDK when building the project.\n  archive: true# this means \"Do Archive\". Archive project after building (the default if not specified).\n)\n```\n\n----------------------------------------\n\nTITLE: Running XCClean from CLI\nDESCRIPTION: Commands for running xcclean directly from the command line, including examples of passing parameters\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcclean.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcclean\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcclean parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Proc Objects with Lambda in Ruby\nDESCRIPTION: Shows how to create Proc objects using the lambda operator for use with fastlane action callbacks and verification blocks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nverify_block = lambda do |value|\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Running opt_out_crash_reporting Action from CLI\nDESCRIPTION: Command to run the opt_out_crash_reporting action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_crash_reporting.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run opt_out_crash_reporting\n```\n\n----------------------------------------\n\nTITLE: Using println Action in Ruby to Print Messages\nDESCRIPTION: Example of using the println action (alias for puts) to print a simple message. This action supports iOS, Android, and Mac platforms and is authored by @KrauseFx.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/println.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nputs \"Hi there\"\n```\n\n----------------------------------------\n\nTITLE: Adding Screengrab Gradle Dependency\nDESCRIPTION: Java code snippet showing how to add the screengrab dependency to your Android project's build.gradle file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nandroidTestImplementation 'tools.fastlane:screengrab:x.x.x'\n```\n\n----------------------------------------\n\nTITLE: Running the Notify Action from CLI\nDESCRIPTION: Command to execute the notify action directly from the terminal without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notify.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run notify\n```\n\n----------------------------------------\n\nTITLE: Jira CLI Parameters Usage\nDESCRIPTION: Example of passing parameters to the Jira action via command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jira.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run jira parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running ChatWork Action from CLI\nDESCRIPTION: Commands showing how to run the ChatWork action directly from command line, including parameter passing syntax\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/chatwork.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run chatwork\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run chatwork parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Ruby System Version Check for Troubleshooting\nDESCRIPTION: Commands to switch to system Ruby using RVM and verify the Ruby version and location, which can help troubleshoot 'No applicable devices found' errors in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/common-issues.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ rvm use system\n$ ruby -v\nruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\n$ which ruby\n/usr/bin/ruby\n```\n\n----------------------------------------\n\nTITLE: Running skip_docs as a one-off command\nDESCRIPTION: Command to run the skip_docs action directly from the terminal as a one-off operation, without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/skip_docs.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run skip_docs\n```\n\n----------------------------------------\n\nTITLE: Installing ImageMagick Dependencies via Homebrew\nDESCRIPTION: Command to install required dependencies for ImageMagick, which is used by frameit for image manipulation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrew install libpng jpeg imagemagick\n```\n\n----------------------------------------\n\nTITLE: Displaying Ruby Version Action Documentation in Terminal\nDESCRIPTION: Command to display the complete documentation for the ruby_version action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ruby_version.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action ruby_version\n```\n\n----------------------------------------\n\nTITLE: Displaying Fastlane Action Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the fastlane_version action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/fastlane_version.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action fastlane_version\n```\n\n----------------------------------------\n\nTITLE: Viewing Default Platform Documentation\nDESCRIPTION: Command to display the documentation for the default_platform action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/default_platform.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action default_platform\n```\n\n----------------------------------------\n\nTITLE: Displaying Rubocop Action Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the Rubocop action in the terminal using Fastlane's CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rubocop.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action rubocop\n```\n\n----------------------------------------\n\nTITLE: Viewing verify_pod_keys Documentation (Command Line)\nDESCRIPTION: Command to display the documentation for the verify_pod_keys action directly in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_pod_keys.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action verify_pod_keys\n```\n\n----------------------------------------\n\nTITLE: CLI Run Command for Version Bump\nDESCRIPTION: Example of running hg_commit_version_bump directly from terminal with optional parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_commit_version_bump.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run hg_commit_version_bump\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run hg_commit_version_bump parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for Splunk MINT Upload\nDESCRIPTION: Example of running the splunkmint action from the command line with specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/splunkmint.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run splunkmint parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation for Register Device Action in Terminal\nDESCRIPTION: This command shows how to display the documentation for the register_device action directly in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_device.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action register_device\n```\n\n----------------------------------------\n\nTITLE: Displaying lane_context Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the lane_context action in the terminal using Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lane_context.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action lane_context\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running xcode_server_get_assets\nDESCRIPTION: This example shows how to run the xcode_server_get_assets action directly from the command line using fastlane's run command. It demonstrates both basic usage and how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_server_get_assets.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xcode_server_get_assets\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xcode_server_get_assets parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying HipChat Action Documentation\nDESCRIPTION: Shows the command to display the HipChat action documentation directly in the terminal. This is useful for quick reference of available parameters and options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hipchat.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action hipchat\n```\n\n----------------------------------------\n\nTITLE: Download dSYMs with Integer Build Number\nDESCRIPTION: Example showing how to download dSYMs for a specific version using an integer build number.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_dsyms.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndownload_dsyms(version: \"1.0.1\", build_number: 42)\n```\n\n----------------------------------------\n\nTITLE: Patch Version Increment in Ruby\nDESCRIPTION: Incrementing the patch version number using the bump_type parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_version_number(\n  bump_type: \"patch\" # Automatically increment patch version number\n)\n```\n\n----------------------------------------\n\nTITLE: Installing fastlane via System Ruby\nDESCRIPTION: Command to install fastlane using system Ruby and RubyGems. This method is not recommended for local development due to potential permission issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/installing-fastlane.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo gem install fastlane\n```\n\n----------------------------------------\n\nTITLE: Showing Documentation in Terminal\nDESCRIPTION: Command to display the full documentation for the make_changelog_from_jenkins action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/make_changelog_from_jenkins.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action make_changelog_from_jenkins\n```\n\n----------------------------------------\n\nTITLE: Running Trainer Action with Parameters\nDESCRIPTION: Command to run the trainer action with custom parameters passed directly in the CLI command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/trainer.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run trainer parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running Typetalk Action from Command Line\nDESCRIPTION: This command shows how to run the typetalk action directly from the command line using fastlane. It demonstrates the syntax for passing parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/typetalk.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run typetalk parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Basic copy_artifacts Usage with reset_git_repo in Ruby\nDESCRIPTION: Example of using copy_artifacts to preserve specific file types in a target directory, followed by resetting the git repository while excluding the artifacts directory.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/copy_artifacts.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncopy_artifacts(\n  target_path: \"artifacts\",\n  artifacts: [\"*.cer\", \"*.mobileprovision\", \"*.ipa\", \"*.dSYM.zip\", \"path/to/file.txt\", \"another/path/*.extension\"]\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude: \"artifacts\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Kids Age Rating Values in App Store Submissions\nDESCRIPTION: Kids age band values that can be specified for the 'kidsAgeBand' key in App Store Connect submissions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_36\n\nLANGUAGE: markdown\nCODE:\n```\n**Values**\n\n- `FIVE_AND_UNDER`\n- `SIX_TO_EIGHT`\n- `NINE_TO_ELEVEN`\n- `null`\n\n**Keys**\n\n- `kidsAgeBand`\n```\n\n----------------------------------------\n\nTITLE: Starting Jenkins Service on macOS\nDESCRIPTION: Command to start the Jenkins service using Homebrew services on macOS.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/jenkins.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nbrew services start jenkins-lts\n```\n\n----------------------------------------\n\nTITLE: Showing Mailgun Documentation in Terminal\nDESCRIPTION: Command to display the full documentation for the mailgun action directly in the terminal. Useful for quick reference without opening the web documentation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/mailgun.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action mailgun\n```\n\n----------------------------------------\n\nTITLE: Displaying plugin_scores Documentation in Terminal with Fastlane\nDESCRIPTION: Command to show the documentation for the plugin_scores action in the terminal using Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/plugin_scores.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action plugin_scores\n```\n\n----------------------------------------\n\nTITLE: Accessing Match Documentation in Terminal\nDESCRIPTION: Command to display the match action documentation directly in the terminal using fastlane's built-in help system.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action match\n```\n\n----------------------------------------\n\nTITLE: Viewing backup_file documentation in terminal\nDESCRIPTION: This command shows how to display the documentation for the backup_file action directly in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/backup_file.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action backup_file\n```\n\n----------------------------------------\n\nTITLE: Running IFTTT Action from CLI\nDESCRIPTION: Command to execute the ifttt action directly from the command line without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ifttt.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run ifttt\n```\n\n----------------------------------------\n\nTITLE: Viewing get_build_number_repository Documentation in Terminal\nDESCRIPTION: Command to display detailed documentation for the get_build_number_repository action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_build_number_repository.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action get_build_number_repository\n```\n\n----------------------------------------\n\nTITLE: Running verify_pod_keys from Terminal (Command Line)\nDESCRIPTION: How to run the verify_pod_keys action directly from the terminal. This is for one-off executions rather than including it in the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/verify_pod_keys.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run verify_pod_keys\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Platforms in Ruby with Fastlane\nDESCRIPTION: This code snippet demonstrates how to use the add_extra_platforms action to extend fastlane's supported platforms list to include Windows and NeoGeo platforms.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_extra_platforms.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nadd_extra_platforms(\n  platforms: [:windows, :neogeo]\n)\n```\n\n----------------------------------------\n\nTITLE: Running Puts Action from CLI\nDESCRIPTION: Commands showing how to execute the puts action directly from the command line, including examples of parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/puts.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run puts\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run puts parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing create_app_online Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the create_app_online action directly in your terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action create_app_online\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to Flock in Ruby with Fastlane\nDESCRIPTION: This code snippet demonstrates how to use the flock action in Fastlane to send a simple message to a Flock group. It requires the message text and a token obtained from a Flock incoming webhook.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/flock.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nflock(\n  message: \"Hello\",\n  token: \"xxx\"\n)\n```\n\n----------------------------------------\n\nTITLE: Major Version Increment in Ruby\nDESCRIPTION: Incrementing the major version number using the bump_type parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_version_number(\n  bump_type: \"major\" # Automatically increment major version number\n)\n```\n\n----------------------------------------\n\nTITLE: Running println Action from CLI\nDESCRIPTION: Command to run the println action directly from the terminal without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/println.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run println\n```\n\n----------------------------------------\n\nTITLE: Documentation CLI Command\nDESCRIPTION: Command to display the documentation for the google_play_track_version_codes action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_version_codes.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action google_play_track_version_codes\n```\n\n----------------------------------------\n\nTITLE: Running Podio Item Action from Terminal\nDESCRIPTION: This snippet shows how to run the podio_item action directly from the terminal using the fastlane CLI, both with and without parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/podio_item.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run podio_item\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run podio_item parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Skipping App Version Update\nDESCRIPTION: Option to upload an app without updating the \"Prepare for submission\" version.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nskip_app_version_update(true)\n```\n\n----------------------------------------\n\nTITLE: Running Rocket Action Directly via CLI\nDESCRIPTION: Command to run the rocket action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rocket.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run rocket\n```\n\n----------------------------------------\n\nTITLE: Carthage CLI Documentation Command\nDESCRIPTION: Command to display Carthage action documentation in terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/carthage.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane action carthage\n```\n\n----------------------------------------\n\nTITLE: Running backup_file from the command line\nDESCRIPTION: This command shows how to execute the backup_file action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/backup_file.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run backup_file\n```\n\n----------------------------------------\n\nTITLE: Displaying Appaloosa Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the Appaloosa plugin directly in the terminal using Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appaloosa.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action appaloosa\n```\n\n----------------------------------------\n\nTITLE: Displaying Jazzy Action Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the jazzy action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jazzy.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action jazzy\n```\n\n----------------------------------------\n\nTITLE: Viewing Fastlane Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the appetize_viewing_url_generator action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appetize_viewing_url_generator.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action appetize_viewing_url_generator\n```\n\n----------------------------------------\n\nTITLE: CLI Command for make_changelog_from_jenkins\nDESCRIPTION: Command-line instructions for running the make_changelog_from_jenkins action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/make_changelog_from_jenkins.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run make_changelog_from_jenkins\n```\n\n----------------------------------------\n\nTITLE: Viewing Rocket Action Documentation via CLI\nDESCRIPTION: Command to view the documentation for the rocket action in the terminal using fastlane's CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rocket.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action rocket\n```\n\n----------------------------------------\n\nTITLE: Running spaceship_logs with Parameters from Terminal\nDESCRIPTION: Command to run the spaceship_logs action from the terminal with specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run spaceship_logs parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Running xctool from Command Line with Fastlane\nDESCRIPTION: Command to run the xctool action directly from the terminal without adding it to your Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctool.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run xctool\n```\n\n----------------------------------------\n\nTITLE: Viewing Documentation for update_project_team in Terminal\nDESCRIPTION: Command to display the documentation for the update_project_team action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_project_team.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action update_project_team\n```\n\n----------------------------------------\n\nTITLE: Fastlane CLI Command Documentation\nDESCRIPTION: Shows how to run the ADB action directly from command line using Fastlane's CLI interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action adb\n```\n\n----------------------------------------\n\nTITLE: Running Flock Action from CLI in Fastlane\nDESCRIPTION: This example shows how to run the flock action directly from the command line using Fastlane's CLI, without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/flock.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run flock\n```\n\n----------------------------------------\n\nTITLE: CLI Usage for create_pull_request Fastlane Action\nDESCRIPTION: Example of running the create_pull_request action directly from the command line using fastlane run, including how to pass parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_pull_request.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run create_pull_request\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run create_pull_request parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Minor Version Increment in Ruby\nDESCRIPTION: Incrementing the minor version number using the bump_type parameter.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_version_number(\n  bump_type: \"minor\" # Automatically increment minor version number\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying ensure_bundle_exec Documentation\nDESCRIPTION: Command to show the documentation for the ensure_bundle_exec action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_bundle_exec.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action ensure_bundle_exec\n```\n\n----------------------------------------\n\nTITLE: Running Opt Out Usage Action from CLI in Fastlane\nDESCRIPTION: This command demonstrates how to run the opt_out_usage action directly from the command line interface. It's useful for one-off executions without modifying the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_usage.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run opt_out_usage\n```\n\n----------------------------------------\n\nTITLE: Displaying Flock Action Documentation in Terminal\nDESCRIPTION: This command shows the documentation for the flock action directly in the terminal. It provides a quick way to access the action's documentation when working with Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/flock.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action flock\n```\n\n----------------------------------------\n\nTITLE: Displaying gcovr Action Documentation in Terminal\nDESCRIPTION: This command shows how to display the documentation for the gcovr action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gcovr.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action gcovr\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Beta Lane Command\nDESCRIPTION: This command runs the beta lane defined in the Fastfile, which will build the app according to the specified configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane beta\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters\nDESCRIPTION: Demonstrates how to pass parameters when running setup_ci from command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_ci.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run setup_ci parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Slack Train Action Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the slack_train action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slack_train.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action slack_train\n```\n\n----------------------------------------\n\nTITLE: Accessing xcode_select Documentation via Terminal\nDESCRIPTION: Command to show the documentation for the xcode_select action in the terminal. This displays all available options and parameters for the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_select.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xcode_select\n```\n\n----------------------------------------\n\nTITLE: Running xcarchive Action from Terminal (Shell)\nDESCRIPTION: Command to show the documentation for the xcarchive action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcarchive.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action xcarchive\n```\n\n----------------------------------------\n\nTITLE: Viewing push_git_tags Documentation\nDESCRIPTION: Command to show the documentation for the push_git_tags action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_git_tags.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action push_git_tags\n```\n\n----------------------------------------\n\nTITLE: Displaying Twitter Action Documentation in Terminal\nDESCRIPTION: Command to show the Twitter action documentation in terminal using Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/twitter.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action twitter\n```\n\n----------------------------------------\n\nTITLE: Viewing Puts Action Documentation via CLI\nDESCRIPTION: Command to display the puts action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/puts.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action puts\n```\n\n----------------------------------------\n\nTITLE: Complex Version Number Configuration in Ruby\nDESCRIPTION: Setting a specific version number and specifying a custom Xcode project path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nincrement_version_number(\n  version_number: \"2.1.1\",      # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj: \"./path/to/MyApp.xcodeproj\"  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n```\n\n----------------------------------------\n\nTITLE: Showing documentation in terminal for download_universal_apk_from_google_play action\nDESCRIPTION: Command to display the documentation for the download_universal_apk_from_google_play action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_universal_apk_from_google_play.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action download_universal_apk_from_google_play\n```\n\n----------------------------------------\n\nTITLE: Showing produce action documentation in terminal\nDESCRIPTION: Command to display the documentation for the produce action directly in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_22\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action produce\n```\n\n----------------------------------------\n\nTITLE: Running ensure_git_status_clean with Parameters\nDESCRIPTION: This snippet demonstrates how to run the ensure_git_status_clean action from the CLI with custom parameters. It shows the syntax for passing multiple parameters to the action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_status_clean.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run ensure_git_status_clean parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation in Terminal for slack_train_crash Action\nDESCRIPTION: Command to show documentation for the slack_train_crash action in the terminal using fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slack_train_crash.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action slack_train_crash\n```\n\n----------------------------------------\n\nTITLE: Viewing XCClean Documentation in Terminal\nDESCRIPTION: Command to display xcclean documentation in the terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcclean.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action xcclean\n```\n\n----------------------------------------\n\nTITLE: List of Available Language Codes for Snapshot Testing\nDESCRIPTION: Ruby array containing all language codes supported by fastlane's snapshot tool. These can be used to specify which localizations to capture screenshots for.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Viewing Danger Documentation\nDESCRIPTION: Command-line example showing how to display the danger action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/danger.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action danger\n```\n\n----------------------------------------\n\nTITLE: Running the say Action from CLI\nDESCRIPTION: Command to run the \"say\" action directly from the terminal without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/say.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run say\n```\n\n----------------------------------------\n\nTITLE: Setting Up Semaphore in Fastfile\nDESCRIPTION: This Ruby code snippet demonstrates how to set up Semaphore in the Fastfile. It uses the 'setup_semaphore' method in the 'before_all' block, which will run before all other Fastlane actions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/semaphore.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbefore_all do\n  setup_semaphore\nend\n```\n\n----------------------------------------\n\nTITLE: Generate App Privacy Details JSON without Uploading via CLI\nDESCRIPTION: This CLI command runs the upload_app_privacy_details_to_app_store action with the skip_upload parameter set to true. It will prompt for privacy details and save them to a JSON file without uploading to App Store Connect.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/uploading-app-privacy-details.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nfastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\" \\\n  skip_upload:true\n```\n\n----------------------------------------\n\nTITLE: Running Recreate Schemes via CLI\nDESCRIPTION: Commands showing how to run the recreate_schemes action directly from the terminal, including an example of passing parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/recreate_schemes.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run recreate_schemes\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run recreate_schemes parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Remote Branch Documentation\nDESCRIPTION: Command to show the git_remote_branch action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/git_remote_branch.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action git_remote_branch\n```\n\n----------------------------------------\n\nTITLE: Running Apteligent Action as One-off Command\nDESCRIPTION: Command to run the apteligent action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/apteligent.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run apteligent\n```\n\n----------------------------------------\n\nTITLE: Creating Apple Pay merchant identifiers with fastlane produce\nDESCRIPTION: Example command for creating a new Apple Pay Merchant Identifier with organization ID and readable name parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce merchant -o merchant.com.example.production -r \"Example Merchant Production\"\n```\n\n----------------------------------------\n\nTITLE: Copying Spaceship Logs to a Directory in Ruby\nDESCRIPTION: Example of using spaceship_logs to find logs and copy them to a specified directory path.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nspaceship_logs(\n  copy_to_path: \"/tmp/artifacts\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Fastlane Tests from Command Line\nDESCRIPTION: The command to run the tests lane from the terminal, which triggers the configured test tasks.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/running-tests.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane tests\n```\n\n----------------------------------------\n\nTITLE: Displaying DotGPG Environment Action Documentation\nDESCRIPTION: Command to show the documentation for the dotgpg_environment action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/dotgpg_environment.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action dotgpg_environment\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Urban Airship Configuration\nDESCRIPTION: Command line interface example for running the Urban Airship configuration update as a one-off command without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_urban_airship_configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_urban_airship_configuration\n```\n\n----------------------------------------\n\nTITLE: Basic Scan Usage\nDESCRIPTION: Simplest way to run tests using Fastlane scan with default configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane scan\n```\n\n----------------------------------------\n\nTITLE: Installing Screengrab via Ruby Gem\nDESCRIPTION: Command to install fastlane, which includes the screengrab tool, via Ruby gem.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_android_screenshots.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngem install fastlane\n```\n\n----------------------------------------\n\nTITLE: Disabling Colored Output in Fastlane using Bash\nDESCRIPTION: These commands set environment variables to disable ANSI colors in Fastlane output, useful for CI machines.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/faqs.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport FASTLANE_DISABLE_COLORS=1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport NO_COLOR=1\n```\n\n----------------------------------------\n\nTITLE: Displaying Opt Out Usage Action Documentation in Terminal\nDESCRIPTION: This command shows the documentation for the opt_out_usage action in the terminal. It provides a quick way to access information about the action's usage and parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_usage.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action opt_out_usage\n```\n\n----------------------------------------\n\nTITLE: Executing Fastlane Test Lane Command\nDESCRIPTION: Terminal command to run the defined 'tests' lane in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/running-tests.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane tests\n```\n\n----------------------------------------\n\nTITLE: Basic Mercurial Version Bump Commit\nDESCRIPTION: Simple example of committing a version bump to a Mercurial repository using default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/hg_commit_version_bump.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nhg_commit_version_bump\n```\n\n----------------------------------------\n\nTITLE: Viewing Splunk MINT Action Documentation\nDESCRIPTION: Command to display the full documentation for the splunkmint action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/splunkmint.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action splunkmint\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Travis Setup\nDESCRIPTION: Command line instruction to run the setup_travis action directly from terminal without adding to Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_travis.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run setup_travis\n```\n\n----------------------------------------\n\nTITLE: Running Register Device Action from Command Line\nDESCRIPTION: This snippet demonstrates how to execute the register_device action directly from the command line as a one-off command without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/register_device.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run register_device\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running ADB Devices Action\nDESCRIPTION: Command-line interface example for running the adb_devices action directly from the terminal without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb_devices.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run adb_devices\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of spaceship_logs in Ruby\nDESCRIPTION: Simple example of using the spaceship_logs action with default parameters to find Spaceship logs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_logs.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nspaceship_logs\n```\n\n----------------------------------------\n\nTITLE: Running download_app_privacy_details_from_app_store with Parameters via CLI\nDESCRIPTION: Shows how to pass parameters to the action when running it from the command line. This example demonstrates the syntax for providing parameters to the CLI command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_app_privacy_details_from_app_store.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download_app_privacy_details_from_app_store parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Showing ADB Devices Documentation in Terminal\nDESCRIPTION: Command to display the full documentation for the adb_devices action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/adb_devices.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action adb_devices\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic for fastlane Documentation\nDESCRIPTION: This JavaScript snippet implements a redirection mechanism that maps anchor links from the deprecated advanced fastlane documentation page to their new locations. It extracts the hash from the current URL and redirects users to the corresponding new location.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Closure-wrapped for security.\n(function () {\n    var anchorMap = {\n        // templates\n        \"A\": \"/advanced/actions/\",\n        \"B\": \"/advanced/Appfile/\",\n        \"C\": \"/advanced/Fastfile/\",\n        \"D\": \"/advanced/lanes/\",\n        \"E\": \"/advanced/other/\",\n        \"F\": \"/advanced/fastlane/\",\n        // actual anchors\n        \"passing-parameters\": \"/advanced/lanes/\",\n        \"switching-lanes\": \"/advanced/lanes/\",\n        \"output-environment-variables\": \"/advanced/fastlane/\",\n        \"interacting-with-the-user\": \"/advanced/actions/\",\n        \"run-actions-directly\": \"/advanced/actions/\",\n        \"shell-values\": \"/advanced/actions/\",\n        \"priorities-of-parameters-and-options\": \"/advanced/fastlane/\",\n        \"importing-another-fastfile\": \"/advanced/Fastfile/\",\n        \"using-fastlane_require\": \"/advanced/Fastfile/\",\n        \"environment-variables\": \"/advanced/other/\",\n        \"lane-properties\": \"/advanced/lanes/\",\n        \"lane-context\": \"/advanced/lanes/\",\n        \"private-lanes\": \"/advanced/lanes/\",\n        \"load-own-actions-from-external-folder\": \"/advanced/Fastfile/\",\n        \"skip-update-check-when-launching-fastlane\": \"/advanced/fastlane/\",\n        \"hide-changelog-information-at-the-end-of-running-fastlane\": \"/advanced/fastlane/\",\n        \"adding-credentials\": \"/advanced/other/\",\n        \"control-configuration-by-lane-and-by-platform\": \"/advanced/lanes/\",\n        \"manually-manage-the-fastlane-match-repo\": \"/advanced/other/\",\n        \"directory-behavior\": \"/advanced/fastlane/\",\n        \"appfile\": \"/advanced/Appfile/\",\n        \"building-actions\": \"/advanced/actions/\",\n    }\n    /*\n    * Best practice for extracting hashes:\n    * https://stackoverflow.com/a/10076097/151365\n    */\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        /*\n        * Best practice for javascript redirects: \n        * https://stackoverflow.com/a/506004/151365\n        */\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();\n```\n\n----------------------------------------\n\nTITLE: Viewing Command Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the notify action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/notify.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action notify\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Control Ignore Patterns for Fastlane Files\nDESCRIPTION: This snippet demonstrates the recommended patterns to add to .gitignore or .hgignore files to exclude Fastlane-generated temporary files and artifacts from version control.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/source-control.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\n# fastlane specific\n**/fastlane/report.xml\n\n# deliver temporary files\n**/fastlane/Preview.html\n\n# snapshot generated screenshots\n**/fastlane/screenshots\n\n# scan temporary files\n**/fastlane/test_output\n```\n\n----------------------------------------\n\nTITLE: Displaying Slack Train Start Documentation in Terminal\nDESCRIPTION: Command to show the documentation for the slack_train_start action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/slack_train_start.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action slack_train_start\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files in Version Bump Commit\nDESCRIPTION: Uses a regular expression to exclude specific files from being considered in the version bump commit, useful for handling complex project structures.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  ignore: /OtherProject/ # ignore files matching a regular expression\n)\n```\n\n----------------------------------------\n\nTITLE: Reinstalling App Before Running snapshot\nDESCRIPTION: Ruby code to reinstall the app before running snapshot, specifying the app identifier.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ncapture_screenshots(reinstall_app: true, app_identifier: \"tools.fastlane.app\")\n```\n\n----------------------------------------\n\nTITLE: Running opt_out_crash_reporting Action with Parameters\nDESCRIPTION: Example of running the opt_out_crash_reporting action with parameters from the command line using the colon syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/opt_out_crash_reporting.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run opt_out_crash_reporting parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Trade Representative Contact Information\nDESCRIPTION: Setting up contact information for the Korean App Store.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appstore.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ntrade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)\n```\n\n----------------------------------------\n\nTITLE: Prompting for Changelog Input in Ruby using Fastlane\nDESCRIPTION: This snippet demonstrates how to use the 'prompt' action to ask the user for a changelog input. It's a simple one-line usage of the prompt action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/prompt.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nchangelog = prompt(text: \"Changelog: \")\n```\n\n----------------------------------------\n\nTITLE: Running Fastlane Release Command\nDESCRIPTION: Command line instruction for executing the release lane defined in the Fastfile\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane release\n```\n\n----------------------------------------\n\nTITLE: Printing Text with Puts in Ruby\nDESCRIPTION: Basic example showing how to use the puts action to print a message in a Fastlane workflow.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/puts.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nputs \"Hi there\"\n```\n\n----------------------------------------\n\nTITLE: Including Specific Settings Plist in Version Bump Commit\nDESCRIPTION: Specifies a particular plist file within the Settings.bundle to include in the version bump commit.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/commit_version_bump.md#2025-04-17_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncommit_version_bump(\n  settings: \"About.plist\" # Include Settings.bundle/About.plist\n)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Android Build Directory with Gradle in Ruby\nDESCRIPTION: Example showing how to clean the build directory, removing generated APKs and AABs by running the clean task.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_android_app.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ngradle(\n  task: \"clean\"\n)\n```\n\n----------------------------------------\n\nTITLE: Example GitHub Release JSON Response\nDESCRIPTION: This JSON snippet shows the structure and content of a typical response from the GitHub API when retrieving release information. It includes details such as URLs, release metadata, author information, and assets.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_github_release.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\":\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n   \"assets_url\":\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n   \"upload_url\":\"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n   \"html_url\":\"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n   \"id\":1537713,\n   \"tag_name\":\"1.8.0\",\n   \"target_commitish\":\"master\",\n   \"name\":\"1.8.0 Switch Lanes & Pass Parameters\",\n   \"draft\":false,\n   \"author\":\n    {\"login\":\"KrauseFx\",\n     \"id\":869950,\n     \"avatar_url\":\"https://avatars.githubusercontent.com/u/869950?v=3\",\n     \"gravatar_id\":\"\",\n     \"url\":\"https://api.github.com/users/KrauseFx\",\n     \"html_url\":\"https://github.com/fastlane\",\n     \"followers_url\":\"https://api.github.com/users/KrauseFx/followers\",\n     \"following_url\":\"https://api.github.com/users/KrauseFx/following{/other_user}\",\n     \"gists_url\":\"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n     \"starred_url\":\"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n     \"subscriptions_url\":\"https://api.github.com/users/KrauseFx/subscriptions\",\n     \"organizations_url\":\"https://api.github.com/users/KrauseFx/orgs\",\n     \"repos_url\":\"https://api.github.com/users/KrauseFx/repos\",\n     \"events_url\":\"https://api.github.com/users/KrauseFx/events{/privacy}\",\n     \"received_events_url\":\"https://api.github.com/users/KrauseFx/received_events\",\n     \"type\":\"User\",\n     \"site_admin\":false},\n   \"prerelease\":false,\n   \"created_at\":\"2015-07-14T23:33:01Z\",\n   \"published_at\":\"2015-07-14T23:44:10Z\",\n   \"assets\":[],\n   \"tarball_url\":\"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n   \"zipball_url\":\"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n   \"body\": \"This is one of the biggest updates of _fastlane_ yet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Xcode Export Archive Command\nDESCRIPTION: The xcrun command used by fastlane's gym to export an archived application, which can be run manually to isolate and debug export issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/codesigning/common-issues.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/usr/bin/xcrun /Users/rob/.fastlane/bin/bundle/lib/ruby/gems/2.2.0/gems/fastlane-2.24.0/gym/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_config20170330-65021-1xbw0ov.plist' -archivePath /Users/rob/Library/Developer/Xcode/Archives/2017-03-30/MyApp\\ 2017-03-30\\ 21.12.02.xcarchive -exportPath '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_output20170330-65021-u80ojn'\n```\n\n----------------------------------------\n\nTITLE: Running backup_xcarchive from command line\nDESCRIPTION: This example shows how to run the backup_xcarchive action directly from the terminal using the fastlane CLI. It demonstrates the basic command to show documentation and how to execute the action with parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/backup_xcarchive.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action backup_xcarchive\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run backup_xcarchive\n```\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run backup_xcarchive parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Displaying All Available Pilot Options\nDESCRIPTION: Shows all possible parameters that can be used with the pilot action in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_testflight.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action pilot\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for Download from Play Store Action\nDESCRIPTION: Command line instruction showing how to run the download_from_play_store action with parameters directly from the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_from_play_store.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download_from_play_store parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Storage in Matchfile\nDESCRIPTION: Example content of a Matchfile for Amazon S3 Storage. Specifies the S3 bucket name.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/match.md#2025-04-17_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ns3_bucket(\"ios-certificates\")\n```\n\n----------------------------------------\n\nTITLE: Using setup_jenkins Action in Ruby\nDESCRIPTION: This snippet demonstrates how to use the setup_jenkins action in a Fastfile. It calls the action without any parameters, which will use default values for all options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/setup_jenkins.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nsetup_jenkins\n```\n\n----------------------------------------\n\nTITLE: Running iOS Tests with xcodebuild (Pre-scan)\nDESCRIPTION: Example of running iOS tests directly with xcodebuild command before using scan. Shows the verbose and complex command structure required.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcodebuild \\\n  -workspace MyApp.xcworkspace \\\n  -scheme \"MyApp\" \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n  test\n```\n\n----------------------------------------\n\nTITLE: Running spaceship_stats with Parameters from CLI\nDESCRIPTION: Example showing how to pass parameters to the spaceship_stats action when running from the command line. Parameters use the colon syntax to specify name-value pairs.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_stats.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run spaceship_stats parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Using the Appstore Alias for App Store Upload\nDESCRIPTION: Example showing the 'appstore' alias for the 'upload_to_app_store' command. This is another shorthand way to invoke the same functionality.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nappstore  # alias for \"upload_to_app_store\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Environment for Fastlane Updates\nDESCRIPTION: This snippet shows how to configure the bash environment to allow Fastlane to update without sudo access. It sets the GEM_HOME and updates the PATH.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_fastlane.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin\n```\n\n----------------------------------------\n\nTITLE: Basic Jazzy Documentation Generation in Ruby\nDESCRIPTION: A simple invocation of the jazzy action in a Fastfile to generate documentation using default settings.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/jazzy.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\njazzy\n```\n\n----------------------------------------\n\nTITLE: Running Flock Action with Parameters from CLI in Fastlane\nDESCRIPTION: This command demonstrates how to run the flock action from the command line while passing specific parameters. It uses the colon syntax to specify parameter values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/flock.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run flock parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Trade Representative Contact Configuration\nDESCRIPTION: Configuration for Korean App Store trade representative contact information\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ntrade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing Action Documentation\nDESCRIPTION: Command to display the full documentation for the set_github_release action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/set_github_release.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane action set_github_release\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for update_app_group_identifiers Action\nDESCRIPTION: This example shows how to pass parameters to the update_app_group_identifiers action when running it directly from the command line, using the colon symbol to separate parameter names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_app_group_identifiers.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_app_group_identifiers parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Fastlane CLI Commands\nDESCRIPTION: Example of how to pass parameters to a fastlane action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/fastlane_version.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run fastlane_version parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Git Commit Changelog Generation\nDESCRIPTION: Example of the changelog_from_git_commits action with additional parameters to specify the commit range and filter out merge commits from the release notes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)\n```\n\n----------------------------------------\n\nTITLE: View Gym Action Documentation via CLI\nDESCRIPTION: Command to display the gym action documentation in the terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/gym.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action gym\n```\n\n----------------------------------------\n\nTITLE: Running Gym in Verbose Mode\nDESCRIPTION: Command to run gym with verbose output for troubleshooting issues.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_mac_app.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane gym --verbose\n```\n\n----------------------------------------\n\nTITLE: Displaying SwiftLint Documentation in Terminal\nDESCRIPTION: Command to show the complete documentation for the swiftlint action in the terminal. This is useful for quick reference when working with Fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/swiftlint.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action swiftlint\n```\n\n----------------------------------------\n\nTITLE: Running lane_context Action with Parameters\nDESCRIPTION: This example shows how to run the lane_context action with parameters from the terminal using Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/lane_context.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run lane_context parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools on macOS\nDESCRIPTION: This command installs the Xcode command line tools on macOS. These tools are required for many development tasks including using git, compiling code, and running various development utilities.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/includes/installing-fastlane-ios.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Running Debug Action with Parameters via CLI\nDESCRIPTION: Example of how to run the debug action from the terminal while passing parameters, using the colon syntax to separate parameter names and values.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/debug.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run debug parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Action Documentation via CLI\nDESCRIPTION: Shows the command to display the documentation for the download_app_privacy_details_from_app_store action in the terminal. This provides a quick way to access action documentation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_app_privacy_details_from_app_store.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action download_app_privacy_details_from_app_store\n```\n\n----------------------------------------\n\nTITLE: Running push_git_tags from CLI\nDESCRIPTION: Command to run the push_git_tags action directly from the terminal without a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_git_tags.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run push_git_tags\n```\n\n----------------------------------------\n\nTITLE: Uploading App Privacy Details with Custom JSON Path in Ruby using Fastlane\nDESCRIPTION: This example shows how to use the upload_app_privacy_details_to_app_store action with an additional parameter to specify a custom JSON path for the app data usages file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_app_privacy_details_to_app_store.md#2025-04-17_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  json_path: \"fastlane/app_data_usages.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Assets from Xcode Server Bot in Ruby\nDESCRIPTION: This snippet demonstrates how to use the xcode_server_get_assets action to download assets from a specific Xcode Server Bot. It specifies the host IP address and bot name as parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_server_get_assets.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nxcode_server_get_assets(\n  host: \"10.99.0.59\", # Specify Xcode Server's Host or IP Address\n  bot_name: \"release-1.3.4\" # Specify the particular Bot\n)\n```\n\n----------------------------------------\n\nTITLE: Running xcode_select as a One-off Command\nDESCRIPTION: Command to run the xcode_select action directly from the terminal without adding it to a Fastfile. This is useful for one-time operations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcode_select.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run xcode_select\n```\n\n----------------------------------------\n\nTITLE: Displaying Run Tests Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the run_tests action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/run_tests.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action run_tests\n```\n\n----------------------------------------\n\nTITLE: Setting In-App Update Priority for APK Release in Shell\nDESCRIPTION: Command for uploading an APK to the beta track while specifying an in-app update priority level of 3 (on a scale of 0-5).\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/upload_to_play_store.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfastlane supply --apk path/app.apk --track beta --in_app_update_priority 3\n```\n\n----------------------------------------\n\nTITLE: Accessing Launch Arguments in Swift via UserDefaults\nDESCRIPTION: Swift code showing how to access launch arguments that were passed in key-value format. This allows your app to use different configurations during snapshot testing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n```\n\n----------------------------------------\n\nTITLE: Running the Import Action with Parameters from CLI\nDESCRIPTION: This command shows how to run the import action with parameters from the terminal using the colon symbol for parameter assignments.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/import.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run import parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting Array Parameters via Environment Variables\nDESCRIPTION: Shows how to set array parameters using environment variables with comma-separated values in the shell.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/actions.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport MY_NEW_ACTION_FILES=file1.txt,file2.txt\n```\n\n----------------------------------------\n\nTITLE: Running the Rsync Action from Command Line\nDESCRIPTION: Command to show the rsync action documentation directly in the terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rsync.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action rsync\n```\n\n----------------------------------------\n\nTITLE: Updating All Plugins\nDESCRIPTION: Command to update all installed plugins to their latest versions.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/plugins/using-plugins.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane update_plugins\n```\n\n----------------------------------------\n\nTITLE: Installing mkdocs Dependencies with pipenv\nDESCRIPTION: Shell commands to set up the Python environment needed for mkdocs. Installs Python 3, pipenv, creates a virtual environment, and installs dependencies from Pipfile.lock.\nSOURCE: https://github.com/fastlane/docs/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbrew install python3 # if you don't have pip already\nbrew install pipenv\npipenv --three\n# install dependencies from Pipfile.lock and run shell\npipenv install\npipenv shell\n```\n\n----------------------------------------\n\nTITLE: Direct Key Definition in Fastfile - Ruby\nDESCRIPTION: Example showing how to directly define API tokens and secrets within a Fastlane configuration file using explicit parameters in the crashlytics action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/keys.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlane :beta do\n  crashlytics(api_token: \"123abc\", build_secret: \"secret_key\")\nend\n```\n\n----------------------------------------\n\nTITLE: Upload PKG File for MacOS Apps\nDESCRIPTION: Command to upload a PKG file for MacOS applications\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deliver.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane deliver --pkg \"MacApp.pkg\"\n```\n\n----------------------------------------\n\nTITLE: Mailgun CLI Usage in Fastlane\nDESCRIPTION: Example of running the mailgun action directly from the command line interface rather than within a Fastfile. This demonstrates passing parameters using the CLI syntax.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/mailgun.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run mailgun\n```\n\n----------------------------------------\n\nTITLE: Displaying min_fastlane_version Documentation via CLI\nDESCRIPTION: Command to display the documentation for the min_fastlane_version action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/min_fastlane_version.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action min_fastlane_version\n```\n\n----------------------------------------\n\nTITLE: Framing Android Screenshots with frameit\nDESCRIPTION: Configuring frameit to specifically use Android device frames for screenshots instead of the default iOS frames.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frameit.md#2025-04-17_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nframe_screenshots(use_platform: \"ANDROID\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Gemfile for fastlane on CircleCI\nDESCRIPTION: Creates a basic Gemfile that specifies fastlane as a dependency. This file is required for CircleCI to properly install and use fastlane during the CI process.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/best-practices/continuous-integration/circle-ci.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS App Screenshot Framing in Frameit\nDESCRIPTION: JSON configuration for macOS applications showing how to position screenshots on a background image with Mac. Specifies offset values and title height for proper positioning.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/frame_screenshots.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": {\n    \"title\": {\n      \"color\": \"#545454\"\n    },\n    \"background\": \"Mac.jpg\",\n    \"offset\": {\n      \"offset\": \"+676+479\",\n      \"titleHeight\": 320\n    }\n  },\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters Example\nDESCRIPTION: Example showing how to run the google_play_track_version_codes action from terminal with specific parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_version_codes.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run google_play_track_version_codes parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Show Documentation Command - Shell\nDESCRIPTION: Command to display the action's documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_release_names.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action google_play_track_release_names\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Notifications for Test Results\nDESCRIPTION: Configuration for posting test results to Slack using fastlane's built-in Slack integration in the run_tests action.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/running-tests.md#2025-04-17_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nlane :tests do\n  run_tests(scheme: \"MyAppTests\",\n            slack_url: \"https://hooks.slack.com/services/T03N...\",\n            slack_channel: \"#channel\")\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Helper Files in fastlane\nDESCRIPTION: Command to update the SnapshotHelper.swift files when required by fastlane. This ensures that your snapshot scripts use the latest helper implementations.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane snapshot update\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running push_to_git_remote in Terminal\nDESCRIPTION: Command to run the push_to_git_remote action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/push_to_git_remote.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run push_to_git_remote\n```\n\n----------------------------------------\n\nTITLE: CLI Command Example - Shell\nDESCRIPTION: Shows how to run the action from command line interface, including how to pass parameters.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/google_play_track_release_names.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run google_play_track_release_names\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run google_play_track_release_names parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing spaceship_stats Documentation in Terminal\nDESCRIPTION: Command to display the documentation for the spaceship_stats action directly in the terminal. This provides a quick way to reference the action's usage without visiting the online documentation.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/spaceship_stats.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action spaceship_stats\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters Example\nDESCRIPTION: Example showing how to run the get_version_number action with parameters from command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/get_version_number.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfastlane run get_version_number parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Fastlane.swift with terminal command\nDESCRIPTION: Terminal command to initialize a Fastlane.swift project. This creates the necessary Swift project structure for fastlane configuration.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfastlane init swift\n```\n\n----------------------------------------\n\nTITLE: Posting Slack Deploy Messages with Fastlane\nDESCRIPTION: This command runs the 'post_slack_deploy_message' action in fastlane, which sends deployment notifications to Slack.\nSOURCE: https://github.com/fastlane/docs/blob/master/fastlane/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane post_slack_deploy_message\n```\n\n----------------------------------------\n\nTITLE: Using Gym Alias for build_app\nDESCRIPTION: Shows that gym is an alias for the build_app command in fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_ios_app.md#2025-04-17_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ngym    # alias for \"build_app\"\n```\n\n----------------------------------------\n\nTITLE: CLI Run Command\nDESCRIPTION: Command to run increment_version_number directly from terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_version_number.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run increment_version_number\n```\n\n----------------------------------------\n\nTITLE: Displaying is_ci Documentation via CLI\nDESCRIPTION: Command to show the is_ci action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/is_ci.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action is_ci\n```\n\n----------------------------------------\n\nTITLE: Getting help for merchant creation with fastlane produce\nDESCRIPTION: Command to view all available parameters for creating Apple Pay merchant identifiers.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_14\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce merchant --help\n```\n\n----------------------------------------\n\nTITLE: Displaying IFTTT Documentation in Terminal\nDESCRIPTION: Command to show the detailed documentation for the ifttt action in your terminal using the Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ifttt.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action ifttt\n```\n\n----------------------------------------\n\nTITLE: Accessing Launch Arguments in Swift\nDESCRIPTION: Swift code showing how to access launch arguments provided by snapshot in the app.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n```\n\n----------------------------------------\n\nTITLE: Viewing xcexport Documentation in Terminal\nDESCRIPTION: Command to show the xcexport action documentation in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xcexport.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action xcexport\n```\n\n----------------------------------------\n\nTITLE: Viewing Bundle Install Documentation in Terminal\nDESCRIPTION: Command to display the bundle_install action documentation in the terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/bundle_install.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action bundle_install\n```\n\n----------------------------------------\n\nTITLE: Running restore_file Action from Command Line in Fastlane CLI\nDESCRIPTION: This command shows how to run the 'restore_file' action directly from the command line using Fastlane CLI. It allows for passing parameters using the ':' symbol.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/restore_file.md#2025-04-17_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nfastlane run restore_file parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for add_extra_platforms Action\nDESCRIPTION: This command shows how to display the documentation for the add_extra_platforms action in the terminal using fastlane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/add_extra_platforms.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action add_extra_platforms\n```\n\n----------------------------------------\n\nTITLE: Using the Snapshot Alias\nDESCRIPTION: Ruby example demonstrating the 'snapshot' alias for the capture_ios_screenshots command.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_screenshots.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nsnapshot # alias for \"capture_ios_screenshots\"\n```\n\n----------------------------------------\n\nTITLE: Updating Available Plugins in Fastlane\nDESCRIPTION: This command runs the 'update_available_plugins' action in fastlane to refresh the list of available plugins.\nSOURCE: https://github.com/fastlane/docs/blob/master/fastlane/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane update_available_plugins\n```\n\n----------------------------------------\n\nTITLE: Running the environment_variable action from terminal\nDESCRIPTION: Command to display the environment_variable action documentation in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/environment_variable.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action environment_variable\n```\n\n----------------------------------------\n\nTITLE: Using Snapshot Alias in Ruby\nDESCRIPTION: Ruby code using the 'snapshot' alias which is equivalent to 'capture_ios_screenshots'. This is a common shorthand used in Fastfiles.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/snapshot.md#2025-04-17_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nsnapshot # alias for \"capture_ios_screenshots\"\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to reset_simulator_contents via CLI\nDESCRIPTION: Example showing how to pass parameters to the reset_simulator_contents action when running it from the command line.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/reset_simulator_contents.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run reset_simulator_contents parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Action Documentation in Terminal\nDESCRIPTION: Shows the command to display the documentation for increment_build_number directly in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/increment_build_number.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action increment_build_number\n```\n\n----------------------------------------\n\nTITLE: Running build_and_upload_to_appetize from CLI\nDESCRIPTION: Commands showing how to run the build_and_upload_to_appetize action directly from the command line, including examples of parameter passing\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/build_and_upload_to_appetize.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run build_and_upload_to_appetize\n```\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run build_and_upload_to_appetize parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: Viewing ChatWork Action Documentation\nDESCRIPTION: Command to display the ChatWork action documentation in terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/chatwork.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action chatwork\n```\n\n----------------------------------------\n\nTITLE: Configuring Deliver to Use Newly Created App in Ruby\nDESCRIPTION: This snippet shows how to configure the Deliver action to use the newly created app by referencing the App ID generated by Produce.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/produce.md#2025-04-17_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\napple_id(ENV['PRODUCE_APPLE_ID'])\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests with Fastlane CLI\nDESCRIPTION: Command to display RSpec action documentation in terminal using Fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rspec.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action rspec\n```\n\n----------------------------------------\n\nTITLE: Viewing DeployGate action documentation\nDESCRIPTION: This command shows how to display the documentation for the deploygate action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/deploygate.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action deploygate\n```\n\n----------------------------------------\n\nTITLE: Show Action Documentation\nDESCRIPTION: Command to display the full documentation for the version_get_podspec action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/version_get_podspec.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action version_get_podspec\n```\n\n----------------------------------------\n\nTITLE: Reinstalling ImageMagick from Source\nDESCRIPTION: Commands to reinstall ImageMagick from source if encountering issues with PNG decoding.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/screenshots.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source\n```\n\n----------------------------------------\n\nTITLE: Viewing Appium Documentation\nDESCRIPTION: Command to display the Appium action documentation in terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appium.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action appium\n```\n\n----------------------------------------\n\nTITLE: Passing parameters to lanes from command line\nDESCRIPTION: Command line syntax for passing key-value parameters to a Fastlane lane.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/ios/fastlane-swift.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n```\n\n----------------------------------------\n\nTITLE: Displaying xctool Documentation in Terminal\nDESCRIPTION: Command to show the xctool action documentation directly in your terminal using the fastlane CLI.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/xctool.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action xctool\n```\n\n----------------------------------------\n\nTITLE: Importing Local Fastfile\nDESCRIPTION: Demonstrates how to import another Fastfile from a local path and override lanes.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/advanced/Fastfile.md#2025-04-17_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nimport \"../GeneralFastfile\"\n\noverride_lane :from_general do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Rocket Action in Ruby\nDESCRIPTION: This example shows how to use the rocket action in a Fastfile. It simply calls the 'rocket' method without any parameters to print an ASCII rocket in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/rocket.md#2025-04-17_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrocket\n```\n\n----------------------------------------\n\nTITLE: Running the Fastlane Test Action\nDESCRIPTION: This command executes the 'test' action in fastlane, with an optional prefix to run it through bundle.\nSOURCE: https://github.com/fastlane/docs/blob/master/fastlane/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[bundle exec] fastlane test\n```\n\n----------------------------------------\n\nTITLE: Viewing Documentation via CLI\nDESCRIPTION: Command to display the documentation for the capture_ios_screenshots action in the terminal\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/capture_ios_screenshots.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nfastlane action capture_ios_screenshots\n```\n\n----------------------------------------\n\nTITLE: Adding Screengrab Gradle Dependency\nDESCRIPTION: Java code snippet showing how to add the screengrab dependency to the Android project's build.gradle file.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/screengrab.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nandroidTestImplementation 'tools.fastlane:screengrab:x.x.x'\n```\n\n----------------------------------------\n\nTITLE: Viewing Action Documentation via CLI\nDESCRIPTION: Command to display the full documentation for the Urban Airship configuration update action in the terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_urban_airship_configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action update_urban_airship_configuration\n```\n\n----------------------------------------\n\nTITLE: Getting Gradle Action Parameters\nDESCRIPTION: Command to display all available parameters for the gradle action in Fastlane, useful for configuring build options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/beta-deployment.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action gradle\n```\n\n----------------------------------------\n\nTITLE: Running appetize_viewing_url_generator from CLI\nDESCRIPTION: Command to execute the appetize_viewing_url_generator action directly from the command line interface without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/appetize_viewing_url_generator.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run appetize_viewing_url_generator\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Associate Merchant Commands in Fastlane Produce\nDESCRIPTION: Command to display the help information for the 'produce associate_merchant' command, which provides details on all available parameters for associating Apple Pay merchants with apps.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/create_app_online.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane produce associate_merchant --help\n```\n\n----------------------------------------\n\nTITLE: Getting information about the gradle action in fastlane\nDESCRIPTION: Command to display documentation for the 'gradle' action in fastlane, showing all available parameters and options.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/getting-started/android/release-deployment.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane action gradle\n```\n\n----------------------------------------\n\nTITLE: Running println Action with Parameters from CLI\nDESCRIPTION: Example of running the println action with parameters from the terminal using the colon syntax for parameter passing.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/println.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane run println parameter1:\"value1\" parameter2:\"value2\"\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Running Download from Play Store Action\nDESCRIPTION: Command line instruction for running the download_from_play_store action directly from the terminal without adding it to a Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/download_from_play_store.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfastlane run download_from_play_store\n```\n\n----------------------------------------\n\nTITLE: Running Echo Action from CLI in Fastlane\nDESCRIPTION: This example shows how to run the 'echo' action directly from the command line interface. It demonstrates the syntax for executing a Fastlane action without adding it to the Fastfile.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/echo.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run echo\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Documentation\nDESCRIPTION: Command to show the action documentation in terminal.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/ensure_git_branch.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nfastlane action ensure_git_branch\n```\n\n----------------------------------------\n\nTITLE: CLI Command with Parameters for Urban Airship Configuration\nDESCRIPTION: Example showing how to pass parameters when running the Urban Airship configuration update via command line interface.\nSOURCE: https://github.com/fastlane/docs/blob/master/docs/generated/actions/update_urban_airship_configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfastlane run update_urban_airship_configuration parameter1:\"value1\" parameter2:\"value2\"\n```"
  }
]